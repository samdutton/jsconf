1
00:00:01,430 --> 00:00:22,880
>> Mathieu 'p01' Henri: Thank you, so, hi,
first off, thanks a lot for having me, it's

2
00:00:22,880 --> 00:00:29,570
my first JSConf 2014, and first time in Berlin,
it's really really nice, I really like it.

3
00:00:29,570 --> 00:00:36,630
So does my daughter, she's having a blast
right now. As he said, my name is Mathieu

4
00:00:36,630 --> 00:00:44,180
'p01' Henri, I'm a JavaScript developer, I've
been there for nine years now. I mostly work

5
00:00:44,180 --> 00:00:51,780
on the desktop router. But most people know
me as PO 1, this is the name I've gone by

6
00:00:51,780 --> 00:00:56,870
for about 25 years.

7
00:00:56,870 --> 00:01:05,079
This is also how I got into opera, I entered
a contest and someone contacted me if I wanted

8
00:01:05,079 --> 00:01:11,520
to join them, I said, sure, let's go. Then
you might be wondering what is the demo scene

9
00:01:11,520 --> 00:01:23,430
that I'm talking about. Demo scene was born
here in Berlin 30 years ago. \h‑‑ very,

10
00:01:23,430 --> 00:01:28,780
very talented hackers, they take commercial
software, reverse engineer them, remove the

11
00:01:28,780 --> 00:01:41,540
protections so we can use them for free. Back
in the '80s we were only\h‑‑ high score

12
00:01:41,540 --> 00:01:47,880
tables, if it was a game look Pac M A N or
anything, or in the splash\h‑‑ of a program

13
00:01:47,880 --> 00:01:49,890
we are cracking.

14
00:01:49,890 --> 00:01:56,170
But in '84, Berlin cracking service did something
really unique, they added their own introto

15
00:01:56,170 --> 00:02:05,520
program they would crack. No emission, no
sound, we're showing the emblem\h‑‑ it

16
00:02:05,520 --> 00:02:13,989
started a revolution, soon the crack started
with this. Became more fancy, it became so

17
00:02:13,989 --> 00:02:24,879
cool, these little demos were released independently
of cracks. Basically it's a group of creative

18
00:02:24,879 --> 00:02:30,299
people that make real‑time audio‑visual
animations they try to push the technical

19
00:02:30,299 --> 00:02:40,219
and creative limits, it's about pushing the
boundaries. Because it's born from that cracking

20
00:02:40,219 --> 00:02:47,409
scene, it's very social, very competitive
the social part you can really see it in the

21
00:02:47,409 --> 00:02:53,790
fact that every year at least 50 events all
around the world, mostly in Europe, but also

22
00:02:53,790 --> 00:03:00,419
in the states, Japan. Some in Australia as
well. We have live concerts, seminars a bit

23
00:03:00,419 --> 00:03:07,559
like here, we explain techniques and various
things. But, most of all, competitions in

24
00:03:07,559 --> 00:03:14,409
many quality I goes, the queen category is
the demo competition where you have 65‑megabytes

25
00:03:14,409 --> 00:03:21,889
124‑megabytes to make the most amazing real‑time
animation you can, this goes down to seven

26
00:03:21,889 --> 00:03:33,549
size constraints, 64, and down to insane 264
bytes, it's not just about programming competitions,

27
00:03:33,549 --> 00:03:42,999
it's also more artistic competitions like
music and\h‑‑ sorry\h‑‑ music and

28
00:03:42,999 --> 00:03:50,549
graphics, so graphic competitions and also
short movies and animations, and uses many,

29
00:03:50,549 --> 00:04:04,510
many platforms. It's also Amega ‑‑
>> Amega! It's also on 8 birth computers,

30
00:04:04,510 --> 00:04:14,909
C 64, but it also goes on mobile phone, video
game consoles modern ones and old ones like

31
00:04:14,909 --> 00:04:22,560
Vetrix, or genesis. But people also make demos
on the most crazy platforms, they make demos

32
00:04:22,560 --> 00:04:32,759
on Oscoscops, some make their own custom hardware
just for the heck of it. This goes far, really

33
00:04:32,759 --> 00:04:39,561
far. The most insane, I think in my mind is
also demos on OHP, overhead display we saw

34
00:04:39,561 --> 00:04:46,509
in high school, junior high school, big lightbulb
on mirror, with plastic sheets people make

35
00:04:46,509 --> 00:04:53,400
demos with that, it's just bizarre.

36
00:04:53,400 --> 00:05:00,889
And\h‑‑ sorry\h‑‑ back then, back
in the '80s the main distribution platform

37
00:05:00,889 --> 00:05:10,520
for demos was you take a stack of disks, send
them by mail and few weeks later you would

38
00:05:10,520 --> 00:05:17,150
get your floppy disks back and stamps back
with more demos, and it would go on and on,

39
00:05:17,150 --> 00:05:26,080
then came the BBSes in the '80s, '90s but
now everything is done on the internet. The

40
00:05:26,080 --> 00:05:31,290
crazy crazy thing, which is not so crazy for
you guys is the web is a viable platform to

41
00:05:31,290 --> 00:05:39,659
make demos. And, really it's about pushing
limits, and one of them is size, so how could

42
00:05:39,659 --> 00:05:48,599
we go about making a small demo on the web?
Well, first of all you need to start from

43
00:05:48,599 --> 00:05:54,770
an idea, a concept. So, your concept for your
small demo can be simple like just an idea

44
00:05:54,770 --> 00:06:01,319
or a word or sketches. I have really like
to sketch my ideas on small story boards,

45
00:06:01,319 --> 00:06:09,120
here you can see a couple of steps like, the
top, one, two, three, four, five, steps. And

46
00:06:09,120 --> 00:06:17,349
something that I do now a bit more is to make
a mood wall. I just go on‑line and save

47
00:06:17,349 --> 00:06:24,050
images over time and sometimes I see some
images inspire me and that could work well

48
00:06:24,050 --> 00:06:29,680
together if I just combine them and animate
them this is the mood board for one project

49
00:06:29,680 --> 00:06:36,449
I'm working on. We will see where this goes.
And once you have your concept, it's time

50
00:06:36,449 --> 00:06:38,469
to prototype it.

51
00:06:38,469 --> 00:06:44,370
The idea of prototyping is really to see if
your concept works, if it's possible in the

52
00:06:44,370 --> 00:06:52,060
constraints you have. It's also about finding
the right technique to display your demo.

53
00:06:52,060 --> 00:07:00,180
The web, first many way to draw things, if
you just want to do simple overlays, the DOM

54
00:07:00,180 --> 00:07:05,700
is perfect, if you want to do street view
kind of things where you have a static observer

55
00:07:05,700 --> 00:07:15,120
that looks around CSS 3D is good for that
theD canvas is okay, and for heavy duty stuff

56
00:07:15,120 --> 00:07:21,870
againGL is king. Here's\h‑‑ web GL is
king. I'm going to show you a preview of a

57
00:07:21,870 --> 00:07:27,840
project I'm working on. So hopefully this
should be finished in a couple of week and

58
00:07:27,840 --> 00:07:34,770
we'll have sound sin crow anytion and it should
be, yeah, good. Still lots of work to do,

59
00:07:34,770 --> 00:07:40,120
but I'll get there. So once you have done
your prototypes and you have\h‑‑ you can

60
00:07:40,120 --> 00:07:47,219
do your ID, optimize it. When you want to
draw things to make animations you will play

61
00:07:47,219 --> 00:07:54,139
a bit with numbers and a bit of trigonometry,
so, there's a couple of cheep approximations

62
00:07:54,139 --> 00:08:01,320
of pie's and fractions of pie's that can save
you some bytes. It sounds crazy but when you

63
00:08:01,320 --> 00:08:10,289
try to do something in 2 $56 bytes that helps,
you need it. Numbers in JavaScript you know

64
00:08:10,289 --> 00:08:16,360
they're actually floating\h‑‑ numbers,
so the first two at the top, increments by

65
00:08:16,360 --> 00:08:24,500
point one will end up with I being equal toll
10.09999 something this is because 0.1 cannot

66
00:08:24,500 --> 00:08:33,219
be expressed in power of\h‑‑ power of
two. The second loop, since the increment

67
00:08:33,219 --> 00:08:39,380
is one over eight, every number in this loop
can be expressed exactly so a loop ends with

68
00:08:39,380 --> 00:08:45,790
ten, looks like nothing, it means during this
loop you can use modular and the modular will

69
00:08:45,790 --> 00:08:54,160
launch exactly, so you can, in a cheap way
nest two loops by just using the right increment,

70
00:08:54,160 --> 00:08:56,550
so that can save you a lot of bytes also.

71
00:08:56,550 --> 00:09:03,899
But, really what you should do is try to reduce
your function footprint, so one thing that

72
00:09:03,899 --> 00:09:13,550
J S told us you should use a function signature.
In this we have two functions, next one doesn't

73
00:09:13,550 --> 00:09:19,250
need these arguments but by using the same
function signature, they will compress better,

74
00:09:19,250 --> 00:09:28,220
so, just add a little bit of\h‑‑ but,
they will compress better in the end. But,

75
00:09:28,220 --> 00:09:33,399
something else you can do is also you can
try oshadow things, in the case of functions

76
00:09:33,399 --> 00:09:38,519
we have these two functions, two things, we
can combine them together, we can make one

77
00:09:38,519 --> 00:09:43,041
function that takes two arguments, and if
one argument is passed we do something, no

78
00:09:43,041 --> 00:09:50,300
argument is passed\h‑‑ we do the second
function. The same goes for code blocks, so

79
00:09:50,300 --> 00:09:57,070
you can have one loop with us, yeah, but,
checks with value of one property, small square

80
00:09:57,070 --> 00:10:01,990
and then put the next position, typically
that's in two loops, first would complete

81
00:10:01,990 --> 00:10:08,959
the position and the second one would do things,
but you can do them together . But these things

82
00:10:08,959 --> 00:10:15,541
are\h‑‑ they're nice but what you should
really do is simplify your idea. Simplify

83
00:10:15,541 --> 00:10:20,220
your technique and how you will do things.
I had the project a few months back which

84
00:10:20,220 --> 00:10:27,250
was called Minami district one thousand buildings
in one thousand bites and spin around. It

85
00:10:27,250 --> 00:10:34,940
looks a bit like this, one common problem
or one big challenge I had was how coI know

86
00:10:34,940 --> 00:10:41,019
which window to actually draw for each building,
so the common way would be the look at one

87
00:10:41,019 --> 00:10:47,300
building and for each window compute the normal
vector for the window, but tells me where

88
00:10:47,300 --> 00:10:52,371
this window is facing, if a Z coordinate is
positive it means it's facing towards the

89
00:10:52,371 --> 00:10:59,740
camera if it's negative it's awhat. It's little
bit difficult to do with one K. So another

90
00:10:59,740 --> 00:11:06,079
way I looked at it is think about how I draw
these windows one side of the window to the

91
00:11:06,079 --> 00:11:14,200
next one if you follow the numbers, one, two,
three, four, if a number actually go towards

92
00:11:14,200 --> 00:11:20,320
your right\h‑‑ towards your left, sorry
it means that the window is facing the camera,

93
00:11:20,320 --> 00:11:24,870
so I draw it, if a difference in X from one
edge to the next one is positive I draw it,

94
00:11:24,870 --> 00:11:32,110
if it's negative I don't draw it, it's facing
away, it was much more compact. So this other

95
00:11:32,110 --> 00:11:39,399
project, which I called Matraka I wanted to
display some kind of crazy surface crazy object

96
00:11:39,399 --> 00:11:46,459
with lighting and I tried many formulas to
describe the surface, I tried to use soft

97
00:11:46,459 --> 00:11:54,220
code as surface, but, the best one was actually
the most simple, it was just Cos X Cos Y.

98
00:11:54,220 --> 00:12:02,949
Very small bumps and the very nice thing about
this is that since it's very simple formula,

99
00:12:02,949 --> 00:12:09,620
it's very simple derivative, and the derivative
gives me the curvature of this surface by\h‑‑

100
00:12:09,620 --> 00:12:16,149
curvature so I know what is\h‑‑ which
light is\h‑‑ so I just take this value

101
00:12:16,149 --> 00:12:21,640
and it gives me light office at a given point.

102
00:12:21,640 --> 00:12:28,040
If you\h‑‑ in the mood board that I showed
you, like one\h‑‑ many, many triangles,

103
00:12:28,040 --> 00:12:33,410
and, how you would do that normally is you
would process all your triangles together

104
00:12:33,410 --> 00:12:37,120
and check the coordinate of the Lee points
and solve them, to know which order to\h‑‑

105
00:12:37,120 --> 00:12:44,079
if the triangles are small enough, you can
think of them as\h‑‑ and just approximate

106
00:12:44,079 --> 00:12:50,100
the particular so you just saw the triangle
individually and not\h‑‑ and it's much

107
00:12:50,100 --> 00:12:52,350
more simple to solve this.

108
00:12:52,350 --> 00:13:01,140
But, this simplification are often not enough,
you often need to go ahead and fake it and

109
00:13:01,140 --> 00:13:08,389
you need to fake many things like graphics
you often want to figure out how to light

110
00:13:08,389 --> 00:13:17,130
your objects and in 76 Jim came up with this
idea of environment map, what it does is basically

111
00:13:17,130 --> 00:13:22,210
look at\h‑‑ in every possible direction
that the object can be facing check what is

112
00:13:22,210 --> 00:13:26,889
your light, what can be seen in every possible
direction and makes a measure of it.

113
00:13:26,889 --> 00:13:32,899
So, this is the image you see on the left,
well, you're basically sitting in the center

114
00:13:32,899 --> 00:13:38,649
of the room and looks in every possible direction,
and you see in this direction you see the

115
00:13:38,649 --> 00:13:44,850
window and this you see a door. And when we
want to render this kind of pea pot on the

116
00:13:44,850 --> 00:13:51,990
other side you check what is the direction
that is the teapot facing at avarice point

117
00:13:51,990 --> 00:14:00,000
of the surface and you pick and imagine, just
put it here and you're done. And you can also

118
00:14:00,000 --> 00:14:05,629
extend this idea so when you\h‑‑ the image
contains\h‑‑ sorry that contains the color

119
00:14:05,629 --> 00:14:12,389
that you would see in every possible direction
you can also store your position of your small

120
00:14:12,389 --> 00:14:21,449
triangle or your reference of coordinate system,
so, you would store the color and also the

121
00:14:21,449 --> 00:14:27,000
position of the small triangle in space as
if it was oriented in this direction, so you

122
00:14:27,000 --> 00:14:32,920
have at all possible directions, which means
if you want to display a big amount of triangles

123
00:14:32,920 --> 00:14:38,569
and have it with light and even with multiple
lights you can just do like one little cap

124
00:14:38,569 --> 00:14:42,870
and you have the light and position of the
triangle and it's almost for free, so you

125
00:14:42,870 --> 00:14:50,810
can do all this, all these kinds of cheating
and you often want to cast shadows to make

126
00:14:50,810 --> 00:14:59,220
things look a bit more realistic and shot
shadows, it's nice to make it all soft and

127
00:14:59,220 --> 00:15:06,209
more simple way to do it, as your draw your
elements in your fame, you draw\h‑‑ on

128
00:15:06,209 --> 00:15:12,410
the floor in a separate canvas, smaller resolution
like a quarter or divide your resolution by

129
00:15:12,410 --> 00:15:19,550
four or sixteen or thirty two, when you're
done you just expand your smaller canvas behind

130
00:15:19,550 --> 00:15:24,889
your canvas where you draw all your things,
and by stretching it it becomes all smooth

131
00:15:24,889 --> 00:15:31,000
and blurry I's very cheep and does the trick,
it really does the trick. And once you have

132
00:15:31,000 --> 00:15:37,890
done that, well, good job, you have your visual,
it's time to think about the audio. And on

133
00:15:37,890 --> 00:15:44,279
the web there's basically two ways to do sound,
web audio API and audio element.

134
00:15:44,279 --> 00:15:54,240
Audio API is super powerful. It can do real‑time
sound analysis but it's a bit very bows, and

135
00:15:54,240 --> 00:16:03,910
also regular 1 can and 4 K demos start with
a black screen and then the visual kicks in.

136
00:16:03,910 --> 00:16:09,639
And that feeds very well with the audio element
because we have that much code, less than

137
00:16:09,639 --> 00:16:18,680
200 bytes, you can generate sound and play
it. That's all you need. So, when you generate

138
00:16:18,680 --> 00:16:27,540
sound you is to think about the Nyyuist frequency.
The Nyquist frequency, yeah, very Techi oh,

139
00:16:27,540 --> 00:16:35,110
it's the lowst frequency at which you can
sample or generate music without getting audio

140
00:16:35,110 --> 00:16:41,579
glitches. And it's basically twice the frequency
of your highest note in your music, so when

141
00:16:41,579 --> 00:16:46,910
you generate music, generate at least twice
the frequency of your highest note, you can

142
00:16:46,910 --> 00:16:53,879
generate higher, the lower the frequency,
means the less data you need to generate the

143
00:16:53,879 --> 00:17:00,269
faster your introwill start. You will get
slightly lower sound quality, but your intro

144
00:17:00,269 --> 00:17:07,830
will start maybe five or ten seconds sooner.
That can be nice. How do you make music with

145
00:17:07,830 --> 00:17:08,830
that.

146
00:17:08,830 --> 00:17:13,640
You start with small building blocks, you
need to build instruments, so, if you want

147
00:17:13,640 --> 00:17:20,380
to do, I don't know, something simple like
a\h‑‑ you start with the first line which

148
00:17:20,380 --> 00:17:29,620
gives you pure noise and the second line\h‑‑
decay, with a second and third line, of course,

149
00:17:29,620 --> 00:17:36,370
it adds that to your music. And then, it's
nice, but, when since we generalsh rate the

150
00:17:36,370 --> 00:17:42,660
music before the animations, how do we do
sin crow anytion with that? It's not that

151
00:17:42,660 --> 00:17:46,940
hard, when you general rate the sound, you
foe exactly at which position in the sound

152
00:17:46,940 --> 00:17:52,670
you have, so you can store in a separate area,
which notes you're actually playing at which

153
00:17:52,670 --> 00:17:59,630
position and which volume. During your animation,
you can check the current time of your audioment,

154
00:17:59,630 --> 00:18:07,400
multiply by sixty and you know where in your
sin crow anytion buffer you need to pick to

155
00:18:07,400 --> 00:18:12,330
know which notes are playing and then which
volume so can do, you can really be in Sync

156
00:18:12,330 --> 00:18:19,310
with your music, and once you've done that,
well done. But you haven't even started to

157
00:18:19,310 --> 00:18:29,280
come press it. So ... the normal way to come
press is with JS packet, look at your code

158
00:18:29,280 --> 00:18:36,040
as a string, look at the repeat patterns and
just replace them by a single character.

159
00:18:36,040 --> 00:18:42,180
So if we have many archings if declarations
they would be registered to just one character

160
00:18:42,180 --> 00:18:49,030
this is very nice, you get about 25\hpercent
compression ratio and mini if Id code or on

161
00:18:49,030 --> 00:18:56,380
the code I tend to write and you need about
70 bytes to decompress that, so it's pretty

162
00:18:56,380 --> 00:19:06,180
powerful. But web parcels actually very nice,
we can\h‑‑ and this support GZIP in the

163
00:19:06,180 --> 00:19:14,210
form of PNG images and we can bootstrap PNG
images the idea of boot strapping PNG, it

164
00:19:14,210 --> 00:19:26,420
relatively new, you load your JavaScript code
will be gray scale image you save as PNG,

165
00:19:26,420 --> 00:19:33,100
and when you load that and say, hey, that's
foo\h‑‑ I willowed that as HTML, so at

166
00:19:33,100 --> 00:19:41,720
the end of PNG meta data you add HTML bootstrap
that look asbit like this.

167
00:19:41,720 --> 00:19:49,670
So, what it does is basically it puts an image
but loads harsh\h‑‑ per page, the image

168
00:19:49,670 --> 00:19:59,940
and loads it, puts the fix sells on the canvas\h‑‑
and with that you get about 40\hpercent compression

169
00:19:59,940 --> 00:20:10,620
ratio, the impact here is about 160, 170 bytes,
but it compresses at 40\hpercent so at 1 K

170
00:20:10,620 --> 00:20:22,430
you get\h‑‑ I've seen 4‑kilo byte intros
that were actually 20‑kilo bytes when not

171
00:20:22,430 --> 00:20:28,950
compressed with this technique. Once you have
compressed your demo, it's time to bring it

172
00:20:28,950 --> 00:20:36,630
to 11, so if you are above your target size,
it's time to really get dirty and to arrange

173
00:20:36,630 --> 00:20:42,310
your code and trick it. You need to move the
code around and to try to increase number

174
00:20:42,310 --> 00:20:48,190
of patterns so that the code come presses
better, sometimes just moving things around

175
00:20:48,190 --> 00:20:54,760
how you set some CSS propertytion or different
values, just moving them around makes a difference

176
00:20:54,760 --> 00:20:58,560
of five to ten bytes in the compressed ratio.

177
00:20:58,560 --> 00:21:04,000
So it's\h‑‑ yeah, if you're above your
target you need to really shuffle things around

178
00:21:04,000 --> 00:21:09,580
and sighe so how it goes, if you're below
your target size, also you have enough bytes

179
00:21:09,580 --> 00:21:15,290
to actually work on the show, so it's nice
to try to not give everything away in the

180
00:21:15,290 --> 00:21:23,050
first ten seconds. So, try to work on the
timeline, on the camera, so it's pretty boring

181
00:21:23,050 --> 00:21:30,090
to see like 3 D objects, distant through\h‑‑
for 2 minutes nice to move the camera around,

182
00:21:30,090 --> 00:21:36,450
makes it a bit more interesting, try to change
your color over time and space, to again make

183
00:21:36,450 --> 00:21:45,880
things a bit more live and just not give everything
away too quickly. So now, I think it's about

184
00:21:45,880 --> 00:21:55,780
demo time. So, here's a project I did a few
months back and\h‑‑ yeah. Here it goes

185
00:21:55,780 --> 00:22:22,550
this is one kilo byte. just (Applause).

186
00:22:22,550 --> 00:23:14,821
>> So, now this is your turn. I mentioned
many things, but it's actually lots of small

187
00:23:14,821 --> 00:23:21,640
things, it's not black magic, you can build
these things with many, many small things

188
00:23:21,640 --> 00:23:27,790
and just playing around with things, so don't
be afraid, this is not\h‑‑ this is really

189
00:23:27,790 --> 00:23:35,200
not black magic, you can do it. And it's super
rewarding to do these kind of things. As I

190
00:23:35,200 --> 00:23:42,150
said there's many demo parties, throughout
the year. The next one that I can think of

191
00:23:42,150 --> 00:23:47,860
are function in Budapest in one month. Deadline
here in Berlin if one month and Demojs in

192
00:23:47,860 --> 00:23:55,410
Paris in five weeks you have no excuse to
not make something and send them a mail, and,

193
00:23:55,410 --> 00:24:00,650
some of these democrat mow parties have a
live stream where you can watch them compose

194
00:24:00,650 --> 00:24:07,590
live. And it's awesome. Seeing your demos
on the big screen and hearing the audience

195
00:24:07,590 --> 00:24:14,370
applaud and screen, it's like blowing your
mind, do it. It's so cool. Here's a couple

196
00:24:14,370 --> 00:24:22,320
of web sites to get to know a bit more about
the demo scene. Yeah. Just visit them you

197
00:24:22,320 --> 00:24:34,800
will\h‑‑ the last one, it can take thick
skin to take jokes there, so, again, thank

