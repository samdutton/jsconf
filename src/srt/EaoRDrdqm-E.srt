1
00:00:10,129 --> 00:00:13,410

alright let's get started so first of

2
00:00:13,410 --> 00:00:15,089
all I would like to say thank you for

3
00:00:15,089 --> 00:00:16,859
having me today I heard a lot of good

4
00:00:16,859 --> 00:00:19,079
things about Berlin and J's community

5
00:00:19,079 --> 00:00:21,509
and I'm really excited to be here on

6
00:00:21,509 --> 00:00:23,460
that stage what I'm going to talk about

7
00:00:23,460 --> 00:00:26,759
is the project named oku and it's what a

8
00:00:26,759 --> 00:00:28,470
referee's a kind of the pocket-sized

9
00:00:28,470 --> 00:00:30,150
because it's really small but it's

10
00:00:30,150 --> 00:00:33,030
really cool and interesting and I hope

11
00:00:33,030 --> 00:00:35,100
it's kind of make you change the way you

12
00:00:35,100 --> 00:00:39,839
think about the code shipment so my name

13
00:00:39,839 --> 00:00:42,149
is Alexander and I live in Kiev and they

14
00:00:42,149 --> 00:00:43,649
work for a Danish company called

15
00:00:43,649 --> 00:00:45,629
economic and inside economic we are

16
00:00:45,629 --> 00:00:49,020
doing a very interesting things but

17
00:00:49,020 --> 00:00:52,620
besides of the full-time job I also work

18
00:00:52,620 --> 00:00:56,160
and a kind of the side project called a

19
00:00:56,160 --> 00:00:58,050
like a store and the like a store

20
00:00:58,050 --> 00:01:00,660
started out is the hackathon project we

21
00:01:00,660 --> 00:01:02,250
gather together with some friends of

22
00:01:02,250 --> 00:01:04,649
mine we build stuff stops through the

23
00:01:04,649 --> 00:01:07,649
night and yeah just participated that

24
00:01:07,649 --> 00:01:09,840
and had fun but how it's usually

25
00:01:09,840 --> 00:01:11,820
happened after the hackathons you throw

26
00:01:11,820 --> 00:01:14,399
the things away and yeah you just forget

27
00:01:14,399 --> 00:01:16,530
about but we were quite excited about

28
00:01:16,530 --> 00:01:19,860
the stuff we did and it's no GS and

29
00:01:19,860 --> 00:01:22,560
MongoDB an angularjs a pretty GF

30
00:01:22,560 --> 00:01:24,959
sweetness stuff even if my talk is not

31
00:01:24,959 --> 00:01:26,869
directly related to the JavaScript today

32
00:01:26,869 --> 00:01:31,020
so we wanted to push the things out we

33
00:01:31,020 --> 00:01:33,170
wanted to release the things and

34
00:01:33,170 --> 00:01:35,910
probably the most important thing that I

35
00:01:35,910 --> 00:01:38,220
learned through the whole my career the

36
00:01:38,220 --> 00:01:41,940
way you ship the code matters it matters

37
00:01:41,940 --> 00:01:44,640
in a few ways I would say it matters for

38
00:01:44,640 --> 00:01:47,640
the business but it matters also for the

39
00:01:47,640 --> 00:01:51,569
kind of developers happiness as soon as

40
00:01:51,569 --> 00:01:53,849
you doing something you write the code

41
00:01:53,849 --> 00:01:56,310
and Yokote immediately or faster reach

42
00:01:56,310 --> 00:02:00,000
the users you feel happy otherwise you

43
00:02:00,000 --> 00:02:01,619
write in the code and if it stays in

44
00:02:01,619 --> 00:02:04,170
repository for weeks for a month as of

45
00:02:04,170 --> 00:02:05,819
four years that's something that we call

46
00:02:05,819 --> 00:02:07,890
the dead code the code that which never

47
00:02:07,890 --> 00:02:11,489
be valuable for anyone and in particular

48
00:02:11,489 --> 00:02:13,770
I feel really really bad the time I'm

49
00:02:13,770 --> 00:02:17,939
writing the dead code and doesn't matter

50
00:02:17,939 --> 00:02:20,219
what you think what technology use

51
00:02:20,219 --> 00:02:21,989
doesn't matter what language uses I

52
00:02:21,989 --> 00:02:23,400
think that what

53
00:02:23,400 --> 00:02:26,329
really important is that you can quickly

54
00:02:26,329 --> 00:02:29,430
move your code somewhere out from your

55
00:02:29,430 --> 00:02:32,549
development box into somewhere then the

56
00:02:32,549 --> 00:02:37,470
actual users could reach it so yeah you

57
00:02:37,470 --> 00:02:39,360
can see that like git push production

58
00:02:39,360 --> 00:02:42,239
master this is just an example but the

59
00:02:42,239 --> 00:02:45,269
point my point is it should be easy it

60
00:02:45,269 --> 00:02:48,060
should be just small step doesn't matter

61
00:02:48,060 --> 00:02:50,640
is it grid push run the shell script or

62
00:02:50,640 --> 00:02:53,489
whatever or press the button it should

63
00:02:53,489 --> 00:02:57,930
be easy for anyone to just promote the

64
00:02:57,930 --> 00:03:00,690
things and yeah that's what we of course

65
00:03:00,690 --> 00:03:03,629
started with the like a store we wanted

66
00:03:03,629 --> 00:03:05,760
to move faster we wanted to push our

67
00:03:05,760 --> 00:03:09,599
code in really really quick manner so of

68
00:03:09,599 --> 00:03:12,000
course the code shipment is the problem

69
00:03:12,000 --> 00:03:13,620
which not appeared yesterday

70
00:03:13,620 --> 00:03:16,109
it's exists for a long long time and it

71
00:03:16,109 --> 00:03:19,889
involves all the time and yeah it's

72
00:03:19,889 --> 00:03:23,310
changed because the technologies changes

73
00:03:23,310 --> 00:03:25,109
and programming languages popularity

74
00:03:25,109 --> 00:03:27,239
changes and so on and so forth and what

75
00:03:27,239 --> 00:03:30,030
I see currently the evolution cycle of

76
00:03:30,030 --> 00:03:32,250
the code shipments is the something that

77
00:03:32,250 --> 00:03:36,090
we refer is the past and the past is the

78
00:03:36,090 --> 00:03:38,129
platform as-a-service you're probably a

79
00:03:38,129 --> 00:03:40,079
lot of you heard about that and we have

80
00:03:40,079 --> 00:03:42,419
really good implementations like Heroku

81
00:03:42,419 --> 00:03:45,540
or no Jitsu where you simply create your

82
00:03:45,540 --> 00:03:47,760
account you have one or another way for

83
00:03:47,760 --> 00:03:50,400
pushing the code either by git or SSH or

84
00:03:50,400 --> 00:03:52,409
whatever and you doing the things

85
00:03:52,409 --> 00:03:54,959
locally you push that out and hit your

86
00:03:54,959 --> 00:03:58,079
brows with a browser your URL and you

87
00:03:58,079 --> 00:04:01,739
see the results and this is the way how

88
00:04:01,739 --> 00:04:04,979
I like to work then you can quickly see

89
00:04:04,979 --> 00:04:07,430
the things you are doing and the users

90
00:04:07,430 --> 00:04:10,349
potential users or whatever can quickly

91
00:04:10,349 --> 00:04:12,540
see that so we started with the app fog

92
00:04:12,540 --> 00:04:14,699
and we've been pretty happy with the app

93
00:04:14,699 --> 00:04:16,560
fog because it gives what we need it

94
00:04:16,560 --> 00:04:19,049
gives the kind of experience of

95
00:04:19,049 --> 00:04:21,900
deployment which is easy you can run the

96
00:04:21,900 --> 00:04:24,900
AF deploy command and it's out this was

97
00:04:24,900 --> 00:04:27,030
really cool we have to drop it actually

98
00:04:27,030 --> 00:04:29,699
because of few technical challenges and

99
00:04:29,699 --> 00:04:32,360
we switch to no do so and no jisu is

100
00:04:32,360 --> 00:04:34,500
exactly the thing that we need it it

101
00:04:34,500 --> 00:04:36,720
works fast you can

102
00:04:36,720 --> 00:04:39,690
fire up the machine really fast you

103
00:04:39,690 --> 00:04:42,240
deploy the code but unfortunately the

104
00:04:42,240 --> 00:04:44,400
time we wanted to have a public release

105
00:04:44,400 --> 00:04:48,870
we wanted to go out for for a public

106
00:04:48,870 --> 00:04:51,930
beta let's say we wanted to have us a

107
00:04:51,930 --> 00:04:53,880
cell connection because we deal with the

108
00:04:53,880 --> 00:04:56,310
private user data and yeah we could not

109
00:04:56,310 --> 00:04:59,400
just expose it through HTTP and yeah we

110
00:04:59,400 --> 00:05:01,380
asked no gifs on sale all right you can

111
00:05:01,380 --> 00:05:03,300
do as a cell it's not a problem but

112
00:05:03,300 --> 00:05:05,010
instead of the personal account you have

113
00:05:05,010 --> 00:05:07,140
to switch to the business one so instead

114
00:05:07,140 --> 00:05:08,700
of twenty bucks per month you are now

115
00:05:08,700 --> 00:05:13,020
paying 120 and that's absolutely fine

116
00:05:13,020 --> 00:05:14,880
because these guys have to earn their

117
00:05:14,880 --> 00:05:17,160
money they're doing a great job but if

118
00:05:17,160 --> 00:05:19,440
you are in the side project if you are

119
00:05:19,440 --> 00:05:23,130
in your own even not small but micro

120
00:05:23,130 --> 00:05:25,620
business let's say it could pretty much

121
00:05:25,620 --> 00:05:27,840
for you you invest your time you invest

122
00:05:27,840 --> 00:05:30,540
your nights weekends and if it turns

123
00:05:30,540 --> 00:05:32,880
about money you think all right

124
00:05:32,880 --> 00:05:36,150
yeah the Samson that I could not take on

125
00:05:36,150 --> 00:05:39,600
me so the time we realized this

126
00:05:39,600 --> 00:05:43,140
constraint it was the I personally was

127
00:05:43,140 --> 00:05:45,360
really upset because I understood that

128
00:05:45,360 --> 00:05:48,390
we can go further we can arrange we can

129
00:05:48,390 --> 00:05:51,810
took virtual private server and build

130
00:05:51,810 --> 00:05:54,930
some stuff that would make you feel like

131
00:05:54,930 --> 00:05:58,800
pass but instead of release in the end

132
00:05:58,800 --> 00:06:00,900
of the week we will be releasing the end

133
00:06:00,900 --> 00:06:02,850
of the next month something like that

134
00:06:02,850 --> 00:06:05,550
and that personally give me a really

135
00:06:05,550 --> 00:06:07,710
really big upset so I was started to

136
00:06:07,710 --> 00:06:09,860
think about the kind of alternatives and

137
00:06:09,860 --> 00:06:13,290
just by chance I would say I don't

138
00:06:13,290 --> 00:06:15,570
remember what exactly was the tweet or

139
00:06:15,570 --> 00:06:18,450
hiking news or whatever I've seen the

140
00:06:18,450 --> 00:06:23,010
project name Doku I forgot about that

141
00:06:23,010 --> 00:06:26,270
slide a bit but so my point here is that

142
00:06:26,270 --> 00:06:29,310
Doku is something that allows you to

143
00:06:29,310 --> 00:06:33,030
have a kind of paths that you can run on

144
00:06:33,030 --> 00:06:37,410
your own on your own machine and while

145
00:06:37,410 --> 00:06:39,419
you can do something like that

146
00:06:39,419 --> 00:06:41,960
on your own you could invent your own

147
00:06:41,960 --> 00:06:45,750
lightweight code shipment path whatever

148
00:06:45,750 --> 00:06:47,880
way through SSH

149
00:06:47,880 --> 00:06:50,669
but it's the kind of the thing that you

150
00:06:50,669 --> 00:06:53,129
don't want to spend a lot of time on

151
00:06:53,129 --> 00:06:54,870
that because you want to be in your

152
00:06:54,870 --> 00:06:56,460
domain you want to develop the product

153
00:06:56,460 --> 00:06:58,860
not develop now at pairs which complex

154
00:06:58,860 --> 00:07:01,800
and time taken and so on so you might

155
00:07:01,800 --> 00:07:04,800
have a feeling that you need a pairs

156
00:07:04,800 --> 00:07:07,490
like experience but you don't actually

157
00:07:07,490 --> 00:07:11,310
for some reasons can't use Heroku or no

158
00:07:11,310 --> 00:07:12,509
G's or whatever

159
00:07:12,509 --> 00:07:17,999
so doko is is the hack by bright hair

160
00:07:17,999 --> 00:07:21,569
color called chaplaincy and it's

161
00:07:21,569 --> 00:07:26,189
actually 100 of lines of the bash script

162
00:07:26,189 --> 00:07:30,360
which can do you the feeling like you

163
00:07:30,360 --> 00:07:33,719
are using the hiroko so it's the time

164
00:07:33,719 --> 00:07:36,120
I've seen it I said I thought to myself

165
00:07:36,120 --> 00:07:39,120
wow that's exactly what I need and yeah

166
00:07:39,120 --> 00:07:40,889
I decided to try it so I immediately

167
00:07:40,889 --> 00:07:43,050
clone the repository I started up

168
00:07:43,050 --> 00:07:45,360
virtual machine I tried the things out

169
00:07:45,360 --> 00:07:48,000
and it was not exactly what we need at

170
00:07:48,000 --> 00:07:49,529
that time because it means as few

171
00:07:49,529 --> 00:07:52,860
features but those guys who is yeah who

172
00:07:52,860 --> 00:07:54,210
is doing those proud of that project

173
00:07:54,210 --> 00:07:55,830
they're really cool they're cept for

174
00:07:55,830 --> 00:07:59,520
requests so saying in three or four days

175
00:07:59,520 --> 00:08:03,000
we make it the way it worked really

176
00:08:03,000 --> 00:08:06,599
worked for for our product and in a few

177
00:08:06,599 --> 00:08:09,810
two days we've a few days we launched it

178
00:08:09,810 --> 00:08:12,659
and digital cloud so it was a great

179
00:08:12,659 --> 00:08:14,969
experience and that time I've seen that

180
00:08:14,969 --> 00:08:17,580
reject GS : four speakers and I thought

181
00:08:17,580 --> 00:08:19,770
to myself wow I I would like to be here

182
00:08:19,770 --> 00:08:21,569
and share that experience with you guys

183
00:08:21,569 --> 00:08:26,969
so to to show you how cool is that

184
00:08:26,969 --> 00:08:31,439
I'll do a little demo of the of the co

185
00:08:31,439 --> 00:08:34,469
deployment so I have Doku running on my

186
00:08:34,469 --> 00:08:36,750
virtual machine right now and I would

187
00:08:36,750 --> 00:08:40,620
like just to show you how how it feels

188
00:08:40,620 --> 00:08:47,310
like so I just have the document you can

189
00:08:47,310 --> 00:08:49,860
see it's local IP it's running it's

190
00:08:49,860 --> 00:08:51,060
running locally

191
00:08:51,060 --> 00:08:54,180
Doku me is just an alias for that and I

192
00:08:54,180 --> 00:08:55,949
haven't it really really simple

193
00:08:55,949 --> 00:08:57,630
knowledge es application is basically

194
00:08:57,630 --> 00:09:01,980
expressed GS with one of you so the

195
00:09:01,980 --> 00:09:04,529
experience of moving the code

196
00:09:04,529 --> 00:09:07,170
the man one machine to another disk with

197
00:09:07,170 --> 00:09:09,300
Doku is really similar to what you have

198
00:09:09,300 --> 00:09:11,339
with zero code how many guys use Heroku

199
00:09:11,339 --> 00:09:18,110
before all of you so what you do is that

200
00:09:18,110 --> 00:09:22,199
you have a alias for remote repository

201
00:09:22,199 --> 00:09:25,410
and you point out it to the machine

202
00:09:25,410 --> 00:09:28,529
where the Doku is installed so what you

203
00:09:28,529 --> 00:09:31,139
do next is that you just say git push

204
00:09:31,139 --> 00:09:37,829
and the name of that local repo is local

205
00:09:37,829 --> 00:09:44,249
deploy and you say from master and some

206
00:09:44,249 --> 00:09:46,110
magic is happening there so I am pushing

207
00:09:46,110 --> 00:09:49,350
the code and it says all right you push

208
00:09:49,350 --> 00:09:52,410
there some some some data is here and we

209
00:09:52,410 --> 00:09:54,300
build in your note simple application

210
00:09:54,300 --> 00:09:58,769
and it detects that it's no GS behind

211
00:09:58,769 --> 00:10:01,769
that application and it's alright did no

212
00:10:01,769 --> 00:10:06,180
GS with version 0.8 an NPM version like

213
00:10:06,180 --> 00:10:08,160
that so I'm fetching the node.js

214
00:10:08,160 --> 00:10:11,160
binaries so right now what is doing is

215
00:10:11,160 --> 00:10:13,139
preparing the environment to run my

216
00:10:13,139 --> 00:10:16,290
application in and as soon as the

217
00:10:16,290 --> 00:10:18,870
environment is ready it installs the all

218
00:10:18,870 --> 00:10:20,670
the dependencies that application have

219
00:10:20,670 --> 00:10:22,889
through the npm install simply enough

220
00:10:22,889 --> 00:10:25,170
and said boom you already know simple

221
00:10:25,170 --> 00:10:28,350
Doku that me so i'm going hero i have

222
00:10:28,350 --> 00:10:32,759
supposed to close that before and this

223
00:10:32,759 --> 00:10:35,550
is the Express application that that I

224
00:10:35,550 --> 00:10:38,550
have so as soon as I decided to change

225
00:10:38,550 --> 00:10:40,259
something so you can see it's the

226
00:10:40,259 --> 00:10:46,170
version 0.8 so I can apply some change

227
00:10:46,170 --> 00:10:48,779
and my change would be just the version

228
00:10:48,779 --> 00:10:54,410
app for that and I'm saying commit

229
00:10:54,410 --> 00:10:59,790
version up and redeploy so I just say

230
00:10:59,790 --> 00:11:02,040
fix the buck or I implemented the new

231
00:11:02,040 --> 00:11:04,709
feature and I wanted to fast out as

232
00:11:04,709 --> 00:11:07,410
faster as possible I'm pushing that way

233
00:11:07,410 --> 00:11:10,259
and again it does the same thing from

234
00:11:10,259 --> 00:11:12,389
the very beginning it's understood that

235
00:11:12,389 --> 00:11:15,120
it's no GS application again it have to

236
00:11:15,120 --> 00:11:17,519
fetch the the environment for my

237
00:11:17,519 --> 00:11:18,660
application again

238
00:11:18,660 --> 00:11:20,790
it'd have to install all the dependency

239
00:11:20,790 --> 00:11:24,540
and it should run it so if I go back to

240
00:11:24,540 --> 00:11:25,680
the browser

241
00:11:25,680 --> 00:11:28,500
I can see that my new feature is just

242
00:11:28,500 --> 00:11:32,930
deployed so this is feels exactly like

243
00:11:32,930 --> 00:11:35,639
experience with a Heroku and probably if

244
00:11:35,639 --> 00:11:38,490
you use the Heroku the output that you

245
00:11:38,490 --> 00:11:42,360
can see is really similar to to Samson

246
00:11:42,360 --> 00:11:46,860
you can see with doc oh so if I go back

247
00:11:46,860 --> 00:11:51,209
to my slides again 100 of lines of the

248
00:11:51,209 --> 00:11:52,769
shell script could you believe it that

249
00:11:52,769 --> 00:11:55,290
it's possible that it can do all that

250
00:11:55,290 --> 00:12:00,209
stuff it's because the doc who is not

251
00:12:00,209 --> 00:12:01,949
exactly implemented all of their things

252
00:12:01,949 --> 00:12:04,470
of course it's not but it's staying on

253
00:12:04,470 --> 00:12:07,259
the shoulders of giants of the few

254
00:12:07,259 --> 00:12:09,300
projects that actually make it possible

255
00:12:09,300 --> 00:12:11,220
and I would like to just briefly

256
00:12:11,220 --> 00:12:13,829
highlight what the project because all

257
00:12:13,829 --> 00:12:16,740
of those I actually are quite useable on

258
00:12:16,740 --> 00:12:19,980
their own so doc who it's built up on

259
00:12:19,980 --> 00:12:23,519
the three major things and one is called

260
00:12:23,519 --> 00:12:26,100
the git receive also it cool hug by Jeff

261
00:12:26,100 --> 00:12:28,649
Lindsey so the get receive is a small

262
00:12:28,649 --> 00:12:31,560
component that you can deploy on your

263
00:12:31,560 --> 00:12:34,949
Linux machine or your server and it does

264
00:12:34,949 --> 00:12:37,589
turn that machine to something that

265
00:12:37,589 --> 00:12:42,269
could receive SSH or HTTP or get through

266
00:12:42,269 --> 00:12:44,759
the git protocol the pushes of the code

267
00:12:44,759 --> 00:12:47,250
so the first thing that you've seen if I

268
00:12:47,250 --> 00:12:50,189
pushed the code out and I pointed to the

269
00:12:50,189 --> 00:12:52,470
my machine it's exactly the get receive

270
00:12:52,470 --> 00:12:54,990
component who understands all right I am

271
00:12:54,990 --> 00:12:57,509
receiving the code now and what it does

272
00:12:57,509 --> 00:13:00,689
is just say okay I received that this is

273
00:13:00,689 --> 00:13:05,009
the stream and run any bash command what

274
00:13:05,009 --> 00:13:08,610
I want so this is the let's say the gate

275
00:13:08,610 --> 00:13:10,620
to the dock with assumption that there

276
00:13:10,620 --> 00:13:13,130
are interesting things I started and

277
00:13:13,130 --> 00:13:16,050
after that again I will refer to the

278
00:13:16,050 --> 00:13:18,870
heroic who that the output is exactly

279
00:13:18,870 --> 00:13:20,670
the same as you seen then you are

280
00:13:20,670 --> 00:13:23,639
pushing to Heroku and why because Heroku

281
00:13:23,639 --> 00:13:25,380
is also a cool company and they open

282
00:13:25,380 --> 00:13:27,569
sourcing a lot and one other thing that

283
00:13:27,569 --> 00:13:29,730
they open sourced is D called build

284
00:13:29,730 --> 00:13:32,520
packs so build packs are

285
00:13:32,520 --> 00:13:35,640
simple simple enough let's say also bash

286
00:13:35,640 --> 00:13:39,390
script that could understand it does two

287
00:13:39,390 --> 00:13:42,540
jobs basically so it detects what kind

288
00:13:42,540 --> 00:13:46,320
of application you have is it PHP or

289
00:13:46,320 --> 00:13:49,529
Java or Ruby on Rails or no GS and then

290
00:13:49,529 --> 00:13:52,200
it realized that it could prepare the

291
00:13:52,200 --> 00:13:54,180
execution environment it of course

292
00:13:54,180 --> 00:13:56,610
depends on actual language so for know G

293
00:13:56,610 --> 00:13:59,520
as you've seen it fetched node depending

294
00:13:59,520 --> 00:14:01,140
on the version I specified in the

295
00:14:01,140 --> 00:14:03,330
package is on for Ruby on Rails it would

296
00:14:03,330 --> 00:14:06,000
fetch Ruby and rails for Java it would

297
00:14:06,000 --> 00:14:08,130
fetch g vm and so on and so forth so its

298
00:14:08,130 --> 00:14:10,589
job is to prepare the environment to run

299
00:14:10,589 --> 00:14:15,120
the application in and and yeah as I

300
00:14:15,120 --> 00:14:17,220
said it's exactly what how it works in

301
00:14:17,220 --> 00:14:19,020
the Heroku because Heroku made it

302
00:14:19,020 --> 00:14:22,470
possible to use because they open source

303
00:14:22,470 --> 00:14:24,870
that and doc who is relying on that

304
00:14:24,870 --> 00:14:29,220
component and finally what makes you

305
00:14:29,220 --> 00:14:32,640
wonder where exactly it's gonna run is

306
00:14:32,640 --> 00:14:38,520
the project named docker and how many of

307
00:14:38,520 --> 00:14:42,089
you guys heard about docker before yeah

308
00:14:42,089 --> 00:14:45,950
a few of you I think it's it's currently

309
00:14:45,950 --> 00:14:48,870
how to say we're in noisy topic a lot of

310
00:14:48,870 --> 00:14:50,550
people are talking about it and then

311
00:14:50,550 --> 00:14:53,250
Twitter and and I can use it usually

312
00:14:53,250 --> 00:14:55,890
goes up because yeah it's just really

313
00:14:55,890 --> 00:14:57,720
interesting it's been released maybe

314
00:14:57,720 --> 00:15:01,920
four months ago by the company named dot

315
00:15:01,920 --> 00:15:05,700
cloud and the guy who is implemented

316
00:15:05,700 --> 00:15:10,470
that Simon hikes they are in the

317
00:15:10,470 --> 00:15:13,529
business of passes let's say for four or

318
00:15:13,529 --> 00:15:16,290
five years and they have of course they

319
00:15:16,290 --> 00:15:18,930
get a lot of expertise they get a lot of

320
00:15:18,930 --> 00:15:21,990
knowledge of the shipment of the code

321
00:15:21,990 --> 00:15:24,810
from machine to machine B but they are

322
00:15:24,810 --> 00:15:27,570
awesome because they did realize that

323
00:15:27,570 --> 00:15:30,000
they have their core functionality of

324
00:15:30,000 --> 00:15:32,899
the containers which I will talk a bit

325
00:15:32,899 --> 00:15:36,390
later they took that out because they

326
00:15:36,390 --> 00:15:38,370
needed to clean it up but they realized

327
00:15:38,370 --> 00:15:40,200
if they would start to rewrite it from

328
00:15:40,200 --> 00:15:41,670
the scratch it could be too dangerous

329
00:15:41,670 --> 00:15:44,910
and never end so they took the core

330
00:15:44,910 --> 00:15:47,850
they yeah they probably have a really

331
00:15:47,850 --> 00:15:49,410
really good understanding what exactly

332
00:15:49,410 --> 00:15:50,790
need to be done they even switch the

333
00:15:50,790 --> 00:15:52,260
languages to do not copy paste the

334
00:15:52,260 --> 00:15:54,320
things because I believe the previous

335
00:15:54,320 --> 00:15:56,700
infrastructure code was in Python but

336
00:15:56,700 --> 00:15:58,800
that one they decided to write and go

337
00:15:58,800 --> 00:16:03,780
and they reimplemented that and open

338
00:16:03,780 --> 00:16:05,430
source and this is something that we

339
00:16:05,430 --> 00:16:07,770
currently know is the docker project and

340
00:16:07,770 --> 00:16:09,690
you can check it out in a docker that a

341
00:16:09,690 --> 00:16:13,320
or URL yeah and while I was preparing

342
00:16:13,320 --> 00:16:15,600
the talk and I was thinking how I gonna

343
00:16:15,600 --> 00:16:18,090
explain those containers that's he a

344
00:16:18,090 --> 00:16:20,100
pretty technical and pretty difficult

345
00:16:20,100 --> 00:16:22,530
topic to just explain it in a few words

346
00:16:22,530 --> 00:16:25,740
and I like the myth of war that Salam on

347
00:16:25,740 --> 00:16:30,150
hikes used for explanation and imagine

348
00:16:30,150 --> 00:16:32,940
the shipment of the goods like 100 years

349
00:16:32,940 --> 00:16:36,300
ago if you want to ship the stuff from

350
00:16:36,300 --> 00:16:39,360
one place a to place B you pick it on

351
00:16:39,360 --> 00:16:41,460
your own when you place it two boxes of

352
00:16:41,460 --> 00:16:45,030
barrels whatever you push it to sheep

353
00:16:45,030 --> 00:16:48,240
then you have a lot of concerns if that

354
00:16:48,240 --> 00:16:50,730
sheep comes to another Harbor would it

355
00:16:50,730 --> 00:16:53,190
be enough you know infrastructure around

356
00:16:53,190 --> 00:16:56,160
like grant to put it up and put it on

357
00:16:56,160 --> 00:16:58,560
the land so you have a lot of things to

358
00:16:58,560 --> 00:17:01,500
think about and in the middle of the

359
00:17:01,500 --> 00:17:03,330
fifties the situation is radically

360
00:17:03,330 --> 00:17:05,190
changed because people invented

361
00:17:05,190 --> 00:17:08,040
containers which are metal boxes with

362
00:17:08,040 --> 00:17:12,330
specified dimensions which you just put

363
00:17:12,330 --> 00:17:15,330
the things in close the door put the

364
00:17:15,330 --> 00:17:19,910
label Ukraine China Germany and it goes

365
00:17:19,910 --> 00:17:23,400
by its own and you perfectly you you

366
00:17:23,400 --> 00:17:25,200
clearly understand that you will not

367
00:17:25,200 --> 00:17:27,630
have any problems with that because it's

368
00:17:27,630 --> 00:17:30,360
not only the containers it's also the

369
00:17:30,360 --> 00:17:32,370
infrastructure around that you have a

370
00:17:32,370 --> 00:17:35,430
good enough ships to put it in good

371
00:17:35,430 --> 00:17:37,530
enough currents to put it out and so on

372
00:17:37,530 --> 00:17:39,810
and so forth so the container in the

373
00:17:39,810 --> 00:17:42,660
docker project is a Sanson that could

374
00:17:42,660 --> 00:17:46,170
host let's say your executable process

375
00:17:46,170 --> 00:17:49,980
whatever process it is and it would make

376
00:17:49,980 --> 00:17:52,230
it run in a very repeatable and

377
00:17:52,230 --> 00:17:55,200
consistent way so whatever machine which

378
00:17:55,200 --> 00:17:57,990
is running the docker and you have the

379
00:17:57,990 --> 00:17:58,710
application

380
00:17:58,710 --> 00:18:00,240
which should be started inside the

381
00:18:00,240 --> 00:18:02,460
docker yura guaranteed you are having

382
00:18:02,460 --> 00:18:04,350
the same exactly the same result

383
00:18:04,350 --> 00:18:08,520
whatever times you ran it whatever times

384
00:18:08,520 --> 00:18:12,750
you ran is so and Doku is using the

385
00:18:12,750 --> 00:18:15,890
containers to actually run the note GS

386
00:18:15,890 --> 00:18:19,529
application there so it's not running on

387
00:18:19,529 --> 00:18:21,630
the Virtual Machine where I'm pushing

388
00:18:21,630 --> 00:18:23,429
the code where the get receive is taking

389
00:18:23,429 --> 00:18:27,720
in instead it creates the another the

390
00:18:27,720 --> 00:18:30,120
docker has did such term as the image

391
00:18:30,120 --> 00:18:33,179
and that image is like the base base

392
00:18:33,179 --> 00:18:35,520
application from where the container

393
00:18:35,520 --> 00:18:39,029
could start from so we have the image

394
00:18:39,029 --> 00:18:42,659
already prepared with the build built

395
00:18:42,659 --> 00:18:45,450
parks already injected in let's say and

396
00:18:45,450 --> 00:18:49,350
the output that you seen is actually

397
00:18:49,350 --> 00:18:52,140
something which is produced as the work

398
00:18:52,140 --> 00:18:55,289
of the container so the docker it solves

399
00:18:55,289 --> 00:18:57,840
that containers idea and the docker

400
00:18:57,840 --> 00:19:00,690
itself is the based on the Linux kernel

401
00:19:00,690 --> 00:19:04,980
Fisher called lxc which stands for Linux

402
00:19:04,980 --> 00:19:07,890
containers and it's it's the core

403
00:19:07,890 --> 00:19:10,700
functionality of operation system but as

404
00:19:10,700 --> 00:19:13,500
if you probably start to just play

405
00:19:13,500 --> 00:19:16,620
around with it it's really hard to get

406
00:19:16,620 --> 00:19:19,950
any meaningful result and the dog who is

407
00:19:19,950 --> 00:19:22,110
exactly implementation would make it

408
00:19:22,110 --> 00:19:25,830
easier to use LXE tool to use Linux

409
00:19:25,830 --> 00:19:29,760
containers in the way it's yeah you can

410
00:19:29,760 --> 00:19:33,000
use it you don't spend tons of time to

411
00:19:33,000 --> 00:19:36,840
to just realize how how the things how

412
00:19:36,840 --> 00:19:39,360
things should work so a little bit about

413
00:19:39,360 --> 00:19:44,039
docker if I go back here I have the

414
00:19:44,039 --> 00:19:45,840
machine where the docq is installed and

415
00:19:45,840 --> 00:19:49,850
of course I'm having the docker here so

416
00:19:49,850 --> 00:19:52,679
what I would like to show you quickly is

417
00:19:52,679 --> 00:19:55,590
that Sampson I described so we have an

418
00:19:55,590 --> 00:20:00,179
images and I have a plenty of them it's

419
00:20:00,179 --> 00:20:03,929
not that good I can see that but you can

420
00:20:03,929 --> 00:20:06,419
see this is the program build step is

421
00:20:06,419 --> 00:20:08,639
the image which is doc who is using then

422
00:20:08,639 --> 00:20:11,940
and starting new application and I have

423
00:20:11,940 --> 00:20:12,690
a plenty of the

424
00:20:12,690 --> 00:20:15,030
and you can run whatever you want inside

425
00:20:15,030 --> 00:20:18,150
the image you can say docker run and you

426
00:20:18,150 --> 00:20:20,520
specify the image name I could say it's

427
00:20:20,520 --> 00:20:23,040
Ubuntu a machine and I could run any

428
00:20:23,040 --> 00:20:28,220
kind of comments so I just say beam bash

429
00:20:28,220 --> 00:20:33,990
- CLS and this is the execution of the

430
00:20:33,990 --> 00:20:37,080
comment inside the container and it's

431
00:20:37,080 --> 00:20:39,590
actually the local system of that

432
00:20:39,590 --> 00:20:43,500
particular container so the containers

433
00:20:43,500 --> 00:20:46,560
are highly isolated processes which

434
00:20:46,560 --> 00:20:48,810
exist through the time that comment in

435
00:20:48,810 --> 00:20:52,350
Rand and till it completely exited so

436
00:20:52,350 --> 00:20:55,590
the time it exists it's and this comment

437
00:20:55,590 --> 00:20:58,530
is run inside the container I hope it

438
00:20:58,530 --> 00:21:00,600
makes a bit of sense to you guys because

439
00:21:00,600 --> 00:21:03,840
I really struggle in to to express their

440
00:21:03,840 --> 00:21:06,810
- to explain that and yeah I'm also kind

441
00:21:06,810 --> 00:21:09,960
of new to that - that stuff so but

442
00:21:09,960 --> 00:21:12,990
what's important is while I'm rounding

443
00:21:12,990 --> 00:21:16,320
any kind of comment if I can use the - D

444
00:21:16,320 --> 00:21:19,050
property here to run it on the on a

445
00:21:19,050 --> 00:21:23,040
background say it returns the hash you

446
00:21:23,040 --> 00:21:25,380
can see that here because whatever you

447
00:21:25,380 --> 00:21:27,750
run inside the container you changes the

448
00:21:27,750 --> 00:21:31,290
state you can run the process which for

449
00:21:31,290 --> 00:21:33,180
instance write something on the file

450
00:21:33,180 --> 00:21:36,690
system but if you do that you know if

451
00:21:36,690 --> 00:21:39,120
your application is doing that you are

452
00:21:39,120 --> 00:21:41,060
not actually changing the base image

453
00:21:41,060 --> 00:21:43,260
because every time you run it

454
00:21:43,260 --> 00:21:45,930
I can't demonstrate it every time it

455
00:21:45,930 --> 00:21:48,420
returns the new hash it's run and it's

456
00:21:48,420 --> 00:21:50,280
absolutely new state if you want to

457
00:21:50,280 --> 00:21:53,360
preserve that you have to say commit

458
00:21:53,360 --> 00:21:56,630
docker commit and then you have a child

459
00:21:56,630 --> 00:22:00,390
say child image of your parent image it

460
00:22:00,390 --> 00:22:03,030
means that you can run few things you

461
00:22:03,030 --> 00:22:05,570
can run apt-get for instance to install

462
00:22:05,570 --> 00:22:08,880
Mongo Jia's you can run up get to

463
00:22:08,880 --> 00:22:11,610
install couch or whatever you can meet

464
00:22:11,610 --> 00:22:14,400
that and now you have base image which

465
00:22:14,400 --> 00:22:17,280
already predefined environment and

466
00:22:17,280 --> 00:22:19,350
what's also cool about docker it had the

467
00:22:19,350 --> 00:22:21,600
public index it's kind of the public

468
00:22:21,600 --> 00:22:24,690
repository that you can push your base

469
00:22:24,690 --> 00:22:26,070
image to

470
00:22:26,070 --> 00:22:28,250
other people could very very easily

471
00:22:28,250 --> 00:22:31,350
reuse that so imagine if you have your

472
00:22:31,350 --> 00:22:33,360
local development environment in one

473
00:22:33,360 --> 00:22:35,820
that image you pushed it out and all the

474
00:22:35,820 --> 00:22:38,130
developers in your team are just reusing

475
00:22:38,130 --> 00:22:41,490
that test in your code were in the exact

476
00:22:41,490 --> 00:22:43,050
environment where it's going to be

477
00:22:43,050 --> 00:22:46,620
executed so it met smile smell for you

478
00:22:46,620 --> 00:22:48,720
like the virtual machines because this

479
00:22:48,720 --> 00:22:50,490
is what the virtual machines problem

480
00:22:50,490 --> 00:22:54,360
solving and yeah in in the concepts they

481
00:22:54,360 --> 00:22:56,820
are they looks really similar because

482
00:22:56,820 --> 00:22:59,610
they have that base image and you can

483
00:22:59,610 --> 00:23:02,990
run it but guys can you believe that

484
00:23:02,990 --> 00:23:07,410
virtual machine could run as fast as a

485
00:23:07,410 --> 00:23:09,600
container so this is the whole process

486
00:23:09,600 --> 00:23:11,670
imagine the image virtual images

487
00:23:11,670 --> 00:23:14,550
actually take some time to boot then the

488
00:23:14,550 --> 00:23:15,990
operation system started then you

489
00:23:15,990 --> 00:23:18,450
execute something you got results so 30

490
00:23:18,450 --> 00:23:20,850
seconds 40 seconds and so on docker is

491
00:23:20,850 --> 00:23:24,930
highly let's say performance in that it

492
00:23:24,930 --> 00:23:27,300
it runs really really fast and you got

493
00:23:27,300 --> 00:23:30,270
you got the things in so doc who uses

494
00:23:30,270 --> 00:23:34,950
docker to host the containers this is

495
00:23:34,950 --> 00:23:37,620
where the application is started and for

496
00:23:37,620 --> 00:23:40,140
no GS in particular what it's only does

497
00:23:40,140 --> 00:23:44,850
you have note AP PGs started you specify

498
00:23:44,850 --> 00:23:49,230
the port say 3,000 and then docker might

499
00:23:49,230 --> 00:23:52,170
expose your port to it could map it for

500
00:23:52,170 --> 00:23:56,970
Sampson on youand I say 5 5 5 5 5 and

501
00:23:56,970 --> 00:24:00,060
that's where you can reuse it in your

502
00:24:00,060 --> 00:24:04,290
machine you can use the results and you

503
00:24:04,290 --> 00:24:07,020
can read it from that port so finally

504
00:24:07,020 --> 00:24:09,870
you can have the one machine where you

505
00:24:09,870 --> 00:24:11,940
physical machine a with your machine

506
00:24:11,940 --> 00:24:14,220
then you are running few applications so

507
00:24:14,220 --> 00:24:16,320
in our case we're having one machine and

508
00:24:16,320 --> 00:24:17,990
it runs three different applications

509
00:24:17,990 --> 00:24:21,480
which is you know accessible by main

510
00:24:21,480 --> 00:24:24,000
domain name its example.com then you

511
00:24:24,000 --> 00:24:26,520
might have a PP dot example.com somes

512
00:24:26,520 --> 00:24:30,030
another dot example.com all of that is

513
00:24:30,030 --> 00:24:33,300
being orchestrated by an Jaques and the

514
00:24:33,300 --> 00:24:35,130
time you install Dhaka on your machine

515
00:24:35,130 --> 00:24:38,530
you also install it comes with an Jaques

516
00:24:38,530 --> 00:24:41,710
you and you don't need to spend the time

517
00:24:41,710 --> 00:24:43,930
to configure on that because the time

518
00:24:43,930 --> 00:24:47,070
the deployment of application girls

519
00:24:47,070 --> 00:24:50,250
besides of the preparation of the docker

520
00:24:50,250 --> 00:24:54,610
instance container which where the

521
00:24:54,610 --> 00:24:56,800
application is running it also creates

522
00:24:56,800 --> 00:24:59,140
the small injects configuration and said

523
00:24:59,140 --> 00:24:59,890
all right

524
00:24:59,890 --> 00:25:02,200
for that particular domain name which is

525
00:25:02,200 --> 00:25:04,270
your this your upstream you read it from

526
00:25:04,270 --> 00:25:06,900
that port and that port is exactly the

527
00:25:06,900 --> 00:25:09,910
execution of the container and it just

528
00:25:09,910 --> 00:25:11,550
Maps it out

529
00:25:11,550 --> 00:25:14,950
so guys yeah I hope it makes a little

530
00:25:14,950 --> 00:25:18,490
sense for you because it's a bit kind of

531
00:25:18,490 --> 00:25:21,370
as I said it'd be tough to me to do this

532
00:25:21,370 --> 00:25:24,100
Claire describe that things technically

533
00:25:24,100 --> 00:25:26,710
in more or less but what I want to share

534
00:25:26,710 --> 00:25:29,800
more is the experience how the dog who

535
00:25:29,800 --> 00:25:32,740
helped us as I said instead of waiting

536
00:25:32,740 --> 00:25:35,440
for for a long time as we wanted to have

537
00:25:35,440 --> 00:25:38,770
our product to be released just used aku

538
00:25:38,770 --> 00:25:40,300
and we had exactly the same experience

539
00:25:40,300 --> 00:25:42,190
like we are having the Hiroko but

540
00:25:42,190 --> 00:25:45,580
locally it's not of course the Hiroko no

541
00:25:45,580 --> 00:25:48,070
it's something really really small but

542
00:25:48,070 --> 00:25:50,500
it gives you the feeling like you're

543
00:25:50,500 --> 00:25:52,750
using that so let's just try to put the

544
00:25:52,750 --> 00:25:54,430
things together that hopefully you would

545
00:25:54,430 --> 00:25:57,120
understand at least something from this

546
00:25:57,120 --> 00:26:01,020
talk I'm heaven so the start the the

547
00:26:01,020 --> 00:26:03,910
action started from the get receive you

548
00:26:03,910 --> 00:26:06,100
push the code to your machine and this

549
00:26:06,100 --> 00:26:07,840
is their the get receive component start

550
00:26:07,840 --> 00:26:10,000
to play it understand alright here is

551
00:26:10,000 --> 00:26:12,000
some someone is pushing on me I

552
00:26:12,000 --> 00:26:15,060
understand that and I am running the

553
00:26:15,060 --> 00:26:17,800
shell script and this is where the dock

554
00:26:17,800 --> 00:26:20,980
will start to work it says ok I have the

555
00:26:20,980 --> 00:26:24,310
base docker image with already installed

556
00:26:24,310 --> 00:26:26,650
build packs installed on that what I

557
00:26:26,650 --> 00:26:28,870
need to do is to inject let's say the

558
00:26:28,870 --> 00:26:31,300
sources of the application there and run

559
00:26:31,300 --> 00:26:34,480
the Builder and builder is the script

560
00:26:34,480 --> 00:26:36,910
which iterates through the series of the

561
00:26:36,910 --> 00:26:39,100
build packs and trying to detect what

562
00:26:39,100 --> 00:26:41,650
actual environment you have is it now GS

563
00:26:41,650 --> 00:26:43,810
PHP Java and so on and so forth if it

564
00:26:43,810 --> 00:26:46,150
detected it gonna install the

565
00:26:46,150 --> 00:26:48,160
environment there and then docker

566
00:26:48,160 --> 00:26:50,980
commits that image so you have the image

567
00:26:50,980 --> 00:26:52,390
with already contained

568
00:26:52,390 --> 00:26:54,040
our application and executable

569
00:26:54,040 --> 00:26:56,410
environment around it so it's reusable

570
00:26:56,410 --> 00:26:58,840
if it's crashed and it happens sometime

571
00:26:58,840 --> 00:27:01,390
of course what you need to do is just to

572
00:27:01,390 --> 00:27:03,250
restart that image from the beginning

573
00:27:03,250 --> 00:27:05,010
and you have your application running

574
00:27:05,010 --> 00:27:08,830
exactly the same as you deployed it two

575
00:27:08,830 --> 00:27:11,020
days ago say it exactly in the same

576
00:27:11,020 --> 00:27:13,630
environment exactly in the same way so

577
00:27:13,630 --> 00:27:15,580
the docker solves all that problem and

578
00:27:15,580 --> 00:27:19,240
daughter is amazing heck with we're very

579
00:27:19,240 --> 00:27:21,220
high ambitious so as I said they started

580
00:27:21,220 --> 00:27:23,410
four months ago in October they plan to

581
00:27:23,410 --> 00:27:28,330
have zero 1.0 release very ambitious

582
00:27:28,330 --> 00:27:32,500
guys and they have a very very ambitious

583
00:27:32,500 --> 00:27:35,640
plans to to proceed with the docker and

584
00:27:35,640 --> 00:27:38,740
finally the injects is the one who

585
00:27:38,740 --> 00:27:42,700
orchestrates that HTTP HTTPS stuff so

586
00:27:42,700 --> 00:27:44,590
because you might have a lot of running

587
00:27:44,590 --> 00:27:46,840
instances in one physical machine and

588
00:27:46,840 --> 00:27:49,720
injects is the one who balancing that

589
00:27:49,720 --> 00:27:53,200
who who who separates who separates the

590
00:27:53,200 --> 00:27:59,860
things so for us Doku was something that

591
00:27:59,860 --> 00:28:04,030
as I said allow us to proceed with our

592
00:28:04,030 --> 00:28:06,700
little product and I'm really appreciate

593
00:28:06,700 --> 00:28:09,310
to jeff Lindsay to Salomon hikes for the

594
00:28:09,310 --> 00:28:12,070
things they did and for me the docker is

595
00:28:12,070 --> 00:28:15,040
the really simple interface between your

596
00:28:15,040 --> 00:28:17,250
development environments a and n

597
00:28:17,250 --> 00:28:20,560
production infrastructure so by just

598
00:28:20,560 --> 00:28:22,870
using that and you can install it say in

599
00:28:22,870 --> 00:28:26,440
20 minutes on any Ubuntu server it

600
00:28:26,440 --> 00:28:28,960
taunts that server into Heroku like

601
00:28:28,960 --> 00:28:34,120
server and for me that was really really

602
00:28:34,120 --> 00:28:37,050
good things so this is it guys

603
00:28:37,050 --> 00:28:40,270
yeah again if you have any questions I'm

604
00:28:40,270 --> 00:28:43,390
here till the end of the day I hope you

605
00:28:43,390 --> 00:28:46,960
can try Hiroko Doku and you will like it

606
00:28:46,960 --> 00:28:50,800
because that's really amazing heck so

