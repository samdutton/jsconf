1
00:00:15,369 --> 00:00:22,220

so this the talk title there's a little

2
00:00:22,220 --> 00:00:26,000
bit of a bait-and-switch that's probably

3
00:00:26,000 --> 00:00:27,919
good enough anyway first and foremost if

4
00:00:27,919 --> 00:00:29,449
you're having trouble seeing it the

5
00:00:29,449 --> 00:00:31,189
presentations online if you're not

6
00:00:31,189 --> 00:00:32,300
having trouble seeing it

7
00:00:32,300 --> 00:00:33,800
don't go there there are a lot of images

8
00:00:33,800 --> 00:00:36,500
and I don't want you to bog down the you

9
00:00:36,500 --> 00:00:38,660
Wi-Fi anyway so this is actually more

10
00:00:38,660 --> 00:00:40,280
accurate so I'm gonna be dressing jQuery

11
00:00:40,280 --> 00:00:42,710
directly and I think it sounds like it's

12
00:00:42,710 --> 00:00:45,079
kind of a popular opinion here to bag on

13
00:00:45,079 --> 00:00:48,020
jQuery hopefully that doesn't sour you

14
00:00:48,020 --> 00:00:51,079
on the talk to be more accurate this is

15
00:00:51,079 --> 00:00:55,460
sort of faster better leaner jQuery in

16
00:00:55,460 --> 00:00:58,250
certain aspects the slide just it just

17
00:00:58,250 --> 00:00:59,750
doesn't really fit well long slide looks

18
00:00:59,750 --> 00:01:01,760
kind of ugly so this is my personal

19
00:01:01,760 --> 00:01:03,469
information that's where you can find me

20
00:01:03,469 --> 00:01:06,470
on Twitter that's my blog github there

21
00:01:06,470 --> 00:01:08,119
is more stuff on my blog about this and

22
00:01:08,119 --> 00:01:10,280
I'll talk about that in a little bit but

23
00:01:10,280 --> 00:01:12,380
generally on the internet you can find

24
00:01:12,380 --> 00:01:16,070
me at John bender I work full time at

25
00:01:16,070 --> 00:01:17,840
Adobe on jQuery Mobile I say that only

26
00:01:17,840 --> 00:01:20,360
because I'm very lucky to have a job

27
00:01:20,360 --> 00:01:21,740
work in an open source I'm very grateful

28
00:01:21,740 --> 00:01:24,170
and Adobe pays me to work on a great

29
00:01:24,170 --> 00:01:27,530
project so I'm happy to be doing that so

30
00:01:27,530 --> 00:01:28,759
what is the motivation for this talk so

31
00:01:28,759 --> 00:01:29,840
this is something I feel like I have to

32
00:01:29,840 --> 00:01:32,479
cover a lot of people ask me like why do

33
00:01:32,479 --> 00:01:34,310
we care what does this matter so just to

34
00:01:34,310 --> 00:01:35,330
make sure that you don't leave the door

35
00:01:35,330 --> 00:01:37,099
in the next five minutes let's talk a

36
00:01:37,099 --> 00:01:38,420
little bit about the motivation first of

37
00:01:38,420 --> 00:01:40,429
all math is pretty awesome

38
00:01:40,429 --> 00:01:41,810
so I've had kind of a tumultuous

39
00:01:41,810 --> 00:01:44,390
relationship with it and I think a lot

40
00:01:44,390 --> 00:01:45,890
of people have I think a lot of times

41
00:01:45,890 --> 00:01:47,270
you come to math in terms of like

42
00:01:47,270 --> 00:01:49,340
calculus or geometry and these things

43
00:01:49,340 --> 00:01:51,530
aren't necessarily very interesting but

44
00:01:51,530 --> 00:01:53,179
once you find something you really love

45
00:01:53,179 --> 00:01:55,009
and you find a way to kind of apply

46
00:01:55,009 --> 00:01:57,349
formalism to it math takes on a kind of

47
00:01:57,349 --> 00:01:58,970
a different shape so that's a little bit

48
00:01:58,970 --> 00:02:02,720
what this presentation is about jquery's

49
00:02:02,720 --> 00:02:03,950
5 so this is not something I need to

50
00:02:03,950 --> 00:02:06,619
repeat too often but jQuery gets used by

51
00:02:06,619 --> 00:02:08,179
a lot of websites according to Alexa

52
00:02:08,179 --> 00:02:10,429
rankings for whatever value you give

53
00:02:10,429 --> 00:02:12,890
that the top 10 thousand websites

54
00:02:12,890 --> 00:02:14,510
something like 50 percent of them 50

55
00:02:14,510 --> 00:02:16,700
plus percent of them use jQuery the top

56
00:02:16,700 --> 00:02:18,920
million it's like 45 percent so there's

57
00:02:18,920 --> 00:02:21,470
a lot of people using jQuery so if we if

58
00:02:21,470 --> 00:02:23,060
we get a big benefit out of this if the

59
00:02:23,060 --> 00:02:25,069
application of category theory and

60
00:02:25,069 --> 00:02:25,640
formalism

61
00:02:25,640 --> 00:02:28,010
to jQuery provides some sort of benefit

62
00:02:28,010 --> 00:02:28,610
there

63
00:02:28,610 --> 00:02:31,510
they brought her brought her win there

64
00:02:31,510 --> 00:02:34,610
everybody likes performance so this the

65
00:02:34,610 --> 00:02:36,200
large a large portion of the benefit

66
00:02:36,200 --> 00:02:37,520
that we get out of applying category

67
00:02:37,520 --> 00:02:39,890
theory to jQuery is performance right so

68
00:02:39,890 --> 00:02:41,000
everybody likes presentations about

69
00:02:41,000 --> 00:02:42,830
performance uh incidentally that's

70
00:02:42,830 --> 00:02:45,230
tachometer that says nothing at all

71
00:02:45,230 --> 00:02:49,670
about how fast you're going so jQuery

72
00:02:49,670 --> 00:02:50,930
let's talk a little bit about the

73
00:02:50,930 --> 00:02:52,160
problem we're gonna kind of solve within

74
00:02:52,160 --> 00:02:54,290
jQuery uh

75
00:02:54,290 --> 00:02:56,030
so jQuery if you've ever used it before

76
00:02:56,030 --> 00:02:57,350
which I'm sure how many of you have not

77
00:02:57,350 --> 00:02:59,540
used jQuery okay

78
00:02:59,540 --> 00:03:00,560
there's a couple of you all right good

79
00:03:00,560 --> 00:03:01,940
I'll make this quick but I'll cover it

80
00:03:01,940 --> 00:03:03,740
so would jQuery what you're generally

81
00:03:03,740 --> 00:03:04,790
doing is you're getting elements out of

82
00:03:04,790 --> 00:03:06,380
the Dom using something like this a

83
00:03:06,380 --> 00:03:08,450
selector with a dollar function and then

84
00:03:08,450 --> 00:03:11,090
you may call some method foo on it this

85
00:03:11,090 --> 00:03:13,040
could be anything add classes remove

86
00:03:13,040 --> 00:03:16,010
classes change properties and it's

87
00:03:16,010 --> 00:03:17,570
chainable so it's a fluent interface and

88
00:03:17,570 --> 00:03:19,100
this will become relevant later

89
00:03:19,100 --> 00:03:22,640
so the internals of these jQuery methods

90
00:03:22,640 --> 00:03:25,760
all have the form so if you're defining

91
00:03:25,760 --> 00:03:27,910
foo they all take the form on the jQuery

92
00:03:27,910 --> 00:03:30,590
prototype so if you're if you're

93
00:03:30,590 --> 00:03:32,510
invoking it on a jQuery object it's not

94
00:03:32,510 --> 00:03:34,100
actually calling anything on the jQuery

95
00:03:34,100 --> 00:03:35,630
object it does a prototype lookup right

96
00:03:35,630 --> 00:03:36,739
so it goes up the prototype chain to

97
00:03:36,739 --> 00:03:39,049
find that function but they're all

98
00:03:39,049 --> 00:03:40,940
invoked on a jQuery object right so the

99
00:03:40,940 --> 00:03:42,530
the context in which they're operating

100
00:03:42,530 --> 00:03:44,510
is a jQuery object and that's very

101
00:03:44,510 --> 00:03:45,739
important that'll become relevant later

102
00:03:45,739 --> 00:03:48,530
but generally what they do is they loop

103
00:03:48,530 --> 00:03:50,390
over that set of elements or they don't

104
00:03:50,390 --> 00:03:51,769
and they do some manipulation to it

105
00:03:51,769 --> 00:03:54,380
that's that's the general shape of a

106
00:03:54,380 --> 00:03:58,070
jQuery method more specifically there's

107
00:03:58,070 --> 00:03:59,959
a large set of jQuery methods that deal

108
00:03:59,959 --> 00:04:01,430
directly and manipulating the Dom

109
00:04:01,430 --> 00:04:03,049
elements inside a jQuery set there are

110
00:04:03,049 --> 00:04:04,660
some that don't so for example first

111
00:04:04,660 --> 00:04:07,670
just truncates the set right it doesn't

112
00:04:07,670 --> 00:04:10,430
do anything to Dom elements in it these

113
00:04:10,430 --> 00:04:13,070
things do a whole lot of work so the

114
00:04:13,070 --> 00:04:14,269
first thing they do is they generally

115
00:04:14,269 --> 00:04:15,739
handle arguments so if you've ever used

116
00:04:15,739 --> 00:04:17,450
a jQuery again if you've used jQuery

117
00:04:17,450 --> 00:04:19,580
before you know that most methods have

118
00:04:19,580 --> 00:04:21,739
like a gigantic type Union for each of

119
00:04:21,739 --> 00:04:24,110
their arguments right they take strings

120
00:04:24,110 --> 00:04:25,669
they take Dom elements they take

121
00:04:25,669 --> 00:04:27,320
functions for callbacks they take other

122
00:04:27,320 --> 00:04:30,080
jQuery objects they do a lot of argument

123
00:04:30,080 --> 00:04:31,820
handling inside the method so this can

124
00:04:31,820 --> 00:04:34,479
be complex extremely complex of times

125
00:04:34,479 --> 00:04:36,830
additionally they also loop over the set

126
00:04:36,830 --> 00:04:37,760
right so if you're going to manipulate

127
00:04:37,760 --> 00:04:39,800
the Dom elements in the set you have to

128
00:04:39,800 --> 00:04:42,380
loop over it and deal with it in some

129
00:04:42,380 --> 00:04:44,630
some fashion or another and then that's

130
00:04:44,630 --> 00:04:45,650
sort of the third thing that they do

131
00:04:45,650 --> 00:04:48,110
they do some Dom element emulation right

132
00:04:48,110 --> 00:04:50,060
that's mixed in there so this is kind of

133
00:04:50,060 --> 00:04:53,330
this isn't bad per se especially with an

134
00:04:53,330 --> 00:04:55,550
example that's what like five lines but

135
00:04:55,550 --> 00:04:57,740
when you actually if you look if the 20

136
00:04:57,740 --> 00:04:58,940
or so people who are in here earlier

137
00:04:58,940 --> 00:05:00,050
have actually looked at the jQuery

138
00:05:00,050 --> 00:05:01,490
source a lot of the methods are actually

139
00:05:01,490 --> 00:05:04,010
quite large they're very complex so this

140
00:05:04,010 --> 00:05:06,530
mixing this sort of mashing together of

141
00:05:06,530 --> 00:05:08,090
the functionality of handling the

142
00:05:08,090 --> 00:05:10,250
arguments doing the looping and dealing

143
00:05:10,250 --> 00:05:12,940
with the Dom element alteration can get

144
00:05:12,940 --> 00:05:15,980
untenable times so this is this is kind

145
00:05:15,980 --> 00:05:17,750
of the problem we're gonna solve and

146
00:05:17,750 --> 00:05:18,920
we're gonna solve it by applying some

147
00:05:18,920 --> 00:05:20,750
category theory now when I say I'm gonna

148
00:05:20,750 --> 00:05:22,460
work in category theory I'm not working

149
00:05:22,460 --> 00:05:24,170
in monads okay I know everybody knows

150
00:05:24,170 --> 00:05:26,750
has heard of a monad before learning how

151
00:05:26,750 --> 00:05:28,790
to understand monads and Haskell is kind

152
00:05:28,790 --> 00:05:31,250
of a cool and popular topic if you're a

153
00:05:31,250 --> 00:05:32,990
programmer I'm gonna talk about a much

154
00:05:32,990 --> 00:05:35,360
more basic introductory level type stuff

155
00:05:35,360 --> 00:05:37,640
hopefully if you know JavaScript at all

156
00:05:37,640 --> 00:05:38,810
you'll be able to get pretty much all of

157
00:05:38,810 --> 00:05:41,720
this a little bit of background to guys

158
00:05:41,720 --> 00:05:44,330
Alan burger McClane we're working with

159
00:05:44,330 --> 00:05:46,100
groups we was working with algebras and

160
00:05:46,100 --> 00:05:47,630
what they noticed was there's this

161
00:05:47,630 --> 00:05:49,790
common there are these commonalities

162
00:05:49,790 --> 00:05:51,560
between algebra is this stuff that they

163
00:05:51,560 --> 00:05:53,450
were working in so like any programmer

164
00:05:53,450 --> 00:05:55,760
worth their salt they took what they

165
00:05:55,760 --> 00:05:56,840
were seeing that was the same and they

166
00:05:56,840 --> 00:05:58,220
abstracted it out and this sort of

167
00:05:58,220 --> 00:06:00,800
became the genesis for category theory

168
00:06:00,800 --> 00:06:03,820
wild and crazy guys that they were so

169
00:06:03,820 --> 00:06:06,610
because working in algebra is exciting

170
00:06:06,610 --> 00:06:09,470
but that is what eventually became

171
00:06:09,470 --> 00:06:11,240
category theory they just did what you

172
00:06:11,240 --> 00:06:12,860
do every day when you see two things

173
00:06:12,860 --> 00:06:15,170
that are doing the exact same operation

174
00:06:15,170 --> 00:06:16,700
they pulled it out they made it

175
00:06:16,700 --> 00:06:20,480
available so what is a category

176
00:06:20,480 --> 00:06:21,680
specifically let's start by defining

177
00:06:21,680 --> 00:06:23,620
what we're gonna be building here today

178
00:06:23,620 --> 00:06:26,630
first it's two concrete things the set

179
00:06:26,630 --> 00:06:30,380
of objects just concretely things and

180
00:06:30,380 --> 00:06:32,240
it's a set of morphisms which are

181
00:06:32,240 --> 00:06:34,610
actions or operations on the objects

182
00:06:34,610 --> 00:06:37,430
right so a good example and then there's

183
00:06:37,430 --> 00:06:41,240
two laws first law is identity so

184
00:06:41,240 --> 00:06:43,610
identity is very simple for every object

185
00:06:43,610 --> 00:06:47,300
in a category and just to be clear so

186
00:06:47,300 --> 00:06:49,340
you can think of objects and morphisms

187
00:06:49,340 --> 00:06:51,170
as the relationship between nouns and

188
00:06:51,170 --> 00:06:53,000
verbs kind of right I think that that

189
00:06:53,000 --> 00:06:54,290
analogy gets overused a lot in

190
00:06:54,290 --> 00:06:56,659
programming but it's very optimistic

191
00:06:56,659 --> 00:06:59,729
so the identity law is very simple it

192
00:06:59,729 --> 00:07:02,039
just says that for every object in a

193
00:07:02,039 --> 00:07:03,930
category there has to be some function

194
00:07:03,930 --> 00:07:05,250
that will deal with that object and

195
00:07:05,250 --> 00:07:07,199
return it as and not do anything so in

196
00:07:07,199 --> 00:07:09,360
JavaScript this is very simple it takes

197
00:07:09,360 --> 00:07:11,250
an argument returns argument unaltered

198
00:07:11,250 --> 00:07:13,889
so that's identity the second is

199
00:07:13,889 --> 00:07:15,210
composition this is the second law it

200
00:07:15,210 --> 00:07:17,159
has to be here it has to provide for a

201
00:07:17,159 --> 00:07:20,129
composition very simple if you had some

202
00:07:20,129 --> 00:07:21,900
function G that takes today and gives

203
00:07:21,900 --> 00:07:23,669
you a B you have some function f that

204
00:07:23,669 --> 00:07:25,919
takes a B gives you C if you smoosh

205
00:07:25,919 --> 00:07:27,090
those things together

206
00:07:27,090 --> 00:07:28,590
you will end up with a function that

207
00:07:28,590 --> 00:07:30,810
takes an A and gives you a see how many

208
00:07:30,810 --> 00:07:34,020
of you have used underscore GS ok the

209
00:07:34,020 --> 00:07:35,819
compose function that's that's what

210
00:07:35,819 --> 00:07:36,930
we're looking at here so in JavaScript

211
00:07:36,930 --> 00:07:38,819
again it's very simple take two

212
00:07:38,819 --> 00:07:41,250
functions create a new function that

213
00:07:41,250 --> 00:07:43,289
takes a single argument and then pipes

214
00:07:43,289 --> 00:07:44,430
those through each of those functions

215
00:07:44,430 --> 00:07:46,349
again you're just gluing the two things

216
00:07:46,349 --> 00:07:47,539
together you're composing them

217
00:07:47,539 --> 00:07:50,759
composition so this is the the fourth

218
00:07:50,759 --> 00:07:53,699
thing that you need for a category so

219
00:07:53,699 --> 00:07:55,050
let's start off we got two categories to

220
00:07:55,050 --> 00:07:55,919
go through the first one we're gonna

221
00:07:55,919 --> 00:07:58,110
cover as HTML now what I'm asking you to

222
00:07:58,110 --> 00:07:58,949
do for the first part of this

223
00:07:58,949 --> 00:08:01,199
presentation is sort of blindly follow

224
00:08:01,199 --> 00:08:02,789
me through the formalism here and then

225
00:08:02,789 --> 00:08:03,719
at the end we'll get to the really

226
00:08:03,719 --> 00:08:05,190
awesome stuff like the performance

227
00:08:05,190 --> 00:08:06,629
benefits and things the concrete things

228
00:08:06,629 --> 00:08:08,219
that you could take home and talk to

229
00:08:08,219 --> 00:08:10,199
your friends about if you were to talk

230
00:08:10,199 --> 00:08:14,219
to your friends about category 3 so hTML

231
00:08:14,219 --> 00:08:15,779
is our first category that the objects

232
00:08:15,779 --> 00:08:18,629
in HTML very simple they're just Dom

233
00:08:18,629 --> 00:08:20,580
elements stuff you get using the jquery

234
00:08:20,580 --> 00:08:22,500
or not the jquery the javascript api for

235
00:08:22,500 --> 00:08:25,889
the dom right so query selector returns

236
00:08:25,889 --> 00:08:27,419
a single element from the dom based on a

237
00:08:27,419 --> 00:08:28,770
selector right so the thing that you

238
00:08:28,770 --> 00:08:30,750
would get from this this is these are

239
00:08:30,750 --> 00:08:33,810
the objects of the category HTML when I

240
00:08:33,810 --> 00:08:35,430
say objects I mean all possible

241
00:08:35,430 --> 00:08:37,320
representations every possible Dom

242
00:08:37,320 --> 00:08:39,089
element Everest fits into this set of

243
00:08:39,089 --> 00:08:42,570
object it's a large set in morphisms of

244
00:08:42,570 --> 00:08:44,760
HTML the verbs the actions are just

245
00:08:44,760 --> 00:08:47,310
JavaScript functions that take HTML

246
00:08:47,310 --> 00:08:49,560
elements and return them ok and in this

247
00:08:49,560 --> 00:08:50,850
case we're gonna say a single element

248
00:08:50,850 --> 00:08:52,890
and we're also sort of hand-waving here

249
00:08:52,890 --> 00:08:54,600
right JavaScript doesn't have a type

250
00:08:54,600 --> 00:08:57,420
system I mean there are compile to

251
00:08:57,420 --> 00:08:59,310
JavaScript languages that do but in this

252
00:08:59,310 --> 00:09:01,079
case we're talking about JavaScript and

253
00:09:01,079 --> 00:09:02,699
we're gonna hand wave and say that to

254
00:09:02,699 --> 00:09:05,160
play in HTML to play part in our game

255
00:09:05,160 --> 00:09:07,649
here you have to take only HTML elements

256
00:09:07,649 --> 00:09:08,259
and return

257
00:09:08,259 --> 00:09:10,179
HTML oh man you can't take an HTML

258
00:09:10,179 --> 00:09:11,949
element and return a string that

259
00:09:11,949 --> 00:09:15,699
wouldn't be part of our category HTML so

260
00:09:15,699 --> 00:09:17,970
an example very simple takes an element

261
00:09:17,970 --> 00:09:21,129
sets the attribute class to Foo very

262
00:09:21,129 --> 00:09:22,540
simple and then returns that same

263
00:09:22,540 --> 00:09:24,069
element that is just alter okay

264
00:09:24,069 --> 00:09:26,439
super simple so identity what is

265
00:09:26,439 --> 00:09:27,279
identity

266
00:09:27,279 --> 00:09:30,639
what is that identity function in HTML

267
00:09:30,639 --> 00:09:33,549
again same thing the only difference is

268
00:09:33,549 --> 00:09:35,529
we're forcing it to take a Dom element

269
00:09:35,529 --> 00:09:36,970
and return one that's the only

270
00:09:36,970 --> 00:09:37,299
difference

271
00:09:37,299 --> 00:09:39,549
same thing with composed composes

272
00:09:39,549 --> 00:09:41,499
exceptionally simple again the only

273
00:09:41,499 --> 00:09:43,149
difference is Dom element not just any

274
00:09:43,149 --> 00:09:45,970
random thing so that's it that's all

275
00:09:45,970 --> 00:09:48,970
hTML is so we just in about two minutes

276
00:09:48,970 --> 00:09:51,279
to find our first category how many of

277
00:09:51,279 --> 00:09:53,499
you are totally unclear about the things

278
00:09:53,499 --> 00:09:55,689
I just said okay right this is how

279
00:09:55,689 --> 00:09:58,059
simple category theory is right it's not

280
00:09:58,059 --> 00:10:00,639
at a very basic level it's so abstract

281
00:10:00,639 --> 00:10:02,350
it's extremely simple right so we can

282
00:10:02,350 --> 00:10:03,519
apply it to a lot of things and it's

283
00:10:03,519 --> 00:10:05,919
applied all over the place in math and

284
00:10:05,919 --> 00:10:07,809
and science and chemistry and all sorts

285
00:10:07,809 --> 00:10:09,910
of wild places so let's look at one

286
00:10:09,910 --> 00:10:11,019
that's a little more complex so let's

287
00:10:11,019 --> 00:10:12,489
look at our second category the second

288
00:10:12,489 --> 00:10:14,679
part of our formalism here is our

289
00:10:14,679 --> 00:10:17,470
category jQuery so the objects of jQuery

290
00:10:17,470 --> 00:10:20,470
are surprise surprise jQuery objects

291
00:10:20,470 --> 00:10:24,039
okay so any jQuery object it could be

292
00:10:24,039 --> 00:10:25,720
the empty jQuery object it could be one

293
00:10:25,720 --> 00:10:27,220
with many elements the single element

294
00:10:27,220 --> 00:10:28,239
doesn't matter so in the case of our

295
00:10:28,239 --> 00:10:32,169
example here it's just one element well

296
00:10:32,169 --> 00:10:33,639
ostensibly one element less you're

297
00:10:33,639 --> 00:10:35,289
throwing ideas around your Dom like a

298
00:10:35,289 --> 00:10:38,679
madman it's just it's just any Dom

299
00:10:38,679 --> 00:10:41,919
elements wrap by jQuery object the

300
00:10:41,919 --> 00:10:43,539
morphisms of jQuery are as you would

301
00:10:43,539 --> 00:10:46,239
expect jQuery methods so anything on

302
00:10:46,239 --> 00:10:48,429
vocht on a jQuery object that

303
00:10:48,429 --> 00:10:51,279
manipulates the jQuery object is a

304
00:10:51,279 --> 00:10:54,069
jQuery morphism very simple identity

305
00:10:54,069 --> 00:10:56,949
just as you would expect very simple but

306
00:10:56,949 --> 00:10:58,749
there's a slight twist so it has to be

307
00:10:58,749 --> 00:11:02,169
defined on the jQuery objects prototype

308
00:11:02,169 --> 00:11:04,600
jQuery dot FN okay we're stipulating

309
00:11:04,600 --> 00:11:07,689
that because the requirement here

310
00:11:07,689 --> 00:11:09,489
remember we said earlier that identity

311
00:11:09,489 --> 00:11:11,049
had to take an argument and return one

312
00:11:11,049 --> 00:11:13,119
right here so so here what we're doing

313
00:11:13,119 --> 00:11:15,939
is we're sort of twisting that a little

314
00:11:15,939 --> 00:11:17,769
bit we're sort I'm gonna hand wave and

315
00:11:17,769 --> 00:11:19,029
say that the first argument is actually

316
00:11:19,029 --> 00:11:21,490
the context of this value in this case

317
00:11:21,490 --> 00:11:23,439
and if you know JavaScript well enough

318
00:11:23,439 --> 00:11:24,579
you know that you can actually use

319
00:11:24,579 --> 00:11:27,579
function dot apply and explicitly set

320
00:11:27,579 --> 00:11:28,899
that this value so you can actually kind

321
00:11:28,899 --> 00:11:30,999
of treat it like an argument but I'm

322
00:11:30,999 --> 00:11:32,259
gonna hand wave here and say it's not

323
00:11:32,259 --> 00:11:33,639
taking any arguments it's just gonna

324
00:11:33,639 --> 00:11:35,319
deal with this and that's our first

325
00:11:35,319 --> 00:11:38,559
argument so how does this work just as

326
00:11:38,559 --> 00:11:40,720
you would expect you invoke ID on a

327
00:11:40,720 --> 00:11:42,339
jQuery object and you get back the exact

328
00:11:42,339 --> 00:11:44,759
same jQuery object okay simple

329
00:11:44,759 --> 00:11:46,899
composition now composition is a little

330
00:11:46,899 --> 00:11:50,769
more complex again then for HTML take

331
00:11:50,769 --> 00:11:52,959
two jQuery methods now these aren't just

332
00:11:52,959 --> 00:11:54,879
random functions anywhere these are

333
00:11:54,879 --> 00:11:56,379
jQuery methods things that are Diet

334
00:11:56,379 --> 00:11:58,059
defined on the jQuery prototype and

335
00:11:58,059 --> 00:12:00,309
we're gonna take we're gonna recreate a

336
00:12:00,309 --> 00:12:02,499
new function that will eventually be

337
00:12:02,499 --> 00:12:04,240
assigned again to the jQuery prototype

338
00:12:04,240 --> 00:12:05,589
and I'll show you an example in a second

339
00:12:05,589 --> 00:12:07,540
but this is very simple it just going to

340
00:12:07,540 --> 00:12:09,939
take the context of this value and it's

341
00:12:09,939 --> 00:12:10,959
gonna pipe it through each of these

342
00:12:10,959 --> 00:12:13,269
functions using apply does anybody

343
00:12:13,269 --> 00:12:15,779
unclear on how apply works in JavaScript

344
00:12:15,779 --> 00:12:18,699
awesome this is the perfect crowd for

345
00:12:18,699 --> 00:12:22,360
this presentation all right it's so real

346
00:12:22,360 --> 00:12:24,519
quick example if you have two jQuery

347
00:12:24,519 --> 00:12:26,230
methods each of them dealing with this

348
00:12:26,230 --> 00:12:28,569
value okay just like if you if you write

349
00:12:28,569 --> 00:12:30,339
jQuery methods and they don't deal with

350
00:12:30,339 --> 00:12:32,319
this value something's wrong so this is

351
00:12:32,319 --> 00:12:33,759
this is what did you a query method is

352
00:12:33,759 --> 00:12:36,369
you're composing them using our compose

353
00:12:36,369 --> 00:12:38,199
function like this and we get a new one

354
00:12:38,199 --> 00:12:40,839
gf and that ordering there is correct so

355
00:12:40,839 --> 00:12:43,089
G will go first then F will go and what

356
00:12:43,089 --> 00:12:44,619
we're saying is that as a result these

357
00:12:44,619 --> 00:12:45,779
two things are functionally equivalent

358
00:12:45,779 --> 00:12:48,249
we've smashed the two jQuery methods

359
00:12:48,249 --> 00:12:50,350
together so that the G and the F for the

360
00:12:50,350 --> 00:12:54,189
same as the composed version okay I want

361
00:12:54,189 --> 00:12:56,129
you to remember this slide specifically

362
00:12:56,129 --> 00:12:58,059
remember that when I say that the

363
00:12:58,059 --> 00:12:59,769
composed version is identical to the

364
00:12:59,769 --> 00:13:00,879
chained version that we're making an

365
00:13:00,879 --> 00:13:02,079
example of here I'm gonna use that later

366
00:13:02,079 --> 00:13:03,429
we're gonna talk about loop fusion okay

367
00:13:03,429 --> 00:13:07,629
great anybody not anybody anybody not

368
00:13:07,629 --> 00:13:09,369
gonna remember that GF is the same thing

369
00:13:09,369 --> 00:13:13,029
as chained G DNF great this is a great

370
00:13:13,029 --> 00:13:14,110
crowd cuz none of you raise your hands

371
00:13:14,110 --> 00:13:17,049
so the last thing we're talking about is

372
00:13:17,049 --> 00:13:19,089
a functor also if you have a better

373
00:13:19,089 --> 00:13:22,779
slide background for a slide that says

374
00:13:22,779 --> 00:13:24,730
functor on it you let me know I could

375
00:13:24,730 --> 00:13:27,549
not find one I thought it was just a

376
00:13:27,549 --> 00:13:31,329
really cool picture so a functor is a

377
00:13:31,329 --> 00:13:33,639
purely category theoretic contract all

378
00:13:33,639 --> 00:13:35,500
it does well all it does

379
00:13:35,500 --> 00:13:37,240
little complex but all it really does is

380
00:13:37,240 --> 00:13:39,220
get you from one category to another so

381
00:13:39,220 --> 00:13:41,200
if you're playing around in HTML you're

382
00:13:41,200 --> 00:13:43,600
using raw JavaScript functions to deal

383
00:13:43,600 --> 00:13:45,490
with HTML elements and you want to get

384
00:13:45,490 --> 00:13:47,140
into jQuery for whatever reason you want

385
00:13:47,140 --> 00:13:48,460
to take that stuff you're working on and

386
00:13:48,460 --> 00:13:50,890
get into jQuery you need a functor well

387
00:13:50,890 --> 00:13:53,260
you don't need a functor I'm giving you

388
00:13:53,260 --> 00:13:54,430
a functor as a consequence of this

389
00:13:54,430 --> 00:13:55,360
because we're talking about category

390
00:13:55,360 --> 00:13:57,400
theory but the point is that's what it

391
00:13:57,400 --> 00:14:00,250
does so we're gonna go from HTML to

392
00:14:00,250 --> 00:14:01,780
jQuery this is not bi-directional it's

393
00:14:01,780 --> 00:14:03,340
unidirectional so we're only going from

394
00:14:03,340 --> 00:14:05,920
HTML the jQuery so we need three things

395
00:14:05,920 --> 00:14:08,260
for this honker first we need something

396
00:14:08,260 --> 00:14:10,270
that translates objects in HTML to

397
00:14:10,270 --> 00:14:12,760
objects in jQuery okay the second thing

398
00:14:12,760 --> 00:14:14,020
we need is we need something that takes

399
00:14:14,020 --> 00:14:16,300
the morphisms in HTML so those HTML

400
00:14:16,300 --> 00:14:18,490
altering regular JavaScript functions

401
00:14:18,490 --> 00:14:20,200
and turns them into jQuery methods or

402
00:14:20,200 --> 00:14:22,090
the morphisms in jQuery and the last

403
00:14:22,090 --> 00:14:23,800
thing we need to do there's a little bit

404
00:14:23,800 --> 00:14:24,850
more detail to this but for the

405
00:14:24,850 --> 00:14:26,470
presentation the last thing that we're

406
00:14:26,470 --> 00:14:28,270
gonna do is we're gonna prove the laughs

407
00:14:28,270 --> 00:14:29,800
law which is that it preserves

408
00:14:29,800 --> 00:14:33,070
composition of morphisms okay that

409
00:14:33,070 --> 00:14:35,170
sounds really abstract but it's actually

410
00:14:35,170 --> 00:14:37,450
very simple so we'll talk about that so

411
00:14:37,450 --> 00:14:39,940
for the objects very simple extremely

412
00:14:39,940 --> 00:14:43,240
simple little known fact or depending on

413
00:14:43,240 --> 00:14:46,660
who you are if you take a regular Dom

414
00:14:46,660 --> 00:14:48,700
element you just if you sit you send

415
00:14:48,700 --> 00:14:49,960
that as an argument to the dollar

416
00:14:49,960 --> 00:14:51,700
function you get back a jquery set that

417
00:14:51,700 --> 00:14:53,800
wraps that thing right so we've taken

418
00:14:53,800 --> 00:14:56,110
our HTML objects and we transported them

419
00:14:56,110 --> 00:14:58,060
into jquery quite simply all we had to

420
00:14:58,060 --> 00:15:00,010
use was the dollar function okay so

421
00:15:00,010 --> 00:15:02,080
that's the first part second part we got

422
00:15:02,080 --> 00:15:04,510
to take the morphisms those jquery or

423
00:15:04,510 --> 00:15:06,339
the HTML altering functions and turn

424
00:15:06,339 --> 00:15:09,010
them into jQuery methods so if we take

425
00:15:09,010 --> 00:15:12,190
our example set foo that just alters

426
00:15:12,190 --> 00:15:15,550
that element adds the the classes foo we

427
00:15:15,550 --> 00:15:16,839
what we really want to do is we want to

428
00:15:16,839 --> 00:15:19,660
take something that that accepts as a

429
00:15:19,660 --> 00:15:22,450
single argument an HTML element and we

430
00:15:22,450 --> 00:15:25,420
want to turn it into this jQuery method

431
00:15:25,420 --> 00:15:27,460
set foo this invocation right so this is

432
00:15:27,460 --> 00:15:28,390
that we're sort of changing the

433
00:15:28,390 --> 00:15:31,120
invocation pattern so how do we do that

434
00:15:31,120 --> 00:15:33,670
well one really easy way to do that is

435
00:15:33,670 --> 00:15:36,580
map so inside a jQuery method you have

436
00:15:36,580 --> 00:15:38,500
to this and when you use map it just

437
00:15:38,500 --> 00:15:40,930
iterates over that set of Dom elements

438
00:15:40,930 --> 00:15:42,130
that's inside the jQuery object and

439
00:15:42,130 --> 00:15:44,140
hands them off to whatever function you

440
00:15:44,140 --> 00:15:46,480
gave it right so in this case I've kind

441
00:15:46,480 --> 00:15:48,070
of hand waved and say and I've said it's

442
00:15:48,070 --> 00:15:49,240
okay that the index

443
00:15:49,240 --> 00:15:51,760
is an extra argument so that's that's

444
00:15:51,760 --> 00:15:52,450
fine for now

445
00:15:52,450 --> 00:15:56,560
but the with that all we had to do to

446
00:15:56,560 --> 00:15:59,200
basically take our set foo which was

447
00:15:59,200 --> 00:16:01,360
only concerned with HTML elements and

448
00:16:01,360 --> 00:16:02,890
turn it into what amounts to a jQuery

449
00:16:02,890 --> 00:16:05,589
morphism is apply map right so if you've

450
00:16:05,589 --> 00:16:07,000
ever done list operations in other

451
00:16:07,000 --> 00:16:08,170
languages obviously you're probably

452
00:16:08,170 --> 00:16:09,520
familiar with map and it's very much the

453
00:16:09,520 --> 00:16:12,070
same thing a list is actually this it's

454
00:16:12,070 --> 00:16:14,380
a functor for all lists so that's all

455
00:16:14,380 --> 00:16:16,510
its really doing here we so map becomes

456
00:16:16,510 --> 00:16:17,860
our second bit so we have our two pieces

457
00:16:17,860 --> 00:16:20,140
or two concrete pieces first the mapping

458
00:16:20,140 --> 00:16:22,060
from the HTML objects to jQuery objects

459
00:16:22,060 --> 00:16:25,149
and second a mapping from HTML morphisms

460
00:16:25,149 --> 00:16:26,920
to jQuery morphisms okay so the last

461
00:16:26,920 --> 00:16:30,310
thing is the WHA and this is the this is

462
00:16:30,310 --> 00:16:31,450
there actually the really important part

463
00:16:31,450 --> 00:16:34,360
this actually tells us almost everything

464
00:16:34,360 --> 00:16:35,500
about the two categories we're gonna

465
00:16:35,500 --> 00:16:38,230
care about so first remember we said

466
00:16:38,230 --> 00:16:39,430
that when we smoosh these two things

467
00:16:39,430 --> 00:16:42,640
together using compose to get GAF that

468
00:16:42,640 --> 00:16:44,380
that was functionally equivalent to the

469
00:16:44,380 --> 00:16:46,839
chain right okay the functor law

470
00:16:46,839 --> 00:16:49,570
requires that in the case that in the

471
00:16:49,570 --> 00:16:52,360
case where we use the underlying HTML

472
00:16:52,360 --> 00:16:54,640
morphism so again remember I said that

473
00:16:54,640 --> 00:16:57,310
in jQuery methods inside them is sort of

474
00:16:57,310 --> 00:17:00,160
living this HTML altering thing right so

475
00:17:00,160 --> 00:17:01,570
if we pull that out and we stuck those

476
00:17:01,570 --> 00:17:04,240
together by themselves and we map that

477
00:17:04,240 --> 00:17:05,800
over the jQuery set that would actually

478
00:17:05,800 --> 00:17:07,809
be functionally equivalent to gnf right

479
00:17:07,809 --> 00:17:09,640
so it's the equivalent HTML morphism so

480
00:17:09,640 --> 00:17:11,920
what this is saying is that and and

481
00:17:11,920 --> 00:17:13,900
interestingly enough that top thing is

482
00:17:13,900 --> 00:17:16,900
two loops and the bottom thing is one

483
00:17:16,900 --> 00:17:19,300
loop so that's a loop fusion right so

484
00:17:19,300 --> 00:17:22,030
and it's still bounded by n but that's

485
00:17:22,030 --> 00:17:23,740
less loops which is good it's less

486
00:17:23,740 --> 00:17:25,120
operating you're creating less heat in

487
00:17:25,120 --> 00:17:27,819
your processor so to speak anyway that's

488
00:17:27,819 --> 00:17:29,020
what it's saying it's saying that the

489
00:17:29,020 --> 00:17:31,300
raw composition using a map is the same

490
00:17:31,300 --> 00:17:32,770
thing as chaining those two methods

491
00:17:32,770 --> 00:17:34,840
that's the law that it here's the law

492
00:17:34,840 --> 00:17:39,160
that that's what you get for free more

493
00:17:39,160 --> 00:17:41,200
broadly speaking what this is actually

494
00:17:41,200 --> 00:17:42,550
saying is that there's a really kind of

495
00:17:42,550 --> 00:17:44,650
tight relationship between the category

496
00:17:44,650 --> 00:17:46,440
HTML in the category jQuery or

497
00:17:46,440 --> 00:17:49,720
colloquially between stuff that

498
00:17:49,720 --> 00:17:51,760
manipulates HTML and stuff that

499
00:17:51,760 --> 00:17:53,110
manipulates jQuery objects which you I

500
00:17:53,110 --> 00:17:54,460
think you kind of understand intuitively

501
00:17:54,460 --> 00:17:57,429
so this functor that that takes HTML and

502
00:17:57,429 --> 00:18:00,059
turns it into jQuery the morphisms

503
00:18:00,059 --> 00:18:02,860
actually there's a set of them

504
00:18:02,860 --> 00:18:04,720
that depend on jQuery right so we

505
00:18:04,720 --> 00:18:06,610
remember we said that inside the jQuery

506
00:18:06,610 --> 00:18:08,110
methods that alter so let's take ad

507
00:18:08,110 --> 00:18:09,940
class for example and well while and I

508
00:18:09,940 --> 00:18:11,500
have another class here I have another

509
00:18:11,500 --> 00:18:13,480
example here a second inside that is

510
00:18:13,480 --> 00:18:15,760
living something that alters HTML

511
00:18:15,760 --> 00:18:17,620
elements right so it does two things

512
00:18:17,620 --> 00:18:19,630
really it alters the jQuery object then

513
00:18:19,630 --> 00:18:21,790
it also alters HTML elements so in some

514
00:18:21,790 --> 00:18:23,799
on some level it's dependent on some

515
00:18:23,799 --> 00:18:25,270
external thing that could just be

516
00:18:25,270 --> 00:18:27,610
altering the HTML elements so that's the

517
00:18:27,610 --> 00:18:28,960
relationship that we got here so a

518
00:18:28,960 --> 00:18:30,400
little if you wanted to do kind of the

519
00:18:30,400 --> 00:18:32,260
ghetto map version or math version of

520
00:18:32,260 --> 00:18:35,500
this it would be map plus some these

521
00:18:35,500 --> 00:18:37,690
morphisms these HTML altering functions

522
00:18:37,690 --> 00:18:40,870
equals some subset of the jQuery methods

523
00:18:40,870 --> 00:18:42,549
that you've used every day right so you

524
00:18:42,549 --> 00:18:45,429
can get all of those from map plus the

525
00:18:45,429 --> 00:18:47,260
HTML morphisms so that's the

526
00:18:47,260 --> 00:18:50,770
relationship as an example so inside foo

527
00:18:50,770 --> 00:18:53,110
now that we have map and this thing that

528
00:18:53,110 --> 00:18:55,660
alters HTML elements like I said there's

529
00:18:55,660 --> 00:18:57,760
tons of there's tons of methods that do

530
00:18:57,760 --> 00:19:00,130
this so add class after HTML prop they

531
00:19:00,130 --> 00:19:02,110
all look like this on the inside now it

532
00:19:02,110 --> 00:19:03,010
might be a little bit different they

533
00:19:03,010 --> 00:19:05,260
might use each they might use while that

534
00:19:05,260 --> 00:19:06,669
might use a for loop to loop over the

535
00:19:06,669 --> 00:19:08,950
jQuery set but they all do this and then

536
00:19:08,950 --> 00:19:12,220
alter the underlying HTML element so if

537
00:19:12,220 --> 00:19:13,960
they're doing remember that they're

538
00:19:13,960 --> 00:19:15,070
doing all these three things together

539
00:19:15,070 --> 00:19:17,320
which is bad but what we've said is that

540
00:19:17,320 --> 00:19:18,820
this relationship means that we can

541
00:19:18,820 --> 00:19:20,650
actually pull out that HTML part right

542
00:19:20,650 --> 00:19:24,100
so the relationship the functor between

543
00:19:24,100 --> 00:19:25,570
these two things is actually telling us

544
00:19:25,570 --> 00:19:28,179
that we can take that basic underlying

545
00:19:28,179 --> 00:19:31,059
alteration and then the jQuery method

546
00:19:31,059 --> 00:19:32,950
can only deal with arguments and looping

547
00:19:32,950 --> 00:19:35,679
and leave the alteration to the Foo okay

548
00:19:35,679 --> 00:19:37,450
leave it to the HTML morphism so we've

549
00:19:37,450 --> 00:19:39,610
actually the formalism the category

550
00:19:39,610 --> 00:19:42,370
theory aside from giving us loop fusion

551
00:19:42,370 --> 00:19:43,720
has also given us a way to better

552
00:19:43,720 --> 00:19:45,669
architect jQuery at an underlying level

553
00:19:45,669 --> 00:19:47,549
when you're manipulating the Dom okay

554
00:19:47,549 --> 00:19:50,830
and that's awesome so we're really happy

555
00:19:50,830 --> 00:19:52,660
because this sort of solved our problem

556
00:19:52,660 --> 00:19:54,280
the formalism the application of the

557
00:19:54,280 --> 00:19:55,929
formalism has sort of solved our problem

558
00:19:55,929 --> 00:20:03,429
for us great so I've just spent ok so I

559
00:20:03,429 --> 00:20:05,020
just spent 20 minutes convincing you

560
00:20:05,020 --> 00:20:06,910
just to blindly follow me through math

561
00:20:06,910 --> 00:20:08,740
and formalism right so let's talk about

562
00:20:08,740 --> 00:20:11,320
why you actually care first of all a

563
00:20:11,320 --> 00:20:13,900
common idiom in so let's let the suit

564
00:20:13,900 --> 00:20:15,490
okay and and I need you to assume for a

565
00:20:15,490 --> 00:20:16,270
moment one thing

566
00:20:16,270 --> 00:20:19,059
let's assume for a moment that jQuery in

567
00:20:19,059 --> 00:20:21,250
an alternate universe or let's say an

568
00:20:21,250 --> 00:20:22,420
alternate universe where I came to

569
00:20:22,420 --> 00:20:25,809
jQuery before a year ago and I got I got

570
00:20:25,809 --> 00:20:27,520
all gung-ho about category theory and I

571
00:20:27,520 --> 00:20:28,780
decided I'm gonna go to jQuery and

572
00:20:28,780 --> 00:20:30,340
separate all these out so the jQuery was

573
00:20:30,340 --> 00:20:31,720
now providing the underlying

574
00:20:31,720 --> 00:20:34,059
manipulation not as a part of the jQuery

575
00:20:34,059 --> 00:20:35,470
method but as a part of a separate thing

576
00:20:35,470 --> 00:20:37,780
that gets used in the jQuery method so

577
00:20:37,780 --> 00:20:39,000
what would you get out of this

578
00:20:39,000 --> 00:20:41,470
first of all rewrapping so rewrapping is

579
00:20:41,470 --> 00:20:44,140
a pretty common idiom in JavaScript that

580
00:20:44,140 --> 00:20:46,240
uses jQuery right so if you bind to a

581
00:20:46,240 --> 00:20:48,550
function if you when you want to get the

582
00:20:48,550 --> 00:20:51,250
target of the like a an event you use

583
00:20:51,250 --> 00:20:53,710
event dot target and that is actually an

584
00:20:53,710 --> 00:20:56,170
underlying thing that's an HTML element

585
00:20:56,170 --> 00:20:57,700
right so you end up rewrapping this I

586
00:20:57,700 --> 00:20:59,080
think you could use this in this case

587
00:20:59,080 --> 00:21:01,510
also but if you didn't have to do that

588
00:21:01,510 --> 00:21:03,880
or if you had foo the thing that

589
00:21:03,880 --> 00:21:05,679
manipulated HTML elements directly you

590
00:21:05,679 --> 00:21:07,300
wouldn't have to rewrap it right you

591
00:21:07,300 --> 00:21:09,429
could just call foo directly on the HTML

592
00:21:09,429 --> 00:21:11,410
element right simple you can simplify

593
00:21:11,410 --> 00:21:12,550
your code a little bit there's a little

594
00:21:12,550 --> 00:21:14,770
less cruft not a big deal just something

595
00:21:14,770 --> 00:21:16,840
to keep in mind so Fusion remember we

596
00:21:16,840 --> 00:21:19,870
said that this law meant that a chain

597
00:21:19,870 --> 00:21:21,670
was the same thing as composing the

598
00:21:21,670 --> 00:21:24,179
underlying alteration right so an

599
00:21:24,179 --> 00:21:26,950
example if you have to remove attributes

600
00:21:26,950 --> 00:21:29,110
in a chain that's actually you can

601
00:21:29,110 --> 00:21:31,360
actually fuse this manually and this is

602
00:21:31,360 --> 00:21:34,059
manual loop fusion using the underlying

603
00:21:34,059 --> 00:21:35,260
thing that alters elements because

604
00:21:35,260 --> 00:21:38,830
remember each each loops over the set of

605
00:21:38,830 --> 00:21:40,900
jQuery the jQuery said and gives you

606
00:21:40,900 --> 00:21:43,030
each HTML element so you can then

607
00:21:43,030 --> 00:21:44,950
manipulate that directly so now you've

608
00:21:44,950 --> 00:21:46,720
gone from two loops to one loop which is

609
00:21:46,720 --> 00:21:50,530
good you avoid doing you know variable

610
00:21:50,530 --> 00:21:52,559
incrementing you do you avoid doing

611
00:21:52,559 --> 00:21:54,520
array access and a whole host other

612
00:21:54,520 --> 00:21:57,820
things which in and of itself isn't like

613
00:21:57,820 --> 00:21:59,320
mind blowing and I don't expect you to

614
00:21:59,320 --> 00:22:02,010
read that up there but the blue bar is

615
00:22:02,010 --> 00:22:05,650
when you're using loop fusion when

616
00:22:05,650 --> 00:22:07,420
you're using the fused version and the

617
00:22:07,420 --> 00:22:08,679
red bar is when you're not so when

618
00:22:08,679 --> 00:22:09,730
you're just doing change so there's a

619
00:22:09,730 --> 00:22:11,890
performance benefit that huge but it's

620
00:22:11,890 --> 00:22:15,940
there I'm gonna say it's between 10 and

621
00:22:15,940 --> 00:22:18,400
15% it's not it's more like 5 but that's

622
00:22:18,400 --> 00:22:20,559
fine so we get some performance benefit

623
00:22:20,559 --> 00:22:21,820
out of doing the loop fusion so that

624
00:22:21,820 --> 00:22:23,500
that has a benefit getting getting

625
00:22:23,500 --> 00:22:25,270
access to that that underlying thing

626
00:22:25,270 --> 00:22:28,830
allows you to kind of smoosh these loops

627
00:22:28,830 --> 00:22:33,100
invocation so in in jQuery methods there

628
00:22:33,100 --> 00:22:36,490
are almost always an enormous number of

629
00:22:36,490 --> 00:22:38,260
invocation patterns that you can use to

630
00:22:38,260 --> 00:22:41,020
work with the same method so one example

631
00:22:41,020 --> 00:22:42,640
the one I always kind of use and it's

632
00:22:42,640 --> 00:22:44,140
actually a pretty simple example is

633
00:22:44,140 --> 00:22:46,360
remove attribute so this example is

634
00:22:46,360 --> 00:22:48,730
functionally equivalent to this you can

635
00:22:48,730 --> 00:22:50,230
either change two of them or you can use

636
00:22:50,230 --> 00:22:52,720
a white space separated list of

637
00:22:52,720 --> 00:22:54,730
attributes that you want to remove so

638
00:22:54,730 --> 00:22:57,070
and that's cool because it means you can

639
00:22:57,070 --> 00:22:58,960
call remove attribute less but there's a

640
00:22:58,960 --> 00:23:00,880
price to pay for doing that string

641
00:23:00,880 --> 00:23:02,230
parsing right and then removing the

642
00:23:02,230 --> 00:23:04,570
attributes okay that's not for free part

643
00:23:04,570 --> 00:23:06,130
of jQuery is bent is that it has always

644
00:23:06,130 --> 00:23:07,630
been about ease of use and not

645
00:23:07,630 --> 00:23:08,950
necessarily always about performance but

646
00:23:08,950 --> 00:23:09,760
those thing kind of things have a

647
00:23:09,760 --> 00:23:13,300
trade-off right so if you just go in to

648
00:23:13,300 --> 00:23:15,010
remove attribute and you tear out that

649
00:23:15,010 --> 00:23:17,710
feature you get a pretty big performance

650
00:23:17,710 --> 00:23:19,420
win in this case I'm gonna go ahead and

651
00:23:19,420 --> 00:23:22,180
say it's twenty percent but it you can

652
00:23:22,180 --> 00:23:24,820
see okay the the unfriendly version of

653
00:23:24,820 --> 00:23:27,070
remove attribute is the red bar okay and

654
00:23:27,070 --> 00:23:28,660
the friendly one is the the blue bar

655
00:23:28,660 --> 00:23:31,480
it's faster okay it's better in terms of

656
00:23:31,480 --> 00:23:33,160
performance now it's not better in terms

657
00:23:33,160 --> 00:23:35,290
of usability right but if we if we

658
00:23:35,290 --> 00:23:38,080
provided that remove attribute to

659
00:23:38,080 --> 00:23:39,850
manipulate Dom elements and we just left

660
00:23:39,850 --> 00:23:41,770
off all the invocation patterns you get

661
00:23:41,770 --> 00:23:44,590
the performance benefit and you wouldn't

662
00:23:44,590 --> 00:23:46,630
lose the other invocation pattern it's

663
00:23:46,630 --> 00:23:49,300
just sort of a new new a newly exposed

664
00:23:49,300 --> 00:23:51,390
API it wouldn't even increase the size

665
00:23:51,390 --> 00:23:53,920
so that's one other benefit is

666
00:23:53,920 --> 00:23:55,870
simplifying the manipulation of Dom

667
00:23:55,870 --> 00:23:57,790
elements when you don't because you're

668
00:23:57,790 --> 00:23:59,770
paying the if you're using jQuery and

669
00:23:59,770 --> 00:24:02,230
you just use the chain version you're

670
00:24:02,230 --> 00:24:03,820
paying the price for the other version

671
00:24:03,820 --> 00:24:07,060
in terms of performance okay so what you

672
00:24:07,060 --> 00:24:08,080
ideally would want to do is leave that

673
00:24:08,080 --> 00:24:09,820
in place and provide a second API in

674
00:24:09,820 --> 00:24:12,300
terms of the underlying HTML morphism

675
00:24:12,300 --> 00:24:15,610
dog food inside jQuery there are tons of

676
00:24:15,610 --> 00:24:17,470
methods that use other jQuery methods

677
00:24:17,470 --> 00:24:19,060
for example and this is a very simple

678
00:24:19,060 --> 00:24:21,190
example or simplified version of it but

679
00:24:21,190 --> 00:24:24,310
replaced with uses at least two other

680
00:24:24,310 --> 00:24:26,920
jQuery methods so it uses before and

681
00:24:26,920 --> 00:24:28,900
remove or a pendant remove that means

682
00:24:28,900 --> 00:24:31,480
that as if you optimize these things

683
00:24:31,480 --> 00:24:33,730
there's or if you were to use the

684
00:24:33,730 --> 00:24:35,950
underlying simplified version inside of

685
00:24:35,950 --> 00:24:37,810
jQuery methods even just not exposing it

686
00:24:37,810 --> 00:24:39,580
at all let's say we just decided to

687
00:24:39,580 --> 00:24:41,710
react attack jQuery the jQuery methods

688
00:24:41,710 --> 00:24:42,610
like this by them

689
00:24:42,610 --> 00:24:44,440
selves you would actually see a

690
00:24:44,440 --> 00:24:48,160
performance benefit faster the the split

691
00:24:48,160 --> 00:24:50,170
version is on the bottom it's the red

692
00:24:50,170 --> 00:24:52,000
and it's faster than the blue version

693
00:24:52,000 --> 00:24:53,710
above it so you get you get a

694
00:24:53,710 --> 00:24:55,179
performance benefit without actually

695
00:24:55,179 --> 00:24:56,710
even providing anything new to anyone

696
00:24:56,710 --> 00:24:58,600
else so jQuery would benefit this from

697
00:24:58,600 --> 00:25:02,170
this in terms of performance laughs and

698
00:25:02,170 --> 00:25:04,660
probably most importantly if you need a

699
00:25:04,660 --> 00:25:06,880
performance escape hatch in your jQuery

700
00:25:06,880 --> 00:25:08,740
code for whatever reason now I want to I

701
00:25:08,740 --> 00:25:10,660
want to caveat most of this right now

702
00:25:10,660 --> 00:25:13,090
with one thing most JavaScript

703
00:25:13,090 --> 00:25:15,240
performance problems in the browser are

704
00:25:15,240 --> 00:25:17,559
almost entirely due to things like

705
00:25:17,559 --> 00:25:19,840
reflows and Dom manipulation all

706
00:25:19,840 --> 00:25:20,980
JavaScript spends most of its time

707
00:25:20,980 --> 00:25:22,780
inside the browser the execution time is

708
00:25:22,780 --> 00:25:24,490
inside the browser it's not at the

709
00:25:24,490 --> 00:25:26,710
JavaScript level and so that's why I

710
00:25:26,710 --> 00:25:28,900
want to say before you run out and tell

711
00:25:28,900 --> 00:25:30,429
everyone that we can fix the the world's

712
00:25:30,429 --> 00:25:31,750
problems with these things that has to

713
00:25:31,750 --> 00:25:33,010
be taken into consideration right at

714
00:25:33,010 --> 00:25:34,090
some point javascript may actually

715
00:25:34,090 --> 00:25:36,280
become bottleneck for you but most the

716
00:25:36,280 --> 00:25:38,530
time it's in the Dom so before before I

717
00:25:38,530 --> 00:25:39,850
give you a big performance number which

718
00:25:39,850 --> 00:25:42,250
this is I wanted to caveat that so if we

719
00:25:42,250 --> 00:25:44,380
if we expose this thing and you needed

720
00:25:44,380 --> 00:25:46,809
it as a performance escape hatch for

721
00:25:46,809 --> 00:25:48,790
example if you're doing a bunch of

722
00:25:48,790 --> 00:25:50,890
element appending in your your your

723
00:25:50,890 --> 00:25:54,070
jQuery code and this for whatever reason

724
00:25:54,070 --> 00:25:56,590
was slowing down what you were doing you

725
00:25:56,590 --> 00:25:59,380
could take this and convert it into a

726
00:25:59,380 --> 00:26:01,720
while loop using the underlying append

727
00:26:01,720 --> 00:26:03,940
right so the the previous example just

728
00:26:03,940 --> 00:26:05,559
uses regular jQuery append right works

729
00:26:05,559 --> 00:26:07,270
on a jQuery object the underlying one

730
00:26:07,270 --> 00:26:09,880
requires HTML elements so if you do this

731
00:26:09,880 --> 00:26:12,610
with like a tight while loop and you

732
00:26:12,610 --> 00:26:14,830
take the if you extract the elements out

733
00:26:14,830 --> 00:26:16,600
of the jquery set and then you append

734
00:26:16,600 --> 00:26:17,799
whatever element you're appending

735
00:26:17,799 --> 00:26:19,840
manually using this append you get a

736
00:26:19,840 --> 00:26:22,750
gigantic performance improvement okay

737
00:26:22,750 --> 00:26:23,860
and this is what I mean in terms of an

738
00:26:23,860 --> 00:26:26,650
escape hatch now I don't know what the I

739
00:26:26,650 --> 00:26:27,850
don't know what the percentage is I

740
00:26:27,850 --> 00:26:29,110
think you're I think you can tell that

741
00:26:29,110 --> 00:26:30,850
that's a big difference so the big one

742
00:26:30,850 --> 00:26:32,320
at the top is the simplified one that

743
00:26:32,320 --> 00:26:35,590
just uses the HTML morphism directly so

744
00:26:35,590 --> 00:26:37,530
that's really pretty awesome again

745
00:26:37,530 --> 00:26:39,940
assuming your bottleneck is in that

746
00:26:39,940 --> 00:26:42,910
append it's really awesome and I think

747
00:26:42,910 --> 00:26:45,400
that that's it's you know it's a single

748
00:26:45,400 --> 00:26:46,780
threaded runtime you can always shave

749
00:26:46,780 --> 00:26:48,280
some time off but how much time do you

750
00:26:48,280 --> 00:26:49,600
want to spend on it personally and this

751
00:26:49,600 --> 00:26:50,590
is something that I've discussed with

752
00:26:50,590 --> 00:26:52,179
the folks in the jquery project too is

753
00:26:52,179 --> 00:26:53,590
that they have a lot of things that they

754
00:26:53,590 --> 00:26:54,790
need to do so it doesn't necessarily

755
00:26:54,790 --> 00:26:55,780
make sense for them to spend all their

756
00:26:55,780 --> 00:26:56,440
time on this

757
00:26:56,440 --> 00:26:58,030
when most bottlenecks live outside of

758
00:26:58,030 --> 00:27:01,870
the code so in light of the fact that

759
00:27:01,870 --> 00:27:04,000
this is actually pretty cool and then I

760
00:27:04,000 --> 00:27:04,870
like the idea

761
00:27:04,870 --> 00:27:07,150
clearly I'm here presenting about it and

762
00:27:07,150 --> 00:27:09,670
it doesn't seem like something that's

763
00:27:09,670 --> 00:27:11,230
really reasonable for jQuery to do up

764
00:27:11,230 --> 00:27:13,270
front I i work on the jquery team so i

765
00:27:13,270 --> 00:27:14,680
have contact with the jquery core folks

766
00:27:14,680 --> 00:27:16,120
if they have a lot of stuff on their

767
00:27:16,120 --> 00:27:18,040
plate so I decided what I'm gonna do is

768
00:27:18,040 --> 00:27:19,360
I'm gonna do this myself I'm gonna

769
00:27:19,360 --> 00:27:20,620
provide it as a separate library I'm

770
00:27:20,620 --> 00:27:22,030
basically gonna steal the code out of

771
00:27:22,030 --> 00:27:24,070
jQuery and provide those underlying

772
00:27:24,070 --> 00:27:26,560
manipulations as sort of a Dom

773
00:27:26,560 --> 00:27:28,660
manipulation macro set of macros just

774
00:27:28,660 --> 00:27:30,430
some functions that make manipulation

775
00:27:30,430 --> 00:27:32,020
easier if you don't need anything else

776
00:27:32,020 --> 00:27:35,080
from jQuery also I have to give credit

777
00:27:35,080 --> 00:27:38,020
to the folks who made Gilmore's this is

778
00:27:38,020 --> 00:27:40,750
one of their images I think it's a great

779
00:27:40,750 --> 00:27:44,350
picture fits with this slide so I also

780
00:27:44,350 --> 00:27:48,070
don't want to get sued for using it so

781
00:27:48,070 --> 00:27:49,180
this is available on github

782
00:27:49,180 --> 00:27:51,820
I'm not hitting the cat I wasn't even

783
00:27:51,820 --> 00:27:53,050
sure I wanted to do this when you guys

784
00:27:53,050 --> 00:27:55,050
sent out the email about hitting the cat

785
00:27:55,050 --> 00:27:57,280
it's not private anymore actually it's

786
00:27:57,280 --> 00:27:58,690
public and you can take a look at it and

787
00:27:58,690 --> 00:27:59,500
play around with it there's a couple

788
00:27:59,500 --> 00:28:01,210
things that it's meant to do first of

789
00:28:01,210 --> 00:28:03,340
all it's focused the goal is not to do

790
00:28:03,340 --> 00:28:05,830
anything other than make very Dom

791
00:28:05,830 --> 00:28:08,380
manipulation methods using the names

792
00:28:08,380 --> 00:28:09,790
that you're used to from using jQuery

793
00:28:09,790 --> 00:28:11,410
okay so the idea is that there's

794
00:28:11,410 --> 00:28:12,910
supposed to be a pretty close one to one

795
00:28:12,910 --> 00:28:14,440
relationship so when you say I want to

796
00:28:14,440 --> 00:28:15,580
empty something you don't have to think

797
00:28:15,580 --> 00:28:16,690
about what the name of the method is

798
00:28:16,690 --> 00:28:18,850
right it's just empty and they're

799
00:28:18,850 --> 00:28:20,760
provided just as methods by themselves

800
00:28:20,760 --> 00:28:23,290
and generally speaking they return the

801
00:28:23,290 --> 00:28:24,670
element that they're manipulating so you

802
00:28:24,670 --> 00:28:26,730
can do that composition if you want to

803
00:28:26,730 --> 00:28:29,860
it's functional so you know I am

804
00:28:29,860 --> 00:28:31,600
providing the goal is just to provide

805
00:28:31,600 --> 00:28:33,010
the method sort of the internals of

806
00:28:33,010 --> 00:28:35,830
jQuery and sort of expose them but I'm

807
00:28:35,830 --> 00:28:37,960
not you know crazy I think if you wanted

808
00:28:37,960 --> 00:28:39,280
to use this as a standard library I'm

809
00:28:39,280 --> 00:28:41,230
kind of trying to make that possible so

810
00:28:41,230 --> 00:28:42,700
first of all for most there's a

811
00:28:42,700 --> 00:28:44,140
namespace under which all these methods

812
00:28:44,140 --> 00:28:45,940
live okay so you're just empty the

813
00:28:45,940 --> 00:28:47,260
element it's very simple and it's

814
00:28:47,260 --> 00:28:49,210
functional it's you just pass the things

815
00:28:49,210 --> 00:28:51,160
in there's no objects it's not

816
00:28:51,160 --> 00:28:53,260
object-oriented it's just a method you

817
00:28:53,260 --> 00:28:55,420
can otherwise you can wrap it in a dhama

818
00:28:55,420 --> 00:28:58,360
and in a in a wheeled Dom object and

819
00:28:58,360 --> 00:29:00,640
then do things like chaining so there's

820
00:29:00,640 --> 00:29:02,170
a nice kind of fluent interface if

821
00:29:02,170 --> 00:29:03,220
that's what you feel like doing if you

822
00:29:03,220 --> 00:29:04,690
want to use the Sustainable library and

823
00:29:04,690 --> 00:29:06,910
lastly there's a very simple selecting

824
00:29:06,910 --> 00:29:08,470
interface it defaults to query selector

825
00:29:08,470 --> 00:29:10,300
where it's supported but you can plug in

826
00:29:10,300 --> 00:29:11,260
things like

827
00:29:11,260 --> 00:29:12,940
in this case is everybody know what

828
00:29:12,940 --> 00:29:15,280
sizzle is okay so for those that you

829
00:29:15,280 --> 00:29:17,500
don't at a jQuery selection engine it's

830
00:29:17,500 --> 00:29:18,880
called sizzle and it's provided as a

831
00:29:18,880 --> 00:29:20,350
separate library just gets used in

832
00:29:20,350 --> 00:29:24,070
jQuery it's modular so every single one

833
00:29:24,070 --> 00:29:27,220
of the methods I think this is old but

834
00:29:27,220 --> 00:29:29,290
there's like 17 or 18 methods right now

835
00:29:29,290 --> 00:29:30,640
they'll probably be more every single

836
00:29:30,640 --> 00:29:32,680
one of them is an AMD module so I and

837
00:29:32,680 --> 00:29:34,270
this is more for the build that I have

838
00:29:34,270 --> 00:29:36,460
in place to to constructed and provided

839
00:29:36,460 --> 00:29:38,200
as a single file but you don't have to

840
00:29:38,200 --> 00:29:39,430
you don't have to keep any of them right

841
00:29:39,430 --> 00:29:41,020
I wanted to see its kind of experimented

842
00:29:41,020 --> 00:29:43,570
in radical modularity it's well tested

843
00:29:43,570 --> 00:29:46,390
so I have a fork of jQuery where this is

844
00:29:46,390 --> 00:29:47,770
actually being used in each of the

845
00:29:47,770 --> 00:29:49,690
methods that they're mapped to so and I

846
00:29:49,690 --> 00:29:51,130
runs and it runs in the test suite

847
00:29:51,130 --> 00:29:53,320
jQuery test suite in passes so that was

848
00:29:53,320 --> 00:29:54,790
one of my goals I want it to be jQuery

849
00:29:54,790 --> 00:30:00,120
but not jQuery sort of its small

850
00:30:00,120 --> 00:30:02,410
smallish I haven't made any effort at

851
00:30:02,410 --> 00:30:03,550
all to keep it small in terms of

852
00:30:03,550 --> 00:30:06,309
minification but with the Dom stuff like

853
00:30:06,309 --> 00:30:08,620
the user friendly stuff it's about 1.5 K

854
00:30:08,620 --> 00:30:10,870
and it's about 1.2 K with howdini the

855
00:30:10,870 --> 00:30:12,040
user friendly stuff so the jQuery

856
00:30:12,040 --> 00:30:12,940
version of this it's probably a little

857
00:30:12,940 --> 00:30:14,830
bit less than that and it's some point

858
00:30:14,830 --> 00:30:16,270
I'll go through and make it smaller I'll

859
00:30:16,270 --> 00:30:17,440
- I'll make a pass to make it a little

860
00:30:17,440 --> 00:30:18,940
bit tinier and it might get a little bit

861
00:30:18,940 --> 00:30:22,210
bigger because I add methods lastly if

862
00:30:22,210 --> 00:30:23,860
you're interested in in more of this I

863
00:30:23,860 --> 00:30:26,380
have obviously Weald is on github you

864
00:30:26,380 --> 00:30:28,150
can find it under my name space that's

865
00:30:28,150 --> 00:30:30,850
the link my blog has other really nerdy

866
00:30:30,850 --> 00:30:32,260
stuff about category theory so there's

867
00:30:32,260 --> 00:30:33,550
actually a natural transformation that

868
00:30:33,550 --> 00:30:35,020
lives inside of jQuery which is kind of

869
00:30:35,020 --> 00:30:36,460
cool there's almost no benefit from it

870
00:30:36,460 --> 00:30:38,650
but it's fun anyway

871
00:30:38,650 --> 00:30:42,610
and I am sort of getting this together

872
00:30:42,610 --> 00:30:44,830
in terms of like writing a paper about

873
00:30:44,830 --> 00:30:47,470
it I have no illusions about it ever

874
00:30:47,470 --> 00:30:48,400
getting published but there is

875
00:30:48,400 --> 00:30:50,170
performance information there there's a

876
00:30:50,170 --> 00:30:52,150
lot of links to J's perf there if you're

877
00:30:52,150 --> 00:30:55,270
interested and that is category theory

878
00:30:55,270 --> 00:31:00,620
and jQuery

