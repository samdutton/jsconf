1
00:00:10,580 --> 00:00:13,130

I'm going to talk about the future of

2
00:00:13,130 --> 00:00:15,389
JavaScript I'm always talking about the

3
00:00:15,389 --> 00:00:21,420
future so as santa ana said if you if

4
00:00:21,420 --> 00:00:23,820
you don't study history you're condemned

5
00:00:23,820 --> 00:00:25,710
to repeat it I think that's true if you

6
00:00:25,710 --> 00:00:29,520
do study history too so the future of

7
00:00:29,520 --> 00:00:35,730
javascript is java because that's also

8
00:00:35,730 --> 00:00:40,460
the past i'm only slightly kidding i

9
00:00:40,460 --> 00:00:44,160
have to go back to nineteen ninety-five

10
00:00:44,160 --> 00:00:49,840
which was when i was small and

11
00:00:49,850 --> 00:00:53,129
javascript was created in a mad tearing

12
00:00:53,129 --> 00:00:56,489
hurry and i was thinking about this not

13
00:00:56,489 --> 00:00:58,019
only because of andreas is talk about

14
00:00:58,019 --> 00:01:03,839
j2me jas but also because i don't know i

15
00:01:03,839 --> 00:01:07,920
missed the 90s box calm had this picture

16
00:01:07,920 --> 00:01:09,300
in their piece about how that was the

17
00:01:09,300 --> 00:01:11,820
last great television season 94 95

18
00:01:11,820 --> 00:01:14,340
there's like my so-called wife and party

19
00:01:14,340 --> 00:01:20,190
of five and friends that's when i got my

20
00:01:20,190 --> 00:01:23,100
big break this is me before my hair went

21
00:01:23,100 --> 00:01:25,330
gray

22
00:01:25,340 --> 00:01:28,880
javascript had something to do with that

23
00:01:28,880 --> 00:01:32,750
I'd go to back then you couldn't find

24
00:01:32,750 --> 00:01:35,579
things on the web like you can now now I

25
00:01:35,579 --> 00:01:37,979
think you can find a lot of a lot of

26
00:01:37,979 --> 00:01:39,479
computer science papers not all of them

27
00:01:39,479 --> 00:01:43,619
some of them are still locked up behind

28
00:01:43,619 --> 00:01:46,319
you know paywalls but back then you had

29
00:01:46,319 --> 00:01:48,360
to go to real library and actually read

30
00:01:48,360 --> 00:01:50,579
bound journals and that's what I did I

31
00:01:50,579 --> 00:01:53,939
would go to this place this is Margaret

32
00:01:53,939 --> 00:01:55,829
Jack's hall at least the front corner of

33
00:01:55,829 --> 00:01:59,970
it in Stanford University count in

34
00:01:59,970 --> 00:02:03,420
California and I would go read papers in

35
00:02:03,420 --> 00:02:07,679
among the stacks I also maybe I went

36
00:02:07,679 --> 00:02:09,330
there because i read that John doar said

37
00:02:09,330 --> 00:02:10,979
he's a famous venture capitalist that

38
00:02:10,979 --> 00:02:13,290
any idiot could make a lot of money just

39
00:02:13,290 --> 00:02:15,750
by hanging around Margaret jacks hall

40
00:02:15,750 --> 00:02:18,450
that's the computer science offices

41
00:02:18,450 --> 00:02:19,799
that's where the computer science

42
00:02:19,799 --> 00:02:22,560
professors have their offices and office

43
00:02:22,560 --> 00:02:24,120
hours that's where the computer science

44
00:02:24,120 --> 00:02:25,769
library is that's the library that I was

45
00:02:25,769 --> 00:02:29,640
going to I didn't I didn't become a

46
00:02:29,640 --> 00:02:31,170
successful venture capitalist

47
00:02:31,170 --> 00:02:33,780
unfortunately but I did read a paper or

48
00:02:33,780 --> 00:02:36,060
two including one about java bytecode

49
00:02:36,060 --> 00:02:39,450
and this was right before I did the ten

50
00:02:39,450 --> 00:02:41,010
days at work to create the first

51
00:02:41,010 --> 00:02:44,430
JavaScript engine I was still thinking

52
00:02:44,430 --> 00:02:48,450
about Java even though the Java VM that

53
00:02:48,450 --> 00:02:50,340
the friend of mine Kip Hickman at

54
00:02:50,340 --> 00:02:52,319
Netscape it started building had been

55
00:02:52,319 --> 00:02:54,540
killed Netscape was doing a deal with

56
00:02:54,540 --> 00:02:57,569
Sun and bill joy at son said we can't

57
00:02:57,569 --> 00:03:00,269
have to Java vienes because they they

58
00:03:00,269 --> 00:03:01,440
wouldn't have bugged for bug

59
00:03:01,440 --> 00:03:04,620
compatibility Netscape has to use son's

60
00:03:04,620 --> 00:03:07,170
source code to actually make there be

61
00:03:07,170 --> 00:03:08,989
only one implementation of Java

62
00:03:08,989 --> 00:03:12,690
otherwise it'll fail now he was right

63
00:03:12,690 --> 00:03:15,030
though I think bill joy was right if we

64
00:03:15,030 --> 00:03:17,100
tried to reverse engineer or even got

65
00:03:17,100 --> 00:03:19,200
source code access and built our own jbm

66
00:03:19,200 --> 00:03:21,420
we would have had lots of bugs getting

67
00:03:21,420 --> 00:03:24,359
the interoperate and indeed when

68
00:03:24,359 --> 00:03:26,010
javascript came out and Microsoft

69
00:03:26,010 --> 00:03:27,450
reverse-engineer there were a lot of

70
00:03:27,450 --> 00:03:29,430
bugs in both engines and we had to write

71
00:03:29,430 --> 00:03:31,139
a standard down and work for many years

72
00:03:31,139 --> 00:03:33,690
to standardize JavaScript evolved the

73
00:03:33,690 --> 00:03:36,570
standard build test Suites like test 262

74
00:03:36,570 --> 00:03:38,460
it's really taken along

75
00:03:38,460 --> 00:03:41,370
time so Java has multiple

76
00:03:41,370 --> 00:03:43,410
implementations but I think all the

77
00:03:43,410 --> 00:03:45,710
competitive ones are proprietary and

78
00:03:45,710 --> 00:03:48,480
Java has test Suites but it also has a

79
00:03:48,480 --> 00:03:50,250
lot of code behind firewalls so who

80
00:03:50,250 --> 00:03:52,140
knows how all it interoperates anyway I

81
00:03:52,140 --> 00:03:54,060
was still looking at Java there's this

82
00:03:54,060 --> 00:03:58,020
paper by Gosling from 95 it's a nice

83
00:03:58,020 --> 00:04:00,090
little paper it talks about java

84
00:04:00,090 --> 00:04:02,250
bytecode java bytecode has has some

85
00:04:02,250 --> 00:04:05,130
issues most of the bob codes are typed

86
00:04:05,130 --> 00:04:08,250
some are overloaded for multiple types

87
00:04:08,250 --> 00:04:10,830
and you have to do crazy analysis to

88
00:04:10,830 --> 00:04:13,320
verify the code and do definite

89
00:04:13,320 --> 00:04:14,670
assignment analysis and do other things

90
00:04:14,670 --> 00:04:17,430
to make sure it's safe javascript was

91
00:04:17,430 --> 00:04:19,650
all untyped so i couldn't use the inside

92
00:04:19,650 --> 00:04:22,530
in this paper about modeling the types

93
00:04:22,530 --> 00:04:26,370
as you read the code modeling the stack

94
00:04:26,370 --> 00:04:29,340
machine that Java uses in an abstract

95
00:04:29,340 --> 00:04:31,710
way doing abstract interpretation but i

96
00:04:31,710 --> 00:04:33,900
did use that idea for the decompiler

97
00:04:33,900 --> 00:04:35,190
that i put in you know when you make a

98
00:04:35,190 --> 00:04:37,310
function turn into a string in

99
00:04:37,310 --> 00:04:39,360
JavaScript engines ever since I wrote

100
00:04:39,360 --> 00:04:41,870
the first one that I'm familiar with

101
00:04:41,870 --> 00:04:44,370
some of them actually go find the source

102
00:04:44,370 --> 00:04:46,350
or save the source and give you that

103
00:04:46,350 --> 00:04:48,750
source back as the two string result the

104
00:04:48,750 --> 00:04:52,260
ones I've built up until somebody

105
00:04:52,260 --> 00:04:53,880
Mozilla ripped it out the other year

106
00:04:53,880 --> 00:04:56,250
used a decompiler so they would actually

107
00:04:56,250 --> 00:04:58,980
take an internal form like a bytecode

108
00:04:58,980 --> 00:05:01,050
and turn it back into a string and i

109
00:05:01,050 --> 00:05:03,840
used the idea from this paper to build

110
00:05:03,840 --> 00:05:06,780
that and I also thought at the time why

111
00:05:06,780 --> 00:05:11,010
do we need typed bytecode Java already

112
00:05:11,010 --> 00:05:16,290
has types in its you know class files as

113
00:05:16,290 --> 00:05:17,790
descriptions of all the types of the

114
00:05:17,790 --> 00:05:20,400
static and instance fields and as type

115
00:05:20,400 --> 00:05:22,560
signatures for all the methods why do we

116
00:05:22,560 --> 00:05:25,460
need to have types on the bike codes to

117
00:05:25,460 --> 00:05:28,590
here's another thing from the paper it

118
00:05:28,590 --> 00:05:32,520
shows class vector this is just like old

119
00:05:32,520 --> 00:05:34,620
Java and then it shows the java

120
00:05:34,620 --> 00:05:36,450
bytecodes you can see they have names

121
00:05:36,450 --> 00:05:40,410
like a load I Const I for integer a is

122
00:05:40,410 --> 00:05:44,760
usually for array there's no DS here or

123
00:05:44,760 --> 00:05:47,130
B's for boolean or bite but it's typed

124
00:05:47,130 --> 00:05:49,340
mostly but not always which is screwy

125
00:05:49,340 --> 00:05:52,050
when Anders helzberg was doing

126
00:05:52,050 --> 00:05:55,080
the clr for C sharp and net all those

127
00:05:55,080 --> 00:05:58,169
languages at Microsoft he fixed some of

128
00:05:58,169 --> 00:06:00,090
these problems by making the the dotnet

129
00:06:00,090 --> 00:06:03,360
intermediate representation use untyped

130
00:06:03,360 --> 00:06:07,020
by code and typed assembly metadata COI

131
00:06:07,020 --> 00:06:09,960
data so you could always figure the

132
00:06:09,960 --> 00:06:13,319
types out from the the fields and the

133
00:06:13,319 --> 00:06:15,810
static members and all the signatures on

134
00:06:15,810 --> 00:06:17,930
the methods you didn't need to have the

135
00:06:17,930 --> 00:06:20,400
intermediate instructions carry types

136
00:06:20,400 --> 00:06:23,639
and proliferate but there were other

137
00:06:23,639 --> 00:06:26,759
problems he that CLR by code did not fix

138
00:06:26,759 --> 00:06:29,129
or the intermediate code for dotnet did

139
00:06:29,129 --> 00:06:32,610
not fix i meanwhile javascript was there

140
00:06:32,610 --> 00:06:35,789
kind of slow in the 90s but still going

141
00:06:35,789 --> 00:06:38,400
somewhere and finally taking off in the

142
00:06:38,400 --> 00:06:46,669
last 11 years I'd say so now it's 2014 a

143
00:06:46,669 --> 00:06:49,590
lot of water under the bridge Java is

144
00:06:49,590 --> 00:06:51,479
pretty much dead on the client plugins

145
00:06:51,479 --> 00:06:53,340
like Andre etc or malware vector

146
00:06:53,340 --> 00:06:56,610
especially turns out the Java plugin I

147
00:06:56,610 --> 00:06:59,250
think Brian Krebs security analyst said

148
00:06:59,250 --> 00:07:01,020
that it was the number one in its day

149
00:07:01,020 --> 00:07:02,969
it's probably not anymore number one

150
00:07:02,969 --> 00:07:06,719
vector for malware that people would pay

151
00:07:06,719 --> 00:07:10,259
for for black hat malware that's bought

152
00:07:10,259 --> 00:07:13,979
and sold assam j/s is a thing it's a

153
00:07:13,979 --> 00:07:15,840
subset of javascript it's like carving

154
00:07:15,840 --> 00:07:18,960
nature at the joints like Plato said

155
00:07:18,960 --> 00:07:21,050
it's it's finding inside JavaScript

156
00:07:21,050 --> 00:07:24,690
thanks to the bitwise and shift

157
00:07:24,690 --> 00:07:26,310
operators that I put in that we're in

158
00:07:26,310 --> 00:07:28,469
Java and C and I put them in cuz they

159
00:07:28,469 --> 00:07:30,870
were and see it's finding the subset

160
00:07:30,870 --> 00:07:34,650
that is typed in a way that can be very

161
00:07:34,650 --> 00:07:36,330
efficiently compiled to the machine to

162
00:07:36,330 --> 00:07:41,669
the metal and es6 is all but done

163
00:07:41,669 --> 00:07:44,610
there's there's you know Jason's talk

164
00:07:44,610 --> 00:07:46,169
this morning had a nice chart

165
00:07:46,169 --> 00:07:49,169
summarizing it but here's the here's the

166
00:07:49,169 --> 00:07:51,449
more hard-to-reach art and if you look

167
00:07:51,449 --> 00:07:54,690
at who's winning it's usually oh it's IE

168
00:07:54,690 --> 00:07:56,789
now the technical preview for IE now has

169
00:07:56,789 --> 00:08:00,120
the most of es6 implemented good for

170
00:08:00,120 --> 00:08:02,669
microsoft followed by echo jsb somebody

171
00:08:02,669 --> 00:08:04,830
on you in netscape cristo shock well by

172
00:08:04,830 --> 00:08:05,670
tracer

173
00:08:05,670 --> 00:08:09,120
arvid sins compiler that compiles es 62

174
00:08:09,120 --> 00:08:12,210
JavaScript yes five and then Firefox 35

175
00:08:12,210 --> 00:08:16,020
is as second after the browser in the

176
00:08:16,020 --> 00:08:22,260
front which is IE ouch so es6 is kind of

177
00:08:22,260 --> 00:08:25,800
the last of the big it it was so big and

178
00:08:25,800 --> 00:08:28,890
so connected we didn't want to cut it up

179
00:08:28,890 --> 00:08:31,470
into pieces but after es6 we're going to

180
00:08:31,470 --> 00:08:34,080
do smaller annual releases i'll talk

181
00:08:34,080 --> 00:08:37,680
about this in a few minutes ESX did

182
00:08:37,680 --> 00:08:39,810
absorb typed arrays so there's that word

183
00:08:39,810 --> 00:08:41,400
typed again now these aren't like Java

184
00:08:41,400 --> 00:08:42,840
typed like you have to write down those

185
00:08:42,840 --> 00:08:45,240
types but these are you know in 32 array

186
00:08:45,240 --> 00:08:48,810
and you know float32 array these are

187
00:08:48,810 --> 00:08:50,520
very important for working with the GPU

188
00:08:50,520 --> 00:08:53,520
and with simdi units which are also

189
00:08:53,520 --> 00:08:58,830
coming up and then typed objects in es7

190
00:08:58,830 --> 00:09:00,960
kind of take away the wackiness the

191
00:09:00,960 --> 00:09:02,550
fixed length nature in particular of

192
00:09:02,550 --> 00:09:04,970
typed arrays and allow you to have

193
00:09:04,970 --> 00:09:07,770
descriptions runtime descriptions of all

194
00:09:07,770 --> 00:09:09,330
your types of your properties if you

195
00:09:09,330 --> 00:09:11,070
want to so typed objects will allow you

196
00:09:11,070 --> 00:09:14,880
to imperative Lee through an API not

197
00:09:14,880 --> 00:09:17,750
declaratively say what the types of

198
00:09:17,750 --> 00:09:20,130
properties in an object are and they can

199
00:09:20,130 --> 00:09:21,570
be packed together they can be flat I

200
00:09:21,570 --> 00:09:23,610
can be extremely efficient it's kind of

201
00:09:23,610 --> 00:09:27,600
a generalization of typed arrays so then

202
00:09:27,600 --> 00:09:30,360
we also have typescript and something

203
00:09:30,360 --> 00:09:32,400
that it inspired according to the

204
00:09:32,400 --> 00:09:35,130
facebook guys flow and flow looks very

205
00:09:35,130 --> 00:09:37,170
very good because they done a

206
00:09:37,170 --> 00:09:39,210
sophisticated analysis or set of

207
00:09:39,210 --> 00:09:40,920
analyses really that allow them to

208
00:09:40,920 --> 00:09:42,120
capture a lot of the idiomatic

209
00:09:42,120 --> 00:09:43,800
JavaScript without just giving up and

210
00:09:43,800 --> 00:09:45,780
saying I can't I can't type this I'm

211
00:09:45,780 --> 00:09:49,210
going to just make it to type any

212
00:09:49,220 --> 00:09:51,840
everyone's really keen on seeing where

213
00:09:51,840 --> 00:09:54,630
these things go but back to the class

214
00:09:54,630 --> 00:09:56,870
example from Java I've rewritten in es6

215
00:09:56,870 --> 00:10:00,600
using typed arrays using a little bit of

216
00:10:00,600 --> 00:10:03,300
as in j s typecasting like andreas said

217
00:10:03,300 --> 00:10:06,120
if you see that vertical bar 0 that's

218
00:10:06,120 --> 00:10:10,950
bitwise or 0 that is a cast to in 32 and

219
00:10:10,950 --> 00:10:13,080
you probably know the other idioms for

220
00:10:13,080 --> 00:10:15,630
doing this there's triple right shift 0

221
00:10:15,630 --> 00:10:18,180
is cast you in 32

222
00:10:18,180 --> 00:10:25,880
and twiddle twiddle X is a conversion to

223
00:10:25,880 --> 00:10:31,649
int and you can do other things pretty

224
00:10:31,649 --> 00:10:34,140
efficiently you can use plus as a unary

225
00:10:34,140 --> 00:10:36,990
operator to make arbitrary value become

226
00:10:36,990 --> 00:10:39,570
a double so as Matthias relies on these

227
00:10:39,570 --> 00:10:42,810
type casts this isn't exactly pretty but

228
00:10:42,810 --> 00:10:46,290
this will generate in a modern engine

229
00:10:46,290 --> 00:10:48,029
that can handle the syntax like maybe

230
00:10:48,029 --> 00:10:49,890
the IE preview 1 this will generate his

231
00:10:49,890 --> 00:10:51,750
good code as any Java VM would on that

232
00:10:51,750 --> 00:10:56,850
old Gosling code so I I say the J svms

233
00:10:56,850 --> 00:11:02,339
are basically taking the dynamic untyped

234
00:11:02,339 --> 00:11:04,790
route to the same promise land that Java

235
00:11:04,790 --> 00:11:08,910
was was promising which didn't get

236
00:11:08,910 --> 00:11:10,920
delivered in the browser by job I got

237
00:11:10,920 --> 00:11:12,839
dillard by JavaScript we're almost there

238
00:11:12,839 --> 00:11:14,399
with typed objects and typed arrays I

239
00:11:14,399 --> 00:11:18,060
think we'll be there as Darth said the

240
00:11:18,060 --> 00:11:19,380
circle is now complete i guess this

241
00:11:19,380 --> 00:11:23,040
makes javascript darth vader and james

242
00:11:23,040 --> 00:11:29,880
gosling is 0 we want anyway let me talk

243
00:11:29,880 --> 00:11:31,709
about standardization because there

244
00:11:31,709 --> 00:11:33,660
there's always angst about how long it

245
00:11:33,660 --> 00:11:36,300
takes to do a standard and es6 is big i

246
00:11:36,300 --> 00:11:39,570
was involved in es for which helped get

247
00:11:39,570 --> 00:11:41,940
the standards body back in shape through

248
00:11:41,940 --> 00:11:45,060
the harmony peace process that i

249
00:11:45,060 --> 00:11:49,800
brokered but thank you standardization

250
00:11:49,800 --> 00:11:53,220
is going to go faster now that's Ian

251
00:11:53,220 --> 00:11:54,630
Hickson signature line I don't know if

252
00:11:54,630 --> 00:11:56,640
its original to him things that are

253
00:11:56,640 --> 00:12:00,390
impossible just take longer we're not

254
00:12:00,390 --> 00:12:02,190
going to take years and years anymore

255
00:12:02,190 --> 00:12:05,010
we're doing we're doing better here's

256
00:12:05,010 --> 00:12:06,660
how they look though in 2011 when I

257
00:12:06,660 --> 00:12:09,540
spoke at TX JSI I took a picture of the

258
00:12:09,540 --> 00:12:12,959
tc39 meeting right before then and it

259
00:12:12,959 --> 00:12:16,709
looked like that and then there's also

260
00:12:16,709 --> 00:12:18,690
some some famous artists and Italy did a

261
00:12:18,690 --> 00:12:21,750
picture of crock and me

262
00:12:21,760 --> 00:12:25,380
the Crocs play-doh and I'm Aristotle and

263
00:12:25,380 --> 00:12:28,360
I'm like cool it you know quit pointing

264
00:12:28,360 --> 00:12:31,660
up I actually miss crock hehe doesn't

265
00:12:31,660 --> 00:12:33,370
come to tc39 anymore and I looked around

266
00:12:33,370 --> 00:12:34,780
at the last meeting and I didn't see him

267
00:12:34,780 --> 00:12:37,210
and I actually felt sad even though he

268
00:12:37,210 --> 00:12:39,400
gets pretty grumpy but we need we need

269
00:12:39,400 --> 00:12:41,770
the grumpy idealists we need the

270
00:12:41,770 --> 00:12:43,630
play-doh where would Aristotle be

271
00:12:43,630 --> 00:12:47,890
without play-doh so now even without

272
00:12:47,890 --> 00:12:53,110
croc it's kind of a loss we have tc39

273
00:12:53,110 --> 00:12:56,410
doing its work on github my image is too

274
00:12:56,410 --> 00:12:59,590
big you can actually see almost

275
00:12:59,590 --> 00:13:00,940
everything that's happening there I

276
00:13:00,940 --> 00:13:04,390
think all the the the tests are moving

277
00:13:04,390 --> 00:13:07,810
there I believe the specification is

278
00:13:07,810 --> 00:13:09,790
going to move there it still has to be

279
00:13:09,790 --> 00:13:11,110
done in word if you can believe it

280
00:13:11,110 --> 00:13:14,100
because of the way akma and iso work but

281
00:13:14,100 --> 00:13:17,080
modulo the word issue it's also an HTML

282
00:13:17,080 --> 00:13:18,640
as a first-class source for the

283
00:13:18,640 --> 00:13:21,700
specification and people can send poll

284
00:13:21,700 --> 00:13:25,350
requests the meeting notes are kept on

285
00:13:25,350 --> 00:13:28,030
github and also available on ES

286
00:13:28,030 --> 00:13:29,590
disgustin org they're captured

287
00:13:29,590 --> 00:13:31,180
originally on I think it's alec sextons

288
00:13:31,180 --> 00:13:34,360
okay so clap etherpad or somebody's

289
00:13:34,360 --> 00:13:37,600
anyway well at my tc39 is no longer

290
00:13:37,600 --> 00:13:40,690
working in smoke-filled rooms or arguing

291
00:13:40,690 --> 00:13:44,710
in robes in the greek marketplace of

292
00:13:44,710 --> 00:13:46,720
ideas we're actually working on github

293
00:13:46,720 --> 00:13:49,360
which is good news and for es7 and

294
00:13:49,360 --> 00:13:51,190
beyond we're going to work on an annual

295
00:13:51,190 --> 00:13:53,440
cadence where it's like the chrome and

296
00:13:53,440 --> 00:13:55,540
firefox release process if proposals

297
00:13:55,540 --> 00:13:56,970
don't make it through a multi-stage

298
00:13:56,970 --> 00:13:59,890
waterfall they just don't ship that year

299
00:13:59,890 --> 00:14:01,330
they have to take a later train so the

300
00:14:01,330 --> 00:14:04,360
trains almost ship on time so es7 should

301
00:14:04,360 --> 00:14:06,550
be implemented so pieces that are

302
00:14:06,550 --> 00:14:07,840
actually implemented now should be

303
00:14:07,840 --> 00:14:10,420
implemented next year and finalized

304
00:14:10,420 --> 00:14:11,950
there's almost a little bit of dotting

305
00:14:11,950 --> 00:14:17,410
the i delay finalized in 2016 and as you

306
00:14:17,410 --> 00:14:19,630
know es6 is going to be finalized middle

307
00:14:19,630 --> 00:14:22,570
of next year so standards are getting

308
00:14:22,570 --> 00:14:25,780
better not jason did such a good job of

309
00:14:25,780 --> 00:14:28,030
covering es6 that i thought i'd just

310
00:14:28,030 --> 00:14:29,830
talk about a few es7 things that you

311
00:14:29,830 --> 00:14:31,180
might not have heard about how many

312
00:14:31,180 --> 00:14:34,150
people here use promises in some library

313
00:14:34,150 --> 00:14:38,020
they're good okay so you may know that

314
00:14:38,020 --> 00:14:39,640
generators which I think Jason didn't

315
00:14:39,640 --> 00:14:41,290
cover or any f6 and I'll show them in a

316
00:14:41,290 --> 00:14:43,750
minute but this example from Luke Hoban

317
00:14:43,750 --> 00:14:46,900
from Microsoft on the he was on the atma

318
00:14:46,900 --> 00:14:50,200
committee until last year shows if you

319
00:14:50,200 --> 00:14:52,540
were using promises to chain animation

320
00:14:52,540 --> 00:14:54,670
say you had an array of animations and

321
00:14:54,670 --> 00:14:57,940
you use this nice es6 for let annum of

322
00:14:57,940 --> 00:15:00,400
animations loop to iterate over the

323
00:15:00,400 --> 00:15:02,500
values of the animations array it's like

324
00:15:02,500 --> 00:15:04,780
four in but it's over the values then

325
00:15:04,780 --> 00:15:06,400
for each animation you'd have to chain

326
00:15:06,400 --> 00:15:10,510
using a promise and using p10 to call

327
00:15:10,510 --> 00:15:13,060
that animation and it's kind of a

328
00:15:13,060 --> 00:15:15,160
verbose and then at the end you'd have

329
00:15:15,160 --> 00:15:16,390
to worry about whether there was an

330
00:15:16,390 --> 00:15:17,920
exception in which you probably ignore

331
00:15:17,920 --> 00:15:21,100
and you finally with a final dub then at

332
00:15:21,100 --> 00:15:24,460
the bottom return the return value of of

333
00:15:24,460 --> 00:15:27,400
the last promise the fulfilment value of

334
00:15:27,400 --> 00:15:28,540
the last promise which is what's being

335
00:15:28,540 --> 00:15:31,000
captured by this red variable you know

336
00:15:31,000 --> 00:15:32,320
so if you just let everywhere there's no

337
00:15:32,320 --> 00:15:36,550
VARs so that's that's okay but you can

338
00:15:36,550 --> 00:15:38,800
do better with with generators so in es6

339
00:15:38,800 --> 00:15:41,320
function star makes a generator sort of

340
00:15:41,320 --> 00:15:43,720
like python inspired by python with some

341
00:15:43,720 --> 00:15:46,630
simplifications and the task jayus

342
00:15:46,630 --> 00:15:49,510
library from Dave Herman has a function

343
00:15:49,510 --> 00:15:51,930
called spawn you pass a generator

344
00:15:51,930 --> 00:15:54,730
function function star to a spawn call

345
00:15:54,730 --> 00:15:57,280
and you get a scheduler in the

346
00:15:57,280 --> 00:15:59,140
background that will resume that

347
00:15:59,140 --> 00:16:00,850
generator for you and that generator can

348
00:16:00,850 --> 00:16:03,730
then yield each animation and terin

349
00:16:03,730 --> 00:16:05,230
notice that there are no promises here

350
00:16:05,230 --> 00:16:06,840
anymore the promises are hidden inside

351
00:16:06,840 --> 00:16:09,370
the spawn machinery in the scheduler

352
00:16:09,370 --> 00:16:12,490
that test j/s implements so already this

353
00:16:12,490 --> 00:16:13,630
has gotten a lot simpler because it

354
00:16:13,630 --> 00:16:16,060
doesn't that promises with their lambda

355
00:16:16,060 --> 00:16:19,000
callbacks and it can use try-catch

356
00:16:19,000 --> 00:16:21,370
directly whereas the previous slide had

357
00:16:21,370 --> 00:16:24,570
to use the promised catch method and

358
00:16:24,570 --> 00:16:28,300
couldn't use try-catch notice also the

359
00:16:28,300 --> 00:16:29,920
arrow functions here which make it nice

360
00:16:29,920 --> 00:16:31,090
and short wouldn't put on my slide

361
00:16:31,090 --> 00:16:33,610
otherwise but even with arrows it's a

362
00:16:33,610 --> 00:16:36,130
little much whereas with with TAS TAS

363
00:16:36,130 --> 00:16:39,310
and spawn and generators it gets shorter

364
00:16:39,310 --> 00:16:41,080
and you can use real exception handling

365
00:16:41,080 --> 00:16:42,499
with try catch

366
00:16:42,499 --> 00:16:45,199
what we want to do for es7 is go one

367
00:16:45,199 --> 00:16:46,939
step further and this is again I think

368
00:16:46,939 --> 00:16:48,109
due to Luke home and originally

369
00:16:48,109 --> 00:16:50,059
Microsoft and I think this isn't good

370
00:16:50,059 --> 00:16:51,469
consensus in the committee and that's

371
00:16:51,469 --> 00:16:55,879
allow a sink to be used as a non

372
00:16:55,879 --> 00:16:58,849
reserved conditional keyword a

373
00:16:58,849 --> 00:17:00,559
contextual keyword in front of function

374
00:17:00,559 --> 00:17:02,299
so that you can make this chain

375
00:17:02,299 --> 00:17:05,029
animation a sinc function be a nascent

376
00:17:05,029 --> 00:17:07,639
function and once you say it's an async

377
00:17:07,639 --> 00:17:09,980
function up there at the top then inside

378
00:17:09,980 --> 00:17:12,529
it you can say a weight and you see the

379
00:17:12,529 --> 00:17:14,419
await takes the place of the yield in

380
00:17:14,419 --> 00:17:17,329
the previous version and there's no

381
00:17:17,329 --> 00:17:19,759
function star and there's no spawn call

382
00:17:19,759 --> 00:17:22,100
you don't need to use task j/s the

383
00:17:22,100 --> 00:17:25,039
scheduler gets absorbed into the es 7

384
00:17:25,039 --> 00:17:27,319
version of the language so async

385
00:17:27,319 --> 00:17:29,659
functions will not only de promised a

386
00:17:29,659 --> 00:17:31,820
file out of your code they will remove

387
00:17:31,820 --> 00:17:34,549
generators and task GS boilerplate and

388
00:17:34,549 --> 00:17:36,230
allow you to write something like this

389
00:17:36,230 --> 00:17:38,500
which i think is pretty important

390
00:17:38,500 --> 00:17:41,029
because we're JavaScript's go on your be

391
00:17:41,029 --> 00:17:43,460
a sink in the browser forever and it

392
00:17:43,460 --> 00:17:45,610
should be even if we have lots of new

393
00:17:45,610 --> 00:17:49,009
ways of composing workers and we might

394
00:17:49,009 --> 00:17:51,909
end up making ways to make the non

395
00:17:51,909 --> 00:17:55,100
foreground UI thread workers block a

396
00:17:55,100 --> 00:17:57,950
sinks the way to go so and that's

397
00:17:57,950 --> 00:18:00,259
through a note too so I wanted to share

398
00:18:00,259 --> 00:18:03,440
that and then quickly run through other

399
00:18:03,440 --> 00:18:05,029
things that are on board the may know

400
00:18:05,029 --> 00:18:08,139
about simdi I'll give a little demo is

401
00:18:08,139 --> 00:18:10,779
single instruction multiple data its

402
00:18:10,779 --> 00:18:13,600
architecture acronym that describes

403
00:18:13,600 --> 00:18:19,360
vector units short units that short

404
00:18:19,360 --> 00:18:21,649
vectors that contain integers or

405
00:18:21,649 --> 00:18:23,769
floating point numbers pack usually for

406
00:18:23,769 --> 00:18:26,210
32-bit floats or for 32-bit ants but

407
00:18:26,210 --> 00:18:28,970
they come in different sizes 8 16 bit 16

408
00:18:28,970 --> 00:18:31,460
8 bit generally they're multiplying 2

409
00:18:31,460 --> 00:18:35,509
128 bits Intel's more recent work also

410
00:18:35,509 --> 00:18:38,029
has 256 bit long vectors and they all

411
00:18:38,029 --> 00:18:40,340
get pissed up into power of two sizes

412
00:18:40,340 --> 00:18:42,649
for integers and floating points pretty

413
00:18:42,649 --> 00:18:45,409
important for speeding up DSP code game

414
00:18:45,409 --> 00:18:49,340
code physics code graphics code typed

415
00:18:49,340 --> 00:18:53,149
objects i mentioned value objects which

416
00:18:53,149 --> 00:18:56,570
include notably finally in 64 and un six

417
00:18:56,570 --> 00:19:00,559
for real and that means we don't want to

418
00:19:00,559 --> 00:19:01,610
just hard code these so we're going to

419
00:19:01,610 --> 00:19:03,380
make user-defined operators and literals

420
00:19:03,380 --> 00:19:04,940
in the language so you can have your own

421
00:19:04,940 --> 00:19:06,769
operators probably makes sense for

422
00:19:06,769 --> 00:19:08,990
people using matrices and vectors even

423
00:19:08,990 --> 00:19:10,850
mutable objects could have operators and

424
00:19:10,850 --> 00:19:13,759
you can go to town and async generators

425
00:19:13,759 --> 00:19:15,350
I showed you a sinc functions async

426
00:19:15,350 --> 00:19:18,259
generators would be sort of what they

427
00:19:18,259 --> 00:19:20,330
sound like that's something that's being

428
00:19:20,330 --> 00:19:26,490
worked on by Jafar sign of Netflix so

429
00:19:26,500 --> 00:19:29,570
the s7 is going to be smaller you can

430
00:19:29,570 --> 00:19:31,580
tell this isn't nearly as big as that

431
00:19:31,580 --> 00:19:34,039
giant kangaroo chart and maybe some

432
00:19:34,039 --> 00:19:35,740
stuff will get cut but we'll get it done

433
00:19:35,740 --> 00:19:39,409
it'll be back next year implemented next

434
00:19:39,409 --> 00:19:42,379
year and finalized into the beginning of

435
00:19:42,379 --> 00:19:45,460
the following year and that's exciting

436
00:19:45,460 --> 00:19:51,559
but nothing beats a excitement like a

437
00:19:51,559 --> 00:19:53,480
demo so I'm going to try to show some

438
00:19:53,480 --> 00:19:57,830
things here first of all this is the

439
00:19:57,830 --> 00:20:02,240
demo from the Intel folks showing how

440
00:20:02,240 --> 00:20:03,860
simdi can speed up your co here's a

441
00:20:03,860 --> 00:20:06,919
Mandelbrot generator and if you don't

442
00:20:06,919 --> 00:20:09,889
have simdi it starts off a little under

443
00:20:09,889 --> 00:20:11,330
30 frames a second then it degrades

444
00:20:11,330 --> 00:20:13,850
because the complexity is growing as we

445
00:20:13,850 --> 00:20:19,850
zoom in if I say use simdi it zooms up

446
00:20:19,850 --> 00:20:23,000
by almost factor of 4 and it will it

447
00:20:23,000 --> 00:20:24,320
will again fluctuate depending on the

448
00:20:24,320 --> 00:20:26,389
complexity but it's still roughly

449
00:20:26,389 --> 00:20:27,830
between three and four times faster

450
00:20:27,830 --> 00:20:30,200
because it's getting that for full speed

451
00:20:30,200 --> 00:20:32,210
up for the parallelizable parts of the

452
00:20:32,210 --> 00:20:36,169
code by using for float32 24 and 32 s at

453
00:20:36,169 --> 00:20:38,629
a time it's using vectors so all the

454
00:20:38,629 --> 00:20:39,950
additions or all the multiplications

455
00:20:39,950 --> 00:20:45,230
happen at once so game developers and

456
00:20:45,230 --> 00:20:47,960
people writing all sorts of things will

457
00:20:47,960 --> 00:20:51,710
benefit from this now I don't want to

458
00:20:51,710 --> 00:20:53,299
make this long it's all about games but

459
00:20:53,299 --> 00:20:55,580
it kind of it's important to give games

460
00:20:55,580 --> 00:20:57,049
there do because they stress test

461
00:20:57,049 --> 00:20:59,629
everything I think I saw the CTO valve

462
00:20:59,629 --> 00:21:01,129
many years ago at game developer

463
00:21:01,129 --> 00:21:03,559
conference say that only games were

464
00:21:03,559 --> 00:21:06,080
really pushing as applications as a

465
00:21:06,080 --> 00:21:07,610
class of applications only games are

466
00:21:07,610 --> 00:21:08,620
really pushing on

467
00:21:08,620 --> 00:21:12,150
you know concurrency parallel hardware

468
00:21:12,150 --> 00:21:16,140
vector units simdi GPU programming

469
00:21:16,140 --> 00:21:19,660
aggressive memory management so games

470
00:21:19,660 --> 00:21:23,170
are like the really hard case and this

471
00:21:23,170 --> 00:21:28,900
demo I'll start with is the banana bread

472
00:21:28,900 --> 00:21:30,970
game based on the open-source cube 2

473
00:21:30,970 --> 00:21:33,760
engine a C++ code base that's compiled

474
00:21:33,760 --> 00:21:36,550
to JavaScript beat by M scripting it's

475
00:21:36,550 --> 00:21:39,580
compiled to as MJS this version this fun

476
00:21:39,580 --> 00:21:43,990
because it embeds doom the free version

477
00:21:43,990 --> 00:21:46,870
and and so you can be in the outer game

478
00:21:46,870 --> 00:21:48,250
I'm gonna have to kill this bought

479
00:21:48,250 --> 00:21:51,010
before it kills me there's a ball that's

480
00:21:51,010 --> 00:21:52,390
going to come out in a minute and you

481
00:21:52,390 --> 00:21:53,830
can see this inner game is on the wall

482
00:21:53,830 --> 00:22:02,290
there and if you okay remove bottom if

483
00:22:02,290 --> 00:22:05,140
you hit vertical bar now I'm playing the

484
00:22:05,140 --> 00:22:07,270
inner game that proved this isn't the

485
00:22:07,270 --> 00:22:09,790
video on youtube as somebody accused me

486
00:22:09,790 --> 00:22:11,590
of running I'll let you guys tell me

487
00:22:11,590 --> 00:22:15,600
which game first episode second episode

488
00:22:15,600 --> 00:22:25,840
third episode is your clap dirty all

489
00:22:25,840 --> 00:22:28,330
right this one I'm going to use please

490
00:22:28,330 --> 00:22:32,530
don't kill me I believe control shoots

491
00:22:32,530 --> 00:22:34,900
yes the arrow keys turn so I'm the outer

492
00:22:34,900 --> 00:22:38,290
game is like WASD to move around and the

493
00:22:38,290 --> 00:22:42,340
inner game is arrow keys I think I can

494
00:22:42,340 --> 00:22:44,890
strafe yeah I can strafe with greater

495
00:22:44,890 --> 00:22:48,130
than and less than and / those something

496
00:22:48,130 --> 00:22:50,590
not sure what and there are monsters in

497
00:22:50,590 --> 00:22:53,260
the inner game this is like oh yeah do I

498
00:22:53,260 --> 00:23:01,720
have to like how do I hit that there now

499
00:23:01,720 --> 00:23:03,670
I'm in trouble so I'm playing the inner

500
00:23:03,670 --> 00:23:12,280
game it ah tackle demon all right come

501
00:23:12,280 --> 00:23:14,470
on died either ow

502
00:23:14,470 --> 00:23:22,740
ok

503
00:23:22,750 --> 00:23:24,670
now what's what's really cool about this

504
00:23:24,670 --> 00:23:32,130
is there's a where is it oh it's my

505
00:23:32,130 --> 00:23:35,350
off-screen banana bread thank you let's

506
00:23:35,350 --> 00:23:38,530
get out of this there's just a few

507
00:23:38,530 --> 00:23:40,720
hundred lines of JavaScript to glue the

508
00:23:40,720 --> 00:23:42,370
inner game to the outer game using a

509
00:23:42,370 --> 00:23:45,130
worker this is from alone Sakai you can

510
00:23:45,130 --> 00:23:50,770
see he sets up a worker that contains

511
00:23:50,770 --> 00:23:52,990
boon jas boon is the name of the free

512
00:23:52,990 --> 00:23:55,420
doom code and that's in a separate JS

513
00:23:55,420 --> 00:23:57,040
file and it runs as the workers source

514
00:23:57,040 --> 00:24:00,580
and then using sort of a proxy and ad

515
00:24:00,580 --> 00:24:03,220
hoc proxy he glues the inner game into

516
00:24:03,220 --> 00:24:04,690
the outer game so he sends these

517
00:24:04,690 --> 00:24:06,220
messages with names like standard out

518
00:24:06,220 --> 00:24:08,770
standard error window canvas along he

519
00:24:08,770 --> 00:24:10,990
can do resizes and renders he has to

520
00:24:10,990 --> 00:24:14,350
clone events has to worry about mapping

521
00:24:14,350 --> 00:24:17,200
the keys through but this is like a

522
00:24:17,200 --> 00:24:18,820
trivial amount of blue code to take two

523
00:24:18,820 --> 00:24:20,200
games that weren't written to be

524
00:24:20,200 --> 00:24:22,150
embedded one in the other and then put

525
00:24:22,150 --> 00:24:24,400
them together it shows how JavaScript on

526
00:24:24,400 --> 00:24:25,660
the web in general are really good for

527
00:24:25,660 --> 00:24:28,990
mashing things up for composition if you

528
00:24:28,990 --> 00:24:31,810
had to write a C++ mashup of these two

529
00:24:31,810 --> 00:24:33,790
games it would be a nightmare so that's

530
00:24:33,790 --> 00:24:37,150
that's cool and then this is unreal

531
00:24:37,150 --> 00:24:40,360
engine 3 which is still a good demo on i

532
00:24:40,360 --> 00:24:44,830
mentioned java bytecode here is the new

533
00:24:44,830 --> 00:24:49,110
java bytecode this is this is the actual

534
00:24:49,110 --> 00:24:52,660
it's going to take a while it's big it's

535
00:24:52,660 --> 00:24:54,130
as I'm Jay s so it looks quite

536
00:24:54,130 --> 00:24:57,430
voluminous but more fun to see the game

537
00:24:57,430 --> 00:25:02,920
let's go here so this is I hope it's

538
00:25:02,920 --> 00:25:06,990
going to make sound I hear it any else I

539
00:25:06,990 --> 00:25:13,240
think it's only me

540
00:25:13,250 --> 00:25:17,930
somebody has to stick a mic here oh good

541
00:25:17,930 --> 00:25:31,350
and then i'll show you my mad skills

542
00:25:31,360 --> 00:25:41,640
these are

543
00:25:41,650 --> 00:25:45,160
it's it's fully playable smooth 50

544
00:25:45,160 --> 00:25:47,800
frames a second and I'm cheating a

545
00:25:47,800 --> 00:25:53,370
massively I'm in god mode it's daddy

546
00:25:53,370 --> 00:25:55,750
you're really nice effects if you look

547
00:25:55,750 --> 00:25:58,690
at the God raised the Sun see the ray

548
00:25:58,690 --> 00:26:02,500
tracing this is all WebGL and as MJS

549
00:26:02,500 --> 00:26:06,010
working together this works in all the

550
00:26:06,010 --> 00:26:07,120
browsers are trying to make this work

551
00:26:07,120 --> 00:26:10,210
really fast however they do it more

552
00:26:10,210 --> 00:26:14,460
power to them all right killing spree

553
00:26:14,460 --> 00:26:19,330
okay so then I think the last demo I

554
00:26:19,330 --> 00:26:21,480
will do makes if I can show you the

555
00:26:21,480 --> 00:26:26,950
assembly code though this is the source

556
00:26:26,950 --> 00:26:28,450
there's some handwritten stuffs you see

557
00:26:28,450 --> 00:26:31,660
it's very pretty but then it's prepended

558
00:26:31,660 --> 00:26:33,610
it's concatenated as a source file to

559
00:26:33,610 --> 00:26:36,730
the Asmodeus code which is not so pretty

560
00:26:36,730 --> 00:26:39,310
but there's your modern bike code right

561
00:26:39,310 --> 00:26:44,520
there's um there's your Java has a

562
00:26:44,520 --> 00:26:48,990
number if greater than or if equal

563
00:26:48,990 --> 00:26:50,890
branching conditional branching

564
00:26:50,890 --> 00:26:52,930
instructions javascript has the if

565
00:26:52,930 --> 00:26:55,690
statement Java has you know integer

566
00:26:55,690 --> 00:26:57,940
operations there's your or zero that's

567
00:26:57,940 --> 00:27:01,930
that's your cast to integer so I just

568
00:27:01,930 --> 00:27:05,010
wanted to show that okay last thing is

569
00:27:05,010 --> 00:27:07,900
not only the epic Unreal Engine but also

570
00:27:07,900 --> 00:27:11,200
the unity engine has been cross compile

571
00:27:11,200 --> 00:27:12,820
with them scripting and its runtimes

572
00:27:12,820 --> 00:27:15,960
ported to the web so unity is supporting

573
00:27:15,960 --> 00:27:18,610
html5 WebGL as a first-class target

574
00:27:18,610 --> 00:27:21,580
Asmodeus is the first class target this

575
00:27:21,580 --> 00:27:24,850
is dead trigger 2 it's pretty fun the

576
00:27:24,850 --> 00:27:26,350
best part of this game is this the

577
00:27:26,350 --> 00:27:29,950
Sentry chickens they have machine guns

578
00:27:29,950 --> 00:27:31,789
on their back

579
00:27:31,789 --> 00:27:34,129
so they they take care of those zombies

580
00:27:34,129 --> 00:27:40,850
for you know no problem and again smooth

581
00:27:40,850 --> 00:27:43,729
gameplay oh he's trying to crawl after

582
00:27:43,729 --> 00:27:46,369
me huh they got him he's kamikaze guys

583
00:27:46,369 --> 00:27:51,080
will try to blow you up so best thing to

584
00:27:51,080 --> 00:27:57,679
do with them is a grenade I'm not in god

585
00:27:57,679 --> 00:28:00,679
mode here but I'm doing okay I can take

586
00:28:00,679 --> 00:28:03,350
some help just in case now there's that

587
00:28:03,350 --> 00:28:10,499
big kamikaze guy watch out uh-oh grenade

588
00:28:10,509 --> 00:28:21,710
second grenade oh good

589
00:28:21,720 --> 00:28:28,530
so like I said games are fun and all and

590
00:28:28,530 --> 00:28:31,800
kind of violent but they're also the you

591
00:28:31,800 --> 00:28:35,550
know the the that if you can dodge a

592
00:28:35,550 --> 00:28:37,920
wrench you can dodge a ball test so if

593
00:28:37,920 --> 00:28:40,280
you can run these games you can you can

594
00:28:40,280 --> 00:28:43,110
run a lot of code and that's why I

595
00:28:43,110 --> 00:28:44,700
always close these talks with this

596
00:28:44,700 --> 00:28:49,080
homage to Wesley Snipes in passenger 57

597
00:28:49,080 --> 00:28:51,180
another nineties movie was not that

598
00:28:51,180 --> 00:28:53,160
great Wesley he's always awesome when he

599
00:28:53,160 --> 00:28:57,090
gets his martial arts face on but almost

600
00:28:57,090 --> 00:28:59,250
been on Jas it was it was never going to

601
00:28:59,250 --> 00:29:02,670
win it was this incredible underdog for

602
00:29:02,670 --> 00:29:03,900
too many years and then when it started

603
00:29:03,900 --> 00:29:05,670
coming up there was still flash there

604
00:29:05,670 --> 00:29:08,340
was Java plug-in pretty much all

605
00:29:08,340 --> 00:29:10,740
JavaScript now all the browser vendors

606
00:29:10,740 --> 00:29:12,090
were acting serious about it we're

607
00:29:12,090 --> 00:29:13,620
evolving it we're going on to a rapid

608
00:29:13,620 --> 00:29:15,150
release process we're adding all the

609
00:29:15,150 --> 00:29:16,560
hardware api's you need to do everything

610
00:29:16,560 --> 00:29:20,130
with the machine and it's kicking Javas

611
00:29:20,130 --> 00:29:21,930
ass so almost bet on Jas thank you very

612
00:29:21,930 --> 00:29:47,900
much

