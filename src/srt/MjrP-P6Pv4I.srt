1
00:00:38,490 --> 00:00:40,780

my name is Forrest Norville and I'm a

2
00:00:40,780 --> 00:00:42,610
developer at MPM incorporated and I'm

3
00:00:42,610 --> 00:00:43,750
here to talk to you about the next

4
00:00:43,750 --> 00:00:47,200
version or two of JavaScript I'm truly

5
00:00:47,200 --> 00:00:48,850
sorry that I'm what stands between you

6
00:00:48,850 --> 00:00:50,770
and lunch but this is a talk I've wanted

7
00:00:50,770 --> 00:00:52,720
to give for a long time and I hope you

8
00:00:52,720 --> 00:00:53,710
find it valuable

9
00:00:53,710 --> 00:00:55,960
I also compared you all the cows at

10
00:00:55,960 --> 00:01:00,370
least once in here so that's a thing so

11
00:01:00,370 --> 00:01:02,650
equi script the standard that defines

12
00:01:02,650 --> 00:01:04,269
the next version of the JavaScript

13
00:01:04,269 --> 00:01:05,950
language is probably going to be

14
00:01:05,950 --> 00:01:08,170
ratified towards the end of this year it

15
00:01:08,170 --> 00:01:09,909
describes the most sweeping set of

16
00:01:09,909 --> 00:01:11,560
changes to the language and at least a

17
00:01:11,560 --> 00:01:13,390
decade and it's the endpoint of a lot of

18
00:01:13,390 --> 00:01:16,899
work and at least one giant fiasco as a

19
00:01:16,899 --> 00:01:18,609
node developer who's been writing fairly

20
00:01:18,609 --> 00:01:20,259
involved javascript full-time for the

21
00:01:20,259 --> 00:01:21,700
last three years and been using

22
00:01:21,700 --> 00:01:23,859
javascript is a full-stack developer for

23
00:01:23,859 --> 00:01:26,139
at least a decade before that I have a

24
00:01:26,139 --> 00:01:27,520
lot of friends who are also node

25
00:01:27,520 --> 00:01:30,130
developers as es6 gets closer to

26
00:01:30,130 --> 00:01:31,780
standardization a lot of friends are

27
00:01:31,780 --> 00:01:33,340
skeptical or concerned about what they

28
00:01:33,340 --> 00:01:34,959
see is needless complication and

29
00:01:34,959 --> 00:01:37,659
wrongheaded design decisions I can see

30
00:01:37,659 --> 00:01:39,249
why you might feel that wave there's a

31
00:01:39,249 --> 00:01:40,600
lot that's going to change as the new

32
00:01:40,600 --> 00:01:42,490
features roll out and it's not clear how

33
00:01:42,490 --> 00:01:43,869
all this new stuff is going to combine

34
00:01:43,869 --> 00:01:46,270
but every risk can also be viewed as an

35
00:01:46,270 --> 00:01:48,189
opportunity I feel comfortable saying

36
00:01:48,189 --> 00:01:50,469
that everything that's in es6 as of now

37
00:01:50,469 --> 00:01:53,109
has a good reason to be there in this

38
00:01:53,109 --> 00:01:54,219
talk I'm going to spend a little time

39
00:01:54,219 --> 00:01:55,990
talking about the trauma which shaped

40
00:01:55,990 --> 00:01:58,450
the development process of es6 and then

41
00:01:58,450 --> 00:01:59,859
talk about what we can do as a community

42
00:01:59,859 --> 00:02:02,340
to figure out how to use es6 effectively

43
00:02:02,340 --> 00:02:04,209
ultimately the point of this talk is

44
00:02:04,209 --> 00:02:07,270
this it's up to us as developers to make

45
00:02:07,270 --> 00:02:09,910
es6 is a success and we can do that if

46
00:02:09,910 --> 00:02:11,560
we work together and spread what we

47
00:02:11,560 --> 00:02:14,740
learn as widely and quickly as we can

48
00:02:14,740 --> 00:02:18,680
so es6 wasn't developed in a vacuum

49
00:02:18,680 --> 00:02:20,480
there are a lot of parties involved and

50
00:02:20,480 --> 00:02:21,890
I think it's helpful to map out who

51
00:02:21,890 --> 00:02:23,660
everybody is and how they relate or

52
00:02:23,660 --> 00:02:26,120
don't to each other I grouped the

53
00:02:26,120 --> 00:02:27,620
contributors into three categories

54
00:02:27,620 --> 00:02:30,140
standards committees stakeholders or

55
00:02:30,140 --> 00:02:32,410
implementers and the developer community

56
00:02:32,410 --> 00:02:35,420
first the committee's in particular and

57
00:02:35,420 --> 00:02:38,210
in particular tc39 it's impossible to

58
00:02:38,210 --> 00:02:39,800
discuss the development of JavaScript

59
00:02:39,800 --> 00:02:42,050
without mentioning tc39 or to give it

60
00:02:42,050 --> 00:02:44,270
its full name ACMA International

61
00:02:44,270 --> 00:02:47,870
Technical Committee 39 tc39 is the

62
00:02:47,870 --> 00:02:50,900
steward responsible for es 262 the Ekman

63
00:02:50,900 --> 00:02:53,150
scripts standard the two most important

64
00:02:53,150 --> 00:02:55,340
figures on tc39 are its chairman brendan

65
00:02:55,340 --> 00:02:57,380
eich who really doesn't need any further

66
00:02:57,380 --> 00:03:00,020
description and the editor of es 262

67
00:03:00,020 --> 00:03:02,840
alan wharfs brock without them and the

68
00:03:02,840 --> 00:03:05,000
other members of tc39 the web platform

69
00:03:05,000 --> 00:03:08,030
as we know it would not exist the

70
00:03:08,030 --> 00:03:10,700
membership of tc39 is largely self

71
00:03:10,700 --> 00:03:13,130
selecting a point as Rick Waldron

72
00:03:13,130 --> 00:03:14,570
forcefully reminded me the other night

73
00:03:14,570 --> 00:03:16,760
worth keeping in mind when you look at

74
00:03:16,760 --> 00:03:19,280
its makeup the various member companies

75
00:03:19,280 --> 00:03:21,050
of acumen nominate delegates to join

76
00:03:21,050 --> 00:03:23,690
tc39 and subsets of the delegates attend

77
00:03:23,690 --> 00:03:25,220
the individual face-to-face meetings

78
00:03:25,220 --> 00:03:26,570
where the bulk of the standardization

79
00:03:26,570 --> 00:03:29,690
work gets done trying to stakeholders a

80
00:03:29,690 --> 00:03:31,490
language specification on its own isn't

81
00:03:31,490 --> 00:03:34,130
very interesting unless you're some kind

82
00:03:34,130 --> 00:03:36,560
of programming language nerd you need

83
00:03:36,560 --> 00:03:38,300
implementations to actually do anything

84
00:03:38,300 --> 00:03:40,100
and that's where stakeholders into the

85
00:03:40,100 --> 00:03:41,870
picture you can also think of these

86
00:03:41,870 --> 00:03:43,820
teams as implementers but I call them

87
00:03:43,820 --> 00:03:45,500
stakeholders because I want to be clear

88
00:03:45,500 --> 00:03:47,330
that the owners of the specs and the

89
00:03:47,330 --> 00:03:48,620
owners of the implementations are

90
00:03:48,620 --> 00:03:49,640
interdependent

91
00:03:49,640 --> 00:03:51,260
neither can get a new version of the

92
00:03:51,260 --> 00:03:53,060
language standardized without buy-in

93
00:03:53,060 --> 00:03:55,340
from the others the important

94
00:03:55,340 --> 00:03:56,930
stakeholders have names that should be

95
00:03:56,930 --> 00:03:57,830
familiar to you

96
00:03:57,830 --> 00:04:00,770
Mozilla Google Microsoft Apple Adobe but

97
00:04:00,770 --> 00:04:02,180
there's an interesting trend which is

98
00:04:02,180 --> 00:04:03,860
the increasing importance of library

99
00:04:03,860 --> 00:04:05,300
developers in the standardization

100
00:04:05,300 --> 00:04:08,900
process jQuery ember angular and the AMD

101
00:04:08,900 --> 00:04:10,310
in required GS communities have all

102
00:04:10,310 --> 00:04:12,560
contributed substantially to es6 and

103
00:04:12,560 --> 00:04:14,420
several of the most active members of

104
00:04:14,420 --> 00:04:17,210
tc39 come from that world this is a new

105
00:04:17,210 --> 00:04:19,040
and very important development because

106
00:04:19,040 --> 00:04:20,900
it brings the standard closer to us as

107
00:04:20,900 --> 00:04:26,720
developers I think I forgot something

108
00:04:26,720 --> 00:04:29,840
oh yeah you'll note that I didn't

109
00:04:29,840 --> 00:04:31,850
mention node and that's because with

110
00:04:31,850 --> 00:04:33,950
certain significant exceptions node just

111
00:04:33,950 --> 00:04:36,110
uses an implementation of JavaScript it

112
00:04:36,110 --> 00:04:38,170
doesn't implement JavaScript itself

113
00:04:38,170 --> 00:04:40,880
despite what a lot of node users think

114
00:04:40,880 --> 00:04:43,040
it has very little control over its own

115
00:04:43,040 --> 00:04:45,200
language runtime this is something that

116
00:04:45,200 --> 00:04:46,970
only seems weirder the longer you use

117
00:04:46,970 --> 00:04:49,070
node but strictly restricting itself to

118
00:04:49,070 --> 00:04:51,470
being a consumer of v8 has been key to

119
00:04:51,470 --> 00:04:54,770
its rapid development all of us work and

120
00:04:54,770 --> 00:04:56,720
wrangling is pointless without us the

121
00:04:56,720 --> 00:04:59,750
JavaScript community all tc39 online can

122
00:04:59,750 --> 00:05:01,460
do is let us loose with the standard and

123
00:05:01,460 --> 00:05:03,560
see what we do with it you can think of

124
00:05:03,560 --> 00:05:05,930
us as a herd of cows let loose and high

125
00:05:05,930 --> 00:05:08,270
pasture over time we'll figure out the

126
00:05:08,270 --> 00:05:09,920
best ways to get around and the easiest

127
00:05:09,920 --> 00:05:11,630
way to do things and end up laying down

128
00:05:11,630 --> 00:05:12,440
trails

129
00:05:12,440 --> 00:05:15,020
if tc39 is doing its job it will be

130
00:05:15,020 --> 00:05:16,850
watching what paths we've made and come

131
00:05:16,850 --> 00:05:18,710
in behind us and tend and pave them for

132
00:05:18,710 --> 00:05:21,770
our convenience and safety this paints a

133
00:05:21,770 --> 00:05:23,630
picture of a tiny little ecosystem with

134
00:05:23,630 --> 00:05:25,280
its own feedback loops and checks and

135
00:05:25,280 --> 00:05:27,470
balances and with some allowances made

136
00:05:27,470 --> 00:05:29,180
for the inescapable politics and

137
00:05:29,180 --> 00:05:30,440
wrangling that comes from any activity

138
00:05:30,440 --> 00:05:31,910
involving a lot of people with

139
00:05:31,910 --> 00:05:33,830
conflicting goals that's pretty much

140
00:05:33,830 --> 00:05:37,340
what's actually happening with that out

141
00:05:37,340 --> 00:05:38,810
of the way let's talk about what

142
00:05:38,810 --> 00:05:41,330
happened six years ago the last time a

143
00:05:41,330 --> 00:05:42,770
lot of JavaScript was going through a

144
00:05:42,770 --> 00:05:45,410
lot of changes what was the es for

145
00:05:45,410 --> 00:05:48,110
fiasco put another way what made some of

146
00:05:48,110 --> 00:05:49,790
you out there a little skeptical about

147
00:05:49,790 --> 00:05:51,590
JavaScript odds of successfully being

148
00:05:51,590 --> 00:05:52,510
updated

149
00:05:52,510 --> 00:05:55,760
well standards bodies are strange beasts

150
00:05:55,760 --> 00:05:57,650
with minds of their own but they do have

151
00:05:57,650 --> 00:05:59,360
principles and goals stated or unstated

152
00:05:59,360 --> 00:06:01,790
and sometimes those goals fall into

153
00:06:01,790 --> 00:06:02,510
conflict

154
00:06:02,510 --> 00:06:04,690
Edwyn script for was a very ambitious

155
00:06:04,690 --> 00:06:06,919
stakeholder led project spread out over

156
00:06:06,919 --> 00:06:09,410
many years the stakeholders had many

157
00:06:09,410 --> 00:06:11,720
goals among them being to add proper

158
00:06:11,720 --> 00:06:13,490
classes to Java scripts prototype object

159
00:06:13,490 --> 00:06:16,100
system to unify JavaScript with Flash's

160
00:06:16,100 --> 00:06:17,990
action strip and to generally take what

161
00:06:17,990 --> 00:06:19,550
had more or less accidentally turned out

162
00:06:19,550 --> 00:06:21,590
to be a cornerstone of the web and put

163
00:06:21,590 --> 00:06:24,050
it on a more solid footing at the same

164
00:06:24,050 --> 00:06:26,300
time tc39 was working on Ekman script

165
00:06:26,300 --> 00:06:28,700
3.1 an incremental refinement of ekam

166
00:06:28,700 --> 00:06:31,220
script 3 the problem that most of you

167
00:06:31,220 --> 00:06:32,780
have probably encountered with branchy

168
00:06:32,780 --> 00:06:34,460
development is that multiple groups

169
00:06:34,460 --> 00:06:36,530
working on multiple versions of a single

170
00:06:36,530 --> 00:06:38,870
thing at the same time end up generating

171
00:06:38,870 --> 00:06:40,190
a lot of overhead and Comm

172
00:06:40,190 --> 00:06:41,570
when it comes time to figure out how to

173
00:06:41,570 --> 00:06:43,400
reconcile everything into a final end

174
00:06:43,400 --> 00:06:44,410
product

175
00:06:44,410 --> 00:06:47,750
ultimately what sunk es for along with

176
00:06:47,750 --> 00:06:49,340
the extremely ambitious nature of the

177
00:06:49,340 --> 00:06:51,230
changes was the fact that the team

178
00:06:51,230 --> 00:06:53,270
working on es 4 had essentially created

179
00:06:53,270 --> 00:06:55,100
an entirely new thing and called the

180
00:06:55,100 --> 00:06:57,500
JavaScript they completely lost the plot

181
00:06:57,500 --> 00:06:59,570
and the blame storming was fast and

182
00:06:59,570 --> 00:07:01,520
furious for a very long time

183
00:07:01,520 --> 00:07:03,830
it's hard to overstate how traumatic

184
00:07:03,830 --> 00:07:06,800
this was years of spec work stakeholder

185
00:07:06,800 --> 00:07:08,360
discussions and implementation effort

186
00:07:08,360 --> 00:07:10,490
had gone into es 4 and what was probably

187
00:07:10,490 --> 00:07:12,650
a relief to not have to argue about it

188
00:07:12,650 --> 00:07:14,600
anymore the literal cost of all that

189
00:07:14,600 --> 00:07:18,380
wasted effort was staggering so the

190
00:07:18,380 --> 00:07:20,120
stakeholders sat down and hammered out a

191
00:07:20,120 --> 00:07:21,590
set of principles to keep this from

192
00:07:21,590 --> 00:07:22,580
happening again

193
00:07:22,580 --> 00:07:23,900
which resulted in what's been called

194
00:07:23,900 --> 00:07:26,930
Xmas script harmony originally harmony

195
00:07:26,930 --> 00:07:28,700
was more or less a version code name for

196
00:07:28,700 --> 00:07:29,510
es6

197
00:07:29,510 --> 00:07:31,670
but over time it's come to refer to the

198
00:07:31,670 --> 00:07:32,780
version of Ekman script under

199
00:07:32,780 --> 00:07:34,370
development regardless of the version

200
00:07:34,370 --> 00:07:36,470
number and ultimately the set of

201
00:07:36,470 --> 00:07:38,210
principles governing the development of

202
00:07:38,210 --> 00:07:41,840
the standard so broadly put harmony

203
00:07:41,840 --> 00:07:43,310
takes this as its goals

204
00:07:43,310 --> 00:07:46,700
don't break the web new features can't

205
00:07:46,700 --> 00:07:48,440
come at the cost of breaking existing

206
00:07:48,440 --> 00:07:51,050
code hole search engines exist just to

207
00:07:51,050 --> 00:07:53,480
support this goal and even a very small

208
00:07:53,480 --> 00:07:55,070
number of breaking sites is considered

209
00:07:55,070 --> 00:07:59,030
enough to sink new features I would

210
00:07:59,030 --> 00:08:00,740
actually prefer that the second thing

211
00:08:00,740 --> 00:08:02,240
with new language features for acquiring

212
00:08:02,240 --> 00:08:03,620
concrete implementations I would

213
00:08:03,620 --> 00:08:05,060
actually prefer the JavaScript follow

214
00:08:05,060 --> 00:08:06,830
the IETF lead here and require to

215
00:08:06,830 --> 00:08:08,210
complete implementations of a feature

216
00:08:08,210 --> 00:08:10,190
before calling it a standard but that's

217
00:08:10,190 --> 00:08:11,900
really hard to do with a language spec

218
00:08:11,900 --> 00:08:13,730
because it's really hard to synchronize

219
00:08:13,730 --> 00:08:15,020
people working on strawman

220
00:08:15,020 --> 00:08:17,480
implementations with the effort needed

221
00:08:17,480 --> 00:08:19,100
to get the language into the spec itself

222
00:08:19,100 --> 00:08:21,050
I talked about ways to do that a little

223
00:08:21,050 --> 00:08:22,550
bit later on and that's also something

224
00:08:22,550 --> 00:08:24,350
that james long's talked yesterday about

225
00:08:24,350 --> 00:08:26,300
sweet J's for address really well I

226
00:08:26,300 --> 00:08:28,100
thought so if you didn't see that talk

227
00:08:28,100 --> 00:08:30,080
you should go back and watch it when it

228
00:08:30,080 --> 00:08:32,630
hits online so keeping the language

229
00:08:32,630 --> 00:08:34,640
Pleasant for casual developers if you

230
00:08:34,640 --> 00:08:35,840
look at all the things we've done

231
00:08:35,840 --> 00:08:37,729
together over the past few days it

232
00:08:37,729 --> 00:08:39,620
should be clear why keeping the language

233
00:08:39,620 --> 00:08:41,180
simple and easy enough for newcomers to

234
00:08:41,180 --> 00:08:42,469
get up and running quickly is so

235
00:08:42,469 --> 00:08:44,930
valuable this may make working with the

236
00:08:44,930 --> 00:08:46,850
language tedious for power users but

237
00:08:46,850 --> 00:08:48,530
whatever you can write Haskell on your

238
00:08:48,530 --> 00:08:53,240
own time improving interoperation

239
00:08:53,240 --> 00:08:53,960
observing the

240
00:08:53,960 --> 00:08:55,550
existing standards explicit in the fact

241
00:08:55,550 --> 00:08:57,170
that whenever possible is another thing

242
00:08:57,170 --> 00:08:58,970
that is a really good common sense

243
00:08:58,970 --> 00:09:01,460
software engineering principle this is

244
00:09:01,460 --> 00:09:03,170
just another way of saying pave the cow

245
00:09:03,170 --> 00:09:05,420
paths which is I believe trademark rich

246
00:09:05,420 --> 00:09:09,350
what Rick Walter finally and this is in

247
00:09:09,350 --> 00:09:11,090
many ways the most important principle

248
00:09:11,090 --> 00:09:14,180
on this slide preserve harmony if no

249
00:09:14,180 --> 00:09:15,890
consensus can be found around a feature

250
00:09:15,890 --> 00:09:17,990
among the implementers on tc39

251
00:09:17,990 --> 00:09:19,760
and to an extent the broader stakeholder

252
00:09:19,760 --> 00:09:23,390
community it doesn't go in it's

253
00:09:23,390 --> 00:09:25,100
important to note that while all this

254
00:09:25,100 --> 00:09:27,350
sounds pretty common sensical it's not

255
00:09:27,350 --> 00:09:28,940
something that is universal or even

256
00:09:28,940 --> 00:09:31,550
typical for language standards anyone

257
00:09:31,550 --> 00:09:33,620
who's watched the evolution of c++ or

258
00:09:33,620 --> 00:09:35,960
java knows what i mean it's easy to get

259
00:09:35,960 --> 00:09:37,400
wrapped up in the needs of implementers

260
00:09:37,400 --> 00:09:38,960
in standards committee juan curi and to

261
00:09:38,960 --> 00:09:40,640
lose sight of any languages primary

262
00:09:40,640 --> 00:09:42,620
constituency which is the people who

263
00:09:42,620 --> 00:09:45,110
need to use it to get things done that's

264
00:09:45,110 --> 00:09:50,270
all of us so part of the motivation for

265
00:09:50,270 --> 00:09:52,280
es force development was the hard-won

266
00:09:52,280 --> 00:09:54,560
emergence of the web platform a lot of

267
00:09:54,560 --> 00:09:56,180
you probably remember the bad old days

268
00:09:56,180 --> 00:09:58,370
of the browser Wars when the majority of

269
00:09:58,370 --> 00:10:00,110
our time as web developers was spent

270
00:10:00,110 --> 00:10:01,640
trying to coax our code to do the same

271
00:10:01,640 --> 00:10:02,900
thing in multiple browsers without

272
00:10:02,900 --> 00:10:05,510
crashing one of the ways we got past

273
00:10:05,510 --> 00:10:07,430
this was by collectively deciding what

274
00:10:07,430 --> 00:10:09,290
sane conventional JavaScript should look

275
00:10:09,290 --> 00:10:12,920
like two things really helped firm up

276
00:10:12,920 --> 00:10:14,630
JavaScript as a language for serious

277
00:10:14,630 --> 00:10:16,670
software development on the one hand

278
00:10:16,670 --> 00:10:19,280
jQuery is important because it took the

279
00:10:19,280 --> 00:10:20,990
pretty much ridiculous world of Dom

280
00:10:20,990 --> 00:10:22,820
programming and turn it into something

281
00:10:22,820 --> 00:10:25,280
that was actually accessible as well as

282
00:10:25,280 --> 00:10:27,320
pretty much defining its own abstracted

283
00:10:27,320 --> 00:10:29,060
web club platform just that they just

284
00:10:29,060 --> 00:10:30,800
sat above the Dom and job browser

285
00:10:30,800 --> 00:10:34,430
JavaScript on the other hand Douglas

286
00:10:34,430 --> 00:10:36,050
Crockford wrote javascript the good

287
00:10:36,050 --> 00:10:38,180
parts which is in a lot of ways some of

288
00:10:38,180 --> 00:10:40,250
them kind of uncomfortable the ten

289
00:10:40,250 --> 00:10:42,340
commandments of javascript programming

290
00:10:42,340 --> 00:10:44,840
why were they important because they

291
00:10:44,840 --> 00:10:46,520
signaled the arrival of a widely shared

292
00:10:46,520 --> 00:10:48,590
consensus about what was good and bad in

293
00:10:48,590 --> 00:10:51,080
JavaScript and indirectly defined a set

294
00:10:51,080 --> 00:10:52,640
of conventions that experts could point

295
00:10:52,640 --> 00:10:55,820
to and call good javascript it's worth

296
00:10:55,820 --> 00:10:57,500
pointing out that this isn't to say that

297
00:10:57,500 --> 00:10:58,850
either of these was the absolute

298
00:10:58,850 --> 00:11:01,520
objective best at what they did mootools

299
00:11:01,520 --> 00:11:03,560
continues to have its partisans and I

300
00:11:03,560 --> 00:11:05,300
personally find Dave Herman's effective

301
00:11:05,300 --> 00:11:07,370
JavaScript to be a less idiosyncratic

302
00:11:07,370 --> 00:11:09,260
and more Dogma free presentation of what

303
00:11:09,260 --> 00:11:11,390
makes for high-quality JavaScript it's

304
00:11:11,390 --> 00:11:13,130
just to say that again we see the

305
00:11:13,130 --> 00:11:14,990
language community blazing trails for

306
00:11:14,990 --> 00:11:18,740
their own use conventions are basically

307
00:11:18,740 --> 00:11:20,630
de facto standards so it shouldn't be

308
00:11:20,630 --> 00:11:22,010
too surprising that it's several points

309
00:11:22,010 --> 00:11:23,600
developers have just gone ahead and made

310
00:11:23,600 --> 00:11:25,670
their own standards these standards have

311
00:11:25,670 --> 00:11:27,170
helped and in some cases hindered the

312
00:11:27,170 --> 00:11:29,510
work of tc39 so it's worth taking a look

313
00:11:29,510 --> 00:11:30,560
at a few of them

314
00:11:30,560 --> 00:11:33,890
first off browserify es6 introduces a

315
00:11:33,890 --> 00:11:35,240
module system which is interesting

316
00:11:35,240 --> 00:11:36,620
mostly because it highlights that

317
00:11:36,620 --> 00:11:38,480
javascript didn't have a module system

318
00:11:38,480 --> 00:11:40,610
before then a package system and

319
00:11:40,610 --> 00:11:42,560
namespaces were proposed for ES 4 and

320
00:11:42,560 --> 00:11:43,700
we're in fact one of the most

321
00:11:43,700 --> 00:11:46,190
contentious parts of the language that

322
00:11:46,190 --> 00:11:47,750
doesn't mean that people didn't want one

323
00:11:47,750 --> 00:11:49,610
though common jeaious was a community

324
00:11:49,610 --> 00:11:50,960
effort that is one of the first tangible

325
00:11:50,960 --> 00:11:52,370
contributions of the server-side

326
00:11:52,370 --> 00:11:54,680
JavaScript community and came out of the

327
00:11:54,680 --> 00:11:56,420
Rhino community anybody remember right

328
00:11:56,420 --> 00:11:58,190
now few hands

329
00:11:58,190 --> 00:12:00,200
if the floorings not just a module

330
00:12:00,200 --> 00:12:02,990
system but a set of common modules node

331
00:12:02,990 --> 00:12:04,400
pretty much throughout the standard

332
00:12:04,400 --> 00:12:06,140
library part but it grabbed the idea of

333
00:12:06,140 --> 00:12:07,790
the module system and this has been key

334
00:12:07,790 --> 00:12:10,310
to node success it has even come back to

335
00:12:10,310 --> 00:12:11,930
the browser in a twisted way through sub

336
00:12:11,930 --> 00:12:13,610
stacks browserify which allows you to

337
00:12:13,610 --> 00:12:15,050
write your browser code out of the same

338
00:12:15,050 --> 00:12:16,910
kind of small single purpose modules

339
00:12:16,910 --> 00:12:18,830
that are practically the node paradigm

340
00:12:18,830 --> 00:12:22,459
and then bundle them for use in the

341
00:12:22,459 --> 00:12:25,160
browser this end-to-end integration is a

342
00:12:25,160 --> 00:12:26,990
powerful signal the common jeaious

343
00:12:26,990 --> 00:12:28,700
modules are an important tool for the

344
00:12:28,700 --> 00:12:31,940
community but browserify isn't the only

345
00:12:31,940 --> 00:12:33,680
attempt by developers to bring modular

346
00:12:33,680 --> 00:12:36,230
code to JavaScript and he started in the

347
00:12:36,230 --> 00:12:37,790
browser and grappled with the problem of

348
00:12:37,790 --> 00:12:39,589
asynchronous module resolution head-on

349
00:12:39,589 --> 00:12:41,720
it's also become a full-stack tool

350
00:12:41,720 --> 00:12:43,250
although I think it hasn't caught on the

351
00:12:43,250 --> 00:12:44,750
node as much because node modules

352
00:12:44,750 --> 00:12:46,700
already existed and because it's much

353
00:12:46,700 --> 00:12:48,800
more finicky to work with in practice

354
00:12:48,800 --> 00:12:51,320
AMD and common j/s are very different

355
00:12:51,320 --> 00:12:53,510
well there are frameworks like UMD that

356
00:12:53,510 --> 00:12:54,890
bridge the gap they're not precise

357
00:12:54,890 --> 00:12:56,480
mappings and so they're not very widely

358
00:12:56,480 --> 00:12:58,910
used this highlights an important point

359
00:12:58,910 --> 00:13:01,430
any standard module system is going to

360
00:13:01,430 --> 00:13:03,770
have to make choices and any attempts to

361
00:13:03,770 --> 00:13:05,720
offer everything implemented by these

362
00:13:05,720 --> 00:13:07,760
competing standards will either have to

363
00:13:07,760 --> 00:13:10,040
drop features or introduce complexity

364
00:13:10,040 --> 00:13:12,020
this is something that you see over and

365
00:13:12,020 --> 00:13:13,790
over again in standardization efforts

366
00:13:13,790 --> 00:13:15,620
and helps explain why standards turned

367
00:13:15,620 --> 00:13:17,630
out to be super sets of what language

368
00:13:17,630 --> 00:13:20,089
communities are using standards end up

369
00:13:20,089 --> 00:13:21,080
being bloated for

370
00:13:21,080 --> 00:13:26,060
reason the last best example of

371
00:13:26,060 --> 00:13:27,470
community standards I want to discuss is

372
00:13:27,470 --> 00:13:29,870
promises a plus you thought you were

373
00:13:29,870 --> 00:13:31,220
going to skate this conference without a

374
00:13:31,220 --> 00:13:34,130
big talk about promises didn't you no

375
00:13:34,130 --> 00:13:36,620
such luck for a language that is

376
00:13:36,620 --> 00:13:38,270
predominantly used asynchronously

377
00:13:38,270 --> 00:13:40,520
even before no JavaScript doesn't have a

378
00:13:40,520 --> 00:13:42,320
hell of a lot of support for asynchrony

379
00:13:42,320 --> 00:13:44,240
this is a pain point for everybody

380
00:13:44,240 --> 00:13:45,800
pretty much regardless of how long

381
00:13:45,800 --> 00:13:47,510
they've been writing JavaScript and an

382
00:13:47,510 --> 00:13:48,800
industry has grown up the proposed

383
00:13:48,800 --> 00:13:51,380
debate and vilify the competing styles

384
00:13:51,380 --> 00:13:54,020
of asynchronous control flow promises

385
00:13:54,020 --> 00:13:55,370
love them or hate them are widely

386
00:13:55,370 --> 00:13:57,650
popular and as a result promises a plus

387
00:13:57,650 --> 00:13:59,270
is probably the most significant

388
00:13:59,270 --> 00:14:00,800
standard to be defined purely by the

389
00:14:00,800 --> 00:14:01,550
community

390
00:14:01,550 --> 00:14:03,920
it's simple clear and narrowly scoped

391
00:14:03,920 --> 00:14:05,570
and it's done a great job of driving

392
00:14:05,570 --> 00:14:07,250
adoption to the point where in the

393
00:14:07,250 --> 00:14:09,230
JavaScript speaking world promises

394
00:14:09,230 --> 00:14:11,210
nearly synonymous of promises a-plus

395
00:14:11,210 --> 00:14:13,580
this is probably the only reason

396
00:14:13,580 --> 00:14:15,800
promises successfully made it into es6

397
00:14:15,800 --> 00:14:17,360
given how late they were introduced to

398
00:14:17,360 --> 00:14:20,300
the standardization process this

399
00:14:20,300 --> 00:14:22,280
movement from browser Wars through

400
00:14:22,280 --> 00:14:24,440
conventions into community standards

401
00:14:24,440 --> 00:14:27,140
pretty much as is the visible aspect of

402
00:14:27,140 --> 00:14:28,580
the maturation of javascript is a

403
00:14:28,580 --> 00:14:30,320
language and it seems like a pretty

404
00:14:30,320 --> 00:14:31,970
important reason why Java scripts

405
00:14:31,970 --> 00:14:34,190
popularity has continued to grow for so

406
00:14:34,190 --> 00:14:38,420
long all right I want to drop a little

407
00:14:38,420 --> 00:14:40,490
aside here I have it always been the

408
00:14:40,490 --> 00:14:42,590
JavaScript developer in fact I spent

409
00:14:42,590 --> 00:14:44,720
about 15 years writing Java for a living

410
00:14:44,720 --> 00:14:46,280
and I studied computer science in school

411
00:14:46,280 --> 00:14:48,530
I was and remain a big fan of

412
00:14:48,530 --> 00:14:50,480
programming language theory but probably

413
00:14:50,480 --> 00:14:52,130
my favorite class in school was actually

414
00:14:52,130 --> 00:14:54,800
my software engineering class that's

415
00:14:54,800 --> 00:14:56,540
mostly because I loved watching train

416
00:14:56,540 --> 00:14:58,340
racks which is largely what studying the

417
00:14:58,340 --> 00:15:00,020
history of software engineering turns

418
00:15:00,020 --> 00:15:03,500
out to be anyway a few of you may

419
00:15:03,500 --> 00:15:04,820
remember that Java was the first

420
00:15:04,820 --> 00:15:06,140
programming language that was going to

421
00:15:06,140 --> 00:15:07,430
revolutionize the browser

422
00:15:07,430 --> 00:15:10,070
remember applets only to find its real

423
00:15:10,070 --> 00:15:12,170
success on the server side and as soon

424
00:15:12,170 --> 00:15:14,300
as I started writing server-side Java it

425
00:15:14,300 --> 00:15:16,040
was a nearly perfect tool for software

426
00:15:16,040 --> 00:15:19,010
engineering why because it was just dumb

427
00:15:19,010 --> 00:15:23,390
enough Java 1.0 and 1.1 were about as

428
00:15:23,390 --> 00:15:26,970
straightforward an imperative

429
00:15:26,980 --> 00:15:28,790
object-oriented get through clever with

430
00:15:28,790 --> 00:15:30,530
their code and write the kind of write

431
00:15:30,530 --> 00:15:32,210
only gibberish the perl developers were

432
00:15:32,210 --> 00:15:34,709
so fond of golfing out in the nine

433
00:15:34,709 --> 00:15:38,409
however this changed over time

434
00:15:38,409 --> 00:15:40,779
developers demanded and then got stacks

435
00:15:40,779 --> 00:15:42,669
and stacks of new features in the

436
00:15:42,669 --> 00:15:44,259
language each of those features

437
00:15:44,259 --> 00:15:46,119
introduce complexity and in some cases

438
00:15:46,119 --> 00:15:47,949
compounded existing technical debt in

439
00:15:47,949 --> 00:15:50,139
the languages design and around the time

440
00:15:50,139 --> 00:15:51,909
that generics annotations got added to

441
00:15:51,909 --> 00:15:53,739
the language I decided that the

442
00:15:53,739 --> 00:15:55,689
complexity had gotten burdensome enough

443
00:15:55,689 --> 00:15:57,459
that I was no longer really interested

444
00:15:57,459 --> 00:15:58,709
in dealing with it

445
00:15:58,709 --> 00:16:01,179
this is a way of saying that the most

446
00:16:01,179 --> 00:16:02,589
important piece of tooling in your

447
00:16:02,589 --> 00:16:03,999
language of choice is the language

448
00:16:03,999 --> 00:16:07,179
itself its syntax and features are its

449
00:16:07,179 --> 00:16:09,189
user experience and like all user

450
00:16:09,189 --> 00:16:11,019
experiences you want to make sure you

451
00:16:11,019 --> 00:16:12,579
don't clutter that user experience with

452
00:16:12,579 --> 00:16:15,129
unnecessary contradictory or confusing

453
00:16:15,129 --> 00:16:19,299
features however as far as I can tell

454
00:16:19,299 --> 00:16:20,679
the primary purpose of language

455
00:16:20,679 --> 00:16:22,749
standardization is to include everything

456
00:16:22,749 --> 00:16:26,139
all the time forever each of these

457
00:16:26,139 --> 00:16:29,259
columns is a single thread I may of

458
00:16:29,259 --> 00:16:31,689
cherry-picked a little for effect but

459
00:16:31,689 --> 00:16:33,279
these are all discussions about es6

460
00:16:33,279 --> 00:16:36,009
features that went on for days people

461
00:16:36,009 --> 00:16:38,699
were arguing about promises for months

462
00:16:38,699 --> 00:16:41,439
this is one of the chief reasons harmony

463
00:16:41,439 --> 00:16:43,929
is so important doing this stuff out in

464
00:16:43,929 --> 00:16:45,939
the open and discussing things fully and

465
00:16:45,939 --> 00:16:48,459
bought beyond there's a pretty good job

466
00:16:48,459 --> 00:16:49,809
of getting all the issues out where

467
00:16:49,809 --> 00:16:51,970
everyone can see them discussion gets

468
00:16:51,970 --> 00:16:54,069
kind of aggro at times but the spirit of

469
00:16:54,069 --> 00:16:56,259
harmony is mostly held true and acts

470
00:16:56,259 --> 00:16:57,999
again acts as a guard against the most

471
00:16:57,999 --> 00:16:59,829
pathological forms of standards

472
00:16:59,829 --> 00:17:03,609
committee necrosis so let's talk about

473
00:17:03,609 --> 00:17:05,409
the public mechanics of Ekman scripts

474
00:17:05,409 --> 00:17:08,919
development the most important piece is

475
00:17:08,919 --> 00:17:11,500
the draft itself which is most easily

476
00:17:11,500 --> 00:17:13,779
consumed via JSON or endorsed HTML

477
00:17:13,779 --> 00:17:15,730
conversion Allen is cranking out new

478
00:17:15,730 --> 00:17:17,889
drafts as quickly as he can as finishing

479
00:17:17,889 --> 00:17:19,569
the language is the language of the

480
00:17:19,569 --> 00:17:21,129
specification is the most substantial

481
00:17:21,129 --> 00:17:22,839
obstacle to finishing the standard and

482
00:17:22,839 --> 00:17:24,279
Jason is pretty much completely

483
00:17:24,279 --> 00:17:25,839
automated the process of producing the

484
00:17:25,839 --> 00:17:28,899
HTML draft standards language is not

485
00:17:28,899 --> 00:17:30,909
always super user friendly and Alan's

486
00:17:30,909 --> 00:17:33,100
style takes a little getting used to but

487
00:17:33,100 --> 00:17:35,559
this is the ground truth of es6 so it's

488
00:17:35,559 --> 00:17:38,159
worth your time if you're interested

489
00:17:38,159 --> 00:17:40,539
Rick's notes on the face to face

490
00:17:40,539 --> 00:17:42,309
meetings are at least as important as

491
00:17:42,309 --> 00:17:44,860
his work on johnny-five in my opinion it

492
00:17:44,860 --> 00:17:46,600
takes me more or less an entire day to

493
00:17:46,600 --> 00:17:47,530
go through each set

494
00:17:47,530 --> 00:17:49,870
notes so I can only imagine how grueling

495
00:17:49,870 --> 00:17:51,670
it is taking them and they're published

496
00:17:51,670 --> 00:17:53,650
shortly after each face-to-face meeting

497
00:17:53,650 --> 00:17:55,510
but aside from the spec itself this is

498
00:17:55,510 --> 00:17:56,860
the most valuable resource for

499
00:17:56,860 --> 00:17:58,300
understanding what's happening to

500
00:17:58,300 --> 00:18:02,410
JavaScript I think you either need to be

501
00:18:02,410 --> 00:18:04,090
working on ACMA script standardization

502
00:18:04,090 --> 00:18:06,220
for your day job or be sort of a glutton

503
00:18:06,220 --> 00:18:08,200
for punishment to actually subscribe the

504
00:18:08,200 --> 00:18:11,170
es discuss there is an incredible amount

505
00:18:11,170 --> 00:18:14,020
of detail sometimes but also endless and

506
00:18:14,020 --> 00:18:16,330
sometimes tedious bike shedding and a

507
00:18:16,330 --> 00:18:17,740
lot of discussions that don't go

508
00:18:17,740 --> 00:18:20,260
anywhere interesting fortunately you

509
00:18:20,260 --> 00:18:21,700
don't need to subscribe to the list

510
00:18:21,700 --> 00:18:23,020
because forbes lindsay has put a

511
00:18:23,020 --> 00:18:25,270
fabulous and simple UI around the list

512
00:18:25,270 --> 00:18:28,120
on es disgust org so you can dip in and

513
00:18:28,120 --> 00:18:29,590
dip out when you need to and actually

514
00:18:29,590 --> 00:18:32,410
this time right now most of the time

515
00:18:32,410 --> 00:18:33,640
search results will actually take you to

516
00:18:33,640 --> 00:18:35,170
es discuss organ stead of the mailing

517
00:18:35,170 --> 00:18:38,350
list archives which is a big plus if you

518
00:18:38,350 --> 00:18:40,180
find issues in the specs or when reading

519
00:18:40,180 --> 00:18:42,430
the meeting notes you can't or you find

520
00:18:42,430 --> 00:18:43,630
issues while you're reading them in

521
00:18:43,630 --> 00:18:45,820
enemy notes you can and should file them

522
00:18:45,820 --> 00:18:48,010
on the Ekman script bug tracker this is

523
00:18:48,010 --> 00:18:50,290
basically your API and to the specs

524
00:18:50,290 --> 00:18:53,790
editorial process you should use it and

525
00:18:53,790 --> 00:18:57,970
finally and most interestingly I got to

526
00:18:57,970 --> 00:19:00,580
talk about tests 262 tests are no

527
00:19:00,580 --> 00:19:02,080
substitute for a formal language

528
00:19:02,080 --> 00:19:04,150
standard but test 262 is a great

529
00:19:04,150 --> 00:19:06,010
resource for people who want to get

530
00:19:06,010 --> 00:19:07,540
involved in validating the spec and

531
00:19:07,540 --> 00:19:08,830
contributing to the evolution of the

532
00:19:08,830 --> 00:19:11,410
language without actual code exercising

533
00:19:11,410 --> 00:19:13,270
these features it's really hard to say

534
00:19:13,270 --> 00:19:14,770
whether a given chunk of the design is

535
00:19:14,770 --> 00:19:16,900
any good or not it's also critical to

536
00:19:16,900 --> 00:19:18,670
have some way of evaluating how much of

537
00:19:18,670 --> 00:19:20,620
the spec a given runtime is implemented

538
00:19:20,620 --> 00:19:23,500
test 262 is only recently put up on

539
00:19:23,500 --> 00:19:26,020
github and just this week completely

540
00:19:26,020 --> 00:19:27,880
open source so it's ready to take your

541
00:19:27,880 --> 00:19:30,430
poll requests many put many people put a

542
00:19:30,430 --> 00:19:32,350
lot of work into convincing ACMA to do

543
00:19:32,350 --> 00:19:33,850
something that's never done before by

544
00:19:33,850 --> 00:19:36,010
opening this process up to the public so

545
00:19:36,010 --> 00:19:40,510
please do take advantage of it so

546
00:19:40,510 --> 00:19:43,300
believe it or not yes six is basically

547
00:19:43,300 --> 00:19:45,730
done the work that remains is mostly on

548
00:19:45,730 --> 00:19:47,740
the specification itself and refining

549
00:19:47,740 --> 00:19:49,060
the standard his feedback comes back

550
00:19:49,060 --> 00:19:51,340
from stakeholders about how easy or hard

551
00:19:51,340 --> 00:19:52,900
it is to implement all the new features

552
00:19:52,900 --> 00:19:55,240
in the language the draft is slated to

553
00:19:55,240 --> 00:19:56,740
be read it ratified and promoted to

554
00:19:56,740 --> 00:19:58,720
version 6.0 of ACMA script by the end of

555
00:19:58,720 --> 00:20:01,299
this year tc39 itself has

556
00:20:01,299 --> 00:20:03,489
largely moved on es7 with some features

557
00:20:03,489 --> 00:20:05,499
being pushed from 6:00 to 7:00 and the

558
00:20:05,499 --> 00:20:06,940
other standards bodies are rapidly

559
00:20:06,940 --> 00:20:08,889
incorporating es6 features into their

560
00:20:08,889 --> 00:20:12,489
own specs the big open question is when

561
00:20:12,489 --> 00:20:13,840
will the first complete standards

562
00:20:13,840 --> 00:20:15,970
compliant implementation of es6 be

563
00:20:15,970 --> 00:20:18,999
available I'm hopeful it will take less

564
00:20:18,999 --> 00:20:20,649
than a year especially because the due

565
00:20:20,649 --> 00:20:23,860
date for es 7 is sometime in 2016 but if

566
00:20:23,860 --> 00:20:25,570
any of you want to place bets on how

567
00:20:25,570 --> 00:20:27,580
long it will actually take I'll be happy

568
00:20:27,580 --> 00:20:32,700
to lay you odds so looking beyond es6

569
00:20:32,700 --> 00:20:35,529
one of the great products of harmony is

570
00:20:35,529 --> 00:20:37,090
increased attention to improving the

571
00:20:37,090 --> 00:20:39,909
specification process itself going

572
00:20:39,909 --> 00:20:41,409
forward new features will be developed

573
00:20:41,409 --> 00:20:43,059
the strom and proposals with a champion

574
00:20:43,059 --> 00:20:44,950
responsible for gathering consensus on

575
00:20:44,950 --> 00:20:46,659
how features should work and with an

576
00:20:46,659 --> 00:20:48,489
example implementation and maybe even

577
00:20:48,489 --> 00:20:50,350
tests before the feature even gets

578
00:20:50,350 --> 00:20:53,049
brought back to TC 39 this is an

579
00:20:53,049 --> 00:20:54,460
excellent place for developers who are

580
00:20:54,460 --> 00:20:55,899
passionate about features to get

581
00:20:55,899 --> 00:20:57,549
involved and contribute directly to the

582
00:20:57,549 --> 00:21:02,470
development of JavaScript so how's it

583
00:21:02,470 --> 00:21:07,289
going as far as implementing es6 wow

584
00:21:07,289 --> 00:21:10,269
these are ureas odd sets compatibility

585
00:21:10,269 --> 00:21:12,279
charts for es6 don't try to read them

586
00:21:12,279 --> 00:21:13,840
this is just to give you a feel of how

587
00:21:13,840 --> 00:21:15,820
much work remains before es6 is done in

588
00:21:15,820 --> 00:21:18,220
various browsers the picture is actually

589
00:21:18,220 --> 00:21:20,559
slightly worse than it appears here

590
00:21:20,559 --> 00:21:22,179
because these just say that the features

591
00:21:22,179 --> 00:21:24,749
are there not that they actually work

592
00:21:24,749 --> 00:21:27,609
it's probably not visible but

593
00:21:27,609 --> 00:21:29,289
SpiderMonkey is doing the best of any of

594
00:21:29,289 --> 00:21:30,489
the browser runtimes

595
00:21:30,489 --> 00:21:32,440
this is scrolled further down on that

596
00:21:32,440 --> 00:21:35,559
chart and to continue even in cases

597
00:21:35,559 --> 00:21:37,179
where features are available today there

598
00:21:37,179 --> 00:21:38,769
are cases where the standard is still in

599
00:21:38,769 --> 00:21:40,659
flux as is the case with some edge cases

600
00:21:40,659 --> 00:21:42,519
around generators or the implementation

601
00:21:42,519 --> 00:21:44,799
is just straight-up buggy as is the case

602
00:21:44,799 --> 00:21:47,169
and promises in Chrome Canary and

603
00:21:47,169 --> 00:21:52,090
development versions of nodejs given an

604
00:21:52,090 --> 00:21:53,859
implementation is spotty how do you get

605
00:21:53,859 --> 00:21:56,350
a feel for how this works today as I

606
00:21:56,350 --> 00:21:58,179
mentioned Firefox is in the best shape

607
00:21:58,179 --> 00:21:59,529
of any of the major browsers when it

608
00:21:59,529 --> 00:22:01,690
comes to es6 readiness although it does

609
00:22:01,690 --> 00:22:03,159
still have a way to go and when I say

610
00:22:03,159 --> 00:22:05,230
Firefox I mean the dev channel not not

611
00:22:05,230 --> 00:22:07,419
the release channel if you want to try

612
00:22:07,419 --> 00:22:08,739
polyfills and shims you can lash

613
00:22:08,739 --> 00:22:09,999
together a more-or-less working

614
00:22:09,999 --> 00:22:11,950
environment with es6 shim for built-in

615
00:22:11,950 --> 00:22:13,450
constructors and objects tracer for

616
00:22:13,450 --> 00:22:15,539
syntax and es6 module

617
00:22:15,539 --> 00:22:17,639
spyler or es6 module loader four modules

618
00:22:17,639 --> 00:22:20,009
and module odors but even all about us

619
00:22:20,009 --> 00:22:21,690
incomplete and lags behind the standards

620
00:22:21,690 --> 00:22:23,220
so there really isn't an out-of-the-box

621
00:22:23,220 --> 00:22:27,029
playground for es6 right now one really

622
00:22:27,029 --> 00:22:28,799
interesting strategy which James long

623
00:22:28,799 --> 00:22:30,330
talked about on Wednesday is to use a

624
00:22:30,330 --> 00:22:32,309
tool like sweet jazz to test individual

625
00:22:32,309 --> 00:22:33,690
new features and to see how well they

626
00:22:33,690 --> 00:22:35,190
work and what backwards compatibility

627
00:22:35,190 --> 00:22:37,859
risks they have Macker can't do

628
00:22:37,859 --> 00:22:39,539
everything anything that depends on

629
00:22:39,539 --> 00:22:41,369
runtime functionality that isn't exposed

630
00:22:41,369 --> 00:22:43,049
by the language like weak maps and their

631
00:22:43,049 --> 00:22:44,729
special garbage collection semantics is

632
00:22:44,729 --> 00:22:46,649
going to be difficult or impossible to

633
00:22:46,649 --> 00:22:49,259
do if macros but they can do a lot less

634
00:22:49,259 --> 00:22:51,239
invasively than a complete transpiler

635
00:22:51,239 --> 00:22:52,919
would so they're a really good way to

636
00:22:52,919 --> 00:22:56,940
pilot these things out so I'm going to

637
00:22:56,940 --> 00:23:00,269
choose an example of a feature at es6

638
00:23:00,269 --> 00:23:01,499
that's gone through a lot of the

639
00:23:01,499 --> 00:23:03,090
different processes that I've seen

640
00:23:03,090 --> 00:23:06,149
affecting the standard so let's talk a

641
00:23:06,149 --> 00:23:08,009
little bit more in detail about how this

642
00:23:08,009 --> 00:23:09,960
works I'm going to use promises as an

643
00:23:09,960 --> 00:23:11,460
example because they clearly illustrate

644
00:23:11,460 --> 00:23:13,320
a lot of factors at work and also

645
00:23:13,320 --> 00:23:15,179
because maybe we'll all finally be able

646
00:23:15,179 --> 00:23:17,039
to stop talking about them all the time

647
00:23:17,039 --> 00:23:20,220
when he s6 is done then we can move on

648
00:23:20,220 --> 00:23:21,869
arguing about private symbols and

649
00:23:21,869 --> 00:23:25,580
object.observe instead that'll be fun so

650
00:23:25,580 --> 00:23:28,200
tc39 isn't the only player and web

651
00:23:28,200 --> 00:23:30,659
platform standards the w3c and what WG

652
00:23:30,659 --> 00:23:32,700
play with substantial roles as well and

653
00:23:32,700 --> 00:23:34,379
as there is still only one standard

654
00:23:34,379 --> 00:23:36,330
language in the web platform sometimes

655
00:23:36,330 --> 00:23:37,679
though these other committees end up

656
00:23:37,679 --> 00:23:39,269
creating their own standards that

657
00:23:39,269 --> 00:23:41,359
require support from JavaScript

658
00:23:41,359 --> 00:23:43,349
historically this has led to some

659
00:23:43,349 --> 00:23:47,129
weirdness like oh the Dom with basic

660
00:23:47,129 --> 00:23:48,570
bits of platform functionality just

661
00:23:48,570 --> 00:23:50,789
dropped into the runtime as Global's now

662
00:23:50,789 --> 00:23:52,349
at least stakeholders try to get their

663
00:23:52,349 --> 00:23:54,059
features integrated into the language

664
00:23:54,059 --> 00:23:56,989
here's a pretty straightforward example

665
00:23:56,989 --> 00:23:59,820
for a bunch of new API is the what WG

666
00:23:59,820 --> 00:24:01,109
team needed a standard way to do

667
00:24:01,109 --> 00:24:02,759
asynchronous computations so they came

668
00:24:02,759 --> 00:24:04,289
up with something called Dom futures

669
00:24:04,289 --> 00:24:06,479
that were pretty much an extraction of a

670
00:24:06,479 --> 00:24:08,609
pre-existing pattern as I've already

671
00:24:08,609 --> 00:24:10,529
discussed the JavaScript community had

672
00:24:10,529 --> 00:24:12,840
pretty much solved this problem with

673
00:24:12,840 --> 00:24:14,729
promises a-plus and so the discussion

674
00:24:14,729 --> 00:24:16,799
eventually turned to how to reconcile

675
00:24:16,799 --> 00:24:18,899
what what WG wanted with the existing

676
00:24:18,899 --> 00:24:21,690
spec a clear-cut example of looking at

677
00:24:21,690 --> 00:24:23,489
the existing cow path and figuring out

678
00:24:23,489 --> 00:24:27,539
how to pay fit pretty hot on the heels a

679
00:24:27,539 --> 00:24:29,340
promise is making it into es6

680
00:24:29,340 --> 00:24:31,290
too hot in fact the chrome team

681
00:24:31,290 --> 00:24:33,000
announced their intent to ship promises

682
00:24:33,000 --> 00:24:35,340
in v8 I think it's interesting that one

683
00:24:35,340 --> 00:24:36,960
of the biggest implementation drivers is

684
00:24:36,960 --> 00:24:39,510
actually other standards chrome needed

685
00:24:39,510 --> 00:24:41,520
promises and week maps for new Dom API

686
00:24:41,520 --> 00:24:43,740
so they move promises from blink to v8

687
00:24:43,740 --> 00:24:45,570
and move them both from behind a feature

688
00:24:45,570 --> 00:24:47,160
flag so that they are actually in the

689
00:24:47,160 --> 00:24:49,920
browser there are risks to the strategy

690
00:24:49,920 --> 00:24:52,290
in this case the promises implementation

691
00:24:52,290 --> 00:24:54,450
that v8 is using has several bugs which

692
00:24:54,450 --> 00:24:56,490
are clearly called out documented in

693
00:24:56,490 --> 00:24:58,380
promises a-plus for what it's worth and

694
00:24:58,380 --> 00:25:00,810
for unrelated reason this version of v8

695
00:25:00,810 --> 00:25:02,430
got dropped into a development build of

696
00:25:02,430 --> 00:25:04,230
nodejs in such a way that it's entirely

697
00:25:04,230 --> 00:25:06,420
possible that the next major version of

698
00:25:06,420 --> 00:25:06,780
nodes

699
00:25:06,780 --> 00:25:09,030
0:12 will include these buggy promises

700
00:25:09,030 --> 00:25:11,190
if people start building significant

701
00:25:11,190 --> 00:25:13,200
code bases on top of buggy promises

702
00:25:13,200 --> 00:25:15,120
it could cause real pain later when note

703
00:25:15,120 --> 00:25:17,670
includes a build of v8 that fixes them

704
00:25:17,670 --> 00:25:19,980
it's not a good idea to put draft

705
00:25:19,980 --> 00:25:21,330
language features into runtimes that are

706
00:25:21,330 --> 00:25:23,280
intended to be used in production but

707
00:25:23,280 --> 00:25:27,630
that's web development for you so of all

708
00:25:27,630 --> 00:25:29,520
the arguments around promises on es

709
00:25:29,520 --> 00:25:31,470
discussed the longest and arguably most

710
00:25:31,470 --> 00:25:33,480
tedious debate was over whether es6

711
00:25:33,480 --> 00:25:35,130
should support flattening promises

712
00:25:35,130 --> 00:25:38,250
monadic promises or both in addition the

713
00:25:38,250 --> 00:25:40,020
w3c had built the standard for Dom

714
00:25:40,020 --> 00:25:41,820
futures and promises A+ have pretty much

715
00:25:41,820 --> 00:25:43,410
taken over within the JavaScript

716
00:25:43,410 --> 00:25:45,630
developer community promises are really

717
00:25:45,630 --> 00:25:47,130
a pretty simple construct and they

718
00:25:47,130 --> 00:25:48,540
threaten to turn to something really

719
00:25:48,540 --> 00:25:51,270
cumbersome in es6 all the parties in

720
00:25:51,270 --> 00:25:52,530
these debates have at least a little

721
00:25:52,530 --> 00:25:53,940
history and computer science on their

722
00:25:53,940 --> 00:25:56,070
sides and none of them had a complete

723
00:25:56,070 --> 00:25:58,490
understanding of the entire argument

724
00:25:58,490 --> 00:26:00,900
another example of this has generated a

725
00:26:00,900 --> 00:26:02,490
lot of heat is the new module system

726
00:26:02,490 --> 00:26:05,130
people have very strong opinions about

727
00:26:05,130 --> 00:26:08,190
AMD and nodes module system I work up

728
00:26:08,190 --> 00:26:09,210
one of the places where there are a lot

729
00:26:09,210 --> 00:26:11,550
of those opinions they're very deeply

730
00:26:11,550 --> 00:26:13,140
ingrained patterns around both and in

731
00:26:13,140 --> 00:26:15,420
the case of node and ecosystem of nearly

732
00:26:15,420 --> 00:26:18,270
unprecedented scale this is led to

733
00:26:18,270 --> 00:26:20,070
skepticism a lot of very blunt talk

734
00:26:20,070 --> 00:26:21,930
about the new module system which will

735
00:26:21,930 --> 00:26:23,460
have to tread carefully if anyone wants

736
00:26:23,460 --> 00:26:25,080
to see it widely used and one or both of

737
00:26:25,080 --> 00:26:27,570
the browser of node the module system

738
00:26:27,570 --> 00:26:29,070
was one of the last pieces to be

739
00:26:29,070 --> 00:26:31,020
finished and work on model loader still

740
00:26:31,020 --> 00:26:32,760
isn't entirely done in large part

741
00:26:32,760 --> 00:26:34,620
because Dave Herman has had Tobin hast

742
00:26:34,620 --> 00:26:36,480
at had to work so hard to accommodate

743
00:26:36,480 --> 00:26:38,720
all these competing constituencies that

744
00:26:38,720 --> 00:26:41,430
can really own be only one of these

745
00:26:41,430 --> 00:26:42,960
kinds of features in the standard

746
00:26:42,960 --> 00:26:44,450
if it's going to deserve the name node

747
00:26:44,450 --> 00:26:47,130
deserve the name no it isn't Scala for

748
00:26:47,130 --> 00:26:49,409
which I'm very thankful and a lot of

749
00:26:49,409 --> 00:26:50,850
what fueled the arguments was the desire

750
00:26:50,850 --> 00:26:52,289
of all the people in the debate to see

751
00:26:52,289 --> 00:26:55,200
their preferred strategy win beyond a

752
00:26:55,200 --> 00:26:57,110
certain point it became pure politics

753
00:26:57,110 --> 00:26:59,429
who cares whether or not this is a good

754
00:26:59,429 --> 00:27:01,169
thing this is how the process works and

755
00:27:01,169 --> 00:27:02,549
having an understanding of that makes

756
00:27:02,549 --> 00:27:03,990
you better equipped to participate in

757
00:27:03,990 --> 00:27:05,669
the process and to figure out how to

758
00:27:05,669 --> 00:27:07,289
effectively champion the pieces that you

759
00:27:07,289 --> 00:27:10,380
care about at various points in the

760
00:27:10,380 --> 00:27:12,450
development of es6 I got concerned about

761
00:27:12,450 --> 00:27:13,590
how much of the discussion of new

762
00:27:13,590 --> 00:27:15,000
features was framed in terms of how

763
00:27:15,000 --> 00:27:16,559
those features worked in other languages

764
00:27:16,559 --> 00:27:19,289
yes six is a mag past net Magpies nest

765
00:27:19,289 --> 00:27:21,600
of a language with shiny bits and pieces

766
00:27:21,600 --> 00:27:23,220
picked from many languages and not as

767
00:27:23,220 --> 00:27:25,289
much consideration as I'd like as to how

768
00:27:25,289 --> 00:27:27,600
these pieces will fit we're all going to

769
00:27:27,600 --> 00:27:29,250
have to figure that out together and we

770
00:27:29,250 --> 00:27:30,659
need to be careful or we're going to end

771
00:27:30,659 --> 00:27:32,130
up being stuck with some really gross

772
00:27:32,130 --> 00:27:34,380
stuff for a while we need to be free to

773
00:27:34,380 --> 00:27:35,520
look at these features in terms of how

774
00:27:35,520 --> 00:27:37,350
they relate to JavaScript and cleaning

775
00:27:37,350 --> 00:27:39,360
some other languages model really isn't

776
00:27:39,360 --> 00:27:43,529
helpful part of the reason I'm here in

777
00:27:43,529 --> 00:27:45,059
front of you today is that I spent much

778
00:27:45,059 --> 00:27:46,649
of the last two years banging my head

779
00:27:46,649 --> 00:27:48,510
against Java scripts limitations in

780
00:27:48,510 --> 00:27:50,130
order to help node users figure out how

781
00:27:50,130 --> 00:27:52,620
to make their applications faster I had

782
00:27:52,620 --> 00:27:54,539
to learn pretty much all of the

783
00:27:54,539 --> 00:27:56,240
JavaScript just to do my job

784
00:27:56,240 --> 00:27:58,740
server-side javascript is just different

785
00:27:58,740 --> 00:28:01,380
from browser code there's more code it's

786
00:28:01,380 --> 00:28:03,720
running for much longer and whatsup PDX

787
00:28:03,720 --> 00:28:07,470
node it runs closer to the metal there

788
00:28:07,470 --> 00:28:09,510
are a lot of features in es5 that don't

789
00:28:09,510 --> 00:28:12,210
run in that fast and v8 node in fact you

790
00:28:12,210 --> 00:28:13,830
can recognize people who've spent a lot

791
00:28:13,830 --> 00:28:15,270
of time analyzing performance of no

792
00:28:15,270 --> 00:28:16,740
doubts because their JavaScript looks

793
00:28:16,740 --> 00:28:18,929
more or less like C some of this is

794
00:28:18,929 --> 00:28:20,940
because v8 is still optimized for chrome

795
00:28:20,940 --> 00:28:22,860
some of this as a result of a carefully

796
00:28:22,860 --> 00:28:25,049
collected body of lore about how v8 JIT

797
00:28:25,049 --> 00:28:27,419
will optimize things but some of it is

798
00:28:27,419 --> 00:28:29,159
because features like function dot bind

799
00:28:29,159 --> 00:28:31,350
are just doing way too much stuff they

800
00:28:31,350 --> 00:28:32,970
were designed by people who wave the way

801
00:28:32,970 --> 00:28:34,500
concerns about whether all of this could

802
00:28:34,500 --> 00:28:37,350
be optimized filing spec bugs and adding

803
00:28:37,350 --> 00:28:39,000
useful performance tests that aren't

804
00:28:39,000 --> 00:28:40,740
part of meaningless benchmarking games

805
00:28:40,740 --> 00:28:42,299
is our best hope for trying to get these

806
00:28:42,299 --> 00:28:44,399
performance issues addressed that's

807
00:28:44,399 --> 00:28:46,620
right I added this slide just for Trevor

808
00:28:46,620 --> 00:28:50,070
if he's around to pull this together

809
00:28:50,070 --> 00:28:52,590
there are a lot of basic powerful

810
00:28:52,590 --> 00:28:54,870
abstractions at es6 some of which can be

811
00:28:54,870 --> 00:28:55,929
taken further instead

812
00:28:55,929 --> 00:28:57,850
the conversions of the language we need

813
00:28:57,850 --> 00:28:59,470
to put them all together and see how it

814
00:28:59,470 --> 00:29:01,539
feels to compose and combine them it's

815
00:29:01,539 --> 00:29:04,929
time to find the new cow paths we need

816
00:29:04,929 --> 00:29:06,789
to think really hard about what's good

817
00:29:06,789 --> 00:29:09,249
and to separate it from what's cool

818
00:29:09,249 --> 00:29:11,950
being clever is gratifying in the short

819
00:29:11,950 --> 00:29:13,629
term but building an ecosystem with

820
00:29:13,629 --> 00:29:15,309
solid foundations will be much more

821
00:29:15,309 --> 00:29:18,340
rewarding later on we don't need to use

822
00:29:18,340 --> 00:29:19,990
with all the new features at once and if

823
00:29:19,990 --> 00:29:21,399
we do we run the risk of creating

824
00:29:21,399 --> 00:29:22,720
conventions we're going to find

825
00:29:22,720 --> 00:29:25,690
incredibly toxic to work with some of us

826
00:29:25,690 --> 00:29:27,580
love shiny things and gadgets and

827
00:29:27,580 --> 00:29:29,110
hopping from crevice to grab crevice

828
00:29:29,110 --> 00:29:31,299
like mountain goats the rest of us look

829
00:29:31,299 --> 00:29:33,070
at that mountainside and see not only no

830
00:29:33,070 --> 00:29:36,629
trail but certain and terrible death as

831
00:29:36,629 --> 00:29:39,190
trailblazers it's our responsibility to

832
00:29:39,190 --> 00:29:40,899
remember the needs of the people who

833
00:29:40,899 --> 00:29:43,419
will come after us remember keep the

834
00:29:43,419 --> 00:29:48,109
language pleasant for casual developers

835
00:29:48,119 --> 00:29:50,289
something you learn when you study a

836
00:29:50,289 --> 00:29:51,789
foreign language is that when you are

837
00:29:51,789 --> 00:29:53,769
fluent in a language you think in that

838
00:29:53,769 --> 00:29:55,929
language instead of mentally translating

839
00:29:55,929 --> 00:29:58,509
as you go along you stop noticing which

840
00:29:58,509 --> 00:29:59,950
words are loanwords and which words

841
00:29:59,950 --> 00:30:01,600
sound funny and struggling to juggle

842
00:30:01,600 --> 00:30:03,220
conjugations and genders in your head

843
00:30:03,220 --> 00:30:04,869
and think instead of getting across

844
00:30:04,869 --> 00:30:07,899
concepts and feelings I want us to get

845
00:30:07,899 --> 00:30:09,580
to a point where it is possible to be

846
00:30:09,580 --> 00:30:11,799
fluent in idiomatic JavaScript and that

847
00:30:11,799 --> 00:30:13,389
we as a community spanning the browser

848
00:30:13,389 --> 00:30:15,399
and the backend can all code in a way

849
00:30:15,399 --> 00:30:17,259
that is intelligible and consistent to

850
00:30:17,259 --> 00:30:19,480
each other javascript is a very

851
00:30:19,480 --> 00:30:22,090
expressive language and es6 adds a lot

852
00:30:22,090 --> 00:30:24,879
more expressiveness into the mix all

853
00:30:24,879 --> 00:30:27,070
know that es6 is a success when people

854
00:30:27,070 --> 00:30:28,960
talk about JavaScript primarily in terms

855
00:30:28,960 --> 00:30:31,419
of JavaScript and not in terms of how it

856
00:30:31,419 --> 00:30:33,220
compares to other languages even with

857
00:30:33,220 --> 00:30:34,659
the new features that originally came

858
00:30:34,659 --> 00:30:38,139
from somewhere else to get there is

859
00:30:38,139 --> 00:30:39,999
going to require critical thinking and

860
00:30:39,999 --> 00:30:42,070
judicious editing if some of the feed

861
00:30:42,070 --> 00:30:43,869
new features turn out to be obviously

862
00:30:43,869 --> 00:30:45,999
bad deprecated them quickly and loudly

863
00:30:45,999 --> 00:30:48,999
and move on with is still in JavaScript

864
00:30:48,999 --> 00:30:52,690
but nobody's forcing you to use it it

865
00:30:52,690 --> 00:30:54,249
took over 10 years between the

866
00:30:54,249 --> 00:30:55,779
introduction of JavaScript and the

867
00:30:55,779 --> 00:30:57,879
publishing of the good parts it doesn't

868
00:30:57,879 --> 00:31:00,340
have to take that long again work with

869
00:31:00,340 --> 00:31:02,049
the goal in mind of converging on a new

870
00:31:02,049 --> 00:31:04,149
style of effective JavaScript using a

871
00:31:04,149 --> 00:31:06,129
new set of good parts but treat it all

872
00:31:06,129 --> 00:31:08,000
as a process rather than a product

873
00:31:08,000 --> 00:31:10,559
good parts the book is best when it

874
00:31:10,559 --> 00:31:12,240
talks concretely about what has and

875
00:31:12,240 --> 00:31:14,400
hasn't worked and less effective when it

876
00:31:14,400 --> 00:31:17,040
tries to establish a new dogma we should

877
00:31:17,040 --> 00:31:18,809
strive to be descriptive as much as we

878
00:31:18,809 --> 00:31:20,309
can and to save the opinion based

879
00:31:20,309 --> 00:31:22,500
flaming for Twitter and you know

880
00:31:22,500 --> 00:31:25,590
wherever IRC ultimately we're all on

881
00:31:25,590 --> 00:31:27,380
this together

882
00:31:27,380 --> 00:31:29,790
some of us may sound a little surprising

883
00:31:29,790 --> 00:31:31,290
to those of you who know me I'm an

884
00:31:31,290 --> 00:31:33,030
opinionated smartass and fond of saying

885
00:31:33,030 --> 00:31:34,320
things like your favorite programming

886
00:31:34,320 --> 00:31:36,900
language sucks at the end of the day

887
00:31:36,900 --> 00:31:38,940
javascript is just another imperfect

888
00:31:38,940 --> 00:31:40,980
tool made by imperfect beings this is a

889
00:31:40,980 --> 00:31:42,450
polite way of saying that javascript is

890
00:31:42,450 --> 00:31:44,790
kind of terrible but it gets things done

891
00:31:44,790 --> 00:31:47,910
as this conference shows I think my

892
00:31:47,910 --> 00:31:50,820
message to you is hopeful es6 is almost

893
00:31:50,820 --> 00:31:52,530
done and that means that it is now our

894
00:31:52,530 --> 00:31:54,660
responsibility as a community to figure

895
00:31:54,660 --> 00:31:56,460
out how to use it most effectively and

896
00:31:56,460 --> 00:31:59,309
to make it a success there is a lot of

897
00:31:59,309 --> 00:32:00,450
stuff in there and I have strong

898
00:32:00,450 --> 00:32:01,770
opinions about which bits of it are

899
00:32:01,770 --> 00:32:04,830
absolutely terrible but I and more

900
00:32:04,830 --> 00:32:06,960
importantly all of you have the power to

901
00:32:06,960 --> 00:32:08,250
sort through everything and figure out

902
00:32:08,250 --> 00:32:09,840
which bits are useful in which bits are

903
00:32:09,840 --> 00:32:10,440
nasty

904
00:32:10,440 --> 00:32:13,410
together we are JavaScript and its

905
00:32:13,410 --> 00:32:16,290
future is under our control I urge you

906
00:32:16,290 --> 00:32:18,030
to take advantage of that control and to

907
00:32:18,030 --> 00:32:20,730
help each other out along the way thank

