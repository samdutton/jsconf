1
00:00:00,030 --> 00:00:05,609

- sound yeah okay yeah thanks so much

2
00:00:05,609 --> 00:00:07,639
for having me

3
00:00:07,639 --> 00:00:10,800
just to get a slight feel how many of

4
00:00:10,800 --> 00:00:12,750
you have ever done any metaprogramming

5
00:00:12,750 --> 00:00:18,240
show me a hand so it's sort of a trick

6
00:00:18,240 --> 00:00:20,520
question because I'm I'm pretty sure if

7
00:00:20,520 --> 00:00:22,680
you've ever programmed in JavaScript

8
00:00:22,680 --> 00:00:25,859
you've done some meta programming just

9
00:00:25,859 --> 00:00:29,460
don't know it I'm Eric I'm an

10
00:00:29,460 --> 00:00:31,949
independent consultant and JavaScript

11
00:00:31,949 --> 00:00:35,489
trainer from Oslo and I spent most of my

12
00:00:35,489 --> 00:00:37,649
days either building things in

13
00:00:37,649 --> 00:00:40,860
JavaScript or teaching JavaScript and

14
00:00:40,860 --> 00:00:44,760
the react stack and for a while now I've

15
00:00:44,760 --> 00:00:47,690
been pretty hung up on meta programming

16
00:00:47,690 --> 00:00:51,449
and when I think about meta programming

17
00:00:51,449 --> 00:00:55,110
I think about these guys Wizards doing

18
00:00:55,110 --> 00:00:58,590
wizard II things because at first at

19
00:00:58,590 --> 00:01:01,010
least it feels a lot of it feels

20
00:01:01,010 --> 00:01:03,290
indistinguishable from magic

21
00:01:03,290 --> 00:01:08,040
but what is meta programming so I try to

22
00:01:08,040 --> 00:01:11,760
ask Wikipedia and ditka pedia says that

23
00:01:11,760 --> 00:01:14,220
meta programming is the ability to treat

24
00:01:14,220 --> 00:01:18,630
programs as data and the ability to read

25
00:01:18,630 --> 00:01:21,960
generate analyze or transform other

26
00:01:21,960 --> 00:01:24,180
programs and even modify itself while

27
00:01:24,180 --> 00:01:27,659
running so I think I'll go with that

28
00:01:27,659 --> 00:01:31,710
and there's two main branches of meta

29
00:01:31,710 --> 00:01:36,170
programming one of them is macros and

30
00:01:36,170 --> 00:01:40,320
macros enables you to create your own

31
00:01:40,320 --> 00:01:44,630
syntax so here's an example where we use

32
00:01:44,630 --> 00:01:47,460
sweet J's which is a macro system for

33
00:01:47,460 --> 00:01:50,159
JavaScript to create some custom syntax

34
00:01:50,159 --> 00:01:53,759
so I'll make my own syntax here and I

35
00:01:53,759 --> 00:01:56,600
can use that syntax in my code and

36
00:01:56,600 --> 00:01:59,460
before that code actually runs it gets

37
00:01:59,460 --> 00:02:01,640
compiled to whatever that syntax means

38
00:02:01,640 --> 00:02:07,020
and you can also make your own operators

39
00:02:07,020 --> 00:02:09,509
so let's say that I'm really tired of

40
00:02:09,509 --> 00:02:12,450
saying dot then I don't like writing dot

41
00:02:12,450 --> 00:02:13,290
then

42
00:02:13,290 --> 00:02:15,540
chaining promises so I'm making my own

43
00:02:15,540 --> 00:02:19,950
operator for that so now I can use that

44
00:02:19,950 --> 00:02:23,069
operator in my code and before that code

45
00:02:23,069 --> 00:02:25,290
actually runs its compiled down to

46
00:02:25,290 --> 00:02:29,959
actual promise chaining so you can use

47
00:02:29,959 --> 00:02:33,209
macros then to sort of extend your

48
00:02:33,209 --> 00:02:35,040
language create your own dream language

49
00:02:35,040 --> 00:02:37,680
and all of this stuff happens during

50
00:02:37,680 --> 00:02:41,849
compile time or possibly and something

51
00:02:41,849 --> 00:02:44,489
called macro expansion time at least it

52
00:02:44,489 --> 00:02:48,389
happens before your code runs and that

53
00:02:48,389 --> 00:02:52,579
second branch is reflection and

54
00:02:52,579 --> 00:02:55,980
reflection has some sub branches where

55
00:02:55,980 --> 00:02:58,530
one of them is introspection meaning

56
00:02:58,530 --> 00:03:01,709
that you can the code connects inspect

57
00:03:01,709 --> 00:03:03,079
itself during runtime

58
00:03:03,079 --> 00:03:06,120
you have self modification meaning that

59
00:03:06,120 --> 00:03:08,310
you can change your code during runtime

60
00:03:08,310 --> 00:03:11,340
and then you have this thing called

61
00:03:11,340 --> 00:03:13,980
inner session meaning that the code can

62
00:03:13,980 --> 00:03:18,239
intercept and intervene with itself so a

63
00:03:18,239 --> 00:03:20,370
simple example of introspection would be

64
00:03:20,370 --> 00:03:22,440
let's say we have an object with some

65
00:03:22,440 --> 00:03:26,099
properties here and I use object keys to

66
00:03:26,099 --> 00:03:27,989
check which properties exist on this

67
00:03:27,989 --> 00:03:31,379
object and it gives me a result back so

68
00:03:31,379 --> 00:03:34,620
this is some of the one of the simplest

69
00:03:34,620 --> 00:03:38,430
examples of introspection and then you

70
00:03:38,430 --> 00:03:40,889
have self modification let's say that I

71
00:03:40,889 --> 00:03:44,669
have a function I have a grumpy some

72
00:03:44,669 --> 00:03:48,060
function that usually returns the sum of

73
00:03:48,060 --> 00:03:53,579
a and B but if you ever pass an A that's

74
00:03:53,579 --> 00:03:55,290
larger than five it'll just rewrite

75
00:03:55,290 --> 00:03:58,919
itself to just return zero so if I pass

76
00:03:58,919 --> 00:04:01,229
one plus one that's two if I pass ten

77
00:04:01,229 --> 00:04:03,150
plus one that's eleven but then it just

78
00:04:03,150 --> 00:04:07,379
starts returning zero so we've actually

79
00:04:07,379 --> 00:04:09,439
changed the functionality here during

80
00:04:09,439 --> 00:04:11,729
the runtime while our code is running

81
00:04:11,729 --> 00:04:17,439
and then we have inner session

82
00:04:17,449 --> 00:04:19,799
intercession is something that you can

83
00:04:19,799 --> 00:04:23,669
do in JavaScript already sort of by

84
00:04:23,669 --> 00:04:26,640
using object defined property

85
00:04:26,640 --> 00:04:29,710
so let's say we have a hero here and he

86
00:04:29,710 --> 00:04:32,350
has a health property but we also want

87
00:04:32,350 --> 00:04:35,500
to have a status field that is somehow

88
00:04:35,500 --> 00:04:38,740
based on his health so we'll define a

89
00:04:38,740 --> 00:04:42,550
new property status and we'll define a

90
00:04:42,550 --> 00:04:45,010
getter for that saying that if his

91
00:04:45,010 --> 00:04:48,010
health is larger than 50 he is fit like

92
00:04:48,010 --> 00:04:51,040
a champ otherwise he's badly hurt so

93
00:04:51,040 --> 00:04:53,710
here we have a property which functions

94
00:04:53,710 --> 00:04:58,330
based on the runtime conditions but this

95
00:04:58,330 --> 00:05:01,510
sort of of intercession in JavaScript is

96
00:05:01,510 --> 00:05:06,310
pretty limited so all of this reflection

97
00:05:06,310 --> 00:05:08,920
stuff happens during runtime while our

98
00:05:08,920 --> 00:05:12,130
code is running and that brings us over

99
00:05:12,130 --> 00:05:15,100
to it's a very natural question now is

100
00:05:15,100 --> 00:05:18,310
why is all of this useful why do we need

101
00:05:18,310 --> 00:05:23,460
this so I went and asked Wikipedia again

102
00:05:23,460 --> 00:05:27,010
and Wikipedia's answer is in some cases

103
00:05:27,010 --> 00:05:29,350
this allows programmers to minimize the

104
00:05:29,350 --> 00:05:32,230
number of lines of code to express a

105
00:05:32,230 --> 00:05:33,820
solution and thus reducing the

106
00:05:33,820 --> 00:05:39,460
development time I think I think I'd

107
00:05:39,460 --> 00:05:41,530
rather say that the reason why this is

108
00:05:41,530 --> 00:05:45,040
very useful is because we want as much

109
00:05:45,040 --> 00:05:47,770
expressivity as possible to model our

110
00:05:47,770 --> 00:05:52,060
problems and what we want is these

111
00:05:52,060 --> 00:05:54,010
elegant and developer friendly

112
00:05:54,010 --> 00:06:00,100
interfaces and this brings me to an

113
00:06:00,100 --> 00:06:04,060
interface that I'm pretty sure that a

114
00:06:04,060 --> 00:06:06,960
lot of you are familiar with which is

115
00:06:06,960 --> 00:06:13,420
proxies in the form of proxies on the

116
00:06:13,420 --> 00:06:18,370
web so a proxy is usually a server

117
00:06:18,370 --> 00:06:21,190
placed in front of one or more servers

118
00:06:21,190 --> 00:06:24,390
and this is to abstract the way

119
00:06:24,390 --> 00:06:27,400
complexity and to provide a single

120
00:06:27,400 --> 00:06:31,030
interface for the consumer so this

121
00:06:31,030 --> 00:06:35,120
enables you to actually intercept any

122
00:06:35,120 --> 00:06:39,940
any interaction with the interface and

123
00:06:39,940 --> 00:06:44,330
the use cases might be load balancing it

124
00:06:44,330 --> 00:06:46,820
might be delegating based on where the

125
00:06:46,820 --> 00:06:50,389
resources are and so on but the main

126
00:06:50,389 --> 00:06:52,220
thing is that you're providing a single

127
00:06:52,220 --> 00:06:54,320
unified interface for the consumer

128
00:06:54,320 --> 00:06:57,100
hiding all these implementation details

129
00:06:57,100 --> 00:06:59,960
and we can apply this concept more

130
00:06:59,960 --> 00:07:02,530
generally it doesn't have to be servers

131
00:07:02,530 --> 00:07:07,190
so we could instead place a proxy in

132
00:07:07,190 --> 00:07:10,400
front of a set of objects we can

133
00:07:10,400 --> 00:07:12,620
intercept any type of access to these

134
00:07:12,620 --> 00:07:15,260
objects and provide an abstraction to

135
00:07:15,260 --> 00:07:20,030
hide implementation details and this is

136
00:07:20,030 --> 00:07:22,340
what is made possible with proxies that

137
00:07:22,340 --> 00:07:29,020
was introduced in es6 and what this

138
00:07:29,020 --> 00:07:31,970
enables is a much more powerful form of

139
00:07:31,970 --> 00:07:34,850
intercession among other things in

140
00:07:34,850 --> 00:07:40,070
JavaScript and generally this means that

141
00:07:40,070 --> 00:07:44,300
we are now able to intercept and define

142
00:07:44,300 --> 00:07:46,940
custom behavior for fundamental

143
00:07:46,940 --> 00:07:49,400
operations on objects so that means

144
00:07:49,400 --> 00:07:53,289
properly lookup assignment enumeration

145
00:07:53,289 --> 00:07:57,320
even function invocation and so on and

146
00:07:57,320 --> 00:08:00,590
this is a very interesting feature for

147
00:08:00,590 --> 00:08:02,900
another reason as well because this is

148
00:08:02,900 --> 00:08:07,340
one of the few features that essentially

149
00:08:07,340 --> 00:08:10,610
requires engine support unlike most of

150
00:08:10,610 --> 00:08:13,760
use six which is syntax sugar that can

151
00:08:13,760 --> 00:08:16,639
be transpiled using Babel for example

152
00:08:16,639 --> 00:08:21,310
this isn't actually viable with proxies

153
00:08:21,310 --> 00:08:25,280
but thankfully the support has become

154
00:08:25,280 --> 00:08:29,830
pretty good except ie

155
00:08:29,830 --> 00:08:38,779
which hopefully yeah doesn't stop you

156
00:08:38,789 --> 00:08:43,149
so the proxy in JavaScript has its own

157
00:08:43,149 --> 00:08:46,420
constructor and the constructor takes a

158
00:08:46,420 --> 00:08:50,339
target object and a handler object and

159
00:08:50,339 --> 00:08:53,680
this target object can be any type of

160
00:08:53,680 --> 00:08:55,660
object it can be a plane object it can

161
00:08:55,660 --> 00:08:58,600
be an array it can be a function because

162
00:08:58,600 --> 00:09:00,639
functions are objects in JavaScript

163
00:09:00,639 --> 00:09:04,180
it can even be another proxy so you can

164
00:09:04,180 --> 00:09:07,990
proxy a proxy another important thing

165
00:09:07,990 --> 00:09:10,180
about proxies is that they're completely

166
00:09:10,180 --> 00:09:12,970
transparent so if I say that I'm

167
00:09:12,970 --> 00:09:14,529
creating a proxy here with a plain

168
00:09:14,529 --> 00:09:18,939
object as the target if I check type of

169
00:09:18,939 --> 00:09:21,670
of this proxy it'll give me object so

170
00:09:21,670 --> 00:09:24,629
there's no such thing as a proxy type

171
00:09:24,629 --> 00:09:29,500
it's entirely transparent and then

172
00:09:29,500 --> 00:09:32,680
there's the handler object and this is

173
00:09:32,680 --> 00:09:35,620
where we define so-called traps for all

174
00:09:35,620 --> 00:09:37,329
of these operations that you can do on

175
00:09:37,329 --> 00:09:40,750
objects and here's an example with a

176
00:09:40,750 --> 00:09:43,839
getter trap where we say that if you

177
00:09:43,839 --> 00:09:46,750
ever try to get a property from this

178
00:09:46,750 --> 00:09:52,899
object we'll just return 37 so we can

179
00:09:52,899 --> 00:09:54,790
create a new proxy using that Handler

180
00:09:54,790 --> 00:09:58,389
and if I try to access a from this

181
00:09:58,389 --> 00:10:00,339
object or B from this object it'll just

182
00:10:00,339 --> 00:10:04,180
keep returning 37 and for any available

183
00:10:04,180 --> 00:10:06,730
fundamental operation there is a

184
00:10:06,730 --> 00:10:09,189
corresponding trap so you have a getter

185
00:10:09,189 --> 00:10:13,209
trap you have a setter has apply and so

186
00:10:13,209 --> 00:10:16,930
on and you also have this accompanying

187
00:10:16,930 --> 00:10:21,910
new api called the reflect api which can

188
00:10:21,910 --> 00:10:24,040
be used to perform all of these

189
00:10:24,040 --> 00:10:28,839
operations on objects and an example of

190
00:10:28,839 --> 00:10:30,850
this is let's say we have an object here

191
00:10:30,850 --> 00:10:34,660
with a property we can use reflect get

192
00:10:34,660 --> 00:10:36,279
to say that we want to get the health

193
00:10:36,279 --> 00:10:41,439
property from this hero object so in the

194
00:10:41,439 --> 00:10:44,230
same way that there is a trap for every

195
00:10:44,230 --> 00:10:47,370
operation there is

196
00:10:47,370 --> 00:10:51,029
a corresponding method in the reflect

197
00:10:51,029 --> 00:10:54,779
API so if we do a complete one-to-one

198
00:10:54,779 --> 00:10:58,589
mapping here you'll get a proxy that is

199
00:10:58,589 --> 00:11:01,080
just a pure relay it doesn't do anything

200
00:11:01,080 --> 00:11:04,050
it'll behave the object will behave just

201
00:11:04,050 --> 00:11:06,870
as it would have if you didn't wrap it

202
00:11:06,870 --> 00:11:10,290
in a proxy so the nice thing now is that

203
00:11:10,290 --> 00:11:12,600
as I said you can have overload a lot of

204
00:11:12,600 --> 00:11:14,400
these fundamental operations like the

205
00:11:14,400 --> 00:11:16,529
dot operator the equals and the function

206
00:11:16,529 --> 00:11:21,900
call and one example of this is let's

207
00:11:21,900 --> 00:11:23,940
say we wanted to add some

208
00:11:23,940 --> 00:11:26,700
instrumentation to our code so we'll

209
00:11:26,700 --> 00:11:28,140
create a function that's called log

210
00:11:28,140 --> 00:11:30,180
access to properties it takes an object

211
00:11:30,180 --> 00:11:34,560
and we return a proxy with that object

212
00:11:34,560 --> 00:11:38,130
as the target object and then we pass it

213
00:11:38,130 --> 00:11:40,950
a handler object with a getter trap

214
00:11:40,950 --> 00:11:43,290
saying that ok if you ever try to get

215
00:11:43,290 --> 00:11:44,970
something from this object I'll log out

216
00:11:44,970 --> 00:11:47,310
whatever you try to get and then I'll

217
00:11:47,310 --> 00:11:50,150
return a result of actually getting that

218
00:11:50,150 --> 00:11:52,740
and we can also add a setter trap saying

219
00:11:52,740 --> 00:11:54,570
that if you try to set something will

220
00:11:54,570 --> 00:11:58,440
log out whatever you try to set and then

221
00:11:58,440 --> 00:12:02,010
we'll set that on the object and the

222
00:12:02,010 --> 00:12:04,320
nice thing here is that the object that

223
00:12:04,320 --> 00:12:06,209
is being wrapped in a proxy doesn't know

224
00:12:06,209 --> 00:12:08,490
about it and the proxy doesn't have to

225
00:12:08,490 --> 00:12:10,500
know anything about the object it's

226
00:12:10,500 --> 00:12:15,839
wrapping so it's completely decoupled so

227
00:12:15,839 --> 00:12:18,000
if you use this now we can create an

228
00:12:18,000 --> 00:12:22,980
object a bit like here we can create an

229
00:12:22,980 --> 00:12:26,040
object with some properties and then we

230
00:12:26,040 --> 00:12:29,250
can create a proxy using this function

231
00:12:29,250 --> 00:12:32,970
log access to properties so whenever I

232
00:12:32,970 --> 00:12:35,670
try to access a property here now it'll

233
00:12:35,670 --> 00:12:37,620
log out the access and if I try to

234
00:12:37,620 --> 00:12:40,080
change something it'll log out whatever

235
00:12:40,080 --> 00:12:46,230
you changed and we can also use proxies

236
00:12:46,230 --> 00:12:50,900
to make observable objects pretty easily

237
00:12:50,900 --> 00:12:53,520
so let's say we create us as a function

238
00:12:53,520 --> 00:12:55,800
called observable which takes an object

239
00:12:55,800 --> 00:12:58,800
that you want to observe and then it

240
00:12:58,800 --> 00:13:00,660
takes an unchanged function

241
00:13:00,660 --> 00:13:03,650
we'll call whenever something changes

242
00:13:03,650 --> 00:13:07,260
we'll return a new proxy put the object

243
00:13:07,260 --> 00:13:09,360
in the target putting a handler which

244
00:13:09,360 --> 00:13:11,820
has a set trap so whenever you try to

245
00:13:11,820 --> 00:13:14,190
set something on this object will

246
00:13:14,190 --> 00:13:16,230
actually set it and then afterwards

247
00:13:16,230 --> 00:13:18,000
we'll call the unchanged method with

248
00:13:18,000 --> 00:13:22,470
whatever you updated so if you want to

249
00:13:22,470 --> 00:13:26,010
use this this isn't actually as useful

250
00:13:26,010 --> 00:13:29,000
as true observables because we have to

251
00:13:29,000 --> 00:13:33,030
overwrite the original object but now we

252
00:13:33,030 --> 00:13:35,280
can create an object here that is

253
00:13:35,280 --> 00:13:38,400
observable so if I ever change if I

254
00:13:38,400 --> 00:13:40,260
change the name here it'll log out name

255
00:13:40,260 --> 00:13:41,880
change to Frank if I change the age

256
00:13:41,880 --> 00:13:47,070
it'll log out the age change to 40 so

257
00:13:47,070 --> 00:13:50,040
all of this is nice but it's not really

258
00:13:50,040 --> 00:13:53,970
something that would revolutionize how

259
00:13:53,970 --> 00:13:57,690
you write code in JavaScript so I tried

260
00:13:57,690 --> 00:13:59,520
to I try to think about I didn't really

261
00:13:59,520 --> 00:14:00,750
want to do this talk before I had

262
00:14:00,750 --> 00:14:04,980
something useful to do do you use

263
00:14:04,980 --> 00:14:09,180
proxies for so for the last year I've

264
00:14:09,180 --> 00:14:10,860
been working on a client project with a

265
00:14:10,860 --> 00:14:13,800
lot of people where we have a large

266
00:14:13,800 --> 00:14:15,180
amount of real-time data

267
00:14:15,180 --> 00:14:19,830
think something like firebase and we

268
00:14:19,830 --> 00:14:21,480
have a lot of data that looks like this

269
00:14:21,480 --> 00:14:25,250
let's say we have we have a collection

270
00:14:25,250 --> 00:14:29,850
we have a collection of stories and

271
00:14:29,850 --> 00:14:32,730
every story has an ID it has a title it

272
00:14:32,730 --> 00:14:35,160
has an author it has a list of people

273
00:14:35,160 --> 00:14:37,530
that have liked this story that have

274
00:14:37,530 --> 00:14:39,900
read this story and so on and what you

275
00:14:39,900 --> 00:14:42,720
can see here is that it's just

276
00:14:42,720 --> 00:14:49,590
references and we can also imagine that

277
00:14:49,590 --> 00:14:52,400
we have another list here of people and

278
00:14:52,400 --> 00:14:56,280
these people have authored books they

279
00:14:56,280 --> 00:15:01,880
have read books they have liked books so

280
00:15:01,880 --> 00:15:04,140
what we see here is that these

281
00:15:04,140 --> 00:15:05,700
references are actually pointing to

282
00:15:05,700 --> 00:15:08,940
different objects so the person one here

283
00:15:08,940 --> 00:15:11,890
is pointing to person one in our

284
00:15:11,890 --> 00:15:14,800
in our people collection and story one

285
00:15:14,800 --> 00:15:19,120
here is are all pointing to the first

286
00:15:19,120 --> 00:15:23,520
story so what we really have here is

287
00:15:23,520 --> 00:15:27,490
it's sort of a graph so if we just

288
00:15:27,490 --> 00:15:29,890
consolidate this into an object we have

289
00:15:29,890 --> 00:15:31,750
a collection of stories and we have a

290
00:15:31,750 --> 00:15:34,020
collection of people and they're all

291
00:15:34,020 --> 00:15:39,010
connected together in different ways so

292
00:15:39,010 --> 00:15:41,410
what does it look like if you want to

293
00:15:41,410 --> 00:15:43,450
traverse this thing let's say you want

294
00:15:43,450 --> 00:15:45,850
you need to traverse this thing very

295
00:15:45,850 --> 00:15:49,450
deeply so we can start out then let's

296
00:15:49,450 --> 00:15:52,000
say we want to find we want to find the

297
00:15:52,000 --> 00:15:55,780
name of the first person that liked the

298
00:15:55,780 --> 00:15:58,810
first story so we'll go into the graph

299
00:15:58,810 --> 00:16:01,630
we'll pull out the first story we'll

300
00:16:01,630 --> 00:16:04,300
pull out the array of references but to

301
00:16:04,300 --> 00:16:06,610
people who have liked it we'll have to

302
00:16:06,610 --> 00:16:09,730
map it so that we can actually map it

303
00:16:09,730 --> 00:16:14,740
over to the actual objects and then

304
00:16:14,740 --> 00:16:17,560
you'll have to choose the first element

305
00:16:17,560 --> 00:16:19,300
of that and then we can pull out the

306
00:16:19,300 --> 00:16:23,470
name or if you want to find the title of

307
00:16:23,470 --> 00:16:26,080
the first like story by the author this

308
00:16:26,080 --> 00:16:29,050
is getting pretty deep now we'll have to

309
00:16:29,050 --> 00:16:31,390
get the right collection based on this

310
00:16:31,390 --> 00:16:34,830
reference we'll have to find the correct

311
00:16:34,830 --> 00:16:38,320
author and then we can pull out the

312
00:16:38,320 --> 00:16:43,030
title from there this gets really

313
00:16:43,030 --> 00:16:48,270
tedious it would be so much better if we

314
00:16:48,270 --> 00:16:51,400
could just access this like it was a

315
00:16:51,400 --> 00:16:54,550
plain object so that we can go into the

316
00:16:54,550 --> 00:16:58,390
first story we can go into the like by

317
00:16:58,390 --> 00:17:01,990
list and then just assume that that's

318
00:17:01,990 --> 00:17:04,530
the actual object not just a reference

319
00:17:04,530 --> 00:17:08,580
and the same thing with the title here

320
00:17:08,580 --> 00:17:11,920
so this is really this would be a much

321
00:17:11,920 --> 00:17:13,720
better interface to interact with this

322
00:17:13,720 --> 00:17:17,740
graph so what we really want our data to

323
00:17:17,740 --> 00:17:21,400
look like is something like this because

324
00:17:21,400 --> 00:17:24,670
what we have is just a reference here we

325
00:17:24,670 --> 00:17:26,049
are

326
00:17:26,049 --> 00:17:29,789
we're in story one and it has an author

327
00:17:29,789 --> 00:17:32,259
but what we really want is that author

328
00:17:32,259 --> 00:17:35,440
to be that object and again that has a

329
00:17:35,440 --> 00:17:37,779
list of stories that the author has

330
00:17:37,779 --> 00:17:41,830
liked and we would just rather have that

331
00:17:41,830 --> 00:17:46,389
be the actual story and so on

332
00:17:46,389 --> 00:17:49,090
and this goes on infinitely right

333
00:17:49,090 --> 00:17:53,559
because this is circular so we need some

334
00:17:53,559 --> 00:17:57,099
kind of way of transforming this object

335
00:17:57,099 --> 00:17:59,379
that contains only references to an

336
00:17:59,379 --> 00:18:03,849
actually populated object here so let's

337
00:18:03,849 --> 00:18:05,589
imagine that we could create an

338
00:18:05,589 --> 00:18:09,149
interface a function called populate

339
00:18:09,149 --> 00:18:13,839
which would take the graph as an

340
00:18:13,839 --> 00:18:16,330
argument and then the node you wanted to

341
00:18:16,330 --> 00:18:19,539
populate so as an example we we would

342
00:18:19,539 --> 00:18:22,869
want to have a populated version of the

343
00:18:22,869 --> 00:18:27,940
first story in our list but how could we

344
00:18:27,940 --> 00:18:30,219
ever implement this so the naive

345
00:18:30,219 --> 00:18:34,659
approach would be that okay I'll just

346
00:18:34,659 --> 00:18:36,429
use something like object a sign and

347
00:18:36,429 --> 00:18:39,009
just I don't know just keep filling this

348
00:18:39,009 --> 00:18:41,889
in recursively and until something just

349
00:18:41,889 --> 00:18:43,629
blows up right because it's infinite

350
00:18:43,629 --> 00:18:46,419
it's not possible it's just not possible

351
00:18:46,419 --> 00:18:50,589
to to do this in something that needs to

352
00:18:50,589 --> 00:18:55,839
evaluate upfront but this is a really

353
00:18:55,839 --> 00:19:00,379
nice use case for proxies

354
00:19:00,389 --> 00:19:03,639
so with proxies you can actually make

355
00:19:03,639 --> 00:19:07,869
this work because even if it seems like

356
00:19:07,869 --> 00:19:11,169
we have to do this upfront really really

357
00:19:11,169 --> 00:19:15,940
don't have to because with proxies just

358
00:19:15,940 --> 00:19:20,589
like with proxy web servers we could

359
00:19:20,589 --> 00:19:23,409
just say that okay I'm in story zero and

360
00:19:23,409 --> 00:19:26,379
I access the author but instead of

361
00:19:26,379 --> 00:19:28,210
actually returning the reference we

362
00:19:28,210 --> 00:19:31,239
could just redirect you to that actual

363
00:19:31,239 --> 00:19:34,839
object in the people collection and if

364
00:19:34,839 --> 00:19:38,859
you then access the story there we would

365
00:19:38,859 --> 00:19:39,070
just

366
00:19:39,070 --> 00:19:45,460
we direct you back so now using proxies

367
00:19:45,460 --> 00:19:49,570
we can actually have this nice interface

368
00:19:49,570 --> 00:19:52,590
by pretending that this is an infinitely

369
00:19:52,590 --> 00:19:56,950
nested object except it's just too flat

370
00:19:56,950 --> 00:20:01,059
lists in JSON and I'm wanted to show

371
00:20:01,059 --> 00:20:02,799
some code examples for how to do this

372
00:20:02,799 --> 00:20:05,049
but they just did not fit in to the

373
00:20:05,049 --> 00:20:08,139
slides in any a reasonable way so if

374
00:20:08,139 --> 00:20:10,470
anyone wants to take a look there's a

375
00:20:10,470 --> 00:20:16,029
open-source version of this and now I

376
00:20:16,029 --> 00:20:21,610
felt really excited because for the

377
00:20:21,610 --> 00:20:25,120
first time I felt that I had some proper

378
00:20:25,120 --> 00:20:26,860
use case for proxies because this was

379
00:20:26,860 --> 00:20:28,539
something that you couldn't do without

380
00:20:28,539 --> 00:20:31,539
proxies so I started to think about

381
00:20:31,539 --> 00:20:34,559
other things that I could use this for

382
00:20:34,559 --> 00:20:38,110
and thing I got a really good idea

383
00:20:38,110 --> 00:20:41,649
because we all have a beef with

384
00:20:41,649 --> 00:20:48,279
JavaScript right undefined it's not a

385
00:20:48,279 --> 00:20:50,620
function and cannot read properties

386
00:20:50,620 --> 00:20:53,259
something something of undefined and and

387
00:20:53,259 --> 00:20:56,259
yes I know about typescript and flow but

388
00:20:56,259 --> 00:21:01,570
there's no fun in that so with this as a

389
00:21:01,570 --> 00:21:06,220
starting point I figured all right I'm

390
00:21:06,220 --> 00:21:08,440
done with undefined not being a function

391
00:21:08,440 --> 00:21:13,440
so first up I want to redefine undefined

392
00:21:13,440 --> 00:21:17,110
so this is my own undefined and it's

393
00:21:17,110 --> 00:21:19,149
actually going to be a function the

394
00:21:19,149 --> 00:21:22,590
target object is a function just the

395
00:21:22,590 --> 00:21:25,720
empty function and I'll declare that

396
00:21:25,720 --> 00:21:29,679
this is gonna have a getter trap so

397
00:21:29,679 --> 00:21:31,450
whenever I try to get something from

398
00:21:31,450 --> 00:21:35,740
undefined notice that there's one kind

399
00:21:35,740 --> 00:21:38,799
of Lee key thing here is that functions

400
00:21:38,799 --> 00:21:41,889
need to have names so I had to kind of

401
00:21:41,889 --> 00:21:43,750
shim the name in here so that if you

402
00:21:43,750 --> 00:21:47,049
ever access name this doesn't you can't

403
00:21:47,049 --> 00:21:49,779
change any further on that but I'll just

404
00:21:49,779 --> 00:21:52,210
return undefined again so if you try to

405
00:21:52,210 --> 00:21:52,930
access something

406
00:21:52,930 --> 00:21:55,710
and then just get another undefined and

407
00:21:55,710 --> 00:21:58,570
if you ever tried to call undefined as a

408
00:21:58,570 --> 00:22:00,040
function I'll just return undefined

409
00:22:00,040 --> 00:22:05,080
again so now I figured we just need to

410
00:22:05,080 --> 00:22:09,880
make some seat belts for JavaScript so

411
00:22:09,880 --> 00:22:12,730
we have a function here that takes an

412
00:22:12,730 --> 00:22:16,750
object and it returns a proxy of that

413
00:22:16,750 --> 00:22:20,590
object and says that if you ever try to

414
00:22:20,590 --> 00:22:23,350
get something from this object will

415
00:22:23,350 --> 00:22:26,020
check does this property actually exist

416
00:22:26,020 --> 00:22:30,550
if it does if it doesn't it's an object

417
00:22:30,550 --> 00:22:33,390
will return another seat belt wrapped

418
00:22:33,390 --> 00:22:37,240
version of that object so that you can

419
00:22:37,240 --> 00:22:40,570
get this recursively but if that

420
00:22:40,570 --> 00:22:42,460
property doesn't exist meaning that it's

421
00:22:42,460 --> 00:22:44,770
undefined or no we'll just return our

422
00:22:44,770 --> 00:22:47,620
new undefined here and if it does exist

423
00:22:47,620 --> 00:22:50,050
we'll return the property that you tried

424
00:22:50,050 --> 00:22:56,590
to get so we can create a an object here

425
00:22:56,590 --> 00:22:58,750
now using the seat belt function just a

426
00:22:58,750 --> 00:23:00,430
plane object that has some properties

427
00:23:00,430 --> 00:23:06,220
with some values seems to work fine I

428
00:23:06,220 --> 00:23:10,030
can access foo I can access this nested

429
00:23:10,030 --> 00:23:16,300
field I can access name and so on but I

430
00:23:16,300 --> 00:23:19,630
can also do this now I can access

431
00:23:19,630 --> 00:23:22,900
something that's not here and something

432
00:23:22,900 --> 00:23:25,060
other that's not here that definitely

433
00:23:25,060 --> 00:23:27,340
isn't a function call that as a function

434
00:23:27,340 --> 00:23:30,790
and then pull out something else and you

435
00:23:30,790 --> 00:23:33,160
know what function is not undefined it's

436
00:23:33,160 --> 00:23:37,330
actually a function so now you can do

437
00:23:37,330 --> 00:23:40,390
things like this so no more crashing

438
00:23:40,390 --> 00:23:45,610
you've got seat belts but as I was I was

439
00:23:45,610 --> 00:23:47,230
pretty pleased with myself this was I

440
00:23:47,230 --> 00:23:51,649
don't know 4 a.m. some

441
00:23:51,659 --> 00:23:55,929
but there's just one bump in the road

442
00:23:55,929 --> 00:24:02,110
and that is I figured so this is nice

443
00:24:02,110 --> 00:24:03,909
but I still have to use this seatbelt

444
00:24:03,909 --> 00:24:05,529
thing I don't want to do that I want

445
00:24:05,529 --> 00:24:08,139
this to be automatic so I tried to do

446
00:24:08,139 --> 00:24:13,600
this I wanted to set the prototype as a

447
00:24:13,600 --> 00:24:20,289
seatbelt object and it turns out that it

448
00:24:20,289 --> 00:24:24,159
turns out that someone smart had figured

449
00:24:24,159 --> 00:24:26,289
out that this is not good

450
00:24:26,289 --> 00:24:31,480
and now this prototype object the bottom

451
00:24:31,480 --> 00:24:33,850
level prototype is a so-called exotic

452
00:24:33,850 --> 00:24:35,950
object so you cannot override the

453
00:24:35,950 --> 00:24:38,889
prototype I even tried to look for any

454
00:24:38,889 --> 00:24:41,590
version that implemented proxies but not

455
00:24:41,590 --> 00:24:45,669
this exotic object and I even considered

456
00:24:45,669 --> 00:24:48,580
compiling my own v8 for node and then

457
00:24:48,580 --> 00:24:51,039
making this work but I figured I'm just

458
00:24:51,039 --> 00:24:52,500
too far down the rabbit hole this is

459
00:24:52,500 --> 00:24:56,379
ridiculous so I figured I'm taking it

460
00:24:56,379 --> 00:25:02,639
too far but it would have been fun so

461
00:25:02,639 --> 00:25:08,440
with this I was really sad about that

462
00:25:08,440 --> 00:25:14,399
but in conclusion you can use proxies

463
00:25:14,399 --> 00:25:16,990
for a lot of good things you can make

464
00:25:16,990 --> 00:25:20,590
really powerful abstractions and you can

465
00:25:20,590 --> 00:25:23,639
add a lot of functionality transparently

466
00:25:23,639 --> 00:25:26,350
but the bad thing is that you can also

467
00:25:26,350 --> 00:25:28,919
just mangle things completely and

468
00:25:28,919 --> 00:25:31,799
introduce a lot of magic so that

469
00:25:31,799 --> 00:25:34,149
JavaScript doesn't really behave like

470
00:25:34,149 --> 00:25:39,070
JavaScript anymore but all in all I

471
00:25:39,070 --> 00:25:41,470
think this is another great tool in your

472
00:25:41,470 --> 00:25:44,039
toolbox to build your dream interfaces

473
00:25:44,039 --> 00:25:47,649
so you should go ahead and figure out if

474
00:25:47,649 --> 00:25:49,690
you have some kind of thing you want to

475
00:25:49,690 --> 00:25:52,960
solve that just doesn't work in plain

476
00:25:52,960 --> 00:25:55,240
JavaScript you should try to see if

477
00:25:55,240 --> 00:25:58,470
proxies can help you with that and

478
00:25:58,470 --> 00:26:01,500
that's it

479
00:26:01,500 --> 00:26:08,960
[Applause]

