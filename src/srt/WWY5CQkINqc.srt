1
00:00:09,530 --> 00:00:13,110

so I guess it's a secret topic that

2
00:00:13,110 --> 00:00:15,480
that's kind of allies because I was very

3
00:00:15,480 --> 00:00:19,619
lazy and actually thinking of a topic so

4
00:00:19,619 --> 00:00:22,170
this is uh I guess kind of merge

5
00:00:22,170 --> 00:00:23,550
together three different things that are

6
00:00:23,550 --> 00:00:27,240
interesting me as of late measuring

7
00:00:27,240 --> 00:00:29,730
JavaScript performance creating

8
00:00:29,730 --> 00:00:32,579
JavaScript games and then distributing

9
00:00:32,579 --> 00:00:35,190
JavaScript test Suites I have a lot of

10
00:00:35,190 --> 00:00:37,350
slides a lot of content to cover so I'm

11
00:00:37,350 --> 00:00:39,120
going to just try and go through them as

12
00:00:39,120 --> 00:00:40,260
quickly as I can if there's any

13
00:00:40,260 --> 00:00:42,239
questions please just raise your hand

14
00:00:42,239 --> 00:00:44,820
and hopefully we can tackle um right

15
00:00:44,820 --> 00:00:49,530
away so as a mention of measuring

16
00:00:49,530 --> 00:00:51,180
accurately measuring JavaScript

17
00:00:51,180 --> 00:00:54,149
performance has been of great interest

18
00:00:54,149 --> 00:00:56,340
to me especially since I've been working

19
00:00:56,340 --> 00:00:58,670
on things like jQuery and trying to

20
00:00:58,670 --> 00:01:03,239
improve its quality so a the typical

21
00:01:03,239 --> 00:01:04,559
technique that's used for analyzing

22
00:01:04,559 --> 00:01:06,630
performance is to measure the

23
00:01:06,630 --> 00:01:07,860
performance JavaScript from within

24
00:01:07,860 --> 00:01:10,830
JavaScript itself and you use the the

25
00:01:10,830 --> 00:01:12,780
typical you know like a new date get

26
00:01:12,780 --> 00:01:14,490
time so getting the current timestamp

27
00:01:14,490 --> 00:01:16,890
and then doing some sort of diff in

28
00:01:16,890 --> 00:01:21,060
between two times that's one way to as

29
00:01:21,060 --> 00:01:23,700
our to measure performance but the

30
00:01:23,700 --> 00:01:28,770
problem is that it's it isn't

31
00:01:28,770 --> 00:01:30,479
fine-grained enough that you're

32
00:01:30,479 --> 00:01:32,549
measuring at best in a millisecond range

33
00:01:32,549 --> 00:01:34,590
but the thing is is that it can still be

34
00:01:34,590 --> 00:01:37,710
very useful for some general analysis so

35
00:01:37,710 --> 00:01:39,360
one of the things that did is I created

36
00:01:39,360 --> 00:01:42,210
a plug-in called a stack profiler for

37
00:01:42,210 --> 00:01:44,759
jquery one advantage to jquery is that

38
00:01:44,759 --> 00:01:47,909
it has a very flat api that has

39
00:01:47,909 --> 00:01:49,649
essentially one namespace and there's

40
00:01:49,649 --> 00:01:51,810
tons of methods that exist within it but

41
00:01:51,810 --> 00:01:53,880
that makes it very easy to analyze in

42
00:01:53,880 --> 00:01:56,420
the profile so in this case this is a

43
00:01:56,420 --> 00:01:58,530
it's cropped off here but it's the

44
00:01:58,530 --> 00:02:00,600
github a homepage and I stuck the

45
00:02:00,600 --> 00:02:02,670
profile or inside of it and what it does

46
00:02:02,670 --> 00:02:04,590
is it goes through an analyte and it

47
00:02:04,590 --> 00:02:08,129
clicks every single a jquery call that

48
00:02:08,129 --> 00:02:10,140
occurs within the website so in this

49
00:02:10,140 --> 00:02:12,480
case you can see that

50
00:02:12,480 --> 00:02:15,840
let me see here there's a number of

51
00:02:15,840 --> 00:02:17,129
methods a I called but there's one down

52
00:02:17,129 --> 00:02:19,080
there the end called out face box so

53
00:02:19,080 --> 00:02:21,239
it's the face box jquery plugin that's

54
00:02:21,239 --> 00:02:23,180
getting pulled in and that's taking up

55
00:02:23,180 --> 00:02:26,250
17.6 percent of the execution time on

56
00:02:26,250 --> 00:02:28,799
page load so simply the fact that they

57
00:02:28,799 --> 00:02:30,989
are including facebox slows down their

58
00:02:30,989 --> 00:02:34,530
load by almost twenty percent and so

59
00:02:34,530 --> 00:02:36,569
this tool is i think is especially

60
00:02:36,569 --> 00:02:38,579
interesting since then you can use it to

61
00:02:38,579 --> 00:02:40,049
start to dig in and get a better picture

62
00:02:40,049 --> 00:02:41,819
of where all the resources are going

63
00:02:41,819 --> 00:02:44,610
within your web page so this is

64
00:02:44,610 --> 00:02:46,560
something you can do with very basic you

65
00:02:46,560 --> 00:02:50,579
know get time analysis now the problem

66
00:02:50,579 --> 00:02:54,470
is though is that timers in javascript

67
00:02:54,470 --> 00:02:58,290
the reported time is not very accurate I

68
00:02:58,290 --> 00:02:59,220
mean if you think about it you're

69
00:02:59,220 --> 00:03:01,500
measuring the performance of JavaScript

70
00:03:01,500 --> 00:03:03,450
from within JavaScript itself and that

71
00:03:03,450 --> 00:03:06,750
is just you know there's so much room

72
00:03:06,750 --> 00:03:11,180
there for for bugs to occur and so

73
00:03:11,180 --> 00:03:13,590
something that starts to occur is so

74
00:03:13,590 --> 00:03:15,180
what we have here let me zoom in a

75
00:03:15,180 --> 00:03:18,239
little bit this is on OSX and we have

76
00:03:18,239 --> 00:03:21,720
four different browsers Opera Safari so

77
00:03:21,720 --> 00:03:23,609
for us of WebKit nightly and then

78
00:03:23,609 --> 00:03:26,069
firefox 3 and these are running some

79
00:03:26,069 --> 00:03:29,099
just some very basic tests nothing too

80
00:03:29,099 --> 00:03:31,319
complicated and we can see at the time

81
00:03:31,319 --> 00:03:33,120
is being reported out here these are

82
00:03:33,120 --> 00:03:35,310
report in times of how long each the

83
00:03:35,310 --> 00:03:37,530
test took to run so in this case there's

84
00:03:37,530 --> 00:03:41,130
a lot of them run in 0 to 1 milliseconds

85
00:03:41,130 --> 00:03:42,750
and then you have these little humps of

86
00:03:42,750 --> 00:03:44,970
however many milliseconds it takes the

87
00:03:44,970 --> 00:03:47,250
results here aren't terribly exciting or

88
00:03:47,250 --> 00:03:49,799
interesting is just what it is but what

89
00:03:49,799 --> 00:03:51,180
it when it starts to get interesting

90
00:03:51,180 --> 00:03:53,150
though is that when you look at this

91
00:03:53,150 --> 00:03:56,099
type of result and the compared against

92
00:03:56,099 --> 00:03:59,250
what you get on Windows so this is a

93
00:03:59,250 --> 00:04:01,650
very similar result or the same same

94
00:04:01,650 --> 00:04:03,810
tests but they're running on Windows XP

95
00:04:03,810 --> 00:04:07,500
in this case in an IE Opera Safari and

96
00:04:07,500 --> 00:04:10,560
then WebKit and you don't see those nice

97
00:04:10,560 --> 00:04:13,290
little curves anymore of where the

98
00:04:13,290 --> 00:04:14,819
results were coming in so because if you

99
00:04:14,819 --> 00:04:15,720
think about it if you're going to run a

100
00:04:15,720 --> 00:04:17,669
test again and again you know sometimes

101
00:04:17,669 --> 00:04:18,989
look at 10 milliseconds sometimes look

102
00:04:18,989 --> 00:04:20,789
at nine sometimes we've got 11 sometimes

103
00:04:20,789 --> 00:04:22,590
we get seven you know there's some

104
00:04:22,590 --> 00:04:24,180
fluctuation there as there should be and

105
00:04:24,180 --> 00:04:26,330
you see that very clearly and

106
00:04:26,330 --> 00:04:28,939
our site results but in the XP results

107
00:04:28,939 --> 00:04:32,300
you see that they only come in every 15

108
00:04:32,300 --> 00:04:35,120
milliseconds there is no variation there

109
00:04:35,120 --> 00:04:37,099
is no nice little humps and that's

110
00:04:37,099 --> 00:04:40,400
because of this of a problem at least

111
00:04:40,400 --> 00:04:42,259
with the most implementations on windows

112
00:04:42,259 --> 00:04:45,080
XP which is that they only update their

113
00:04:45,080 --> 00:04:48,139
timer every 15 milliseconds so it

114
00:04:48,139 --> 00:04:49,939
doesn't matter how many times you call

115
00:04:49,939 --> 00:04:53,300
get time it'll only update every 15

116
00:04:53,300 --> 00:04:54,740
milliseconds so that means if you have

117
00:04:54,740 --> 00:04:56,599
something that runs in less than 15

118
00:04:56,599 --> 00:04:58,550
milliseconds that means is always in

119
00:04:58,550 --> 00:05:01,370
report 0 and if you have event and

120
00:05:01,370 --> 00:05:03,199
sometimes maybe it will report you know

121
00:05:03,199 --> 00:05:07,099
a 16 and so if you look at you see this

122
00:05:07,099 --> 00:05:09,550
happen in a lot of different test Suites

123
00:05:09,550 --> 00:05:12,319
when this happens a lot in is the slick

124
00:05:12,319 --> 00:05:16,580
speed a CSS selector analysis sweet and

125
00:05:16,580 --> 00:05:18,379
if you run it on like internet explorer

126
00:05:18,379 --> 00:05:22,250
you see like 00000 16000 and you're like

127
00:05:22,250 --> 00:05:23,930
well this thing is so fast look at all

128
00:05:23,930 --> 00:05:25,490
the great times are getting yeah I

129
00:05:25,490 --> 00:05:27,289
average about you know two milliseconds

130
00:05:27,289 --> 00:05:29,539
total and but the thing is is that it's

131
00:05:29,539 --> 00:05:33,650
a lie and in fact that since the results

132
00:05:33,650 --> 00:05:35,779
end up getting bend like this you have a

133
00:05:35,779 --> 00:05:37,849
mass of air right in this case that you

134
00:05:37,849 --> 00:05:40,099
can expect air rates of you know 50 to

135
00:05:40,099 --> 00:05:41,599
seven hundred fifty percent on your

136
00:05:41,599 --> 00:05:46,099
results which is just horrible so it's

137
00:05:46,099 --> 00:05:49,039
something to be a very careful of the

138
00:05:49,039 --> 00:05:51,680
the better alternative is to use a

139
00:05:51,680 --> 00:05:53,419
performance tools this has talked about

140
00:05:53,419 --> 00:05:56,509
a little bit earlier especially with a

141
00:05:56,509 --> 00:05:58,759
Firebug in the Safari profiler but the

142
00:05:58,759 --> 00:06:00,740
profilers that are provided by browsers

143
00:06:00,740 --> 00:06:03,979
are definitely preferred to analyzing

144
00:06:03,979 --> 00:06:06,440
the the quality of your code within

145
00:06:06,440 --> 00:06:09,529
JavaScript itself and this is good

146
00:06:09,529 --> 00:06:11,539
because browsers have started to release

147
00:06:11,539 --> 00:06:13,789
more tools to make this easier I mean

148
00:06:13,789 --> 00:06:15,379
there's been the the Firebug profiler

149
00:06:15,379 --> 00:06:17,599
which has been around for you know some

150
00:06:17,599 --> 00:06:20,839
time now they're the new safari profiler

151
00:06:20,839 --> 00:06:24,219
it's in safari for is really good and

152
00:06:24,219 --> 00:06:27,680
it's a it's about comparable with our

153
00:06:27,680 --> 00:06:29,330
bug in some some areas and definitely

154
00:06:29,330 --> 00:06:33,229
excels and then the new I ate profiler

155
00:06:33,229 --> 00:06:35,419
and again this is uh this is something

156
00:06:35,419 --> 00:06:37,069
that's brand new it won't help you for

157
00:06:37,069 --> 00:06:39,349
i7i six but they're very least to have

158
00:06:39,349 --> 00:06:39,960
some

159
00:06:39,960 --> 00:06:42,990
sources for analyzing Internet Explorer

160
00:06:42,990 --> 00:06:44,639
JavaScript performance so all these are

161
00:06:44,639 --> 00:06:49,470
great and they're available now another

162
00:06:49,470 --> 00:06:50,960
technique that I've been going on now

163
00:06:50,960 --> 00:06:54,949
recently is instead of attempting to

164
00:06:54,949 --> 00:06:58,069
attack but performance in strict

165
00:06:58,069 --> 00:07:02,160
millisecond times are units of time is a

166
00:07:02,160 --> 00:07:03,930
look at it another way I wrote an

167
00:07:03,930 --> 00:07:06,389
extension this is actually an extension

168
00:07:06,389 --> 00:07:08,669
for Firebug which is in itself an

169
00:07:08,669 --> 00:07:11,280
extension for Firefox so it called fire

170
00:07:11,280 --> 00:07:13,710
unit and fire unit it's a primarily a

171
00:07:13,710 --> 00:07:15,690
testing framework a JavaScript testing

172
00:07:15,690 --> 00:07:17,699
framework and you can use it and you can

173
00:07:17,699 --> 00:07:20,009
run tests and log your tests results

174
00:07:20,009 --> 00:07:23,340
inside Firebug itself but what is the

175
00:07:23,340 --> 00:07:26,729
one feature that I added to it was the

176
00:07:26,729 --> 00:07:28,979
ability to get profile data now what

177
00:07:28,979 --> 00:07:31,320
this means is that in Firebug you get

178
00:07:31,320 --> 00:07:33,990
these dumps in these in these little

179
00:07:33,990 --> 00:07:36,330
tables so whenever you profile a piece

180
00:07:36,330 --> 00:07:38,699
of JavaScript code you end up with this

181
00:07:38,699 --> 00:07:40,530
table that you can sort and search

182
00:07:40,530 --> 00:07:43,289
through but that isn't very useful in

183
00:07:43,289 --> 00:07:44,490
and of itself I mean you could read the

184
00:07:44,490 --> 00:07:46,349
results and interpret them but it would

185
00:07:46,349 --> 00:07:48,539
be better to be able to programmatically

186
00:07:48,539 --> 00:07:51,479
interpret those results so what I did

187
00:07:51,479 --> 00:07:53,759
was I added a method called get profile

188
00:07:53,759 --> 00:07:56,310
another it takes that table of data and

189
00:07:56,310 --> 00:07:59,099
dumps it as a just a JSON data structure

190
00:07:59,099 --> 00:08:01,169
and now you can use that structure and

191
00:08:01,169 --> 00:08:03,120
so you have things here like iam time

192
00:08:03,120 --> 00:08:05,820
and standard deviation or not this time

193
00:08:05,820 --> 00:08:07,919
average time minimum time stuff like

194
00:08:07,919 --> 00:08:10,050
that you can use that to create other

195
00:08:10,050 --> 00:08:13,530
things this case and went through a

196
00:08:13,530 --> 00:08:16,139
number of the jQuery methods and I

197
00:08:16,139 --> 00:08:19,860
wanted to see how complex they were so

198
00:08:19,860 --> 00:08:23,070
in the case of jQuery methods act

199
00:08:23,070 --> 00:08:25,050
against a set of elements so in this

200
00:08:25,050 --> 00:08:29,159
case add class is acting against 98

201
00:08:29,159 --> 00:08:30,690
different elements i created a test page

202
00:08:30,690 --> 00:08:34,950
with 98 elements on it and so that way

203
00:08:34,950 --> 00:08:37,770
when you call add class it ends up

204
00:08:37,770 --> 00:08:41,159
calling 542 functions somewhere in

205
00:08:41,159 --> 00:08:44,670
either in jquery or elsewhere and so

206
00:08:44,670 --> 00:08:48,660
that means that for every single element

207
00:08:48,660 --> 00:08:50,370
there you're adding a class to that

208
00:08:50,370 --> 00:08:51,510
you're going to be guaranteed at least

209
00:08:51,510 --> 00:08:53,279
six function calls

210
00:08:53,279 --> 00:08:58,249
so this call it sort of a big o notation

211
00:08:58,249 --> 00:09:00,920
going back to computer science and that

212
00:09:00,920 --> 00:09:04,230
for every single time you are performing

213
00:09:04,230 --> 00:09:07,199
action how many you know at what rate

214
00:09:07,199 --> 00:09:10,470
does it um a rape at what rate doesn't

215
00:09:10,470 --> 00:09:13,949
scale so 6n isn't that bad it could

216
00:09:13,949 --> 00:09:15,870
definitely be improved I would say so

217
00:09:15,870 --> 00:09:17,370
because six functions for every single

218
00:09:17,370 --> 00:09:19,740
element but then you go down you see

219
00:09:19,740 --> 00:09:21,269
stuff like this so you have to remove

220
00:09:21,269 --> 00:09:24,420
method and that is 2n plus N squared and

221
00:09:24,420 --> 00:09:27,029
that is not good at all so that means

222
00:09:27,029 --> 00:09:29,730
that for every method it was calling n

223
00:09:29,730 --> 00:09:32,999
to the N squared times met other

224
00:09:32,999 --> 00:09:35,490
functions so that is a problem right

225
00:09:35,490 --> 00:09:36,839
there and that what's interesting though

226
00:09:36,839 --> 00:09:38,279
is that that is something that did not

227
00:09:38,279 --> 00:09:41,009
show up in my normal profiling when you

228
00:09:41,009 --> 00:09:42,149
look at normal profiling you're like

229
00:09:42,149 --> 00:09:43,709
okay the time seems pretty reasonable

230
00:09:43,709 --> 00:09:46,110
you know it doesn't seem you know that

231
00:09:46,110 --> 00:09:49,019
slow but once you you pull it out in

232
00:09:49,019 --> 00:09:50,759
this way it becomes very obvious where

233
00:09:50,759 --> 00:09:54,480
the problem is so in this case I went

234
00:09:54,480 --> 00:09:55,800
through and started to reduce complexity

235
00:09:55,800 --> 00:09:57,629
so I knew right away that remove had to

236
00:09:57,629 --> 00:10:00,120
be improved so I've worked to improve

237
00:10:00,120 --> 00:10:02,610
remove and as it turned out empty use

238
00:10:02,610 --> 00:10:07,800
remove and HTML used empty so whenever I

239
00:10:07,800 --> 00:10:09,899
ended the improvement in this case i

240
00:10:09,899 --> 00:10:13,290
went from N squared 2 just 3 n 4 remove

241
00:10:13,290 --> 00:10:15,600
method all these other methods benefited

242
00:10:15,600 --> 00:10:17,069
and they started the scale much much

243
00:10:17,069 --> 00:10:18,660
better and they perform much better and

244
00:10:18,660 --> 00:10:21,269
so in this case these are improvements

245
00:10:21,269 --> 00:10:22,769
that are becoming in the next version of

246
00:10:22,769 --> 00:10:24,959
jQuery so I think this is important

247
00:10:24,959 --> 00:10:27,300
because nowhere in these results do you

248
00:10:27,300 --> 00:10:29,970
see time there's no milliseconds being

249
00:10:29,970 --> 00:10:32,129
measured and I think this is important

250
00:10:32,129 --> 00:10:33,779
because in the case of jQuery a lot of

251
00:10:33,779 --> 00:10:36,269
the methods and jQuery are very specific

252
00:10:36,269 --> 00:10:37,920
to the jQuery style of coding and they

253
00:10:37,920 --> 00:10:39,600
can't really be compared from one

254
00:10:39,600 --> 00:10:41,850
framework to another so comparing them

255
00:10:41,850 --> 00:10:43,920
would be just Ingenuus and when the fact

256
00:10:43,920 --> 00:10:45,569
jquery just needs to be compared to

257
00:10:45,569 --> 00:10:48,089
itself in a very real way but i mean

258
00:10:48,089 --> 00:10:50,309
this isn't specific to jquery this is I

259
00:10:50,309 --> 00:10:52,290
think very a very general problem and

260
00:10:52,290 --> 00:10:53,490
that if you want to know how to make

261
00:10:53,490 --> 00:10:55,379
your code better you need to see where

262
00:10:55,379 --> 00:10:58,439
not only words performing bad but also

263
00:10:58,439 --> 00:11:03,179
when it's scaling poorly okay so any

264
00:11:03,179 --> 00:11:04,259
questions real quick before I go on and

265
00:11:04,259 --> 00:11:11,110
talk about games

266
00:11:11,120 --> 00:11:14,940
okay so another thing that I've been

267
00:11:14,940 --> 00:11:18,029
interested in lately is constructing

268
00:11:18,029 --> 00:11:21,990
JavaScript games and as it turns out I

269
00:11:21,990 --> 00:11:25,230
found to be much harder than I

270
00:11:25,230 --> 00:11:28,230
anticipated for a number of reasons now

271
00:11:28,230 --> 00:11:30,300
I think browser based games are

272
00:11:30,300 --> 00:11:34,769
especially interesting because users can

273
00:11:34,769 --> 00:11:36,540
all they have to do is type in a URL or

274
00:11:36,540 --> 00:11:38,129
click a link and they can begin playing

275
00:11:38,129 --> 00:11:41,250
instantly and it makes it really easy to

276
00:11:41,250 --> 00:11:43,680
play at work and so lots of people you

277
00:11:43,680 --> 00:11:45,269
know they'll be playing games during

278
00:11:45,269 --> 00:11:47,009
work and just open it keeping a tab when

279
00:11:47,009 --> 00:11:48,420
you know whatever and I think that's

280
00:11:48,420 --> 00:11:52,170
great I love casual gaming so one of the

281
00:11:52,170 --> 00:11:54,899
big questions is is why not flash you

282
00:11:54,899 --> 00:11:57,389
know why because there's so many browser

283
00:11:57,389 --> 00:11:58,709
based games that are developed a flash

284
00:11:58,709 --> 00:12:01,529
and I think there's a couple reasons one

285
00:12:01,529 --> 00:12:03,750
is that the the technology that using

286
00:12:03,750 --> 00:12:06,120
javascript is becoming quite quite

287
00:12:06,120 --> 00:12:07,740
portable and that not only if you

288
00:12:07,740 --> 00:12:09,750
develop it as a browser game you can

289
00:12:09,750 --> 00:12:12,269
then make it a desktop game using you

290
00:12:12,269 --> 00:12:14,670
know either titanium or air or a

291
00:12:14,670 --> 00:12:16,769
technology like that but it can also

292
00:12:16,769 --> 00:12:19,050
translate well to mobile devices you

293
00:12:19,050 --> 00:12:23,060
know on iphone pre other mobile devices

294
00:12:23,060 --> 00:12:25,800
it'll work on the wii it'll also work on

295
00:12:25,800 --> 00:12:29,250
a constrained devices like the oil pc so

296
00:12:29,250 --> 00:12:31,110
i mean javascript is very very portable

297
00:12:31,110 --> 00:12:33,060
while at the same time it's inherently

298
00:12:33,060 --> 00:12:36,630
you know it's an open technology so all

299
00:12:36,630 --> 00:12:38,189
this you know interest me a lot you know

300
00:12:38,189 --> 00:12:43,079
the ultra portability so i think that

301
00:12:43,079 --> 00:12:44,850
any game i mean this this isn't

302
00:12:44,850 --> 00:12:47,490
necessarily just JavaScript but i think

303
00:12:47,490 --> 00:12:50,040
a good browser based game should be a

304
00:12:50,040 --> 00:12:53,399
multiplayer and can't be casually

305
00:12:53,399 --> 00:12:55,860
cheated it works well everywhere and

306
00:12:55,860 --> 00:12:59,430
it's addictive now the one of the the

307
00:12:59,430 --> 00:13:00,990
major problems is that you know

308
00:13:00,990 --> 00:13:04,319
javascript itself is you know anyone can

309
00:13:04,319 --> 00:13:06,899
view this source yeah and it doesn't

310
00:13:06,899 --> 00:13:09,240
even have to be in terribly technically

311
00:13:09,240 --> 00:13:10,699
competent to be able to view this source

312
00:13:10,699 --> 00:13:13,649
and in fact anyone who has Firebug

313
00:13:13,649 --> 00:13:15,839
installed just you know go and change

314
00:13:15,839 --> 00:13:17,450
score to 1000 and then

315
00:13:17,450 --> 00:13:20,210
yes a they won so I mean JavaScript

316
00:13:20,210 --> 00:13:25,580
games are just you know hard I said but

317
00:13:25,580 --> 00:13:28,660
going back here so the III think

318
00:13:28,660 --> 00:13:30,740
multiplayer is important because it

319
00:13:30,740 --> 00:13:32,540
helps to make games really addictive and

320
00:13:32,540 --> 00:13:35,060
that the people no longer feel like

321
00:13:35,060 --> 00:13:36,920
they're alone and they want to keep

322
00:13:36,920 --> 00:13:39,440
playing more and more so I break down

323
00:13:39,440 --> 00:13:41,180
browser based games in three different

324
00:13:41,180 --> 00:13:43,730
styles strategy games intelligence games

325
00:13:43,730 --> 00:13:47,660
and accuracy games and a show how they

326
00:13:47,660 --> 00:13:50,390
work well in JavaScript or not strategy

327
00:13:50,390 --> 00:13:53,720
games they inherently they require

328
00:13:53,720 --> 00:13:55,430
strategy then created to think and to

329
00:13:55,430 --> 00:13:58,430
plan ahead and in that way it makes it

330
00:13:58,430 --> 00:14:00,800
really hard to cheat so even if someone

331
00:14:00,800 --> 00:14:02,600
was sitting there you know tinkering

332
00:14:02,600 --> 00:14:04,640
with Firebug or writing a bar or

333
00:14:04,640 --> 00:14:06,140
something it's really hard to cheat a

334
00:14:06,140 --> 00:14:07,730
strategy game since you have to be

335
00:14:07,730 --> 00:14:10,190
writing like an AI in order to to beat

336
00:14:10,190 --> 00:14:14,450
it and so then son of itself is good I

337
00:14:14,450 --> 00:14:16,490
just well there's a couple games here I

338
00:14:16,490 --> 00:14:18,560
wanted to point out this is one called

339
00:14:18,560 --> 00:14:20,930
war fish it's sort of a risk like clone

340
00:14:20,930 --> 00:14:22,610
has a little bit of JavaScript not too

341
00:14:22,610 --> 00:14:25,010
much this is other one called now online

342
00:14:25,010 --> 00:14:27,500
this one's more of a trading game yet up

343
00:14:27,500 --> 00:14:29,630
trading with partners along the nile for

344
00:14:29,630 --> 00:14:31,940
resources this one has more JavaScript I

345
00:14:31,940 --> 00:14:33,560
think they use prototype and rails

346
00:14:33,560 --> 00:14:37,310
remember correctly so both of those are

347
00:14:37,310 --> 00:14:39,350
very much strategy games but the thing

348
00:14:39,350 --> 00:14:40,760
with sarah g games that they are very

349
00:14:40,760 --> 00:14:43,970
much server-side heavy games and that

350
00:14:43,970 --> 00:14:46,670
the vast majority of the logic is taking

351
00:14:46,670 --> 00:14:49,910
place on the server and so that way it's

352
00:14:49,910 --> 00:14:51,680
it's pretty hard to cheat since the only

353
00:14:51,680 --> 00:14:53,060
way to cheetah is develop some sort of

354
00:14:53,060 --> 00:14:57,140
intelligence to play against it and but

355
00:14:57,140 --> 00:14:58,970
at the same time it's not very open you

356
00:14:58,970 --> 00:15:00,170
know people can't read it and learn from

357
00:15:00,170 --> 00:15:02,210
it and you know try to understand how

358
00:15:02,210 --> 00:15:05,120
the game works so the second type of

359
00:15:05,120 --> 00:15:07,880
game is intelligence games so as I

360
00:15:07,880 --> 00:15:09,380
mentioned that you do see a lot of

361
00:15:09,380 --> 00:15:11,570
JavaScript based strategy games this is

362
00:15:11,570 --> 00:15:13,190
definitely the most popular use case

363
00:15:13,190 --> 00:15:14,960
where you see JavaScript being used for

364
00:15:14,960 --> 00:15:17,750
a game simply because most of the logic

365
00:15:17,750 --> 00:15:20,230
is not contained within JavaScript

366
00:15:20,230 --> 00:15:25,460
strategy of intelligence games are

367
00:15:25,460 --> 00:15:27,410
usually games that are like you know

368
00:15:27,410 --> 00:15:30,170
dictionary based or number bay

369
00:15:30,170 --> 00:15:34,070
based on but the like sudoku you know

370
00:15:34,070 --> 00:15:36,290
stuff like that but the thing is is that

371
00:15:36,290 --> 00:15:38,510
this is it's very easy for people to

372
00:15:38,510 --> 00:15:41,089
casually cheat these games so in the

373
00:15:41,089 --> 00:15:43,250
case of like when the popular ones is a

374
00:15:43,250 --> 00:15:45,139
scribe euless for example and that was

375
00:15:45,139 --> 00:15:47,329
on facebook that was a flash game but

376
00:15:47,329 --> 00:15:48,829
the thing is is that anyone could sit

377
00:15:48,829 --> 00:15:50,029
there play against their friend and then

378
00:15:50,029 --> 00:15:51,470
open up a dictionary in another window

379
00:15:51,470 --> 00:15:53,480
and just sit there and spell amazing

380
00:15:53,480 --> 00:15:54,740
words that they would never be able to

381
00:15:54,740 --> 00:15:57,050
think of otherwise so again here's a

382
00:15:57,050 --> 00:15:58,670
couple games these are JavaScript once a

383
00:15:58,670 --> 00:16:00,350
weird twist is really fun it's like a

384
00:16:00,350 --> 00:16:02,120
boggle game and you spell out words

385
00:16:02,120 --> 00:16:06,260
really quickly Babel is another one this

386
00:16:06,260 --> 00:16:08,540
one is similar but it takes place over

387
00:16:08,540 --> 00:16:11,420
an entire day there's one game per day

388
00:16:11,420 --> 00:16:12,920
and everyone works together to solve the

389
00:16:12,920 --> 00:16:15,860
puzzle another thing I like about this

390
00:16:15,860 --> 00:16:17,180
one is that there's a chat room in the

391
00:16:17,180 --> 00:16:18,529
side and everyone talks and works

392
00:16:18,529 --> 00:16:20,930
together to try and solve solve the

393
00:16:20,930 --> 00:16:22,550
board and then this is by the same

394
00:16:22,550 --> 00:16:25,160
people but this is a Sudoku again with

395
00:16:25,160 --> 00:16:31,720
JavaScript so these accuracy games um

396
00:16:31,720 --> 00:16:35,690
I'm sorry okay so as you mentioned that

397
00:16:35,690 --> 00:16:40,940
accuracy games are another branch of of

398
00:16:40,940 --> 00:16:44,300
games and but they have some very

399
00:16:44,300 --> 00:16:45,649
specific requirements and that's the

400
00:16:45,649 --> 00:16:49,940
require a very low latency and that they

401
00:16:49,940 --> 00:16:51,949
have to be quick in that these are all

402
00:16:51,949 --> 00:16:54,800
games that require the user to move

403
00:16:54,800 --> 00:16:57,050
quickly to respond to specific events in

404
00:16:57,050 --> 00:16:59,449
the game and the problem here is that

405
00:16:59,449 --> 00:17:01,579
with JavaScript you have garbage

406
00:17:01,579 --> 00:17:03,800
collection cycles javascript is

407
00:17:03,800 --> 00:17:06,620
constantly trying to clean up memory and

408
00:17:06,620 --> 00:17:08,660
is taking it will cause the browser to

409
00:17:08,660 --> 00:17:11,209
freeze I'm sure many of you have seen

410
00:17:11,209 --> 00:17:12,559
this where you'll be working then

411
00:17:12,559 --> 00:17:13,939
suddenly it'll the browser of fries

412
00:17:13,939 --> 00:17:16,490
momentarily and then you know the words

413
00:17:16,490 --> 00:17:19,010
keep typing or what have you and this

414
00:17:19,010 --> 00:17:21,169
sort of stuff is absolutely killer for

415
00:17:21,169 --> 00:17:24,079
normal games since you the user can't

416
00:17:24,079 --> 00:17:26,030
you know have their the game freeze

417
00:17:26,030 --> 00:17:29,870
while they're playing so I I created one

418
00:17:29,870 --> 00:17:34,100
game I want to pull it up here create a

419
00:17:34,100 --> 00:17:42,750
little guitar hero clone may see here

420
00:17:42,760 --> 00:17:46,550
so what I did was is I oked into YouTube

421
00:17:46,550 --> 00:17:50,690
and the davidr youtube has a JavaScript

422
00:17:50,690 --> 00:17:52,970
API for the flash videos so that

423
00:17:52,970 --> 00:17:56,240
whenever you play you start playing a

424
00:17:56,240 --> 00:17:59,120
flash movie you get you get a JavaScript

425
00:17:59,120 --> 00:18:00,620
event and whenever it stops you get

426
00:18:00,620 --> 00:18:02,060
another event and then play a pilot you

427
00:18:02,060 --> 00:18:03,530
get you get you get javascript events

428
00:18:03,530 --> 00:18:06,710
for all of these so hooking into that I

429
00:18:06,710 --> 00:18:09,020
created a little game let's see if we

430
00:18:09,020 --> 00:18:13,490
can give it a try here I don't know if

431
00:18:13,490 --> 00:18:21,170
the audio is going to work it's

432
00:18:21,170 --> 00:18:34,760
ridiculously hard I I'm so bad at it

433
00:18:34,770 --> 00:18:44,790
there we go oh my god yeah so so uh when

434
00:18:44,790 --> 00:18:45,960
you see it turn white that means i'm

435
00:18:45,960 --> 00:18:49,680
getting one right yeah sorry i got one

436
00:18:49,680 --> 00:18:54,180
there yeah okay so so this is really

437
00:18:54,180 --> 00:18:57,840
hard you can see them like it ends up

438
00:18:57,840 --> 00:18:59,550
being like really really choppy and it

439
00:18:59,550 --> 00:19:03,450
just notices flying past and it's you

440
00:19:03,450 --> 00:19:05,280
know the framerate is this just too low

441
00:19:05,280 --> 00:19:06,750
in this case is just the canvas area

442
00:19:06,750 --> 00:19:10,010
here so the way I'm drawing this is um

443
00:19:10,010 --> 00:19:12,750
so yeah this is canvas i'm using the

444
00:19:12,750 --> 00:19:14,970
processing jas although this is simple

445
00:19:14,970 --> 00:19:16,080
enough that you know you don't really

446
00:19:16,080 --> 00:19:18,690
have to use anything complex but i'm

447
00:19:18,690 --> 00:19:20,940
getting the information from there's a

448
00:19:20,940 --> 00:19:24,420
game called up frets on fire for windows

449
00:19:24,420 --> 00:19:26,760
it's a guitar hero clone for windows and

450
00:19:26,760 --> 00:19:30,330
you play on your keyboard and but what's

451
00:19:30,330 --> 00:19:31,350
interesting about it has a whole

452
00:19:31,350 --> 00:19:32,990
community around it of people who make

453
00:19:32,990 --> 00:19:36,150
who take existing songs and then write

454
00:19:36,150 --> 00:19:38,940
MIDI note files so that they'll have the

455
00:19:38,940 --> 00:19:40,920
note files the midi of the midi song

456
00:19:40,920 --> 00:19:42,540
will have five notes in it for each of

457
00:19:42,540 --> 00:19:44,970
the keys you have to press and then you

458
00:19:44,970 --> 00:19:46,470
sync it up and frets on fire you can

459
00:19:46,470 --> 00:19:48,840
play your songs so what it is i wrote a

460
00:19:48,840 --> 00:19:51,750
little python program it's a midi to

461
00:19:51,750 --> 00:19:57,120
json converter so amid e is a bizarre

462
00:19:57,120 --> 00:19:59,460
format as it is so anyway you get this

463
00:19:59,460 --> 00:20:02,390
giant you just you get this JSON dump of

464
00:20:02,390 --> 00:20:05,220
MIDI notes and then if I go through and

465
00:20:05,220 --> 00:20:06,510
I'm just playing these notes and then

466
00:20:06,510 --> 00:20:08,430
sinking it up with the video now when an

467
00:20:08,430 --> 00:20:09,600
interesting side effect of this I think

468
00:20:09,600 --> 00:20:11,250
it's pretty cool is that you can scrub

469
00:20:11,250 --> 00:20:15,210
ahead and the notes will sync with it so

470
00:20:15,210 --> 00:20:17,150
since everything is synchronized here

471
00:20:17,150 --> 00:20:20,840
and I think that's pretty neat so but

472
00:20:20,840 --> 00:20:23,400
ultimately I ended up abandoning this

473
00:20:23,400 --> 00:20:24,960
game I just created as a little demo and

474
00:20:24,960 --> 00:20:26,760
actually you can find it now if you go

475
00:20:26,760 --> 00:20:28,680
to the jQuery home page and enter the

476
00:20:28,680 --> 00:20:35,430
konami code this will pop up but the so

477
00:20:35,430 --> 00:20:38,130
yeah but this is uh i was interesting i

478
00:20:38,130 --> 00:20:40,410
had i love the initial idea oh this is

479
00:20:40,410 --> 00:20:41,730
the amazing it's gonna work great but

480
00:20:41,730 --> 00:20:43,830
ultimately I I had to throw away it just

481
00:20:43,830 --> 00:20:46,320
simply could not render the notes well

482
00:20:46,320 --> 00:20:48,630
enough or fast enough and without

483
00:20:48,630 --> 00:20:50,610
that these garbage collection cycles

484
00:20:50,610 --> 00:20:53,580
just destroying the game so I thought it

485
00:20:53,580 --> 00:20:55,230
was an interesting proof of concept at

486
00:20:55,230 --> 00:21:03,360
least so yeah another thing is that at

487
00:21:03,360 --> 00:21:06,360
least in interacts for you be drawing

488
00:21:06,360 --> 00:21:08,940
using the X canvas and that has issues

489
00:21:08,940 --> 00:21:13,440
of its own so it's probably a certain

490
00:21:13,440 --> 00:21:15,300
that at least as it stands now that

491
00:21:15,300 --> 00:21:17,190
there's creating a JavaScript game is

492
00:21:17,190 --> 00:21:19,560
really hard and that no matter what

493
00:21:19,560 --> 00:21:21,840
style of game you're picking you're

494
00:21:21,840 --> 00:21:24,440
going to be hitting some roadblocks

495
00:21:24,440 --> 00:21:27,150
strategy games inherently are very slow

496
00:21:27,150 --> 00:21:29,670
and they require a communication with

497
00:21:29,670 --> 00:21:31,080
the server when the server has most a

498
00:21:31,080 --> 00:21:32,400
logic anyway you're not writing your

499
00:21:32,400 --> 00:21:33,600
game in JavaScript be running and

500
00:21:33,600 --> 00:21:35,850
something else intelligence games are

501
00:21:35,850 --> 00:21:40,050
very easily cheatable either you know

502
00:21:40,050 --> 00:21:41,760
using like a dictionary or some other

503
00:21:41,760 --> 00:21:44,490
technique and accuracy games are just

504
00:21:44,490 --> 00:21:45,960
too hard to implement like in the guitar

505
00:21:45,960 --> 00:21:47,700
hero one is this too hard at the notes

506
00:21:47,700 --> 00:21:51,000
synchronized and everything so the

507
00:21:51,000 --> 00:21:52,950
optimal game is gonna be one that's a

508
00:21:52,950 --> 00:21:55,890
combination of all of these things and

509
00:21:55,890 --> 00:21:57,870
so because of that i feel that

510
00:21:57,870 --> 00:22:00,300
javascript games can't be like other

511
00:22:00,300 --> 00:22:04,560
games in that um inherently they are

512
00:22:04,560 --> 00:22:06,720
much harder to create and have their own

513
00:22:06,720 --> 00:22:10,290
special characteristics so i wanna show

514
00:22:10,290 --> 00:22:13,130
a couple games at least that i think has

515
00:22:13,130 --> 00:22:16,790
a few JavaScript games that embody these

516
00:22:16,790 --> 00:22:21,930
values and are still fun so and also are

517
00:22:21,930 --> 00:22:24,240
easy you know can put me play quickly

518
00:22:24,240 --> 00:22:26,160
have some sort of points have a high

519
00:22:26,160 --> 00:22:27,660
score or head-to-head competition things

520
00:22:27,660 --> 00:22:31,460
like that this is one game this one's in

521
00:22:31,460 --> 00:22:33,390
JavaScript and I think I actually uses

522
00:22:33,390 --> 00:22:37,170
xjs it's called out words play and this

523
00:22:37,170 --> 00:22:39,390
is another another bottle game but the

524
00:22:39,390 --> 00:22:40,650
difference is from the other boggle

525
00:22:40,650 --> 00:22:41,460
games is that you're competing

526
00:22:41,460 --> 00:22:43,740
head-to-head with other players and so

527
00:22:43,740 --> 00:22:45,270
when you hit the page actually

528
00:22:45,270 --> 00:22:47,970
connecting via comment stream in the

529
00:22:47,970 --> 00:22:49,050
background and you're typing in your

530
00:22:49,050 --> 00:22:51,000
words and at the same time other people

531
00:22:51,000 --> 00:22:53,820
are typing their words as well and yours

532
00:22:53,820 --> 00:22:56,490
seeing who can get the higher scores at

533
00:22:56,490 --> 00:22:57,810
the end of the round it's very

534
00:22:57,810 --> 00:22:59,640
interesting it's very fun and you're

535
00:22:59,640 --> 00:23:00,930
playing head-to-head with all these

536
00:23:00,930 --> 00:23:01,860
other people

537
00:23:01,860 --> 00:23:04,260
I thought it was very interesting um

538
00:23:04,260 --> 00:23:06,840
this is a game let me pull this up this

539
00:23:06,840 --> 00:23:08,670
is one that are I created with some

540
00:23:08,670 --> 00:23:17,730
friends let's see here if you have a

541
00:23:17,730 --> 00:23:19,470
laptop feel free to pull up this URL as

542
00:23:19,470 --> 00:23:24,000
well it's it's multiplayer and it the

543
00:23:24,000 --> 00:23:25,950
game cycles every couple minutes oh and

544
00:23:25,950 --> 00:23:29,280
started right now so the way works is

545
00:23:29,280 --> 00:23:31,770
called a Tring go it's a combination of

546
00:23:31,770 --> 00:23:35,820
Tetris and bingo and the way it works is

547
00:23:35,820 --> 00:23:37,799
you you get random Tetris pieces called

548
00:23:37,799 --> 00:23:41,250
by a caller and you have to drop them

549
00:23:41,250 --> 00:23:45,570
and get 2 by 2 2 by 3 or 3 by 3 squares

550
00:23:45,570 --> 00:23:47,490
and when you do so in this case I'm

551
00:23:47,490 --> 00:23:48,990
going to drop one here and that's gonna

552
00:23:48,990 --> 00:23:51,690
get me a 2 by 3 there's no pretty

553
00:23:51,690 --> 00:23:53,549
visualizations yet but the premise is

554
00:23:53,549 --> 00:23:55,919
there so the thing is that if anyone

555
00:23:55,919 --> 00:23:58,230
else opens up the URL they'll be playing

556
00:23:58,230 --> 00:23:59,940
the same as that game at the same exact

557
00:23:59,940 --> 00:24:01,500
time and we'll all be competing

558
00:24:01,500 --> 00:24:05,100
head-to-head for scores so I think it

559
00:24:05,100 --> 00:24:06,960
this is an interesting i think it is

560
00:24:06,960 --> 00:24:08,100
pretty interesting it could probably it

561
00:24:08,100 --> 00:24:09,320
definitely could use some improvement

562
00:24:09,320 --> 00:24:11,970
but it's a it's a different style of

563
00:24:11,970 --> 00:24:15,179
game that may work well in the

564
00:24:15,179 --> 00:24:16,919
JavaScript space obviously everything

565
00:24:16,919 --> 00:24:19,049
here is created with JavaScript the back

566
00:24:19,049 --> 00:24:20,880
end is incredibly simple it's just

567
00:24:20,880 --> 00:24:22,650
sticking stuff and I think it's in even

568
00:24:22,650 --> 00:24:27,059
in a flat file its really crude yeah so

569
00:24:27,059 --> 00:24:28,590
I think that this is one type of game

570
00:24:28,590 --> 00:24:30,660
that may have potential in that sense

571
00:24:30,660 --> 00:24:31,679
everyone's playing the same thing at the

572
00:24:31,679 --> 00:24:33,059
same time there's a sense of competition

573
00:24:33,059 --> 00:24:37,940
there a really good challenge okay

574
00:24:37,940 --> 00:24:40,679
another game that I've been working on

575
00:24:40,679 --> 00:24:45,540
is called a deeply and this is one it

576
00:24:45,540 --> 00:24:49,049
ended up accidentally leaking out about

577
00:24:49,049 --> 00:24:51,240
two weekends ago I threw up a URL for a

578
00:24:51,240 --> 00:24:52,650
friend and then it got spread around and

579
00:24:52,650 --> 00:24:54,419
then a hit stumbleupon and then I went

580
00:24:54,419 --> 00:24:57,960
crazy and so this one is sort of like

581
00:24:57,960 --> 00:25:01,320
scrabble but with a speed aspect I'll

582
00:25:01,320 --> 00:25:03,330
pull it up here to show you and I think

583
00:25:03,330 --> 00:25:05,370
this is another type of game that could

584
00:25:05,370 --> 00:25:08,160
work very well at which I usually just

585
00:25:08,160 --> 00:25:11,779
JavaScript all right let's see here

586
00:25:11,779 --> 00:25:14,029
okay so in this case its social edge

587
00:25:14,029 --> 00:25:16,159
grab we have tiles but the the towels

588
00:25:16,159 --> 00:25:17,869
are constantly dropping so you're

589
00:25:17,869 --> 00:25:21,349
working against the clock in order to

590
00:25:21,349 --> 00:25:24,409
make sure that you nothing I'll show you

591
00:25:24,409 --> 00:25:27,529
what happens here so you see the letters

592
00:25:27,529 --> 00:25:29,269
turning red ants about the drop-off and

593
00:25:29,269 --> 00:25:32,330
when you do you you lose points so

594
00:25:32,330 --> 00:25:36,590
you're trying to work quickly sooo

595
00:25:36,590 --> 00:25:41,509
pumped right so you spell words and

596
00:25:41,509 --> 00:25:42,979
you're working against the clock here

597
00:25:42,979 --> 00:25:46,460
and a very competitive way well so each

598
00:25:46,460 --> 00:25:48,679
game has a unique ID and you can share

599
00:25:48,679 --> 00:25:51,409
your games with each other and in

600
00:25:51,409 --> 00:25:53,749
challenge other people to play specific

601
00:25:53,749 --> 00:25:57,830
game let's see so one of another thing

602
00:25:57,830 --> 00:25:58,909
that I've worked in this game is kind of

603
00:25:58,909 --> 00:26:00,739
hard to see but the more consecutive

604
00:26:00,739 --> 00:26:02,899
words you get right it's sort of like a

605
00:26:02,899 --> 00:26:04,609
guitar hero and that the more kasai

606
00:26:04,609 --> 00:26:06,169
towards get right to hire multiplier

607
00:26:06,169 --> 00:26:09,200
gets so yeah if there was someone

608
00:26:09,200 --> 00:26:11,359
spelled some ridiculous words like oh

609
00:26:11,359 --> 00:26:15,080
yeah equivocally and this thought it's

610
00:26:15,080 --> 00:26:16,460
like one of the last words ended up

611
00:26:16,460 --> 00:26:18,739
getting like almost three thousand

612
00:26:18,739 --> 00:26:21,950
points for the word is ridiculous so I

613
00:26:21,950 --> 00:26:24,559
think I think this is a game that that I

614
00:26:24,559 --> 00:26:27,080
think has some potential I brought a

615
00:26:27,080 --> 00:26:28,999
designer on board i'm going to make it

616
00:26:28,999 --> 00:26:33,679
not look really bad but yeah so i think

617
00:26:33,679 --> 00:26:37,879
um another thing that I'm doing is to to

618
00:26:37,879 --> 00:26:40,249
prevent cheating so I accepted this

619
00:26:40,249 --> 00:26:42,379
there's two types of cheating there is

620
00:26:42,379 --> 00:26:46,009
sort of the the outright blatant

621
00:26:46,009 --> 00:26:47,809
cheating so let that's the changing

622
00:26:47,809 --> 00:26:51,200
score to 1,000 cheating you know and I

623
00:26:51,200 --> 00:26:53,239
want to be able to prevent that but at

624
00:26:53,239 --> 00:26:54,710
the same time I don't want to exclude

625
00:26:54,710 --> 00:26:57,919
people who write you know in a bot or an

626
00:26:57,919 --> 00:26:59,739
artificial intelligence to play the game

627
00:26:59,739 --> 00:27:02,389
because I mean if you're doing that then

628
00:27:02,389 --> 00:27:04,759
good for you that's pretty hard to do

629
00:27:04,759 --> 00:27:09,859
anyway so to combat blatant cheating

630
00:27:09,859 --> 00:27:11,989
what I'm doing is is that every single

631
00:27:11,989 --> 00:27:15,139
move and the game is recorded and sent

632
00:27:15,139 --> 00:27:16,969
back to the server and then saved and

633
00:27:16,969 --> 00:27:19,879
when that occurs of the server then

634
00:27:19,879 --> 00:27:22,220
after all that said and done the server

635
00:27:22,220 --> 00:27:24,200
takes all these moves and then goes back

636
00:27:24,200 --> 00:27:25,850
through and plays a single

637
00:27:25,850 --> 00:27:28,549
asian of the game over again so it takes

638
00:27:28,549 --> 00:27:30,200
each of the moves the specific time and

639
00:27:30,200 --> 00:27:31,850
it says all right at this time these

640
00:27:31,850 --> 00:27:33,440
letters were played yeah was that a

641
00:27:33,440 --> 00:27:35,360
valid move at that time and then goes to

642
00:27:35,360 --> 00:27:37,850
in checks each each individual move now

643
00:27:37,850 --> 00:27:40,299
what's interesting about this is that

644
00:27:40,299 --> 00:27:42,950
this is a case where you can use server

645
00:27:42,950 --> 00:27:45,140
side JavaScript to verify the integrity

646
00:27:45,140 --> 00:27:46,910
of the input coming in from the client

647
00:27:46,910 --> 00:27:50,510
side and so one of the one of the things

648
00:27:50,510 --> 00:27:52,700
I did to make this possible is I

649
00:27:52,700 --> 00:27:55,270
actually used a random number generator

650
00:27:55,270 --> 00:27:57,890
that what that wasn't the browser's

651
00:27:57,890 --> 00:27:59,809
built-in random number generator it was

652
00:27:59,809 --> 00:28:02,419
it's one that's it's predictable we can

653
00:28:02,419 --> 00:28:04,400
all if you put in the same seed you'll

654
00:28:04,400 --> 00:28:06,169
always get the same result but that way

655
00:28:06,169 --> 00:28:08,090
I can run the same simulation on the

656
00:28:08,090 --> 00:28:11,090
client and on the server and verify the

657
00:28:11,090 --> 00:28:13,669
results what I think is pretty cool one

658
00:28:13,669 --> 00:28:15,380
good side effect of this go of this

659
00:28:15,380 --> 00:28:17,330
though is that since I'm saving every

660
00:28:17,330 --> 00:28:19,610
single move that the user is doing I can

661
00:28:19,610 --> 00:28:21,919
use those individual moves and I can

662
00:28:21,919 --> 00:28:24,320
play them back so like for example let's

663
00:28:24,320 --> 00:28:27,230
say what going on at the screen like

664
00:28:27,230 --> 00:28:28,490
while you were playing on this side

665
00:28:28,490 --> 00:28:30,500
there there were you can see other

666
00:28:30,500 --> 00:28:34,010
players you know making scores and then

667
00:28:34,010 --> 00:28:36,200
moving up automatically what's

668
00:28:36,200 --> 00:28:37,970
interesting is that that could be

669
00:28:37,970 --> 00:28:39,500
simulated that could be created without

670
00:28:39,500 --> 00:28:41,419
the other players actually playing at

671
00:28:41,419 --> 00:28:43,850
the same time since i since they're all

672
00:28:43,850 --> 00:28:45,860
their moves are recorded the server

673
00:28:45,860 --> 00:28:48,260
could play them back and so what you're

674
00:28:48,260 --> 00:28:49,520
actually doing is a playing against the

675
00:28:49,520 --> 00:28:52,700
ghosts of people who were playing which

676
00:28:52,700 --> 00:28:54,350
I think would be pretty cool since the

677
00:28:54,350 --> 00:28:56,419
players don't necessarily know that yeah

678
00:28:56,419 --> 00:28:58,250
there to see other people challenging

679
00:28:58,250 --> 00:28:59,539
them at the same exact time and they're

680
00:28:59,539 --> 00:29:00,890
frantic and they want to keep going and

681
00:29:00,890 --> 00:29:03,320
get better scores but the same time

682
00:29:03,320 --> 00:29:05,179
those people don't actually exist and

683
00:29:05,179 --> 00:29:07,130
they played maybe you know five days ago

684
00:29:07,130 --> 00:29:10,190
so it doesn't really matter but I think

685
00:29:10,190 --> 00:29:14,679
that's pretty interesting in our self oh

686
00:29:14,679 --> 00:29:17,510
so another thing I think is interesting

687
00:29:17,510 --> 00:29:19,070
bout de little shape in particular is

688
00:29:19,070 --> 00:29:21,260
that it's not inherently an English game

689
00:29:21,260 --> 00:29:24,320
most scrabble games are just only

690
00:29:24,320 --> 00:29:27,919
English and in this case what I'm

691
00:29:27,919 --> 00:29:29,419
pulling the dictionary in from open

692
00:29:29,419 --> 00:29:31,309
office and I can actually poured it to

693
00:29:31,309 --> 00:29:32,900
another language like Spanish or French

694
00:29:32,900 --> 00:29:36,440
in a matter of seconds so it's really

695
00:29:36,440 --> 00:29:37,720
quite cool

696
00:29:37,720 --> 00:29:40,730
okay so before i move the next topic any

697
00:29:40,730 --> 00:29:44,330
questions I kind of moving frantically

698
00:29:44,330 --> 00:29:46,610
through all these various different

699
00:29:46,610 --> 00:29:49,700
topics you said before they didn't want

700
00:29:49,700 --> 00:29:51,380
to have a bunch of state logic on the

701
00:29:51,380 --> 00:29:53,120
server to so that people can view source

702
00:29:53,120 --> 00:29:57,100
and tested but it isn't your work aid

703
00:29:57,100 --> 00:29:59,030
how do you make sure people are

704
00:29:59,030 --> 00:30:01,240
achieving you replay it later and just

705
00:30:01,240 --> 00:30:05,240
mark to get our decision so so the thing

706
00:30:05,240 --> 00:30:09,280
is is that the the code to verify the

707
00:30:09,280 --> 00:30:11,900
cheating or not is the same exact

708
00:30:11,900 --> 00:30:14,720
client-side code I'm is the server all

709
00:30:14,720 --> 00:30:16,010
the server is going to do is it's just

710
00:30:16,010 --> 00:30:18,470
going to have a very minimal driver to

711
00:30:18,470 --> 00:30:21,220
it where it's just going to you know

712
00:30:21,220 --> 00:30:24,440
push you know say at this time these

713
00:30:24,440 --> 00:30:26,480
keys were pressed and then it will just

714
00:30:26,480 --> 00:30:29,240
try to play the game again so in fact

715
00:30:29,240 --> 00:30:31,090
it's going to use the same exact

716
00:30:31,090 --> 00:30:33,410
client-side files to create that

717
00:30:33,410 --> 00:30:37,730
simulation so in that way it's um there

718
00:30:37,730 --> 00:30:39,860
is no significant extra logic like the

719
00:30:39,860 --> 00:30:41,660
game logic isn't on the server side

720
00:30:41,660 --> 00:30:44,360
that's all in the client side the only

721
00:30:44,360 --> 00:30:45,920
other logic is you know determining if

722
00:30:45,920 --> 00:30:47,180
something is in the dictionary or not

723
00:30:47,180 --> 00:30:49,220
but again I mean that's not something

724
00:30:49,220 --> 00:30:50,660
back and I can put the entire dictionary

725
00:30:50,660 --> 00:30:53,990
up I mean but I mean that that's not I

726
00:30:53,990 --> 00:30:57,110
don't think that's significant logic at

727
00:30:57,110 --> 00:30:58,520
least you know if people want to know

728
00:30:58,520 --> 00:31:00,290
how the game works they can view the

729
00:31:00,290 --> 00:31:06,290
full source and understand that external

730
00:31:06,290 --> 00:31:09,620
with mobile beeps epoch electrons both

731
00:31:09,620 --> 00:31:11,270
the devices you doing just browse the

732
00:31:11,270 --> 00:31:12,890
basic ones currently assume just hot

733
00:31:12,890 --> 00:31:15,050
cross buns but once i reach mobiles

734
00:31:15,050 --> 00:31:17,090
evening located notable if you have to

735
00:31:17,090 --> 00:31:19,100
avenge this place Hank can ask you

736
00:31:19,100 --> 00:31:20,750
something special I have not

737
00:31:20,750 --> 00:31:22,670
experimented with that in particular

738
00:31:22,670 --> 00:31:26,270
this game were deeply Paz right now

739
00:31:26,270 --> 00:31:29,960
works on the iphone I can pull it up and

740
00:31:29,960 --> 00:31:32,690
I can sit there and gameplay but I have

741
00:31:32,690 --> 00:31:35,900
not looked at incorporating other things

742
00:31:35,900 --> 00:31:37,430
like geolocation and stuff like that

743
00:31:37,430 --> 00:31:41,240
that'd be interesting absolutely if it's

744
00:31:41,240 --> 00:31:42,830
probably be easier I'm sure that'll be

745
00:31:42,830 --> 00:31:44,750
probably talked about tomorrow phonegap

746
00:31:44,750 --> 00:31:49,549
gets hot talk about

747
00:31:49,559 --> 00:31:54,279
okay so to my last type of care I want

748
00:31:54,279 --> 00:31:56,860
to talk a little bit about distributed

749
00:31:56,860 --> 00:32:01,840
JavaScript testing but before I go into

750
00:32:01,840 --> 00:32:03,490
that there's one thing I want to talk

751
00:32:03,490 --> 00:32:06,700
about which is determining the browsers

752
00:32:06,700 --> 00:32:12,779
that you want to support you every

753
00:32:12,779 --> 00:32:15,130
developer and every corporation that

754
00:32:15,130 --> 00:32:18,279
does web development has to make some

755
00:32:18,279 --> 00:32:20,230
sort of determination as to what

756
00:32:20,230 --> 00:32:21,700
browsers they're going to support in

757
00:32:21,700 --> 00:32:24,899
their application so either this is um

758
00:32:24,899 --> 00:32:27,850
you know all companies have to sort of

759
00:32:27,850 --> 00:32:29,559
you know draw their line in the sand

760
00:32:29,559 --> 00:32:31,779
somewhere let me say you know we're

761
00:32:31,779 --> 00:32:33,159
going to support I sick we're not going

762
00:32:33,159 --> 00:32:35,679
to support IE five we will support I 51

763
00:32:35,679 --> 00:32:37,720
support IE for the line has to be drawn

764
00:32:37,720 --> 00:32:40,450
at some specific point the way I usually

765
00:32:40,450 --> 00:32:43,559
recommend do that is making some sort of

766
00:32:43,559 --> 00:32:46,990
cost-benefit analysis so this case the

767
00:32:46,990 --> 00:32:49,299
cost is the amount of time required to

768
00:32:49,299 --> 00:32:52,299
develop your application and

769
00:32:52,299 --> 00:32:54,549
specifically the amount of cost required

770
00:32:54,549 --> 00:32:57,460
to support a specific browser the

771
00:32:57,460 --> 00:32:59,380
benefit is how much market share you

772
00:32:59,380 --> 00:33:01,289
could gain from supporting that browser

773
00:33:01,289 --> 00:33:06,000
so I mean this is just a a markup that I

774
00:33:06,000 --> 00:33:09,130
mock-up that I did here now the thing is

775
00:33:09,130 --> 00:33:11,890
though is that just because in this case

776
00:33:11,890 --> 00:33:15,640
the cost of ie the cost of ie6 outweighs

777
00:33:15,640 --> 00:33:17,710
the benefit does that mean you shouldn't

778
00:33:17,710 --> 00:33:20,260
support it obviously obviously since it

779
00:33:20,260 --> 00:33:22,809
still consumes a large amount of year in

780
00:33:22,809 --> 00:33:27,309
this case market share so again this is

781
00:33:27,309 --> 00:33:30,789
I think a good first step to determining

782
00:33:30,789 --> 00:33:33,159
you where exactly what browsers you want

783
00:33:33,159 --> 00:33:34,419
to support but from there you kind of

784
00:33:34,419 --> 00:33:36,039
have to build and make a smart

785
00:33:36,039 --> 00:33:40,450
determination so uh Yahoo I like what

786
00:33:40,450 --> 00:33:42,520
they've done in that they've they've

787
00:33:42,520 --> 00:33:44,080
drawn their line in the sand and they

788
00:33:44,080 --> 00:33:45,820
say these are the browser will support

789
00:33:45,820 --> 00:33:48,490
on these platforms and you know they

790
00:33:48,490 --> 00:33:50,770
make it and you know very specific and

791
00:33:50,770 --> 00:33:53,320
very public and I like this this is I

792
00:33:53,320 --> 00:33:58,360
think a very smart strategy jquery we do

793
00:33:58,360 --> 00:34:00,520
it similarly but a little bit

794
00:34:00,520 --> 00:34:01,380
differently

795
00:34:01,380 --> 00:34:06,120
in that um we tend to so yahoo basis

796
00:34:06,120 --> 00:34:09,030
there's mostly on market share and that

797
00:34:09,030 --> 00:34:10,980
once a browser drops off significant

798
00:34:10,980 --> 00:34:12,450
amount of market share they just won't

799
00:34:12,450 --> 00:34:14,940
support it anymore or at least not as a

800
00:34:14,940 --> 00:34:18,450
a great browser for jquery what we do is

801
00:34:18,450 --> 00:34:20,940
we tend to support the current release

802
00:34:20,940 --> 00:34:23,250
of a browser the previous release and

803
00:34:23,250 --> 00:34:24,929
then the next release the upcoming

804
00:34:24,929 --> 00:34:28,649
release so this leads to results that

805
00:34:28,649 --> 00:34:29,879
look something like this and the

806
00:34:29,879 --> 00:34:33,210
previous release jquery these were the

807
00:34:33,210 --> 00:34:35,250
browsers that we ended up supporting

808
00:34:35,250 --> 00:34:37,919
Foley we in that in that when we say

809
00:34:37,919 --> 00:34:41,040
support Foley that before we publish

810
00:34:41,040 --> 00:34:42,960
before we release the final wheel

811
00:34:42,960 --> 00:34:44,730
version the test suite is a hundred

812
00:34:44,730 --> 00:34:47,580
percent passing in all of these so in

813
00:34:47,580 --> 00:34:50,220
this case this is a lot of browsers we

814
00:34:50,220 --> 00:34:52,169
have one two three four five six seven

815
00:34:52,169 --> 00:34:54,200
eight nine ten eleven different browsers

816
00:34:54,200 --> 00:34:57,360
and that's not including older versions

817
00:34:57,360 --> 00:35:00,120
of opera and then the beta version beta

818
00:35:00,120 --> 00:35:02,490
version was kind of rocky and then in

819
00:35:02,490 --> 00:35:04,400
this case a really old version of Safari

820
00:35:04,400 --> 00:35:07,200
but that's a large number of browsers

821
00:35:07,200 --> 00:35:10,230
and you know this is a pretty you know

822
00:35:10,230 --> 00:35:13,440
universal problem in that if you want to

823
00:35:13,440 --> 00:35:14,850
make sure your JavaScript code works

824
00:35:14,850 --> 00:35:17,370
well you have to test it in a lot of

825
00:35:17,370 --> 00:35:18,870
browsers and probably in a lot of

826
00:35:18,870 --> 00:35:21,840
browsers on a lot of platforms in the

827
00:35:21,840 --> 00:35:26,340
case of jQuery we're up to the number of

828
00:35:26,340 --> 00:35:27,780
tests means that we have to run is

829
00:35:27,780 --> 00:35:31,020
starting to grow dramatically so like we

830
00:35:31,020 --> 00:35:35,040
have our main test suite which is an

831
00:35:35,040 --> 00:35:37,440
HTML webpage served in standards mode

832
00:35:37,440 --> 00:35:39,150
but we're going to have another version

833
00:35:39,150 --> 00:35:41,220
that is HL pays certain quirks mode

834
00:35:41,220 --> 00:35:43,680
another one that is HTML pays served

835
00:35:43,680 --> 00:35:46,800
with sorry an XHTML page serve with a

836
00:35:46,800 --> 00:35:48,900
proper mime type XHTML serve without a

837
00:35:48,900 --> 00:35:50,880
proper mine type and then so I mean you

838
00:35:50,880 --> 00:35:52,290
start to permute these different types

839
00:35:52,290 --> 00:35:54,810
out and then another version that

840
00:35:54,810 --> 00:35:56,700
includes other frameworks and to make

841
00:35:56,700 --> 00:35:57,750
sure we don't conflict with our

842
00:35:57,750 --> 00:36:00,240
frameworks it really starts to add up in

843
00:36:00,240 --> 00:36:01,470
that all we have all these different

844
00:36:01,470 --> 00:36:02,820
frameworks that we are all sorry all

845
00:36:02,820 --> 00:36:04,470
these different test Suites we need to

846
00:36:04,470 --> 00:36:05,850
run and we're going to make sure that

847
00:36:05,850 --> 00:36:09,210
jQuery works properly not only that that

848
00:36:09,210 --> 00:36:11,130
we have two one in just a ton of

849
00:36:11,130 --> 00:36:14,100
browsers there's no way that one person

850
00:36:14,100 --> 00:36:15,470
after or say

851
00:36:15,470 --> 00:36:17,840
after or before every commit is going to

852
00:36:17,840 --> 00:36:19,760
sit down and run six test Suites and

853
00:36:19,760 --> 00:36:21,590
eleven different browsers it's just not

854
00:36:21,590 --> 00:36:23,510
going to happen you know stuff slips

855
00:36:23,510 --> 00:36:28,730
through the cracks so ideally all the

856
00:36:28,730 --> 00:36:30,680
test suites are going to be run in all

857
00:36:30,680 --> 00:36:33,770
the browsers on every commit and even if

858
00:36:33,770 --> 00:36:35,090
it was designed optimally on every

859
00:36:35,090 --> 00:36:37,160
commit for every patch and for every

860
00:36:37,160 --> 00:36:40,250
plugin so this way you could have a new

861
00:36:40,250 --> 00:36:44,510
very solid knowledge of how your code

862
00:36:44,510 --> 00:36:47,330
base is working but the thing is is that

863
00:36:47,330 --> 00:36:48,800
at least in this current this current

864
00:36:48,800 --> 00:36:51,349
state javascript testing doesn't scale

865
00:36:51,349 --> 00:36:54,109
well so this is a problem that's been

866
00:36:54,109 --> 00:36:57,530
bothering me lately so one thing I've

867
00:36:57,530 --> 00:36:59,030
been looking at is the concept of

868
00:36:59,030 --> 00:37:01,880
distributed testing so being able to

869
00:37:01,880 --> 00:37:04,099
take a test suite and distribute it out

870
00:37:04,099 --> 00:37:07,609
to a number of computers and have them

871
00:37:07,609 --> 00:37:08,900
run the tests and then return the

872
00:37:08,900 --> 00:37:12,440
results so in this way I call this

873
00:37:12,440 --> 00:37:15,380
project test warm and the structure is

874
00:37:15,380 --> 00:37:17,660
is relatively simple there's there's the

875
00:37:17,660 --> 00:37:21,020
core hub server and all the clients come

876
00:37:21,020 --> 00:37:23,089
they connect to the server they've asked

877
00:37:23,089 --> 00:37:24,740
for new tests and they run the tests we

878
00:37:24,740 --> 00:37:28,400
turn the results and one thing I like

879
00:37:28,400 --> 00:37:29,810
about this in particular is that it can

880
00:37:29,810 --> 00:37:32,240
even be run in mobile browsers so you

881
00:37:32,240 --> 00:37:34,790
can load up a mobile device and open it

882
00:37:34,790 --> 00:37:37,369
there one thing we've been looking at is

883
00:37:37,369 --> 00:37:39,890
a so for example nokia is using jquery

884
00:37:39,890 --> 00:37:43,220
and so we were looking at the problem

885
00:37:43,220 --> 00:37:45,940
you know how do we test against you know

886
00:37:45,940 --> 00:37:49,070
physical nokia devices well make sure we

887
00:37:49,070 --> 00:37:50,780
don't want to run in a simulator we want

888
00:37:50,780 --> 00:37:52,280
to make sure that the code works on an

889
00:37:52,280 --> 00:37:53,390
actual device because there's always

890
00:37:53,390 --> 00:37:57,170
weird differences there so that we're

891
00:37:57,170 --> 00:37:58,580
talking to nokia they're like well we

892
00:37:58,580 --> 00:38:01,220
have tons of phones i mean we have more

893
00:38:01,220 --> 00:38:02,660
phones than we could possibly want and

894
00:38:02,660 --> 00:38:05,180
we're like well that's good so one of

895
00:38:05,180 --> 00:38:06,530
the things we're going to do now is we

896
00:38:06,530 --> 00:38:08,599
could just take like 10 phones connect

897
00:38:08,599 --> 00:38:11,119
them all to test warm and have them all

898
00:38:11,119 --> 00:38:12,830
just wanting the test suites that we can

899
00:38:12,830 --> 00:38:14,570
push to them so this way that someone

900
00:38:14,570 --> 00:38:15,800
doesn't have to sit there and physically

901
00:38:15,800 --> 00:38:17,390
fiddle with the device and load the test

902
00:38:17,390 --> 00:38:18,859
suite or whatever able to this all

903
00:38:18,859 --> 00:38:22,339
happen automatically assume that if we

904
00:38:22,339 --> 00:38:23,390
were really rich we'd have a whole bunch

905
00:38:23,390 --> 00:38:24,980
of iPhones as well we can just run it I

906
00:38:24,980 --> 00:38:25,400
guess

907
00:38:25,400 --> 00:38:27,410
but for now maybe there's a simulator

908
00:38:27,410 --> 00:38:30,260
will work so this is sort of the basic

909
00:38:30,260 --> 00:38:32,450
structure and that you have the the core

910
00:38:32,450 --> 00:38:34,940
test forum server the whole bunch of

911
00:38:34,940 --> 00:38:36,380
clients connect to it from a whole bunch

912
00:38:36,380 --> 00:38:38,120
of different browsers you push test

913
00:38:38,120 --> 00:38:39,860
Suites to it test Suites get set out to

914
00:38:39,860 --> 00:38:41,000
the clients and then come back the

915
00:38:41,000 --> 00:38:46,160
results come back let me I'm going to

916
00:38:46,160 --> 00:38:47,990
try and do a live demo let's see how

917
00:38:47,990 --> 00:38:54,020
this works so this is a the main page of

918
00:38:54,020 --> 00:38:56,120
test form here let me just see it reload

919
00:38:56,120 --> 00:38:59,840
and see how it looks so we can see here

920
00:38:59,840 --> 00:39:02,060
these are the browsers so we have chrome

921
00:39:02,060 --> 00:39:04,100
firefox internet explorer Opera Safari

922
00:39:04,100 --> 00:39:06,740
and the little red number is how many

923
00:39:06,740 --> 00:39:08,510
clients are Colonel connect it's only a

924
00:39:08,510 --> 00:39:10,820
few clients right now some of them are

925
00:39:10,820 --> 00:39:12,470
my clients here locally on this machine

926
00:39:12,470 --> 00:39:14,750
summer on a machine back at home it just

927
00:39:14,750 --> 00:39:17,110
kind of spread out at the moment and

928
00:39:17,110 --> 00:39:19,370
this way so you can sort of see get a

929
00:39:19,370 --> 00:39:22,220
picture of like how did the health of

930
00:39:22,220 --> 00:39:25,850
the swarm at the moment so one of the

931
00:39:25,850 --> 00:39:28,910
things i want to do here is this is the

932
00:39:28,910 --> 00:39:31,820
page to submit a new job and that you

933
00:39:31,820 --> 00:39:36,320
can a resolution you can name your job

934
00:39:36,320 --> 00:39:39,020
and submit it say how many times you

935
00:39:39,020 --> 00:39:41,120
want to run if you want to have multiple

936
00:39:41,120 --> 00:39:43,730
run multiple times in this case and then

937
00:39:43,730 --> 00:39:46,580
you can you can write out say list all

938
00:39:46,580 --> 00:39:47,930
your tests feats that you want to run

939
00:39:47,930 --> 00:39:50,150
one of the things that I did is I took

940
00:39:50,150 --> 00:39:51,980
the jQuery test suite the jQuery Destry

941
00:39:51,980 --> 00:39:54,110
is broken up with sub modules what I'm

942
00:39:54,110 --> 00:39:55,880
doing is I'm running each sub module

943
00:39:55,880 --> 00:39:58,490
individually and I'll show you why in a

944
00:39:58,490 --> 00:40:01,750
second so I'm going to submit this to

945
00:40:01,750 --> 00:40:07,190
test form and it presents me with this

946
00:40:07,190 --> 00:40:09,110
page and we'll probably start to get

947
00:40:09,110 --> 00:40:11,930
results here within a few seconds there

948
00:40:11,930 --> 00:40:14,260
we go I you stick to the first on board

949
00:40:14,260 --> 00:40:17,030
yellow means it's running so you can see

950
00:40:17,030 --> 00:40:18,880
there's 2i you six instances connected

951
00:40:18,880 --> 00:40:22,760
in this case operas 96 was the first one

952
00:40:22,760 --> 00:40:26,180
to get something to pass and you see the

953
00:40:26,180 --> 00:40:28,940
results to start to trickle in here so a

954
00:40:28,940 --> 00:40:30,580
couple browsers haven't connected the

955
00:40:30,580 --> 00:40:33,110
clients ping the server every 30 seconds

956
00:40:33,110 --> 00:40:34,850
or so so the more clients that are

957
00:40:34,850 --> 00:40:37,010
connected the more likely in

958
00:40:37,010 --> 00:40:40,400
need to have this finish quickly so one

959
00:40:40,400 --> 00:40:42,770
thing here is that a notice no fire box

960
00:40:42,770 --> 00:40:44,480
three tests running that's because

961
00:40:44,480 --> 00:40:47,300
there's no firefox 3 client connected so

962
00:40:47,300 --> 00:40:48,410
i'll connect here I'll show you what

963
00:40:48,410 --> 00:40:50,810
it's like to join the swarm I'll put in

964
00:40:50,810 --> 00:40:53,480
my username and I'll say join it's very

965
00:40:53,480 --> 00:40:55,580
crude right now you can see that it just

966
00:40:55,580 --> 00:40:57,740
goes connects and it's literally running

967
00:40:57,740 --> 00:41:01,940
an iframe it's nothing that fancy and it

968
00:41:01,940 --> 00:41:03,470
takes results that runs it when it

969
00:41:03,470 --> 00:41:05,450
completes it sends real results back to

970
00:41:05,450 --> 00:41:07,250
the server and it just wanted sounded

971
00:41:07,250 --> 00:41:09,440
queries the server back again but we can

972
00:41:09,440 --> 00:41:10,610
jump back over here and we can see the

973
00:41:10,610 --> 00:41:12,830
firefox 3 starting the results are

974
00:41:12,830 --> 00:41:14,600
starting to come in here so you start to

975
00:41:14,600 --> 00:41:17,660
see some passes so again you can start

976
00:41:17,660 --> 00:41:19,790
all this in a trickle in and it doesn't

977
00:41:19,790 --> 00:41:22,370
take that long maybe a minute or so and

978
00:41:22,370 --> 00:41:23,930
this is like with like one client

979
00:41:23,930 --> 00:41:26,810
connected of each if it was like 23 or

980
00:41:26,810 --> 00:41:28,910
even let's say 100 clients connected

981
00:41:28,910 --> 00:41:32,480
from an x 46 you know it said that you

982
00:41:32,480 --> 00:41:34,190
things will finish within a matter of

983
00:41:34,190 --> 00:41:38,810
seconds ah with these models different

984
00:41:38,810 --> 00:41:41,690
browsers on when your games so someone

985
00:41:41,690 --> 00:41:45,490
that comes when I say some surf playing

986
00:41:45,490 --> 00:41:47,660
background rape your boss while I run a

987
00:41:47,660 --> 00:41:50,630
test every song happy other people

988
00:41:50,630 --> 00:41:51,890
coming to different route there's this

989
00:41:51,890 --> 00:41:54,080
ready desert and they say stop I mean

990
00:41:54,080 --> 00:41:55,490
well they probably wouldn't be the wiser

991
00:41:55,490 --> 00:41:58,640
you know they want to know as long as

992
00:41:58,640 --> 00:42:02,660
the test didn't uh you know like put up

993
00:42:02,660 --> 00:42:04,990
an alert or something yeah I don't know

994
00:42:04,990 --> 00:42:10,100
so in this case I left an error in that

995
00:42:10,100 --> 00:42:12,470
there's one I knew this isn't happen

996
00:42:12,470 --> 00:42:15,290
this is ok so a one there's two tests

997
00:42:15,290 --> 00:42:18,590
failing in internet explorer you know

998
00:42:18,590 --> 00:42:20,750
explorer 6 and the selector module so

999
00:42:20,750 --> 00:42:22,670
for one of the things i did is is that

1000
00:42:22,670 --> 00:42:26,360
since i can't see the results um you

1001
00:42:26,360 --> 00:42:27,470
know I don't have a screenshot anything

1002
00:42:27,470 --> 00:42:29,870
was I I dumped all the results from all

1003
00:42:29,870 --> 00:42:33,140
these so I can go in and I can view the

1004
00:42:33,140 --> 00:42:38,690
internet explorer 6 results so this is

1005
00:42:38,690 --> 00:42:40,720
literally what was submitted back from

1006
00:42:40,720 --> 00:42:44,060
the client and this in explore 6 this is

1007
00:42:44,060 --> 00:42:45,470
running on a machine back at home in

1008
00:42:45,470 --> 00:42:48,630
Boston so this isn't running here

1009
00:42:48,630 --> 00:42:51,360
and I can go down and I can see up you

1010
00:42:51,360 --> 00:42:53,490
know there's the actual failure oh and I

1011
00:42:53,490 --> 00:42:55,200
can see the results and I can debug it

1012
00:42:55,200 --> 00:42:56,970
or what have you you know this is as

1013
00:42:56,970 --> 00:42:59,250
good as I could get back at home but I

1014
00:42:59,250 --> 00:43:00,900
don't I don't have to have access to the

1015
00:43:00,900 --> 00:43:03,720
IE six or seven machines in order to run

1016
00:43:03,720 --> 00:43:06,900
this so I think this is a pretty

1017
00:43:06,900 --> 00:43:08,490
incident I think this is a good first

1018
00:43:08,490 --> 00:43:13,560
step but the ultimate direction you want

1019
00:43:13,560 --> 00:43:17,490
to go in is it's just a house something

1020
00:43:17,490 --> 00:43:22,020
like this and this is sort of what I

1021
00:43:22,020 --> 00:43:23,640
call into the tender box this is

1022
00:43:23,640 --> 00:43:26,760
suddenly we have at Mozilla when

1023
00:43:26,760 --> 00:43:30,300
business this is commits by browser so

1024
00:43:30,300 --> 00:43:32,670
you see each individual commit and how

1025
00:43:32,670 --> 00:43:35,670
or if it changed the you know the tree

1026
00:43:35,670 --> 00:43:37,830
so in this case we can see that you know

1027
00:43:37,830 --> 00:43:40,110
at least in the last couple commits the

1028
00:43:40,110 --> 00:43:44,100
the tree is burning no Linga mentions

1029
00:43:44,100 --> 00:43:46,080
burning in I you six but everything else

1030
00:43:46,080 --> 00:43:47,550
is currently passing all the other

1031
00:43:47,550 --> 00:43:50,040
browsers so in this this way you have

1032
00:43:50,040 --> 00:43:53,310
now have sort of a complete distributed

1033
00:43:53,310 --> 00:43:56,930
continuous integration for for your

1034
00:43:56,930 --> 00:43:59,040
libraries or your projects or what have

1035
00:43:59,040 --> 00:44:03,000
you so you can get you can just load

1036
00:44:03,000 --> 00:44:05,400
this up and see that everything is

1037
00:44:05,400 --> 00:44:08,190
working a ok and that's ok to commit or

1038
00:44:08,190 --> 00:44:10,350
you can find out who broke what and go

1039
00:44:10,350 --> 00:44:12,240
and blame them or you know or what have

1040
00:44:12,240 --> 00:44:14,640
you so I think this is like the ultimate

1041
00:44:14,640 --> 00:44:20,160
you know good result of test one but the

1042
00:44:20,160 --> 00:44:23,190
thing is that ok well you're doing this

1043
00:44:23,190 --> 00:44:25,370
testing before you're doing

1044
00:44:25,370 --> 00:44:27,980
if you're still in development when you

1045
00:44:27,980 --> 00:44:30,920
fire off the tests the tests one have

1046
00:44:30,920 --> 00:44:32,600
you thought where everybody's to

1047
00:44:32,600 --> 00:44:35,270
monitoring and after deployment in

1048
00:44:35,270 --> 00:44:41,960
production that'd look very sure so so

1049
00:44:41,960 --> 00:44:43,490
there's there's definitely a couple of

1050
00:44:43,490 --> 00:44:44,840
cases where this could be used there's

1051
00:44:44,840 --> 00:44:48,920
um okay they said there's before pre

1052
00:44:48,920 --> 00:44:51,290
commit so you have some code you want to

1053
00:44:51,290 --> 00:44:53,090
make sure it works you submit it it

1054
00:44:53,090 --> 00:44:55,120
verifies the code that is surpassing

1055
00:44:55,120 --> 00:44:59,030
there is post commit so making sure that

1056
00:44:59,030 --> 00:45:00,650
once the code is actually putting pushed

1057
00:45:00,650 --> 00:45:02,390
out that you know everything the green

1058
00:45:02,390 --> 00:45:03,820
you know that the tree is still green

1059
00:45:03,820 --> 00:45:07,610
and then at least for live stuff I'd

1060
00:45:07,610 --> 00:45:11,480
imagine that that would apply more to

1061
00:45:11,480 --> 00:45:13,310
like application development in that

1062
00:45:13,310 --> 00:45:14,860
case of where you'll be running a

1063
00:45:14,860 --> 00:45:17,450
something like selenium look they

1064
00:45:17,450 --> 00:45:19,370
actually has a test driver where it's

1065
00:45:19,370 --> 00:45:21,050
clicking things you know simulating

1066
00:45:21,050 --> 00:45:22,730
clicks and stuff like that but yeah you

1067
00:45:22,730 --> 00:45:25,130
could absolutely uh you know set it up

1068
00:45:25,130 --> 00:45:27,620
to some sort of timer some sort of cron

1069
00:45:27,620 --> 00:45:29,390
job or what have you and just you know

1070
00:45:29,390 --> 00:45:31,850
tell it to rerun these tests every 20

1071
00:45:31,850 --> 00:45:34,310
minutes at this URL yeah I don't see why

1072
00:45:34,310 --> 00:45:38,930
not so the thing is that there's going

1073
00:45:38,930 --> 00:45:43,220
to be the main test war hub and at least

1074
00:45:43,220 --> 00:45:44,870
for the main hub it's only going to

1075
00:45:44,870 --> 00:45:47,600
accept at least for now only going to

1076
00:45:47,600 --> 00:45:51,320
accept open source projects that are you

1077
00:45:51,320 --> 00:45:53,450
know where the sources it is publicly

1078
00:45:53,450 --> 00:45:55,490
available and at least the developers

1079
00:45:55,490 --> 00:45:57,980
are pretty reputable because the thing

1080
00:45:57,980 --> 00:45:59,840
is that since you have the ability to

1081
00:45:59,840 --> 00:46:02,930
run code on hundreds of machines you

1082
00:46:02,930 --> 00:46:03,860
want to make sure people are at least

1083
00:46:03,860 --> 00:46:06,230
pretty well behaved but the thing is is

1084
00:46:06,230 --> 00:46:07,550
that the test forum itself is going to

1085
00:46:07,550 --> 00:46:09,680
be completely open source so if if a

1086
00:46:09,680 --> 00:46:13,010
company wants to take the server and run

1087
00:46:13,010 --> 00:46:15,620
it on intranet and then have all the

1088
00:46:15,620 --> 00:46:18,560
developers this open up browsers to use

1089
00:46:18,560 --> 00:46:21,140
locally they could do that in the end it

1090
00:46:21,140 --> 00:46:23,440
would be totally free and easy to use

1091
00:46:23,440 --> 00:46:25,550
but one of the things I think isn't me

1092
00:46:25,550 --> 00:46:30,820
pretty cool is that test form does not a

1093
00:46:30,820 --> 00:46:35,270
test form does not require that the test

1094
00:46:35,270 --> 00:46:36,610
be run automatically

1095
00:46:36,610 --> 00:46:38,890
one of the things going forward is I

1096
00:46:38,890 --> 00:46:40,720
want to have the ability to do manual

1097
00:46:40,720 --> 00:46:44,590
testing so in the default case the test

1098
00:46:44,590 --> 00:46:45,700
one is just going to sit there the

1099
00:46:45,700 --> 00:46:47,410
clients is going to sit there and run

1100
00:46:47,410 --> 00:46:49,090
these automated tests as they come in

1101
00:46:49,090 --> 00:46:50,440
you know just disquiet lean in the

1102
00:46:50,440 --> 00:46:52,470
background but every once in a while

1103
00:46:52,470 --> 00:46:54,790
like this is a problem that comes out at

1104
00:46:54,790 --> 00:46:58,150
least four we want to test jquery-ui we

1105
00:46:58,150 --> 00:47:00,310
want to test the user interface and you

1106
00:47:00,310 --> 00:47:02,080
could write automated tests for the user

1107
00:47:02,080 --> 00:47:04,420
interface but ideally the best situation

1108
00:47:04,420 --> 00:47:07,510
is to have actual humans there yeah when

1109
00:47:07,510 --> 00:47:09,790
you say you want to have a human drag a

1110
00:47:09,790 --> 00:47:11,860
dialogue from here to there and make

1111
00:47:11,860 --> 00:47:13,420
sure that it works correctly in that it

1112
00:47:13,420 --> 00:47:17,080
didn't like jiggle or opacity got weird

1113
00:47:17,080 --> 00:47:18,820
or you know there are only things that

1114
00:47:18,820 --> 00:47:21,820
can be determined by a human and so the

1115
00:47:21,820 --> 00:47:24,280
thing is is that the test form starts to

1116
00:47:24,280 --> 00:47:27,280
expand now and so while users sitting

1117
00:47:27,280 --> 00:47:29,200
there and their browsers just on their

1118
00:47:29,200 --> 00:47:30,940
desktop they could pop up a notification

1119
00:47:30,940 --> 00:47:34,360
say hey we have five new manual tests

1120
00:47:34,360 --> 00:47:37,120
that we need to run would you be

1121
00:47:37,120 --> 00:47:38,260
interested in clicking through these

1122
00:47:38,260 --> 00:47:40,390
niggas I sure you know dry dialogue here

1123
00:47:40,390 --> 00:47:42,430
there that work yes or no yes and the

1124
00:47:42,430 --> 00:47:44,380
niggas go through knock up a couple of

1125
00:47:44,380 --> 00:47:46,630
these and then this way you start to

1126
00:47:46,630 --> 00:47:48,760
distribute out the manual load testing

1127
00:47:48,760 --> 00:47:51,040
of your projects which i think is pretty

1128
00:47:51,040 --> 00:47:55,300
cool um and is in order to you know get

1129
00:47:55,300 --> 00:47:57,220
people excited about this one things can

1130
00:47:57,220 --> 00:47:59,470
do is start to give incentives so the

1131
00:47:59,470 --> 00:48:01,450
polite for example like the top manual

1132
00:48:01,450 --> 00:48:04,000
tester on ie6 maybe he'll get like a

1133
00:48:04,000 --> 00:48:07,180
t-shirt and like a mug you know it's or

1134
00:48:07,180 --> 00:48:09,370
maybe some books or yeah you know

1135
00:48:09,370 --> 00:48:11,260
whatever whatever or maybe people who

1136
00:48:11,260 --> 00:48:13,570
run more obscure browsers like maybe

1137
00:48:13,570 --> 00:48:14,980
people who are doing mobile testing

1138
00:48:14,980 --> 00:48:17,320
Mabel they'll get you know I don't know

1139
00:48:17,320 --> 00:48:19,180
a gift certificate for something because

1140
00:48:19,180 --> 00:48:20,620
I mean those are things that are going

1141
00:48:20,620 --> 00:48:22,540
to be pretty hard to do and it's really

1142
00:48:22,540 --> 00:48:25,330
worth their while in some ways um it's

1143
00:48:25,330 --> 00:48:27,730
it's it could be even possible to take

1144
00:48:27,730 --> 00:48:29,500
the manual testing and then just tap it

1145
00:48:29,500 --> 00:48:31,480
straight into something like mechanical

1146
00:48:31,480 --> 00:48:34,420
turk and then having a turkish sit there

1147
00:48:34,420 --> 00:48:35,860
and clicking through your results and

1148
00:48:35,860 --> 00:48:38,170
you can be paying you know fifty cents

1149
00:48:38,170 --> 00:48:40,360
you know for a whole batch of tests and

1150
00:48:40,360 --> 00:48:43,300
yeah and so everything could work out

1151
00:48:43,300 --> 00:48:44,860
that way so i think i think this

1152
00:48:44,860 --> 00:48:47,080
interesting because this is a way to

1153
00:48:47,080 --> 00:48:49,870
solve the difficult scaling problem

1154
00:48:49,870 --> 00:48:51,730
javascript both for automated and manual

1155
00:48:51,730 --> 00:48:54,640
tests and in a way I think that is

1156
00:48:54,640 --> 00:48:59,380
fairly reasonable yeah so uh I can't

1157
00:48:59,380 --> 00:49:01,150
think that's about it so any other

1158
00:49:01,150 --> 00:49:04,860
questions about tests warm games or

1159
00:49:04,860 --> 00:49:07,450
performance analysis or anything else

1160
00:49:07,450 --> 00:49:09,190
really I want to use that swarmed out to

1161
00:49:09,190 --> 00:49:11,380
eos look at past UTC on what you can

1162
00:49:11,380 --> 00:49:17,170
make well and first one either so i am

1163
00:49:17,170 --> 00:49:18,970
the one of abuse to surge right now

1164
00:49:18,970 --> 00:49:21,340
isn't the scaling of test form it's it's

1165
00:49:21,340 --> 00:49:24,180
very cruelly written at this point I

1166
00:49:24,180 --> 00:49:26,110
server-side programming it's not my

1167
00:49:26,110 --> 00:49:31,630
forte but the very least well I because

1168
00:49:31,630 --> 00:49:33,850
I put up a notification for an alpha and

1169
00:49:33,850 --> 00:49:36,160
I have like 600 people sign up and then

1170
00:49:36,160 --> 00:49:37,660
I realized that that's like way too many

1171
00:49:37,660 --> 00:49:40,600
people and so off to figure something

1172
00:49:40,600 --> 00:49:43,420
out and I just one of one of the biggest

1173
00:49:43,420 --> 00:49:45,280
problems right now is that it's not very

1174
00:49:45,280 --> 00:49:48,160
fault tolerant like if if a right at

1175
00:49:48,160 --> 00:49:49,960
this moment if a test free throws an

1176
00:49:49,960 --> 00:49:52,030
exception it kind of gets kind of wonky

1177
00:49:52,030 --> 00:49:53,740
after that so that's one of the things I

1178
00:49:53,740 --> 00:49:55,930
want to fix is that if if a client kind

1179
00:49:55,930 --> 00:49:58,150
of dies off or something you know that

1180
00:49:58,150 --> 00:50:00,370
it's able to you know gracefully recover

1181
00:50:00,370 --> 00:50:04,090
and can it continue to run but that

1182
00:50:04,090 --> 00:50:05,890
being said so there's a couple use cases

1183
00:50:05,890 --> 00:50:07,870
that didn't think of that are now

1184
00:50:07,870 --> 00:50:09,960
becoming interesting like for example

1185
00:50:09,960 --> 00:50:12,760
for jquery i want to run it against a

1186
00:50:12,760 --> 00:50:15,460
very specific number of browsers and to

1187
00:50:15,460 --> 00:50:17,050
understand you know it is a passing her

1188
00:50:17,050 --> 00:50:19,170
family but there's also the use case of

1189
00:50:19,170 --> 00:50:21,460
putting it out to as many different

1190
00:50:21,460 --> 00:50:22,750
browsers as possible at as many

1191
00:50:22,750 --> 00:50:25,540
different platforms as possible um you

1192
00:50:25,540 --> 00:50:29,260
know two seeds just what happens so this

1193
00:50:29,260 --> 00:50:32,200
in that case of for example you can send

1194
00:50:32,200 --> 00:50:36,280
out a feature detection code so you can

1195
00:50:36,280 --> 00:50:37,990
write you to write a specific chunk of

1196
00:50:37,990 --> 00:50:39,670
code to detect you know features in

1197
00:50:39,670 --> 00:50:41,980
JavaScript pass it off to 50 different

1198
00:50:41,980 --> 00:50:44,020
browsers and you can know instantly how

1199
00:50:44,020 --> 00:50:44,980
that behaves in all these different

1200
00:50:44,980 --> 00:50:48,340
browsers maybe it could be used for

1201
00:50:48,340 --> 00:50:50,680
pinging an instance of something or you

1202
00:50:50,680 --> 00:50:52,830
know doing a lot of JSON PE requests or

1203
00:50:52,830 --> 00:50:57,850
possibly right now it a test worm works

1204
00:50:57,850 --> 00:51:00,910
across domains fairly well so that's

1205
00:51:00,910 --> 00:51:01,660
definitely an option

1206
00:51:01,660 --> 00:51:05,200
I at least what I showed running there

1207
00:51:05,200 --> 00:51:07,150
that that was Jake Jake wait a street

1208
00:51:07,150 --> 00:51:10,900
running the you know qunit that is not a

1209
00:51:10,900 --> 00:51:13,180
requirement it as the stands it can run

1210
00:51:13,180 --> 00:51:15,280
on any test me as a simple little API

1211
00:51:15,280 --> 00:51:17,859
hook into and at least from there for

1212
00:51:17,859 --> 00:51:19,720
the first version I'm going to have it

1213
00:51:19,720 --> 00:51:22,630
support the jQuery test suite prototype

1214
00:51:22,630 --> 00:51:26,440
dojo mootools and Yui all hugs for all

1215
00:51:26,440 --> 00:51:27,970
of those if you get profile information

1216
00:51:27,970 --> 00:51:30,819
back or just very simple pass/fail so

1217
00:51:30,819 --> 00:51:32,500
that's an interesting problem in himself

1218
00:51:32,500 --> 00:51:34,630
it is how do you use this probe for

1219
00:51:34,630 --> 00:51:38,020
profiling and it can't be used in the

1220
00:51:38,020 --> 00:51:40,990
traditional sense in that that if you

1221
00:51:40,990 --> 00:51:42,730
passed off and said here give me the

1222
00:51:42,730 --> 00:51:44,500
times for these things on this browser

1223
00:51:44,500 --> 00:51:46,390
the problem is that it may run in one

1224
00:51:46,390 --> 00:51:48,010
browser on a completely different

1225
00:51:48,010 --> 00:51:51,130
platform may rot in some old you know

1226
00:51:51,130 --> 00:51:53,470
like 486 I don't know how old r on it

1227
00:51:53,470 --> 00:51:56,380
but once the ancient computer and all

1228
00:51:56,380 --> 00:51:58,119
the way around a super fast computer and

1229
00:51:58,119 --> 00:51:59,799
you know that's not very good you can't

1230
00:51:59,799 --> 00:52:01,720
compare those numbers a different

1231
00:52:01,720 --> 00:52:03,789
alternative and this is actually thought

1232
00:52:03,789 --> 00:52:06,279
of I uh one of the guys in the mood

1233
00:52:06,279 --> 00:52:07,390
tools team which was that was pretty

1234
00:52:07,390 --> 00:52:10,990
interesting was instead of getting bad

1235
00:52:10,990 --> 00:52:13,650
gross numbers what you do is you send a

1236
00:52:13,650 --> 00:52:17,230
client a comparison test you say here's

1237
00:52:17,230 --> 00:52:20,079
code a and here's code B which one you

1238
00:52:20,079 --> 00:52:22,299
know does code be run faster pass or

1239
00:52:22,299 --> 00:52:24,880
fail and then that way you could push

1240
00:52:24,880 --> 00:52:28,329
you say so this a be testing and then

1241
00:52:28,329 --> 00:52:30,480
you could pass the a/b testing out to

1242
00:52:30,480 --> 00:52:33,309
you know ten browsers and then you get

1243
00:52:33,309 --> 00:52:35,319
past past past fail fail you're like oh

1244
00:52:35,319 --> 00:52:37,630
no it we had a speed regression and in

1245
00:52:37,630 --> 00:52:39,609
an explorer with that change but it

1246
00:52:39,609 --> 00:52:41,170
actually got faster in Firefox Safari

1247
00:52:41,170 --> 00:52:43,450
some of you look like a multiple also

1248
00:52:43,450 --> 00:52:44,770
like it's did times slower than

1249
00:52:44,770 --> 00:52:49,000
iterating through a raid sure yeah so

1250
00:52:49,000 --> 00:52:51,400
yeah I mean there's definitely um I

1251
00:52:51,400 --> 00:52:53,049
think there's definitely potential there

1252
00:52:53,049 --> 00:52:57,520
yeah so what about like not just

1253
00:52:57,520 --> 00:52:59,500
profiling the browser white light load

1254
00:52:59,500 --> 00:53:01,450
test profiling so if you want to see

1255
00:53:01,450 --> 00:53:04,299
how's your HX running when there's a lot

1256
00:53:04,299 --> 00:53:06,450
of different browser to apply

1257
00:53:06,450 --> 00:53:12,130
possibly I mean the thing is is that at

1258
00:53:12,130 --> 00:53:14,200
least in that case you're going to want

1259
00:53:14,200 --> 00:53:16,000
to determine you like simultaneous

1260
00:53:16,000 --> 00:53:18,340
requests I mean in any way you slice it

1261
00:53:18,340 --> 00:53:20,350
you're going to have to have a lot of

1262
00:53:20,350 --> 00:53:24,550
pages open or a lot of clients open it

1263
00:53:24,550 --> 00:53:26,619
could be possible I mean I would imagine

1264
00:53:26,619 --> 00:53:27,640
that that would be something that would

1265
00:53:27,640 --> 00:53:30,130
probably not run in the main test form

1266
00:53:30,130 --> 00:53:32,260
but probably be more of like if a

1267
00:53:32,260 --> 00:53:33,790
company wants to determine that their

1268
00:53:33,790 --> 00:53:36,310
website is able to scale then you know

1269
00:53:36,310 --> 00:53:38,470
have their developers is open massive

1270
00:53:38,470 --> 00:53:40,570
numbers of pages or what have you well

1271
00:53:40,570 --> 00:53:42,660
actually this is a case where I think

1272
00:53:42,660 --> 00:53:47,100
something like Amazon ec2 oh and

1273
00:53:47,100 --> 00:53:49,450
possibly selenium grid would work out

1274
00:53:49,450 --> 00:53:52,180
really well is that you know spawn a

1275
00:53:52,180 --> 00:53:54,570
whole ton of ec2 instances running

1276
00:53:54,570 --> 00:53:57,160
multiple copies of browsers would test

1277
00:53:57,160 --> 00:53:59,170
form open and then just have it pound

1278
00:53:59,170 --> 00:54:00,940
the server and then get all the results

1279
00:54:00,940 --> 00:54:06,070
back again how you saw the same origin

1280
00:54:06,070 --> 00:54:13,580
policy the limitations so what I do is

1281
00:54:13,590 --> 00:54:18,250
because okay so there's the iframe they

1282
00:54:18,250 --> 00:54:19,930
have something in a separate domain and

1283
00:54:19,930 --> 00:54:21,609
you want to communicate the results back

1284
00:54:21,609 --> 00:54:25,480
so what I what I do is is that I the

1285
00:54:25,480 --> 00:54:28,000
code an iframe has one script included

1286
00:54:28,000 --> 00:54:31,240
in it and yeah it is it yeah so that's

1287
00:54:31,240 --> 00:54:34,960
requirement in order to have it run in

1288
00:54:34,960 --> 00:54:37,330
the be capable to run in swarm you have

1289
00:54:37,330 --> 00:54:39,100
to have at least have an injection strip

1290
00:54:39,100 --> 00:54:43,210
the submission script it creates a dummy

1291
00:54:43,210 --> 00:54:46,300
form ejects the data in and then submits

1292
00:54:46,300 --> 00:54:48,040
it now the thing is is that when you

1293
00:54:48,040 --> 00:54:49,780
submit forms you know that when you

1294
00:54:49,780 --> 00:54:51,070
create a fake form and submit it you

1295
00:54:51,070 --> 00:54:52,869
can't get the information back from it

1296
00:54:52,869 --> 00:54:54,670
but that's okay because what happens is

1297
00:54:54,670 --> 00:54:57,310
on the resulting page JavaScript pops up

1298
00:54:57,310 --> 00:54:59,109
and communicates it back up through the

1299
00:54:59,109 --> 00:55:02,230
frames again back to the top klein and

1300
00:55:02,230 --> 00:55:04,510
that works well in all browsers but I

1301
00:55:04,510 --> 00:55:08,260
ate because I they have this new the new

1302
00:55:08,260 --> 00:55:10,390
cross-site scripting detection and it

1303
00:55:10,390 --> 00:55:11,619
sees that it's like oh Christ site

1304
00:55:11,619 --> 00:55:14,560
scripting and but the thing is that i

1305
00:55:14,560 --> 00:55:18,950
ate has the window post message so you

1306
00:55:18,950 --> 00:55:23,000
the new API in html5 actually quite a

1307
00:55:23,000 --> 00:55:24,619
few new browser in fact all browsers

1308
00:55:24,619 --> 00:55:27,109
have it but they're just implemented at

1309
00:55:27,109 --> 00:55:29,630
varying degrees equality index bah rates

1310
00:55:29,630 --> 00:55:31,790
is decent but we can do is you from

1311
00:55:31,790 --> 00:55:34,550
within an iframe you can communicate to

1312
00:55:34,550 --> 00:55:37,070
a parent frame with a string message and

1313
00:55:37,070 --> 00:55:39,170
then it can respond back so yeah so it

1314
00:55:39,170 --> 00:55:45,870
ends up working out fairly well so

1315
00:55:45,880 --> 00:55:49,579
you've got like 30 100 things that just

1316
00:55:49,579 --> 00:55:53,240
won't have to dispute s uh it's tested

1317
00:55:53,240 --> 00:55:54,829
submitted on our first come first serve

1318
00:55:54,829 --> 00:56:00,140
basis and so yeah in the so first come

1319
00:56:00,140 --> 00:56:04,820
first serve and um it depends on how

1320
00:56:04,820 --> 00:56:07,910
many runs you want and these cases I

1321
00:56:07,910 --> 00:56:10,780
only showed the test running once but

1322
00:56:10,780 --> 00:56:13,160
like for example let's say you worried

1323
00:56:13,160 --> 00:56:14,930
about the quality of the results coming

1324
00:56:14,930 --> 00:56:17,300
back instead of running at once maybe

1325
00:56:17,300 --> 00:56:19,190
you run it each individual test suite

1326
00:56:19,190 --> 00:56:22,760
like five times so that way uh you know

1327
00:56:22,760 --> 00:56:25,460
you're sure you could say like okay it

1328
00:56:25,460 --> 00:56:28,130
passes in for the browser's fails of one

1329
00:56:28,130 --> 00:56:30,140
of the browsers you know what does top

1330
00:56:30,140 --> 00:56:31,670
will discard that one failing case

1331
00:56:31,670 --> 00:56:34,220
because maybe that's just an outlier you

1332
00:56:34,220 --> 00:56:35,150
know so you can start to make

1333
00:56:35,150 --> 00:56:38,630
determinations like that so at least for

1334
00:56:38,630 --> 00:56:41,540
determining who gets what again the

1335
00:56:41,540 --> 00:56:42,619
clients are communicating with the

1336
00:56:42,619 --> 00:56:44,569
server so the client will just say is

1337
00:56:44,569 --> 00:56:46,730
there anything for me yes no so anything

1338
00:56:46,730 --> 00:56:48,800
for me yes now this oversight yo here

1339
00:56:48,800 --> 00:56:50,810
you go here yeah it's so again this is

1340
00:56:50,810 --> 00:56:56,329
whoever gets there first it connects to

1341
00:56:56,329 --> 00:57:00,770
your dialogue example it seems to be a

1342
00:57:00,770 --> 00:57:04,819
lot of subjective as to whether or not

1343
00:57:04,819 --> 00:57:07,990
this past bales pasties

1344
00:57:07,990 --> 00:57:11,080
is anything about putting another

1345
00:57:11,080 --> 00:57:16,750
benchmark to the right so one of the

1346
00:57:16,750 --> 00:57:20,760
things i think about for that is having

1347
00:57:20,760 --> 00:57:23,950
haven't having a so there would be a

1348
00:57:23,950 --> 00:57:27,190
general pass/fail state so I mean it'd

1349
00:57:27,190 --> 00:57:29,530
be pretty obviously something worked or

1350
00:57:29,530 --> 00:57:31,960
just completely did not work but at the

1351
00:57:31,960 --> 00:57:35,080
same time having a text input so you say

1352
00:57:35,080 --> 00:57:38,380
yes it worked but uh oh yes oh yes I was

1353
00:57:38,380 --> 00:57:40,119
able to drag the dialogue but it kind of

1354
00:57:40,119 --> 00:57:41,860
jiggle when i first started dragging it

1355
00:57:41,860 --> 00:57:45,040
or no it did not work you know no matter

1356
00:57:45,040 --> 00:57:46,600
how much i tried to drag it just did not

1357
00:57:46,600 --> 00:57:50,230
work yeah so the variance I think that

1358
00:57:50,230 --> 00:57:52,000
being able to have a little bit of

1359
00:57:52,000 --> 00:57:54,760
verbal indicator or I guess written in

1360
00:57:54,760 --> 00:57:57,580
decatur communication would help and

1361
00:57:57,580 --> 00:57:59,020
absolutely there would be instructions

1362
00:57:59,020 --> 00:58:00,880
as well you know the time users I was

1363
00:58:00,880 --> 00:58:02,590
just thinking it might be useful I'm

1364
00:58:02,590 --> 00:58:06,160
standard video of a graphic but that's

1365
00:58:06,160 --> 00:58:09,580
simply a lot of work set us I ultimately

1366
00:58:09,580 --> 00:58:12,940
that would be up to whoever's you know

1367
00:58:12,940 --> 00:58:14,980
building it or developing those tests

1368
00:58:14,980 --> 00:58:16,930
the more comprehensive the more

1369
00:58:16,930 --> 00:58:18,670
explanatory the tests are probably the

1370
00:58:18,670 --> 00:58:22,150
better results you get out I mean yeah

1371
00:58:22,150 --> 00:58:23,800
when you're dealing with humans things

1372
00:58:23,800 --> 00:58:29,740
get are now in perfect yeah so the

1373
00:58:29,740 --> 00:58:31,720
question was in case you're gonna hear

1374
00:58:31,720 --> 00:58:33,550
is you know there was a big speed

1375
00:58:33,550 --> 00:58:37,080
improvements from jQuery 126 to 132 and

1376
00:58:37,080 --> 00:58:41,950
there are other limits and so at least

1377
00:58:41,950 --> 00:58:45,490
right right now I I haven't seen a limit

1378
00:58:45,490 --> 00:58:47,920
yet at least for 133 i'm still doing a

1379
00:58:47,920 --> 00:58:51,160
lot of work so that there is that the

1380
00:58:51,160 --> 00:58:53,020
profiling work i showed earlier i'm

1381
00:58:53,020 --> 00:58:54,460
using that extensively right now to

1382
00:58:54,460 --> 00:58:56,770
rewrite almost all the major methods so

1383
00:58:56,770 --> 00:59:00,840
add class removed class append remove

1384
00:59:00,840 --> 00:59:04,510
CSS attribute like the core methods and

1385
00:59:04,510 --> 00:59:06,070
almost all those are getting heavily

1386
00:59:06,070 --> 00:59:10,570
we're in for 133 and the performance

1387
00:59:10,570 --> 00:59:12,480
improvements are coming out a very huge

1388
00:59:12,480 --> 00:59:15,910
so at least for now that's something i'm

1389
00:59:15,910 --> 00:59:18,369
focusing on I mean it free 8 release you

1390
00:59:18,369 --> 00:59:20,290
kind of have to take it you know part by

1391
00:59:20,290 --> 00:59:21,000
part it can't

1392
00:59:21,000 --> 00:59:23,340
all everything is just so much potential

1393
00:59:23,340 --> 00:59:25,320
for breakage so in this case I'm

1394
00:59:25,320 --> 00:59:28,470
targeting like you know attributes dom

1395
00:59:28,470 --> 00:59:33,180
traversal dom manipulation and but i

1396
00:59:33,180 --> 00:59:37,950
don't think there's a wall yet and

1397
00:59:37,950 --> 00:59:39,680
there's still plenty of room for

1398
00:59:39,680 --> 00:59:42,090
improvements we can call it boobs are

1399
00:59:42,090 --> 00:59:43,860
hollow question but what your calls grew

1400
00:59:43,860 --> 00:59:46,440
and actually these tests examination

1401
00:59:46,440 --> 00:59:49,950
flavor for me um you look last here what

1402
00:59:49,950 --> 00:59:52,500
are the kinds of improvements with it

1403
00:59:52,500 --> 00:59:57,030
yep even giving isn't been reorganizing

1404
00:59:57,030 --> 01:00:02,370
Oh an algorithmic has doing things so so

1405
01:00:02,370 --> 01:00:03,540
look at there's a couple things oh

1406
01:00:03,540 --> 01:00:05,910
there's certainly different algorithms

1407
01:00:05,910 --> 01:00:07,890
helped a lot you know is structuring

1408
01:00:07,890 --> 01:00:12,150
code differently um one of the things

1409
01:00:12,150 --> 01:00:15,510
that that we've been improving upon is

1410
01:00:15,510 --> 01:00:20,160
that in the past we typically put all of

1411
01:00:20,160 --> 01:00:24,590
our browser specific code in line and

1412
01:00:24,590 --> 01:00:26,970
when in fact we're now working to

1413
01:00:26,970 --> 01:00:29,370
extract that so that you know the the

1414
01:00:29,370 --> 01:00:32,220
things that only mattered in an explorer

1415
01:00:32,220 --> 01:00:35,820
will only ever be loaded or to a browser

1416
01:00:35,820 --> 01:00:38,550
that meets the specific you know failure

1417
01:00:38,550 --> 01:00:42,090
state will that code will only be wrong

1418
01:00:42,090 --> 01:00:45,000
and executed in that browser so at least

1419
01:00:45,000 --> 01:00:46,710
in the code right now there's a lot of

1420
01:00:46,710 --> 01:00:48,690
cases where you know there's an if

1421
01:00:48,690 --> 01:00:50,220
statement you know if this feature

1422
01:00:50,220 --> 01:00:53,780
exists do this else do this when in fact

1423
01:00:53,780 --> 01:00:56,790
the the user should never be hitting

1424
01:00:56,790 --> 01:01:00,000
those lines code only on load so that's

1425
01:01:00,000 --> 01:01:02,880
been one thing that's helped another

1426
01:01:02,880 --> 01:01:06,860
thing is that in a lot of ways right now

1427
01:01:06,860 --> 01:01:11,130
the the code in jquery is the internals

1428
01:01:11,130 --> 01:01:14,970
are obstructed actually quite well and a

1429
01:01:14,970 --> 01:01:16,830
lot of the improvements has been going

1430
01:01:16,830 --> 01:01:18,210
back through and removing someday

1431
01:01:18,210 --> 01:01:21,360
abstractions which has made the which is

1432
01:01:21,360 --> 01:01:23,850
certainly decreased code quality in some

1433
01:01:23,850 --> 01:01:26,310
areas which is unfortunate but the same

1434
01:01:26,310 --> 01:01:27,750
time the

1435
01:01:27,750 --> 01:01:29,940
it's been pretty good and in those cases

1436
01:01:29,940 --> 01:01:33,240
we tend to weigh the you know the

1437
01:01:33,240 --> 01:01:35,910
improvements versus the degradation and

1438
01:01:35,910 --> 01:01:38,010
color quality you know if we think

1439
01:01:38,010 --> 01:01:39,120
there's a significant drop in

1440
01:01:39,120 --> 01:01:41,310
understanding and legibility then we

1441
01:01:41,310 --> 01:01:43,500
just won't land it I mean it don't just

1442
01:01:43,500 --> 01:01:48,390
have to be that way yeah yes first

1443
01:01:48,390 --> 01:01:50,790
strategy game why is it all blogging

1444
01:01:50,790 --> 01:01:55,470
that into server just because G for

1445
01:01:55,470 --> 01:01:57,930
stretching I mean typically that that's

1446
01:01:57,930 --> 01:02:00,000
simply just how it has to work in that

1447
01:02:00,000 --> 01:02:01,620
and they all people will try to cheat or

1448
01:02:01,620 --> 01:02:05,280
I mean it for you think about you know

1449
01:02:05,280 --> 01:02:07,640
the risk game for example if there is no

1450
01:02:07,640 --> 01:02:10,260
if all the logic was on the client side

1451
01:02:10,260 --> 01:02:12,210
then you could just say all right I'm

1452
01:02:12,210 --> 01:02:15,030
going to take my country that now has 50

1453
01:02:15,030 --> 01:02:16,530
units and I'm going to tag this one on

1454
01:02:16,530 --> 01:02:18,060
the other side of the map you know I

1455
01:02:18,060 --> 01:02:19,830
mean there has to be restrictions there

1456
01:02:19,830 --> 01:02:21,780
that prevent the user from blatantly

1457
01:02:21,780 --> 01:02:25,770
manipulating the game so I mean that's

1458
01:02:25,770 --> 01:02:27,660
not to say that all the logic has to be

1459
01:02:27,660 --> 01:02:30,240
on the server but the very least most

1460
01:02:30,240 --> 01:02:32,970
the important gameplay logic is that is

1461
01:02:32,970 --> 01:02:35,070
gonna be on the server here we'll use

1462
01:02:35,070 --> 01:02:40,770
closures too high so there was um okay

1463
01:02:40,770 --> 01:02:44,490
so there's a feature if you want to call

1464
01:02:44,490 --> 01:02:49,290
it that in and firefox where you can

1465
01:02:49,290 --> 01:02:55,350
pass in a function to eval and you can

1466
01:02:55,350 --> 01:02:57,090
actually get information that's hidden

1467
01:02:57,090 --> 01:02:59,700
inside of a closure and so all that

1468
01:02:59,700 --> 01:03:02,190
means is that someone using Firebug can

1469
01:03:02,190 --> 01:03:04,740
start to tweak things but that being

1470
01:03:04,740 --> 01:03:09,450
said all that really matters is sitting

1471
01:03:09,450 --> 01:03:11,850
there you know a watching HTTP request

1472
01:03:11,850 --> 01:03:14,040
go by and just saying oh no we're gonna

1473
01:03:14,040 --> 01:03:16,320
change that variable to this I mean you

1474
01:03:16,320 --> 01:03:18,570
don't have to have it doesn't matter how

1475
01:03:18,570 --> 01:03:20,400
well you hide it if the user can still

1476
01:03:20,400 --> 01:03:23,400
mess with it so yeah I mean it's not

1477
01:03:23,400 --> 01:03:25,680
even Firefox no specific at that point

1478
01:03:25,680 --> 01:03:28,380
then and that's to say that even if you

1479
01:03:28,380 --> 01:03:29,760
move your logic to the server side that

1480
01:03:29,760 --> 01:03:30,920
doesn't prevent you from getting

1481
01:03:30,920 --> 01:03:34,770
affected there was a game a while back

1482
01:03:34,770 --> 01:03:39,000
called a cold war new unroll installed

1483
01:03:39,000 --> 01:03:40,220
backwards

1484
01:03:40,220 --> 01:03:44,270
and it was sort of like monopoly it was

1485
01:03:44,270 --> 01:03:46,460
a ruby on rails game and a used

1486
01:03:46,460 --> 01:03:49,099
prototype is like monopoly but the board

1487
01:03:49,099 --> 01:03:51,530
never ended it just kept going and so

1488
01:03:51,530 --> 01:03:53,420
you would try to get properties and

1489
01:03:53,420 --> 01:03:55,700
owned them and then other people land on

1490
01:03:55,700 --> 01:03:58,190
and have to pay you a fee but the thing

1491
01:03:58,190 --> 01:03:59,960
is that I realized after playing for a

1492
01:03:59,960 --> 01:04:02,780
little bit that there was that the more

1493
01:04:02,780 --> 01:04:04,460
property you owned it didn't matter how

1494
01:04:04,460 --> 01:04:06,230
did the helped it was the more property

1495
01:04:06,230 --> 01:04:07,400
you own the more money you would get

1496
01:04:07,400 --> 01:04:08,810
since the greater likelihood this some

1497
01:04:08,810 --> 01:04:10,609
of the land on your property so I wrote

1498
01:04:10,609 --> 01:04:12,710
a bot that go through and keep rolling

1499
01:04:12,710 --> 01:04:14,270
the dice in the game again again again

1500
01:04:14,270 --> 01:04:17,270
and just buy any property it landed on

1501
01:04:17,270 --> 01:04:19,280
so like it's funny because if you look

1502
01:04:19,280 --> 01:04:20,330
at the scores for the game had a high

1503
01:04:20,330 --> 01:04:22,670
score board and all the scores were you

1504
01:04:22,670 --> 01:04:24,230
know those people kind of get money get

1505
01:04:24,230 --> 01:04:27,080
money and then you see you know like the

1506
01:04:27,080 --> 01:04:29,030
the score from I bought is like cruising

1507
01:04:29,030 --> 01:04:30,680
up to the top and then and then of

1508
01:04:30,680 --> 01:04:31,580
course all the people figured out and

1509
01:04:31,580 --> 01:04:33,020
there's then you see all the boss you

1510
01:04:33,020 --> 01:04:35,710
know just kind of getting up to the top

1511
01:04:35,710 --> 01:04:38,000
but it was interesting because in that

1512
01:04:38,000 --> 01:04:40,310
game they actually ended up making a

1513
01:04:40,310 --> 01:04:41,990
normal version of the game and then they

1514
01:04:41,990 --> 01:04:43,490
had a separate version that was just for

1515
01:04:43,490 --> 01:04:50,570
BOTS there is another game that I showed

1516
01:04:50,570 --> 01:04:56,420
here let me see babble I wrote about for

1517
01:04:56,420 --> 01:04:58,550
this one as well I mean is this on a

1518
01:04:58,550 --> 01:05:00,020
really hard problem you have so many

1519
01:05:00,020 --> 01:05:01,160
letters but so many letters you have a

1520
01:05:01,160 --> 01:05:02,780
dictionary you just go through you know

1521
01:05:02,780 --> 01:05:05,270
solve all the words in it and you insert

1522
01:05:05,270 --> 01:05:07,790
them all in but the thing is is that at

1523
01:05:07,790 --> 01:05:10,070
least within Babel there is no huge

1524
01:05:10,070 --> 01:05:11,930
there isn't like a massive reward for

1525
01:05:11,930 --> 01:05:14,089
being the first to solve the puzzle or

1526
01:05:14,089 --> 01:05:16,099
something I mean if you if you solve the

1527
01:05:16,099 --> 01:05:17,869
puzzles six minutes after midnight when

1528
01:05:17,869 --> 01:05:19,700
it comes a new puzzle comes on everyone

1529
01:05:19,700 --> 01:05:21,440
knows you're cheating anyway but the

1530
01:05:21,440 --> 01:05:24,140
thing is is that in this community of

1531
01:05:24,140 --> 01:05:25,910
what happens is that there are people

1532
01:05:25,910 --> 01:05:28,580
who've written solvers for these but

1533
01:05:28,580 --> 01:05:30,770
what they do is they use this solved

1534
01:05:30,770 --> 01:05:32,540
information to go through and help other

1535
01:05:32,540 --> 01:05:37,640
players like for example um someone here

1536
01:05:37,640 --> 01:05:40,820
says I you know I've hit a wall they

1537
01:05:40,820 --> 01:05:42,950
don't know how to continue and then

1538
01:05:42,950 --> 01:05:44,660
someone here says oh you're you're

1539
01:05:44,660 --> 01:05:48,589
missing F is an FA for so we use this

1540
01:05:48,589 --> 01:05:50,510
code to communicate with each other so

1541
01:05:50,510 --> 01:05:52,280
this in this case this person no

1542
01:05:52,280 --> 01:05:54,140
they're missing a word that begins full

1543
01:05:54,140 --> 01:05:56,120
letter F and this person is saying is

1544
01:05:56,120 --> 01:05:57,830
that it begins with F a and it's four

1545
01:05:57,830 --> 01:06:00,380
letters long and this person has already

1546
01:06:00,380 --> 01:06:02,330
solved the game but they're using that

1547
01:06:02,330 --> 01:06:04,040
knowledge to help other players in a way

1548
01:06:04,040 --> 01:06:06,290
that isn't being a total dick yeah yeah

1549
01:06:06,290 --> 01:06:07,670
but I think that's interesting and that

1550
01:06:07,670 --> 01:06:09,230
this this is how the community is

1551
01:06:09,230 --> 01:06:11,240
structured and it actually works out you

1552
01:06:11,240 --> 01:06:12,620
know fairly well people play along

1553
01:06:12,620 --> 01:06:16,660
together and it works out well um Sam

1554
01:06:16,660 --> 01:06:19,220
Bishop wheeler principal with it has

1555
01:06:19,220 --> 01:06:21,500
multiplayer what happens if you either

1556
01:06:21,500 --> 01:06:23,090
are trying to distribute the rule sets

1557
01:06:23,090 --> 01:06:25,190
across multiple player there's

1558
01:06:25,190 --> 01:06:26,690
definitely security oddities that

1559
01:06:26,690 --> 01:06:28,610
digging is distribute it has to be at

1560
01:06:28,610 --> 01:06:29,960
least six of those feeling at the data

1561
01:06:29,960 --> 01:06:32,180
anyone know to kind of updated head wrap

1562
01:06:32,180 --> 01:06:34,040
information to get the whole dataset or

1563
01:06:34,040 --> 01:06:37,460
even then make the actual value of

1564
01:06:37,460 --> 01:06:39,230
anything based also on where other

1565
01:06:39,230 --> 01:06:41,540
players are in cuse book people are the

1566
01:06:41,540 --> 01:06:43,400
rules as well schools kind of cheese and

1567
01:06:43,400 --> 01:06:45,830
usually what where that's possible I

1568
01:06:45,830 --> 01:06:48,740
mean it is I mean you certainly get very

1569
01:06:48,740 --> 01:06:50,720
complex I think pretty quickly I mean it

1570
01:06:50,720 --> 01:06:53,900
we're entering the realm of the sort of

1571
01:06:53,900 --> 01:06:55,610
problems you see what games like I was

1572
01:06:55,610 --> 01:06:57,770
like counter-strike for example where I

1573
01:06:57,770 --> 01:06:59,240
mean what were you end up doing in those

1574
01:06:59,240 --> 01:07:00,620
games that you're actually running like

1575
01:07:00,620 --> 01:07:03,290
a little simulation on you're on you're

1576
01:07:03,290 --> 01:07:06,320
on your own personal machine and so that

1577
01:07:06,320 --> 01:07:08,240
you're saying hey let's move ahead and

1578
01:07:08,240 --> 01:07:10,700
shoot and it looks like it's working in

1579
01:07:10,700 --> 01:07:12,350
a computer and then like that

1580
01:07:12,350 --> 01:07:13,580
information gets sent to the server the

1581
01:07:13,580 --> 01:07:15,110
server verifies hey can you actually do

1582
01:07:15,110 --> 01:07:16,970
what you're doing but at the same ones

1583
01:07:16,970 --> 01:07:18,380
doing these simulations and that's why

1584
01:07:18,380 --> 01:07:20,240
when there's like lag and stuff you see

1585
01:07:20,240 --> 01:07:21,530
people like jumping around and stuff

1586
01:07:21,530 --> 01:07:22,970
because their simulations are in sync

1587
01:07:22,970 --> 01:07:26,410
with you yeah i don't like it i mean

1588
01:07:26,410 --> 01:07:29,420
distributing the ruleset maybe i might

1589
01:07:29,420 --> 01:07:31,850
work all right I think we're running out

1590
01:07:31,850 --> 01:07:34,820
of time oh sorry I actually you should

1591
01:07:34,820 --> 01:07:36,350
be worried about when you're optimizing

1592
01:07:36,350 --> 01:07:39,110
to you Larry do you think that libraries

1593
01:07:39,110 --> 01:07:40,700
going forward are reaching the point

1594
01:07:40,700 --> 01:07:42,010
where they're going to have to split

1595
01:07:42,010 --> 01:07:43,540
llaman

1596
01:07:43,540 --> 01:07:46,420
functions the shop we found that that

1597
01:07:46,420 --> 01:07:48,550
happens already such a small percentage

1598
01:07:48,550 --> 01:07:50,200
but I see in the next going here it

1599
01:07:50,200 --> 01:07:53,110
feels like absolutely man where you

1600
01:07:53,110 --> 01:07:55,300
can't pop much for everything so then

1601
01:07:55,300 --> 01:07:58,060
you end up you make up track flexible if

1602
01:07:58,060 --> 01:08:01,420
you made it directly simple and you know

1603
01:08:01,420 --> 01:08:03,280
where I just wear your thought like

1604
01:08:03,280 --> 01:08:05,200
where do you think that's had that's

1605
01:08:05,200 --> 01:08:09,480
tricky I mean the problem is is that i

1606
01:08:09,480 --> 01:08:14,690
don't i don't think it's possible to

1607
01:08:14,700 --> 01:08:17,170
what okay so this is I mean essentially

1608
01:08:17,170 --> 01:08:18,940
you're trying to optimize for as many

1609
01:08:18,940 --> 01:08:21,819
use cases as possible and I think it's

1610
01:08:21,819 --> 01:08:23,830
important to optimize always optimized

1611
01:08:23,830 --> 01:08:26,680
for the most common use case both in the

1612
01:08:26,680 --> 01:08:28,750
design of your API but within the

1613
01:08:28,750 --> 01:08:30,819
performance of the API as well you know

1614
01:08:30,819 --> 01:08:35,950
if if you know let's say that the the

1615
01:08:35,950 --> 01:08:38,640
common case of setting an attribute is

1616
01:08:38,640 --> 01:08:41,530
um you know that should be faster than

1617
01:08:41,530 --> 01:08:43,900
some other use case that is not so

1618
01:08:43,900 --> 01:08:47,950
common so at the very least I think that

1619
01:08:47,950 --> 01:08:51,850
when optimizing you should always go for

1620
01:08:51,850 --> 01:08:55,120
the most common case but without

1621
01:08:55,120 --> 01:08:57,069
significantly degrading the performance

1622
01:08:57,069 --> 01:09:02,500
of the other cases yeah I don't know I

1623
01:09:02,500 --> 01:09:04,960
think when the problems that comes up

1624
01:09:04,960 --> 01:09:07,780
fairly often is is that you have an API

1625
01:09:07,780 --> 01:09:10,500
structure to meet a specific need and

1626
01:09:10,500 --> 01:09:13,870
then but something else you know loses

1627
01:09:13,870 --> 01:09:18,220
out like for example jquery has CSS

1628
01:09:18,220 --> 01:09:20,859
selector support and its generic and

1629
01:09:20,859 --> 01:09:23,799
designed to support any selector but at

1630
01:09:23,799 --> 01:09:26,380
that cost is some degra gate degradation

1631
01:09:26,380 --> 01:09:28,270
and that ego has to do some string

1632
01:09:28,270 --> 01:09:30,220
parsing and determine you know what

1633
01:09:30,220 --> 01:09:34,030
exactly the user inputted and when we

1634
01:09:34,030 --> 01:09:35,290
first implemented that there were some

1635
01:09:35,290 --> 01:09:38,080
cases that lost like for example just

1636
01:09:38,080 --> 01:09:40,210
getting an element by ID that case

1637
01:09:40,210 --> 01:09:42,490
should be fast you know and that was a

1638
01:09:42,490 --> 01:09:45,520
case that lost out and so what we did

1639
01:09:45,520 --> 01:09:47,319
wind up doing is we ended doing some

1640
01:09:47,319 --> 01:09:51,190
very specific code paths in jQuery just

1641
01:09:51,190 --> 01:09:53,380
to handle that one case so in that case

1642
01:09:53,380 --> 01:09:54,520
we because that was something that

1643
01:09:54,520 --> 01:09:56,130
people did so often that

1644
01:09:56,130 --> 01:09:59,699
how to make sure that it stayed fast and

1645
01:09:59,699 --> 01:10:02,429
at the same time the generic common CSS

1646
01:10:02,429 --> 01:10:04,050
selector API you know is still what it

1647
01:10:04,050 --> 01:10:06,630
is you know it we didn't affect that in

1648
01:10:06,630 --> 01:10:10,860
any way hope that answers yeah City Hall

1649
01:10:10,860 --> 01:10:15,270
forever I think we're pretty much out of

1650
01:10:15,270 --> 01:10:17,880
time here so feel free to stab me

1651
01:10:17,880 --> 01:10:20,760
afterwards and we can chat some more but

1652
01:10:20,760 --> 01:10:32,790
yeah so thanks for having me talk

