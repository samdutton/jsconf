1
00:00:14,110 --> 00:00:19,060

thanks everybody thanks to jay s comp

2
00:00:19,060 --> 00:00:21,349
I'm going to try it the first part of

3
00:00:21,349 --> 00:00:23,090
the slides hopefully is going to be

4
00:00:23,090 --> 00:00:24,590
somewhat entertaining it's kind of a

5
00:00:24,590 --> 00:00:27,349
reminiscence of this conference and some

6
00:00:27,349 --> 00:00:28,670
other just some sort of getting started

7
00:00:28,670 --> 00:00:32,780
stuff so first of all a great big thanks

8
00:00:32,780 --> 00:00:35,690
to John Charles Sisk who's a teammate of

9
00:00:35,690 --> 00:00:37,940
virus on the kraken team who got this

10
00:00:37,940 --> 00:00:40,760
slot and then gave it to me he's not

11
00:00:40,760 --> 00:00:43,489
here he had to leave early and he sent

12
00:00:43,489 --> 00:00:45,170
us this picture in slack and he actually

13
00:00:45,170 --> 00:00:46,970
was not wearing a shirt so I did

14
00:00:46,970 --> 00:00:49,100
everybody a favor and just really

15
00:00:49,100 --> 00:00:53,839
quickly put a put a shirt on him he's

16
00:00:53,839 --> 00:00:55,369
got so much chest hair it almost looked

17
00:00:55,369 --> 00:00:56,750
like he had a sweater on but still it

18
00:00:56,750 --> 00:01:01,970
was ok also it's been a long conference

19
00:01:01,970 --> 00:01:03,680
and at this point for those of you who

20
00:01:03,680 --> 00:01:05,360
have families that didn't travel with

21
00:01:05,360 --> 00:01:07,790
you I'm sure you missed them i miss my

22
00:01:07,790 --> 00:01:10,610
daughter the movie star and my son the

23
00:01:10,610 --> 00:01:15,470
movie star it's unfortunate max max gets

24
00:01:15,470 --> 00:01:17,329
two pictures because he's he's something

25
00:01:17,329 --> 00:01:22,100
so that's him trying on my shorts I took

26
00:01:22,100 --> 00:01:26,149
a while right ok so another kind of

27
00:01:26,149 --> 00:01:28,579
reminiscence is that I grew up in the

28
00:01:28,579 --> 00:01:32,390
80s as a lot of us did and there was

29
00:01:32,390 --> 00:01:35,689
aspects of the 80s that still today seem

30
00:01:35,689 --> 00:01:36,890
like they didn't ever happen and they

31
00:01:36,890 --> 00:01:39,140
might not ever happen but they happen or

32
00:01:39,140 --> 00:01:41,060
they seem to have happened and that's

33
00:01:41,060 --> 00:01:43,939
the thing about nostalgia is that you

34
00:01:43,939 --> 00:01:45,530
know when something's happening it's

35
00:01:45,530 --> 00:01:47,210
hard to tell that it's this magical

36
00:01:47,210 --> 00:01:48,710
thing it's only later on you look back

37
00:01:48,710 --> 00:01:50,509
and you kind of pick that out as a time

38
00:01:50,509 --> 00:01:52,700
period and say you know this thing this

39
00:01:52,700 --> 00:01:56,450
thing was pretty special in fact when

40
00:01:56,450 --> 00:01:58,429
during the 80s I was spending a lot of

41
00:01:58,429 --> 00:01:59,630
time trying to pretend it wasn't

42
00:01:59,630 --> 00:02:01,159
happening because some of that you know

43
00:02:01,159 --> 00:02:03,889
some of the culture was felt you know we

44
00:02:03,889 --> 00:02:06,139
kind of felt wrong in a way but any case

45
00:02:06,139 --> 00:02:08,899
in the future keyboards will be held

46
00:02:08,899 --> 00:02:11,420
like guitars it's hard to imagine but it

47
00:02:11,420 --> 00:02:14,950
will happen someday cops will wear toms

48
00:02:14,950 --> 00:02:19,810
so no socks and they'll drive Ferraris

49
00:02:19,810 --> 00:02:22,270
there will be a media channel devoted to

50
00:02:22,270 --> 00:02:27,489
music videos and cars will have gold

51
00:02:27,489 --> 00:02:30,520
wing doors and people will dress up in

52
00:02:30,520 --> 00:02:33,550
the desperate Star Wars movies will be

53
00:02:33,550 --> 00:02:37,930
good got to look forward to that okay my

54
00:02:37,930 --> 00:02:39,910
point is it sort of made it part of my

55
00:02:39,910 --> 00:02:41,260
point is that when I when I get a few

56
00:02:41,260 --> 00:02:42,760
drinks in me all pick a ridiculous

57
00:02:42,760 --> 00:02:44,319
premise like the 80s is the future and

58
00:02:44,319 --> 00:02:45,640
I'll try to defend that while everybody

59
00:02:45,640 --> 00:02:47,080
around looks at me like I'm crazy so

60
00:02:47,080 --> 00:02:49,030
just wanted to bring that to that

61
00:02:49,030 --> 00:02:52,269
happened a couple of nights ago so let

62
00:02:52,269 --> 00:02:54,160
me move on into what's happened to

63
00:02:54,160 --> 00:02:58,150
paypal since we started using nodejs it

64
00:02:58,150 --> 00:03:01,299
came in as a prototyping framework so

65
00:03:01,299 --> 00:03:04,150
some people came over from netflix bill

66
00:03:04,150 --> 00:03:07,360
Scott Jeff Harrell Eric Toth and they

67
00:03:07,360 --> 00:03:09,989
basically said hey we want to transform

68
00:03:09,989 --> 00:03:12,220
you know what's going on at PayPal in a

69
00:03:12,220 --> 00:03:13,360
lot of ways and part of that is the

70
00:03:13,360 --> 00:03:15,599
technology so let's see if we can build

71
00:03:15,599 --> 00:03:18,519
you know product faster with nodejs then

72
00:03:18,519 --> 00:03:20,769
we were able to with job and that's

73
00:03:20,769 --> 00:03:22,269
something that happened and there's some

74
00:03:22,269 --> 00:03:24,310
talks around that Jeff's given some

75
00:03:24,310 --> 00:03:25,630
talks about that so I'm not going to go

76
00:03:25,630 --> 00:03:28,150
into great detail but the result was

77
00:03:28,150 --> 00:03:29,950
that we started developing all of our

78
00:03:29,950 --> 00:03:31,630
products all of our web and mid-tier

79
00:03:31,630 --> 00:03:34,329
products on crack and jas which sits

80
00:03:34,329 --> 00:03:38,380
over expressed so what that left us with

81
00:03:38,380 --> 00:03:40,720
was people writing applications in

82
00:03:40,720 --> 00:03:43,000
JavaScript but still writing the

83
00:03:43,000 --> 00:03:45,700
automation tests using Java using the

84
00:03:45,700 --> 00:03:47,350
framework that we use to write tests in

85
00:03:47,350 --> 00:03:53,290
Java so before I get to that if you

86
00:03:53,290 --> 00:03:55,090
weren't here for Dave cadwaladrs talk

87
00:03:55,090 --> 00:03:56,920
earlier he showed the testing pyramid

88
00:03:56,920 --> 00:03:59,709
where UI tests it at the top that's a

89
00:03:59,709 --> 00:04:01,480
great pyramid and some people at PayPal

90
00:04:01,480 --> 00:04:04,660
flight like to use that analogy as well

91
00:04:04,660 --> 00:04:06,220
it's not in my slides but I just wanted

92
00:04:06,220 --> 00:04:07,480
say you know I agree with that as well

93
00:04:07,480 --> 00:04:10,090
that UI tests you know are important and

94
00:04:10,090 --> 00:04:11,350
they sit you know on the top they

95
00:04:11,350 --> 00:04:14,650
shouldn't be everything you rely upon so

96
00:04:14,650 --> 00:04:17,709
why should you test well let's take an

97
00:04:17,709 --> 00:04:20,260
analogy so here's John Charles Sisk

98
00:04:20,260 --> 00:04:22,080
again and this is from a golfing

99
00:04:22,080 --> 00:04:24,460
excursion that I wasn't on yesterday I

100
00:04:24,460 --> 00:04:28,180
guess but we'll use golf as an analogy

101
00:04:28,180 --> 00:04:31,120
for web development or product

102
00:04:31,120 --> 00:04:32,979
development and these guys who went

103
00:04:32,979 --> 00:04:33,490
golfing

104
00:04:33,490 --> 00:04:34,990
are some of the best developers we have

105
00:04:34,990 --> 00:04:37,539
at the company so let's say they're the

106
00:04:37,539 --> 00:04:38,979
best golfers that you could possibly

107
00:04:38,979 --> 00:04:40,150
have so they went to the golf course

108
00:04:40,150 --> 00:04:43,000
with their golf sticks to knock the ball

109
00:04:43,000 --> 00:04:47,440
into the into the goal so here here's

110
00:04:47,440 --> 00:04:48,910
them starting out there having a great

111
00:04:48,910 --> 00:04:53,889
day their developers look at that that's

112
00:04:53,889 --> 00:04:56,860
beautiful form right so you know they're

113
00:04:56,860 --> 00:04:58,240
great they should never make any

114
00:04:58,240 --> 00:04:59,740
mistakes because you going out your

115
00:04:59,740 --> 00:05:01,060
golfing everything's fine you know how

116
00:05:01,060 --> 00:05:03,069
to golf you're a great golfer okay well

117
00:05:03,069 --> 00:05:04,990
but sometimes you don't have your best

118
00:05:04,990 --> 00:05:07,270
day sometimes you know maybe you stayed

119
00:05:07,270 --> 00:05:08,470
up the night before or you're just

120
00:05:08,470 --> 00:05:09,789
you're a little bit distracted so

121
00:05:09,789 --> 00:05:13,479
mistakes get made and sometimes side

122
00:05:13,479 --> 00:05:19,229
effects get introduced into your code so

123
00:05:19,229 --> 00:05:22,900
call that the side it back anyway okay

124
00:05:22,900 --> 00:05:29,590
and here's here's Jeff taking a swing so

125
00:05:29,590 --> 00:05:32,349
why test well even great developers have

126
00:05:32,349 --> 00:05:34,090
their days when something gets through

127
00:05:34,090 --> 00:05:36,400
right so that that's why test oh and

128
00:05:36,400 --> 00:05:38,050
sometimes turtles end up on the golf

129
00:05:38,050 --> 00:05:43,599
course as well moving fast for a turtle

130
00:05:43,599 --> 00:05:47,009
right okay so let's test finally

131
00:05:47,009 --> 00:05:49,719
selenium 101 for those of you who don't

132
00:05:49,719 --> 00:05:52,000
kind of use it on a day-to-day basis or

133
00:05:52,000 --> 00:05:53,440
have a lot of familiarity with it is

134
00:05:53,440 --> 00:05:56,770
this fairly complex system whereby

135
00:05:56,770 --> 00:05:58,750
you've got your language binding on the

136
00:05:58,750 --> 00:06:00,490
left there where you write your test

137
00:06:00,490 --> 00:06:02,520
whether it's in Java Python JavaScript

138
00:06:02,520 --> 00:06:05,020
and then you've got JSON wire protocol

139
00:06:05,020 --> 00:06:06,550
that communicates with some sort of

140
00:06:06,550 --> 00:06:09,460
intermediary like a browser driver so it

141
00:06:09,460 --> 00:06:10,870
might communicate with the driver on

142
00:06:10,870 --> 00:06:13,210
your system itself or it might

143
00:06:13,210 --> 00:06:15,009
communicate with the cloud that then

144
00:06:15,009 --> 00:06:17,229
opens up another target and does some

145
00:06:17,229 --> 00:06:19,960
stuff so this is this is just kind of

146
00:06:19,960 --> 00:06:22,210
again kind of 101 and there's the rabbit

147
00:06:22,210 --> 00:06:23,800
in the Hat because to me this stuff to

148
00:06:23,800 --> 00:06:25,900
the right is magic and it works or

149
00:06:25,900 --> 00:06:27,280
there's bugs and sometimes you have to

150
00:06:27,280 --> 00:06:28,659
kind of figure out what you know which

151
00:06:28,659 --> 00:06:31,030
of those components has a bug and report

152
00:06:31,030 --> 00:06:33,340
it to the selenium team but for the most

153
00:06:33,340 --> 00:06:35,620
part we're going to be on the left side

154
00:06:35,620 --> 00:06:38,560
so where does Nemo fit it fits on this

155
00:06:38,560 --> 00:06:41,500
left side where the language bindings

156
00:06:41,500 --> 00:06:44,529
were so selenium webdriver is an NPM

157
00:06:44,529 --> 00:06:47,110
module that has the JavaScript bindings

158
00:06:47,110 --> 00:06:49,600
and it starts a you know a server if

159
00:06:49,600 --> 00:06:52,360
necessary it sets capabilities it

160
00:06:52,360 --> 00:06:56,350
provides the webdriver API and it you

161
00:06:56,350 --> 00:06:58,000
know gives you the tools that you need

162
00:06:58,000 --> 00:07:00,040
to execute commands and control browser

163
00:07:00,040 --> 00:07:03,700
or device so what Nemo does is it sits

164
00:07:03,700 --> 00:07:07,990
around that it's a rapper that basically

165
00:07:07,990 --> 00:07:10,000
gives you some tools for configuring

166
00:07:10,000 --> 00:07:13,930
that webdriver and also gives you a

167
00:07:13,930 --> 00:07:16,810
plug-in capability so that you can kind

168
00:07:16,810 --> 00:07:18,820
of make the system that you need it's

169
00:07:18,820 --> 00:07:20,950
it's nothing but giving you the tools to

170
00:07:20,950 --> 00:07:23,590
make the system that you need and and

171
00:07:23,590 --> 00:07:25,180
you know we're going to look at some of

172
00:07:25,180 --> 00:07:27,550
the plugins that I've made that I think

173
00:07:27,550 --> 00:07:28,840
makes the most sense but the idea is

174
00:07:28,840 --> 00:07:31,270
that anybody can come and make their own

175
00:07:31,270 --> 00:07:33,160
set of plugins to do to do the things

176
00:07:33,160 --> 00:07:36,220
that they need to do so the the plug-in

177
00:07:36,220 --> 00:07:39,040
that I use primarily is called Nemo view

178
00:07:39,040 --> 00:07:41,920
which we're going to go into and you

179
00:07:41,920 --> 00:07:43,780
know other plugins so whatever you want

180
00:07:43,780 --> 00:07:45,190
to put in there whatever you need kind

181
00:07:45,190 --> 00:07:47,860
of a thing on top of that so at this

182
00:07:47,860 --> 00:07:49,270
point we're just launching a webdriver

183
00:07:49,270 --> 00:07:50,710
we're just launching a browser and

184
00:07:50,710 --> 00:07:52,480
running commands but you still have to

185
00:07:52,480 --> 00:07:54,100
have some sort of a test run or like

186
00:07:54,100 --> 00:07:57,600
mocha or cucumber or jasmine or whatever

187
00:07:57,600 --> 00:08:01,180
so that's something but again Nemo isn't

188
00:08:01,180 --> 00:08:02,710
prescribing what you use it's just

189
00:08:02,710 --> 00:08:04,150
saying here's here's this piece of it

190
00:08:04,150 --> 00:08:06,700
now you know you use your test runner we

191
00:08:06,700 --> 00:08:08,500
like to use mocha so all of my examples

192
00:08:08,500 --> 00:08:11,350
use mocha and then on top of that you

193
00:08:11,350 --> 00:08:14,410
need a task runner usually and at PayPal

194
00:08:14,410 --> 00:08:16,450
we've been using grunt a lot people are

195
00:08:16,450 --> 00:08:18,040
poking around with Gulf and obviously

196
00:08:18,040 --> 00:08:20,200
for private projects people are but it's

197
00:08:20,200 --> 00:08:22,090
not at least within paypal it's not

198
00:08:22,090 --> 00:08:25,030
being heavily used yet and then I heard

199
00:08:25,030 --> 00:08:26,470
of one called broccoli but I haven't

200
00:08:26,470 --> 00:08:30,100
looked into it yeah so you need kind of

201
00:08:30,100 --> 00:08:31,750
all these components to make a full

202
00:08:31,750 --> 00:08:35,350
automation solution and if you look at

203
00:08:35,350 --> 00:08:37,830
the selenium webdriver example script

204
00:08:37,830 --> 00:08:40,510
for how to get started in JavaScript

205
00:08:40,510 --> 00:08:44,050
this is the basic script that you see so

206
00:08:44,050 --> 00:08:45,670
what we want to do was to take it from

207
00:08:45,670 --> 00:08:49,360
here to here so that all this all this

208
00:08:49,360 --> 00:08:50,980
other stuff like you see a lot of

209
00:08:50,980 --> 00:08:54,460
configuration here is put somewhere else

210
00:08:54,460 --> 00:08:57,550
so this is basically what an emo you

211
00:08:57,550 --> 00:08:59,010
know installation might look like

212
00:08:59,010 --> 00:09:00,720
and then of course we want to add some

213
00:09:00,720 --> 00:09:02,520
error handling into the end of the call

214
00:09:02,520 --> 00:09:05,040
back because it's often you know with

215
00:09:05,040 --> 00:09:06,300
the configurations wrong you're going to

216
00:09:06,300 --> 00:09:07,440
get an error back and if you don't do

217
00:09:07,440 --> 00:09:11,280
this you're not going to see it okay so

218
00:09:11,280 --> 00:09:13,020
again we're going to research back what

219
00:09:13,020 --> 00:09:15,630
is Nemo do it loads JSON configuration

220
00:09:15,630 --> 00:09:18,690
using a module called kind of fee which

221
00:09:18,690 --> 00:09:22,080
is used within Kraken as well it

222
00:09:22,080 --> 00:09:24,720
basically does JSON but it does

223
00:09:24,720 --> 00:09:26,280
overrides and it also has something

224
00:09:26,280 --> 00:09:27,930
called shortstop handlers which makes

225
00:09:27,930 --> 00:09:29,640
the it just gives you a lot of

226
00:09:29,640 --> 00:09:32,040
dimensions of control when you're when

227
00:09:32,040 --> 00:09:34,290
you're doing your configuration so Nemo

228
00:09:34,290 --> 00:09:36,000
also takes that configuration and it

229
00:09:36,000 --> 00:09:38,610
starts the webdriver it initializes your

230
00:09:38,610 --> 00:09:41,010
plugins and provides you access to that

231
00:09:41,010 --> 00:09:44,430
to that whole API of the Nemo API so

232
00:09:44,430 --> 00:09:45,810
first of all it gives you the webdriver

233
00:09:45,810 --> 00:09:47,880
API on the namespace that it gives you

234
00:09:47,880 --> 00:09:50,310
back you get the driver and WD which are

235
00:09:50,310 --> 00:09:53,130
the two major components of the selenium

236
00:09:53,130 --> 00:09:58,110
webdriver API so let's talk about confi

237
00:09:58,110 --> 00:10:00,570
for a minute just to explore how the

238
00:10:00,570 --> 00:10:06,630
configuration works so comfy gives you

239
00:10:06,630 --> 00:10:08,820
something called the the node n override

240
00:10:08,820 --> 00:10:12,540
so the value of the node n variable in

241
00:10:12,540 --> 00:10:15,300
your environment can determine sort of

242
00:10:15,300 --> 00:10:17,280
what overrides get used in your in your

243
00:10:17,280 --> 00:10:19,440
configuration and on top of that it uses

244
00:10:19,440 --> 00:10:21,030
something called a shortstop in

245
00:10:21,030 --> 00:10:23,490
shortstop handlers which was also built

246
00:10:23,490 --> 00:10:25,850
by the Kraken team and these would be

247
00:10:25,850 --> 00:10:28,440
values that you put in your JSON where

248
00:10:28,440 --> 00:10:32,310
if a handler is encountered so let's say

249
00:10:32,310 --> 00:10:35,300
that a JSON value has this handler n

250
00:10:35,300 --> 00:10:37,830
then shortstop's going to look in the

251
00:10:37,830 --> 00:10:40,140
environment for this this variable foo

252
00:10:40,140 --> 00:10:43,440
and replace in the JSON that value so

253
00:10:43,440 --> 00:10:45,060
these shortstop handlers do various

254
00:10:45,060 --> 00:10:49,800
things there's n path RV and config that

255
00:10:49,800 --> 00:10:51,870
that basically take your JSON and make

256
00:10:51,870 --> 00:10:54,300
it a lot more intelligent and again give

257
00:10:54,300 --> 00:10:56,010
you more dimensions of control over your

258
00:10:56,010 --> 00:10:58,860
configuration so what what your

259
00:10:58,860 --> 00:11:00,270
configuration directory might look like

260
00:11:00,270 --> 00:11:02,850
if you're using Nemo would be that you'd

261
00:11:02,850 --> 00:11:05,370
have your main config JSON and then

262
00:11:05,370 --> 00:11:08,040
you'd have other environment specific

263
00:11:08,040 --> 00:11:10,170
override files like here we've got a OS

264
00:11:10,170 --> 00:11:12,510
driver local perfecto mobile

265
00:11:12,510 --> 00:11:14,040
Labs it just it depends on what you're

266
00:11:14,040 --> 00:11:16,710
doing what those might be and to give

267
00:11:16,710 --> 00:11:18,420
some sense of what the configuration

268
00:11:18,420 --> 00:11:19,980
would look like just your basic

269
00:11:19,980 --> 00:11:22,050
configuration tells the driver to launch

270
00:11:22,050 --> 00:11:24,120
this browser and then there's the

271
00:11:24,120 --> 00:11:27,960
plugins and the data properties which

272
00:11:27,960 --> 00:11:29,550
which are optional but we'll get into

273
00:11:29,550 --> 00:11:32,250
those a bit later and sauce labs might

274
00:11:32,250 --> 00:11:33,750
look more like this where we're telling

275
00:11:33,750 --> 00:11:35,490
the webdriver some other stuff like you

276
00:11:35,490 --> 00:11:37,350
know what's my sauce username what's my

277
00:11:37,350 --> 00:11:39,630
sauce key and you can see that we're

278
00:11:39,630 --> 00:11:41,490
using the end of shortstop handler so

279
00:11:41,490 --> 00:11:43,650
that our you know on your local machine

280
00:11:43,650 --> 00:11:45,630
you've got your key you know there but

281
00:11:45,630 --> 00:11:48,180
it's not checked into source control so

282
00:11:48,180 --> 00:11:49,830
there's like a sauce labs kind of config

283
00:11:49,830 --> 00:11:53,880
and perfecto mobile is another another

284
00:11:53,880 --> 00:11:55,770
cloud based testing service and they use

285
00:11:55,770 --> 00:11:58,950
a different set of capabilities iOS

286
00:11:58,950 --> 00:12:00,330
driver the same thing you're just

287
00:12:00,330 --> 00:12:02,130
basically giving the webdriver different

288
00:12:02,130 --> 00:12:06,180
stuff to contact a different driver so

289
00:12:06,180 --> 00:12:08,120
really quickly we're going to do a

290
00:12:08,120 --> 00:12:11,460
screencast which hopefully you can see

291
00:12:11,460 --> 00:12:12,870
if you're sitting a bit far away i'll

292
00:12:12,870 --> 00:12:15,510
try and zoom in if it makes sense at

293
00:12:15,510 --> 00:12:18,570
times so this is an example that comes

294
00:12:18,570 --> 00:12:20,910
in the nemo repository if you clone it

295
00:12:20,910 --> 00:12:22,670
there's just an examples directory and

296
00:12:22,670 --> 00:12:28,200
here we're giving a base directory into

297
00:12:28,200 --> 00:12:29,670
the nemo constructor which isn't

298
00:12:29,670 --> 00:12:32,100
standard but just in terms of showing an

299
00:12:32,100 --> 00:12:33,620
example this is this is one way to do it

300
00:12:33,620 --> 00:12:35,850
and if you look in that directory that

301
00:12:35,850 --> 00:12:37,590
it's pointing to there's this config

302
00:12:37,590 --> 00:12:43,230
JSON and it's got a the driver section

303
00:12:43,230 --> 00:12:49,710
in a browser section and we're just

304
00:12:49,710 --> 00:12:51,210
going to go ahead and run that and see

305
00:12:51,210 --> 00:12:54,960
what browser we open the Firefox opens

306
00:12:54,960 --> 00:12:57,920
up we got a little printout that says

307
00:12:57,920 --> 00:13:07,040
successfully launched Firefox

308
00:13:07,050 --> 00:13:09,720
so if we set the node environment

309
00:13:09,720 --> 00:13:15,990
variable to special a little bit so this

310
00:13:15,990 --> 00:13:18,000
time we launched phantom j/s just by

311
00:13:18,000 --> 00:13:20,130
resetting the the node environment

312
00:13:20,130 --> 00:13:22,470
variable and that's because in this

313
00:13:22,470 --> 00:13:26,029
special JSON and the driver section were

314
00:13:26,029 --> 00:13:30,870
specifying phantom jas so that's to

315
00:13:30,870 --> 00:13:32,640
illustrate the the environment variable

316
00:13:32,640 --> 00:13:38,850
type of override so the next thing is

317
00:13:38,850 --> 00:13:41,339
that notice that there's this shortstop

318
00:13:41,339 --> 00:13:43,290
handler here that says config colon

319
00:13:43,290 --> 00:13:45,089
browser so that's at the shortstop

320
00:13:45,089 --> 00:13:46,769
handle that saying look look for this

321
00:13:46,769 --> 00:13:49,110
browser configuration property and get

322
00:13:49,110 --> 00:13:51,390
that value and another feature of

323
00:13:51,390 --> 00:13:53,250
shortstop is that if you have something

324
00:13:53,250 --> 00:13:54,600
at the base of your JSON you can

325
00:13:54,600 --> 00:13:57,149
override it with an RV or an environment

326
00:13:57,149 --> 00:13:58,500
variable so we're going to show that by

327
00:13:58,500 --> 00:14:01,519
specifying RV to Chrome and launched

328
00:14:01,519 --> 00:14:05,820
chrome instead you can also set an

329
00:14:05,820 --> 00:14:07,709
environment variable of browser and do

330
00:14:07,709 --> 00:14:09,480
the same thing so this is this is just a

331
00:14:09,480 --> 00:14:18,029
little confusing phantom jas in the

332
00:14:18,029 --> 00:14:20,490
environment variable and that should

333
00:14:20,490 --> 00:14:22,350
launch phantom j/s so we won't actually

334
00:14:22,350 --> 00:14:28,860
see a browser open

335
00:14:28,870 --> 00:14:31,900
and then just to kind of drive the point

336
00:14:31,900 --> 00:14:33,970
home if you use both at the same time if

337
00:14:33,970 --> 00:14:35,500
you use an environment variable of

338
00:14:35,500 --> 00:14:38,800
browser and an RV of browser which one

339
00:14:38,800 --> 00:14:40,540
would would take precedence and I think

340
00:14:40,540 --> 00:14:44,020
most people would expect that the RV

341
00:14:44,020 --> 00:14:45,700
would take precedence which it does so

342
00:14:45,700 --> 00:14:48,210
we launched chrome in that last example

343
00:14:48,210 --> 00:14:50,560
so that is just a quick intro to

344
00:14:50,560 --> 00:14:52,480
basically how you can do file based

345
00:14:52,480 --> 00:14:53,950
overrides in a little bit of shortstop

346
00:14:53,950 --> 00:14:58,480
handler business within within Nemo the

347
00:14:58,480 --> 00:15:01,690
second major component of Nemo is plugin

348
00:15:01,690 --> 00:15:03,430
so let's talk about those what would be

349
00:15:03,430 --> 00:15:05,710
in a plug-in you might have webdriver

350
00:15:05,710 --> 00:15:07,690
abstractions so some combination of

351
00:15:07,690 --> 00:15:09,490
things that make sense together you

352
00:15:09,490 --> 00:15:11,410
might put user interactions together in

353
00:15:11,410 --> 00:15:12,700
a plug-in because you want to share it

354
00:15:12,700 --> 00:15:15,610
between projects or you're a company

355
00:15:15,610 --> 00:15:18,130
that does stuff internally for testing

356
00:15:18,130 --> 00:15:20,050
you might put proprietary sort of

357
00:15:20,050 --> 00:15:23,770
functionality in a plug-in and a plug-in

358
00:15:23,770 --> 00:15:25,029
basically looks something like this

359
00:15:25,029 --> 00:15:29,560
where you've got a setup function that

360
00:15:29,560 --> 00:15:31,360
gets exported from your module and that

361
00:15:31,360 --> 00:15:32,560
setup function just has a simple

362
00:15:32,560 --> 00:15:34,900
signature of taking the Nemo object and

363
00:15:34,900 --> 00:15:38,560
a callback and then you add something to

364
00:15:38,560 --> 00:15:41,140
the Nemo namespace so for example sorry

365
00:15:41,140 --> 00:15:43,779
example Nemo dot log in is saying that

366
00:15:43,779 --> 00:15:45,790
when the Nemo object gets resolved now

367
00:15:45,790 --> 00:15:48,700
we've got this Nemo dot log in namespace

368
00:15:48,700 --> 00:15:50,920
in this case it's a function that that's

369
00:15:50,920 --> 00:15:53,260
going to log you in so I just you know

370
00:15:53,260 --> 00:15:54,730
put a comment in there and said this is

371
00:15:54,730 --> 00:15:57,400
webdriver stuff that will log you in so

372
00:15:57,400 --> 00:16:01,690
that's basically what what a plug-in

373
00:16:01,690 --> 00:16:04,390
looks like and if you want to configure

374
00:16:04,390 --> 00:16:06,459
a plug-in you just add it to the to the

375
00:16:06,459 --> 00:16:09,490
configuration you say my plugins called

376
00:16:09,490 --> 00:16:10,990
log in and the module is either

377
00:16:10,990 --> 00:16:13,029
somewhere in my file path or it's

378
00:16:13,029 --> 00:16:15,370
actually module in my dependency tree in

379
00:16:15,370 --> 00:16:19,000
this case it's in the file path and to

380
00:16:19,000 --> 00:16:20,890
use it once you've got an emo resolved

381
00:16:20,890 --> 00:16:23,410
and back to you you just call it an

382
00:16:23,410 --> 00:16:24,880
emote log in and you pass whatever

383
00:16:24,880 --> 00:16:26,800
parameters so that's how you author

384
00:16:26,800 --> 00:16:31,630
register and use a plug-in and the

385
00:16:31,630 --> 00:16:33,580
plug-in that I authored to be sort of

386
00:16:33,580 --> 00:16:35,860
our you know favorite or promoted

387
00:16:35,860 --> 00:16:38,200
webdriver abstraction is called Nemo

388
00:16:38,200 --> 00:16:41,920
view and if you look at that here's sort

389
00:16:41,920 --> 00:16:42,970
of three levels the first

390
00:16:42,970 --> 00:16:45,100
level is what you would do in basic web

391
00:16:45,100 --> 00:16:47,649
driver to find an element and click on

392
00:16:47,649 --> 00:16:50,379
it the second line is what you do with

393
00:16:50,379 --> 00:16:52,209
Nemo view if you use these underscore

394
00:16:52,209 --> 00:16:54,129
methods that just take a simplified

395
00:16:54,129 --> 00:16:57,670
locator basically we're providing a CSS

396
00:16:57,670 --> 00:16:59,500
locator and then you can click on it and

397
00:16:59,500 --> 00:17:01,600
then the third level is if you use the

398
00:17:01,600 --> 00:17:05,010
locator abstraction which will namespace

399
00:17:05,010 --> 00:17:07,480
sets of locators so in this case Nemo

400
00:17:07,480 --> 00:17:10,630
view Nev bank is just going to give you

401
00:17:10,630 --> 00:17:12,220
back your web element and then you click

402
00:17:12,220 --> 00:17:13,780
on it see these are sort of the three

403
00:17:13,780 --> 00:17:16,390
layers I think you'd probably agree that

404
00:17:16,390 --> 00:17:18,970
the third is more palatable than the

405
00:17:18,970 --> 00:17:21,579
first so what we'll drill into that a

406
00:17:21,579 --> 00:17:25,809
little bit first of all this is how you

407
00:17:25,809 --> 00:17:27,909
would register Nemo view it's a module

408
00:17:27,909 --> 00:17:30,130
from NPM so it would look like this you

409
00:17:30,130 --> 00:17:32,710
you say I have this view plug-in with

410
00:17:32,710 --> 00:17:36,370
module of an emo view and what it gives

411
00:17:36,370 --> 00:17:37,840
you by default is it gives you these

412
00:17:37,840 --> 00:17:41,610
basic abstraction methods that you

413
00:17:41,610 --> 00:17:44,320
supply just a string to and then you get

414
00:17:44,320 --> 00:17:46,630
you get your element back so there's

415
00:17:46,630 --> 00:17:48,610
fine finds present visible wait wait

416
00:17:48,610 --> 00:17:50,650
visible and first visible the last two

417
00:17:50,650 --> 00:17:52,299
are kind of the ones that I use a lot

418
00:17:52,299 --> 00:17:55,059
for asynchronous testing that way you

419
00:17:55,059 --> 00:17:56,890
don't do stuff like put you know ten

420
00:17:56,890 --> 00:17:58,690
second time outs between this command

421
00:17:58,690 --> 00:17:59,919
and you know wait for the next thing

422
00:17:59,919 --> 00:18:00,760
because that's always going to be

423
00:18:00,760 --> 00:18:04,450
brittle so for example this is adding a

424
00:18:04,450 --> 00:18:05,950
bank in the sample application that

425
00:18:05,950 --> 00:18:08,260
we're going to see in a minute and I'll

426
00:18:08,260 --> 00:18:09,730
just kind of leave it there for a second

427
00:18:09,730 --> 00:18:16,740
so you can take a look

428
00:18:16,750 --> 00:18:19,120
okay so the next layer if you're not

429
00:18:19,120 --> 00:18:21,160
just using the the generic abstractions

430
00:18:21,160 --> 00:18:22,930
is to say I want to have a set of

431
00:18:22,930 --> 00:18:25,450
locator files to store my locators in so

432
00:18:25,450 --> 00:18:28,030
that they're shareable across files and

433
00:18:28,030 --> 00:18:30,670
locations so I'm going to specify this

434
00:18:30,670 --> 00:18:33,340
argument to Nemo view that says look in

435
00:18:33,340 --> 00:18:34,630
this directory there's some files there

436
00:18:34,630 --> 00:18:36,280
you should be interested in so there's

437
00:18:36,280 --> 00:18:38,740
this locator directory that you should

438
00:18:38,740 --> 00:18:40,150
look at so here's an example of a

439
00:18:40,150 --> 00:18:42,790
locator file it's just simple JSON and

440
00:18:42,790 --> 00:18:44,800
you can see that it's got a type and a

441
00:18:44,800 --> 00:18:46,920
locator so this is just defining

442
00:18:46,920 --> 00:18:51,700
elements for in this case a bank a bank

443
00:18:51,700 --> 00:18:54,040
form so there's a number routing button

444
00:18:54,040 --> 00:18:55,960
and then success and failure and we see

445
00:18:55,960 --> 00:18:58,090
how those are used in a minute so what

446
00:18:58,090 --> 00:18:59,800
happens is that Nemo view is going to

447
00:18:59,800 --> 00:19:02,110
generate functions that something

448
00:19:02,110 --> 00:19:04,060
javascript is great at its generating

449
00:19:04,060 --> 00:19:05,860
dynamic functions for each of the

450
00:19:05,860 --> 00:19:09,580
locators so look at the number and for

451
00:19:09,580 --> 00:19:10,840
the number you're going to get all these

452
00:19:10,840 --> 00:19:12,910
functions back you're going to get the

453
00:19:12,910 --> 00:19:14,830
basic one which returns the web element

454
00:19:14,830 --> 00:19:17,020
and then all these other ones that can

455
00:19:17,020 --> 00:19:20,290
do different things so this is what it

456
00:19:20,290 --> 00:19:23,530
looks like to add a bank using using

457
00:19:23,530 --> 00:19:26,200
that view so you're you're we're setting

458
00:19:26,200 --> 00:19:28,150
a couple of convenience variables and

459
00:19:28,150 --> 00:19:31,120
then we're using the the Nemo view

460
00:19:31,120 --> 00:19:36,110
methods to work through that that you I

461
00:19:36,120 --> 00:19:39,100
okay so let's really quickly this is

462
00:19:39,100 --> 00:19:42,000
about a five minute demo it's going to

463
00:19:42,000 --> 00:19:44,260
basically cover those points that I

464
00:19:44,260 --> 00:19:46,420
covered and we'll just do it again using

465
00:19:46,420 --> 00:19:47,920
the sample app this is something you can

466
00:19:47,920 --> 00:19:50,380
clone right now and an NPM install and

467
00:19:50,380 --> 00:19:52,720
just get it running what it is is it's

468
00:19:52,720 --> 00:19:54,550
called pay friend so it's like a little

469
00:19:54,550 --> 00:19:57,670
mini kind of PayPal type of application

470
00:19:57,670 --> 00:20:00,670
with with a sink it looks like one page

471
00:20:00,670 --> 00:20:02,590
application behavior so it gives you

472
00:20:02,590 --> 00:20:04,170
like a three-second weight between each

473
00:20:04,170 --> 00:20:07,870
activity so you can say fail at fail

474
00:20:07,870 --> 00:20:09,430
calm and it will fail log in and

475
00:20:09,430 --> 00:20:14,470
anything else would be success and then

476
00:20:14,470 --> 00:20:15,820
there's a couple of forms who's adding a

477
00:20:15,820 --> 00:20:17,260
cardan adding a bank and both of those

478
00:20:17,260 --> 00:20:18,910
also have the sort of success and

479
00:20:18,910 --> 00:20:37,960
failure scenarios

480
00:20:37,970 --> 00:20:42,020
so 100 100 1 is the failure number and

481
00:20:42,020 --> 00:20:44,090
anything else is success for these for

482
00:20:44,090 --> 00:20:51,150
these performs and you can log back out

483
00:20:51,160 --> 00:20:53,720
so what we're going to do is we're going

484
00:20:53,720 --> 00:20:55,880
to walk through sort of the timeline of

485
00:20:55,880 --> 00:20:58,400
how you would test an application so for

486
00:20:58,400 --> 00:21:00,440
example and this is just the

487
00:21:00,440 --> 00:21:03,410
configuration again but when you first

488
00:21:03,410 --> 00:21:05,630
start testing an application you're just

489
00:21:05,630 --> 00:21:07,070
kind of writing the test on the flyer

490
00:21:07,070 --> 00:21:09,590
just throwing the script together so it

491
00:21:09,590 --> 00:21:13,890
looks something like this generic spec

492
00:21:13,900 --> 00:21:17,000
where you know your locators are just

493
00:21:17,000 --> 00:21:18,500
right right in the file everything's

494
00:21:18,500 --> 00:21:20,270
just kind of like a big script literally

495
00:21:20,270 --> 00:21:22,580
it's just a big functional script so

496
00:21:22,580 --> 00:21:23,690
this is kind of what it looks like so

497
00:21:23,690 --> 00:21:26,450
you're using the generic methods to to

498
00:21:26,450 --> 00:21:29,540
run through the UI to to login add a

499
00:21:29,540 --> 00:21:39,980
card at a bank account

500
00:21:39,990 --> 00:21:42,240
okay so we're going to run that and it's

501
00:21:42,240 --> 00:21:55,630
using the mocha runner on webstorm

502
00:21:55,640 --> 00:21:57,260
and it just runs through all those

503
00:21:57,260 --> 00:22:03,290
scenarios and you can use any you don't

504
00:22:03,290 --> 00:22:06,560
have to use CSS locators you can use ID

505
00:22:06,560 --> 00:22:08,960
locators or any of the other available

506
00:22:08,960 --> 00:22:19,440
selenium locators

507
00:22:19,450 --> 00:22:22,720
okay so the next step of testing an

508
00:22:22,720 --> 00:22:25,210
application once once the UI starts to

509
00:22:25,210 --> 00:22:26,740
harden a bit is that you say well I want

510
00:22:26,740 --> 00:22:29,230
to start taking these locators out and I

511
00:22:29,230 --> 00:22:30,370
want to start putting them in a

512
00:22:30,370 --> 00:22:32,440
shareable location and that's where we

513
00:22:32,440 --> 00:22:35,470
would start using locator files so again

514
00:22:35,470 --> 00:22:38,529
we're telling nemo or an emo view rather

515
00:22:38,529 --> 00:22:40,090
to look for these JSON files in this

516
00:22:40,090 --> 00:22:45,970
directory so we've got this is bank card

517
00:22:45,970 --> 00:22:48,250
login and nav so these are basically in

518
00:22:48,250 --> 00:22:50,470
my mind when I when I split this

519
00:22:50,470 --> 00:22:53,320
application of those were the four parts

520
00:22:53,320 --> 00:22:55,690
of it and here's all the locators that

521
00:22:55,690 --> 00:23:03,279
you would need and and this would be the

522
00:23:03,279 --> 00:23:05,289
next step of the testing process where

523
00:23:05,289 --> 00:23:08,260
now we're using the locator files

524
00:23:08,260 --> 00:23:10,600
instead of the the generic methods so

525
00:23:10,600 --> 00:23:13,630
we're using the login view the card view

526
00:23:13,630 --> 00:23:16,690
the nav view and the bank view to run

527
00:23:16,690 --> 00:23:22,929
the test now so I'm just pointing out

528
00:23:22,929 --> 00:23:24,610
that there's the email locator and then

529
00:23:24,610 --> 00:23:26,019
there's all these functions that are

530
00:23:26,019 --> 00:23:27,789
built off of the email locator like wait

531
00:23:27,789 --> 00:23:29,320
visible so if the page is loading it

532
00:23:29,320 --> 00:23:31,330
will wait until it sees that element

533
00:23:31,330 --> 00:23:32,740
before it moves on and does these other

534
00:23:32,740 --> 00:23:53,110
things

535
00:23:53,120 --> 00:23:55,010
and just to compare back again that's

536
00:23:55,010 --> 00:23:58,490
the generic spec so we'll run the view

537
00:23:58,490 --> 00:24:00,590
based one and I didn't mention it but we

538
00:24:00,590 --> 00:24:02,420
did mention if we're using mocha to run

539
00:24:02,420 --> 00:24:04,070
these tests so you'll see mocha syntax

540
00:24:04,070 --> 00:24:30,780
around the webdriver commands

541
00:24:30,790 --> 00:24:34,000
okay so the final step in cleaning all

542
00:24:34,000 --> 00:24:35,590
this up is to say now I want to take

543
00:24:35,590 --> 00:24:38,140
similar functionality and group it

544
00:24:38,140 --> 00:24:39,700
together in different modules so for

545
00:24:39,700 --> 00:24:43,390
example i made this file navigate j/s

546
00:24:43,390 --> 00:24:45,160
that has all my navigation commands in

547
00:24:45,160 --> 00:24:49,360
it and is using the navigation view and

548
00:24:49,360 --> 00:24:51,240
some of the other views to do its work

549
00:24:51,240 --> 00:24:53,740
so this is this is you know you could do

550
00:24:53,740 --> 00:24:55,180
it however you want in your own project

551
00:24:55,180 --> 00:24:56,500
but this is the pattern that i recommend

552
00:24:56,500 --> 00:24:59,200
to people which is you know create these

553
00:24:59,200 --> 00:25:01,420
these flow files i call them and and

554
00:25:01,420 --> 00:25:02,890
kind of group similar functionality

555
00:25:02,890 --> 00:25:05,260
together and then when you write your

556
00:25:05,260 --> 00:25:09,850
tests the the actual code that you write

557
00:25:09,850 --> 00:25:11,320
is going to look very semantic and it's

558
00:25:11,320 --> 00:25:12,940
going to be pretty explanatory as far as

559
00:25:12,940 --> 00:25:14,770
what your test is doing so here I'm

560
00:25:14,770 --> 00:25:17,350
pulling in these three modules I'm

561
00:25:17,350 --> 00:25:19,090
puffing them up with the Nemo object

562
00:25:19,090 --> 00:25:22,240
when Nemo resolves and then in the

563
00:25:22,240 --> 00:25:23,950
actual test itself you can see again

564
00:25:23,950 --> 00:25:26,500
this is very I mean it's almost I mean

565
00:25:26,500 --> 00:25:27,880
you could read it even if you didn't

566
00:25:27,880 --> 00:25:29,470
know JavaScript okay we're logging in

567
00:25:29,470 --> 00:25:31,600
failure success for card adding success

568
00:25:31,600 --> 00:25:45,789
and failure Bank success and failure

569
00:25:45,799 --> 00:25:47,869
and as you can imagine it's all going to

570
00:25:47,869 --> 00:25:49,519
work because it's a screencast and I

571
00:25:49,519 --> 00:25:51,200
like to stay away from the demo you know

572
00:25:51,200 --> 00:26:00,470
the demo demons

573
00:26:00,480 --> 00:26:02,429
so that's basically a walkthrough of

574
00:26:02,429 --> 00:26:04,200
nemo view and the way that you would go

575
00:26:04,200 --> 00:26:06,660
from the first writing of your test to

576
00:26:06,660 --> 00:26:07,919
the third where everything's packed away

577
00:26:07,919 --> 00:26:12,390
in a nice way and and reusable okay and

578
00:26:12,390 --> 00:26:14,669
just a reminder at this point is that

579
00:26:14,669 --> 00:26:16,380
this is this is how I train people to

580
00:26:16,380 --> 00:26:18,150
use Nemo within paypal that doesn't mean

581
00:26:18,150 --> 00:26:19,350
this is the way that you would have to

582
00:26:19,350 --> 00:26:21,470
use it Nemo again it's just a simple

583
00:26:21,470 --> 00:26:23,940
webdriver abstraction that allows you to

584
00:26:23,940 --> 00:26:27,390
to add plugins and do the configuration

585
00:26:27,390 --> 00:26:28,650
using can feel like we talked about

586
00:26:28,650 --> 00:26:32,220
before so I'm I have seen and I'm

587
00:26:32,220 --> 00:26:34,470
looking forward to seeing more examples

588
00:26:34,470 --> 00:26:36,360
of how to use it from other people who

589
00:26:36,360 --> 00:26:38,580
start to add their favorite modules in

590
00:26:38,580 --> 00:26:40,350
their favorite you know task and test

591
00:26:40,350 --> 00:26:43,770
runners around it and to get started to

592
00:26:43,770 --> 00:26:45,120
look at that stuff and to play around

593
00:26:45,120 --> 00:26:46,110
with the code that we looked at today

594
00:26:46,110 --> 00:26:49,169
you just have to clone the Nemo example

595
00:26:49,169 --> 00:26:52,980
app and we're looking for contributors

596
00:26:52,980 --> 00:26:54,900
and I didn't I didn't mention it at the

597
00:26:54,900 --> 00:26:56,429
outset but Nemo was actually named after

598
00:26:56,429 --> 00:26:58,710
Captain Nemo the scary sea captain guy

599
00:26:58,710 --> 00:27:00,540
and not the little fish so here's

600
00:27:00,540 --> 00:27:02,520
captain nemo looking for contributors

601
00:27:02,520 --> 00:27:05,850
and what we're looking for is help doing

602
00:27:05,850 --> 00:27:08,160
stuff like fixing the generator that we

603
00:27:08,160 --> 00:27:09,720
have a yeoman generator but it's not

604
00:27:09,720 --> 00:27:11,910
generic enough so i didn't really want

605
00:27:11,910 --> 00:27:14,370
to promote it today it does it does do

606
00:27:14,370 --> 00:27:16,260
some things but not to the point where i

607
00:27:16,260 --> 00:27:18,330
really want to talk about it some golf

608
00:27:18,330 --> 00:27:19,980
examples some mobile examples would be

609
00:27:19,980 --> 00:27:23,940
nice and we heard about Magellan earlier

610
00:27:23,940 --> 00:27:25,290
today so maybe that's something we can

611
00:27:25,290 --> 00:27:27,299
integrate in the future as well but we'd

612
00:27:27,299 --> 00:27:28,679
have to we'd have to look into that and

613
00:27:28,679 --> 00:27:31,799
i think that's my last slide asked me

614
00:27:31,799 --> 00:27:33,270
for a sticker I've got I've got stickers

615
00:27:33,270 --> 00:27:34,860
up here with the little guy on them so

