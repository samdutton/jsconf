1
00:00:12,490 --> 00:00:14,690

first of all thank you very much for

2
00:00:14,690 --> 00:00:16,279
having me here today I'm so excited to

3
00:00:16,279 --> 00:00:18,770
be in Buda this is my first time and I'm

4
00:00:18,770 --> 00:00:20,270
loving the city I don't want to ever

5
00:00:20,270 --> 00:00:24,230
live here but um Who am I who is this

6
00:00:24,230 --> 00:00:26,630
random girl here in stage uh my name is

7
00:00:26,630 --> 00:00:28,490
Claire my missus I said before and I am

8
00:00:28,490 --> 00:00:30,380
a Mexican front-end developer in a

9
00:00:30,380 --> 00:00:32,449
digital agency in Paris and if you have

10
00:00:32,449 --> 00:00:34,610
any questions comments or complaints or

11
00:00:34,610 --> 00:00:35,600
perhaps you want to see my awesome

12
00:00:35,600 --> 00:00:37,519
pictures of Budapest you can now find me

13
00:00:37,519 --> 00:00:52,760
on twitter as Kosti for because for the

14
00:00:52,760 --> 00:00:54,079
following half an hour I'm actually

15
00:00:54,079 --> 00:00:55,700
going to be your own personal wardrobe

16
00:00:55,700 --> 00:00:57,110
and I'm going to be showing you a

17
00:00:57,110 --> 00:00:58,879
collection of oddities and unexpected

18
00:00:58,879 --> 00:01:00,140
behaviors that I hope that are gonna

19
00:01:00,140 --> 00:01:03,860
surely make you mine strip but first of

20
00:01:03,860 --> 00:01:05,180
all just a little bit of a disclaimer

21
00:01:05,180 --> 00:01:06,320
because I love these flavors

22
00:01:06,320 --> 00:01:09,710
um I ain't no expert but I'm a highly

23
00:01:09,710 --> 00:01:11,720
clearest person and I just need to know

24
00:01:11,720 --> 00:01:13,820
how things work so today I'm gonna share

25
00:01:13,820 --> 00:01:15,650
with you some of my personal discoveries

26
00:01:15,650 --> 00:01:17,180
in hopes that it will help you as well

27
00:01:17,180 --> 00:01:20,000
um discover some of clear up some of the

28
00:01:20,000 --> 00:01:21,680
weirdness JavaScript caches that you may

29
00:01:21,680 --> 00:01:23,450
encounter integers are individual asset

30
00:01:23,450 --> 00:01:26,180
a script developer so what I'm gonna

31
00:01:26,180 --> 00:01:28,369
show you next is actual unseen footage

32
00:01:28,369 --> 00:01:34,040
of Brendan Eich mountain for creating or

33
00:01:34,040 --> 00:01:35,180
at least it's how I picture him a

34
00:01:35,180 --> 00:01:38,210
imagine in JavaScript but of course I'm

35
00:01:38,210 --> 00:01:39,530
just kidding I don't when I getting shot

36
00:01:39,530 --> 00:01:42,619
with mister like um what hold up am I

37
00:01:42,619 --> 00:01:47,310
really kidding

38
00:01:47,320 --> 00:01:49,490
javascript is the kind of language where

39
00:01:49,490 --> 00:01:52,640
nothing is what it is cuz everything is

40
00:01:52,640 --> 00:01:55,130
what it isn't and um contrariwise what

41
00:01:55,130 --> 00:01:57,740
is it's not you know what it's not yes

42
00:01:57,740 --> 00:02:00,950
you see oh no a person just trying to

43
00:02:00,950 --> 00:02:02,420
myself with you guys before I even begin

44
00:02:02,420 --> 00:02:05,180
talking but um in all seriousness if

45
00:02:05,180 --> 00:02:06,259
you're curious about the previous

46
00:02:06,259 --> 00:02:06,920
examples

47
00:02:06,920 --> 00:02:08,840
they're just either the result of

48
00:02:08,840 --> 00:02:10,429
inconsistencies with floating point math

49
00:02:10,429 --> 00:02:12,890
that okay to be quite a fair it's not

50
00:02:12,890 --> 00:02:14,390
only an issue in JavaScript but also you

51
00:02:14,390 --> 00:02:15,799
know their own languages that uses

52
00:02:15,799 --> 00:02:18,140
floating-point numbers they're also the

53
00:02:18,140 --> 00:02:20,150
result of either the way JavaScript

54
00:02:20,150 --> 00:02:22,400
interprets okto integers and

55
00:02:22,400 --> 00:02:25,250
so knowing the fact of the difference

56
00:02:25,250 --> 00:02:28,010
between reference and primitive types so

57
00:02:28,010 --> 00:02:29,569
you know the thing is that javascript is

58
00:02:29,569 --> 00:02:31,250
awesome that's why we're all here

59
00:02:31,250 --> 00:02:32,959
because we love JavaScript well then

60
00:02:32,959 --> 00:02:34,879
that javascript is really easy to learn

61
00:02:34,879 --> 00:02:37,239
but it's even harder to learn completely

62
00:02:37,239 --> 00:02:41,030
so once I fit this we're gonna enter the

63
00:02:41,030 --> 00:02:42,890
first part of our journey to wander line

64
00:02:42,890 --> 00:02:48,500
Anna our first stop is man if you can

65
00:02:48,500 --> 00:02:52,640
get all three laughing so man literally

66
00:02:52,640 --> 00:02:55,909
stands for not a number however a type

67
00:02:55,909 --> 00:02:59,150
of man is a number so um JavaScript

68
00:02:59,150 --> 00:03:00,970
please get your trip together it's like

69
00:03:00,970 --> 00:03:03,079
you know in really simplistic terms

70
00:03:03,079 --> 00:03:04,549
nanny's use the return value of a

71
00:03:04,549 --> 00:03:07,400
mathematical operation that fail and if

72
00:03:07,400 --> 00:03:08,959
you try to perform an operation without

73
00:03:08,959 --> 00:03:11,510
both operands being numbers are you will

74
00:03:11,510 --> 00:03:13,730
get man in the same fashion if you try

75
00:03:13,730 --> 00:03:16,400
to perform an operation without without

76
00:03:16,400 --> 00:03:17,840
with numbers that are not defined such

77
00:03:17,840 --> 00:03:20,510
as dividing 0 by 0 or the or getting the

78
00:03:20,510 --> 00:03:22,010
square the square root of a negative

79
00:03:22,010 --> 00:03:26,209
number you will as well get man so you

80
00:03:26,209 --> 00:03:27,919
know what man is actually trying to tell

81
00:03:27,919 --> 00:03:30,079
us is like hey I try to perform this

82
00:03:30,079 --> 00:03:32,480
mathematical operation what I spell so

83
00:03:32,480 --> 00:03:37,459
here this fail number instead so yeah

84
00:03:37,459 --> 00:03:39,349
you know the problem with nan is that

85
00:03:39,349 --> 00:03:41,060
perhaps the label name is a little bit

86
00:03:41,060 --> 00:03:42,919
misleading maybe it would be easier to

87
00:03:42,919 --> 00:03:44,599
think of it as our own fail number

88
00:03:44,599 --> 00:03:46,489
invalid number back numbered I'm

89
00:03:46,489 --> 00:03:48,590
thinking of it as not a number because

90
00:03:48,590 --> 00:03:50,659
bottom line nan is still a numeric type

91
00:03:50,659 --> 00:03:52,940
however it represents a value that could

92
00:03:52,940 --> 00:03:56,269
not represent a valid number so you know

93
00:03:56,269 --> 00:03:58,909
it's a script ezpz mathematical

94
00:03:58,909 --> 00:04:00,440
operations cannot crash or cause errors

95
00:04:00,440 --> 00:04:04,340
they just give you nan so what if we

96
00:04:04,340 --> 00:04:06,849
wanted to know if a batter is not or not

97
00:04:06,849 --> 00:04:09,799
this was your first guess oh let me tell

98
00:04:09,799 --> 00:04:12,169
you something guys nan is not equal

99
00:04:12,169 --> 00:04:14,540
greater than or less than anything

100
00:04:14,540 --> 00:04:17,090
including itself and you have you

101
00:04:17,090 --> 00:04:18,919
already know this but do you know why a

102
00:04:18,919 --> 00:04:20,510
man is not equal to man

103
00:04:20,510 --> 00:04:23,120
so to give you a little bit of context

104
00:04:23,120 --> 00:04:25,370
nan is actually part of the I Triple E

105
00:04:25,370 --> 00:04:28,849
754 a floating point standard that to

106
00:04:28,849 --> 00:04:30,710
keep things short he finds that there

107
00:04:30,710 --> 00:04:34,159
are 16 million 777

108
00:04:34,159 --> 00:04:36,720
214 different different floating-point

109
00:04:36,720 --> 00:04:39,479
values as man so what does this mean

110
00:04:39,479 --> 00:04:41,699
this means that there are so many

111
00:04:41,699 --> 00:04:43,949
different kind of man's that it's highly

112
00:04:43,949 --> 00:04:46,289
unlikely that one man is equal to

113
00:04:46,289 --> 00:04:49,560
another now so yes indeed none is not

114
00:04:49,560 --> 00:04:52,110
equal to none and at this point I guess

115
00:04:52,110 --> 00:04:54,900
we can all say that man stands for not a

116
00:04:54,900 --> 00:04:59,490
not a number if we actually want to know

117
00:04:59,490 --> 00:05:01,949
if a value is man we can use the - the

118
00:05:01,949 --> 00:05:06,509
built-in function if man let's talk

119
00:05:06,509 --> 00:05:12,650
about now so type of know is object what

120
00:05:12,650 --> 00:05:15,389
we all know that no is a primitive the

121
00:05:15,389 --> 00:05:17,400
value and therefore type of no should be

122
00:05:17,400 --> 00:05:19,469
no but you know interpret things are

123
00:05:19,469 --> 00:05:22,289
never what they seem and unfortunately

124
00:05:22,289 --> 00:05:24,120
this is a well-known mistake it's even

125
00:05:24,120 --> 00:05:25,560
written on the Indian dogs everyone

126
00:05:25,560 --> 00:05:27,150
knows about it but then is that this is

127
00:05:27,150 --> 00:05:29,159
a mistake in a specification due to

128
00:05:29,159 --> 00:05:30,870
historical reasons involving the way

129
00:05:30,870 --> 00:05:32,400
reference types were implemented in the

130
00:05:32,400 --> 00:05:34,469
first version of JavaScript and in words

131
00:05:34,469 --> 00:05:36,689
of Rendon I unfortunately this is about

132
00:05:36,689 --> 00:05:38,159
that cannot be fixed because it will

133
00:05:38,159 --> 00:05:42,690
just break too many sites so what would

134
00:05:42,690 --> 00:05:48,090
happen in this case if rabbit is no yeah

135
00:05:48,090 --> 00:05:50,370
we will get an error and one of the main

136
00:05:50,370 --> 00:05:52,310
takeaways of this talk that I want to

137
00:05:52,310 --> 00:05:56,039
give you is that um you have to be aware

138
00:05:56,039 --> 00:05:57,810
of these kind of errors there are a lot

139
00:05:57,810 --> 00:05:59,159
of things going on in JavaScript and you

140
00:05:59,159 --> 00:06:00,690
we just have to realize that these

141
00:06:00,690 --> 00:06:01,789
things can happen

142
00:06:01,789 --> 00:06:03,930
so yeah the good news is that we can

143
00:06:03,930 --> 00:06:05,430
always make some corrections in our code

144
00:06:05,430 --> 00:06:07,050
add extra validations in order to make

145
00:06:07,050 --> 00:06:08,789
sure that we never fell into these

146
00:06:08,789 --> 00:06:12,210
errors so now let's talk about sorting

147
00:06:12,210 --> 00:06:13,740
arrays that seems like a little bit more

148
00:06:13,740 --> 00:06:17,129
fun so what can we expect from a

149
00:06:17,129 --> 00:06:18,870
function that it's all sort

150
00:06:18,870 --> 00:06:21,089
I get definitely not this outcome

151
00:06:21,089 --> 00:06:23,669
because normally in planet Earth for

152
00:06:23,669 --> 00:06:27,810
comes before 25 and 33 no right but not

153
00:06:27,810 --> 00:06:30,719
in JavaScript so what's actually

154
00:06:30,719 --> 00:06:32,669
happening here the thing is that the

155
00:06:32,669 --> 00:06:35,159
elements to be sorted they are

156
00:06:35,159 --> 00:06:36,990
transforming two strings and then they

157
00:06:36,990 --> 00:06:39,089
are comparing lexicographical order you

158
00:06:39,089 --> 00:06:40,740
know what is this lexicographical order

159
00:06:40,740 --> 00:06:43,229
I'm talking about basically it is the

160
00:06:43,229 --> 00:06:45,149
same way you will look through a word or

161
00:06:45,149 --> 00:06:46,720
a know you will

162
00:06:46,720 --> 00:06:48,430
for a word in a dictionary or in a

163
00:06:48,430 --> 00:06:50,140
telephone book so let's see like in

164
00:06:50,140 --> 00:06:53,080
alphabetical order so in this example

165
00:06:53,080 --> 00:06:55,210
yeah the first one is really easy blue

166
00:06:55,210 --> 00:06:58,120
will come before before read it slow no

167
00:06:58,120 --> 00:07:00,310
brainer but in the second a case since

168
00:07:00,310 --> 00:07:01,390
there are numbers and they're being

169
00:07:01,390 --> 00:07:03,850
converted to strings ad will come before

170
00:07:03,850 --> 00:07:05,800
nine due to their Unicode code point

171
00:07:05,800 --> 00:07:07,780
value and what is this unicode code

172
00:07:07,780 --> 00:07:10,060
value basically it's just the ID of any

173
00:07:10,060 --> 00:07:13,090
Unicode character so in similar terms

174
00:07:13,090 --> 00:07:15,750
let's just say that 80 is

175
00:07:15,750 --> 00:07:18,580
lexicographically less than nine so it

176
00:07:18,580 --> 00:07:21,360
starts to make a little bit more sense

177
00:07:21,360 --> 00:07:23,830
if you want to get the coke invaluable

178
00:07:23,830 --> 00:07:25,450
character you can use JavaScript a

179
00:07:25,450 --> 00:07:28,480
function called pointer so going back to

180
00:07:28,480 --> 00:07:31,780
our example in this case we now

181
00:07:31,780 --> 00:07:33,550
understand that yeah yes you need four

182
00:07:33,550 --> 00:07:36,340
is lexicographically greater than 25 and

183
00:07:36,340 --> 00:07:38,500
33 but this was not the outcome that we

184
00:07:38,500 --> 00:07:40,930
were expecting on the first place and

185
00:07:40,930 --> 00:07:42,910
what we're missing here is that actually

186
00:07:42,910 --> 00:07:44,500
the store function can take a compare

187
00:07:44,500 --> 00:07:46,870
function as a parameter and if I compare

188
00:07:46,870 --> 00:07:48,910
function e supply even that a and B are

189
00:07:48,910 --> 00:07:50,800
the elements to be compared if a is less

190
00:07:50,800 --> 00:07:52,690
than B you will return minus 1 and a

191
00:07:52,690 --> 00:07:54,340
will come before B if a is greater than

192
00:07:54,340 --> 00:07:56,200
B you will return 1 and B will come

193
00:07:56,200 --> 00:07:57,520
before a unique a and B are the same

194
00:07:57,520 --> 00:07:59,500
they will turn 0 and no changes will be

195
00:07:59,500 --> 00:08:01,720
made and if you are as furious as I am

196
00:08:01,720 --> 00:08:03,760
you might be wondering like what is the

197
00:08:03,760 --> 00:08:05,650
actual algorithm used by the sort

198
00:08:05,650 --> 00:08:07,419
function to make the actual sorting and

199
00:08:07,419 --> 00:08:08,740
when I was doing some research I

200
00:08:08,740 --> 00:08:10,630
realized that Firefox for example it

201
00:08:10,630 --> 00:08:13,030
uses the merge sort algorithm and I

202
00:08:13,030 --> 00:08:14,830
think the WebKit browsers use some

203
00:08:14,830 --> 00:08:16,360
variation of the quicksort algorithm

204
00:08:16,360 --> 00:08:19,750
just fun fact so going back to our

205
00:08:19,750 --> 00:08:21,520
previous example we can simplify our

206
00:08:21,520 --> 00:08:23,229
compare function by just subtracting B

207
00:08:23,229 --> 00:08:24,729
from a because it would also give us a

208
00:08:24,729 --> 00:08:26,680
valid comparison value and we can

209
00:08:26,680 --> 00:08:28,390
finally arrived our expected result

210
00:08:28,390 --> 00:08:30,310
which was an array sorted in numerical

211
00:08:30,310 --> 00:08:31,530
order

212
00:08:31,530 --> 00:08:34,419
Anna now let's talk about the mysterious

213
00:08:34,419 --> 00:08:37,539
still the operator so how many of you

214
00:08:37,539 --> 00:08:39,490
guys know what this operator actually

215
00:08:39,490 --> 00:08:44,950
does ok so not so many um I wasn't asked

216
00:08:44,950 --> 00:08:47,200
next like who has used it on other

217
00:08:47,200 --> 00:08:49,570
programs what's seen that you were not

218
00:08:49,570 --> 00:08:53,740
much how many of you guys actually knew

219
00:08:53,740 --> 00:08:55,660
the name of this operator because I

220
00:08:55,660 --> 00:08:57,610
always okay because I always will say

221
00:08:57,610 --> 00:08:57,920
like

222
00:08:57,920 --> 00:09:00,079
away the operator but it's a click old

223
00:09:00,079 --> 00:09:03,230
TV anyway so I'm gonna give you a few

224
00:09:03,230 --> 00:09:05,269
seconds just to see the code and try to

225
00:09:05,269 --> 00:09:06,560
understand what's going on here do you

226
00:09:06,560 --> 00:09:07,870
see any pattern

227
00:09:07,870 --> 00:09:11,149
can you guess so the thing is that

228
00:09:11,149 --> 00:09:13,730
actually the till the operator is doing

229
00:09:13,730 --> 00:09:16,459
just this small algorithm where n is the

230
00:09:16,459 --> 00:09:19,070
the number next to the to the right of

231
00:09:19,070 --> 00:09:19,670
the operator

232
00:09:19,670 --> 00:09:23,690
so um unless you're actually using that

233
00:09:23,690 --> 00:09:25,940
a specific algorithm in your application

234
00:09:25,940 --> 00:09:29,440
what else could it be good for so

235
00:09:29,440 --> 00:09:32,600
actually be pretty cool for functions

236
00:09:32,600 --> 00:09:37,040
returning minus 1 and let me remember

237
00:09:37,040 --> 00:09:41,269
one like index of and index of function

238
00:09:41,269 --> 00:09:43,490
returns minus 1 when I give an element

239
00:09:43,490 --> 00:09:45,980
is not found in a given array so let's

240
00:09:45,980 --> 00:09:48,230
all consider this this small array over

241
00:09:48,230 --> 00:09:49,940
here which is the guest list for the tea

242
00:09:49,940 --> 00:09:51,410
party that we're gonna have a little bit

243
00:09:51,410 --> 00:09:55,579
later and you know we can see if an

244
00:09:55,579 --> 00:09:57,680
element is in that area or not by just

245
00:09:57,680 --> 00:09:59,690
check doing any of this comparison we

246
00:09:59,690 --> 00:10:02,300
can check if the if the result of index

247
00:10:02,300 --> 00:10:06,920
off is equal to minus 1 but all of this

248
00:10:06,920 --> 00:10:09,110
can actually be simplified by using that

249
00:10:09,110 --> 00:10:12,050
tilde operator and in this case

250
00:10:12,050 --> 00:10:13,640
basically what the tilde operator is

251
00:10:13,640 --> 00:10:15,740
just taking the result of the index of

252
00:10:15,740 --> 00:10:17,570
function and it's converting it into a

253
00:10:17,570 --> 00:10:20,329
false is 0 and any other value will be

254
00:10:20,329 --> 00:10:21,529
automatically true

255
00:10:21,529 --> 00:10:23,839
so in simpler terms we can say that the

256
00:10:23,839 --> 00:10:25,459
tilde operator is just transforming the

257
00:10:25,459 --> 00:10:27,589
result of the index of function into an

258
00:10:27,589 --> 00:10:29,240
appropriate boolean value that we can

259
00:10:29,240 --> 00:10:32,870
use in our comparison and you know there

260
00:10:32,870 --> 00:10:34,820
is some discussion store this because

261
00:10:34,820 --> 00:10:36,230
there are people that think that this

262
00:10:36,230 --> 00:10:38,329
can lead to a cleaner code because

263
00:10:38,329 --> 00:10:39,500
instead of just writing all those

264
00:10:39,500 --> 00:10:41,630
Messier comparisons we can simplify and

265
00:10:41,630 --> 00:10:43,279
use these and there are other people

266
00:10:43,279 --> 00:10:45,140
that don't think this is clear enough

267
00:10:45,140 --> 00:10:46,850
because imagine for someone that has no

268
00:10:46,850 --> 00:10:48,410
idea what the operate this operator does

269
00:10:48,410 --> 00:10:51,110
it's quite confusing just seen these so

270
00:10:51,110 --> 00:10:53,569
I don't know I'm just showing you what

271
00:10:53,569 --> 00:10:54,889
the possibilities it's up to you

272
00:10:54,889 --> 00:10:56,060
depending on the project that you're

273
00:10:56,060 --> 00:10:58,910
working on it's up to you to decide

274
00:10:58,910 --> 00:11:03,230
depending on your so either way it's

275
00:11:03,230 --> 00:11:06,620
it's a cool trick let's say and now

276
00:11:06,620 --> 00:11:08,269
let's talk about for loops because they

277
00:11:08,269 --> 00:11:10,680
can be also really really interesting

278
00:11:10,680 --> 00:11:13,829
and when I was reading a JavaScript book

279
00:11:13,829 --> 00:11:16,110
I came across this really weird looking

280
00:11:16,110 --> 00:11:19,379
for loop and you know after doing some

281
00:11:19,379 --> 00:11:20,939
research I realized that people coming

282
00:11:20,939 --> 00:11:22,589
from a seed background didn't found this

283
00:11:22,589 --> 00:11:25,350
for loop as we decided but you know as

284
00:11:25,350 --> 00:11:27,449
I'm the courier person I am I just

285
00:11:27,449 --> 00:11:29,360
needed to know how it works

286
00:11:29,360 --> 00:11:31,800
so now I'm gonna bring you back to your

287
00:11:31,800 --> 00:11:33,749
programming 101 course you know back in

288
00:11:33,749 --> 00:11:34,800
the day when you were learning about

289
00:11:34,800 --> 00:11:36,899
programming so excited to code and

290
00:11:36,899 --> 00:11:38,160
you're let me have a variables and loops

291
00:11:38,160 --> 00:11:40,079
and everything and I'm just gonna remind

292
00:11:40,079 --> 00:11:42,899
you about something really basic for for

293
00:11:42,899 --> 00:11:44,269
loops have three parts they have a

294
00:11:44,269 --> 00:11:46,740
initialization for a condition for in an

295
00:11:46,740 --> 00:11:49,980
iteration part so what I actually didn't

296
00:11:49,980 --> 00:11:52,910
know is that all of them are optional so

297
00:11:52,910 --> 00:11:55,290
we can escape the first world because

298
00:11:55,290 --> 00:11:56,730
yeah we can basically just declare the

299
00:11:56,730 --> 00:11:58,829
variables outside the for loop we can

300
00:11:58,829 --> 00:12:00,749
escape the second part and the condition

301
00:12:00,749 --> 00:12:01,949
part is missing it actually ultimately

302
00:12:01,949 --> 00:12:05,339
access true or even we can escape the

303
00:12:05,339 --> 00:12:06,990
third part anyway skip the third in this

304
00:12:06,990 --> 00:12:09,269
particular example the condition part is

305
00:12:09,269 --> 00:12:10,920
act innocent at the same time as

306
00:12:10,920 --> 00:12:14,160
iteration part or we can even skip

307
00:12:14,160 --> 00:12:15,360
everything as I show you in the

308
00:12:15,360 --> 00:12:17,910
beginning and basically the middle part

309
00:12:17,910 --> 00:12:19,829
is acting as true and basically this is

310
00:12:19,829 --> 00:12:21,480
the same thing as a while true so this

311
00:12:21,480 --> 00:12:23,610
is just like an infinite or endless loop

312
00:12:23,610 --> 00:12:28,829
so a miss resolved and now let's talk

313
00:12:28,829 --> 00:12:31,499
about on define so we don't know that

314
00:12:31,499 --> 00:12:33,240
only fine is just a variable that has

315
00:12:33,240 --> 00:12:34,889
been declared but at the moment holds

316
00:12:34,889 --> 00:12:37,050
not by oles so this piece of code

317
00:12:37,050 --> 00:12:38,759
shouldn't comment shocking for anybody I

318
00:12:38,759 --> 00:12:41,879
hope the thing is that only fine is part

319
00:12:41,879 --> 00:12:43,709
of the global object so what would

320
00:12:43,709 --> 00:12:45,959
happen if we actually try defining on be

321
00:12:45,959 --> 00:12:50,879
fine so actually the outcome of this of

322
00:12:50,879 --> 00:12:53,160
this code really depends on the work of

323
00:12:53,160 --> 00:12:55,829
the browser that you are using so for

324
00:12:55,829 --> 00:12:57,059
all the browsers you can actually

325
00:12:57,059 --> 00:12:59,249
redefine only fine but in modern

326
00:12:59,249 --> 00:13:01,410
browsers discuss already been fixed and

327
00:13:01,410 --> 00:13:03,480
yeah I get it well it's becoming less

328
00:13:03,480 --> 00:13:05,639
and less of a problem if you're actually

329
00:13:05,639 --> 00:13:07,470
giving support to older browsers you

330
00:13:07,470 --> 00:13:08,999
have to defend yourself against the

331
00:13:08,999 --> 00:13:10,949
possibility of other code redefining

332
00:13:10,949 --> 00:13:12,629
you're only fine because the thing is

333
00:13:12,629 --> 00:13:15,299
that javascript rarely runs in isolation

334
00:13:15,299 --> 00:13:18,059
it often Browns mix with code from

335
00:13:18,059 --> 00:13:20,220
third-party libraries and we have to be

336
00:13:20,220 --> 00:13:21,569
aware as I told you with right we have

337
00:13:21,569 --> 00:13:22,860
to be aware of these things and actually

338
00:13:22,860 --> 00:13:23,250
have

339
00:13:23,250 --> 00:13:27,090
a ninja's try to defend ourselves and

340
00:13:27,090 --> 00:13:29,580
you know these doesn't entirely prevent

341
00:13:29,580 --> 00:13:31,980
us from overriding only fine because as

342
00:13:31,980 --> 00:13:33,330
strange as it might sound

343
00:13:33,330 --> 00:13:35,340
only fine is not a reserved word in

344
00:13:35,340 --> 00:13:37,230
JavaScript meaning that you can actually

345
00:13:37,230 --> 00:13:40,740
use it as a variable as well so just a

346
00:13:40,740 --> 00:13:42,270
little bit of a recap what have we

347
00:13:42,270 --> 00:13:44,610
learned so far not a number it's a

348
00:13:44,610 --> 00:13:48,210
number null is an object the sort

349
00:13:48,210 --> 00:13:50,250
function sorts lexicographically by

350
00:13:50,250 --> 00:13:52,830
default the tilde operator can be pretty

351
00:13:52,830 --> 00:13:54,630
useful with function return n minus 1

352
00:13:54,630 --> 00:13:57,390
and all parts are in a for loop are

353
00:13:57,390 --> 00:14:00,380
optional and only fine can be defined

354
00:14:00,380 --> 00:14:11,320
sometimes am i boring you guys exciting

355
00:14:11,330 --> 00:14:14,520
hold up because the man JavaScript party

356
00:14:14,520 --> 00:14:17,820
is just about to begin and just a little

357
00:14:17,820 --> 00:14:19,530
bit of a disclaimer disclaimer because I

358
00:14:19,530 --> 00:14:21,540
told you that I love disclaimers um the

359
00:14:21,540 --> 00:14:22,860
following content is designed to

360
00:14:22,860 --> 00:14:24,450
challenge enemies programmers not make

361
00:14:24,450 --> 00:14:27,120
to be suitable for practical use and now

362
00:14:27,120 --> 00:14:28,580
I'm gonna talk about non alphanumeric

363
00:14:28,580 --> 00:14:30,810
JavaScript and what is this not as fun

364
00:14:30,810 --> 00:14:32,820
America nonsense I'm gonna get into that

365
00:14:32,820 --> 00:14:36,060
in a minute so before that this just all

366
00:14:36,060 --> 00:14:37,740
remember a really key characteristic of

367
00:14:37,740 --> 00:14:40,410
JavaScript so javascript is a non type

368
00:14:40,410 --> 00:14:42,120
language which means that you don't have

369
00:14:42,120 --> 00:14:43,860
to specify the king of data that a

370
00:14:43,860 --> 00:14:45,240
variable will hold when you're declaring

371
00:14:45,240 --> 00:14:47,070
so it's really up to the interpreter to

372
00:14:47,070 --> 00:14:49,440
determine this and when we meet slaves

373
00:14:49,440 --> 00:14:51,060
we can obtain in bulk implicit

374
00:14:51,060 --> 00:14:52,710
conversions that can lead to really

375
00:14:52,710 --> 00:14:55,500
crazy results so what I'm gonna show you

376
00:14:55,500 --> 00:14:57,630
next is how to write valid JavaScript

377
00:14:57,630 --> 00:15:00,120
using only square brackets parenthesis

378
00:15:00,120 --> 00:15:02,310
the curly brackets the plan separator

379
00:15:02,310 --> 00:15:06,030
and exclamation point I surrounded crazy

380
00:15:06,030 --> 00:15:08,400
these actually wards you can test it out

381
00:15:08,400 --> 00:15:10,230
right away in your developer tools keys

382
00:15:10,230 --> 00:15:14,310
it's it's part of a JavaScript magic but

383
00:15:14,310 --> 00:15:15,900
I'm gonna start grading easy don't worry

384
00:15:15,900 --> 00:15:18,450
ah in this first example of what we're

385
00:15:18,450 --> 00:15:20,400
trying to do is we're negating an empty

386
00:15:20,400 --> 00:15:22,320
array so we're first in JavaScript to

387
00:15:22,320 --> 00:15:26,339
treat that empty array as a boolean so

388
00:15:26,339 --> 00:15:27,780
if you're familiar with the concept of

389
00:15:27,780 --> 00:15:29,760
truthy and falsy values you will know

390
00:15:29,760 --> 00:15:32,550
that an empty array is a truth value so

391
00:15:32,550 --> 00:15:34,690
negating a truth value of give us of

392
00:15:34,690 --> 00:15:36,579
it's in a second sample is more easy so

393
00:15:36,579 --> 00:15:39,700
we're just negating a force and we're

394
00:15:39,700 --> 00:15:42,010
getting through so from two ampoules

395
00:15:42,010 --> 00:15:45,160
it's really easy to get to zero and one

396
00:15:45,160 --> 00:15:47,200
because we're just converting true and

397
00:15:47,200 --> 00:15:49,870
false to serum one using that unary plus

398
00:15:49,870 --> 00:15:51,579
operator and this is not the same

399
00:15:51,579 --> 00:15:52,690
operator we normally use for

400
00:15:52,690 --> 00:15:54,490
concatenating strings the actual usage

401
00:15:54,490 --> 00:15:56,529
of the unary operator is to convert

402
00:15:56,529 --> 00:15:59,380
things into numbers so now that we have

403
00:15:59,380 --> 00:16:01,870
one in and zero and one we have a base

404
00:16:01,870 --> 00:16:05,440
to create any other number so you can

405
00:16:05,440 --> 00:16:07,149
picture that that's just adding one plus

406
00:16:07,149 --> 00:16:11,950
one plus one plus one plus one easy you

407
00:16:11,950 --> 00:16:13,839
can convert things into strings by just

408
00:16:13,839 --> 00:16:15,700
adding an empty array because empty

409
00:16:15,700 --> 00:16:20,140
array are coarse to string this also

410
00:16:20,140 --> 00:16:24,370
works for four numbers and what would

411
00:16:24,370 --> 00:16:25,959
happen if you actually wanted to convert

412
00:16:25,959 --> 00:16:28,120
like bigger numbers into this weird non

413
00:16:28,120 --> 00:16:30,160
of an America's stuff that I'm saying

414
00:16:30,160 --> 00:16:32,950
um well instead of adding one plus one

415
00:16:32,950 --> 00:16:35,140
plus one until infinity obviously nobody

416
00:16:35,140 --> 00:16:37,120
has time to do that we can basically

417
00:16:37,120 --> 00:16:39,310
just transform every single digit of the

418
00:16:39,310 --> 00:16:42,250
number into string then concatenate the

419
00:16:42,250 --> 00:16:44,320
whole string and convert the whole thing

420
00:16:44,320 --> 00:16:46,089
back into a number using the unary plus

421
00:16:46,089 --> 00:16:49,779
operator as I shown you before so that's

422
00:16:49,779 --> 00:16:51,310
what a hundred and twenty-three looks

423
00:16:51,310 --> 00:16:52,959
like in non alphanumeric JavaScript and

424
00:16:52,959 --> 00:16:54,339
you can test it on right away and it

425
00:16:54,339 --> 00:16:56,260
works your console will actually print

426
00:16:56,260 --> 00:17:01,149
out a hundred twenty-three so we can get

427
00:17:01,149 --> 00:17:03,430
more stuff using this weird technique we

428
00:17:03,430 --> 00:17:05,169
can get on defined by trying to access

429
00:17:05,169 --> 00:17:08,189
and a non-existent element in an array

430
00:17:08,189 --> 00:17:10,959
we can get none by casting an object

431
00:17:10,959 --> 00:17:13,419
into a number and we can get the string

432
00:17:13,419 --> 00:17:15,160
object object by trying to cast an

433
00:17:15,160 --> 00:17:19,030
object into string so now that we have

434
00:17:19,030 --> 00:17:21,069
access to all of these words and

435
00:17:21,069 --> 00:17:23,559
vocabulary such as true/false object

436
00:17:23,559 --> 00:17:26,470
only fine blah blah blah we can convert

437
00:17:26,470 --> 00:17:28,540
and convert them into strings as I show

438
00:17:28,540 --> 00:17:31,240
you before and access them as if they

439
00:17:31,240 --> 00:17:35,020
were Eric's so in this way we can get

440
00:17:35,020 --> 00:17:37,750
even more single characters from which

441
00:17:37,750 --> 00:17:40,570
we can get even more words that actually

442
00:17:40,570 --> 00:17:46,570
means something to JavaScript in

443
00:17:46,580 --> 00:17:49,500
and you know Martin clipper the creator

444
00:17:49,500 --> 00:17:51,210
of Jays book which I'm going to talk

445
00:17:51,210 --> 00:17:51,630
later

446
00:17:51,630 --> 00:17:52,980
really cleverly called these JavaScript

447
00:17:52,980 --> 00:17:54,809
Scrabble because you know basically what

448
00:17:54,809 --> 00:17:56,100
we're doing is we're just we're just

449
00:17:56,100 --> 00:17:58,290
creating new words from the my level set

450
00:17:58,290 --> 00:17:59,700
of characters that were getting from the

451
00:17:59,700 --> 00:18:02,040
previous technique and to keep things

452
00:18:02,040 --> 00:18:03,740
short because this is a 30 minute taught

453
00:18:03,740 --> 00:18:06,059
we basically can have access to

454
00:18:06,059 --> 00:18:07,620
functions such as call count cap

455
00:18:07,620 --> 00:18:12,030
constructor join slice or filter I know

456
00:18:12,030 --> 00:18:13,770
you are with really willing to see this

457
00:18:13,770 --> 00:18:15,450
in action and I'm gonna walk you through

458
00:18:15,450 --> 00:18:17,640
this really little simple example that

459
00:18:17,640 --> 00:18:19,490
actually just alerts one in your browser

460
00:18:19,490 --> 00:18:23,400
and it's really easy don't worry so this

461
00:18:23,400 --> 00:18:25,590
first part is just an empty array okay

462
00:18:25,590 --> 00:18:27,620
that nothing nothing we're over there

463
00:18:27,620 --> 00:18:31,020
the filter segment is just accessing the

464
00:18:31,020 --> 00:18:32,910
filter function of that empty array

465
00:18:32,910 --> 00:18:37,559
which is a function the constructor part

466
00:18:37,559 --> 00:18:39,870
is getting the constructor for functions

467
00:18:39,870 --> 00:18:43,320
and the constructor of functions takes a

468
00:18:43,320 --> 00:18:45,720
parameter a script that returns back a

469
00:18:45,720 --> 00:18:47,460
new function with that script as its

470
00:18:47,460 --> 00:18:51,480
body so finally that last parenthesis is

471
00:18:51,480 --> 00:18:54,300
just executing that new function in the

472
00:18:54,300 --> 00:18:55,500
outcome of this as you might have

473
00:18:55,500 --> 00:18:57,420
guessed it's just an alert one in your

474
00:18:57,420 --> 00:19:00,570
browser and that could behind that is

475
00:19:00,570 --> 00:19:02,460
the actual code that you can use so

476
00:19:02,460 --> 00:19:10,759
crazy I know

477
00:19:10,769 --> 00:19:13,659
so I know it's really it's a lot to take

478
00:19:13,659 --> 00:19:15,999
in it's really weird but the good thing

479
00:19:15,999 --> 00:19:17,169
is that there are a lot of online

480
00:19:17,169 --> 00:19:18,789
converters that you can check out in

481
00:19:18,789 --> 00:19:20,049
order to test this technique to play

482
00:19:20,049 --> 00:19:22,479
around I really recommend you guys to

483
00:19:22,479 --> 00:19:24,429
see the source code of some of the of

484
00:19:24,429 --> 00:19:25,749
the online converters because they are

485
00:19:25,749 --> 00:19:27,039
they can be really really really

486
00:19:27,039 --> 00:19:29,789
educational so just check it out and

487
00:19:29,789 --> 00:19:32,349
well there is a yellow TV more by

488
00:19:32,349 --> 00:19:34,599
Patricia Palladino there is a J's for

489
00:19:34,599 --> 00:19:36,970
the moon there is it Saturday yes there

490
00:19:36,970 --> 00:19:39,970
is Jaya screw it and most well-known is

491
00:19:39,970 --> 00:19:42,190
Jay's fuck the day is fought by American

492
00:19:42,190 --> 00:19:45,340
clapping and seriously there's like no

493
00:19:45,340 --> 00:19:47,200
limit with this but when I was doing

494
00:19:47,200 --> 00:19:49,629
research for this conference I realized

495
00:19:49,629 --> 00:19:51,549
that I came across this get hot ripple

496
00:19:51,549 --> 00:19:53,919
from a guy that basically just rewrote

497
00:19:53,919 --> 00:19:55,479
the whole thing curry library using

498
00:19:55,479 --> 00:19:57,489
non-alphanumeric JavaScript it's like

499
00:19:57,489 --> 00:20:02,889
what this is a source code like people

500
00:20:02,889 --> 00:20:04,570
have way too much time on their hands

501
00:20:04,570 --> 00:20:08,739
like and at this point you might be

502
00:20:08,739 --> 00:20:11,200
wondering like okay that's really fun

503
00:20:11,200 --> 00:20:13,299
but why on earth would I ever care to

504
00:20:13,299 --> 00:20:16,090
learn this or why would I ever do this

505
00:20:16,090 --> 00:20:18,009
so if you think that this is totally

506
00:20:18,009 --> 00:20:20,409
useless um I think that hackers beg to

507
00:20:20,409 --> 00:20:21,909
differ

508
00:20:21,909 --> 00:20:23,830
I saw this tweet by Martin clip a few

509
00:20:23,830 --> 00:20:25,599
weeks ago in which he pointed to a

510
00:20:25,599 --> 00:20:29,529
security article from a security

511
00:20:29,529 --> 00:20:32,229
researcher that Faneuil vulnerability on

512
00:20:32,229 --> 00:20:34,389
eBay in which basically you could just

513
00:20:34,389 --> 00:20:37,149
insert malicious code using non

514
00:20:37,149 --> 00:20:40,749
alphanumeric JavaScript and well this

515
00:20:40,749 --> 00:20:42,039
kind of makes sense since apparently

516
00:20:42,039 --> 00:20:44,559
eBay just filters HTML tags such as

517
00:20:44,559 --> 00:20:46,720
iframe and scripts but it's totally

518
00:20:46,720 --> 00:20:49,149
unaware of code inserted in a different

519
00:20:49,149 --> 00:20:53,049
way so oh and if anybody asked you about

520
00:20:53,049 --> 00:20:54,609
this you didn't hear it from me I don't

521
00:20:54,609 --> 00:20:57,220
want a people hacking eBay you think it

522
00:20:57,220 --> 00:21:02,349
for me so yeah I also really really love

523
00:21:02,349 --> 00:21:04,090
these things will make a sensor for a

524
00:21:04,090 --> 00:21:08,529
change and sadly we're reaching the end

525
00:21:08,529 --> 00:21:11,229
of our journey but of course I cannot

526
00:21:11,229 --> 00:21:12,519
leave without talking about our

527
00:21:12,519 --> 00:21:15,099
functions and es6 because I want to be

528
00:21:15,099 --> 00:21:18,789
part of the cool gang so we normally

529
00:21:18,789 --> 00:21:20,919
know that functions create your own

530
00:21:20,919 --> 00:21:23,650
scope so this piece of code would

531
00:21:23,650 --> 00:21:25,900
word because the deeds that were

532
00:21:25,900 --> 00:21:27,520
referring in the inner function of the

533
00:21:27,520 --> 00:21:29,380
city malfunction is no longer the same

534
00:21:29,380 --> 00:21:31,210
DS that we began with it's not on the

535
00:21:31,210 --> 00:21:33,960
scope of the full function so you know

536
00:21:33,960 --> 00:21:36,040
developers have found workarounds for

537
00:21:36,040 --> 00:21:38,590
this such as declaring variables in the

538
00:21:38,590 --> 00:21:39,910
outer scope in order to capture the

539
00:21:39,910 --> 00:21:41,920
properties and then referring to that

540
00:21:41,920 --> 00:21:44,470
variable in the inner function yeah it

541
00:21:44,470 --> 00:21:46,660
works but it's confusing and it's messy

542
00:21:46,660 --> 00:21:48,310
it's like then you have variables that

543
00:21:48,310 --> 00:21:50,860
are cool like bar selfie Kobe's bar data

544
00:21:50,860 --> 00:21:52,450
code is visible that it's just like way

545
00:21:52,450 --> 00:21:54,100
too confusing and maybe I don't like it

546
00:21:54,100 --> 00:21:57,340
and the thing is that our functions

547
00:21:57,340 --> 00:22:01,060
don't have a disk at all and actually

548
00:22:01,060 --> 00:22:04,260
our functions don't have these arguments

549
00:22:04,260 --> 00:22:08,890
super or the new target if there is any

550
00:22:08,890 --> 00:22:10,720
reference to they mean they will just

551
00:22:10,720 --> 00:22:13,350
lexically resolve up to the outer scope

552
00:22:13,350 --> 00:22:17,950
so that's really really cool and the

553
00:22:17,950 --> 00:22:19,390
previous example can just be rewritten

554
00:22:19,390 --> 00:22:21,520
with that with an arrow function because

555
00:22:21,520 --> 00:22:24,460
if anybody will work and we don't have

556
00:22:24,460 --> 00:22:26,380
we don't we don't have the need to

557
00:22:26,380 --> 00:22:28,150
actually use those ugly-looking

558
00:22:28,150 --> 00:22:31,000
variables that I showed you before and

559
00:22:31,000 --> 00:22:33,550
even if you were like so stubborn and

560
00:22:33,550 --> 00:22:35,830
you actually wanted to use to harbor

561
00:22:35,830 --> 00:22:37,480
inner these to an arrow functions no

562
00:22:37,480 --> 00:22:39,790
matter what you just can't because

563
00:22:39,790 --> 00:22:41,800
arrows functions don't have these at all

564
00:22:41,800 --> 00:22:43,570
and therefore the bang method has

565
00:22:43,570 --> 00:22:45,940
nothing to operate on so in this example

566
00:22:45,940 --> 00:22:48,280
even when we try hard binding a hundred

567
00:22:48,280 --> 00:22:50,380
to the arrow function it doesn't work it

568
00:22:50,380 --> 00:22:54,880
still prints out 42 so I get that the

569
00:22:54,880 --> 00:22:57,040
bottom line is that arrow functions are

570
00:22:57,040 --> 00:22:59,680
not about less typing or seem that sugar

571
00:22:59,680 --> 00:23:01,600
for functions they actually have an

572
00:23:01,600 --> 00:23:03,400
intentional behavioral purpose that we

573
00:23:03,400 --> 00:23:07,590
should all know and use accordingly and

574
00:23:07,590 --> 00:23:09,430
what's it all a dream

575
00:23:09,430 --> 00:23:12,100
no it wasin this is true this is just

576
00:23:12,100 --> 00:23:14,200
how JavaScript works in it's great it's

577
00:23:14,200 --> 00:23:16,150
amazing and amazing than that this is

578
00:23:16,150 --> 00:23:19,240
why I love this language and you know

579
00:23:19,240 --> 00:23:21,640
why why should we care about all of

580
00:23:21,640 --> 00:23:25,240
these things that I just show you first

581
00:23:25,240 --> 00:23:27,370
of all knowledge is power we have to

582
00:23:27,370 --> 00:23:28,570
know why we're writing the code were

583
00:23:28,570 --> 00:23:30,930
writing and how it works

584
00:23:30,930 --> 00:23:32,980
secondly is

585
00:23:32,980 --> 00:23:35,200
it's really the future the future of

586
00:23:35,200 --> 00:23:36,430
JavaScript really depends on the

587
00:23:36,430 --> 00:23:38,200
willingness of its developers to push

588
00:23:38,200 --> 00:23:40,210
the limits to create new panels and just

589
00:23:40,210 --> 00:23:43,210
move the community forward it's all

590
00:23:43,210 --> 00:23:46,360
about breaking rules also we have to

591
00:23:46,360 --> 00:23:48,040
remember that playing is learning it's

592
00:23:48,040 --> 00:23:49,630
really JavaScript quirkiness that

593
00:23:49,630 --> 00:23:51,850
encourages to play around with it to

594
00:23:51,850 --> 00:23:53,590
make mistakes to just mess around in the

595
00:23:53,590 --> 00:23:56,350
console and ultimately it will just make

596
00:23:56,350 --> 00:23:58,300
us better developers just being in

597
00:23:58,300 --> 00:23:59,860
constant interaction with the language

598
00:23:59,860 --> 00:24:03,460
itself and lastly it's about the power

599
00:24:03,460 --> 00:24:04,810
of the language and this is a quote from

600
00:24:04,810 --> 00:24:07,800
a book that I read a while ago that says

601
00:24:07,800 --> 00:24:10,360
JavaScript survive not despite its flaws

602
00:24:10,360 --> 00:24:13,540
but because of them and before I

603
00:24:13,540 --> 00:24:15,700
completely completely finish I want to

604
00:24:15,700 --> 00:24:18,220
read you guys this quote that says the

605
00:24:18,220 --> 00:24:19,870
best JavaScript developers are those

606
00:24:19,870 --> 00:24:21,550
cops s about language explore and play

607
00:24:21,550 --> 00:24:23,140
with it every day and in doing so

608
00:24:23,140 --> 00:24:25,120
develop their own idioms in their own

609
00:24:25,120 --> 00:24:27,550
voice these by angers underscore from

610
00:24:27,550 --> 00:24:28,900
his book it came in he wrote a script

611
00:24:28,900 --> 00:24:30,670
that I really really recommend you guys

612
00:24:30,670 --> 00:24:31,990
three it's really awesome

