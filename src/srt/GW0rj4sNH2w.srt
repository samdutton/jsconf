1
00:00:18,910 --> 00:00:21,290

I'm Tom mochi No thank you Chris first

2
00:00:21,290 --> 00:00:23,150
of all I'm going to talk a bit about how

3
00:00:23,150 --> 00:00:24,860
we do JavaScript application development

4
00:00:24,860 --> 00:00:26,090
at Facebook we're going to do something

5
00:00:26,090 --> 00:00:27,619
a little different jordan is actually

6
00:00:27,619 --> 00:00:29,690
also going to present he's going to do

7
00:00:29,690 --> 00:00:30,860
some of the technical stuff I'm going to

8
00:00:30,860 --> 00:00:32,119
talk about the fluffy I'll get it

9
00:00:32,119 --> 00:00:35,090
out of the way quick first of all we

10
00:00:35,090 --> 00:00:36,500
asked ourselves this question many many

11
00:00:36,500 --> 00:00:38,090
times how should we structure JavaScript

12
00:00:38,090 --> 00:00:39,890
applications and more specifically

13
00:00:39,890 --> 00:00:41,570
JavaScript applications that run in a

14
00:00:41,570 --> 00:00:42,140
web browser

15
00:00:42,140 --> 00:00:43,790
we're using node and doing all that fun

16
00:00:43,790 --> 00:00:45,410
stuff too but I'm more interested in the

17
00:00:45,410 --> 00:00:46,879
user interface side of things so that's

18
00:00:46,879 --> 00:00:48,460
what we're going to talk about today

19
00:00:48,460 --> 00:00:51,140
there are a lot of JavaScript frameworks

20
00:00:51,140 --> 00:00:53,540
that aim to answer this question

21
00:00:53,540 --> 00:00:55,280
these frameworks have allowed us to move

22
00:00:55,280 --> 00:00:57,140
the web forward as a real application

23
00:00:57,140 --> 00:00:57,680
platform

24
00:00:57,680 --> 00:00:59,150
if Peter Higgins is the room I want to

25
00:00:59,150 --> 00:01:01,339
call out that dojos up here because dojo

26
00:01:01,339 --> 00:01:03,710
did it first as he would say or dojo

27
00:01:03,710 --> 00:01:07,550
already did that but the consensus is

28
00:01:07,550 --> 00:01:09,409
basically that an MVC style architecture

29
00:01:09,409 --> 00:01:11,750
is best and it's not just MVC right it's

30
00:01:11,750 --> 00:01:14,090
mvvm or as angular calls it Model View

31
00:01:14,090 --> 00:01:15,890
whatever I really like that one I

32
00:01:15,890 --> 00:01:17,870
actually really like angular in the the

33
00:01:17,870 --> 00:01:19,760
declarative data binding I think that's

34
00:01:19,760 --> 00:01:21,650
kind of the holy grail in terms of api's

35
00:01:21,650 --> 00:01:23,990
all of these architectures and

36
00:01:23,990 --> 00:01:25,159
frameworks have one thing in common

37
00:01:25,159 --> 00:01:27,579
though and that's models

38
00:01:27,579 --> 00:01:30,130
so typically models in these frameworks

39
00:01:30,130 --> 00:01:33,049
implement observable objects with an

40
00:01:33,049 --> 00:01:37,219
events API developers use bi-directional

41
00:01:37,219 --> 00:01:39,229
data binding to bind their views to

42
00:01:39,229 --> 00:01:42,229
their models as your models change or

43
00:01:42,229 --> 00:01:44,180
views can be updated and as your views

44
00:01:44,180 --> 00:01:46,219
change they can update the models which

45
00:01:46,219 --> 00:01:48,049
then propagates out to other views

46
00:01:48,049 --> 00:01:49,450
excuse me

47
00:01:49,450 --> 00:01:51,920
so this observable model pattern

48
00:01:51,920 --> 00:01:55,820
encourages mutation though and mutation

49
00:01:55,820 --> 00:02:00,259
is complex so a few years ago starting

50
00:02:00,259 --> 00:02:03,009
with our chat rewrite we tried to start

51
00:02:03,009 --> 00:02:05,359
structuring our application a little bit

52
00:02:05,359 --> 00:02:07,999
differently we wanted to minimize the

53
00:02:07,999 --> 00:02:09,710
amount of mutation that developers had

54
00:02:09,710 --> 00:02:11,480
to deal with mutation is a necessary

55
00:02:11,480 --> 00:02:13,670
evil you have to deal with it but we

56
00:02:13,670 --> 00:02:15,110
want to minimize the amount of mutation

57
00:02:15,110 --> 00:02:17,230
that developers have to code themselves

58
00:02:17,230 --> 00:02:19,660
let me show you what I mean by that

59
00:02:19,660 --> 00:02:21,890
here's the structure for a simple

60
00:02:21,890 --> 00:02:24,920
application in this diagram you'll

61
00:02:24,920 --> 00:02:26,540
notice that all updates go through a

62
00:02:26,540 --> 00:02:29,390
single flow so all updates including

63
00:02:29,390 --> 00:02:31,160
user input they go through a single

64
00:02:31,160 --> 00:02:31,940
channel

65
00:02:31,940 --> 00:02:34,630
this is one directional data binding

66
00:02:34,630 --> 00:02:37,160
those updates eventually reach the views

67
00:02:37,160 --> 00:02:40,520
in the simplest way that we have found

68
00:02:40,520 --> 00:02:43,430
conceptually to structure and render our

69
00:02:43,430 --> 00:02:46,130
views is to just try and avoid mutation

70
00:02:46,130 --> 00:02:48,710
altogether so what I mean by that is

71
00:02:48,710 --> 00:02:52,460
anytime any of your data changes just

72
00:02:52,460 --> 00:02:53,990
blow away your view completely and

73
00:02:53,990 --> 00:02:56,930
rerender it from scratch now I know what

74
00:02:56,930 --> 00:02:58,700
you're thinking that's not going to work

75
00:02:58,700 --> 00:03:01,370
right the Dom can be slow you know

76
00:03:01,370 --> 00:03:02,750
browsers are going to be it's going to

77
00:03:02,750 --> 00:03:04,580
be prohibitively expensive to try and do

78
00:03:04,580 --> 00:03:06,920
this to try and just reenter HTML

79
00:03:06,920 --> 00:03:08,570
everything every time anything changes

80
00:03:08,570 --> 00:03:10,310
especially in a real-time app or

81
00:03:10,310 --> 00:03:12,740
something that's really interactive so

82
00:03:12,740 --> 00:03:15,140
you know conceptually this is what we're

83
00:03:15,140 --> 00:03:16,760
going for though this is what we want we

84
00:03:16,760 --> 00:03:18,740
want to build something that gives us

85
00:03:18,740 --> 00:03:20,810
the conceptual simplicity of re

86
00:03:20,810 --> 00:03:22,340
rendering from scratch on every single

87
00:03:22,340 --> 00:03:24,800
event um but you know without the

88
00:03:24,800 --> 00:03:26,090
overhead because that's primitively

89
00:03:26,090 --> 00:03:29,540
expensive so about 18 months to 2 years

90
00:03:29,540 --> 00:03:32,180
ago and missing the exact date we

91
00:03:32,180 --> 00:03:33,890
started working on a javascript library

92
00:03:33,890 --> 00:03:35,510
that helps us do that and we call it

93
00:03:35,510 --> 00:03:37,250
react so that was all the fluffy stuff

94
00:03:37,250 --> 00:03:39,350
and I'm going to let Jordan come up and

95
00:03:39,350 --> 00:03:40,670
talk about some of the more technical

96
00:03:40,670 --> 00:03:47,480
details of this all right so like tom

97
00:03:47,480 --> 00:03:49,250
was saying one of the things that we

98
00:03:49,250 --> 00:03:51,410
strive for when we were building our

99
00:03:51,410 --> 00:03:53,000
component framework is that we want to

100
00:03:53,000 --> 00:03:54,709
minimize the amount of developer facing

101
00:03:54,709 --> 00:03:57,530
mutations that the developers exposed to

102
00:03:57,530 --> 00:04:00,170
and so react takes a different approach

103
00:04:00,170 --> 00:04:01,970
in a few ways the first is that it's

104
00:04:01,970 --> 00:04:04,580
highly declarative and so that doesn't

105
00:04:04,580 --> 00:04:05,900
that means that not just your initial

106
00:04:05,900 --> 00:04:07,400
rendering but also a lot of your updates

107
00:04:07,400 --> 00:04:09,920
are implemented via some kind of a

108
00:04:09,920 --> 00:04:12,230
declaration that's a non mutated

109
00:04:12,230 --> 00:04:15,470
description of what your UI should be ok

110
00:04:15,470 --> 00:04:17,959
so we don't have observable data binding

111
00:04:17,959 --> 00:04:21,280
inside of react we don't ship with it I

112
00:04:21,280 --> 00:04:23,120
imagine you could actually use it with

113
00:04:23,120 --> 00:04:24,770
react but a lot of the things that you

114
00:04:24,770 --> 00:04:26,510
might reach to observe observable data

115
00:04:26,510 --> 00:04:28,760
binding for in order to implement react

116
00:04:28,760 --> 00:04:29,930
provides a different way to do that and

117
00:04:29,930 --> 00:04:31,460
declaration is the way that we do that

118
00:04:31,460 --> 00:04:35,540
so along with react we are shipping an

119
00:04:35,540 --> 00:04:37,970
embeddable XML syntax and we're calling

120
00:04:37,970 --> 00:04:41,360
that JSX so this is similar to a lot of

121
00:04:41,360 --> 00:04:42,620
the work and language proposals that

122
00:04:42,620 --> 00:04:44,600
might have happened in the past but

123
00:04:44,600 --> 00:04:45,650
we're unique

124
00:04:45,650 --> 00:04:47,930
a few ways and I'll let you take a look

125
00:04:47,930 --> 00:04:49,790
at what that looks like first okay so

126
00:04:49,790 --> 00:04:53,810
here we have react used with JSX and so

127
00:04:53,810 --> 00:04:55,820
we are creating a message variable and

128
00:04:55,820 --> 00:04:58,220
we're assigning it to a react div

129
00:04:58,220 --> 00:05:03,520
instance and it has an invested interest

130
00:05:03,520 --> 00:05:04,729
is

131
00:05:04,729 --> 00:05:07,310
are not exactly what you're used to

132
00:05:07,310 --> 00:05:09,620
they're not Dom nodes so there's special

133
00:05:09,620 --> 00:05:11,389
reactives and I'll get to why that's

134
00:05:11,389 --> 00:05:14,120
important at the bottom there we render

135
00:05:14,120 --> 00:05:19,970
it so one thing that makes JSX unique is

136
00:05:19,970 --> 00:05:22,370
that it's a very lightweight transform

137
00:05:22,370 --> 00:05:24,289
all we do is transform these tags into

138
00:05:24,289 --> 00:05:26,990
function invocations so it's not quite

139
00:05:26,990 --> 00:05:29,930
as nice looking but you can see it even

140
00:05:29,930 --> 00:05:31,940
preserves the line the line number so if

141
00:05:31,940 --> 00:05:33,650
you pass this to your linter it'll catch

142
00:05:33,650 --> 00:05:35,419
like tags that are out of scope your

143
00:05:35,419 --> 00:05:36,889
link messages will appear in the right

144
00:05:36,889 --> 00:05:39,560
line and everything's low tooling is the

145
00:05:39,560 --> 00:05:40,699
key here

146
00:05:40,699 --> 00:05:44,449
but JSX is also optional if you want to

147
00:05:44,449 --> 00:05:46,669
build with react so if you like this you

148
00:05:46,669 --> 00:05:48,410
can write that but I think you guys

149
00:05:48,410 --> 00:05:52,310
would agree that this is a lot better so

150
00:05:52,310 --> 00:05:55,010
react is more than just about Dom nodes

151
00:05:55,010 --> 00:05:57,560
and Dom components but react is

152
00:05:57,560 --> 00:05:59,210
primarily a way for you to abstract

153
00:05:59,210 --> 00:06:01,370
reusable code and high to implementation

154
00:06:01,370 --> 00:06:05,000
details of your application UI so the

155
00:06:05,000 --> 00:06:06,800
primary focus of react is allowing you

156
00:06:06,800 --> 00:06:10,760
to build custom components so the way

157
00:06:10,760 --> 00:06:12,530
that you use a custom component is a lot

158
00:06:12,530 --> 00:06:13,760
like the way that you would use a div or

159
00:06:13,760 --> 00:06:16,880
a span we can use the XML syntax JSX to

160
00:06:16,880 --> 00:06:19,820
instantiate it so we have XML attributes

161
00:06:19,820 --> 00:06:23,030
text and a non-action callback provided

162
00:06:23,030 --> 00:06:24,860
here and these become the properties of

163
00:06:24,860 --> 00:06:26,780
your view instance or of your react

164
00:06:26,780 --> 00:06:30,409
component instance so you probably want

165
00:06:30,409 --> 00:06:34,250
to check out how we implement or define

166
00:06:34,250 --> 00:06:37,520
this action button a couple things just

167
00:06:37,520 --> 00:06:39,979
to note is that we make one call to

168
00:06:39,979 --> 00:06:42,800
react up create class and then we also

169
00:06:42,800 --> 00:06:45,080
supply a render function so what this

170
00:06:45,080 --> 00:06:48,169
does this creates a class to model your

171
00:06:48,169 --> 00:06:52,010
component and it will extend or it will

172
00:06:52,010 --> 00:06:53,690
mix in all the base functionality of the

173
00:06:53,690 --> 00:06:57,469
react of the react base so react is not

174
00:06:57,469 --> 00:06:58,960
an object oriented for

175
00:06:58,960 --> 00:07:01,000
Geist framework though we use a little

176
00:07:01,000 --> 00:07:02,289
bit of inheritance just because that

177
00:07:02,289 --> 00:07:03,910
lends itself naturally to what

178
00:07:03,910 --> 00:07:06,190
JavaScript is good at but other than

179
00:07:06,190 --> 00:07:07,690
that the core paradigm here is an

180
00:07:07,690 --> 00:07:09,340
object-oriented so I thought I would

181
00:07:09,340 --> 00:07:11,470
call that out so you can supply other

182
00:07:11,470 --> 00:07:12,849
methods here and they get mixed into

183
00:07:12,849 --> 00:07:16,930
your prototype and so the moment you

184
00:07:16,930 --> 00:07:18,699
define the action button you can

185
00:07:18,699 --> 00:07:20,620
actually reference it it becomes in

186
00:07:20,620 --> 00:07:23,500
scope and your linter won't complain if

187
00:07:23,500 --> 00:07:24,970
action button wasn't in scope you know

188
00:07:24,970 --> 00:07:26,830
your linter would say you know this is

189
00:07:26,830 --> 00:07:29,319
not defined so it's a very JavaScript

190
00:07:29,319 --> 00:07:34,330
centric language this JSX and so render

191
00:07:34,330 --> 00:07:36,669
has one purpose and that is just is to

192
00:07:36,669 --> 00:07:38,620
describe your view at any point in time

193
00:07:38,620 --> 00:07:42,039
so that doesn't mean just the initial

194
00:07:42,039 --> 00:07:44,560
render but at any point in time so let's

195
00:07:44,560 --> 00:07:45,550
go through what that might look like

196
00:07:45,550 --> 00:07:48,669
over a series of updates ok so we're

197
00:07:48,669 --> 00:07:50,229
starting out with a shell here we have

198
00:07:50,229 --> 00:07:54,250
an outer button and an inner span so we

199
00:07:54,250 --> 00:07:55,330
want to do something interesting with

200
00:07:55,330 --> 00:07:57,190
the properties that were given we want

201
00:07:57,190 --> 00:07:58,780
to be able to interpret them into a user

202
00:07:58,780 --> 00:08:01,630
experience so what we do is we take the

203
00:08:01,630 --> 00:08:04,120
property text and route it down into the

204
00:08:04,120 --> 00:08:05,949
inner span and the way you do that is

205
00:08:05,949 --> 00:08:07,720
you can refer to these XML attributes

206
00:08:07,720 --> 00:08:11,380
that are passed in via this dot props so

207
00:08:11,380 --> 00:08:12,610
you can see they're in the center where

208
00:08:12,610 --> 00:08:15,340
we're routing the book flight text into

209
00:08:15,340 --> 00:08:19,000
the inner span but these XML attributes

210
00:08:19,000 --> 00:08:20,469
don't just have to be strings because

211
00:08:20,469 --> 00:08:23,169
we're in JavaScript and JSX and wrap is

212
00:08:23,169 --> 00:08:26,469
JavaScript focused so we have a function

213
00:08:26,469 --> 00:08:27,969
that we're being supplied here in the on

214
00:08:27,969 --> 00:08:29,710
action callback and we're routing that

215
00:08:29,710 --> 00:08:32,020
to the buttons on click so in action

216
00:08:32,020 --> 00:08:35,020
buttons on action is a Dom buttons on

217
00:08:35,020 --> 00:08:38,709
click in this case and so it helps to

218
00:08:38,709 --> 00:08:41,860
view at least initially react component

219
00:08:41,860 --> 00:08:43,570
as a transform from these properties

220
00:08:43,570 --> 00:08:45,520
into a user experience and you can just

221
00:08:45,520 --> 00:08:46,990
kind of imagine these being routed to

222
00:08:46,990 --> 00:08:52,000
their proper locations but react is more

223
00:08:52,000 --> 00:08:53,920
than just a routing tool you can do any

224
00:08:53,920 --> 00:08:55,270
kind of transform that you or you can do

225
00:08:55,270 --> 00:08:56,860
any JavaScript expression that you want

226
00:08:56,860 --> 00:08:59,620
inside of these interpolation braces so

227
00:08:59,620 --> 00:09:00,790
that means that we can uppercase the

228
00:09:00,790 --> 00:09:02,649
text and so anytime the text changes

229
00:09:02,649 --> 00:09:05,740
this will always be uppercase so like I

230
00:09:05,740 --> 00:09:07,570
mentioned earlier render isn't just your

231
00:09:07,570 --> 00:09:09,100
initial isn't just your initial

232
00:09:09,100 --> 00:09:10,449
rendering but it's actually your

233
00:09:10,449 --> 00:09:11,420
rendering over

234
00:09:11,420 --> 00:09:13,370
points in time so as your properties

235
00:09:13,370 --> 00:09:16,730
change as your properties change the

236
00:09:16,730 --> 00:09:18,830
render output change changes and then

237
00:09:18,830 --> 00:09:20,840
react satisfies your render function

238
00:09:20,840 --> 00:09:22,310
it'll make sure that the user

239
00:09:22,310 --> 00:09:24,800
experiences render exactly as you've

240
00:09:24,800 --> 00:09:27,770
described at any point in time and so

241
00:09:27,770 --> 00:09:29,360
what react will do is it will find the

242
00:09:29,360 --> 00:09:31,190
minimal set of Dom mutations needed to

243
00:09:31,190 --> 00:09:32,030
make that happen

244
00:09:32,030 --> 00:09:36,920
so let's say that you're you're let's

245
00:09:36,920 --> 00:09:38,840
say that your texts have changed so

246
00:09:38,840 --> 00:09:40,430
react will find that the only thing that

247
00:09:40,430 --> 00:09:42,230
needs to change is that inner innermost

248
00:09:42,230 --> 00:09:45,440
spans text content so I'll explain a

249
00:09:45,440 --> 00:09:48,370
little bit more about how that works

250
00:09:48,370 --> 00:09:51,380
but but the key here is that you can

251
00:09:51,380 --> 00:09:53,810
react these previously abstracted

252
00:09:53,810 --> 00:09:55,610
components we already saw the action

253
00:09:55,610 --> 00:09:57,260
button and that was a simple and

254
00:09:57,260 --> 00:09:59,690
stateless component but you know you'll

255
00:09:59,690 --> 00:10:00,890
eventually want to build something more

256
00:10:00,890 --> 00:10:02,150
complex something more like an

257
00:10:02,150 --> 00:10:03,920
application it will have its own

258
00:10:03,920 --> 00:10:08,870
internal state so let's do that so this

259
00:10:08,870 --> 00:10:11,420
is a simplest stateful component that

260
00:10:11,420 --> 00:10:13,130
you could imagine it's the counter has

261
00:10:13,130 --> 00:10:14,900
an increment and decrement button and

262
00:10:14,900 --> 00:10:17,240
you'll see that we're actually reusing

263
00:10:17,240 --> 00:10:19,040
our action button that we created in the

264
00:10:19,040 --> 00:10:21,980
last example so we have two action

265
00:10:21,980 --> 00:10:23,300
buttons one that increments one that

266
00:10:23,300 --> 00:10:28,550
decrements so this is new if you want to

267
00:10:28,550 --> 00:10:30,020
build an application and you don't just

268
00:10:30,020 --> 00:10:32,060
want simple stateless views you want to

269
00:10:32,060 --> 00:10:33,860
be able to define some kind of a state

270
00:10:33,860 --> 00:10:35,180
machine you want your component to be

271
00:10:35,180 --> 00:10:36,560
able to assume the role of a state

272
00:10:36,560 --> 00:10:38,420
machine in some way and so state

273
00:10:38,420 --> 00:10:41,060
machines need an initial State so good

274
00:10:41,060 --> 00:10:42,920
initial state is a special function that

275
00:10:42,920 --> 00:10:44,630
react allows you to implement in order

276
00:10:44,630 --> 00:10:45,920
for you to define what your initial

277
00:10:45,920 --> 00:10:48,980
state is so in this case we're setting

278
00:10:48,980 --> 00:10:51,650
the count member of our state to be

279
00:10:51,650 --> 00:10:54,020
equal to the initial count property that

280
00:10:54,020 --> 00:10:55,850
was passed in and the example there

281
00:10:55,850 --> 00:10:57,890
passes for so we're going to initialize

282
00:10:57,890 --> 00:11:02,660
our state to be 4

283
00:11:02,670 --> 00:11:05,230
so this is where it gets really

284
00:11:05,230 --> 00:11:07,030
interesting the same way that we could

285
00:11:07,030 --> 00:11:08,740
refer to props in our render function

286
00:11:08,740 --> 00:11:11,740
and assume that they're always up to

287
00:11:11,740 --> 00:11:13,750
date because react ensures that we can

288
00:11:13,750 --> 00:11:15,700
also refer to state inside of our render

289
00:11:15,700 --> 00:11:17,080
function and assume that they're always

290
00:11:17,080 --> 00:11:19,570
up to date so anytime your properties or

291
00:11:19,570 --> 00:11:22,720
your state changes render will render

292
00:11:22,720 --> 00:11:24,940
will remain satisfied by the react

293
00:11:24,940 --> 00:11:29,320
system so the the content of that h 3

294
00:11:29,320 --> 00:11:31,840
there will always show the states count

295
00:11:31,840 --> 00:11:33,130
and you can put any expression there

296
00:11:33,130 --> 00:11:34,750
again you can put a ternary that decides

297
00:11:34,750 --> 00:11:36,610
what to render their special messaging

298
00:11:36,610 --> 00:11:41,430
depending on like certain counts okay so

299
00:11:41,430 --> 00:11:43,540
to make these state changes actually

300
00:11:43,540 --> 00:11:47,160
happen we bind the add to count method

301
00:11:47,160 --> 00:11:50,470
to our action buttons on action and so

302
00:11:50,470 --> 00:11:52,000
when we increment one we're going to add

303
00:11:52,000 --> 00:11:54,340
to count passing in 1 because we bound

304
00:11:54,340 --> 00:11:57,100
it there in the callback and so what we

305
00:11:57,100 --> 00:11:59,560
do is we set state which is like a state

306
00:11:59,560 --> 00:12:01,420
transition if our components are state

307
00:12:01,420 --> 00:12:03,160
machine then set state is how you

308
00:12:03,160 --> 00:12:04,780
perform state transitions on the state

309
00:12:04,780 --> 00:12:07,510
machine what we do is we set the next

310
00:12:07,510 --> 00:12:09,700
count to be equal to the current count

311
00:12:09,700 --> 00:12:15,700
plus the Delta alright so how does this

312
00:12:15,700 --> 00:12:20,800
work so there's two main passes here or

313
00:12:20,800 --> 00:12:22,840
there's two main stages to the react

314
00:12:22,840 --> 00:12:25,660
component life lifecycle there's the

315
00:12:25,660 --> 00:12:28,480
initial rendering and so what we do for

316
00:12:28,480 --> 00:12:31,300
the sake of flexibility is we compute a

317
00:12:31,300 --> 00:12:35,200
giant markup string and so react will

318
00:12:35,200 --> 00:12:37,090
traverse your entire component hierarchy

319
00:12:37,090 --> 00:12:38,920
tree and we'll create a markup string

320
00:12:38,920 --> 00:12:41,130
that injects into wherever you render it

321
00:12:41,130 --> 00:12:43,990
now there's a second phase to that

322
00:12:43,990 --> 00:12:45,880
initial to that initial stage there and

323
00:12:45,880 --> 00:12:47,800
that is that we instantiate all the

324
00:12:47,800 --> 00:12:49,720
backing objects and attach all the event

325
00:12:49,720 --> 00:12:51,460
handlers what's interesting here is that

326
00:12:51,460 --> 00:12:53,170
these two things can occur in two

327
00:12:53,170 --> 00:12:55,570
different places on your system two

328
00:12:55,570 --> 00:12:57,090
different computers

329
00:12:57,090 --> 00:13:00,970
anywhere in the world so you could you

330
00:13:00,970 --> 00:13:02,830
could in theory render the markup on a

331
00:13:02,830 --> 00:13:04,990
server and then attach all the event

332
00:13:04,990 --> 00:13:07,330
handlers and instantiate all the backing

333
00:13:07,330 --> 00:13:09,880
views on the client to completely

334
00:13:09,880 --> 00:13:12,460
separate machines we could talk a lot

335
00:13:12,460 --> 00:13:14,280
more about that too

336
00:13:14,280 --> 00:13:17,500
but the second primary phase of a

337
00:13:17,500 --> 00:13:19,930
components lifecycle is when these

338
00:13:19,930 --> 00:13:22,060
changes in data happen so we need to

339
00:13:22,060 --> 00:13:23,890
make the UI fresh and that's what

340
00:13:23,890 --> 00:13:26,230
reconciliation is is this updating new

341
00:13:26,230 --> 00:13:27,940
year it's making sure that your UI is

342
00:13:27,940 --> 00:13:29,950
updated anytime any of your data sources

343
00:13:29,950 --> 00:13:34,210
change and so how this works is that it

344
00:13:34,210 --> 00:13:36,310
recursively compares subsequent

345
00:13:36,310 --> 00:13:38,380
invocations of render and it takes the

346
00:13:38,380 --> 00:13:40,930
outputs of those and it creates a the

347
00:13:40,930 --> 00:13:42,850
smallest if possible to make sure that

348
00:13:42,850 --> 00:13:44,410
your UI is is up to date

349
00:13:44,410 --> 00:13:45,970
so if only one little Dom node changes

350
00:13:45,970 --> 00:13:48,220
or if only one class name or one style

351
00:13:48,220 --> 00:13:49,860
attribute on on a Dom node that's

352
00:13:49,860 --> 00:13:52,210
possibly 50 levels deep in your view

353
00:13:52,210 --> 00:13:54,370
hierarchy changes will will serialize

354
00:13:54,370 --> 00:13:56,500
these diff commands basically over this

355
00:13:56,500 --> 00:13:58,780
logical bridge to this other part of the

356
00:13:58,780 --> 00:14:00,520
system that will apply to that smallest

357
00:14:00,520 --> 00:14:05,560
mutation and so again just to illustrate

358
00:14:05,560 --> 00:14:07,750
that in more depth here if this text

359
00:14:07,750 --> 00:14:09,370
changes from book flight to book hotel

360
00:14:09,370 --> 00:14:13,060
only that span the only dom command that

361
00:14:13,060 --> 00:14:14,800
will ever execute is to make sure that

362
00:14:14,800 --> 00:14:16,840
that spans inter text has changed we

363
00:14:16,840 --> 00:14:19,830
won't even read from the dom actually

364
00:14:19,830 --> 00:14:22,750
okay so anybody that's giving a

365
00:14:22,750 --> 00:14:24,310
presentation at a conference is going to

366
00:14:24,310 --> 00:14:26,370
show you the most contrived examples and

367
00:14:26,370 --> 00:14:30,310
so react is no different but there's

368
00:14:30,310 --> 00:14:32,050
also an escape hatch or several escape

369
00:14:32,050 --> 00:14:33,640
hatches that you can that you can tap

370
00:14:33,640 --> 00:14:35,710
into in the react system so some of the

371
00:14:35,710 --> 00:14:36,580
things you're going to want to do is

372
00:14:36,580 --> 00:14:37,810
you're going to want to integrate with

373
00:14:37,810 --> 00:14:39,190
your existing frameworks or your

374
00:14:39,190 --> 00:14:41,380
existing code and so we allow plenty of

375
00:14:41,380 --> 00:14:44,130
ways to let you to let you do that and

376
00:14:44,130 --> 00:14:46,960
and another more interesting escape

377
00:14:46,960 --> 00:14:48,640
hatch that we have is a way for you to

378
00:14:48,640 --> 00:14:50,440
be able to help guide this process along

379
00:14:50,440 --> 00:14:52,390
so react is finding this diff the

380
00:14:52,390 --> 00:14:54,010
smallest possible set of Don changes

381
00:14:54,010 --> 00:14:55,630
that need to be applied and that can

382
00:14:55,630 --> 00:14:59,170
take some time so what we allow is we

383
00:14:59,170 --> 00:15:00,400
allow you to prune out a lot of the

384
00:15:00,400 --> 00:15:02,800
search space and help react and help

385
00:15:02,800 --> 00:15:05,260
guide react along to find these small as

386
00:15:05,260 --> 00:15:07,990
to come these smallest ifs and so those

387
00:15:07,990 --> 00:15:09,580
are completely optional you can you can

388
00:15:09,580 --> 00:15:10,690
put them in your code or you can take

389
00:15:10,690 --> 00:15:12,820
them out and the same application runs

390
00:15:12,820 --> 00:15:14,130
just faster or slower

391
00:15:14,130 --> 00:15:17,260
so it's tree it's a it's treating this

392
00:15:17,260 --> 00:15:19,450
optimization step as a complete a

393
00:15:19,450 --> 00:15:20,950
completely separate part of development

394
00:15:20,950 --> 00:15:22,390
it's not core you don't start with the

395
00:15:22,390 --> 00:15:24,490
optimizations but you you identify the

396
00:15:24,490 --> 00:15:25,720
bottlenecks and apply them where

397
00:15:25,720 --> 00:15:27,070
necessary

398
00:15:27,070 --> 00:15:28,760
okay so I'm going to kick it back to

399
00:15:28,760 --> 00:15:30,740
Tomo and he's going to tell a little bit

400
00:15:30,740 --> 00:15:33,580
about the history of react in the future

401
00:15:33,580 --> 00:15:36,710
thanks Jordan yeah so the interesting

402
00:15:36,710 --> 00:15:38,540
thing about that escape hatch is that's

403
00:15:38,540 --> 00:15:39,950
actually pretty important to being able

404
00:15:39,950 --> 00:15:41,930
to iterate on your product over time so

405
00:15:41,930 --> 00:15:43,910
another hook that you get is basically

406
00:15:43,910 --> 00:15:46,250
at any point you can say just give me a

407
00:15:46,250 --> 00:15:47,900
Dom node and let me write JavaScript so

408
00:15:47,900 --> 00:15:49,280
one of the examples that we had up here

409
00:15:49,280 --> 00:15:51,860
was and we just trimmed it for content

410
00:15:51,860 --> 00:15:53,960
but like you can basically say okay I

411
00:15:53,960 --> 00:15:55,880
have this other plugin from some other

412
00:15:55,880 --> 00:15:57,440
framework that does like Auto growing

413
00:15:57,440 --> 00:15:59,480
text areas or that does like an

414
00:15:59,480 --> 00:16:01,520
autocomplete ER and you can basically

415
00:16:01,520 --> 00:16:03,530
wire those things up via that escape

416
00:16:03,530 --> 00:16:05,180
hatch really easily and this is actually

417
00:16:05,180 --> 00:16:06,890
why this framework was able to be

418
00:16:06,890 --> 00:16:08,690
successful at Facebook we didn't have to

419
00:16:08,690 --> 00:16:10,310
convert everything we could use it kind

420
00:16:10,310 --> 00:16:13,490
of piecemeal but yeah I mean this

421
00:16:13,490 --> 00:16:15,080
started a long time ago this started

422
00:16:15,080 --> 00:16:16,670
probably eighteen months ago

423
00:16:16,670 --> 00:16:18,200
somewhere between 18 months and two

424
00:16:18,200 --> 00:16:20,450
years ago and you know at this point

425
00:16:20,450 --> 00:16:22,160
we're using this all over Facebook calm

426
00:16:22,160 --> 00:16:23,990
if you've ever commented on anything on

427
00:16:23,990 --> 00:16:26,180
Facebook or liked anything if you've

428
00:16:26,180 --> 00:16:28,100
ever talked and chat or integrated or

429
00:16:28,100 --> 00:16:30,590
used your buddy list and or even use

430
00:16:30,590 --> 00:16:32,120
your notifications there's a bunch of

431
00:16:32,120 --> 00:16:33,440
different places where we've been using

432
00:16:33,440 --> 00:16:34,550
this for a really long time

433
00:16:34,550 --> 00:16:36,440
and it's been working out really really

434
00:16:36,440 --> 00:16:39,020
well for us so about a year ago when

435
00:16:39,020 --> 00:16:41,690
Instagram joined Facebook we had this

436
00:16:41,690 --> 00:16:43,280
this is the first time that this ever

437
00:16:43,280 --> 00:16:45,740
happened to us we had somebody else who

438
00:16:45,740 --> 00:16:47,420
wasn't on Facebook's infrastructure that

439
00:16:47,420 --> 00:16:49,480
wanted to use Facebook's infrastructure

440
00:16:49,480 --> 00:16:51,620
and you know we've presented a bunch of

441
00:16:51,620 --> 00:16:53,510
stuff at J's conf in the past and you

442
00:16:53,510 --> 00:16:55,910
know historically our you know excuses

443
00:16:55,910 --> 00:16:57,470
kind of been you know it's pretty tough

444
00:16:57,470 --> 00:16:58,550
to divorce things from our

445
00:16:58,550 --> 00:17:00,560
infrastructure but Instagram joined us

446
00:17:00,560 --> 00:17:02,060
and they really wanted to use this and

447
00:17:02,060 --> 00:17:03,470
they sort of acted like a forcing

448
00:17:03,470 --> 00:17:05,840
function for us Rebecca made a great

449
00:17:05,840 --> 00:17:07,280
comment about writing your code as if

450
00:17:07,280 --> 00:17:09,080
it's open-source so what we started to

451
00:17:09,080 --> 00:17:10,880
do is we just went through all of react

452
00:17:10,880 --> 00:17:12,470
and all of the build steps and all of

453
00:17:12,470 --> 00:17:14,000
those tool and all the tooling behind it

454
00:17:14,000 --> 00:17:17,180
and we built it or you know refactored

455
00:17:17,180 --> 00:17:19,700
it and rebuilt it such that it was able

456
00:17:19,700 --> 00:17:21,770
to be open sourced so that Instagram

457
00:17:21,770 --> 00:17:24,350
could use it on Instagram calm in fact

458
00:17:24,350 --> 00:17:25,940
Instagram calm was their first project

459
00:17:25,940 --> 00:17:27,980
that they wanted to take on after they

460
00:17:27,980 --> 00:17:29,930
joined Facebook and in a matter of a

461
00:17:29,930 --> 00:17:32,150
week or two they built all of Instagram

462
00:17:32,150 --> 00:17:35,240
comm profiles on this system which was

463
00:17:35,240 --> 00:17:36,920
amazing for us we were really excited

464
00:17:36,920 --> 00:17:37,880
about that

465
00:17:37,880 --> 00:17:39,860
they basically again they

466
00:17:39,860 --> 00:17:41,420
as a forcing function for us to kind of

467
00:17:41,420 --> 00:17:43,670
get our house in order and you know this

468
00:17:43,670 --> 00:17:45,710
you know divorce are our infrastructure

469
00:17:45,710 --> 00:17:47,870
from this library and some other

470
00:17:47,870 --> 00:17:50,720
libraries so you know all of Instagram

471
00:17:50,720 --> 00:17:52,220
comm is unreacted ow

472
00:17:52,220 --> 00:17:54,559
and you know it gave us practice with

473
00:17:54,559 --> 00:17:56,660
somewhat of an external client so the

474
00:17:56,660 --> 00:17:58,010
logical next step for all the people

475
00:17:58,010 --> 00:17:59,360
that have been working on this is you

476
00:17:59,360 --> 00:18:01,280
know you know we want to open-source

477
00:18:01,280 --> 00:18:03,920
this and actually incidentally we did

478
00:18:03,920 --> 00:18:05,590
that about a half-hour ago

479
00:18:05,590 --> 00:18:08,780
so ha if you check out Facebook thank

480
00:18:08,780 --> 00:18:13,160
you so again you know I want to be

481
00:18:13,160 --> 00:18:14,330
really humble here this is just

482
00:18:14,330 --> 00:18:15,410
something that we're using it's

483
00:18:15,410 --> 00:18:16,850
something that works really well for us

484
00:18:16,850 --> 00:18:18,679
we're really interested to get any

485
00:18:18,679 --> 00:18:20,870
feedback we can you know definitely

486
00:18:20,870 --> 00:18:23,570
check out the link you know we're really

487
00:18:23,570 --> 00:18:25,070
open to feedback there's a Google Group

488
00:18:25,070 --> 00:18:28,400
there's an IRC chat room there's you

489
00:18:28,400 --> 00:18:30,230
know all sorts of like on github there's

490
00:18:30,230 --> 00:18:33,919
a you know issues and stuff there so you

491
00:18:33,919 --> 00:18:51,440
know that's react and you know thank you

