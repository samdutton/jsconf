1
00:00:17,170 --> 00:00:19,550

alright so I'm going to talk about why

2
00:00:19,550 --> 00:00:23,060
code is cool but products are better I'm

3
00:00:23,060 --> 00:00:25,130
Erin Heckman i work at learn boost we're

4
00:00:25,130 --> 00:00:28,400
building the next generation education

5
00:00:28,400 --> 00:00:32,000
platform on the web and if you're

6
00:00:32,000 --> 00:00:33,890
familiar with learn boost it's probably

7
00:00:33,890 --> 00:00:36,980
because of our github presence for real

8
00:00:36,980 --> 00:00:40,629
believers in open source and and

9
00:00:40,629 --> 00:00:43,610
javascript in general but i'm not going

10
00:00:43,610 --> 00:00:44,930
to talk about any of our open source

11
00:00:44,930 --> 00:00:47,300
stuff today pretty much i want to just

12
00:00:47,300 --> 00:00:49,070
share some things are doing internally

13
00:00:49,070 --> 00:00:52,790
that that are pretty cool in my opinion

14
00:00:52,790 --> 00:00:56,390
so why do i say products are better than

15
00:00:56,390 --> 00:00:58,940
code we're at this tech conference what

16
00:00:58,940 --> 00:01:02,180
we're really like you know in deep to

17
00:01:02,180 --> 00:01:04,280
like these greatest techniques and how

18
00:01:04,280 --> 00:01:06,260
to do things really awesome is software

19
00:01:06,260 --> 00:01:08,479
craftsman but i think it's important to

20
00:01:08,479 --> 00:01:12,380
remember who that end user is and it may

21
00:01:12,380 --> 00:01:15,350
be some of our cases they are developers

22
00:01:15,350 --> 00:01:19,280
but in learn boost case it's it's a

23
00:01:19,280 --> 00:01:21,980
typical you know user who knows how to

24
00:01:21,980 --> 00:01:25,390
use a computer or a mobile device and

25
00:01:25,390 --> 00:01:28,220
they're not they don't really care too

26
00:01:28,220 --> 00:01:30,140
much about that i mean we could we could

27
00:01:30,140 --> 00:01:33,980
spend a lot of time building a mountain

28
00:01:33,980 --> 00:01:37,670
of amazing super efficient coolest you

29
00:01:37,670 --> 00:01:41,180
know techniques software but our users

30
00:01:41,180 --> 00:01:43,520
don't really care so much about how it's

31
00:01:43,520 --> 00:01:45,380
made they just want to know that it

32
00:01:45,380 --> 00:01:48,500
works and in this example of a ugly

33
00:01:48,500 --> 00:01:51,470
antenna spitting out numbers these users

34
00:01:51,470 --> 00:01:53,150
probably just care about something like

35
00:01:53,150 --> 00:01:56,180
a wall of boom boxes blasting fresh cuts

36
00:01:56,180 --> 00:01:57,290
so they can have an awesome break

37
00:01:57,290 --> 00:02:00,799
dancing party I mean the product is the

38
00:02:00,799 --> 00:02:03,049
boom box in this case and you know they

39
00:02:03,049 --> 00:02:05,570
just they just want their life to be

40
00:02:05,570 --> 00:02:09,409
improved in some way shape or form so at

41
00:02:09,409 --> 00:02:10,940
learn posts were we're four and a half

42
00:02:10,940 --> 00:02:15,280
developers were pretty small and

43
00:02:15,280 --> 00:02:17,900
building our infrastructure on top of

44
00:02:17,900 --> 00:02:20,720
node J s means we've had to write a lot

45
00:02:20,720 --> 00:02:23,780
of things ourselves and so we kind of

46
00:02:23,780 --> 00:02:25,010
need to be careful about where we're

47
00:02:25,010 --> 00:02:28,430
spending our time because we really want

48
00:02:28,430 --> 00:02:30,210
to stay focused on the product but yet

49
00:02:30,210 --> 00:02:32,310
work on the projects that we're really

50
00:02:32,310 --> 00:02:35,640
interested in and or that just need to

51
00:02:35,640 --> 00:02:37,830
be done because there's you know no

52
00:02:37,830 --> 00:02:40,080
module to do whatever it is we're trying

53
00:02:40,080 --> 00:02:42,480
to do so we want to be more like neo and

54
00:02:42,480 --> 00:02:43,590
we want to fly at a million miles an

55
00:02:43,590 --> 00:02:47,970
hour but how do we do that in in general

56
00:02:47,970 --> 00:02:52,230
and I'm going to cover a few ways that

57
00:02:52,230 --> 00:02:55,710
we do that and it primarily the way we

58
00:02:55,710 --> 00:02:59,740
save time is by not writing any code

59
00:02:59,750 --> 00:03:03,870
yeah so the first way we don't write

60
00:03:03,870 --> 00:03:06,030
code at learn boost is by not writing

61
00:03:06,030 --> 00:03:08,970
any Ajax and I'm not saying we don't use

62
00:03:08,970 --> 00:03:11,250
Ajax because we use it everywhere like

63
00:03:11,250 --> 00:03:15,720
an every page a lot but for ninety-nine

64
00:03:15,720 --> 00:03:18,480
percent of our use cases we don't write

65
00:03:18,480 --> 00:03:21,200
it anymore it's all just abstracted out

66
00:03:21,200 --> 00:03:24,690
so we can save time and I mean I

67
00:03:24,690 --> 00:03:27,450
personally believe that if you're

68
00:03:27,450 --> 00:03:29,100
writing Ajax today you're probably doing

69
00:03:29,100 --> 00:03:31,410
it wrong because you don't really have

70
00:03:31,410 --> 00:03:32,940
to and I'm going to kind of go into some

71
00:03:32,940 --> 00:03:35,820
detail we use something we'd like to

72
00:03:35,820 --> 00:03:39,300
call data dynamic to to take care of

73
00:03:39,300 --> 00:03:41,760
this for us and it's really just a fancy

74
00:03:41,760 --> 00:03:44,250
name for a lot of jQuery event

75
00:03:44,250 --> 00:03:48,630
delegation and part two is a managed

76
00:03:48,630 --> 00:03:53,310
JSON response from the server so as far

77
00:03:53,310 --> 00:03:57,210
as event delegation goes will take like

78
00:03:57,210 --> 00:03:59,070
a traditional form and we throw this

79
00:03:59,070 --> 00:04:02,100
data dynamic attribute on it and so our

80
00:04:02,100 --> 00:04:06,090
event delegator picks up on that and

81
00:04:06,090 --> 00:04:07,380
it's smart enough to just serialize the

82
00:04:07,380 --> 00:04:09,270
form and send it back to the server

83
00:04:09,270 --> 00:04:11,310
that's pretty standard but it's also

84
00:04:11,310 --> 00:04:13,020
smart enough to know if the jQuery

85
00:04:13,020 --> 00:04:15,150
validator fails you know how to display

86
00:04:15,150 --> 00:04:16,830
those messages and and not submit

87
00:04:16,830 --> 00:04:18,690
anything so that's nothing really

88
00:04:18,690 --> 00:04:22,230
mind-blowing or whatever but it doesn't

89
00:04:22,230 --> 00:04:24,810
have to be a form it can be any element

90
00:04:24,810 --> 00:04:27,090
on our page that we feel like putting

91
00:04:27,090 --> 00:04:29,160
this on and we just point that attribute

92
00:04:29,160 --> 00:04:31,860
at a route that we want to hit and so in

93
00:04:31,860 --> 00:04:34,260
this case our anything route is just

94
00:04:34,260 --> 00:04:36,540
going to go or anything element when you

95
00:04:36,540 --> 00:04:38,040
click on it it's going to hit that wagon

96
00:04:38,040 --> 00:04:40,350
route and you're not limited to a get

97
00:04:40,350 --> 00:04:41,100
request which

98
00:04:41,100 --> 00:04:44,040
this this use case would be but you can

99
00:04:44,040 --> 00:04:45,840
change that you can put a method

100
00:04:45,840 --> 00:04:48,660
actually beat on any element and you

101
00:04:48,660 --> 00:04:50,010
know change it to a post and then we'll

102
00:04:50,010 --> 00:04:52,610
have our cross site request forgery

103
00:04:52,610 --> 00:04:55,730
protection like in place and all that

104
00:04:55,730 --> 00:04:58,910
another really common use case for us

105
00:04:58,910 --> 00:05:01,260
our dialogues we've used a ton of

106
00:05:01,260 --> 00:05:05,580
dialogues and so we can just throw a

107
00:05:05,580 --> 00:05:07,620
data pop up remote on there and that is

108
00:05:07,620 --> 00:05:09,900
what it sounds like we want to grab the

109
00:05:09,900 --> 00:05:12,660
content for the dialogue from a remote

110
00:05:12,660 --> 00:05:16,230
location so you know this would delegate

111
00:05:16,230 --> 00:05:18,480
off to the Oregon Trail route and then

112
00:05:18,480 --> 00:05:21,630
populated a dialogue with the response

113
00:05:21,630 --> 00:05:25,530
and similarly we do a lot of tooltips so

114
00:05:25,530 --> 00:05:27,390
tooltips work the same way just throw

115
00:05:27,390 --> 00:05:28,620
this at should be down there forget

116
00:05:28,620 --> 00:05:30,630
about it so we're not writing anything

117
00:05:30,630 --> 00:05:32,430
client-side anymore it's all delegated

118
00:05:32,430 --> 00:05:36,780
as far as setting up the requests go so

119
00:05:36,780 --> 00:05:38,370
the second part of that is that response

120
00:05:38,370 --> 00:05:40,310
which we don't want to write either

121
00:05:40,310 --> 00:05:43,550
because we're really lazy in a good way

122
00:05:43,550 --> 00:05:46,860
and so this this kind of just shows

123
00:05:46,860 --> 00:05:49,260
several the options that we have we're

124
00:05:49,260 --> 00:05:54,450
using Express so here with Express you

125
00:05:54,450 --> 00:05:56,340
can throw a buffer or an object or raise

126
00:05:56,340 --> 00:05:58,650
or whatever down into response that sent

127
00:05:58,650 --> 00:06:00,290
and it will see realize them for you

128
00:06:00,290 --> 00:06:03,030
into JSON and send that string down with

129
00:06:03,030 --> 00:06:06,000
a client but like these are the common

130
00:06:06,000 --> 00:06:07,920
use cases we have and so once we're on

131
00:06:07,920 --> 00:06:11,450
the server and we do what we need to do

132
00:06:11,450 --> 00:06:13,860
we can tell the client whatever it is

133
00:06:13,860 --> 00:06:15,390
that we feel like telling the client to

134
00:06:15,390 --> 00:06:19,050
do so we can replace elements we can

135
00:06:19,050 --> 00:06:21,360
omit events on either our global learn

136
00:06:21,360 --> 00:06:24,210
boost object or trigger events

137
00:06:24,210 --> 00:06:26,790
specifically on whatever elements we

138
00:06:26,790 --> 00:06:28,650
want to impasse in whatever args we want

139
00:06:28,650 --> 00:06:31,350
to pop up as the same thing as that data

140
00:06:31,350 --> 00:06:33,380
pop up remote that I was talking about

141
00:06:33,380 --> 00:06:36,660
so we don't need to you know ever get

142
00:06:36,660 --> 00:06:43,219
dirty with that redirects success

143
00:06:43,229 --> 00:06:46,210
validation failures it's all done right

144
00:06:46,210 --> 00:06:47,560
here we can control at all from the

145
00:06:47,560 --> 00:06:50,009
server so we never have to write any

146
00:06:50,009 --> 00:06:52,870
client site Ajax stuff anymore it's just

147
00:06:52,870 --> 00:06:56,650
all delegated to this thing so the

148
00:06:56,650 --> 00:06:59,139
second way we don't write code at learn

149
00:06:59,139 --> 00:07:03,400
boost is through our use of Express and

150
00:07:03,400 --> 00:07:08,080
Mongoose like I mentioned before Express

151
00:07:08,080 --> 00:07:10,780
is our web framework that we're using by

152
00:07:10,780 --> 00:07:13,930
TJ Holloway check and Mongoose is what

153
00:07:13,930 --> 00:07:17,080
we use as our RM to talk to MongoDB our

154
00:07:17,080 --> 00:07:20,259
primary data store so we're going to

155
00:07:20,259 --> 00:07:24,400
look at a little demo of how we use

156
00:07:24,400 --> 00:07:30,180
these together and so can you see that

157
00:07:30,180 --> 00:07:32,740
so we have a this is a typical use case

158
00:07:32,740 --> 00:07:35,740
for us we have some route we have a

159
00:07:35,740 --> 00:07:39,099
couple queries we want to run if any of

160
00:07:39,099 --> 00:07:41,169
the queries return an error we want to

161
00:07:41,169 --> 00:07:42,550
make sure that we're only passing that

162
00:07:42,550 --> 00:07:46,719
error into next once I don't know how

163
00:07:46,719 --> 00:07:48,789
many of you are familiar with express

164
00:07:48,789 --> 00:07:53,080
but next will pass the the route the

165
00:07:53,080 --> 00:07:55,419
control on to the next route and if

166
00:07:55,419 --> 00:07:57,009
there isn't another match for that URL

167
00:07:57,009 --> 00:07:59,259
hell just like 404 so anyway we only

168
00:07:59,259 --> 00:08:00,969
want to call next once just because

169
00:08:00,969 --> 00:08:04,479
otherwise it can cause problems so we're

170
00:08:04,479 --> 00:08:07,449
going to check for errors and then if

171
00:08:07,449 --> 00:08:09,849
both queries return successfully that we

172
00:08:09,849 --> 00:08:13,719
want to render those results and it

173
00:08:13,719 --> 00:08:18,730
seems pretty straightforward and it is

174
00:08:18,740 --> 00:08:22,069
but it's a lot of boilerplate in my

175
00:08:22,069 --> 00:08:24,380
opinion so you know we can see this in

176
00:08:24,380 --> 00:08:27,139
action I think if I'm running which I'm

177
00:08:27,139 --> 00:08:34,880
not so so they're just running we see

178
00:08:34,880 --> 00:08:37,130
that our latest news in there the things

179
00:08:37,130 --> 00:08:40,099
we like that's pretty boring but like

180
00:08:40,099 --> 00:08:43,580
it's a lot of boilerplate and we don't

181
00:08:43,580 --> 00:08:45,200
need to write any of that anymore so

182
00:08:45,200 --> 00:08:47,440
what we really want to just write is

183
00:08:47,440 --> 00:08:52,310
render and so this is pretty much

184
00:08:52,310 --> 00:08:55,730
representative of what we do we just

185
00:08:55,730 --> 00:08:59,450
return the result of that query in this

186
00:08:59,450 --> 00:09:02,060
case it's get latest news and get this

187
00:09:02,060 --> 00:09:03,830
user's likes just pass them straight

188
00:09:03,830 --> 00:09:08,000
into the render call and Express we have

189
00:09:08,000 --> 00:09:10,190
an express Mongoose plugin that's smart

190
00:09:10,190 --> 00:09:12,920
enough to to detect when queries or

191
00:09:12,920 --> 00:09:16,660
promises are passed in and resolve them

192
00:09:16,660 --> 00:09:19,040
appropriately and if any of those return

193
00:09:19,040 --> 00:09:22,339
an error of it will likewise pass that

194
00:09:22,339 --> 00:09:26,779
air on to next one time so it's still

195
00:09:26,779 --> 00:09:29,800
handled gracefully and we don't lose any

196
00:09:29,800 --> 00:09:32,480
functionality there so here's a readout

197
00:09:32,480 --> 00:09:35,720
the bacon route same result but hey it's

198
00:09:35,720 --> 00:09:38,300
with a lot less code so that makes me

199
00:09:38,300 --> 00:09:43,430
happy this Express Mongoose plugin is

200
00:09:43,430 --> 00:09:46,339
actually something we open sourced this

201
00:09:46,339 --> 00:09:48,110
morning even though you see the little

202
00:09:48,110 --> 00:09:50,930
lock on there that means it's not open

203
00:09:50,930 --> 00:09:52,730
source but it really is I can't refresh

204
00:09:52,730 --> 00:09:57,740
the page because I'm not online yeah so

205
00:09:57,740 --> 00:09:59,660
if you're using Express and Mongoose you

206
00:09:59,660 --> 00:10:04,280
might want to check that out

207
00:10:04,290 --> 00:10:08,130
and it's also on NPM the excellent NPM

208
00:10:08,130 --> 00:10:11,220
so here's another little trick that we

209
00:10:11,220 --> 00:10:14,519
use that it's it's actually quite simple

210
00:10:14,519 --> 00:10:18,959
that that TJ kind of stumbled upon but

211
00:10:18,959 --> 00:10:21,870
it's it's extremely helpful I really

212
00:10:21,870 --> 00:10:22,769
didn't think it would be all that

213
00:10:22,769 --> 00:10:25,019
helpful at first but if it's if it's

214
00:10:25,019 --> 00:10:29,339
proven actually pretty nice so it's it's

215
00:10:29,339 --> 00:10:31,190
instrumenting your code so note has this

216
00:10:31,190 --> 00:10:35,069
required out extensions object so you

217
00:10:35,069 --> 00:10:36,300
can like I think it's kind of how

218
00:10:36,300 --> 00:10:38,699
coffeescript works but it lets you jump

219
00:10:38,699 --> 00:10:43,339
in in between that require module call

220
00:10:43,339 --> 00:10:46,199
and then do whatever you want with your

221
00:10:46,199 --> 00:10:49,740
code and then respond or excuse me you

222
00:10:49,740 --> 00:10:52,050
return that string that will get turned

223
00:10:52,050 --> 00:10:55,709
into what node cares about so what we do

224
00:10:55,709 --> 00:10:59,880
is we just kind of override you actually

225
00:10:59,880 --> 00:11:01,800
let me show you an example it might be

226
00:11:01,800 --> 00:11:05,940
easier to see what I'm getting at so

227
00:11:05,940 --> 00:11:10,519
here's we've got a couple lines here

228
00:11:10,519 --> 00:11:14,519
we've got a comment about debug line and

229
00:11:14,519 --> 00:11:18,029
then we've got a start and an end and so

230
00:11:18,029 --> 00:11:20,610
what we do is we process the JavaScript

231
00:11:20,610 --> 00:11:22,709
files when we require them and like

232
00:11:22,709 --> 00:11:25,709
parse those in tournament to console dot

233
00:11:25,709 --> 00:11:28,560
error or console that time and time end

234
00:11:28,560 --> 00:11:31,110
so we can do profiling and all that you

235
00:11:31,110 --> 00:11:34,079
might be wondering why we do it this way

236
00:11:34,079 --> 00:11:35,310
instead of just putting console that

237
00:11:35,310 --> 00:11:37,050
error straight into the code and that's

238
00:11:37,050 --> 00:11:39,360
because in production we don't turn

239
00:11:39,360 --> 00:11:41,730
profiling or debugging on and then

240
00:11:41,730 --> 00:11:44,310
there's no impact of performance so as

241
00:11:44,310 --> 00:11:46,410
the debugging you know development tool

242
00:11:46,410 --> 00:11:51,899
this is pretty nifty and it's pretty

243
00:11:51,899 --> 00:11:54,120
helpful because when we're doing a lot

244
00:11:54,120 --> 00:11:57,029
of a sync stuff your call stack gets

245
00:11:57,029 --> 00:12:01,610
blown away and it can be helpful to see

246
00:12:01,610 --> 00:12:06,029
like where you were in the stack by

247
00:12:06,029 --> 00:12:07,920
leaving breadcrumbs or like you know a

248
00:12:07,920 --> 00:12:10,620
little trail mm's behind you it's sort

249
00:12:10,620 --> 00:12:11,939
of a lame hack or whatever

250
00:12:11,939 --> 00:12:14,519
but it really works well and it's it's

251
00:12:14,519 --> 00:12:16,649
you don't it doesn't impact anything

252
00:12:16,649 --> 00:12:18,629
it's just kind of there if we need it to

253
00:12:18,629 --> 00:12:22,769
be and it's also nice to see the output

254
00:12:22,769 --> 00:12:25,799
of our the council time if we really

255
00:12:25,799 --> 00:12:28,049
need to find out what queries pissing me

256
00:12:28,049 --> 00:12:31,739
off or whatever it's very helpful and if

257
00:12:31,739 --> 00:12:34,379
you're really having a bad day or

258
00:12:34,379 --> 00:12:36,929
somebody's really bothering you at work

259
00:12:36,929 --> 00:12:38,939
you can just like sneak this into the

260
00:12:38,939 --> 00:12:42,089
code base and then everything blows up

261
00:12:42,089 --> 00:12:48,959
and people get really mad yeah really

262
00:12:48,959 --> 00:12:51,049
helpful error message when you do that

263
00:12:51,049 --> 00:12:56,039
don't do that so let's instrumentation

264
00:12:56,039 --> 00:13:00,139
uh and then I'm going to move on to

265
00:13:00,139 --> 00:13:03,659
something that's kind of near and dear

266
00:13:03,659 --> 00:13:05,759
to my heart and it happens a lot and

267
00:13:05,759 --> 00:13:08,999
it's it's a simple mistake it's easy to

268
00:13:08,999 --> 00:13:10,859
prevent but it can cause like terrible

269
00:13:10,859 --> 00:13:12,359
things that happen in your application

270
00:13:12,359 --> 00:13:16,289
as we've seen from experience just

271
00:13:16,289 --> 00:13:17,639
global variable leaks you know you're

272
00:13:17,639 --> 00:13:21,049
missing a var statement somewhere and

273
00:13:21,049 --> 00:13:23,399
suddenly you know what you think is one

274
00:13:23,399 --> 00:13:24,689
value turns into something else

275
00:13:24,689 --> 00:13:27,869
especially when it comes to the modules

276
00:13:27,869 --> 00:13:32,220
that you're requiring and so they like

277
00:13:32,220 --> 00:13:33,599
prevent that there's a couple things we

278
00:13:33,599 --> 00:13:38,039
can do and that's in my opinion

279
00:13:38,039 --> 00:13:40,379
supporting like a using comma first but

280
00:13:40,379 --> 00:13:42,359
I mean that's not it's just one little

281
00:13:42,359 --> 00:13:44,819
thing what's more helpful for us is this

282
00:13:44,819 --> 00:13:47,279
thing I ripped off from node in their

283
00:13:47,279 --> 00:13:52,289
tests a few months back was this global

284
00:13:52,289 --> 00:13:53,970
leak test so basically there's this

285
00:13:53,970 --> 00:13:57,179
array of all the Global's that are known

286
00:13:57,179 --> 00:14:00,119
to node and if something shows up there

287
00:14:00,119 --> 00:14:03,389
that we don't know about we want to

288
00:14:03,389 --> 00:14:06,509
print on our on our console as we're

289
00:14:06,509 --> 00:14:09,239
developing so all this does is just go

290
00:14:09,239 --> 00:14:11,129
through the Global's that we know about

291
00:14:11,129 --> 00:14:13,439
if it finds anything it's not supposed

292
00:14:13,439 --> 00:14:15,209
to be there we're going to return that

293
00:14:15,209 --> 00:14:20,639
in an array and then what we do then is

294
00:14:20,639 --> 00:14:24,190
we just require HTTP and then override

295
00:14:24,190 --> 00:14:27,070
proxy to send method off of that right

296
00:14:27,070 --> 00:14:31,780
here which runs the normal method as it

297
00:14:31,780 --> 00:14:34,450
were before however we report all leaks

298
00:14:34,450 --> 00:14:38,200
that show up afterward so here's what we

299
00:14:38,200 --> 00:14:39,790
just were looking at a minute ago Lisa

300
00:14:39,790 --> 00:14:43,180
find iterate that array if there is

301
00:14:43,180 --> 00:14:44,470
something in that array that we didn't

302
00:14:44,470 --> 00:14:47,320
know about already then we want a mark

303
00:14:47,320 --> 00:14:49,570
we want to we want to record that we've

304
00:14:49,570 --> 00:14:53,400
seen it and output it to the console and

305
00:14:53,400 --> 00:14:58,210
so to give you an example what that

306
00:14:58,210 --> 00:15:02,140
looks like we run it at startup and then

307
00:15:02,140 --> 00:15:06,320
after every route runs so in this case

308
00:15:06,330 --> 00:15:08,890
there's six unknown Global's that really

309
00:15:08,890 --> 00:15:10,900
shouldn't be there and those were

310
00:15:10,900 --> 00:15:13,510
actually all caused by node MongoDB

311
00:15:13,510 --> 00:15:16,600
native which we already patched but in

312
00:15:16,600 --> 00:15:18,340
this isn't perfect right it doesn't say

313
00:15:18,340 --> 00:15:20,350
hey in this module you messed up and

314
00:15:20,350 --> 00:15:21,880
it's not jslint and a lot of other

315
00:15:21,880 --> 00:15:24,160
things but it's really it stands it's

316
00:15:24,160 --> 00:15:25,720
out of your way it runs after every

317
00:15:25,720 --> 00:15:27,340
route runs and it gives you immediate

318
00:15:27,340 --> 00:15:29,080
feedback like hey you know somewhere in

319
00:15:29,080 --> 00:15:30,370
this route we've got something going

320
00:15:30,370 --> 00:15:32,020
wrong and you're kind of playing with

321
00:15:32,020 --> 00:15:36,370
fire something shows up here yeah

322
00:15:36,370 --> 00:15:37,780
because again in our experience we had

323
00:15:37,780 --> 00:15:40,480
for example a module called errors which

324
00:15:40,480 --> 00:15:43,300
we required at the top and we used VAR

325
00:15:43,300 --> 00:15:46,930
errors equals require errors and then in

326
00:15:46,930 --> 00:15:48,970
a route somewhere we've missed a

327
00:15:48,970 --> 00:15:53,950
trailing comma and the you know the

328
00:15:53,950 --> 00:15:55,750
variable was errors so it over wrote our

329
00:15:55,750 --> 00:15:57,940
module and then we were it led to all

330
00:15:57,940 --> 00:16:00,700
sorts of impossible to track down bugs

331
00:16:00,700 --> 00:16:03,040
in production and like we wanted to rip

332
00:16:03,040 --> 00:16:06,490
our hair out so these techniques have

333
00:16:06,490 --> 00:16:09,310
really helped us out help us avoid those

334
00:16:09,310 --> 00:16:14,740
situations in the future and that's

335
00:16:14,740 --> 00:16:16,530
about all I have to talk about today

336
00:16:16,530 --> 00:16:18,850
code is cool products are better thank

337
00:16:18,850 --> 00:16:21,060
you

