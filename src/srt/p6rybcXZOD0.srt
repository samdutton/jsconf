1
00:00:12,550 --> 00:00:17,750

thanks for the introduction shower my

2
00:00:17,750 --> 00:00:22,099
name is trickery and you can follow

3
00:00:22,099 --> 00:00:23,840
along on speaker deck if you want to I

4
00:00:23,840 --> 00:00:25,910
put the slides are you can see the link

5
00:00:25,910 --> 00:00:27,619
there it's just the same as my twitter

6
00:00:27,619 --> 00:00:31,279
handle and the title of the talk is this

7
00:00:31,279 --> 00:00:34,940
will flow your mind and this talk is

8
00:00:34,940 --> 00:00:37,760
actually nested it has a sub talk in it

9
00:00:37,760 --> 00:00:41,059
the thing is that I found this one weird

10
00:00:41,059 --> 00:00:45,020
trick while making this talk and

11
00:00:45,020 --> 00:00:49,310
speakers will hate you for it it's how

12
00:00:49,310 --> 00:00:53,530
to find a title for your talk step one

13
00:00:53,530 --> 00:00:59,210
go to punch generator org look at the

14
00:00:59,210 --> 00:01:05,789
list and find something that you like

15
00:01:05,799 --> 00:01:09,170
other notable candidates were flow your

16
00:01:09,170 --> 00:01:14,920
own trumpet and flow in the towel so

17
00:01:14,920 --> 00:01:19,759
step through each prophet thank you but

18
00:01:19,759 --> 00:01:21,350
let me fall back to the original talk

19
00:01:21,350 --> 00:01:25,039
now so we've been using flow at

20
00:01:25,039 --> 00:01:26,539
Queenston for over half a year so we

21
00:01:26,539 --> 00:01:29,869
have kind of we have ever seen some of

22
00:01:29,869 --> 00:01:34,189
its ups and downs and i'll go into what

23
00:01:34,189 --> 00:01:36,649
it actually is in a moment but first i

24
00:01:36,649 --> 00:01:37,969
just want to briefly go over their

25
00:01:37,969 --> 00:01:41,600
structure of the talk the talk is very

26
00:01:41,600 --> 00:01:43,700
linear it's split into five sections and

27
00:01:43,700 --> 00:01:45,709
first this is the short introduction

28
00:01:45,709 --> 00:01:47,509
then are really shallow dive into the

29
00:01:47,509 --> 00:01:49,340
hood then I'll showcase some of the

30
00:01:49,340 --> 00:01:50,899
features that flow can do and some of

31
00:01:50,899 --> 00:01:53,420
its limitations and lastly I'll just go

32
00:01:53,420 --> 00:01:55,189
over the lessons some of the lessons we

33
00:01:55,189 --> 00:01:58,159
learned and color our experiences using

34
00:01:58,159 --> 00:02:03,409
it so how many of you have heard about

35
00:02:03,409 --> 00:02:10,340
flow okay a fair amount awesome so for

36
00:02:10,340 --> 00:02:11,810
those of you don't know flow is a static

37
00:02:11,810 --> 00:02:14,450
type checker for javascript it was open

38
00:02:14,450 --> 00:02:17,120
sourced by Facebook and November of 2014

39
00:02:17,120 --> 00:02:19,850
and that's their logo there it's kind of

40
00:02:19,850 --> 00:02:22,840
made out of these modules of triangles

41
00:02:22,840 --> 00:02:26,030
kind of and it's written in O'Connell

42
00:02:26,030 --> 00:02:28,430
it's maintained by a team of around five

43
00:02:28,430 --> 00:02:32,060
to seven people you can see the

44
00:02:32,060 --> 00:02:34,549
contributions to master on the getup

45
00:02:34,549 --> 00:02:38,390
repository since initial commit and it's

46
00:02:38,390 --> 00:02:40,540
kind of interesting to compare that to

47
00:02:40,540 --> 00:02:44,810
react flow is a little bit more than

48
00:02:44,810 --> 00:02:48,440
half younger then react the red line

49
00:02:48,440 --> 00:02:51,709
represents the lifetime of flow and we

50
00:02:51,709 --> 00:02:53,870
can see that react really goes out with

51
00:02:53,870 --> 00:02:57,379
a big bang and the Christmas months are

52
00:02:57,379 --> 00:03:01,430
like really busy on the other hand flow

53
00:03:01,430 --> 00:03:04,099
has this huge spike in contributions but

54
00:03:04,099 --> 00:03:06,230
then this kind of goes into hibernation

55
00:03:06,230 --> 00:03:10,370
for a few months but it's been picking

56
00:03:10,370 --> 00:03:13,069
up a lot of steam lately and over the

57
00:03:13,069 --> 00:03:15,530
last six months flow has actually been

58
00:03:15,530 --> 00:03:17,420
more actively developed and react in

59
00:03:17,420 --> 00:03:21,859
terms of contributions to master and to

60
00:03:21,859 --> 00:03:24,379
compare flow and react again for no good

61
00:03:24,379 --> 00:03:27,079
reason let's look at the punch cards of

62
00:03:27,079 --> 00:03:30,380
the projects we can see that flow

63
00:03:30,380 --> 00:03:33,650
contributors really hate contributing on

64
00:03:33,650 --> 00:03:36,919
Sunday mornings and they ship the

65
00:03:36,919 --> 00:03:41,930
hardest on Fridays but all nonsense

66
00:03:41,930 --> 00:03:44,329
aside what what what is this well what

67
00:03:44,329 --> 00:03:48,560
does it do how does it work so imagine

68
00:03:48,560 --> 00:03:51,260
that the blue dots are JavaScript files

69
00:03:51,260 --> 00:03:54,319
or modules if you will interconnected

70
00:03:54,319 --> 00:03:56,780
and depending on each other what flow

71
00:03:56,780 --> 00:03:59,239
does is it looks at those files parses

72
00:03:59,239 --> 00:04:01,250
them and creates from the raw source

73
00:04:01,250 --> 00:04:02,630
code this kind of format that it

74
00:04:02,630 --> 00:04:07,370
understands and once all the files have

75
00:04:07,370 --> 00:04:09,650
been parsed in this way we end up with

76
00:04:09,650 --> 00:04:13,819
what is called a flow chart and using

77
00:04:13,819 --> 00:04:15,440
the flow chart and this special format

78
00:04:15,440 --> 00:04:17,959
flow notes down what your code is doing

79
00:04:17,959 --> 00:04:20,419
for example what types go into functions

80
00:04:20,419 --> 00:04:22,520
and come out of functions either by

81
00:04:22,520 --> 00:04:24,949
inferring them or getting hints from

82
00:04:24,949 --> 00:04:28,280
developers what kind of hints am I

83
00:04:28,280 --> 00:04:30,919
talking about the hints are the type

84
00:04:30,919 --> 00:04:32,780
annotations that they put to the

85
00:04:32,780 --> 00:04:34,669
parameters and return types of functions

86
00:04:34,669 --> 00:04:36,529
you can see that the

87
00:04:36,529 --> 00:04:38,329
parameter has been annotated to be a

88
00:04:38,329 --> 00:04:40,159
number and the return type of this

89
00:04:40,159 --> 00:04:44,059
function must always be a string this is

90
00:04:44,059 --> 00:04:45,529
an example of a function the flow can

91
00:04:45,529 --> 00:04:50,119
fully understand flow is an opt-in tool

92
00:04:50,119 --> 00:04:52,039
so we put this special line at the top

93
00:04:52,039 --> 00:04:54,229
of files that we want to enable type

94
00:04:54,229 --> 00:04:56,299
checking in this way it's really easy to

95
00:04:56,299 --> 00:04:58,459
incrementally type check our large code

96
00:04:58,459 --> 00:05:00,589
base that can be really important and

97
00:05:00,589 --> 00:05:04,939
even vital to some projects you may not

98
00:05:04,939 --> 00:05:06,529
notice that this isn't actually valid

99
00:05:06,529 --> 00:05:08,059
JavaScript code if you try to run this

100
00:05:08,059 --> 00:05:10,519
you'll get a syntax error and that's

101
00:05:10,519 --> 00:05:12,739
because of the type annotations but

102
00:05:12,739 --> 00:05:16,459
luckily flow support type annotations

103
00:05:16,459 --> 00:05:18,709
inside of comments so the below function

104
00:05:18,709 --> 00:05:20,299
is actually valid JavaScript and you can

105
00:05:20,299 --> 00:05:24,409
run that but most projects nowadays use

106
00:05:24,409 --> 00:05:27,349
some kind of transporation step so it's

107
00:05:27,349 --> 00:05:28,759
really easy to just strip the type

108
00:05:28,759 --> 00:05:30,859
annotations from the above function with

109
00:05:30,859 --> 00:05:32,689
something like babe will precede react

110
00:05:32,689 --> 00:05:38,599
or flow remove types but why would we

111
00:05:38,599 --> 00:05:40,789
want to do this we have to type more as

112
00:05:40,789 --> 00:05:43,669
in typing on our keyboards we're adding

113
00:05:43,669 --> 00:05:46,069
restrictions to the code isn't a point

114
00:05:46,069 --> 00:05:47,989
of dynamic languages to be faster

115
00:05:47,989 --> 00:05:52,189
development and flexible and these

116
00:05:52,189 --> 00:05:53,689
questions kind of bring us to the next

117
00:05:53,689 --> 00:05:55,399
chapter of the talk which is why I

118
00:05:55,399 --> 00:05:58,189
usually use it let me make it clear that

119
00:05:58,189 --> 00:06:01,729
type checking might not be useful in all

120
00:06:01,729 --> 00:06:04,639
projects if the project this small scope

121
00:06:04,639 --> 00:06:06,649
tour short live it doesn't really

122
00:06:06,649 --> 00:06:08,869
benefit as much from type checking that

123
00:06:08,869 --> 00:06:10,969
being said flow is an opt-in tool so

124
00:06:10,969 --> 00:06:13,099
it's really easy to just type check few

125
00:06:13,099 --> 00:06:17,939
files and then go about your business

126
00:06:17,949 --> 00:06:20,419
one of the most compelling reasons to

127
00:06:20,419 --> 00:06:25,249
use type checker is bug prevention this

128
00:06:25,249 --> 00:06:28,009
function should always return an object

129
00:06:28,009 --> 00:06:30,919
no matter what it gets if it gets an

130
00:06:30,919 --> 00:06:34,279
object its return that object else it

131
00:06:34,279 --> 00:06:37,099
should return an empty object but this

132
00:06:37,099 --> 00:06:39,349
function has a classic javascript bug in

133
00:06:39,349 --> 00:06:46,400
it can anyone see it take a sec

134
00:06:46,410 --> 00:06:50,320
ya know right so in JavaScript no

135
00:06:50,320 --> 00:06:52,090
there's actually an object so if you

136
00:06:52,090 --> 00:06:53,530
would pass null to this function would

137
00:06:53,530 --> 00:06:56,170
go through it unharmed it won't resolve

138
00:06:56,170 --> 00:06:58,890
to an empty object like we expect it to

139
00:06:58,890 --> 00:07:02,410
so how we go about fixing this we could

140
00:07:02,410 --> 00:07:07,930
just add a simple mail check but this is

141
00:07:07,930 --> 00:07:09,670
exactly the kind of errors that flow can

142
00:07:09,670 --> 00:07:12,820
help you find if we would have added

143
00:07:12,820 --> 00:07:15,250
type annotations to this function pull

144
00:07:15,250 --> 00:07:16,660
over the totals hey this thing you're

145
00:07:16,660 --> 00:07:18,550
doing right here is not okay you have to

146
00:07:18,550 --> 00:07:22,960
check for now notice the type annotation

147
00:07:22,960 --> 00:07:24,880
on the x parameter has a question mark

148
00:07:24,880 --> 00:07:27,580
in front of it and that tells flow that

149
00:07:27,580 --> 00:07:29,650
X might be an object but it could also

150
00:07:29,650 --> 00:07:32,170
be null or undefined so it's kind of a

151
00:07:32,170 --> 00:07:36,850
maybe object other cases for using a

152
00:07:36,850 --> 00:07:38,290
static type checker other than bug

153
00:07:38,290 --> 00:07:40,780
prevention like this are auto completion

154
00:07:40,780 --> 00:07:43,480
and refactoring tools as well as that

155
00:07:43,480 --> 00:07:47,950
code elimination not all of those have

156
00:07:47,950 --> 00:07:49,720
been implemented into useful tools back

157
00:07:49,720 --> 00:07:52,300
by flow but auto-completion has and I'll

158
00:07:52,300 --> 00:08:01,540
go over that in sac so what can I do you

159
00:08:01,540 --> 00:08:05,170
can do auto completion so this is a

160
00:08:05,170 --> 00:08:08,110
retouched action created it might

161
00:08:08,110 --> 00:08:09,580
provide some context to those of you who

162
00:08:09,580 --> 00:08:11,440
know Redux but is not important for this

163
00:08:11,440 --> 00:08:14,920
example we're importing action types

164
00:08:14,920 --> 00:08:17,110
from another file and the action types

165
00:08:17,110 --> 00:08:19,720
are fully under flow fully understands

166
00:08:19,720 --> 00:08:22,090
these action types it knows all the

167
00:08:22,090 --> 00:08:24,160
properties on the object and the types

168
00:08:24,160 --> 00:08:27,910
of those properties here I'm using a

169
00:08:27,910 --> 00:08:30,310
plug-in called nuclide for the atom text

170
00:08:30,310 --> 00:08:33,430
editor it's it's developed by Facebook

171
00:08:33,430 --> 00:08:36,099
and it heavily integrates with flow it

172
00:08:36,099 --> 00:08:38,890
provides type checks and safe and in

173
00:08:38,890 --> 00:08:42,340
line adults just like each lens and also

174
00:08:42,340 --> 00:08:44,710
type coverage so I can show you which

175
00:08:44,710 --> 00:08:46,540
types flow can infer and which ones it

176
00:08:46,540 --> 00:08:53,800
doesn't really understand

177
00:08:53,810 --> 00:08:57,510
want to start typing the action types we

178
00:08:57,510 --> 00:08:59,370
can see that we get Auto completion for

179
00:08:59,370 --> 00:09:02,160
all of the properties and here I tried

180
00:09:02,160 --> 00:09:03,780
to access the error and throw and I can

181
00:09:03,780 --> 00:09:08,280
see that there are strings and this auto

182
00:09:08,280 --> 00:09:11,250
completion applies to all JavaScript

183
00:09:11,250 --> 00:09:14,670
native objects and all imports of

184
00:09:14,670 --> 00:09:20,710
libraries that you have definitions for

185
00:09:20,720 --> 00:09:23,400
fluids great support for a lot of new

186
00:09:23,400 --> 00:09:26,490
JavaScript features and it ships with

187
00:09:26,490 --> 00:09:29,190
support for native node libraries and

188
00:09:29,190 --> 00:09:33,670
native jscript JavaScript objects

189
00:09:33,680 --> 00:09:36,210
there's enough official repository that

190
00:09:36,210 --> 00:09:41,030
is trying to gather all of this these

191
00:09:41,030 --> 00:09:43,800
type signatures for all kinds of

192
00:09:43,800 --> 00:09:50,140
libraries you can also write your own

193
00:09:50,150 --> 00:09:53,280
it's also possible to do a little bit

194
00:09:53,280 --> 00:09:55,310
more complex things with type parameters

195
00:09:55,310 --> 00:09:58,260
so the big R and the big you here are

196
00:09:58,260 --> 00:10:00,300
just placeholders for some type that you

197
00:10:00,300 --> 00:10:06,990
will pass into this type this is a type

198
00:10:06,990 --> 00:10:09,240
which describes an object which is a van

199
00:10:09,240 --> 00:10:11,310
method that behaves exactly like the

200
00:10:11,310 --> 00:10:13,860
done method of a promise so it's kind of

201
00:10:13,860 --> 00:10:16,200
like an object which which is promise

202
00:10:16,200 --> 00:10:17,820
like it behaves a little bit like a

203
00:10:17,820 --> 00:10:22,710
promise and another thing the flow

204
00:10:22,710 --> 00:10:26,190
supports really well is react react is

205
00:10:26,190 --> 00:10:29,460
also developed by Facebook so naturally

206
00:10:29,460 --> 00:10:31,140
flow can understand a lot about react

207
00:10:31,140 --> 00:10:35,240
code let's look at one example of how

208
00:10:35,240 --> 00:10:39,720
how flow can help reactive elbers so

209
00:10:39,720 --> 00:10:43,530
flow can actually replace the the

210
00:10:43,530 --> 00:10:45,960
reactor prop types type checking the run

211
00:10:45,960 --> 00:10:48,900
the runtime type check that react you

212
00:10:48,900 --> 00:10:52,110
can you can do with react so you can you

213
00:10:52,110 --> 00:10:54,090
can throw away the runtime type checking

214
00:10:54,090 --> 00:10:57,300
in favor of static type checking here

215
00:10:57,300 --> 00:10:59,550
you can see a coffee image component

216
00:10:59,550 --> 00:11:03,000
which only has one prop its format and

217
00:11:03,000 --> 00:11:05,020
it can either be P&G or J

218
00:11:05,020 --> 00:11:10,360
back so if we start to use the coffee in

219
00:11:10,360 --> 00:11:14,710
it's in our application and we pass it a

220
00:11:14,710 --> 00:11:17,940
format and if we give it something else

221
00:11:17,940 --> 00:11:23,190
like a gif will get an inline error and

222
00:11:23,190 --> 00:11:25,780
the error says that this string isn't in

223
00:11:25,780 --> 00:11:28,600
the string item that you told me the

224
00:11:28,600 --> 00:11:32,250
format is so this can be really useful

225
00:11:32,250 --> 00:11:34,960
just for completeness sake we could have

226
00:11:34,960 --> 00:11:36,550
implemented coffee images to save this

227
00:11:36,550 --> 00:11:38,080
component and flow and support for that

228
00:11:38,080 --> 00:11:47,370
as well so what can't do this section is

229
00:11:47,370 --> 00:11:52,600
pretty short and pretty specific it

230
00:11:52,600 --> 00:11:54,940
can't warn about additional properties

231
00:11:54,940 --> 00:11:59,500
declared on a components prop type this

232
00:11:59,500 --> 00:12:00,760
is an example of what I'm talking about

233
00:12:00,760 --> 00:12:02,860
we have a hallow component which is only

234
00:12:02,860 --> 00:12:06,490
has one prop name and if we invoke it

235
00:12:06,490 --> 00:12:08,890
with another property like H we don't

236
00:12:08,890 --> 00:12:11,410
get matter at all this is something that

237
00:12:11,410 --> 00:12:15,160
the full team is looking into and will

238
00:12:15,160 --> 00:12:19,350
probably be improved in the near future

239
00:12:19,350 --> 00:12:21,760
the root cause of this is that flow

240
00:12:21,760 --> 00:12:24,310
doesn't really support exact object I'm

241
00:12:24,310 --> 00:12:26,770
kind of going to skip this slide but I

242
00:12:26,770 --> 00:12:29,260
want it in the slide deck so you can

243
00:12:29,260 --> 00:12:34,330
look at it later if you want to another

244
00:12:34,330 --> 00:12:36,250
thing that is problematic with flow are

245
00:12:36,250 --> 00:12:38,470
non-native data structures and what I

246
00:12:38,470 --> 00:12:40,180
mean by non-native data structures are

247
00:12:40,180 --> 00:12:42,370
their searches that don't behave like

248
00:12:42,370 --> 00:12:45,250
normal JavaScript native data structures

249
00:12:45,250 --> 00:12:49,060
like array and object for example we're

250
00:12:49,060 --> 00:12:51,250
using immutable J's a lot and it's

251
00:12:51,250 --> 00:12:53,530
really difficult to model mutable data

252
00:12:53,530 --> 00:12:55,990
structures and flow I think it's mainly

253
00:12:55,990 --> 00:12:58,360
because of how the API is constructed if

254
00:12:58,360 --> 00:12:59,920
you're going to access a property deep

255
00:12:59,920 --> 00:13:02,020
down in our object you have to give it a

256
00:13:02,020 --> 00:13:03,910
key path which is an array of strings

257
00:13:03,910 --> 00:13:08,410
it's really hard to model that but the

258
00:13:08,410 --> 00:13:10,690
good news is that in a recent QA the

259
00:13:10,690 --> 00:13:12,640
fluid flow team revealed that better

260
00:13:12,640 --> 00:13:17,490
support for immutability is in the works

261
00:13:17,500 --> 00:13:19,810
again I'm kind of going to skip this

262
00:13:19,810 --> 00:13:21,940
slide this is this is how we're doing it

263
00:13:21,940 --> 00:13:27,840
right now it's not really that good and

264
00:13:27,840 --> 00:13:31,330
you can see that the kyare I was talking

265
00:13:31,330 --> 00:13:34,750
about the keypad on line fourteen again

266
00:13:34,750 --> 00:13:35,800
I'm going to skip this slide you can

267
00:13:35,800 --> 00:13:40,510
look at it later if you want to this is

268
00:13:40,510 --> 00:13:42,850
the last section of the talk I'll go

269
00:13:42,850 --> 00:13:44,800
over some of the lessons learned then

270
00:13:44,800 --> 00:13:50,560
kind of our experiences using flow so

271
00:13:50,560 --> 00:13:52,240
the first point i want to make is but

272
00:13:52,240 --> 00:13:54,160
it's super easy to start using an

273
00:13:54,160 --> 00:13:57,010
existing project we have internal tools

274
00:13:57,010 --> 00:13:59,050
that amount to about 60,000 lines of

275
00:13:59,050 --> 00:14:00,940
JavaScript code and we started type

276
00:14:00,940 --> 00:14:02,470
checking just a few files to see how it

277
00:14:02,470 --> 00:14:05,410
felt and flow even copped some existing

278
00:14:05,410 --> 00:14:07,240
errors while we're integrating it

279
00:14:07,240 --> 00:14:09,340
indoors are a codebase incrementally

280
00:14:09,340 --> 00:14:12,550
that would just what we're there since

281
00:14:12,550 --> 00:14:17,980
the beginning and sometimes it doesn't

282
00:14:17,980 --> 00:14:20,650
really make much sense to type check for

283
00:14:20,650 --> 00:14:22,600
example functions which do really basic

284
00:14:22,600 --> 00:14:24,550
operations flow can usually infer the

285
00:14:24,550 --> 00:14:27,310
types of those functions so here's an

286
00:14:27,310 --> 00:14:28,720
example of a function that flow can

287
00:14:28,720 --> 00:14:31,510
fully understand you can infer the type

288
00:14:31,510 --> 00:14:33,520
of the parameter and the return type of

289
00:14:33,520 --> 00:14:36,910
the function and nuclide can really help

290
00:14:36,910 --> 00:14:38,410
you here nuclear there's the plugin for

291
00:14:38,410 --> 00:14:40,690
the atom text of the door and it can

292
00:14:40,690 --> 00:14:42,400
highlight which part of the javascript

293
00:14:42,400 --> 00:14:45,190
file flow can infer and which ones you

294
00:14:45,190 --> 00:14:51,850
can't try to avoid type laziness it can

295
00:14:51,850 --> 00:14:54,070
be really tempting sometimes to just

296
00:14:54,070 --> 00:14:56,950
write object when you're describing a

297
00:14:56,950 --> 00:14:59,560
type instead of creating a more

298
00:14:59,560 --> 00:15:01,780
descriptive type that conveys more

299
00:15:01,780 --> 00:15:04,810
information to flow this is happen to us

300
00:15:04,810 --> 00:15:07,150
on several occasion and and it really

301
00:15:07,150 --> 00:15:09,760
diminishes the benefits of static type

302
00:15:09,760 --> 00:15:14,010
checking so try to avoid doing this and

303
00:15:14,010 --> 00:15:17,800
do this instead notice the difference in

304
00:15:17,800 --> 00:15:29,650
the power of parameter type annotation

305
00:15:29,660 --> 00:15:32,810
adding type annotations in some cases

306
00:15:32,810 --> 00:15:34,310
has made a code a little bit more

307
00:15:34,310 --> 00:15:38,330
understandable and readable and when

308
00:15:38,330 --> 00:15:39,380
you're looking at code that someone

309
00:15:39,380 --> 00:15:41,210
somebody else wrote it kind of takes

310
00:15:41,210 --> 00:15:43,660
just a little bit less mental power to

311
00:15:43,660 --> 00:15:48,110
understand what what's going on I love

312
00:15:48,110 --> 00:15:52,370
healthy discussion has also surfaced as

313
00:15:52,370 --> 00:15:54,200
an effect of using the flow type system

314
00:15:54,200 --> 00:15:57,110
for example in code reviews questions

315
00:15:57,110 --> 00:15:58,490
like should this be able to return

316
00:15:58,490 --> 00:16:00,590
undefined or should this parameter be

317
00:16:00,590 --> 00:16:03,530
optional are discussed so it really has

318
00:16:03,530 --> 00:16:09,020
a positive effect on code quality so to

319
00:16:09,020 --> 00:16:11,900
sum it up flow has been a great success

320
00:16:11,900 --> 00:16:14,360
at quizup it's really improved our

321
00:16:14,360 --> 00:16:16,730
development experience by a lot and I

322
00:16:16,730 --> 00:16:18,710
recommend using that usually try it out

323
00:16:18,710 --> 00:16:20,030
if you're maintaining a JavaScript code

324
00:16:20,030 --> 00:16:23,390
bitch and I hope some of this stuff blew

325
00:16:23,390 --> 00:16:25,820
your mind but just in case that no one's

326
00:16:25,820 --> 00:16:27,200
mind was blown I'm going to blow this

