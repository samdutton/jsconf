1
00:00:18,240 --> 00:00:23,369
Hello? Hello, everybody. How is the day going?
HTTP\h we have to do that again. How is the day going? HTTP headers for the responsible
developer. Let me tell you about my journey

2
00:00:23,369 --> 00:00:28,390
on the web. I was one of these lucky people
that had an Internet connection at home very

3
00:00:28,390 --> 00:00:33,390
early because my father was a techsavvy person.
But in the beginning, I had no idea what to

4
00:00:33,390 --> 00:00:38,280
do with the Internet, I could Google or surf,
that was it. I was whatever, 12 years old

5
00:00:38,280 --> 00:00:44,190
and it was not that exciting. But then I discovered
this website, woot.com. Any Germans around?

6
00:00:44,190 --> 00:00:51,260
That was one of the first social networks
in Germany. And there I was, 1999. This is

7
00:00:51,260 --> 00:00:57,200
where I'm coming from, the middle of nowhere
in Germany. And I found myself chatting to

8
00:00:57,200 --> 00:01:03,000
people if Berlin. Mainly about music. This
is when I found out for the first time that

9
00:01:03,000 --> 00:01:06,610
the web actually connects people. It's not
about Googling stuff, it's about connecting

10
00:01:06,610 --> 00:01:09,970
people.
Then I moved to Berlin and I had a different

11
00:01:09,970 --> 00:01:15,891
job initially. In 2010 something interesting
happened, I became a web developer. Which

12
00:01:15,891 --> 00:01:21,180
was cool. But then the statement that the
web connects people actually changed. We as

13
00:01:21,180 --> 00:01:27,480
developers have a lot of power. And I 100%
believe that we connect people. Because we

14
00:01:27,480 --> 00:01:33,810
are building stuff for the Internet.
We enable people. And we help people by the

15
00:01:33,810 --> 00:01:40,870
stuff that we build. So, let me quickly introduce
myself. Hey, I'm Stefan. I work for a company

16
00:01:40,870 --> 00:01:46,830
called Twilio. We do communications as an
API, S MS and phone calls, and check that

17
00:01:46,830 --> 00:01:52,590
out. And the most important thing is, hey,
I'm Stefan, and I want to be a responsible

18
00:01:52,590 --> 00:01:56,649
developer.
So, when we look at the global population,

19
00:01:56,649 --> 00:02:02,470
you will find out that 1999, there I was in
my little bubble north of Germany. Not much

20
00:02:02,470 --> 00:02:07,899
going on. But where actually the most Internet
users are coming from today? So, they're coming

21
00:02:07,899 --> 00:02:15,069
from China, India and the United States. But
this is just global statistics, right? But

22
00:02:15,069 --> 00:02:22,689
I also do run a private blog. And only the
last month I had 300 people from Brazil reading

23
00:02:22,689 --> 00:02:29,019
articles. I had 100 people from Vietnam. And
I had 80 people from South Africa. That gets

24
00:02:29,019 --> 00:02:32,849
me really excited, right? Who am I? I'm writing
stuff and people in Brazil are reading my

25
00:02:32,849 --> 00:02:37,949
stuff. But in the end that really doesn't
matter because we as web developers should

26
00:02:37,949 --> 00:02:45,249
be building for everybody. And when responsive
web design came up, I heard this sometime

27
00:02:45,249 --> 00:02:50,879
way too often. We don't have users coming
from a certain area. We don't have users that

28
00:02:50,879 --> 00:02:56,180
use a certain device. When you say these kinds
of statements, you're creating a chicken and

29
00:02:56,180 --> 00:03:01,209
egg problem. When you don't build stuff that
works for people under certain conditions,

30
00:03:01,209 --> 00:03:05,909
these people won't use your stuff.
But building a good website these days is

31
00:03:05,909 --> 00:03:11,079
actually very, very hard. What do you have
to do? You have to consider design. Colors

32
00:03:11,079 --> 00:03:15,310
around the world are different. You have to
bring up good content. You have to consider

33
00:03:15,310 --> 00:03:20,150
web performance which is a big topic by itself.
You have to make yourself accessible because

34
00:03:20,150 --> 00:03:24,489
there maybe people that visit your sites with
assistive technology. And you have to find,

35
00:03:24,489 --> 00:03:30,700
what should I use, actually? Frameworks are
a thing. You have to optimize the network

36
00:03:30,700 --> 00:03:34,900
stack and you have to make it work on several
devices. And there are many, many more factors

37
00:03:34,900 --> 00:03:43,850
out there. And in the next 21 minutes I want
to talk about the network stack. So, let's

38
00:03:43,850 --> 00:03:48,139
talk about HTTP.
So, basically when your browser makes a requests

39
00:03:48,139 --> 00:03:54,209
for a resource, what it does, sends value
pairs, these are called request headers. And

40
00:03:54,209 --> 00:03:59,529
the server responds with another set of key
value pairs and the actual resource that you're

41
00:03:59,529 --> 00:04:04,879
asking for. So, we're dealing with responsive
request headers.

42
00:04:04,879 --> 00:04:10,279
And when I started preparation for this talk,
it was trending, so I had to buy a dot Dev

43
00:04:10,279 --> 00:04:15,609
domain. You can see the responsible dot div
and the site, but it right now has JavaScript

44
00:04:15,609 --> 00:04:23,530
disabled. You see when I refresh it, there
is some stuff going on. First of all, the

45
00:04:23,530 --> 00:04:31,060
script is hijacking, adding unicorns and stuff.
But going to this, you can pretend to be my

46
00:04:31,060 --> 00:04:36,160
site. You can track what I'm doing, pretending
to be my unicorn, not responsible unicorn,

47
00:04:36,160 --> 00:04:43,680
but my Dev site. I wanted to make it better
just using headers.

48
00:04:43,680 --> 00:04:53,320
And the web is scary place. A few months ago,
this was in the news. Lots of websites were

49
00:04:53,320 --> 00:04:58,039
mining cryptocurrency and the developers that
built these sites didn't even know about this.

50
00:04:58,039 --> 00:05:02,599
And the reason for that is when we're building
for the web, we're relying on other people

51
00:05:02,599 --> 00:05:07,759
building software. Open source is the thing
and we're also thirdparties from different

52
00:05:07,759 --> 00:05:13,710
domains. So, we always rely on others and
our belief that the web has to be safe. The

53
00:05:13,710 --> 00:05:19,900
biggest part of being safe is HTTPS.
So, without HTTPS, what is possible is that

54
00:05:19,900 --> 00:05:24,430
someone can Open up a public WiFi and you're
browsing with HTTP, this person could pretend

55
00:05:24,430 --> 00:05:29,990
to be the WiFi and get the requests and mess
with you. Or get the passports that you're

56
00:05:29,990 --> 00:05:41,470
sending over HTTP. HTTPS lets you use HTTP/2
and service workers and media. And in my bubble,

57
00:05:41,470 --> 00:05:48,599
I think it's the standard. But there's a site
out there called why no HTTPS and it is many,

58
00:05:48,599 --> 00:05:56,860
many sites not enforcing HTTPS yet. When you
go into the list, you find out that there's

59
00:05:56,860 --> 00:06:03,689
a massive German media outlet not enforcing
HTTPS which is surprising.

60
00:06:03,689 --> 00:06:12,410
When you run on HTTPS, you want to ensure
that it is always HTTPS and on a secure connection.

61
00:06:12,410 --> 00:06:17,780
So, what you can do is you can set the strict
transport security header which you can define

62
00:06:17,780 --> 00:06:24,479
a max H property in seconds. This will tell
the browser, hey, please only use this website

63
00:06:24,479 --> 00:06:29,991
or these resources over HTTPS. You can define
how wide it should range. And you can, if

64
00:06:29,991 --> 00:06:34,740
you want to go the extra mile, you can define
a preload director which basically allows

65
00:06:34,740 --> 00:06:40,789
you to supplement your site to another site,
which is called HTTPS preload. And the thing

66
00:06:40,789 --> 00:06:47,620
about that is that browsers internally keep
lists of websites that should only be on HTTPS.

67
00:06:47,620 --> 00:06:55,069
This is the configuration\hprofile in Chromium.
It's thousands of sites that will never work

68
00:06:55,069 --> 00:07:02,939
on HTTP. If you wonder why dot Dev domains
are not over HTTP anymore, that's the reason.

69
00:07:02,939 --> 00:07:10,069
They're in this file. But HTTPS is not only
about security. What happens when you type

70
00:07:10,069 --> 00:07:16,749
in the address of the browser? It the make
an HTTPS request and could lead to a delay

71
00:07:16,749 --> 00:07:22,219
of 35 seconds depending on the connection.
And you can skip this request because the

72
00:07:22,219 --> 00:07:29,789
browser knows we're going HTTPS. That's it.
So, how is the support for HTTPS? We're pretty

73
00:07:29,789 --> 00:07:35,400
green here. Pretty sweet. But enforcing HTTPS
is not the easiest thing in the world when

74
00:07:35,400 --> 00:07:42,419
dealing with big projects when a lot of people
are putting a lot of source code in your codebase.

75
00:07:42,419 --> 00:07:50,499
How do you tackle this approach to go over
HTTPS? When you run your site over HTTPS and

76
00:07:50,499 --> 00:07:57,469
you make a request to an HTTP, it may be blocked
by the browser. You can set a content security

77
00:07:57,469 --> 00:08:05,460
header with the directive and this magically
updates all the requests to be HTTPS and secure.

78
00:08:05,460 --> 00:08:11,360
That is supercool. But this is not the main
purpose of CSP. The main purpose of CSP is

79
00:08:11,360 --> 00:08:16,290
that you want to limit what is allowed inside
of your websites. And you can configure a

80
00:08:16,290 --> 00:08:19,919
lot of things.
So, this is the complete list of what is possible

81
00:08:19,919 --> 00:08:25,039
with CSP. You can define where should fonts
be loaded from, where should images be loaded

82
00:08:25,039 --> 00:08:31,789
from. And a few cutting-edge things in there
like this opener. Navigate too. And you can

83
00:08:31,789 --> 00:08:38,139
basically trim down what is allowed in your
website and you can avoid mining cryptocurrency

84
00:08:38,139 --> 00:08:44,139
in your website because a thirdparty got hacked.
You can use CSP with a meta element in your

85
00:08:44,139 --> 00:08:50,760
HTML or you set a header like this.
This is the head their I ship for my private

86
00:08:50,760 --> 00:08:57,250
website. And includes all the thirdparties
that I have. And coming up with this is actually

87
00:08:57,250 --> 00:09:02,580
very, very hard. I deployed CSP three times
and broke my site and rolled back. So, what

88
00:09:02,580 --> 00:09:07,240
you want to do is you want to set a different
header which is report only which then allows

89
00:09:07,240 --> 00:09:13,660
you to define an HTTP end point and then you
get all the warnings of requests that would

90
00:09:13,660 --> 00:09:19,810
be blocked if this would be active. And you
can start monitoring what is going on.

91
00:09:19,810 --> 00:09:24,330
When you watch this\h when you have a detailed
look at this, you will find out there is something

92
00:09:24,330 --> 00:09:30,550
not right. I have unsafe in line and unsafe
evil right there and it bothers me. But I'm

93
00:09:30,550 --> 00:09:37,330
using a JavaScript a that inlines JavaScript
JSON in the body so that the JavaScript framework

94
00:09:37,330 --> 00:09:43,639
end gets the state. And I'm working on fixing
that. It's not the easiest when dealing with

95
00:09:43,639 --> 00:09:49,570
a framework. The way this should work is that
inline scripts, when you have CSP enabled,

96
00:09:49,570 --> 00:09:53,589
you have two ways
You can either define a hashed value in your

97
00:09:53,589 --> 00:10:00,149
CSP directive so that you can say, hey, this
hashed value should be allowed in my website.

98
00:10:00,149 --> 00:10:05,350
This is a little bit brittle, though, because
now when you update your contents of the script,

99
00:10:05,350 --> 00:10:10,519
then you have to change this header or your
meta element in the edge. What you can do

100
00:10:10,519 --> 00:10:15,721
is you can define a nonce value. Giving an
ID and say, hey, this part is cool. Please

101
00:10:15,721 --> 00:10:24,300
allow this. So, also support for CSP. CSP
is out there in two levels. Level one, all

102
00:10:24,300 --> 00:10:29,560
green. Pretty cool. Cutting edge stuff and
more fancy stuff is a little bit jumpy still.

103
00:10:29,560 --> 00:10:34,910
And there might be things missing. But you
can have a look at that. So, I think this

104
00:10:34,910 --> 00:10:39,649
technology is very exciting because it makes
the web a safer place. How many websites use

105
00:10:39,649 --> 00:10:49,279
CSP, there is a website that crawls the Internet
and you can write search queries. And when

106
00:10:49,279 --> 00:10:56,079
you do that, you will see that only 6% of
the crawled websites use CSP. This is surprisingly

107
00:10:56,079 --> 00:11:03,029
low, and I think we can do better. So, when
you want to start working with CSP, start

108
00:11:03,029 --> 00:11:08,600
in report mode. Monitor what is coming in
and out. Don't break your site. And then only

109
00:11:08,600 --> 00:11:14,140
when you are safe and you know that all your
request resources are white listed, then you

110
00:11:14,140 --> 00:11:22,029
can turn it off.
For my site, I added a new route,/safe. And

111
00:11:22,029 --> 00:11:34,440
then see that the unicorns are gone. And Chrome
is saying I'm not reported yet. But I go to

112
00:11:34,440 --> 00:11:39,730
CodePen and go to the framing site, Chrome
will say, hey\hthis is not allowed for the

113
00:11:39,730 --> 00:11:45,540
site. People cannot hijack my stuff which
is pretty cool. This makes the website safer.

114
00:11:45,540 --> 00:11:53,800
This is important, the web is important for
people. I travel quite a bit a little bit.

115
00:11:53,800 --> 00:12:00,329
I was in the Ukraine two months ago. I get
off the plane and I get this message by my

116
00:12:00,329 --> 00:12:06,860
mobile provider. It basically tells me this.
And just because this is ridiculous, I get

117
00:12:06,860 --> 00:12:12,870
six megabytes are for 2 Euros. But I have
to use it in 24 hours. This didn't hold me

118
00:12:12,870 --> 00:12:26,080
30 minutes. The web needs to be affordable.
Don't request the same content over and over

119
00:12:26,080 --> 00:12:33,680
and over again. You can set proper caching
headers. Caching is very, very tricky.

120
00:12:33,680 --> 00:12:38,370
And I'm only going briefly into it. I'm defining
there in seconds a max H property and telling

121
00:12:38,370 --> 00:12:45,360
it, this is how long this resource could be
potentially cached. But this doesn't necessarily

122
00:12:45,360 --> 00:12:50,550
mean that there are no requests flying because
browser also revalidates if the resources

123
00:12:50,550 --> 00:12:56,120
changed. So, what is cool, you can define
an immutable directive, telling the browser,

124
00:12:56,120 --> 00:13:05,740
hey, this is maybe a hashed style, hash. JSS
or something. The browser will not revalidate

125
00:13:05,740 --> 00:13:11,819
stuff. That's cool. You can save some requests.
Unfortunately, the spot for immutable is not

126
00:13:11,819 --> 00:13:17,670
that great anymore. It was supported in Edge,
but now Edge switched to Chromium. If you

127
00:13:17,670 --> 00:13:22,959
want to learn more about caching, highly recommend
this article by Harry Roberts. It goes over

128
00:13:22,959 --> 00:13:29,000
the directives and if you wanted to set proper
caching control headers, check this out. It's

129
00:13:29,000 --> 00:13:34,040
not only about requests, it's about sending
the right data. What happens when your browser

130
00:13:34,040 --> 00:13:42,690
requests HTML? It sends a header called accept
encoding and tells the server, hey, this is

131
00:13:42,690 --> 00:13:49,560
what I understand. Cool. And you see the DEFLATE
and Boat LY. It's a different compression

132
00:13:49,560 --> 00:13:55,720
algorithm. And I took a CSS file and compressed
with two different compression algorithms.

133
00:13:55,720 --> 00:14:02,831
You can see that by itself it's a little bit
smaller than Gzip. But surprisingly, people

134
00:14:02,831 --> 00:14:09,300
are not using that often because what the
whole industry things is that Boat LY compression

135
00:14:09,300 --> 00:14:18,589
is so slow. Hard\hencode. With Gzip, the server
compresses and makes a Gzip. It might be a

136
00:14:18,589 --> 00:14:24,130
little bit slow. But when you say this sentence,
what you're basically doing is you're comparing

137
00:14:24,130 --> 00:14:28,930
apples with oranges.
Let's look at Gzip and Boat LY. Gzip has nine

138
00:14:28,930 --> 00:14:38,339
modes, Boat LY has 11. When you use these
in default mode, Gzip runs in level 6 and

139
00:14:38,339 --> 00:14:46,079
Boat LY runs in level 11. Between those, level
6 in Gzip is optimized for speed and compression

140
00:14:46,079 --> 00:14:54,220
ratio. The other default is there to save
the file size. When you tweak a little bit

141
00:14:54,220 --> 00:14:59,529
and go not with the default mode, but rather
level 4, it compresses better with the same

142
00:14:59,529 --> 00:15:06,319
speed on the fly. You can set this. Maybe
you have a build process in place, and you

143
00:15:06,319 --> 00:15:12,160
don't to want compress it on the fly because
you have a build process in place. You could

144
00:15:12,160 --> 00:15:18,899
compress all the files and serve them to save
some kilobytes. If you want to learn about

145
00:15:18,899 --> 00:15:25,680
this topic, there is extensive research about
what that means.

146
00:15:25,680 --> 00:15:32,149
What's the support? Pretty there. All the
big sights like Facebook, Dropbox, they are

147
00:15:32,149 --> 00:15:37,730
shipping Boat LY. And I would hope that we
do more things with this. It's not only about

148
00:15:37,730 --> 00:15:45,420
compression. It's about serving tailored media.
They cost the mode amount of data on the web.

149
00:15:45,420 --> 00:15:50,649
When you're doing frontend and you want to
ship, for example, an image, a little bit

150
00:15:50,649 --> 00:15:56,199
smaller than JPEG. You find yourself building
things like this. This is a picture element.

151
00:15:56,199 --> 00:16:02,810
Responsive images for several sizes and ships
when the browser understands it. This is horrible,

152
00:16:02,810 --> 00:16:09,149
right? You do feature detection, this will
break when the next person comes in. But guess

153
00:16:09,149 --> 00:16:14,420
what? The browser also tells the server what
image formats they're going to send. So, what

154
00:16:14,420 --> 00:16:19,629
you could do potentially for browsers that
support WebP, is you could read this header

155
00:16:19,629 --> 00:16:26,291
and serve a WebP image instead of a JPEG when
the browser tells you that this works. But

156
00:16:26,291 --> 00:16:31,610
you can go even further. When someone requests
your website and you said, for example, the

157
00:16:31,610 --> 00:16:37,189
accept CH header, this stands for client hint,
you can tell the browser, hey, I would like

158
00:16:37,189 --> 00:16:42,649
to know how wide your viewport is and please
tell me for the next 100 seconds. What happens

159
00:16:42,649 --> 00:16:47,480
then for the additional image requests is
that the browse her tell you dimensions of

160
00:16:47,480 --> 00:16:53,960
the images. How cool is that? This means that
you can use normal images without all the

161
00:16:53,960 --> 00:16:57,839
responsive images stuff. But you have to give
it a size attribute.

162
00:16:57,839 --> 00:17:02,850
So, that the browser up front knows how this
image is laid out. And this is then the request

163
00:17:02,850 --> 00:17:08,390
that goes out. It will tell viewport with
Nth of their image. And guess what? When you're

164
00:17:08,390 --> 00:17:15,520
on a high pixel resolution display it will
tell you the real size of the image. You can

165
00:17:15,520 --> 00:17:21,690
then serve proper images via server-side generation
or service worker which is pretty cool. I'm

166
00:17:21,690 --> 00:17:27,329
excited about this. This is a little bit cutting
edge. If you want to learn about client hints,

167
00:17:27,329 --> 00:17:32,170
check out this resource. He does a lot of
cool things around this topic.

168
00:17:32,170 --> 00:17:38,080
So, I tweaked another side of my responsible
Dev site. You see there, slash affordable.

169
00:17:38,080 --> 00:17:45,930
You see that I'm shipping and also the image
element is a JPEG. But serving web P without

170
00:17:45,930 --> 00:17:57,000
any markup changes and tells me how big the
image is. And without changing the viewport,

171
00:17:57,000 --> 00:18:02,870
the server knows who resources to ship and
what image would be the perfect fit here.

172
00:18:02,870 --> 00:18:08,650
The web has to be affordable because the web
is with us every day. Unfortunately, we reached

173
00:18:08,650 --> 00:18:17,470
this state in the web right now.
It's not playing? Here we go. This is made

174
00:18:17,470 --> 00:18:32,641
by a former colleague of mine. This is where
we are, right? We are web developers. This

175
00:18:32,641 --> 00:18:38,880
is what we build. I believe that the web has
to be respectful. And one of the most things

176
00:18:38,880 --> 00:18:43,530
that we should honor more is time. And we
should get the stuff that we shipped down

177
00:18:43,530 --> 00:18:48,040
more quickly. So, what you can do is you can
optimize the loading process for certain things,

178
00:18:48,040 --> 00:18:53,950
and you can use link preload in your HTML
oar set a header which then gives information

179
00:18:53,950 --> 00:18:58,400
to the browser telling, hey, you will need
these resources. Please start loading it.

180
00:18:58,400 --> 00:19:04,940
Because a person doesn't want to wait for
a font to kick in and watch a blank screen.

181
00:19:04,940 --> 00:19:08,510
When you use the HTTP header, you have to
be a little bit careful though when you're

182
00:19:08,510 --> 00:19:15,150
using certain proxy servers or CDNs. Think
preload will lead to the server push command

183
00:19:15,150 --> 00:19:19,250
which is then not taking the browser cache
into consideration.

184
00:19:19,250 --> 00:19:24,690
So, if you use this header, you have to use
no push. This is great to speed up credit

185
00:19:24,690 --> 00:19:30,800
calorie sources. How is the support today
for link preload? It's pretty good. You can

186
00:19:30,800 --> 00:19:36,470
add these things and optimize the loading
process to get your fonts or header images

187
00:19:36,470 --> 00:19:41,870
down quicker and optimize for the time of
your visitors.

188
00:19:41,870 --> 00:19:47,200
The next thing I want to talk about is the
AMP reaction. So, two and a half years ago

189
00:19:47,200 --> 00:19:51,510
I was giving a talk about AMP and how it works
technically. Actually, versus very interesting

190
00:19:51,510 --> 00:19:57,250
what they do. And when AMP was released, doing
a lot of standard work and spec writing and

191
00:19:57,250 --> 00:20:02,130
then the web ecosystem. What he did is when
he saw that we need to come up with an alternative

192
00:20:02,130 --> 00:20:07,420
very, very quickly because AMP is very JavaScriptdriven.
And this is very cool because now two years

193
00:20:07,420 --> 00:20:12,780
later what is slowly coming is the feature
policy header. What you can do there is you

194
00:20:12,780 --> 00:20:18,320
can define what should be allowed in your
website. And there's a lot of cool stuff possible

195
00:20:18,320 --> 00:20:21,650
that you can configure.
It could be possible that a thirdparty script

196
00:20:21,650 --> 00:20:28,180
coming from somewhere accesses\h wants to
access my camera. I think this is cool that

197
00:20:28,180 --> 00:20:32,320
you can block a lot of things that shouldn't
be possible by default. Unfortunately, we're

198
00:20:32,320 --> 00:20:37,180
now entering a little bit of cutting-edge
technology here. But there are cool things

199
00:20:37,180 --> 00:20:43,770
like unoptimized media and optimized images.
You can limit yourself and tell the browser

200
00:20:43,770 --> 00:20:50,750
I don't want to ship, even accidently, massive
images. You can then also define this for

201
00:20:50,750 --> 00:20:55,900
iFrames. And there will be a JavaScript\h
it's already shipping in Chromium browsers

202
00:20:55,900 --> 00:21:00,200
there's also a JavaScript API that lets you
access these values that came in via header.

203
00:21:00,200 --> 00:21:05,521
This JavaScript API is still under discussion,
though, so, please use that carefully. If

204
00:21:05,521 --> 00:21:11,820
you had to look at this list very carefully,
you might have noticed that there was one

205
00:21:11,820 --> 00:21:16,040
thing missing in this huge list of things
that you don't want to allow on your site.

206
00:21:16,040 --> 00:21:21,200
What's the most annoying one on websites these
days? Push notifications, right? People working

207
00:21:21,200 --> 00:21:26,220
on these kinds of things figured out handling
push notifications and disallowing them are

208
00:21:26,220 --> 00:21:31,180
trickier than first thoughts. If you want
to know how we go with these kinds of things,

209
00:21:31,180 --> 00:21:37,781
you can follow this issue. What's the support
for feature policy? We're not that bad. Which

210
00:21:37,781 --> 00:21:42,120
is prettying with pretty cool.
So, with these kinds of headers, I set up

211
00:21:42,120 --> 00:21:47,050
another site,/respectful. And what you see
is the permission dialogue is gone because

212
00:21:47,050 --> 00:21:55,600
I don't allow it. And also, the JSConf PNG
in the bottom and defined in CSS, I pushed

213
00:21:55,600 --> 00:22:01,110
that to be loaded quicker which makes make
the experience a little bit better. So, building

214
00:22:01,110 --> 00:22:05,660
for the web is very, very, very hard these
days. There are so many things to consider.

215
00:22:05,660 --> 00:22:10,510
You have to think about the design, the content,
web performance, accessibility, frameworks,

216
00:22:10,510 --> 00:22:14,260
network and devices. And there's surely more
things that you have to consider when you're

217
00:22:14,260 --> 00:22:20,650
building for the web. So, all things headers,
this 20minute rundown is not a complete one.

218
00:22:20,650 --> 00:22:26,120
If you want a complete overview, my friend
Shepp maintains this slide deck. This is a

219
00:22:26,120 --> 00:22:31,270
massive resource if you want to know what
HTTP headers are out there and you can Google

220
00:22:31,270 --> 00:22:37,610
headers for hackers. And Andrew Betz give
this is fantastic talk if you want to know

221
00:22:37,610 --> 00:22:43,470
more.
I really believe that the web has to be safe.

222
00:22:43,470 --> 00:22:50,880
My mother shouldn't browse the web and mine
cryptocurrency. People pay a different amount

223
00:22:50,880 --> 00:22:55,820
of money depend on which situation they are
and where they are in the world. And it has

224
00:22:55,820 --> 00:23:01,910
to be respectful because nobody likes a person
that is asking random questions and permissions

225
00:23:01,910 --> 00:23:07,750
all the time. So, the web has to be safe,
affordable and respectful so that it really

226
00:23:07,750 --> 00:23:14,770
is for everybody.
Thank you very much.

