1
00:00:19,100 --> 00:00:21,539

so this is the talk called space-age

2
00:00:21,539 --> 00:00:24,450
miracle tools such is everybody calls me

3
00:00:24,450 --> 00:00:25,920
NJ because it's easier than trying to

4
00:00:25,920 --> 00:00:28,770
pronounce my actual name so NJ it is and

5
00:00:28,770 --> 00:00:32,160
I'm not website on twitter and i work at

6
00:00:32,160 --> 00:00:34,590
adobe on a project called brackets which

7
00:00:34,590 --> 00:00:37,290
i hope to start brackets is a code

8
00:00:37,290 --> 00:00:39,840
editor for web developers and it's built

9
00:00:39,840 --> 00:00:42,090
almost entirely in HTML CSS and

10
00:00:42,090 --> 00:00:44,280
JavaScript a little native stuff around

11
00:00:44,280 --> 00:00:45,480
it so it can access the local file

12
00:00:45,480 --> 00:00:47,610
system and it's completely open source

13
00:00:47,610 --> 00:00:50,280
MIT license and stuff like that cuz they

14
00:00:50,280 --> 00:00:51,960
may her actually tried brackets out like

15
00:00:51,960 --> 00:00:54,449
oh good so may ever actually tried to

16
00:00:54,449 --> 00:00:55,620
hack on brackets or write an extension

17
00:00:55,620 --> 00:00:58,850
for it alright you don't count Brian I

18
00:00:58,850 --> 00:01:02,159
mean no you count a lot I just mean okay

19
00:01:02,159 --> 00:01:04,500
so well maybe it's a couple people so

20
00:01:04,500 --> 00:01:05,820
you know I called this talk space-age

21
00:01:05,820 --> 00:01:07,140
miracle tools ojs which is kind of a

22
00:01:07,140 --> 00:01:08,520
terrible name because how could you

23
00:01:08,520 --> 00:01:09,780
possibly live up to a name like that but

24
00:01:09,780 --> 00:01:11,820
what I'm going to show is some sort of

25
00:01:11,820 --> 00:01:13,470
early experiments some ideas we have for

26
00:01:13,470 --> 00:01:15,150
future developer tooling and we kind of

27
00:01:15,150 --> 00:01:17,880
want your feedback on you know whether

28
00:01:17,880 --> 00:01:19,710
these things make sense whether there's

29
00:01:19,710 --> 00:01:20,909
something that you think we or other

30
00:01:20,909 --> 00:01:23,520
people should pursue and then a top of

31
00:01:23,520 --> 00:01:24,810
getting feedback on these ideas we also

32
00:01:24,810 --> 00:01:26,700
want to hope hopefully inspire other

33
00:01:26,700 --> 00:01:28,560
people you know you guys to think about

34
00:01:28,560 --> 00:01:30,240
what kinds of developer tools would you

35
00:01:30,240 --> 00:01:31,920
like to see you know for the next 10

36
00:01:31,920 --> 00:01:32,820
years for the challenges that we're

37
00:01:32,820 --> 00:01:34,289
going to be facing in the future or even

38
00:01:34,289 --> 00:01:35,909
are facing now that maybe aren't

39
00:01:35,909 --> 00:01:37,439
adequately addressed by the kinds of

40
00:01:37,439 --> 00:01:39,960
tooling that we have today so there's

41
00:01:39,960 --> 00:01:41,039
gonna be a sequence of demos and I

42
00:01:41,039 --> 00:01:42,420
didn't actually do most of them myself

43
00:01:42,420 --> 00:01:43,799
so I'm going to introduce who actually

44
00:01:43,799 --> 00:01:45,240
worked on them so the first one is

45
00:01:45,240 --> 00:01:47,909
called Theseus and it's done by Tom

46
00:01:47,909 --> 00:01:49,560
Lieber who I think he's just finishing

47
00:01:49,560 --> 00:01:53,429
in PhD at MIT and drove Brandt who works

48
00:01:53,429 --> 00:01:55,920
at Adobe and their research group and

49
00:01:55,920 --> 00:01:57,060
the prom they're trying to solve is that

50
00:01:57,060 --> 00:01:58,679
debugging asynchronous code I mean we're

51
00:01:58,679 --> 00:01:59,670
web developers right we have to deal

52
00:01:59,670 --> 00:02:01,649
with us all the time and it's super fun

53
00:02:01,649 --> 00:02:06,210
right right yeah so basically you know

54
00:02:06,210 --> 00:02:07,859
you see something's wrong in your web

55
00:02:07,859 --> 00:02:09,899
app and then you have to kind of guess

56
00:02:09,899 --> 00:02:10,950
where the problem is by reading all your

57
00:02:10,950 --> 00:02:12,510
code on the client may be on the server

58
00:02:12,510 --> 00:02:14,790
right it could be either place and then

59
00:02:14,790 --> 00:02:16,080
because the problem aight be an

60
00:02:16,080 --> 00:02:17,160
asynchronous code you can't just step

61
00:02:17,160 --> 00:02:18,680
through all your code right you have to

62
00:02:18,680 --> 00:02:20,670
think about every single place or code

63
00:02:20,670 --> 00:02:22,410
might go and then like a break points or

64
00:02:22,410 --> 00:02:23,580
log statements or whatever and just sort

65
00:02:23,580 --> 00:02:24,780
of scattered them all over the place and

66
00:02:24,780 --> 00:02:26,250
then like reload try to figure out

67
00:02:26,250 --> 00:02:27,960
what's going on and then you know if you

68
00:02:27,960 --> 00:02:29,310
haven't fixed it yet then you know you

69
00:02:29,310 --> 00:02:30,480
kind of have to rinse and repeat so it's

70
00:02:30,480 --> 00:02:31,060
kind of a pain

71
00:02:31,060 --> 00:02:35,470
right so idea of theseus is to make it

72
00:02:35,470 --> 00:02:37,390
easier to debug this stuff by basically

73
00:02:37,390 --> 00:02:40,000
capturing information as we go along so

74
00:02:40,000 --> 00:02:41,349
to see this let me go ahead and start a

75
00:02:41,349 --> 00:02:43,510
brackets and if you haven't seen

76
00:02:43,510 --> 00:02:45,250
brackets before you know as you can tell

77
00:02:45,250 --> 00:02:46,900
pretty much looks like a text editor on

78
00:02:46,900 --> 00:02:47,920
the surface right it's just got the

79
00:02:47,920 --> 00:02:49,060
standard stuff you'd expect like code

80
00:02:49,060 --> 00:02:50,769
coloring and it's got a little file tree

81
00:02:50,769 --> 00:02:51,730
and stuff like that i'll show you some

82
00:02:51,730 --> 00:02:53,080
of the more like specific features that

83
00:02:53,080 --> 00:02:54,760
we already have in brackets later on but

84
00:02:54,760 --> 00:02:55,930
right now you know and all this stuff is

85
00:02:55,930 --> 00:02:58,380
built in HTML like I said in JavaScript

86
00:02:58,380 --> 00:03:00,519
but let me go ahead and show you how

87
00:03:00,519 --> 00:03:03,190
this Theseus stuff works so when we

88
00:03:03,190 --> 00:03:05,860
start by starting the server for it so

89
00:03:05,860 --> 00:03:07,120
this is my server app but what I'm going

90
00:03:07,120 --> 00:03:08,410
to do is instead of starting at a node

91
00:03:08,410 --> 00:03:10,600
i'm going to start it and no Theseus

92
00:03:10,600 --> 00:03:11,650
which is going to instrument it in

93
00:03:11,650 --> 00:03:13,110
certain ways that we'll talk about later

94
00:03:13,110 --> 00:03:15,489
okay so this is running my node app now

95
00:03:15,489 --> 00:03:18,040
and then from brackets I'm going to

96
00:03:18,040 --> 00:03:20,200
enable Theseus and I'm going to go to

97
00:03:20,200 --> 00:03:23,290
the source code for that project hoops

98
00:03:23,290 --> 00:03:26,650
and I'm going to go into this live

99
00:03:26,650 --> 00:03:28,450
development mode ok so now I'm running

100
00:03:28,450 --> 00:03:29,650
this application and this is just like a

101
00:03:29,650 --> 00:03:31,299
simple demo app it's a reservation

102
00:03:31,299 --> 00:03:32,950
application right and so the ideas are

103
00:03:32,950 --> 00:03:33,790
supposed to be able to select an

104
00:03:33,790 --> 00:03:35,829
activity you want to do and then select

105
00:03:35,829 --> 00:03:37,209
which date you want to do it on but as

106
00:03:37,209 --> 00:03:39,010
you can see there's no actual dates in

107
00:03:39,010 --> 00:03:40,690
the drop-down right so there's a bug

108
00:03:40,690 --> 00:03:42,760
somewhere so where's the bug well it

109
00:03:42,760 --> 00:03:44,680
could be in this event handler for this

110
00:03:44,680 --> 00:03:46,690
drop-down right it could be that we're

111
00:03:46,690 --> 00:03:48,220
not kicking off the Ajax request

112
00:03:48,220 --> 00:03:49,780
properly it could be that on the server

113
00:03:49,780 --> 00:03:50,920
side it's not accessing the database

114
00:03:50,920 --> 00:03:52,450
properly or it's not returning the

115
00:03:52,450 --> 00:03:53,769
response properly whatever so it could

116
00:03:53,769 --> 00:03:55,600
be in a bunch of different places so

117
00:03:55,600 --> 00:03:57,280
because we were running this all in the

118
00:03:57,280 --> 00:03:58,930
context of Theseus we can actually go

119
00:03:58,930 --> 00:04:02,350
back and look at our source code and now

120
00:04:02,350 --> 00:04:03,730
i'm going to switch to my client side

121
00:04:03,730 --> 00:04:05,200
JavaScript and you can see that as I've

122
00:04:05,200 --> 00:04:07,090
been doing stuff it's actually been

123
00:04:07,090 --> 00:04:08,440
capturing information on which functions

124
00:04:08,440 --> 00:04:10,540
got called right and this is live so if

125
00:04:10,540 --> 00:04:12,280
I go and I pick another activity let's

126
00:04:12,280 --> 00:04:15,040
say you know like running or something

127
00:04:15,040 --> 00:04:16,720
you can see that it updates what got

128
00:04:16,720 --> 00:04:19,329
called so it's kind of useful and I can

129
00:04:19,329 --> 00:04:20,380
also click on these things to get more

130
00:04:20,380 --> 00:04:21,970
information so for example we can see

131
00:04:21,970 --> 00:04:23,440
that our change handler got called to x

132
00:04:23,440 --> 00:04:24,610
which is what we would expect as we pick

133
00:04:24,610 --> 00:04:25,660
two different things from the background

134
00:04:25,660 --> 00:04:31,650
yeah oh I'm sorry it's a better

135
00:04:31,650 --> 00:04:39,790
it better all right okay so you can see

136
00:04:39,790 --> 00:04:40,960
that we've got to change gentlefolk make

137
00:04:40,960 --> 00:04:43,000
an even bigger so we've got change

138
00:04:43,000 --> 00:04:45,130
handler here right and that got called

139
00:04:45,130 --> 00:04:46,930
which is what we would expect and so I

140
00:04:46,930 --> 00:04:48,520
can click on that and I'm sorry I can't

141
00:04:48,520 --> 00:04:49,690
increase the font size of this right now

142
00:04:49,690 --> 00:04:50,770
but basically it's showing the

143
00:04:50,770 --> 00:04:52,270
information about each of those calls

144
00:04:52,270 --> 00:04:54,430
and I can also look at some other stuff

145
00:04:54,430 --> 00:04:55,840
like there's this set up dates function

146
00:04:55,840 --> 00:04:57,910
which got called also twice and then

147
00:04:57,910 --> 00:05:00,160
there's an ajax post and then there was

148
00:05:00,160 --> 00:05:02,500
a callback function that got returned or

149
00:05:02,500 --> 00:05:04,420
that got called when the data was

150
00:05:04,420 --> 00:05:06,490
returned right so you click on all those

151
00:05:06,490 --> 00:05:07,420
things and you can see that we're

152
00:05:07,420 --> 00:05:08,560
actually showing in this log now

153
00:05:08,560 --> 00:05:11,050
basically the causal chains here so the

154
00:05:11,050 --> 00:05:12,610
change handler called set up dates and

155
00:05:12,610 --> 00:05:14,320
then as a result of the post that got

156
00:05:14,320 --> 00:05:16,360
done instead of dates get dates callback

157
00:05:16,360 --> 00:05:18,640
got called and the interesting thing

158
00:05:18,640 --> 00:05:20,290
here I mean a little side note is that

159
00:05:20,290 --> 00:05:22,330
you know this isn't just a call stack

160
00:05:22,330 --> 00:05:23,380
right like this is basically a call

161
00:05:23,380 --> 00:05:25,090
stack but the get dates callback that I

162
00:05:25,090 --> 00:05:26,530
should got called back asynchronously so

163
00:05:26,530 --> 00:05:27,610
if you were to look at this in devtools

164
00:05:27,610 --> 00:05:28,870
you wouldn't see it in the same call

165
00:05:28,870 --> 00:05:30,910
stack because all that other stuff but

166
00:05:30,910 --> 00:05:31,990
we're actually kind of tracking that

167
00:05:31,990 --> 00:05:33,700
stuff and showing you how these

168
00:05:33,700 --> 00:05:34,810
asynchronous things are related to each

169
00:05:34,810 --> 00:05:37,090
other so I can look at this and I can

170
00:05:37,090 --> 00:05:38,680
look at the return values from get dates

171
00:05:38,680 --> 00:05:39,910
call back and you can see that the data

172
00:05:39,910 --> 00:05:41,080
I got back from the server is empty

173
00:05:41,080 --> 00:05:42,100
right so clearly there's a bug on the

174
00:05:42,100 --> 00:05:43,900
server so I'm going to switch to the

175
00:05:43,900 --> 00:05:45,730
node code so this is the JavaScript

176
00:05:45,730 --> 00:05:46,600
that's actually running on the node

177
00:05:46,600 --> 00:05:48,280
server and because we were running that

178
00:05:48,280 --> 00:05:50,260
in this Theseus thing to you can see

179
00:05:50,260 --> 00:05:52,590
that it's actually showing the same

180
00:05:52,590 --> 00:05:54,550
instrumentation information for the

181
00:05:54,550 --> 00:05:56,380
server side and again I can click on

182
00:05:56,380 --> 00:05:57,610
these things to see what happens so I

183
00:05:57,610 --> 00:06:00,100
can click on these calls here and I can

184
00:06:00,100 --> 00:06:01,510
take a look and see oh okay well it

185
00:06:01,510 --> 00:06:03,220
looks like this handle API quest got

186
00:06:03,220 --> 00:06:05,350
called and that called get dates but in

187
00:06:05,350 --> 00:06:06,820
get dates this activity was undefined

188
00:06:06,820 --> 00:06:08,590
and so if i look at the call to that it

189
00:06:08,590 --> 00:06:09,669
looks like i just made like a stupid

190
00:06:09,669 --> 00:06:11,560
typo right so this is obviously a very

191
00:06:11,560 --> 00:06:13,600
simple example and this is kind of early

192
00:06:13,600 --> 00:06:15,580
work but the idea is to make it so that

193
00:06:15,580 --> 00:06:16,900
by sort of watching what your

194
00:06:16,900 --> 00:06:18,340
application is doing we can give you

195
00:06:18,340 --> 00:06:19,510
rich information that you can use for

196
00:06:19,510 --> 00:06:21,040
debugging after the fact as opposed to

197
00:06:21,040 --> 00:06:22,390
you having to sort of proactively figure

198
00:06:22,390 --> 00:06:23,500
out all the places where you have to

199
00:06:23,500 --> 00:06:25,060
essentially manually instrument your

200
00:06:25,060 --> 00:06:26,770
code yourself with log statements and

201
00:06:26,770 --> 00:06:28,290
break points and all that kind of stuff

202
00:06:28,290 --> 00:06:32,400
so this is actually just turn this off

203
00:06:32,400 --> 00:06:35,560
so they've started putting this stuff up

204
00:06:35,560 --> 00:06:37,810
on github already so it's open source so

205
00:06:37,810 --> 00:06:39,430
if you have brackets you can check out

206
00:06:39,430 --> 00:06:41,740
Adobe research / Theseus and you can

207
00:06:41,740 --> 00:06:43,660
just install this as an extension

208
00:06:43,660 --> 00:06:45,040
into brackets to check it out and

209
00:06:45,040 --> 00:06:46,330
definitely give them feedback on you

210
00:06:46,330 --> 00:06:47,920
know is this useful what other kinds of

211
00:06:47,920 --> 00:06:48,760
information do you think could be

212
00:06:48,760 --> 00:06:50,860
collected you know what are different

213
00:06:50,860 --> 00:06:51,670
ways you might want to query that

214
00:06:51,670 --> 00:06:56,770
information ok so that was Theseus the

215
00:06:56,770 --> 00:06:58,330
second thing we're going to show is this

216
00:06:58,330 --> 00:06:59,770
idea called insta bug and this is

217
00:06:59,770 --> 00:07:02,200
actually done by Peter Flynn who you

218
00:07:02,200 --> 00:07:03,280
might have seen his talk at the ABC is

219
00:07:03,280 --> 00:07:05,500
talk on Wednesday on performance let's

220
00:07:05,500 --> 00:07:07,300
good talk you should check it out on the

221
00:07:07,300 --> 00:07:09,070
recording if you didn't see it but

222
00:07:09,070 --> 00:07:10,150
anyway he's gonna talk about something

223
00:07:10,150 --> 00:07:11,080
totally different now which is called

224
00:07:11,080 --> 00:07:24,680
instant bug

225
00:07:24,690 --> 00:07:29,380
almost can never hear me all right cool

226
00:07:29,380 --> 00:07:32,199
all right so how many people have seen

227
00:07:32,199 --> 00:07:34,860
this demo from Brett Victor while back

228
00:07:34,860 --> 00:07:37,630
you have basically a code editor on the

229
00:07:37,630 --> 00:07:39,160
left on the right hand side to have this

230
00:07:39,160 --> 00:07:41,620
visualization of how the values of

231
00:07:41,620 --> 00:07:43,150
variables change over time and as you

232
00:07:43,150 --> 00:07:44,800
edit the code on the left the

233
00:07:44,800 --> 00:07:46,419
visualization on the right hand side is

234
00:07:46,419 --> 00:07:47,830
actually updating continuously as you're

235
00:07:47,830 --> 00:07:48,820
typing so you're getting this sort of

236
00:07:48,820 --> 00:07:50,440
live feedback how many people have seen

237
00:07:50,440 --> 00:07:53,460
that that demo before all right cool

238
00:07:53,460 --> 00:07:56,260
this is a kind of sort of novel thinking

239
00:07:56,260 --> 00:07:57,910
that gets me really excited about the

240
00:07:57,910 --> 00:08:00,400
future of JavaScript tooling and so I've

241
00:08:00,400 --> 00:08:01,510
actually been working on something along

242
00:08:01,510 --> 00:08:05,680
these lines and basically to looking at

243
00:08:05,680 --> 00:08:06,669
some of the ways that you can branch out

244
00:08:06,669 --> 00:08:09,220
from this idea so let me show you a bit

245
00:08:09,220 --> 00:08:11,139
of that just going to take a little

246
00:08:11,139 --> 00:08:16,840
quick switch a root here oh it's your

247
00:08:16,840 --> 00:08:20,310
turn up disease

248
00:08:20,320 --> 00:08:22,000
so I don't know if I can make the font

249
00:08:22,000 --> 00:08:23,170
much bigger than that i haven't still

250
00:08:23,170 --> 00:08:28,390
fit but hopefully it'll be okay so for

251
00:08:28,390 --> 00:08:29,500
those of you haven't seen in demo here's

252
00:08:29,500 --> 00:08:30,670
basically how it works you have some

253
00:08:30,670 --> 00:08:33,010
code and as you make edits in the code

254
00:08:33,010 --> 00:08:34,539
actually see the stuff on the right hand

255
00:08:34,539 --> 00:08:35,919
side here is updating in real time it's

256
00:08:35,919 --> 00:08:38,349
showing me how each value changes as its

257
00:08:38,349 --> 00:08:40,300
assigned as its modified so as I'm

258
00:08:40,300 --> 00:08:41,620
making edits here you can actually see

259
00:08:41,620 --> 00:08:45,250
those values being modified so what's

260
00:08:45,250 --> 00:08:46,480
really cool about this is it's taking

261
00:08:46,480 --> 00:08:48,070
this traditional three-step cycle that

262
00:08:48,070 --> 00:08:49,960
we're used to first you write code then

263
00:08:49,960 --> 00:08:51,970
you test code then you debug the code to

264
00:08:51,970 --> 00:08:53,920
find problems to fix the problems taking

265
00:08:53,920 --> 00:08:55,390
those three steps and it's fusing them

266
00:08:55,390 --> 00:08:57,370
to this one continuous ongoing process

267
00:08:57,370 --> 00:08:58,900
so while you're writing code you're

268
00:08:58,900 --> 00:09:01,480
continuously seeing live feedback as to

269
00:09:01,480 --> 00:09:03,700
the results of executing that code and

270
00:09:03,700 --> 00:09:04,600
when the result isn't what you expected

271
00:09:04,600 --> 00:09:06,280
you already have this rich debug

272
00:09:06,280 --> 00:09:08,200
information on the screen right right

273
00:09:08,200 --> 00:09:10,390
there and I think that's actually a

274
00:09:10,390 --> 00:09:11,650
combination of sort of two interrelated

275
00:09:11,650 --> 00:09:14,020
ideas the first is this this sort of

276
00:09:14,020 --> 00:09:15,910
idea of continuously executing the code

277
00:09:15,910 --> 00:09:18,850
as you're making changes and to be able

278
00:09:18,850 --> 00:09:20,080
to show you that live feedback and then

279
00:09:20,080 --> 00:09:21,130
the second is this really rich

280
00:09:21,130 --> 00:09:22,540
visualization you see on the right hand

281
00:09:22,540 --> 00:09:25,210
side that's broader on the time spectrum

282
00:09:25,210 --> 00:09:26,410
then when you get from a traditional

283
00:09:26,410 --> 00:09:28,060
debugger so traditional debugger right

284
00:09:28,060 --> 00:09:29,260
you're looking to this really narrow

285
00:09:29,260 --> 00:09:30,790
window it's just an instant in time and

286
00:09:30,790 --> 00:09:32,440
that's all you can see you can step

287
00:09:32,440 --> 00:09:34,060
forwards but you're only looking through

288
00:09:34,060 --> 00:09:36,010
a little sliver this is showing you a

289
00:09:36,010 --> 00:09:37,990
more holistic view of the whole history

290
00:09:37,990 --> 00:09:39,850
of the execution of the flow of

291
00:09:39,850 --> 00:09:43,270
execution through the code and I think

292
00:09:43,270 --> 00:09:44,530
that right hand side that visualization

293
00:09:44,530 --> 00:09:47,410
can actually be made semantically more

294
00:09:47,410 --> 00:09:49,990
rich in other ways to let me show you a

295
00:09:49,990 --> 00:09:53,620
couple ideas that we had around that so

296
00:09:53,620 --> 00:09:55,000
one thing you could do for example is

297
00:09:55,000 --> 00:09:56,350
you can grow out blocks of code that

298
00:09:56,350 --> 00:09:57,610
aren't being executed so that your eye

299
00:09:57,610 --> 00:09:59,230
is just naturally drawn toward the

300
00:09:59,230 --> 00:10:01,860
actual code path that the execution took

301
00:10:01,860 --> 00:10:04,750
then if you have something that lets say

302
00:10:04,750 --> 00:10:06,970
a loop being executed we can show you

303
00:10:06,970 --> 00:10:09,250
the number of iterations that it

304
00:10:09,250 --> 00:10:11,230
executed just a really quick way to get

305
00:10:11,230 --> 00:10:12,370
a you know wrap your head around what

306
00:10:12,370 --> 00:10:14,230
the codes been doing and then let's say

307
00:10:14,230 --> 00:10:15,970
if you have a variable that's being used

308
00:10:15,970 --> 00:10:18,670
as an index into an array we can

309
00:10:18,670 --> 00:10:19,870
actually show you the value of that

310
00:10:19,870 --> 00:10:21,640
variable not just as an integer sort of

311
00:10:21,640 --> 00:10:23,980
floating out of context but actually as

312
00:10:23,980 --> 00:10:26,620
an indicator on the array itself showing

313
00:10:26,620 --> 00:10:29,320
you what member of the array that value

314
00:10:29,320 --> 00:10:31,210
is actually pointing to so it's

315
00:10:31,210 --> 00:10:32,680
basically beginning to give you sort of

316
00:10:32,680 --> 00:10:33,850
this rich or semantic view

317
00:10:33,850 --> 00:10:35,829
of what the values in the code mean and

318
00:10:35,829 --> 00:10:37,149
what the execution of the code looks

319
00:10:37,149 --> 00:10:40,240
like over time but skimming back to that

320
00:10:40,240 --> 00:10:41,440
first thought that sort of continues to

321
00:10:41,440 --> 00:10:43,720
re execution of the code one question

322
00:10:43,720 --> 00:10:45,130
about that is whether that's actually

323
00:10:45,130 --> 00:10:46,959
sort of a fatal flaw in this this whole

324
00:10:46,959 --> 00:10:49,600
idea every time you see demos like this

325
00:10:49,600 --> 00:10:51,399
it's always either a toy snippet of code

326
00:10:51,399 --> 00:10:53,829
like this one or it's some kind of run

327
00:10:53,829 --> 00:10:55,990
loop like in an animation or a game that

328
00:10:55,990 --> 00:10:57,880
certain lends itself naturally to being

329
00:10:57,880 --> 00:10:59,529
rerun over and over again because that's

330
00:10:59,529 --> 00:11:01,329
what it's designed for and it's a

331
00:11:01,329 --> 00:11:03,190
continuous we execute makes a lot of

332
00:11:03,190 --> 00:11:05,259
sense there but you can't continuously

333
00:11:05,259 --> 00:11:07,089
execute an entire web app as you're

334
00:11:07,089 --> 00:11:08,440
typing like what does that even mean

335
00:11:08,440 --> 00:11:11,980
doesn't make much sense this whole idea

336
00:11:11,980 --> 00:11:14,649
is really predicated on taking a set of

337
00:11:14,649 --> 00:11:16,750
code and isolating it along with its

338
00:11:16,750 --> 00:11:18,639
inputs and sort of mocking away the rest

339
00:11:18,639 --> 00:11:19,839
of the world to be able to do this

340
00:11:19,839 --> 00:11:22,839
continuously execution to me that sounds

341
00:11:22,839 --> 00:11:24,459
a lot like the process of writing good

342
00:11:24,459 --> 00:11:26,620
unit tests isolating code mocking things

343
00:11:26,620 --> 00:11:28,329
etc so I think it's really interesting

344
00:11:28,329 --> 00:11:29,800
to look at all this from the perspective

345
00:11:29,800 --> 00:11:33,250
of unit testing and tdd and I'll show

346
00:11:33,250 --> 00:11:38,529
you an example of what I mean by that so

347
00:11:38,529 --> 00:11:41,170
here's a no we got the lineup you should

348
00:11:41,170 --> 00:11:42,339
let me make the font a little smaller

349
00:11:42,339 --> 00:11:43,930
again sorry this is the low resolution

350
00:11:43,930 --> 00:11:48,060
is a bit of a bit of an issue here but

351
00:11:48,060 --> 00:11:53,360
no lower resolution I thought that I

352
00:11:53,370 --> 00:11:57,390
oh yeah it keeps there we go the phone's

353
00:11:57,390 --> 00:11:58,589
going to be really small I don't know

354
00:11:58,589 --> 00:12:00,060
why we're getting that problem I think

355
00:12:00,060 --> 00:12:01,380
it's on the other branch maybe but

356
00:12:01,380 --> 00:12:05,160
anyway so oh that's okay hopefully

357
00:12:05,160 --> 00:12:07,290
hopefully I'll kind of talk to the code

358
00:12:07,290 --> 00:12:08,490
so if it's hard to read hopefully it'll

359
00:12:08,490 --> 00:12:10,320
still make sense this code right here is

360
00:12:10,320 --> 00:12:12,480
a function it takes an argument it's a

361
00:12:12,480 --> 00:12:13,740
really crappy implementation of

362
00:12:13,740 --> 00:12:16,650
converting a number to a string and so I

363
00:12:16,650 --> 00:12:18,000
can fill in a hypothetical argument

364
00:12:18,000 --> 00:12:20,790
value here to begin to see you know what

365
00:12:20,790 --> 00:12:22,680
the code is doing but I can also fill in

366
00:12:22,680 --> 00:12:24,810
an expected value and you can see that

367
00:12:24,810 --> 00:12:26,130
the codes doing the wrong thing it's

368
00:12:26,130 --> 00:12:27,029
actually getting stuck in an infinite

369
00:12:27,029 --> 00:12:28,860
loop but let's set that aside for a

370
00:12:28,860 --> 00:12:30,810
second and sort of do a test first so I

371
00:12:30,810 --> 00:12:34,650
can add a few more test cases here 0 is

372
00:12:34,650 --> 00:12:37,080
a good edge case negative numbers

373
00:12:37,080 --> 00:12:39,330
another good edge case and like i said

374
00:12:39,330 --> 00:12:40,710
this codes really crappy it's failing

375
00:12:40,710 --> 00:12:42,270
every test case I can possibly think of

376
00:12:42,270 --> 00:12:44,190
but that's fine let's go back to the

377
00:12:44,190 --> 00:12:46,110
first one we've tried 120 and see if we

378
00:12:46,110 --> 00:12:47,610
can actually get a sense of what's going

379
00:12:47,610 --> 00:12:50,520
on here so we're expecting num to

380
00:12:50,520 --> 00:12:53,130
converge down to zero and instead we can

381
00:12:53,130 --> 00:12:54,120
see really easily hear that it's

382
00:12:54,120 --> 00:12:55,230
actually just getting into smaller and

383
00:12:55,230 --> 00:12:57,570
smaller floating-point numbers so that's

384
00:12:57,570 --> 00:12:58,560
you know one of these sort of

385
00:12:58,560 --> 00:13:00,570
traditional pitfalls in JavaScript an

386
00:13:00,570 --> 00:13:01,980
integer division doesn't doesn't

387
00:13:01,980 --> 00:13:04,230
truncate and we can really easily fix

388
00:13:04,230 --> 00:13:05,940
that with just adding in a math that

389
00:13:05,940 --> 00:13:08,670
floor here oh no it's doing it again let

390
00:13:08,670 --> 00:13:09,980
me take some white space out of the code

391
00:13:09,980 --> 00:13:13,790
sorry there we go so now we can see that

392
00:13:13,790 --> 00:13:16,020
we're running three iterations for a

393
00:13:16,020 --> 00:13:17,430
three digit number that's what we expect

394
00:13:17,430 --> 00:13:18,990
the single digit case is actually

395
00:13:18,990 --> 00:13:21,300
passing already now but if you can see

396
00:13:21,300 --> 00:13:22,950
this it's actually outputting 0 to 1

397
00:13:22,950 --> 00:13:24,810
instead of instead of 1 to 0 so it's

398
00:13:24,810 --> 00:13:26,339
concatenated numbers in the wrong order

399
00:13:26,339 --> 00:13:28,110
we're still getting bad output that's

400
00:13:28,110 --> 00:13:31,740
luckily really easy to fix too so there

401
00:13:31,740 --> 00:13:33,360
we go now we got the two cases passing

402
00:13:33,360 --> 00:13:35,400
fixing the zeros really easy i can just

403
00:13:35,400 --> 00:13:39,959
add in a little extra thing here and you

404
00:13:39,959 --> 00:13:42,060
get the idea and i can make these fixes

405
00:13:42,060 --> 00:13:43,290
sort of feeling confident that I'm not

406
00:13:43,290 --> 00:13:44,490
breaking other stuff because all of

407
00:13:44,490 --> 00:13:46,020
these test cases are being react

408
00:13:46,020 --> 00:13:47,370
security continuously so they did

409
00:13:47,370 --> 00:13:48,870
something stupid here like making it

410
00:13:48,870 --> 00:13:50,850
always return 0 you immediately see the

411
00:13:50,850 --> 00:13:52,020
feedback that some of the other test

412
00:13:52,020 --> 00:13:55,680
cases had basically gone red and one

413
00:13:55,680 --> 00:13:57,089
thing this brings to mind is I think

414
00:13:57,089 --> 00:13:58,740
it's it's really important to sort of

415
00:13:58,740 --> 00:14:00,480
begin seriously thinking about blurring

416
00:14:00,480 --> 00:14:02,820
the line between these sort of one-off

417
00:14:02,820 --> 00:14:04,410
test values that we throw around when

418
00:14:04,410 --> 00:14:04,889
we're initial

419
00:14:04,889 --> 00:14:06,029
writing code and getting it up and

420
00:14:06,029 --> 00:14:08,670
running versus the more formal unit

421
00:14:08,670 --> 00:14:10,079
tests that we keep around in the long

422
00:14:10,079 --> 00:14:13,109
run and one way that we can do that is

423
00:14:13,109 --> 00:14:15,269
to actually you know keep track of the

424
00:14:15,269 --> 00:14:16,980
history of test values that you've been

425
00:14:16,980 --> 00:14:19,129
using like we do here and then actually

426
00:14:19,129 --> 00:14:21,989
generate an initial set of unit tests

427
00:14:21,989 --> 00:14:24,809
for you sort of scaffolding based on the

428
00:14:24,809 --> 00:14:26,009
testing that you've already been doing

429
00:14:26,009 --> 00:14:32,879
so

430
00:14:32,889 --> 00:14:35,269
so these are just a few ideas I think

431
00:14:35,269 --> 00:14:36,949
there's lots more really awesome ideas

432
00:14:36,949 --> 00:14:39,050
in this space and I'm really looking

433
00:14:39,050 --> 00:14:40,339
forward to the day that we can start

434
00:14:40,339 --> 00:14:42,079
using tools like this on on real world

435
00:14:42,079 --> 00:14:45,079
large-scale code bases so thanks and

436
00:14:45,079 --> 00:14:51,889
back to NJ it's totally on the wrong

437
00:14:51,889 --> 00:14:55,420
branch for that sorry about that

438
00:14:55,430 --> 00:14:58,070
yeah All Right see then get this thing

439
00:14:58,070 --> 00:15:07,060
back on their way ok so good ok cool so

440
00:15:07,060 --> 00:15:09,320
so I wanted to talk a little more about

441
00:15:09,320 --> 00:15:11,330
this idea of sort of live JavaScript so

442
00:15:11,330 --> 00:15:13,190
this is actually a live javascript

443
00:15:13,190 --> 00:15:14,750
editing and sort of you know being able

444
00:15:14,750 --> 00:15:16,130
to see results as you edit so how many

445
00:15:16,130 --> 00:15:18,200
people saw peter van disease talk a few

446
00:15:18,200 --> 00:15:21,440
hours ago ok bunch of people did you see

447
00:15:21,440 --> 00:15:25,190
you saw your own tacos and so you know

448
00:15:25,190 --> 00:15:26,660
he did this great job showing an

449
00:15:26,660 --> 00:15:29,089
approach to this you know there's been a

450
00:15:29,089 --> 00:15:31,070
lot of activity in this space and a few

451
00:15:31,070 --> 00:15:32,690
short of light table but those guys are

452
00:15:32,690 --> 00:15:34,220
looking into this I think some of the

453
00:15:34,220 --> 00:15:35,779
other sort of web IDs have been looking

454
00:15:35,779 --> 00:15:36,770
into this as well and it's something

455
00:15:36,770 --> 00:15:37,760
that obviously we've been thinking about

456
00:15:37,760 --> 00:15:41,149
to and I worked on this part and I

457
00:15:41,149 --> 00:15:42,320
didn't think you needed to see my face

458
00:15:42,320 --> 00:15:44,300
behind me on the screen so i didn't

459
00:15:44,300 --> 00:15:47,149
bother to picture myself in a bit so

460
00:15:47,149 --> 00:15:48,640
i've been think about this and sort of

461
00:15:48,640 --> 00:15:51,190
looking into an approach to doing this

462
00:15:51,190 --> 00:15:53,899
that you know sort of interesting but

463
00:15:53,899 --> 00:15:56,270
also a little bit weird and so this is

464
00:15:56,270 --> 00:15:58,010
definitely going to be maybe a little

465
00:15:58,010 --> 00:15:59,959
bit more grotesque than you might want

466
00:15:59,959 --> 00:16:01,970
to see but hopefully won't claw your

467
00:16:01,970 --> 00:16:05,570
eyes out all right so let me give a

468
00:16:05,570 --> 00:16:06,920
little example of what we have in

469
00:16:06,920 --> 00:16:08,779
brackets today and then i'll show how

470
00:16:08,779 --> 00:16:09,709
we're doing how we can do things

471
00:16:09,709 --> 00:16:12,050
differently so right now in brackets

472
00:16:12,050 --> 00:16:13,490
actually a switch different project here

473
00:16:13,490 --> 00:16:16,250
we have a very we have a notion of live

474
00:16:16,250 --> 00:16:18,529
development right so the idea is you can

475
00:16:18,529 --> 00:16:23,450
go into an application here or a website

476
00:16:23,450 --> 00:16:26,480
and i can open it in the browser in this

477
00:16:26,480 --> 00:16:28,400
live development mode and then for CSS

478
00:16:28,400 --> 00:16:29,690
we can do things like you know as you

479
00:16:29,690 --> 00:16:32,060
make edits the font size here right like

480
00:16:32,060 --> 00:16:33,980
as i'm editing the color you can see

481
00:16:33,980 --> 00:16:34,970
that it updates the color in the browser

482
00:16:34,970 --> 00:16:36,589
is on typing you know i can do things

483
00:16:36,589 --> 00:16:37,970
like it a padding or whatever right so

484
00:16:37,970 --> 00:16:39,440
this is sort of a it kind of really

485
00:16:39,440 --> 00:16:40,579
makes this really immediate feedback

486
00:16:40,579 --> 00:16:41,660
loop between what you're doing kind of

487
00:16:41,660 --> 00:16:43,940
like what what Peter was showing and it

488
00:16:43,940 --> 00:16:44,750
turns out this is actually pretty easy

489
00:16:44,750 --> 00:16:46,220
to do for CSS because it's declarative

490
00:16:46,220 --> 00:16:47,630
right and in fact the chrome what we're

491
00:16:47,630 --> 00:16:49,250
doing is we're connecting remotely to

492
00:16:49,250 --> 00:16:50,540
the chrome developer tools over a web

493
00:16:50,540 --> 00:16:52,040
socket and they were just pushing new

494
00:16:52,040 --> 00:16:54,140
CSS at it and it knows how to replace

495
00:16:54,140 --> 00:16:56,990
that stuff on the fly now the thing is

496
00:16:56,990 --> 00:16:57,890
if you think about doing that for

497
00:16:57,890 --> 00:16:59,000
javascript is actually a lot harder and

498
00:16:59,000 --> 00:17:00,230
again if you saw peter van der disease

499
00:17:00,230 --> 00:17:02,180
talk you talk about something changes

500
00:17:02,180 --> 00:17:04,160
there it turns out that chrome does some

501
00:17:04,160 --> 00:17:05,360
of that stuff already so if you push a

502
00:17:05,360 --> 00:17:06,679
whole new script at chrome it'll

503
00:17:06,679 --> 00:17:08,900
actually replace function definitions

504
00:17:08,900 --> 00:17:11,150
at least in some cases but it won't off

505
00:17:11,150 --> 00:17:12,680
so it won't always work and I'll talk

506
00:17:12,680 --> 00:17:14,750
about some of the edge cases as I do

507
00:17:14,750 --> 00:17:18,890
this next demo so let me actually switch

508
00:17:18,890 --> 00:17:20,210
to a different building brackets that

509
00:17:20,210 --> 00:17:21,530
has some different lab development stuff

510
00:17:21,530 --> 00:17:27,450
in it this is my prototype code here and

511
00:17:27,460 --> 00:17:31,640
it is okay so this is a really stupid

512
00:17:31,640 --> 00:17:34,250
app basically you click this button then

513
00:17:34,250 --> 00:17:35,330
every time you click the button it shows

514
00:17:35,330 --> 00:17:37,070
a new number or it increments a number

515
00:17:37,070 --> 00:17:39,980
and it prints out a message right so in

516
00:17:39,980 --> 00:17:41,630
this version of the live development

517
00:17:41,630 --> 00:17:42,920
mode what I've done is I basically taken

518
00:17:42,920 --> 00:17:44,930
the existing JavaScript file and I've

519
00:17:44,930 --> 00:17:46,430
instrumented it in such a way that we

520
00:17:46,430 --> 00:17:48,050
can do various kinds of live code

521
00:17:48,050 --> 00:17:50,120
replacement on it so again somewhat

522
00:17:50,120 --> 00:17:51,320
similar to some of this to Peter had

523
00:17:51,320 --> 00:17:53,570
there so for example I can go here and I

524
00:17:53,570 --> 00:17:56,240
can change this to new message and then

525
00:17:56,240 --> 00:17:57,680
without reloading the application or

526
00:17:57,680 --> 00:17:58,820
whatever just pushing a new function

527
00:17:58,820 --> 00:18:00,020
definition you can see that it's showing

528
00:18:00,020 --> 00:18:01,430
the new message here all right so I

529
00:18:01,430 --> 00:18:02,990
haven't reloaded the app IM say anything

530
00:18:02,990 --> 00:18:05,330
like that so that's pretty that's you

531
00:18:05,330 --> 00:18:08,240
know one thing you can do another thing

532
00:18:08,240 --> 00:18:09,350
you can do is you can actually add new

533
00:18:09,350 --> 00:18:10,910
functions here so let me go ahead and

534
00:18:10,910 --> 00:18:11,900
change this to list i want to do a

535
00:18:11,900 --> 00:18:13,220
little refactoring i do i make it so

536
00:18:13,220 --> 00:18:16,220
that I can you know add five every time

537
00:18:16,220 --> 00:18:17,840
instead of account and I'm going to do

538
00:18:17,840 --> 00:18:19,460
that by defining a new function so that

539
00:18:19,460 --> 00:18:21,670
function is going to take the amount and

540
00:18:21,670 --> 00:18:23,510
it's just going to add that to the count

541
00:18:23,510 --> 00:18:26,210
right okay so now I click on this button

542
00:18:26,210 --> 00:18:27,950
now you can see that it's now

543
00:18:27,950 --> 00:18:29,450
incrementing by five right and again I

544
00:18:29,450 --> 00:18:31,610
didn't reload the app I didn't save or

545
00:18:31,610 --> 00:18:35,510
anything like that so you know one thing

546
00:18:35,510 --> 00:18:37,100
that's interesting about this case that

547
00:18:37,100 --> 00:18:40,370
makes it kind of hard is that you know

548
00:18:40,370 --> 00:18:43,040
this new function i defined and the old

549
00:18:43,040 --> 00:18:44,420
function that it's referring to in the

550
00:18:44,420 --> 00:18:45,770
and the code that it's referring to

551
00:18:45,770 --> 00:18:47,300
before like that stuff was all in this

552
00:18:47,300 --> 00:18:48,770
module closure right so this there's

553
00:18:48,770 --> 00:18:50,510
this closure actor called my lager and

554
00:18:50,510 --> 00:18:53,480
that's what we actually use you know we

555
00:18:53,480 --> 00:18:55,400
put our functions in that to sort of

556
00:18:55,400 --> 00:18:57,320
hide the implementation details and then

557
00:18:57,320 --> 00:18:59,420
we call it from this click handler so I

558
00:18:59,420 --> 00:19:01,310
didn't actually reacts acute this module

559
00:19:01,310 --> 00:19:02,420
right because I didn't want to lose the

560
00:19:02,420 --> 00:19:04,100
existing modules state I didn't want to

561
00:19:04,100 --> 00:19:05,990
reset this count variable right we want

562
00:19:05,990 --> 00:19:07,220
to keep that state we just want to add a

563
00:19:07,220 --> 00:19:08,660
new function into the closure and we

564
00:19:08,660 --> 00:19:10,430
want that function to be able to see the

565
00:19:10,430 --> 00:19:11,870
current state of what was in that outer

566
00:19:11,870 --> 00:19:14,540
closure but if you don't reacts acute

567
00:19:14,540 --> 00:19:15,740
the outer function then how do you stuff

568
00:19:15,740 --> 00:19:17,810
something new into it right because this

569
00:19:17,810 --> 00:19:19,280
is JavaScript and these closures I mean

570
00:19:19,280 --> 00:19:20,360
that's why they're called closures right

571
00:19:20,360 --> 00:19:21,110
they're not they're supposed to be

572
00:19:21,110 --> 00:19:22,520
sealed not supposed to be able to poke

573
00:19:22,520 --> 00:19:24,200
new stuff into an existing closure and

574
00:19:24,200 --> 00:19:25,760
furthermore have the existing stuff in

575
00:19:25,760 --> 00:19:27,650
that closure be able to see new stuff

576
00:19:27,650 --> 00:19:28,940
that you add to it if that old stuff

577
00:19:28,940 --> 00:19:30,740
gets re-execute 'add without we executed

578
00:19:30,740 --> 00:19:32,720
the whole module to begin with right how

579
00:19:32,720 --> 00:19:37,550
does that work sorry was that you're

580
00:19:37,550 --> 00:19:40,520
like a rhetorical question there all

581
00:19:40,520 --> 00:19:42,860
right how does it work all right so let

582
00:19:42,860 --> 00:19:45,740
me go through celebs sorry all right so

583
00:19:45,740 --> 00:19:46,490
let's talk about the first function

584
00:19:46,490 --> 00:19:47,510
replacement case I'm not going to go

585
00:19:47,510 --> 00:19:48,500
into a lot of detail of this because

586
00:19:48,500 --> 00:19:49,910
it's actually quite similar to the

587
00:19:49,910 --> 00:19:52,070
technique I think that that Peter used

588
00:19:52,070 --> 00:19:54,470
in his talk so the basic idea is let's

589
00:19:54,470 --> 00:19:56,030
say I start with this code right this is

590
00:19:56,030 --> 00:19:57,620
my script that I type in to my editor

591
00:19:57,620 --> 00:19:59,510
right and says my fog you know

592
00:19:59,510 --> 00:20:01,640
console.log old message so like I

593
00:20:01,640 --> 00:20:04,070
mentioned before what we do is we before

594
00:20:04,070 --> 00:20:05,210
sending the script to the browser we

595
00:20:05,210 --> 00:20:06,950
actually rewrite it by basically putting

596
00:20:06,950 --> 00:20:08,540
in a chunk of extra code into every

597
00:20:08,540 --> 00:20:10,190
function that's in the original script

598
00:20:10,190 --> 00:20:12,110
file and that code looks like this so

599
00:20:12,110 --> 00:20:14,300
you start with the original code which

600
00:20:14,300 --> 00:20:16,940
is here right and then I basically say

601
00:20:16,940 --> 00:20:18,380
okay I'm going to create this table of

602
00:20:18,380 --> 00:20:20,300
function replacements and so before

603
00:20:20,300 --> 00:20:22,100
every time I enter this function instead

604
00:20:22,100 --> 00:20:23,210
of just executing the code I'd

605
00:20:23,210 --> 00:20:25,160
originally written I'm going to look

606
00:20:25,160 --> 00:20:27,080
into that table and see if there's a new

607
00:20:27,080 --> 00:20:28,160
definition and if there is i'm just

608
00:20:28,160 --> 00:20:30,500
going to eval it otherwise i'm going to

609
00:20:30,500 --> 00:20:31,940
use the original function definition and

610
00:20:31,940 --> 00:20:34,160
then once i have that i can just call

611
00:20:34,160 --> 00:20:35,750
funked out apply this common arguments

612
00:20:35,750 --> 00:20:37,040
in order to make it evaluate the same

613
00:20:37,040 --> 00:20:38,150
way the original function would have

614
00:20:38,150 --> 00:20:40,130
right so it's a pretty straightforward

615
00:20:40,130 --> 00:20:42,500
trick and as again Peter point out has

616
00:20:42,500 --> 00:20:43,640
talked one of the nice things about is

617
00:20:43,640 --> 00:20:45,290
that if you do this eval in the context

618
00:20:45,290 --> 00:20:46,910
of this function you get all the outer

619
00:20:46,910 --> 00:20:48,770
closure state right all that stuff stays

620
00:20:48,770 --> 00:20:51,890
preserved right and then when you want

621
00:20:51,890 --> 00:20:53,540
to send a new function over from the

622
00:20:53,540 --> 00:20:54,860
editor right so the user makes an edit

623
00:20:54,860 --> 00:20:56,750
and the editor you just send it over the

624
00:20:56,750 --> 00:20:59,060
browser and then it steps that back into

625
00:20:59,060 --> 00:21:02,810
this table here okay so the question

626
00:21:02,810 --> 00:21:04,190
though is how do we do this other case

627
00:21:04,190 --> 00:21:05,270
right how do we do this case where

628
00:21:05,270 --> 00:21:06,500
you've got a closure that you don't want

629
00:21:06,500 --> 00:21:07,970
to re-evaluate you don't want to rerun

630
00:21:07,970 --> 00:21:11,180
this closure and you have some stuff in

631
00:21:11,180 --> 00:21:12,770
it that gets you know basically defined

632
00:21:12,770 --> 00:21:13,910
when you first execute it right so i

633
00:21:13,910 --> 00:21:15,080
define a variable i define a function

634
00:21:15,080 --> 00:21:17,990
that logs that variable and then you

635
00:21:17,990 --> 00:21:20,000
know as the user I'm in my code editor

636
00:21:20,000 --> 00:21:21,530
and I go and make some edits and what I

637
00:21:21,530 --> 00:21:23,090
do is I basically introduce this new

638
00:21:23,090 --> 00:21:24,920
function that refers to a variable that

639
00:21:24,920 --> 00:21:27,020
was already in the closure and then also

640
00:21:27,020 --> 00:21:29,210
the existing function here I make a call

641
00:21:29,210 --> 00:21:31,250
that new function right so there's two

642
00:21:31,250 --> 00:21:32,750
things going on here right both the new

643
00:21:32,750 --> 00:21:34,010
function has to be able to see the stuff

644
00:21:34,010 --> 00:21:35,240
that was in the closure to begin with

645
00:21:35,240 --> 00:21:35,860
this

646
00:21:35,860 --> 00:21:37,330
your instance that already exists and

647
00:21:37,330 --> 00:21:39,730
the old function has to be able to call

648
00:21:39,730 --> 00:21:41,380
the new function after its content gets

649
00:21:41,380 --> 00:21:42,790
replaced using the technique we showed a

650
00:21:42,790 --> 00:21:44,650
little while ago right in the previous

651
00:21:44,650 --> 00:21:47,440
slide so long ago all right so how do we

652
00:21:47,440 --> 00:21:49,030
do it well we use the scrote a grotesque

653
00:21:49,030 --> 00:21:51,340
hack which is with and so most you

654
00:21:51,340 --> 00:21:52,450
probably know it with is and you know

655
00:21:52,450 --> 00:21:53,530
mostly that you're not supposed to use

656
00:21:53,530 --> 00:21:55,299
it but basically what it does right if

657
00:21:55,299 --> 00:21:57,400
you're not familiar is it was originally

658
00:21:57,400 --> 00:21:58,600
intend as this convenience feature in

659
00:21:58,600 --> 00:22:00,250
JavaScript where you basically say I

660
00:22:00,250 --> 00:22:01,690
have an object with a bunch of

661
00:22:01,690 --> 00:22:03,400
properties on it and like every time I

662
00:22:03,400 --> 00:22:04,360
refer to one of those properties i want

663
00:22:04,360 --> 00:22:05,980
to have say like some obtained and some

664
00:22:05,980 --> 00:22:08,260
object I HR whatever if you wrap stuff

665
00:22:08,260 --> 00:22:09,669
in a with block that refers to that

666
00:22:09,669 --> 00:22:11,320
object then what it does is basically

667
00:22:11,320 --> 00:22:12,700
takes all the properties that object and

668
00:22:12,700 --> 00:22:14,620
puts it in the local scope so now I can

669
00:22:14,620 --> 00:22:16,030
just say name and age instead of saying

670
00:22:16,030 --> 00:22:18,790
some obtains modulation so you know like

671
00:22:18,790 --> 00:22:19,720
i said it's this weird convenience

672
00:22:19,720 --> 00:22:20,860
feature nobody really uses it it's

673
00:22:20,860 --> 00:22:22,780
actually deprecated new versions of java

674
00:22:22,780 --> 00:22:26,020
script but and it's partly because it's

675
00:22:26,020 --> 00:22:27,130
just weird right that's like it's

676
00:22:27,130 --> 00:22:28,330
injecting all this random stuff at your

677
00:22:28,330 --> 00:22:29,620
local scope least ambiguities and things

678
00:22:29,620 --> 00:22:31,840
like that but this is actually the the

679
00:22:31,840 --> 00:22:32,980
feature that makes it so that we can

680
00:22:32,980 --> 00:22:34,600
actually use it to prototype this kind

681
00:22:34,600 --> 00:22:37,780
of injection of stuff into an existing

682
00:22:37,780 --> 00:22:40,690
closure so how does that work well again

683
00:22:40,690 --> 00:22:42,130
we'll start with the original code right

684
00:22:42,130 --> 00:22:43,809
which was there was this module and it

685
00:22:43,809 --> 00:22:46,540
had this variable and this function in

686
00:22:46,540 --> 00:22:48,160
it and so we're going to add a little

687
00:22:48,160 --> 00:22:49,450
more code to it what we're going to do

688
00:22:49,450 --> 00:22:50,410
is we're gonna start by just creating an

689
00:22:50,410 --> 00:22:51,580
empty object we're going to store it off

690
00:22:51,580 --> 00:22:52,840
in a table so we can refer to it later

691
00:22:52,840 --> 00:22:54,760
and then we're going to say with that

692
00:22:54,760 --> 00:22:56,860
empty object do this stuff we were going

693
00:22:56,860 --> 00:22:57,880
to define the things that we were

694
00:22:57,880 --> 00:22:59,020
originally going to define the module

695
00:22:59,020 --> 00:23:02,260
and then take all of the things that

696
00:23:02,260 --> 00:23:03,640
we're defined in that module and stuff

697
00:23:03,640 --> 00:23:06,460
them into this scope variable right into

698
00:23:06,460 --> 00:23:09,130
the scope object so because of the with

699
00:23:09,130 --> 00:23:11,020
here all those things essentially get

700
00:23:11,020 --> 00:23:12,790
readded into the local scope here but

701
00:23:12,790 --> 00:23:14,080
that's kind of a no operate that doesn't

702
00:23:14,080 --> 00:23:15,190
do anything because they were already in

703
00:23:15,190 --> 00:23:18,490
local scopes who cares but the trick is

704
00:23:18,490 --> 00:23:19,750
now when you want to go to find a new

705
00:23:19,750 --> 00:23:20,950
function and you wanted to see all that

706
00:23:20,950 --> 00:23:22,750
stuff and be seen by all that stuff you

707
00:23:22,750 --> 00:23:24,010
can just wrap it with the same scope

708
00:23:24,010 --> 00:23:25,929
object and then you can copy a pointer

709
00:23:25,929 --> 00:23:27,130
to that new function again into the

710
00:23:27,130 --> 00:23:30,130
scope object right and so now when the

711
00:23:30,130 --> 00:23:32,320
new function executes it sees all of the

712
00:23:32,320 --> 00:23:33,730
local stuff that had previously been

713
00:23:33,730 --> 00:23:35,320
defined in the module because it got

714
00:23:35,320 --> 00:23:36,760
copied over into the scope variable

715
00:23:36,760 --> 00:23:39,970
right and then if you re-enter this

716
00:23:39,970 --> 00:23:41,500
internal function right there's my funk

717
00:23:41,500 --> 00:23:42,910
right this is the same thing that like

718
00:23:42,910 --> 00:23:44,020
that logger function in the original

719
00:23:44,020 --> 00:23:47,740
example right then it can actually see

720
00:23:47,740 --> 00:23:49,810
the new function because it got added to

721
00:23:49,810 --> 00:23:52,060
the same scope so basically what gives

722
00:23:52,060 --> 00:23:54,760
you as a way of exposing and consuming

723
00:23:54,760 --> 00:23:56,620
the lexical scope you know some random

724
00:23:56,620 --> 00:23:58,450
place in your code exposing it as a

725
00:23:58,450 --> 00:24:00,580
dynamic object dynamic scope that you

726
00:24:00,580 --> 00:24:03,090
can then poke out and mess with right

727
00:24:03,090 --> 00:24:05,710
alright so big deal like why why would

728
00:24:05,710 --> 00:24:06,880
you even want to do this right like it

729
00:24:06,880 --> 00:24:10,210
gets weird and confusing and so I think

730
00:24:10,210 --> 00:24:11,890
the reason that I'm interested in it is

731
00:24:11,890 --> 00:24:13,600
because you know if you again if you

732
00:24:13,600 --> 00:24:14,650
went to Peter sake point out that

733
00:24:14,650 --> 00:24:16,600
there's a lot of cases where it just

734
00:24:16,600 --> 00:24:18,340
gets hard to do live JavaScript

735
00:24:18,340 --> 00:24:21,220
development well right like it's one

736
00:24:21,220 --> 00:24:22,540
thing to replace the content of an

737
00:24:22,540 --> 00:24:23,620
existing function that just going to get

738
00:24:23,620 --> 00:24:25,210
executed again you know like Peter was

739
00:24:25,210 --> 00:24:26,350
saying or if you if you're in like an

740
00:24:26,350 --> 00:24:27,640
animate loop or something or you're just

741
00:24:27,640 --> 00:24:29,440
continuously executing it if you just

742
00:24:29,440 --> 00:24:30,640
add a bit of imperative code somewhere

743
00:24:30,640 --> 00:24:31,900
in a scope where you don't want to

744
00:24:31,900 --> 00:24:33,730
re-execute that whole thing again you

745
00:24:33,730 --> 00:24:34,960
know it's not that easy to do and so

746
00:24:34,960 --> 00:24:36,430
there's just a bunch of these edge cases

747
00:24:36,430 --> 00:24:37,780
and things that I think are difficult so

748
00:24:37,780 --> 00:24:39,370
what we really want to do is sort of

749
00:24:39,370 --> 00:24:40,830
prototype this stuff as much as we can

750
00:24:40,830 --> 00:24:43,000
using pure JavaScript and using whatever

751
00:24:43,000 --> 00:24:44,650
hacks we need to but ultimately I think

752
00:24:44,650 --> 00:24:46,630
what we really want to do is lobby the

753
00:24:46,630 --> 00:24:49,180
vm makers you know v8 and JavaScript

754
00:24:49,180 --> 00:24:51,550
core and spider makino them to basically

755
00:24:51,550 --> 00:24:53,320
add more support for this kind of live

756
00:24:53,320 --> 00:24:54,460
development into the vm you know the

757
00:24:54,460 --> 00:24:56,170
same way that the Java VM is added you

758
00:24:56,170 --> 00:24:57,310
know stuff like jaco replacing and

759
00:24:57,310 --> 00:24:58,660
things like that and again you know some

760
00:24:58,660 --> 00:24:59,680
of them are already starting to do this

761
00:24:59,680 --> 00:25:00,940
like there's a little bit of this and v8

762
00:25:00,940 --> 00:25:02,650
already but if we can get them if we can

763
00:25:02,650 --> 00:25:03,640
figure out like what are the right

764
00:25:03,640 --> 00:25:05,140
primitives that we need in the vm to

765
00:25:05,140 --> 00:25:06,520
support the style of live development

766
00:25:06,520 --> 00:25:08,080
then you know we could get that stuff

767
00:25:08,080 --> 00:25:09,160
into the vm and then all of the

768
00:25:09,160 --> 00:25:10,720
schooling you know those brackets or

769
00:25:10,720 --> 00:25:12,160
light table or whatever can take

770
00:25:12,160 --> 00:25:16,270
advantage of it so let's say either okay

771
00:25:16,270 --> 00:25:18,430
that was pretty nerdy hey it's jase

772
00:25:18,430 --> 00:25:20,620
girlfriend so let me skip to one more

773
00:25:20,620 --> 00:25:22,060
thing which is well it's a different

774
00:25:22,060 --> 00:25:23,500
kind of nerdy anyway and I know we're

775
00:25:23,500 --> 00:25:25,030
running low on time so I'll try to get

776
00:25:25,030 --> 00:25:26,800
through this quick so thus last time was

777
00:25:26,800 --> 00:25:27,940
called response and this is not actually

778
00:25:27,940 --> 00:25:29,050
bout JavaScript development this is

779
00:25:29,050 --> 00:25:30,670
about CSS development it was done by

780
00:25:30,670 --> 00:25:32,500
this guy League brim below who works at

781
00:25:32,500 --> 00:25:36,460
Adobe and so what I'm going to do real

782
00:25:36,460 --> 00:25:38,140
quick is again for context i'm going to

783
00:25:38,140 --> 00:25:38,920
show you some features that are already

784
00:25:38,920 --> 00:25:40,120
in brackets and then show you how he's

785
00:25:40,120 --> 00:25:41,920
building on top of that to provide an

786
00:25:41,920 --> 00:25:45,340
experience for a responsive design so if

787
00:25:45,340 --> 00:25:48,400
i go back to my example file here one of

788
00:25:48,400 --> 00:25:49,480
the things that we have when these

789
00:25:49,480 --> 00:25:50,500
features that we have in brackets is

790
00:25:50,500 --> 00:25:51,820
this idea of inline editing so the idea

791
00:25:51,820 --> 00:25:55,960
is that if i am in like an HTML tag for

792
00:25:55,960 --> 00:25:57,340
example and i want to see the CSS

793
00:25:57,340 --> 00:25:58,990
associated with that tag is everything

794
00:25:58,990 --> 00:26:00,460
to like go and dig around my CSS file

795
00:26:00,460 --> 00:26:01,960
for it I can just hit this quick edit

796
00:26:01,960 --> 00:26:03,290
key and what it does is it actually

797
00:26:03,290 --> 00:26:05,480
is open The Associated CSS rule right in

798
00:26:05,480 --> 00:26:06,620
line there so I can just tweak it and

799
00:26:06,620 --> 00:26:08,000
then get out so I can't really get into

800
00:26:08,000 --> 00:26:09,560
this sort of mode if I'm just like in my

801
00:26:09,560 --> 00:26:11,570
same file and just editing editing stuff

802
00:26:11,570 --> 00:26:13,430
from the CSS and then I can pop out and

803
00:26:13,430 --> 00:26:15,200
we use this idea of inline editing all

804
00:26:15,200 --> 00:26:17,720
over the place like we use it for you

805
00:26:17,720 --> 00:26:19,190
know for things like colors so like if I

806
00:26:19,190 --> 00:26:20,480
the color here I can pop them in an

807
00:26:20,480 --> 00:26:22,910
online editor for the color if you're on

808
00:26:22,910 --> 00:26:25,250
a CSS property you can get docs from the

809
00:26:25,250 --> 00:26:27,110
web platform docks project and see it in

810
00:26:27,110 --> 00:26:28,130
line and stuff like that so it's just a

811
00:26:28,130 --> 00:26:30,500
sort of you I idea that we had for

812
00:26:30,500 --> 00:26:32,420
making it just kind of quicker to work

813
00:26:32,420 --> 00:26:33,700
back and forth between different context

814
00:26:33,700 --> 00:26:35,990
so Italy did was he took this idea and

815
00:26:35,990 --> 00:26:38,930
he added to it to enable some responsive

816
00:26:38,930 --> 00:26:40,070
design stuff and then let's talk about

817
00:26:40,070 --> 00:26:42,710
what that means so I'm going to open his

818
00:26:42,710 --> 00:26:45,350
responsive design extension here errors

819
00:26:45,350 --> 00:26:47,690
totally fine and it's not a bug in my in

820
00:26:47,690 --> 00:26:51,680
my demo and so the idea here in the the

821
00:26:51,680 --> 00:26:53,480
concept behind this is so you know when

822
00:26:53,480 --> 00:26:55,390
you're doing responsive designs stuff

823
00:26:55,390 --> 00:26:57,470
you know we've got we're starting to

824
00:26:57,470 --> 00:26:58,820
work on things like tools for designers

825
00:26:58,820 --> 00:27:00,320
to make it easier for them to to do this

826
00:27:00,320 --> 00:27:02,060
stuff we've got this project called

827
00:27:02,060 --> 00:27:04,670
reflow that we've started up for that

828
00:27:04,670 --> 00:27:06,380
but if you're a coder right primarily

829
00:27:06,380 --> 00:27:07,220
what you're doing is you're living in

830
00:27:07,220 --> 00:27:08,540
your code all day but you might want a

831
00:27:08,540 --> 00:27:09,890
little help with sort of visualizing

832
00:27:09,890 --> 00:27:10,970
what the results of your responsive

833
00:27:10,970 --> 00:27:13,370
design stuff is going to be so we built

834
00:27:13,370 --> 00:27:15,410
this extension called response and it's

835
00:27:15,410 --> 00:27:16,730
built as an extension of bracket so it's

836
00:27:16,730 --> 00:27:18,140
you know I'll build again an HTML CSS

837
00:27:18,140 --> 00:27:20,030
JavaScript I basically way does it gives

838
00:27:20,030 --> 00:27:22,730
you this preview of your website here so

839
00:27:22,730 --> 00:27:23,600
it kind of splits open the brackets

840
00:27:23,600 --> 00:27:24,890
window and puts a bunch of stuff in here

841
00:27:24,890 --> 00:27:26,450
and what lets you do essentially as

842
00:27:26,450 --> 00:27:28,010
visually defined media query breakpoints

843
00:27:28,010 --> 00:27:29,240
and then give you a really easy way to

844
00:27:29,240 --> 00:27:31,460
modify them in code so like here for

845
00:27:31,460 --> 00:27:34,460
example when I get to about this this

846
00:27:34,460 --> 00:27:37,430
size maybe I want to actually start

847
00:27:37,430 --> 00:27:39,530
having the text be fluid so I can create

848
00:27:39,530 --> 00:27:41,930
a media query break point and then I can

849
00:27:41,930 --> 00:27:44,210
use this inspect mode to select an item

850
00:27:44,210 --> 00:27:47,120
in the HTML and let's see if this

851
00:27:47,120 --> 00:27:48,110
problem is that going to work as the

852
00:27:48,110 --> 00:27:49,910
font size okay but you can see that it's

853
00:27:49,910 --> 00:27:52,940
selected this associated container div

854
00:27:52,940 --> 00:27:54,890
in my HTML here and we can use that same

855
00:27:54,890 --> 00:27:57,200
quick edit gesture to see the associated

856
00:27:57,200 --> 00:28:00,200
CSS styles but we're in a different mode

857
00:28:00,200 --> 00:28:01,520
now where this is associated with the

858
00:28:01,520 --> 00:28:03,770
current media query so if I now make a

859
00:28:03,770 --> 00:28:06,080
change here to the width it only applies

860
00:28:06,080 --> 00:28:08,000
to that media query so if I make this

861
00:28:08,000 --> 00:28:10,490
back bigger again if I make this bigger

862
00:28:10,490 --> 00:28:11,780
again you can see it's fixed width again

863
00:28:11,780 --> 00:28:13,220
out here and then inside it it's ninety

864
00:28:13,220 --> 00:28:14,690
percent right so it's basically letting

865
00:28:14,690 --> 00:28:16,400
me make overrides in an

866
00:28:16,400 --> 00:28:18,260
media query you know I could do the same

867
00:28:18,260 --> 00:28:20,510
thing here for this this grid you know I

868
00:28:20,510 --> 00:28:22,070
want this stuff to not be so spread out

869
00:28:22,070 --> 00:28:27,800
in smaller and smaller widths and so I

870
00:28:27,800 --> 00:28:29,210
can go here and I can make that fluid

871
00:28:29,210 --> 00:28:31,910
with right and so now that works as I

872
00:28:31,910 --> 00:28:34,070
resize the browser window and then you

873
00:28:34,070 --> 00:28:35,120
know I could go ahead and like make

874
00:28:35,120 --> 00:28:36,770
another media query here for you know

875
00:28:36,770 --> 00:28:38,180
this stuff is starting to overflow so

876
00:28:38,180 --> 00:28:40,190
maybe I want to create a new media query

877
00:28:40,190 --> 00:28:42,830
break point and then edit that to do

878
00:28:42,830 --> 00:28:45,920
display none ok so again you know this

879
00:28:45,920 --> 00:28:46,880
is necessarily what you do it's not

880
00:28:46,880 --> 00:28:48,260
mobile first and it's not best practice

881
00:28:48,260 --> 00:28:50,300
in my row but gives you the idea of what

882
00:28:50,300 --> 00:28:54,020
we're what the response plugin is doing

883
00:28:54,020 --> 00:28:55,880
and what's been doing all along as I've

884
00:28:55,880 --> 00:28:57,050
been making these edits to what looks

885
00:28:57,050 --> 00:28:58,760
like my original CSS files it actually

886
00:28:58,760 --> 00:29:01,010
wasn't editing the original CSS what it

887
00:29:01,010 --> 00:29:02,600
was doing was putting those overrides

888
00:29:02,600 --> 00:29:05,030
into media query break points that were

889
00:29:05,030 --> 00:29:07,580
/ these different break points that I

890
00:29:07,580 --> 00:29:09,470
created visually so this is a kind of

891
00:29:09,470 --> 00:29:11,030
thing where you know we don't want to

892
00:29:11,030 --> 00:29:12,080
build tooling that like takes over your

893
00:29:12,080 --> 00:29:13,160
code and spits out a bunch of stuff that

894
00:29:13,160 --> 00:29:14,660
you know I understand it's really about

895
00:29:14,660 --> 00:29:16,160
kind of giving you a sort of small

896
00:29:16,160 --> 00:29:17,900
amount of tooling that can aid your

897
00:29:17,900 --> 00:29:19,370
existing coding workflow without sort of

898
00:29:19,370 --> 00:29:21,460
taking it over that's the idea with this

899
00:29:21,460 --> 00:29:23,930
all right so i think i have like maybe

900
00:29:23,930 --> 00:29:25,700
three more minutes so we just go i'll

901
00:29:25,700 --> 00:29:27,830
wrap up quickly so i was four different

902
00:29:27,830 --> 00:29:28,940
demos of some pretty different things

903
00:29:28,940 --> 00:29:30,470
got some JavaScript development some CSS

904
00:29:30,470 --> 00:29:32,870
development and you know again you know

905
00:29:32,870 --> 00:29:35,270
the idea here is to see if if any of

906
00:29:35,270 --> 00:29:36,620
these ideas resonate with you guys if

907
00:29:36,620 --> 00:29:38,780
they're things you'd like to see or if

908
00:29:38,780 --> 00:29:40,040
you have other ideas that would be cool

909
00:29:40,040 --> 00:29:43,910
I will make a plug for you know brackets

910
00:29:43,910 --> 00:29:47,060
as a base for this stuff when we started

911
00:29:47,060 --> 00:29:48,410
building brackets as a code editor we

912
00:29:48,410 --> 00:29:49,940
decided to build it in HTML and

913
00:29:49,940 --> 00:29:51,560
JavaScript it was kind of a lark it was

914
00:29:51,560 --> 00:29:52,760
sort of like hey let's see if we can do

915
00:29:52,760 --> 00:29:54,500
this right and we also have this thought

916
00:29:54,500 --> 00:29:56,570
that it's great for a tool to be

917
00:29:56,570 --> 00:29:58,010
implemented in the same language that

918
00:29:58,010 --> 00:29:59,300
its users use right so that if you're a

919
00:29:59,300 --> 00:30:01,190
person who uses it you can also hack on

920
00:30:01,190 --> 00:30:02,420
it and you can build extensions too and

921
00:30:02,420 --> 00:30:04,580
all that kind of stuff but then there is

922
00:30:04,580 --> 00:30:05,870
this more subtle point we realized kind

923
00:30:05,870 --> 00:30:07,400
of later on as we started finding people

924
00:30:07,400 --> 00:30:08,570
building more and more interesting

925
00:30:08,570 --> 00:30:09,890
extensions on top of it that we hadn't

926
00:30:09,890 --> 00:30:10,850
even ever thought of before like that

927
00:30:10,850 --> 00:30:12,230
response extension and sore came out of

928
00:30:12,230 --> 00:30:15,050
the blue one of these days and it's

929
00:30:15,050 --> 00:30:16,310
really that you know by analogy I don't

930
00:30:16,310 --> 00:30:17,390
know how many of you have used Eclipse

931
00:30:17,390 --> 00:30:19,910
so may use Eclipse right so it says Java

932
00:30:19,910 --> 00:30:21,830
IDE and it's built for java developers

933
00:30:21,830 --> 00:30:23,330
have some of that same flavor and they

934
00:30:23,330 --> 00:30:24,350
spent a bunch of time thinking about

935
00:30:24,350 --> 00:30:26,000
extensibility right so I mean it's very

936
00:30:26,000 --> 00:30:28,130
extensible tool but at the end of the

937
00:30:28,130 --> 00:30:29,390
day they were fundamentally hobbled by

938
00:30:29,390 --> 00:30:30,020
the fact that

939
00:30:30,020 --> 00:30:31,880
was a non declarative UI stack right

940
00:30:31,880 --> 00:30:34,400
they had to think of an API that would

941
00:30:34,400 --> 00:30:37,160
explicitly let you do certain things so

942
00:30:37,160 --> 00:30:38,150
if you wanted to add an icon to the

943
00:30:38,150 --> 00:30:39,350
toolbar you want to add a new panel

944
00:30:39,350 --> 00:30:40,670
right they had to think up an API for

945
00:30:40,670 --> 00:30:42,350
that but in the web stack you don't have

946
00:30:42,350 --> 00:30:43,670
to do that it's like that guy you know

947
00:30:43,670 --> 00:30:44,660
the guy here with that response thing

948
00:30:44,660 --> 00:30:45,950
like he just hacked a bunch of stuff

949
00:30:45,950 --> 00:30:47,360
into the DOM and it just worked right we

950
00:30:47,360 --> 00:30:48,530
didn't have to give him permission we

951
00:30:48,530 --> 00:30:50,360
didn't have to figure out what the right

952
00:30:50,360 --> 00:30:51,560
API was going to be before he did it now

953
00:30:51,560 --> 00:30:52,880
that's not saying that you never need

954
00:30:52,880 --> 00:30:54,080
clean api's and you never have to think

955
00:30:54,080 --> 00:30:55,430
about accessibility we thought about it

956
00:30:55,430 --> 00:30:57,830
a lot too but our philosophy is really

957
00:30:57,830 --> 00:30:59,990
you know put the pads where people want

958
00:30:59,990 --> 00:31:02,420
to walk as opposed to like let's try to

959
00:31:02,420 --> 00:31:03,560
figure out every possible thing so they

960
00:31:03,560 --> 00:31:05,600
might want to do it in advance and so we

961
00:31:05,600 --> 00:31:07,040
found that at least we think that makes

962
00:31:07,040 --> 00:31:08,420
brackets a really good sandbox for this

963
00:31:08,420 --> 00:31:10,280
kind of experimentation with developer

964
00:31:10,280 --> 00:31:11,660
tooling so if you have ideas for

965
00:31:11,660 --> 00:31:12,830
developer tooling that you want to try

966
00:31:12,830 --> 00:31:14,330
out you know the context of a code

967
00:31:14,330 --> 00:31:15,800
editor we'd like to invite you to

968
00:31:15,800 --> 00:31:17,960
pulling the sandbox too so we're

969
00:31:17,960 --> 00:31:20,180
github.com / adobe / brackets that's the

970
00:31:20,180 --> 00:31:21,830
main github repo if you just want to

971
00:31:21,830 --> 00:31:22,910
download people to try it out you can

972
00:31:22,910 --> 00:31:25,010
get that at download brackets taio and

973
00:31:25,010 --> 00:31:27,110
these slides are online at this URL here

974
00:31:27,110 --> 00:31:30,110
and i am NJ and not web safe and that's

975
00:31:30,110 --> 00:31:38,649
my talk thank you

976
00:31:38,659 --> 00:31:41,809
oh and i forgot to say if anybody wants

977
00:31:41,809 --> 00:31:43,249
to come up i have some bracket 3d

978
00:31:43,249 --> 00:31:45,109
printed brackets logos for you for

979
00:31:45,109 --> 00:31:47,419
people who want them i think we're kind

980
00:31:47,419 --> 00:31:48,409
of running over so i don't know if we

981
00:31:48,409 --> 00:31:51,259
should take questions or others a break

982
00:31:51,259 --> 00:31:53,509
ok these are there any questions while

983
00:31:53,509 --> 00:32:01,249
I'm here yeah the live development right

984
00:32:01,249 --> 00:32:02,899
now yeah that only works with come

985
00:32:02,899 --> 00:32:03,649
because we're talking to the chrome

986
00:32:03,649 --> 00:32:05,539
debugging tools currently but obviously

987
00:32:05,539 --> 00:32:06,590
you know Mozilla is starting to have

988
00:32:06,590 --> 00:32:08,090
they have the remote debugging protocol

989
00:32:08,090 --> 00:32:09,019
and things like that so we're planning

990
00:32:09,019 --> 00:32:20,210
to hook that up as well uh-huh yep yeah

991
00:32:20,210 --> 00:32:21,559
we haven't we haven't started working on

992
00:32:21,559 --> 00:32:23,029
officially we've got some prototypes I

993
00:32:23,029 --> 00:32:24,049
mean the main thing is where do you want

994
00:32:24,049 --> 00:32:25,190
your code to be stored right it has to

995
00:32:25,190 --> 00:32:26,720
be instant back again so we've got like

996
00:32:26,720 --> 00:32:28,070
a prototype of it running against

997
00:32:28,070 --> 00:32:29,330
dropbox as a back and just sort of as a

998
00:32:29,330 --> 00:32:30,830
proof of concept the intention is

999
00:32:30,830 --> 00:32:32,299
eventually will basically abstract it so

1000
00:32:32,299 --> 00:32:33,320
you could have any one of a number of

1001
00:32:33,320 --> 00:32:35,359
backends but we haven't done the work to

1002
00:32:35,359 --> 00:32:37,009
actually make that official yet so we're

1003
00:32:37,009 --> 00:32:38,509
hoping to do that I don't know can we

1004
00:32:38,509 --> 00:32:41,059
say sorry by the hoping by the end of

1005
00:32:41,059 --> 00:32:51,440
the year huh

1006
00:32:51,450 --> 00:32:54,070
yeah no yeah so the question was could

1007
00:32:54,070 --> 00:32:55,900
we support source maps for these things

1008
00:32:55,900 --> 00:32:56,740
where we're doing all this crazy

1009
00:32:56,740 --> 00:32:58,120
instrumentation of JavaScript we

1010
00:32:58,120 --> 00:32:59,320
certainly could like I said this is just

1011
00:32:59,320 --> 00:33:01,150
kind of a hacked prototype it's not sort

1012
00:33:01,150 --> 00:33:02,590
of cleanly packaged up the same way that

1013
00:33:02,590 --> 00:33:04,840
Peters stuff was so but yeah that's

1014
00:33:04,840 --> 00:33:05,710
definitely what you'd want to do if

1015
00:33:05,710 --> 00:33:06,340
you're going to go with this

1016
00:33:06,340 --> 00:33:09,150
instrumentation based approach for sure

1017
00:33:09,150 --> 00:33:21,140
any questions oh yeah

1018
00:33:21,150 --> 00:33:27,700
mm-hmm

1019
00:33:27,710 --> 00:33:29,270
yeah now we're definitely up to do that

1020
00:33:29,270 --> 00:33:30,260
so for which part were you talking about

1021
00:33:30,260 --> 00:33:31,490
we talked about like the live JavaScript

1022
00:33:31,490 --> 00:33:32,600
replacement stuff or were you talking

1023
00:33:32,600 --> 00:33:34,460
about some of the other stuff yeah i

1024
00:33:34,460 --> 00:33:36,230
mean that's that's the other thing I was

1025
00:33:36,230 --> 00:33:37,909
right is that basically when you deal

1026
00:33:37,909 --> 00:33:39,140
with real-world JavaScript you have all

1027
00:33:39,140 --> 00:33:40,100
of these things you have to worry about

1028
00:33:40,100 --> 00:33:41,299
right you have to worry about people

1029
00:33:41,299 --> 00:33:42,350
putting stuff in modules and

1030
00:33:42,350 --> 00:33:43,520
asynchronous loading stuff like that so

1031
00:33:43,520 --> 00:33:44,720
like I said that's part of the hard

1032
00:33:44,720 --> 00:33:45,770
problems that we have to think this is

1033
00:33:45,770 --> 00:33:47,929
just like the first like tiny slices but

1034
00:33:47,929 --> 00:33:48,860
we would have to think through to get

1035
00:33:48,860 --> 00:33:50,149
this to work in kind of a real world

1036
00:33:50,149 --> 00:33:51,110
production environment where you

1037
00:33:51,110 --> 00:33:55,779
actually want it to work anything else

