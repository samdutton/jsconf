1
00:00:10,190 --> 00:00:13,890

I'm Kyle Simpson and I go by getify you

2
00:00:13,890 --> 00:00:16,500
probably know me better by that way so

3
00:00:16,500 --> 00:00:17,460
this title

4
00:00:17,460 --> 00:00:21,029
JSU I not only was it because I like the

5
00:00:21,029 --> 00:00:22,800
matrix but also this has kind of a

6
00:00:22,800 --> 00:00:24,840
hidden meeting what we're going to talk

7
00:00:24,840 --> 00:00:26,430
about today this JavaScript UI

8
00:00:26,430 --> 00:00:29,399
architecture stuff it is it exists in

9
00:00:29,399 --> 00:00:31,619
every single web application but it's

10
00:00:31,619 --> 00:00:33,239
kind of hidden most people don't think

11
00:00:33,239 --> 00:00:34,620
about it we don't give it a name we

12
00:00:34,620 --> 00:00:37,530
don't talk about it but it is oftentimes

13
00:00:37,530 --> 00:00:40,200
the biggest pain point in in application

14
00:00:40,200 --> 00:00:43,980
so that's kind of the backstory

15
00:00:43,980 --> 00:00:45,240
come on now you were just working a

16
00:00:45,240 --> 00:00:49,830
second ago still working all right well

17
00:00:49,830 --> 00:00:50,910
I guess I'm not gonna be able to use it

18
00:00:50,910 --> 00:00:54,840
all right so dude where's my you re

19
00:00:54,840 --> 00:00:56,610
architecture that's the title of today's

20
00:00:56,610 --> 00:00:59,130
talk so what the heck is UI architecture

21
00:00:59,130 --> 00:01:01,380
I mean all the stuff that it takes to

22
00:01:01,380 --> 00:01:04,019
process package deliver get together

23
00:01:04,019 --> 00:01:06,119
your presentation layer and get it up to

24
00:01:06,119 --> 00:01:09,509
the browser from the server this

25
00:01:09,509 --> 00:01:12,479
involves things like templating URL

26
00:01:12,479 --> 00:01:15,569
routing data validation data formatting

27
00:01:15,569 --> 00:01:19,109
Ajax even stuff like caching I didn't

28
00:01:19,109 --> 00:01:20,880
put that on the slide all those things

29
00:01:20,880 --> 00:01:25,380
are part of what I call the middle end

30
00:01:25,380 --> 00:01:27,659
so this is in between the front end and

31
00:01:27,659 --> 00:01:32,420
the back end so let's take a look at

32
00:01:32,420 --> 00:01:35,609
existing web application architecture

33
00:01:35,609 --> 00:01:36,929
diagram I just kind of whip this

34
00:01:36,929 --> 00:01:38,999
together this is by no means definitive

35
00:01:38,999 --> 00:01:40,679
but this is kind of representative of

36
00:01:40,679 --> 00:01:41,999
how a lot of web application

37
00:01:41,999 --> 00:01:44,069
architectures work so some things to

38
00:01:44,069 --> 00:01:47,100
point out here real quick we've got the

39
00:01:47,100 --> 00:01:48,990
client browser over here with the

40
00:01:48,990 --> 00:01:51,090
javascript in the application and it's

41
00:01:51,090 --> 00:01:53,579
very very separate and very very siloed

42
00:01:53,579 --> 00:01:55,200
from the rest of what's going on in the

43
00:01:55,200 --> 00:01:58,049
web application the typical pattern here

44
00:01:58,049 --> 00:02:01,109
is that this JSF Legation re implements

45
00:02:01,109 --> 00:02:03,630
to some degree and sometimes to a great

46
00:02:03,630 --> 00:02:05,639
degree the stuff that's going on down

47
00:02:05,639 --> 00:02:08,640
here so we've got two different views of

48
00:02:08,640 --> 00:02:10,229
what our application are it's what's

49
00:02:10,229 --> 00:02:11,400
happening in the browser and what's

50
00:02:11,400 --> 00:02:13,560
happening on the server this is kind of

51
00:02:13,560 --> 00:02:16,590
a way to visualize the typical MVC stack

52
00:02:16,590 --> 00:02:18,780
we've got a web server layer sitting on

53
00:02:18,780 --> 00:02:19,260
top

54
00:02:19,260 --> 00:02:22,560
as I is this is Apache Ingenix even if

55
00:02:22,560 --> 00:02:25,110
you're really clever this is no js' and

56
00:02:25,110 --> 00:02:26,700
then we've got some control or an

57
00:02:26,700 --> 00:02:28,409
application logic stuff if you're using

58
00:02:28,409 --> 00:02:30,629
net Java whatever platform you can

59
00:02:30,629 --> 00:02:32,700
insert this is entirely agnostic of

60
00:02:32,700 --> 00:02:34,799
which technology you're choosing

61
00:02:34,799 --> 00:02:36,510
but this layer is the one that sits

62
00:02:36,510 --> 00:02:38,700
there it intercepts the request from the

63
00:02:38,700 --> 00:02:40,170
web server and it controls everything

64
00:02:40,170 --> 00:02:42,420
that's going to happen then down here at

65
00:02:42,420 --> 00:02:43,709
the bottom we have the view the

66
00:02:43,709 --> 00:02:45,420
templating engine the things that put

67
00:02:45,420 --> 00:02:46,709
together what we're going to see the

68
00:02:46,709 --> 00:02:48,629
presentation layer and sitting in

69
00:02:48,629 --> 00:02:50,129
between them the model and it

70
00:02:50,129 --> 00:02:54,480
communicates with our database so what

71
00:02:54,480 --> 00:02:56,250
is my motivation for mucking with this

72
00:02:56,250 --> 00:02:58,290
because this pattern has been around for

73
00:02:58,290 --> 00:02:58,889
a long time

74
00:02:58,889 --> 00:03:01,319
number one performance I'm a huge

75
00:03:01,319 --> 00:03:03,060
performance geek a lot of my projects

76
00:03:03,060 --> 00:03:05,609
are about that lab j/s and other things

77
00:03:05,609 --> 00:03:08,280
like that so my biggest concern is that

78
00:03:08,280 --> 00:03:10,109
I go to companies companies that I work

79
00:03:10,109 --> 00:03:11,549
out or companies that have asked me to

80
00:03:11,549 --> 00:03:13,620
consult on these topics and I try to

81
00:03:13,620 --> 00:03:16,200
convince them that what they need to do

82
00:03:16,200 --> 00:03:19,319
is just do something crazy like optimize

83
00:03:19,319 --> 00:03:21,599
the mark-up that their application sends

84
00:03:21,599 --> 00:03:23,190
out to the browser not too complicated

85
00:03:23,190 --> 00:03:25,859
right and what's the universal response

86
00:03:25,859 --> 00:03:29,160
I get back oh I can't change that markup

87
00:03:29,160 --> 00:03:31,410
there's some compiled widget way down

88
00:03:31,410 --> 00:03:33,449
deep inside of my architecture that does

89
00:03:33,449 --> 00:03:35,579
that for me and I would never dream of

90
00:03:35,579 --> 00:03:37,769
changing the way that grid control works

91
00:03:37,769 --> 00:03:40,230
it surely is in control of that markup

92
00:03:40,230 --> 00:03:41,579
this sucks

93
00:03:41,579 --> 00:03:43,980
this really really sucks even simple

94
00:03:43,980 --> 00:03:45,569
things like hey can you put a different

95
00:03:45,569 --> 00:03:47,370
doctype on your page so that you can

96
00:03:47,370 --> 00:03:49,709
have some standards to your web

97
00:03:49,709 --> 00:03:51,840
application no I can't control that

98
00:03:51,840 --> 00:03:54,359
stuff so performance sucks when you have

99
00:03:54,359 --> 00:03:55,949
no control over what's happening

100
00:03:55,949 --> 00:03:58,049
we need more control so that's the first

101
00:03:58,049 --> 00:04:01,079
motivation the second one MVC now I'm

102
00:04:01,079 --> 00:04:02,699
gonna pick on MVC a little bit but as

103
00:04:02,699 --> 00:04:03,930
you'll see at the end I'm not really

104
00:04:03,930 --> 00:04:05,699
telling you that MVC is wrong I'm just

105
00:04:05,699 --> 00:04:07,230
trying to kind of evolve some of these

106
00:04:07,230 --> 00:04:09,329
concepts a little bit so this is an

107
00:04:09,329 --> 00:04:11,250
example I'm going to pick on PHP but

108
00:04:11,250 --> 00:04:12,930
this kind of code happens in every

109
00:04:12,930 --> 00:04:16,409
platform so some things to look at here

110
00:04:16,409 --> 00:04:18,269
we're obviously we're inside of a view

111
00:04:18,269 --> 00:04:20,909
we're in an HTML page or a PHP page in

112
00:04:20,909 --> 00:04:23,550
this case we're in a view and what we've

113
00:04:23,550 --> 00:04:25,620
got is we want to conditionally show

114
00:04:25,620 --> 00:04:27,840
some link to some page we only want to

115
00:04:27,840 --> 00:04:30,690
show that when some condition is true of

116
00:04:30,690 --> 00:04:33,150
our back-end logic in this case we got

117
00:04:33,150 --> 00:04:34,110
really clever we've got an

118
00:04:34,110 --> 00:04:35,820
object-oriented model we've got a user

119
00:04:35,820 --> 00:04:38,640
and that model has a function on it

120
00:04:38,640 --> 00:04:40,560
called is logged in that's kind of

121
00:04:40,560 --> 00:04:42,450
opaque we're not exactly sure what is

122
00:04:42,450 --> 00:04:43,830
logged in means but it's probably

123
00:04:43,830 --> 00:04:46,080
checking for a login session maybe some

124
00:04:46,080 --> 00:04:48,210
credentials and then over here we've got

125
00:04:48,210 --> 00:04:50,640
the permissions based side of things

126
00:04:50,640 --> 00:04:52,170
that not only are they logged in but

127
00:04:52,170 --> 00:04:54,270
there's a particular permission or set

128
00:04:54,270 --> 00:04:55,530
of permissions that we have a

129
00:04:55,530 --> 00:04:58,020
arbitrarily decided means that they can

130
00:04:58,020 --> 00:05:00,060
publish and if both of those conditions

131
00:05:00,060 --> 00:05:01,980
are true then we want to show this link

132
00:05:01,980 --> 00:05:04,770
now this is perfectly valid logic the

133
00:05:04,770 --> 00:05:07,350
problem is this is terrible to put in

134
00:05:07,350 --> 00:05:09,510
your templates because as soon as you

135
00:05:09,510 --> 00:05:11,490
write this code three weeks later

136
00:05:11,490 --> 00:05:13,350
somebody's in your biz dev side of your

137
00:05:13,350 --> 00:05:14,730
company is going to come along and tell

138
00:05:14,730 --> 00:05:17,400
you well actually can publish is not

139
00:05:17,400 --> 00:05:19,110
really the whole world we need one more

140
00:05:19,110 --> 00:05:21,330
condition on top of can publish we need

141
00:05:21,330 --> 00:05:23,610
this or we need that or or you're gonna

142
00:05:23,610 --> 00:05:24,810
have back in developers that are going

143
00:05:24,810 --> 00:05:26,370
to go through and refactor your model

144
00:05:26,370 --> 00:05:27,840
and these function names are gonna

145
00:05:27,840 --> 00:05:29,880
change or the meaning of what they do is

146
00:05:29,880 --> 00:05:31,200
going to get overloaded and all of a

147
00:05:31,200 --> 00:05:33,210
sudden your templates and your back-end

148
00:05:33,210 --> 00:05:36,210
application architecture are terribly

149
00:05:36,210 --> 00:05:39,150
intertwined this is exactly what MVC

150
00:05:39,150 --> 00:05:41,690
tells us to get away from to have loose

151
00:05:41,690 --> 00:05:44,400
you know mixture between our views and

152
00:05:44,400 --> 00:05:45,900
our in our models and things like that

153
00:05:45,900 --> 00:05:48,600
but unfortunately this just happens all

154
00:05:48,600 --> 00:05:52,320
the time so my third motivation is dry

155
00:05:52,320 --> 00:05:55,590
do not repeat yourself I am such a lazy

156
00:05:55,590 --> 00:05:57,300
developer and I'm just gonna go right

157
00:05:57,300 --> 00:05:58,860
out there and say it I do not like to

158
00:05:58,860 --> 00:06:01,320
write code more than once I really I

159
00:06:01,320 --> 00:06:03,810
want that utopia where I can write code

160
00:06:03,810 --> 00:06:05,250
once and it's gonna freak and run

161
00:06:05,250 --> 00:06:07,320
anywhere I want it to run and I don't

162
00:06:07,320 --> 00:06:08,370
have to worry about it

163
00:06:08,370 --> 00:06:12,600
and the last thing is we all wear a lot

164
00:06:12,600 --> 00:06:13,440
of different hats

165
00:06:13,440 --> 00:06:15,630
some people are get to get the privilege

166
00:06:15,630 --> 00:06:17,910
of specializing in the front end or

167
00:06:17,910 --> 00:06:20,100
specializing in the back end many times

168
00:06:20,100 --> 00:06:21,960
people are having to wear multiple hats

169
00:06:21,960 --> 00:06:23,580
they're having to do some front end back

170
00:06:23,580 --> 00:06:25,830
some front end development some back in

171
00:06:25,830 --> 00:06:28,110
development and the problem is that when

172
00:06:28,110 --> 00:06:30,720
you are doing back in development you're

173
00:06:30,720 --> 00:06:32,310
thinking like a back-end developer

174
00:06:32,310 --> 00:06:34,620
that's a good thing but it's a terrible

175
00:06:34,620 --> 00:06:36,810
thing for the front-end because system

176
00:06:36,810 --> 00:06:39,030
architecture is entirely different so

177
00:06:39,030 --> 00:06:41,580
very much orthogonal and opposite in

178
00:06:41,580 --> 00:06:43,500
ways to front-end development and the

179
00:06:43,500 --> 00:06:44,820
concerns of the front end and the

180
00:06:44,820 --> 00:06:47,310
reverse is also true so when you have to

181
00:06:47,310 --> 00:06:48,750
these hats you have to keep context

182
00:06:48,750 --> 00:06:50,490
switching and thinking of entirely

183
00:06:50,490 --> 00:06:51,930
different worlds and this is what leads

184
00:06:51,930 --> 00:06:54,570
to the crap of I've got a widget that

185
00:06:54,570 --> 00:06:56,370
you know builds out my markup and

186
00:06:56,370 --> 00:06:58,380
because I'm a back-end developer I don't

187
00:06:58,380 --> 00:06:59,910
want to worry about the box model and

188
00:06:59,910 --> 00:07:02,160
CSS and markup standards and all of that

189
00:07:02,160 --> 00:07:04,380
crap so I'm going to bury that deep down

190
00:07:04,380 --> 00:07:06,150
inside of my java code so I never have

191
00:07:06,150 --> 00:07:07,950
to worry about it again but then I have

192
00:07:07,950 --> 00:07:10,290
lost complete control so my motivation

193
00:07:10,290 --> 00:07:12,300
here is that we need to allow when you

194
00:07:12,300 --> 00:07:13,650
are a front-end developer when you're

195
00:07:13,650 --> 00:07:15,660
wearing that hat you need to be able to

196
00:07:15,660 --> 00:07:17,640
stay inside of that core skillset and

197
00:07:17,640 --> 00:07:20,310
get your job done fast and get it done

198
00:07:20,310 --> 00:07:22,410
efficiently and get it done right when

199
00:07:22,410 --> 00:07:23,850
you're back and developer the same is

200
00:07:23,850 --> 00:07:27,630
true so we need a different view on this

201
00:07:27,630 --> 00:07:29,520
and I am proposing what I call a new

202
00:07:29,520 --> 00:07:32,490
pattern it's not exactly a replacement

203
00:07:32,490 --> 00:07:33,750
of MVC but we're going to talk about

204
00:07:33,750 --> 00:07:36,930
some differences I call it c b c stands

205
00:07:36,930 --> 00:07:39,480
for client's views controllers or client

206
00:07:39,480 --> 00:07:43,710
view controller so this is a slightly

207
00:07:43,710 --> 00:07:46,560
different view of the world we're going

208
00:07:46,560 --> 00:07:48,900
to talk about cbc UI architecture here

209
00:07:48,900 --> 00:07:50,940
for a moment so this is a UI focused

210
00:07:50,940 --> 00:07:53,550
architecture and it separates out the

211
00:07:53,550 --> 00:07:56,250
tears it creates an explicit middle-end

212
00:07:56,250 --> 00:07:59,010
UI architecture layer that you may or

213
00:07:59,010 --> 00:08:01,140
may not be very familiar with seeing so

214
00:08:01,140 --> 00:08:02,190
the first thing that i want you to

215
00:08:02,190 --> 00:08:04,230
recognize here is that down here at the

216
00:08:04,230 --> 00:08:06,060
bottom everything that was in that prior

217
00:08:06,060 --> 00:08:08,010
diagram that was all over here and all

218
00:08:08,010 --> 00:08:11,220
intermixed becomes this black box this

219
00:08:11,220 --> 00:08:13,110
is our application and now our

220
00:08:13,110 --> 00:08:15,540
application doesn't know anything at all

221
00:08:15,540 --> 00:08:16,830
about how things are going to be

222
00:08:16,830 --> 00:08:19,920
presented it is 100% an API based

223
00:08:19,920 --> 00:08:22,410
application all it is is a state machine

224
00:08:22,410 --> 00:08:25,410
all it is is concerned with dealing with

225
00:08:25,410 --> 00:08:27,990
state with managing your login sessions

226
00:08:27,990 --> 00:08:29,520
with connecting to the database and

227
00:08:29,520 --> 00:08:31,260
doing whatever magic that system

228
00:08:31,260 --> 00:08:35,510
backends do we stick a simple JSON

229
00:08:35,510 --> 00:08:37,980
serializing API on top of that and the

230
00:08:37,980 --> 00:08:39,120
whole rest of the world becomes

231
00:08:39,120 --> 00:08:41,940
beautiful for the UI engineer JSON is an

232
00:08:41,940 --> 00:08:44,640
awesome representation of data it's the

233
00:08:44,640 --> 00:08:47,040
only representation of data that's truly

234
00:08:47,040 --> 00:08:48,930
native recognizable in all of our other

235
00:08:48,930 --> 00:08:52,440
tiers and every application is able to

236
00:08:52,440 --> 00:08:55,230
serialize down to JSON then what we have

237
00:08:55,230 --> 00:08:56,700
over here the most important thing is

238
00:08:56,700 --> 00:08:58,950
that what now is in control of what's

239
00:08:58,950 --> 00:08:59,699
going on on

240
00:08:59,699 --> 00:09:01,769
server is that what I call the UI

241
00:09:01,769 --> 00:09:04,169
controllers and I am implementing these

242
00:09:04,169 --> 00:09:05,790
in JavaScript this is why I'm talking

243
00:09:05,790 --> 00:09:07,439
about it at a JavaScript conference so

244
00:09:07,439 --> 00:09:08,850
what I'm going to do is I'm going to

245
00:09:08,850 --> 00:09:10,739
write everything that the middle end is

246
00:09:10,739 --> 00:09:13,859
in JavaScript all of this and then the

247
00:09:13,859 --> 00:09:15,600
cool part is this thing over here this

248
00:09:15,600 --> 00:09:17,699
templating engine and even some of these

249
00:09:17,699 --> 00:09:20,160
things they can work over here in the

250
00:09:20,160 --> 00:09:22,169
browser the exact same code I don't have

251
00:09:22,169 --> 00:09:24,359
to write different code things like data

252
00:09:24,359 --> 00:09:26,639
validation I can write that once and run

253
00:09:26,639 --> 00:09:29,549
it in both places instead of having to

254
00:09:29,549 --> 00:09:31,410
have you know some something that auto

255
00:09:31,410 --> 00:09:33,449
generates JavaScript for me so I just

256
00:09:33,449 --> 00:09:38,879
want to switch back to this one for just

257
00:09:38,879 --> 00:09:41,939
a moment and then back so that you see

258
00:09:41,939 --> 00:09:45,169
the differences we're making a UI

259
00:09:45,169 --> 00:09:47,939
focused architecture here I'm not

260
00:09:47,939 --> 00:09:49,319
telling you what you need to do with

261
00:09:49,319 --> 00:09:51,239
this black box other than stop having

262
00:09:51,239 --> 00:09:53,209
this thing do crappy presentation

263
00:09:53,209 --> 00:09:56,639
whatever platform you're working on I

264
00:09:56,639 --> 00:09:58,139
really don't care it could be Perl I

265
00:09:58,139 --> 00:09:59,699
feel bad for you but it could be

266
00:09:59,699 --> 00:10:01,319
whatever you want it to be all I'm

267
00:10:01,319 --> 00:10:02,850
telling you is that your presentation

268
00:10:02,850 --> 00:10:04,649
layer and your middle end probably sucks

269
00:10:04,649 --> 00:10:05,879
right now and maybe you should rethink

270
00:10:05,879 --> 00:10:09,209
it so let's talk about what CVC means

271
00:10:09,209 --> 00:10:10,949
clients everything is a client of

272
00:10:10,949 --> 00:10:12,019
everything else

273
00:10:12,019 --> 00:10:14,399
they're decoupled they're modular and

274
00:10:14,399 --> 00:10:16,589
they're scalable that means at any point

275
00:10:16,589 --> 00:10:18,749
in the flow everything is able to talk

276
00:10:18,749 --> 00:10:22,529
to everything else and it uses JSON the

277
00:10:22,529 --> 00:10:24,839
views their templating they're portable

278
00:10:24,839 --> 00:10:26,669
they're dry they're platform agnostic

279
00:10:26,669 --> 00:10:29,220
and they use the core web technology

280
00:10:29,220 --> 00:10:31,139
that UI engineers are most familiar with

281
00:10:31,139 --> 00:10:34,829
the JavaScript HTML and CSS the

282
00:10:34,829 --> 00:10:37,109
controllers are all these little tiny

283
00:10:37,109 --> 00:10:38,850
things that make all this stuff work

284
00:10:38,850 --> 00:10:41,129
this is the thing that takes a request

285
00:10:41,129 --> 00:10:43,169
and translates it into an execution of

286
00:10:43,169 --> 00:10:45,660
the View engine and grabs the JSON data

287
00:10:45,660 --> 00:10:47,489
from the application and pumps it in and

288
00:10:47,489 --> 00:10:49,529
packages all the stuff up it caches

289
00:10:49,529 --> 00:10:51,509
things those are what the UI controllers

290
00:10:51,509 --> 00:10:53,369
are doing they're small independent and

291
00:10:53,369 --> 00:10:55,939
powerful they're also in JavaScript so

292
00:10:55,939 --> 00:10:58,709
what I'm not suggesting is that we need

293
00:10:58,709 --> 00:11:01,470
another framework so this is actually

294
00:11:01,470 --> 00:11:05,160
the anti framework presentation none of

295
00:11:05,160 --> 00:11:06,480
what I am doing is going to

296
00:11:06,480 --> 00:11:09,269
automatically build you some UI we just

297
00:11:09,269 --> 00:11:11,159
heard a talk on the ext j/s and they do

298
00:11:11,159 --> 00:11:13,019
a phenomenal job of packaging all that

299
00:11:13,019 --> 00:11:13,500
stuff

300
00:11:13,500 --> 00:11:14,670
and making it so that you don't really

301
00:11:14,670 --> 00:11:16,530
have to think about it much I actually

302
00:11:16,530 --> 00:11:18,240
want to do the reverse I want you to

303
00:11:18,240 --> 00:11:20,130
have to think about it so you can build

304
00:11:20,130 --> 00:11:23,310
on top of this pattern whatever kind of

305
00:11:23,310 --> 00:11:25,050
presentation layer is cool with you you

306
00:11:25,050 --> 00:11:27,690
can use jQuery ext dojo whatever you

307
00:11:27,690 --> 00:11:30,600
want to do but make sure that you use a

308
00:11:30,600 --> 00:11:32,220
templating system that can run in both

309
00:11:32,220 --> 00:11:35,190
places I'm not telling you to ditch your

310
00:11:35,190 --> 00:11:36,960
whole architecture as I said you can go

311
00:11:36,960 --> 00:11:39,720
and you can go back to your company

312
00:11:39,720 --> 00:11:41,190
you know Monday morning and you can tell

313
00:11:41,190 --> 00:11:43,020
them hey I just want to change the views

314
00:11:43,020 --> 00:11:44,310
I don't have to change the entire

315
00:11:44,310 --> 00:11:46,350
platform architecture and I'm also not

316
00:11:46,350 --> 00:11:49,350
saying that MBC is inherently wrong or

317
00:11:49,350 --> 00:11:51,330
that it's weak or something like that

318
00:11:51,330 --> 00:11:53,250
I'm just simply saying that in our world

319
00:11:53,250 --> 00:11:56,430
of web 2.0 and with the role separations

320
00:11:56,430 --> 00:11:58,650
and specialties that we all are falling

321
00:11:58,650 --> 00:12:00,660
into and our jobs it's time that we

322
00:12:00,660 --> 00:12:02,130
rethink this a little bit and I'm

323
00:12:02,130 --> 00:12:06,370
suggesting an extension to that pattern

324
00:12:06,380 --> 00:12:09,000
CBC is an alternate pattern for thinking

325
00:12:09,000 --> 00:12:11,700
about UI architecture and it is okay to

326
00:12:11,700 --> 00:12:15,030
rethink you do not have to accept the

327
00:12:15,030 --> 00:12:16,800
status quo because you've always been a

328
00:12:16,800 --> 00:12:18,360
dotnet shop and you've never been given

329
00:12:18,360 --> 00:12:19,890
the option of doing anything other than

330
00:12:19,890 --> 00:12:22,170
that it's okay to go back and rethink

331
00:12:22,170 --> 00:12:24,630
things so how are we going to do this

332
00:12:24,630 --> 00:12:26,370
well we're gonna use Java Script which

333
00:12:26,370 --> 00:12:29,160
is awesome and it's going to be on the

334
00:12:29,160 --> 00:12:30,510
server primarily there's going to be

335
00:12:30,510 --> 00:12:32,240
some in the in the browser as well

336
00:12:32,240 --> 00:12:34,560
sometimes JavaScript on the server can

337
00:12:34,560 --> 00:12:36,180
feel a little bit out of the wall out of

338
00:12:36,180 --> 00:12:38,340
a fish out of water kind of a thing in

339
00:12:38,340 --> 00:12:40,650
today's day and age we're really pushing

340
00:12:40,650 --> 00:12:42,210
things and you're seeing some awesome

341
00:12:42,210 --> 00:12:44,370
stuff from nodejs and narwhal and rhino

342
00:12:44,370 --> 00:12:47,220
and all these awesome things and we're

343
00:12:47,220 --> 00:12:48,960
trying to get them to kind of all work

344
00:12:48,960 --> 00:12:51,060
together commonjs is doing a great job

345
00:12:51,060 --> 00:12:54,210
of giving us some standards for how all

346
00:12:54,210 --> 00:12:56,940
of these things work the problem is that

347
00:12:56,940 --> 00:12:58,860
we haven't progressed very far yet so

348
00:12:58,860 --> 00:13:01,200
you've got something awesome like nodejs

349
00:13:01,200 --> 00:13:03,330
and they've gone and done like 18 or 20

350
00:13:03,330 --> 00:13:05,130
different api's for all these awesome

351
00:13:05,130 --> 00:13:07,260
things and only two or three of them are

352
00:13:07,260 --> 00:13:08,700
things that everybody's kind of agreed

353
00:13:08,700 --> 00:13:11,550
on in the common Jas world so that's why

354
00:13:11,550 --> 00:13:13,140
you're seeing so much API that's

355
00:13:13,140 --> 00:13:15,180
changing with node and it's and it's

356
00:13:15,180 --> 00:13:17,130
also a problem narwhals a little bit

357
00:13:17,130 --> 00:13:18,780
more mature but it's also a problem

358
00:13:18,780 --> 00:13:20,970
there so and the world of server-side

359
00:13:20,970 --> 00:13:22,680
javascript is still kind of a wild wild

360
00:13:22,680 --> 00:13:25,470
west and we've got some issues to work

361
00:13:25,470 --> 00:13:27,779
through there but I believe hole

362
00:13:27,779 --> 00:13:30,060
hardly in JavaScript on the server and I

363
00:13:30,060 --> 00:13:31,709
think it's the answer to a lot of our

364
00:13:31,709 --> 00:13:34,139
problems so I'm prepared to be on that

365
00:13:34,139 --> 00:13:35,370
forefront and we're gonna we're gonna

366
00:13:35,370 --> 00:13:36,990
stub our toe a few times it's going to

367
00:13:36,990 --> 00:13:38,879
suck but we're gonna eventually come to

368
00:13:38,879 --> 00:13:42,180
something that is freakin amazing so I'm

369
00:13:42,180 --> 00:13:44,040
gonna propose I've written some code

370
00:13:44,040 --> 00:13:46,980
that I call bike Ching Jas this is a

371
00:13:46,980 --> 00:13:48,930
much more simplified view of what

372
00:13:48,930 --> 00:13:50,939
server-side JavaScript would be it is

373
00:13:50,939 --> 00:13:52,769
not at all intended to replace or

374
00:13:52,769 --> 00:13:54,089
compete with nodejs

375
00:13:54,089 --> 00:13:56,009
but I needed something simple and a

376
00:13:56,009 --> 00:13:58,079
little bit more kind of tangible to work

377
00:13:58,079 --> 00:13:59,550
with when I'm demoing and kind of

378
00:13:59,550 --> 00:14:01,889
developing some of these ideas so this

379
00:14:01,889 --> 00:14:04,769
just wraps around v8 it's a single

380
00:14:04,769 --> 00:14:07,199
engine file it's a single compilable it

381
00:14:07,199 --> 00:14:09,379
creates a very simple straightforward

382
00:14:09,379 --> 00:14:11,699
server-side javascript environment and

383
00:14:11,699 --> 00:14:14,189
it uses the module approach that the

384
00:14:14,189 --> 00:14:16,649
others are familiar with using I talked

385
00:14:16,649 --> 00:14:18,990
extensively with Chris Cole and some of

386
00:14:18,990 --> 00:14:20,519
the others from the common Jas world I

387
00:14:20,519 --> 00:14:22,079
wanted to make sure that what I

388
00:14:22,079 --> 00:14:24,809
implemented was as close as possible to

389
00:14:24,809 --> 00:14:27,149
what the common Jas world is wanting to

390
00:14:27,149 --> 00:14:29,220
agree on and because all I needed were

391
00:14:29,220 --> 00:14:32,009
things like file i/o system i/o and a

392
00:14:32,009 --> 00:14:34,379
few process execution things those are

393
00:14:34,379 --> 00:14:35,459
the things that everybody's kind of

394
00:14:35,459 --> 00:14:37,500
agreed on so that's the good news the

395
00:14:37,500 --> 00:14:38,579
bad news is you're not going to be able

396
00:14:38,579 --> 00:14:40,620
to use bike change has to do commet

397
00:14:40,620 --> 00:14:42,029
servers and all kinds of freaking

398
00:14:42,029 --> 00:14:44,009
amazing stuff but I actually don't think

399
00:14:44,009 --> 00:14:46,500
that that's necessary for most of the

400
00:14:46,500 --> 00:14:47,009
web's

401
00:14:47,009 --> 00:14:49,949
UI architecture so bike chain Jas is

402
00:14:49,949 --> 00:14:52,100
really just kind of a temporary stopgap

403
00:14:52,100 --> 00:14:54,149
hopefully it'll evolve kind of in

404
00:14:54,149 --> 00:14:55,589
parallel with some of the others and

405
00:14:55,589 --> 00:14:58,290
it's a good synchronous simple

406
00:14:58,290 --> 00:15:00,449
environment to get started and then you

407
00:15:00,449 --> 00:15:02,160
can graduate to running this code and

408
00:15:02,160 --> 00:15:03,779
something more sophisticated like node

409
00:15:03,779 --> 00:15:07,680
or normal CVC plus javascript is the

410
00:15:07,680 --> 00:15:10,559
power of the UI architecture put in the

411
00:15:10,559 --> 00:15:11,879
hands of the people that need it most

412
00:15:11,879 --> 00:15:14,250
the front-end engineers instead of

413
00:15:14,250 --> 00:15:15,899
relying on your system architect who has

414
00:15:15,899 --> 00:15:17,879
no clue what it actually means to

415
00:15:17,879 --> 00:15:20,610
optimize markup and CSS and Ajax

416
00:15:20,610 --> 00:15:22,709
communication you put it in the hands of

417
00:15:22,709 --> 00:15:24,209
those who work with that every single

418
00:15:24,209 --> 00:15:26,579
day and you give them the control to

419
00:15:26,579 --> 00:15:28,069
make things better

420
00:15:28,069 --> 00:15:30,929
my templating engine I call handlebar J

421
00:15:30,929 --> 00:15:33,769
s this is actually patterned

422
00:15:33,769 --> 00:15:36,709
significantly inspired by mustache J s

423
00:15:36,709 --> 00:15:39,059
so I'm going to give full credit to them

424
00:15:39,059 --> 00:15:41,890
they really were some pioneers in this

425
00:15:41,890 --> 00:15:45,910
this is a primarily HTML text-based

426
00:15:45,910 --> 00:15:48,250
templating approach uses a very simple

427
00:15:48,250 --> 00:15:50,800
wrapper around that a very simple small

428
00:15:50,800 --> 00:15:54,700
DSL for templating my basic idea was I

429
00:15:54,700 --> 00:15:56,740
need the bare minimum that it takes to

430
00:15:56,740 --> 00:15:58,329
get templating done I don't need to

431
00:15:58,329 --> 00:16:01,120
bring a huge machine gun to a knife

432
00:16:01,120 --> 00:16:03,190
fight so I'm not going to give the full

433
00:16:03,190 --> 00:16:04,899
power of JavaScript to the templating

434
00:16:04,899 --> 00:16:06,130
engine that's going to what's going to

435
00:16:06,130 --> 00:16:08,110
let lead to that spaghetti code we dealt

436
00:16:08,110 --> 00:16:10,750
with before so handlebar J s is very

437
00:16:10,750 --> 00:16:14,230
stripped-down and simple and it uses

438
00:16:14,230 --> 00:16:16,420
only JSON data for the input so we're

439
00:16:16,420 --> 00:16:18,540
not dealing with inexorable

440
00:16:18,540 --> 00:16:20,740
communication between our model and the

441
00:16:20,740 --> 00:16:22,120
way our model works in the way the

442
00:16:22,120 --> 00:16:23,709
front-end works if you've ever dealt

443
00:16:23,709 --> 00:16:25,269
with this I deal with this all the time

444
00:16:25,269 --> 00:16:27,399
you know for whatever reason the backend

445
00:16:27,399 --> 00:16:29,079
architecture they want to do things as a

446
00:16:29,079 --> 00:16:31,149
keyed hash and when I get it in the

447
00:16:31,149 --> 00:16:32,769
front end and I want to iterate over it

448
00:16:32,769 --> 00:16:34,750
it needs to be an array because I need

449
00:16:34,750 --> 00:16:35,769
it to be ordered for whatever

450
00:16:35,769 --> 00:16:38,649
presentational reason this sucks that we

451
00:16:38,649 --> 00:16:40,360
have to have those two be the same thing

452
00:16:40,360 --> 00:16:41,860
and the problem is that we're trying to

453
00:16:41,860 --> 00:16:43,600
replicate the model that the backend

454
00:16:43,600 --> 00:16:45,640
guys use in the front-end and that's not

455
00:16:45,640 --> 00:16:47,620
how things work in the front-end so if

456
00:16:47,620 --> 00:16:49,690
we serialize things down to JSON it

457
00:16:49,690 --> 00:16:51,190
makes things a lot simpler we can agree

458
00:16:51,190 --> 00:16:54,040
upon that serialization and then it's

459
00:16:54,040 --> 00:16:55,630
kind of like creating an interface for

460
00:16:55,630 --> 00:16:57,699
your data that interface doesn't have to

461
00:16:57,699 --> 00:16:59,050
change no matter what the backend guys

462
00:16:59,050 --> 00:17:01,420
do and if you need a little bit of a

463
00:17:01,420 --> 00:17:03,010
tweak to that in your front-end you're

464
00:17:03,010 --> 00:17:04,270
in control of tweaking that

465
00:17:04,270 --> 00:17:07,720
serialization so the details this is

466
00:17:07,720 --> 00:17:10,900
100% JavaScript runs both in browser the

467
00:17:10,900 --> 00:17:13,480
server it only accepts JSON data not

468
00:17:13,480 --> 00:17:17,319
models and behavior the application

469
00:17:17,319 --> 00:17:19,630
state this is an arbitrary string value

470
00:17:19,630 --> 00:17:21,309
that represents the state of your

471
00:17:21,309 --> 00:17:23,319
application that's the state that that

472
00:17:23,319 --> 00:17:25,510
black box is currently in that's going

473
00:17:25,510 --> 00:17:27,250
to what's going to select which template

474
00:17:27,250 --> 00:17:30,970
to use and finally for performance

475
00:17:30,970 --> 00:17:32,620
reasons one step that I've already built

476
00:17:32,620 --> 00:17:34,390
into handlebar j/s even though it's kind

477
00:17:34,390 --> 00:17:36,280
of young and immature one step that I've

478
00:17:36,280 --> 00:17:39,549
built into it is that it compiles your

479
00:17:39,549 --> 00:17:41,230
text template so and it does all of this

480
00:17:41,230 --> 00:17:43,510
you know complicated and expensive

481
00:17:43,510 --> 00:17:46,360
regular expression parsing on text a lot

482
00:17:46,360 --> 00:17:47,440
of these template engines are

483
00:17:47,440 --> 00:17:49,660
just-in-time compilers and they do that

484
00:17:49,660 --> 00:17:50,980
over and over and over again and

485
00:17:50,980 --> 00:17:52,660
handlebar jeaious can run in

486
00:17:52,660 --> 00:17:54,590
just-in-time but it also will

487
00:17:54,590 --> 00:17:56,480
cache the results of that into

488
00:17:56,480 --> 00:17:58,159
executable JavaScript so you can run

489
00:17:58,159 --> 00:18:00,260
that as a build process so you can still

490
00:18:00,260 --> 00:18:02,600
maintain your templates in HTML all the

491
00:18:02,600 --> 00:18:04,220
way it ought to be but you get the

492
00:18:04,220 --> 00:18:05,779
performance benefit of being able to run

493
00:18:05,779 --> 00:18:08,870
optimized JavaScript so let's take a

494
00:18:08,870 --> 00:18:10,850
look at a demo if you want to go and

495
00:18:10,850 --> 00:18:18,299
check out J s content get a fine calm

496
00:18:18,309 --> 00:18:22,039
that is this page I will tell you that

497
00:18:22,039 --> 00:18:23,510
at the bottom of this there are two

498
00:18:23,510 --> 00:18:25,309
links there you can't see the second one

499
00:18:25,309 --> 00:18:26,750
there's a demo comments thread that's

500
00:18:26,750 --> 00:18:27,679
what we're gonna look at in just a

501
00:18:27,679 --> 00:18:29,240
moment then right below that there's a

502
00:18:29,240 --> 00:18:31,399
slides link this is substantially the

503
00:18:31,399 --> 00:18:33,830
same presentation that I gave last month

504
00:18:33,830 --> 00:18:36,020
itself by Southwest Interactive and so

505
00:18:36,020 --> 00:18:38,360
my slide set from that is up still on

506
00:18:38,360 --> 00:18:40,190
SlideShare so you're gonna see most of

507
00:18:40,190 --> 00:18:41,809
the same slides here if you want to

508
00:18:41,809 --> 00:18:44,240
check out my slides let's go over and

509
00:18:44,240 --> 00:18:46,250
take a look at this demo this is a very

510
00:18:46,250 --> 00:18:47,750
simple demo and I encourage all of you

511
00:18:47,750 --> 00:18:49,610
to be participating in this demo it'll

512
00:18:49,610 --> 00:18:51,590
be cooler if more of you are logging in

513
00:18:51,590 --> 00:18:54,470
and doing things so basically the setup

514
00:18:54,470 --> 00:18:56,270
of this demo is I've got this image and

515
00:18:56,270 --> 00:18:58,279
I've got 10 different randomly selected

516
00:18:58,279 --> 00:19:02,270
images that come from Flickr and I can

517
00:19:02,270 --> 00:19:04,279
just change those that will what I'm

518
00:19:04,279 --> 00:19:06,080
doing actually is I'm using handlebar

519
00:19:06,080 --> 00:19:07,730
jeaious handlebar jeaious was used to

520
00:19:07,730 --> 00:19:09,230
build this page on the server when I

521
00:19:09,230 --> 00:19:11,330
first requested it and then when I click

522
00:19:11,330 --> 00:19:13,429
this change image I'm doing an ajax

523
00:19:13,429 --> 00:19:15,380
request and i'm saying giving some json

524
00:19:15,380 --> 00:19:17,240
back that tells me what's the new image

525
00:19:17,240 --> 00:19:18,830
that's been randomly selected from the

526
00:19:18,830 --> 00:19:21,380
server the details its source and alts

527
00:19:21,380 --> 00:19:22,909
and all of that stuff and then i'm

528
00:19:22,909 --> 00:19:24,350
rebuilding that markup using the

529
00:19:24,350 --> 00:19:27,500
template on the front end so it's very

530
00:19:27,500 --> 00:19:28,820
simple but you can see that it's going

531
00:19:28,820 --> 00:19:30,710
quick so whichever image you happen to

532
00:19:30,710 --> 00:19:32,750
have picked when you type in your name

533
00:19:32,750 --> 00:19:39,980
and you type in some URL and you click

534
00:19:39,980 --> 00:19:42,559
login it's gonna create a login session

535
00:19:42,559 --> 00:19:45,200
for you and you can type in a comment so

536
00:19:45,200 --> 00:19:49,490
i'm gonna say hey nice bench and submit

537
00:19:49,490 --> 00:19:51,890
that comment all that that it's

538
00:19:51,890 --> 00:19:53,570
happening here is using that handlebar

539
00:19:53,570 --> 00:19:54,710
jeaious I'm going to show you some code

540
00:19:54,710 --> 00:19:56,809
here in just a moment but everything

541
00:19:56,809 --> 00:19:58,549
that just happened there that were Ajax

542
00:19:58,549 --> 00:19:59,809
requests that were going back and forth

543
00:19:59,809 --> 00:20:02,299
but they were only sending JSON back and

544
00:20:02,299 --> 00:20:04,490
forth the mark-up was actually being

545
00:20:04,490 --> 00:20:06,740
built on the fly using the same template

546
00:20:06,740 --> 00:20:08,480
again j'en in the browser

547
00:20:08,480 --> 00:20:11,059
is what I use on the server so if I were

548
00:20:11,059 --> 00:20:12,770
to refresh this page the exact same

549
00:20:12,770 --> 00:20:14,809
process of querying the application for

550
00:20:14,809 --> 00:20:16,700
that data would happen and the

551
00:20:16,700 --> 00:20:18,350
server-side templating engine would be

552
00:20:18,350 --> 00:20:21,049
responsible for building this page so if

553
00:20:21,049 --> 00:20:22,370
several of you have already added

554
00:20:22,370 --> 00:20:24,110
comments which I'm guessing probably you

555
00:20:24,110 --> 00:20:29,809
have if I use if i refresh this page so

556
00:20:29,809 --> 00:20:31,130
now I know that several of you have

557
00:20:31,130 --> 00:20:32,840
already made comments that request

558
00:20:32,840 --> 00:20:34,429
happened on the server so I can do

559
00:20:34,429 --> 00:20:36,860
templating in both places using exactly

560
00:20:36,860 --> 00:20:39,290
the same templates I can also do data

561
00:20:39,290 --> 00:20:40,880
validation in both places because I know

562
00:20:40,880 --> 00:20:42,770
for a fact that I have a rule that if I

563
00:20:42,770 --> 00:20:46,299
type in a really short comment like this

564
00:20:46,299 --> 00:20:48,559
it's going to do some data validation

565
00:20:48,559 --> 00:20:50,120
now what's cool about this is that data

566
00:20:50,120 --> 00:20:51,770
validation code which I'll show in just

567
00:20:51,770 --> 00:20:53,299
a moment if I have time that deadly

568
00:20:53,299 --> 00:20:54,679
validation code very simple it just

569
00:20:54,679 --> 00:20:56,809
looked at the minimum length of my text

570
00:20:56,809 --> 00:20:59,000
field that ran in the browser gave me an

571
00:20:59,000 --> 00:21:01,850
immediate request but that same code can

572
00:21:01,850 --> 00:21:03,470
also run on the server because we know

573
00:21:03,470 --> 00:21:04,970
we can't trust the javascript in the

574
00:21:04,970 --> 00:21:06,559
browser so I did not have to write that

575
00:21:06,559 --> 00:21:08,900
rule twice I only wrote it once so it

576
00:21:08,900 --> 00:21:11,929
needs to be at least 5 characters so

577
00:21:11,929 --> 00:21:13,970
then when I resubmit everything's going

578
00:21:13,970 --> 00:21:17,150
to work fine all right so let's take a

579
00:21:17,150 --> 00:21:19,429
look at some code first of all using

580
00:21:19,429 --> 00:21:22,100
handlebar j/s this is intended to be

581
00:21:22,100 --> 00:21:23,929
very simple a lot of this stuff is

582
00:21:23,929 --> 00:21:26,179
wrapped up inside of the code so here

583
00:21:26,179 --> 00:21:28,549
you can see that all I'm doing is I'm

584
00:21:28,549 --> 00:21:30,590
calling handlebar and I'm calling a

585
00:21:30,590 --> 00:21:32,330
function called process state I'm giving

586
00:21:32,330 --> 00:21:33,860
it that arbitrary string value which

587
00:21:33,860 --> 00:21:35,540
represents the state of the application

588
00:21:35,540 --> 00:21:37,250
in this case I know there's a login

589
00:21:37,250 --> 00:21:38,600
error so I know what that state is and

590
00:21:38,600 --> 00:21:40,820
I'm passing it a JSON data structure and

591
00:21:40,820 --> 00:21:43,010
then I'm using this fancy thing called

592
00:21:43,010 --> 00:21:45,710
promises server-side defers things like

593
00:21:45,710 --> 00:21:47,600
that so it's not really particularly

594
00:21:47,600 --> 00:21:48,980
important exactly how this happens but

595
00:21:48,980 --> 00:21:50,510
basically this can be an asynchronous

596
00:21:50,510 --> 00:21:52,610
operation or synchronous depending on

597
00:21:52,610 --> 00:21:54,080
the environment and what's happening and

598
00:21:54,080 --> 00:21:56,600
so all I really want to know is either

599
00:21:56,600 --> 00:21:59,270
immediately or later if necessary I want

600
00:21:59,270 --> 00:22:01,309
to do something after this completes so

601
00:22:01,309 --> 00:22:03,470
after I've processed that state then I'm

602
00:22:03,470 --> 00:22:06,080
going to get passed to me the value the

603
00:22:06,080 --> 00:22:08,150
results of that templating process and

604
00:22:08,150 --> 00:22:09,410
so I'm just going to use some very

605
00:22:09,410 --> 00:22:11,210
simple jQuery to replace the existing

606
00:22:11,210 --> 00:22:14,270
form with what the results of my

607
00:22:14,270 --> 00:22:15,890
templating engine were it doesn't get

608
00:22:15,890 --> 00:22:17,630
any more complicated than that I use

609
00:22:17,630 --> 00:22:19,850
that template engine as an engine to

610
00:22:19,850 --> 00:22:21,799
grab me the markup and combine it with

611
00:22:21,799 --> 00:22:22,440
that data

612
00:22:22,440 --> 00:22:25,110
and it used the optimized precompiled

613
00:22:25,110 --> 00:22:28,550
javascript version of the template

614
00:22:28,550 --> 00:22:30,960
alright so handlebar j/s just to show a

615
00:22:30,960 --> 00:22:32,820
couple of things this is just there's

616
00:22:32,820 --> 00:22:34,470
actually several JavaScript files but of

617
00:22:34,470 --> 00:22:35,810
course you can combine them all together

618
00:22:35,810 --> 00:22:38,460
it's really nothing more than a bunch of

619
00:22:38,460 --> 00:22:41,610
fancy you know regular expressions and

620
00:22:41,610 --> 00:22:42,810
processing and things but I'm

621
00:22:42,810 --> 00:22:44,640
essentially generating my JavaScript

622
00:22:44,640 --> 00:22:46,350
right here that's what I'm doing is I'm

623
00:22:46,350 --> 00:22:48,480
just building up strings of JavaScript

624
00:22:48,480 --> 00:22:51,530
that represent the optimized output of

625
00:22:51,530 --> 00:22:55,380
your text templates let's take a look at

626
00:22:55,380 --> 00:22:56,640
what some of those templates might look

627
00:22:56,640 --> 00:22:58,620
like so if you're interested in my

628
00:22:58,620 --> 00:23:01,350
particular approach to templating so

629
00:23:01,350 --> 00:23:04,980
this is a master template file you can

630
00:23:04,980 --> 00:23:06,420
see here at the top that I declare a

631
00:23:06,420 --> 00:23:08,580
template section that's what this dollar

632
00:23:08,580 --> 00:23:10,950
sign colon is and I give it a name I use

633
00:23:10,950 --> 00:23:13,470
kind of the CSS approach here so IDs

634
00:23:13,470 --> 00:23:15,330
have the pound and then I have my

635
00:23:15,330 --> 00:23:16,890
doctype here and of course I know that

636
00:23:16,890 --> 00:23:20,040
ie bug have got no whitespace before my

637
00:23:20,040 --> 00:23:22,140
dog died but then I just sum

638
00:23:22,140 --> 00:23:24,240
substantially doing HTML and then here

639
00:23:24,240 --> 00:23:26,340
I'm gonna drop in a sub template a style

640
00:23:26,340 --> 00:23:27,960
sub template that's what the @ symbol

641
00:23:27,960 --> 00:23:31,530
does down later you see in the body I've

642
00:23:31,530 --> 00:23:34,050
got dropping in the content and footer

643
00:23:34,050 --> 00:23:36,690
sub templates so this is my master

644
00:23:36,690 --> 00:23:38,280
template for every page on this side of

645
00:23:38,280 --> 00:23:40,320
course there's only one right now but my

646
00:23:40,320 --> 00:23:44,070
individual template template done index

647
00:23:44,070 --> 00:23:45,930
dot HTML by the way filenames doesn't

648
00:23:45,930 --> 00:23:47,220
matter you can have whatever you wanted

649
00:23:47,220 --> 00:23:49,230
to be but here I'm basically saying well

650
00:23:49,230 --> 00:23:52,170
I'm going to extend sort of simple

651
00:23:52,170 --> 00:23:54,090
object-oriented extension if you will

652
00:23:54,090 --> 00:23:55,830
I'm extending that master template and

653
00:23:55,830 --> 00:24:00,360
I'm going to basically here declare some

654
00:24:00,360 --> 00:24:02,850
some values that are going to happen at

655
00:24:02,850 --> 00:24:04,620
runtime when this sub template is called

656
00:24:04,620 --> 00:24:06,720
but all these do are going to select

657
00:24:06,720 --> 00:24:08,760
other sub templates so there's no

658
00:24:08,760 --> 00:24:10,920
mathematics going on or data formatting

659
00:24:10,920 --> 00:24:12,870
or any other logic that you don't want

660
00:24:12,870 --> 00:24:14,460
to have here the only logic that happens

661
00:24:14,460 --> 00:24:16,620
is presentational logic deciding which

662
00:24:16,620 --> 00:24:19,230
templates need to happen so for instance

663
00:24:19,230 --> 00:24:20,490
when I'm logged in I'm going to show a

664
00:24:20,490 --> 00:24:22,080
different set of or when there's

665
00:24:22,080 --> 00:24:23,250
comments I'm going to show a different

666
00:24:23,250 --> 00:24:25,880
template than when there's not comments

667
00:24:25,880 --> 00:24:29,160
I wanted to show you real quick I'm kind

668
00:24:29,160 --> 00:24:30,480
of running short a little short in time

669
00:24:30,480 --> 00:24:31,560
but I want to show you real quick a

670
00:24:31,560 --> 00:24:33,600
couple of other pieces of code so this

671
00:24:33,600 --> 00:24:35,130
is that validation code that I was

672
00:24:35,130 --> 00:24:36,090
talking about this

673
00:24:36,090 --> 00:24:37,799
is very very simple I just wrote some

674
00:24:37,799 --> 00:24:40,620
some functions that that I can run in

675
00:24:40,620 --> 00:24:42,029
both places you can do whatever

676
00:24:42,029 --> 00:24:43,980
validation you want as long as it's not

677
00:24:43,980 --> 00:24:47,130
you know tied to there being a Dom as

678
00:24:47,130 --> 00:24:49,679
long as it deals with JSON data valleys

679
00:24:49,679 --> 00:24:51,120
and then you can run it in both places

680
00:24:51,120 --> 00:24:53,490
here I just have a different one for the

681
00:24:53,490 --> 00:24:55,770
full name property and the URL property

682
00:24:55,770 --> 00:24:57,750
and I can apply rules that will in this

683
00:24:57,750 --> 00:25:00,630
code to run in both places same is true

684
00:25:00,630 --> 00:25:02,340
of formatting I didn't really Express

685
00:25:02,340 --> 00:25:04,049
that much but when I'm for when I'm

686
00:25:04,049 --> 00:25:06,510
getting data back from a from an ajax

687
00:25:06,510 --> 00:25:08,190
request i need to format that on-the-fly

688
00:25:08,190 --> 00:25:10,559
need to make sure that HTML characters

689
00:25:10,559 --> 00:25:12,120
are properly escaped and things like

690
00:25:12,120 --> 00:25:13,919
that so that's another thing that you

691
00:25:13,919 --> 00:25:16,950
the URL or the UI architecture does

692
00:25:16,950 --> 00:25:19,260
usually for you and that you have full

693
00:25:19,260 --> 00:25:20,880
control over this now you can pass it

694
00:25:20,880 --> 00:25:23,010
into a formatting function and replace

695
00:25:23,010 --> 00:25:24,480
your characters and all of those things

696
00:25:24,480 --> 00:25:26,220
and you can do that either in the

697
00:25:26,220 --> 00:25:29,490
browser on the server last thing full

698
00:25:29,490 --> 00:25:31,860
disclosure the back end of this

699
00:25:31,860 --> 00:25:33,570
application the black box of this

700
00:25:33,570 --> 00:25:36,419
application is a PHP file when I gave

701
00:25:36,419 --> 00:25:38,070
this demo at South by Southwest that

702
00:25:38,070 --> 00:25:39,659
actually crashed and then I went back

703
00:25:39,659 --> 00:25:41,429
and I was like man that sucks why did it

704
00:25:41,429 --> 00:25:43,620
crash halfway through my demo some of it

705
00:25:43,620 --> 00:25:45,390
worked and then it didn't and as I

706
00:25:45,390 --> 00:25:47,159
discovered it was the PHP that crashed

707
00:25:47,159 --> 00:25:49,169
so all the JavaScript was awesome and it

708
00:25:49,169 --> 00:25:51,029
worked and it was the PHP that sucked so

709
00:25:51,029 --> 00:25:53,250
full disclosure there's some PHP going

710
00:25:53,250 --> 00:25:56,460
on but this is only doing the crappy

711
00:25:56,460 --> 00:25:58,500
stuff of you know managing my sessions

712
00:25:58,500 --> 00:26:00,059
and all that other crap but the last

713
00:26:00,059 --> 00:26:01,980
line is the important one it just

714
00:26:01,980 --> 00:26:04,200
encodes it to JSON and spits it out and

715
00:26:04,200 --> 00:26:05,640
the rest of the world is beautiful junk

716
00:26:05,640 --> 00:26:08,370
for javascript last thing on full

717
00:26:08,370 --> 00:26:10,649
disclosure is to say that at the moment

718
00:26:10,649 --> 00:26:13,620
I'm still experimenting with the jump

719
00:26:13,620 --> 00:26:16,470
between a web request and an execution

720
00:26:16,470 --> 00:26:19,230
context for JavaScript this is called

721
00:26:19,230 --> 00:26:22,440
the the gateway interface it goes by jsg

722
00:26:22,440 --> 00:26:24,929
I in the JavaScript world there are J

723
00:26:24,929 --> 00:26:28,020
SGI things like v8 cgi that can do this

724
00:26:28,020 --> 00:26:29,159
automatically for you

725
00:26:29,159 --> 00:26:30,990
i'm trying to evaluate the best way to

726
00:26:30,990 --> 00:26:32,700
do this it's basically how do you

727
00:26:32,700 --> 00:26:35,100
translate a set of HTTP headers into an

728
00:26:35,100 --> 00:26:38,190
execution context for javascript so at

729
00:26:38,190 --> 00:26:40,770
the moment I have some really terrible

730
00:26:40,770 --> 00:26:43,620
ugly PHP that's doing it but that's the

731
00:26:43,620 --> 00:26:45,360
only part that's actually happening in

732
00:26:45,360 --> 00:26:48,270
the stack that's PHP and very soon this

733
00:26:48,270 --> 00:26:49,410
crap is going to go

734
00:26:49,410 --> 00:26:51,780
and basically all this is doing again

735
00:26:51,780 --> 00:26:54,860
for full disclosure is I'm simply

736
00:26:54,860 --> 00:26:57,510
executing my JavaScript here I'm calling

737
00:26:57,510 --> 00:26:59,370
my engine and passing it a JavaScript

738
00:26:59,370 --> 00:27:00,960
file so that's really all the PHP is

739
00:27:00,960 --> 00:27:02,940
doing but I took advantage of the fact

740
00:27:02,940 --> 00:27:04,680
that PHP is pretty good about giving me

741
00:27:04,680 --> 00:27:06,540
those headers and session management all

742
00:27:06,540 --> 00:27:10,050
those things so we've got like one or

743
00:27:10,050 --> 00:27:12,690
two minutes left and I think that's

744
00:27:12,690 --> 00:27:15,030
substantially what I wanted to show for

745
00:27:15,030 --> 00:27:18,960
the presentation are there any last

746
00:27:18,960 --> 00:27:42,420
questions so I'm a huge fan of

747
00:27:42,420 --> 00:27:44,130
server-side JavaScript and there's a lot

748
00:27:44,130 --> 00:27:45,750
of different ways to take it it's gonna

749
00:27:45,750 --> 00:27:47,610
make sense for some companies to go with

750
00:27:47,610 --> 00:27:49,590
that architecture some of them it's not

751
00:27:49,590 --> 00:27:51,060
for instance if you're in the dotnet

752
00:27:51,060 --> 00:27:53,010
world you really want the smallest

753
00:27:53,010 --> 00:27:54,960
footprint of change to that architecture

754
00:27:54,960 --> 00:27:56,640
as possible because it's really hard to

755
00:27:56,640 --> 00:27:59,340
adapt things in that world so for them

756
00:27:59,340 --> 00:28:00,900
it wouldn't make sense to go with a

757
00:28:00,900 --> 00:28:02,790
really complex you know CouchDB and

758
00:28:02,790 --> 00:28:04,260
nodejs kind of thing because they're

759
00:28:04,260 --> 00:28:06,030
gonna have to rethink their entire world

760
00:28:06,030 --> 00:28:08,040
but if you can just tell them run some

761
00:28:08,040 --> 00:28:09,600
synchronous JavaScript in this small

762
00:28:09,600 --> 00:28:11,880
little sandbox give that control to your

763
00:28:11,880 --> 00:28:13,200
front-end developers and let the

764
00:28:13,200 --> 00:28:14,820
back-end developers only worry about

765
00:28:14,820 --> 00:28:16,890
data and session management things I

766
00:28:16,890 --> 00:28:18,480
think can prove a little bit I think

767
00:28:18,480 --> 00:28:20,880
there's certainly a use case for some

768
00:28:20,880 --> 00:28:22,170
more forward thinking or more

769
00:28:22,170 --> 00:28:23,700
experimental companies that want to go

770
00:28:23,700 --> 00:28:25,680
full fledge totally JavaScript on the

771
00:28:25,680 --> 00:28:27,840
server and all of this code should work

772
00:28:27,840 --> 00:28:29,880
exactly perfectly in that type of

773
00:28:29,880 --> 00:28:33,680
environment good question

774
00:28:33,680 --> 00:28:37,650
anybody else awesome go forth and

775
00:28:37,650 --> 00:28:39,360
rethink in your eye architecture there

776
00:28:39,360 --> 00:28:41,040
is a middle end it's time to give it a

777
00:28:41,040 --> 00:28:44,460
name so thanks a lot

