1
00:00:12,190 --> 00:00:17,150

hello is that good okay um hi my name is

2
00:00:17,150 --> 00:00:19,130
Amy Chang I'm a web developer with New

3
00:00:19,130 --> 00:00:21,860
York Magazine and I'm also an artist now

4
00:00:21,860 --> 00:00:23,660
each and every one of you has also had

5
00:00:23,660 --> 00:00:25,640
personal has also had personal

6
00:00:25,640 --> 00:00:27,680
experience making art maybe when you

7
00:00:27,680 --> 00:00:29,419
were child you worked with crayon or

8
00:00:29,419 --> 00:00:31,369
maybe you picked up painting as a hobby

9
00:00:31,369 --> 00:00:33,980
as an adult and even if you didn't

10
00:00:33,980 --> 00:00:36,380
progress past the crown stage well I

11
00:00:36,380 --> 00:00:37,940
have good news for you if you know

12
00:00:37,940 --> 00:00:40,850
JavaScript you can make art so in this

13
00:00:40,850 --> 00:00:43,340
talk we're gonna recreate two famous

14
00:00:43,340 --> 00:00:45,470
masterpieces of Modern Art the spot

15
00:00:45,470 --> 00:00:47,780
painting series by Damien Hirst and the

16
00:00:47,780 --> 00:00:49,910
composition series by Pierre Mondrian

17
00:00:49,910 --> 00:00:52,340
and we're gonna recreate these artworks

18
00:00:52,340 --> 00:00:55,610
as a way to explore the artistic

19
00:00:55,610 --> 00:00:59,870
capabilities of JavaScript so just like

20
00:00:59,870 --> 00:01:02,180
painting we're gonna start with a html5

21
00:01:02,180 --> 00:01:04,699
canvas API which is JavaScript blank

22
00:01:04,699 --> 00:01:07,579
canvas and so the canvas API is a way

23
00:01:07,579 --> 00:01:09,610
for the browser to tell the computer to

24
00:01:09,610 --> 00:01:12,560
dynamically draw bitmap graphics to the

25
00:01:12,560 --> 00:01:16,069
screen in the recent past we've had to

26
00:01:16,069 --> 00:01:17,780
download third-party plugins like flash

27
00:01:17,780 --> 00:01:19,640
and Java in order to do this but

28
00:01:19,640 --> 00:01:21,710
nowadays this capability is present in

29
00:01:21,710 --> 00:01:24,140
the most recent versions of all major

30
00:01:24,140 --> 00:01:28,069
browsers so here we have code to draw a

31
00:01:28,069 --> 00:01:32,149
circle here are the parts I wanna go

32
00:01:32,149 --> 00:01:34,280
over so we have something called VAR CT

33
00:01:34,280 --> 00:01:37,819
x equals canvas get context 2d so

34
00:01:37,819 --> 00:01:39,829
according to specs this is the actual

35
00:01:39,829 --> 00:01:41,689
interface that your browser is using to

36
00:01:41,689 --> 00:01:44,090
talk to the computer here we set it to D

37
00:01:44,090 --> 00:01:46,459
to D but if you were here for lives

38
00:01:46,459 --> 00:01:48,679
talked earlier today she also mentioned

39
00:01:48,679 --> 00:01:51,020
canvas now if you set that to WebGL you

40
00:01:51,020 --> 00:01:53,209
could start working in three-dimensional

41
00:01:53,209 --> 00:01:54,889
space but for this talk we're just only

42
00:01:54,889 --> 00:01:56,179
going to work in two-dimensional space

43
00:01:56,179 --> 00:01:58,999
they don't have a draw function and in

44
00:01:58,999 --> 00:02:01,100
our draw function we are telling the

45
00:02:01,100 --> 00:02:04,159
computer to start drawing and we want an

46
00:02:04,159 --> 00:02:07,399
arc shape and we want this arc shape to

47
00:02:07,399 --> 00:02:10,700
be drawn 360 degrees and we want the

48
00:02:10,700 --> 00:02:12,890
shape to have an outline so this draw

49
00:02:12,890 --> 00:02:15,290
function is being passed as a callback

50
00:02:15,290 --> 00:02:17,510
to something called roof request

51
00:02:17,510 --> 00:02:19,520
animation frame which also made an

52
00:02:19,520 --> 00:02:21,050
appearance in David's talk about

53
00:02:21,050 --> 00:02:21,770
animation

54
00:02:21,770 --> 00:02:24,500
so basically request animation frame is

55
00:02:24,500 --> 00:02:27,140
based is a smarter set interval function

56
00:02:27,140 --> 00:02:29,660
and if you pass a callback to this the

57
00:02:29,660 --> 00:02:31,730
browser is going to assume that you're

58
00:02:31,730 --> 00:02:34,010
doing animation and as such the browser

59
00:02:34,010 --> 00:02:36,620
is going to do some performance stuff to

60
00:02:36,620 --> 00:02:39,680
make it smoother an interesting thing

61
00:02:39,680 --> 00:02:42,080
about this animation request animation

62
00:02:42,080 --> 00:02:44,390
frame is that the callback will not be

63
00:02:44,390 --> 00:02:47,330
executed until the current dom repaint

64
00:02:47,330 --> 00:02:49,640
or animation is done completing it also

65
00:02:49,640 --> 00:02:51,890
means that if your browser tab is not in

66
00:02:51,890 --> 00:02:56,900
focus that code will not run so we're

67
00:02:56,900 --> 00:02:58,910
gonna draw many many circles in an

68
00:02:58,910 --> 00:03:01,060
effort to recreate the spot painting and

69
00:03:01,060 --> 00:03:03,380
in order to do this we're gonna use some

70
00:03:03,380 --> 00:03:05,630
help we're gonna have some help from a

71
00:03:05,630 --> 00:03:09,560
framework called p5.js so beef p5.js was

72
00:03:09,560 --> 00:03:11,540
designed for artists beginners and

73
00:03:11,540 --> 00:03:14,090
designers but is even though it's kind

74
00:03:14,090 --> 00:03:16,610
of designed for non-programmers it's

75
00:03:16,610 --> 00:03:18,200
still capable of doing a lot of stuff

76
00:03:18,200 --> 00:03:21,200
you want to do in this talk so p5.js is

77
00:03:21,200 --> 00:03:23,480
actually an offshoot of a java library

78
00:03:23,480 --> 00:03:25,220
called processing which was created at

79
00:03:25,220 --> 00:03:28,010
the MIT Media Lab and the intention of

80
00:03:28,010 --> 00:03:30,380
Processing's creators was to turn

81
00:03:30,380 --> 00:03:32,900
artists into programmers and programmers

82
00:03:32,900 --> 00:03:35,630
into artists and this philosophy is

83
00:03:35,630 --> 00:03:39,350
inherited by p5 a disclaimer my

84
00:03:39,350 --> 00:03:42,020
intention is to talk about cons is to

85
00:03:42,020 --> 00:03:44,030
introduce you to concepts not

86
00:03:44,030 --> 00:03:46,610
necessarily advocate p5.js

87
00:03:46,610 --> 00:03:48,860
and those of you who've worked with

88
00:03:48,860 --> 00:03:51,800
javascript for a long time know that the

89
00:03:51,800 --> 00:03:53,870
exes D and the agony of JavaScript is

90
00:03:53,870 --> 00:03:55,340
that there are many ways to accomplish

91
00:03:55,340 --> 00:03:58,550
the same task for example here are three

92
00:03:58,550 --> 00:04:00,860
ways to draw the same circle in three

93
00:04:00,860 --> 00:04:05,420
different frameworks so p5 fabric and

94
00:04:05,420 --> 00:04:07,700
easel all rely on the canvas API and

95
00:04:07,700 --> 00:04:10,520
what's similar in all these code

96
00:04:10,520 --> 00:04:11,960
examples is that it allows the

97
00:04:11,960 --> 00:04:14,570
programmer to draw an ellipse or draw a

98
00:04:14,570 --> 00:04:16,850
circle define the horizontal position

99
00:04:16,850 --> 00:04:19,489
the vertical position as well as the

100
00:04:19,489 --> 00:04:21,920
horizontal or vertical radius and also

101
00:04:21,920 --> 00:04:24,800
there's a method to fill this circle

102
00:04:24,800 --> 00:04:30,500
with color

103
00:04:30,510 --> 00:04:34,350
so in 1996 interview Damien Hirst's

104
00:04:34,350 --> 00:04:36,960
let's go back to you this day me and her

105
00:04:36,960 --> 00:04:38,790
sort of described his series of spot

106
00:04:38,790 --> 00:04:41,100
paintings as a sculpture about infinity

107
00:04:41,100 --> 00:04:43,530
and on his website he lists about 90

108
00:04:43,530 --> 00:04:47,760
spot paintings red from 1992 to to sorry

109
00:04:47,760 --> 00:04:48,720
yeah yeah

110
00:04:48,720 --> 00:04:53,610
1992 to 2012 so about 4 per year and

111
00:04:53,610 --> 00:04:55,470
we're gonna do many we're gonna drink

112
00:04:55,470 --> 00:04:57,630
procedurally generate many many spot

113
00:04:57,630 --> 00:05:09,469
paintings in just a couple of minutes

114
00:05:09,479 --> 00:05:13,379
one two three four and we just generated

115
00:05:13,379 --> 00:05:14,999
four spot paintings in less than a

116
00:05:14,999 --> 00:05:18,089
minute so let's see what's happening in

117
00:05:18,089 --> 00:05:20,759
their code so p5 requires a setup

118
00:05:20,759 --> 00:05:23,400
function and this setup function runs at

119
00:05:23,400 --> 00:05:25,979
the beginning of code execution so in

120
00:05:25,979 --> 00:05:27,749
this setup function we're creating a

121
00:05:27,749 --> 00:05:30,719
canvas element 800 pixels wide 500

122
00:05:30,719 --> 00:05:32,909
pixels tall and we're setting the

123
00:05:32,909 --> 00:05:34,830
background of our blank canvas to white

124
00:05:34,830 --> 00:05:39,300
and then we have no loop this so we have

125
00:05:39,300 --> 00:05:41,129
a draw function and this draw function

126
00:05:41,129 --> 00:05:43,139
is being passed as a callback to

127
00:05:43,139 --> 00:05:45,180
requestanimationframe which runs

128
00:05:45,180 --> 00:05:47,879
continuously and what no loop does it's

129
00:05:47,879 --> 00:05:50,099
basically tells p5 to run this block

130
00:05:50,099 --> 00:05:52,580
only once and not to keep doing it so

131
00:05:52,580 --> 00:05:55,110
here you'll notice two nested for loops

132
00:05:55,110 --> 00:05:57,629
the first for loop draws spot paintings

133
00:05:57,629 --> 00:05:59,999
across the canvas while the second for

134
00:05:59,999 --> 00:06:02,370
loops are the second for loop draw spots

135
00:06:02,370 --> 00:06:04,589
down the canvas we have a color function

136
00:06:04,589 --> 00:06:07,080
no stroke another and our familiar

137
00:06:07,080 --> 00:06:12,330
ellipse function so a color function

138
00:06:12,330 --> 00:06:16,469
basically fills the preceding shape that

139
00:06:16,469 --> 00:06:17,819
is a shape to find after the color

140
00:06:17,819 --> 00:06:23,310
function is called with color so I just

141
00:06:23,310 --> 00:06:24,839
demonstrated that javascript is an

142
00:06:24,839 --> 00:06:26,699
artistic medium that can do procedural

143
00:06:26,699 --> 00:06:28,589
generation and the procedure we're

144
00:06:28,589 --> 00:06:32,300
executing is the following three lines

145
00:06:32,300 --> 00:06:34,680
now I feel like the spot painting we

146
00:06:34,680 --> 00:06:37,110
generated the colors of it aren't that

147
00:06:37,110 --> 00:06:39,659
faithful to the original so I'm gonna

148
00:06:39,659 --> 00:06:42,740
parameters color in an effort to get it

149
00:06:42,740 --> 00:06:46,409
more to get closer to the original spot

150
00:06:46,409 --> 00:06:50,009
painting so returning to our color

151
00:06:50,009 --> 00:06:53,270
function so you notice that fill is the

152
00:06:53,270 --> 00:06:55,649
accepting three arguments and what these

153
00:06:55,649 --> 00:06:58,289
three arguments refer to depends on the

154
00:06:58,289 --> 00:07:00,449
color mode that we're using so color

155
00:07:00,449 --> 00:07:03,270
mode is the color default color mode

156
00:07:03,270 --> 00:07:06,149
that p5 uses is RGB which stands for red

157
00:07:06,149 --> 00:07:08,159
green and blue and what these arguments

158
00:07:08,159 --> 00:07:09,959
refer to the first argument refers to

159
00:07:09,959 --> 00:07:11,729
how much red is in the color

160
00:07:11,729 --> 00:07:13,770
the second argument refers to how much

161
00:07:13,770 --> 00:07:15,839
green is in the color and the third

162
00:07:15,839 --> 00:07:17,669
argument first how much blue is in the

163
00:07:17,669 --> 00:07:19,440
color and you'll also notice them

164
00:07:19,440 --> 00:07:21,960
using p5 s random function to randomly

165
00:07:21,960 --> 00:07:24,330
determine how much red green and blue is

166
00:07:24,330 --> 00:07:26,490
in the color we're gonna change our

167
00:07:26,490 --> 00:07:28,860
color mode to HSV which stands for hue

168
00:07:28,860 --> 00:07:31,560
saturation and brightness tomorrow visnu

169
00:07:31,560 --> 00:07:32,730
is actually going to give a whole talk

170
00:07:32,730 --> 00:07:33,870
on these color modes so you're

171
00:07:33,870 --> 00:07:37,070
interested check out his talk tomorrow

172
00:07:37,070 --> 00:07:43,100
so what I did here is that I created GUI

173
00:07:43,100 --> 00:07:45,630
using the library that GUI

174
00:07:45,630 --> 00:07:49,920
dat GUI and it's a simple UI library

175
00:07:49,920 --> 00:07:51,330
that was released by the Google Data

176
00:07:51,330 --> 00:07:53,700
arts team a couple of years ago so what

177
00:07:53,700 --> 00:07:55,800
we have here is some UI elements that

178
00:07:55,800 --> 00:07:58,770
lets me change our color mode sliders

179
00:07:58,770 --> 00:08:00,990
that affect the range in which the

180
00:08:00,990 --> 00:08:02,730
random function is generating numbers

181
00:08:02,730 --> 00:08:06,180
and checkboxes that refer to whether or

182
00:08:06,180 --> 00:08:10,530
not I want to randomize those values so

183
00:08:10,530 --> 00:08:14,430
I'm changing it to HSB narrowing the

184
00:08:14,430 --> 00:08:17,010
color range as you can see we have a

185
00:08:17,010 --> 00:08:19,590
color theme going on but it's not that's

186
00:08:19,590 --> 00:08:23,160
not what we want to do we want to make

187
00:08:23,160 --> 00:08:26,130
the colors lighter but what I did I made

188
00:08:26,130 --> 00:08:27,990
it brighter and that's because I maxed

189
00:08:27,990 --> 00:08:30,000
out the saturation and brightness

190
00:08:30,000 --> 00:08:44,040
argument so let's make it dimmer

191
00:08:44,050 --> 00:08:48,430
I think that's close enough so what I

192
00:08:48,430 --> 00:08:50,170
did is that so

193
00:08:50,170 --> 00:08:53,050
we refactored code and we have a JSON

194
00:08:53,050 --> 00:08:55,089
object called machine state basically

195
00:08:55,089 --> 00:08:58,260
the UI is ultra is a changing these

196
00:08:58,260 --> 00:09:00,399
properties and these properties are

197
00:09:00,399 --> 00:09:02,320
passed into our refactored color

198
00:09:02,320 --> 00:09:07,750
function you also notice that in

199
00:09:07,750 --> 00:09:11,070
addition to making those arguments

200
00:09:11,070 --> 00:09:13,180
parameters we're using we're still

201
00:09:13,180 --> 00:09:15,070
relying pretty heavily on the random

202
00:09:15,070 --> 00:09:19,570
function to generate colors but what if

203
00:09:19,570 --> 00:09:34,500
we randomized other visual elements

204
00:09:34,510 --> 00:09:36,459
so what's happening here is that I'm

205
00:09:36,459 --> 00:09:39,570
using the p5 random function to randomly

206
00:09:39,570 --> 00:09:42,570
determine the position of each line and

207
00:09:42,570 --> 00:09:45,279
width and thickness as well as the

208
00:09:45,279 --> 00:09:48,130
curvature of those lines and what we

209
00:09:48,130 --> 00:09:51,699
just did is we inadvertently created

210
00:09:51,699 --> 00:09:54,190
alain de Kooning's preparatory paintings

211
00:09:54,190 --> 00:09:55,750
and like the preparatory paintings

212
00:09:55,750 --> 00:10:03,610
you'll notice sorry that the lines are v

213
00:10:03,610 --> 00:10:05,230
clustered towards the middle and that's

214
00:10:05,230 --> 00:10:07,810
not really that random well that's

215
00:10:07,810 --> 00:10:09,610
because we are using a different kind of

216
00:10:09,610 --> 00:10:15,480
random function called random Gaussian

217
00:10:15,480 --> 00:10:19,420
so random Gaussian generates numbers

218
00:10:19,420 --> 00:10:21,699
according to a standard JV standard

219
00:10:21,699 --> 00:10:24,339
deviation what that means is that it

220
00:10:24,339 --> 00:10:26,589
will more likely generate numbers that

221
00:10:26,589 --> 00:10:28,930
are closer to the average of the range

222
00:10:28,930 --> 00:10:30,880
you passed in for example let's say you

223
00:10:30,880 --> 00:10:33,610
use a range of one to a hundred

224
00:10:33,610 --> 00:10:35,889
that means random Gaussian will generate

225
00:10:35,889 --> 00:10:38,410
or more likely generate numbers that are

226
00:10:38,410 --> 00:10:40,000
closer to the average of all the numbers

227
00:10:40,000 --> 00:10:45,760
between 1 and 100 another way to

228
00:10:45,760 --> 00:10:48,010
describe what we just did is that we are

229
00:10:48,010 --> 00:10:49,899
I'm sorry

230
00:10:49,899 --> 00:10:52,600
painting with algorithms so this is the

231
00:10:52,600 --> 00:10:55,329
source code of random Gaussian and

232
00:10:55,329 --> 00:10:57,100
you'll notice here that there's a bunch

233
00:10:57,100 --> 00:10:59,470
of math happening there square root and

234
00:10:59,470 --> 00:11:01,149
there's log numbers and what all this

235
00:11:01,149 --> 00:11:03,550
math does is generate numbers according

236
00:11:03,550 --> 00:11:06,250
to mathematical formulas that would

237
00:11:06,250 --> 00:11:08,110
generate numbers that are plotted along

238
00:11:08,110 --> 00:11:16,180
a standard standard deviation but there

239
00:11:16,180 --> 00:11:18,579
are many many other algorithms that we

240
00:11:18,579 --> 00:11:19,930
can use so in the previous two examples

241
00:11:19,930 --> 00:11:23,230
I just used random on this screen here

242
00:11:23,230 --> 00:11:26,100
is a mathematical formula that generates

243
00:11:26,100 --> 00:11:28,569
Mandelbrot set fractals and these are

244
00:11:28,569 --> 00:11:31,569
shapes that happen in the happens in

245
00:11:31,569 --> 00:11:34,839
nature so I feel that mathematics is one

246
00:11:34,839 --> 00:11:36,699
expression of the world and that art is

247
00:11:36,699 --> 00:11:39,160
another and that computation can act as

248
00:11:39,160 --> 00:11:42,430
a bridge between the two so in this

249
00:11:42,430 --> 00:11:57,730
example

250
00:11:57,740 --> 00:12:00,890
I did not make this example

251
00:12:00,890 --> 00:12:04,070
so we're basically exploring a

252
00:12:04,070 --> 00:12:06,950
Mandelbrot fractal and this person just

253
00:12:06,950 --> 00:12:09,200
is using the canvas API and native

254
00:12:09,200 --> 00:12:11,060
JavaScript to do all this and what's

255
00:12:11,060 --> 00:12:13,760
happening on in the behind the scenes is

256
00:12:13,760 --> 00:12:15,590
that mathematical formula that I showed

257
00:12:15,590 --> 00:12:22,040
in the previous slides another yet

258
00:12:22,040 --> 00:12:23,450
another way of viewing the work we just

259
00:12:23,450 --> 00:12:25,940
did is that we created a system and

260
00:12:25,940 --> 00:12:28,370
those of you who've worked with Web Apps

261
00:12:28,370 --> 00:12:30,080
know that javascript is perfectly

262
00:12:30,080 --> 00:12:33,010
capable of managing many disparate

263
00:12:33,010 --> 00:12:35,690
disparate parts such as UI elements

264
00:12:35,690 --> 00:12:39,260
database calls API calls user

265
00:12:39,260 --> 00:12:43,670
interaction so let's frame the spot

266
00:12:43,670 --> 00:12:46,010
painting demos as an art system in the

267
00:12:46,010 --> 00:12:48,050
system we have parameters the random

268
00:12:48,050 --> 00:12:50,360
function the color function the ellipse

269
00:12:50,360 --> 00:12:54,410
function for loops and a GUI and all of

270
00:12:54,410 --> 00:12:57,140
this created the spot painting in the

271
00:12:57,140 --> 00:12:59,540
preparatory painting demo we have curves

272
00:12:59,540 --> 00:13:02,300
lines random functions and Gaussian

273
00:13:02,300 --> 00:13:05,120
functions so let's be a little bit more

274
00:13:05,120 --> 00:13:07,160
ambitious in the construction and design

275
00:13:07,160 --> 00:13:10,370
of a system let's recreate Mondrian's

276
00:13:10,370 --> 00:13:19,950
composition painting

277
00:13:19,960 --> 00:13:24,070
so here I'm using random to place three

278
00:13:24,070 --> 00:13:27,640
boxes within on the canvas as well as

279
00:13:27,640 --> 00:13:33,040
the width and height of each box just a

280
00:13:33,040 --> 00:13:35,649
side note p5 also has a nice convenience

281
00:13:35,649 --> 00:13:37,360
method for creating rectangles it's

282
00:13:37,360 --> 00:13:40,360
called rect or ect now if you'll notice

283
00:13:40,360 --> 00:13:43,240
this painting also is not a faithful

284
00:13:43,240 --> 00:13:47,170
recreation of this and we could spend

285
00:13:47,170 --> 00:13:49,990
some time writing more logic to get

286
00:13:49,990 --> 00:13:51,760
closer to this but I think that's kind

287
00:13:51,760 --> 00:13:53,950
of under utilizing what JavaScript can

288
00:13:53,950 --> 00:13:58,390
do for us so what if we made each block

289
00:13:58,390 --> 00:14:11,060
and automata

290
00:14:11,070 --> 00:14:12,930
so what's happening here is that each

291
00:14:12,930 --> 00:14:16,199
block has a set has two rules of finding

292
00:14:16,199 --> 00:14:17,880
its behavior defining how its running

293
00:14:17,880 --> 00:14:29,639
across the screen part two what's

294
00:14:29,639 --> 00:14:31,500
happening here is that the yellow square

295
00:14:31,500 --> 00:14:33,329
is chasing the blue square blue

296
00:14:33,329 --> 00:14:35,910
rectangle and once it reaches its target

297
00:14:35,910 --> 00:14:51,590
is just kind of globs on to it

298
00:14:51,600 --> 00:14:53,460
so what's happening here is that each

299
00:14:53,460 --> 00:14:55,170
rectangle is actually an object is

300
00:14:55,170 --> 00:14:57,570
actually an object called self and

301
00:14:57,570 --> 00:14:59,130
within cell there are two functions

302
00:14:59,130 --> 00:15:01,350
update and render render we're not going

303
00:15:01,350 --> 00:15:03,390
to go into render render basically calls

304
00:15:03,390 --> 00:15:05,250
the rect method and the fill method and

305
00:15:05,250 --> 00:15:07,470
is the function that actually draw stuff

306
00:15:07,470 --> 00:15:09,330
to a screen what's the what's more

307
00:15:09,330 --> 00:15:10,740
interesting about this object is the

308
00:15:10,740 --> 00:15:14,250
update function so here you'll see math

309
00:15:14,250 --> 00:15:16,650
shows up again in the update function so

310
00:15:16,650 --> 00:15:18,900
when each rectangle is initialized as a

311
00:15:18,900 --> 00:15:22,490
Cell object we're using random to pick a

312
00:15:22,490 --> 00:15:24,870
location within the canvas and what

313
00:15:24,870 --> 00:15:27,510
update is doing is that it's determining

314
00:15:27,510 --> 00:15:30,120
how far away this object is the

315
00:15:30,120 --> 00:15:32,250
rectangle is from its target location

316
00:15:32,250 --> 00:15:36,360
and it modifies its current position to

317
00:15:36,360 --> 00:15:39,770
get closer to where it needs to be

318
00:15:39,770 --> 00:15:43,380
you'll also notice that we just created

319
00:15:43,380 --> 00:15:45,420
an omission so

320
00:15:45,420 --> 00:15:48,360
request frame animation runs

321
00:15:48,360 --> 00:15:50,310
continuously as I mentioned before and

322
00:15:50,310 --> 00:15:53,130
we can consider each time it calls Oh

323
00:15:53,130 --> 00:15:55,230
each time it executes the callback that

324
00:15:55,230 --> 00:15:58,230
it's actually one frame of animation and

325
00:15:58,230 --> 00:16:00,630
it's running so fast that looks like the

326
00:16:00,630 --> 00:16:04,900
rectangle is moving across the screen

327
00:16:04,910 --> 00:16:07,050
here's another example of a more

328
00:16:07,050 --> 00:16:12,360
complicated system we've modified our

329
00:16:12,360 --> 00:16:18,510
spot painting to be alive now some of

330
00:16:18,510 --> 00:16:20,520
you might recognize this as flocking

331
00:16:20,520 --> 00:16:23,220
behavior and you'd be correct it is a

332
00:16:23,220 --> 00:16:25,710
flocking it is an example of flocking

333
00:16:25,710 --> 00:16:27,420
behavior and basically what's happening

334
00:16:27,420 --> 00:16:29,610
here is just a modified flocking code

335
00:16:29,610 --> 00:16:35,820
example

336
00:16:35,830 --> 00:16:39,430
so each flock contains a Boyd or a

337
00:16:39,430 --> 00:16:41,800
separate entity and each entity has many

338
00:16:41,800 --> 00:16:44,529
has a four functions that determines its

339
00:16:44,529 --> 00:16:46,360
behavior and this is one function and

340
00:16:46,360 --> 00:16:48,550
it's for separation and basically what's

341
00:16:48,550 --> 00:16:51,010
happening here is our code is making

342
00:16:51,010 --> 00:16:53,260
sure each spot is not getting too close

343
00:16:53,260 --> 00:16:57,790
to its neighbor but we also want our

344
00:16:57,790 --> 00:17:00,010
spots close enough to form a flock and

345
00:17:00,010 --> 00:17:02,380
what's happening here in this function

346
00:17:02,380 --> 00:17:03,820
and this function is a lot of vector

347
00:17:03,820 --> 00:17:11,530
math to do that now why don't we create

348
00:17:11,530 --> 00:17:13,240
we could create a system that could

349
00:17:13,240 --> 00:17:15,040
learn rules from the data we give it

350
00:17:15,040 --> 00:17:17,290
well this is what machine learning is

351
00:17:17,290 --> 00:17:20,439
all about machine learning is basically

352
00:17:20,439 --> 00:17:22,600
a system that learns from its inputs in

353
00:17:22,600 --> 00:17:24,490
the preview examples we were very

354
00:17:24,490 --> 00:17:26,980
explicit rules as to how our system

355
00:17:26,980 --> 00:17:29,410
should operate and machine learning we

356
00:17:29,410 --> 00:17:31,780
don't quite know how the system will

357
00:17:31,780 --> 00:17:35,350
behave we have like kind of a goal for

358
00:17:35,350 --> 00:17:37,720
it but we're pretty hands-off with how

359
00:17:37,720 --> 00:17:42,490
the how the system operates so let's

360
00:17:42,490 --> 00:17:53,260
watch code paint

361
00:17:53,270 --> 00:18:04,419
just debugging it

362
00:18:04,429 --> 00:18:20,710
okay there we go

363
00:18:20,720 --> 00:18:34,450
just give it a little bit

364
00:18:34,460 --> 00:18:39,590
so what is our code painting it's me

365
00:18:39,590 --> 00:18:41,690
obviously it doesn't look like exactly

366
00:18:41,690 --> 00:18:43,879
like me but I feel like what the code

367
00:18:43,879 --> 00:18:46,730
just did was a has a very modern art

368
00:18:46,730 --> 00:18:48,710
feel to it and I feel like this is kind

369
00:18:48,710 --> 00:18:50,570
of like more expressive of how

370
00:18:50,570 --> 00:18:53,330
JavaScript sees the world or at least

371
00:18:53,330 --> 00:18:59,549
this photograph that gave it

372
00:18:59,559 --> 00:19:02,110
here are some other paintings that did

373
00:19:02,110 --> 00:19:04,039
you notice that they're kind of

374
00:19:04,039 --> 00:19:05,899
different but in some ways they're kind

375
00:19:05,899 --> 00:19:08,450
of the same that's because our inputs

376
00:19:08,450 --> 00:19:12,259
are the same so what's happening here is

377
00:19:12,259 --> 00:19:13,820
that I'm using a machine learning

378
00:19:13,820 --> 00:19:16,220
library written in JavaScript can you

379
00:19:16,220 --> 00:19:21,529
believe it called synaptic Jas and in

380
00:19:21,529 --> 00:19:23,360
this code block we have get pixel

381
00:19:23,360 --> 00:19:24,830
function which I won't go into so

382
00:19:24,830 --> 00:19:27,769
basically yet pixel sorry get pixel data

383
00:19:27,769 --> 00:19:29,929
looks at the photograph and goes through

384
00:19:29,929 --> 00:19:32,210
every pixel and gets the color from each

385
00:19:32,210 --> 00:19:34,879
and every pixel in the iterate function

386
00:19:34,879 --> 00:19:37,850
we have our system learning from that

387
00:19:37,850 --> 00:19:40,820
photograph so in their code we have this

388
00:19:40,820 --> 00:19:43,639
so Nannette synaptic j s gives us a

389
00:19:43,639 --> 00:19:46,129
computational model of one neuron call

390
00:19:46,129 --> 00:19:49,490
it perceptron so in this iterate

391
00:19:49,490 --> 00:19:51,110
function we have two for loops and

392
00:19:51,110 --> 00:19:52,549
that's because we're going through the

393
00:19:52,549 --> 00:19:54,820
horizontal and vertical rows of the

394
00:19:54,820 --> 00:20:00,679
original photograph then we have

395
00:20:00,679 --> 00:20:02,090
something called perceptron that

396
00:20:02,090 --> 00:20:02,899
activate

397
00:20:02,899 --> 00:20:05,480
so this activate functions under the

398
00:20:05,480 --> 00:20:08,470
hood is a activation formula or

399
00:20:08,470 --> 00:20:11,570
mathematical formula which is which

400
00:20:11,570 --> 00:20:13,820
defines the outputs that our neuron will

401
00:20:13,820 --> 00:20:16,279
have as basically this very complicated

402
00:20:16,279 --> 00:20:18,259
mathematical formula which would be

403
00:20:18,259 --> 00:20:19,970
impossible to do by hand but it's pretty

404
00:20:19,970 --> 00:20:22,879
trivial for computers so this

405
00:20:22,879 --> 00:20:24,710
mathematical formula is basically

406
00:20:24,710 --> 00:20:28,159
Sciences best guess at how a bio

407
00:20:28,159 --> 00:20:30,409
electrical signal actually moves through

408
00:20:30,409 --> 00:20:33,769
a neuron and so in the activate function

409
00:20:33,769 --> 00:20:36,049
our single perceptron is looking at the

410
00:20:36,049 --> 00:20:38,090
data and trying to figure out what it's

411
00:20:38,090 --> 00:20:38,840
looking at

412
00:20:38,840 --> 00:20:42,259
in the propagate function what our

413
00:20:42,259 --> 00:20:44,600
neuron is doing is that using a dynamic

414
00:20:44,600 --> 00:20:48,320
rate that is how often it's looking at

415
00:20:48,320 --> 00:20:51,230
it looks at the pixel location and tries

416
00:20:51,230 --> 00:20:55,179
to make a guess as to what that color is

417
00:20:55,179 --> 00:20:57,860
here the preview function is the actual

418
00:20:57,860 --> 00:21:00,590
drawing actual painting function so it's

419
00:21:00,590 --> 00:21:04,340
taking the the canvases image data and

420
00:21:04,340 --> 00:21:06,649
rewriting every single pixel that's why

421
00:21:06,649 --> 00:21:08,239
we have two for loops because it's going

422
00:21:08,239 --> 00:21:10,730
through every single row and every

423
00:21:10,730 --> 00:21:14,210
single column and it's making it's

424
00:21:14,210 --> 00:21:16,999
basically overwriting each pixel of

425
00:21:16,999 --> 00:21:19,220
color with its own best guess as to what

426
00:21:19,220 --> 00:21:23,720
that colored is so in and so in this

427
00:21:23,720 --> 00:21:25,489
example what we're doing is we're not

428
00:21:25,489 --> 00:21:27,710
explicitly telling hey at this pixel

429
00:21:27,710 --> 00:21:30,289
location it should be this color what

430
00:21:30,289 --> 00:21:31,700
we're actually what we're telling our

431
00:21:31,700 --> 00:21:34,190
little JavaScript neuron or our neuron

432
00:21:34,190 --> 00:21:37,519
implemented in JavaScript that hey given

433
00:21:37,519 --> 00:21:39,169
this pixel location what do you think

434
00:21:39,169 --> 00:21:41,359
this color shouldn't be judging from

435
00:21:41,359 --> 00:21:43,210
what you saw

436
00:21:43,210 --> 00:21:45,080
you'll also notice we have

437
00:21:45,080 --> 00:21:47,210
requestanimationframe and so what that

438
00:21:47,210 --> 00:21:50,029
does is that through each call so with

439
00:21:50,029 --> 00:21:52,759
each frame or perceptron is continually

440
00:21:52,759 --> 00:21:54,830
learning and that's why we see the

441
00:21:54,830 --> 00:21:58,489
painting change over time now we take

442
00:21:58,489 --> 00:22:01,460
the idea of creating an art system based

443
00:22:01,460 --> 00:22:04,639
on machine learning we get deep style

444
00:22:04,639 --> 00:22:08,419
transfer so in this paper a neural

445
00:22:08,419 --> 00:22:10,460
algorithm artistic style the authors

446
00:22:10,460 --> 00:22:12,859
basically created a convolutional neural

447
00:22:12,859 --> 00:22:14,659
network so it's basically like our

448
00:22:14,659 --> 00:22:17,119
perceptron the many many more neurons

449
00:22:17,119 --> 00:22:19,820
and many many layers of neurons and so

450
00:22:19,820 --> 00:22:22,070
what this neural network is doing is

451
00:22:22,070 --> 00:22:24,769
that it's looking at painting and it's

452
00:22:24,769 --> 00:22:26,779
figuring out all the distinct features

453
00:22:26,779 --> 00:22:29,029
of this painting oh this by the way is a

454
00:22:29,029 --> 00:22:31,129
screenshot from the paper so it's

455
00:22:31,129 --> 00:22:34,070
looking at the painting figuring out the

456
00:22:34,070 --> 00:22:36,350
distinct features and then given a

457
00:22:36,350 --> 00:22:38,210
photograph also learning about this

458
00:22:38,210 --> 00:22:40,399
photograph thinking what are its

459
00:22:40,399 --> 00:22:42,200
distinct features what are all the rules

460
00:22:42,200 --> 00:22:45,080
that dictate this photograph and then

461
00:22:45,080 --> 00:22:46,639
one of the rules that dictate this

462
00:22:46,639 --> 00:22:48,710
painting and then it tries to combine

463
00:22:48,710 --> 00:22:52,179
everything it has learned into one image

464
00:22:52,179 --> 00:22:55,340
so in this screenshot the source for

465
00:22:55,340 --> 00:22:56,590
regressive is in

466
00:22:56,590 --> 00:23:00,940
topmost right hand corner and in each

467
00:23:00,940 --> 00:23:03,580
subsequent sort of picture it's applying

468
00:23:03,580 --> 00:23:13,720
that painting style to the photograph so

469
00:23:13,720 --> 00:23:16,840
code is an art medium but as machine

470
00:23:16,840 --> 00:23:18,910
learning has demonstrated it can be an

471
00:23:18,910 --> 00:23:21,940
artist collaborator so here's a

472
00:23:21,940 --> 00:23:24,540
collaboration between me and JavaScript

473
00:23:24,540 --> 00:23:26,560
we have to wait a while because it's

474
00:23:26,560 --> 00:23:28,570
learning from that photograph from

475
00:23:28,570 --> 00:23:35,080
before unless it crashed oh there it

476
00:23:35,080 --> 00:24:17,850
goes

477
00:24:17,860 --> 00:24:21,800
so in this joint venture JavaScript is

478
00:24:21,800 --> 00:24:24,020
making decisions as to what color to use

479
00:24:24,020 --> 00:24:27,380
where to make a stroke and how

480
00:24:27,380 --> 00:24:29,360
transparent each stroke should be

481
00:24:29,360 --> 00:24:35,000
whereas I'm contributing hey this add a

482
00:24:35,000 --> 00:24:36,590
little bit of red to spice it up a

483
00:24:36,590 --> 00:24:43,460
little bit sort of a review javascript

484
00:24:43,460 --> 00:24:45,500
is an artistic medium that can do pursue

485
00:24:45,500 --> 00:24:48,200
generation parameters ation painting

486
00:24:48,200 --> 00:24:50,000
with algorithms creating and running

487
00:24:50,000 --> 00:24:52,130
systems and self learning question mark

488
00:24:52,130 --> 00:24:54,200
we have a question mark here because

489
00:24:54,200 --> 00:24:56,480
even though I showed some deep style

490
00:24:56,480 --> 00:24:58,370
transfer stuff javascript is not capable

491
00:24:58,370 --> 00:25:00,980
of doing deep cell transfer stuff in a

492
00:25:00,980 --> 00:25:02,990
timely manner because it does not have

493
00:25:02,990 --> 00:25:05,000
access to the raw processing power it

494
00:25:05,000 --> 00:25:08,059
needs you need like some super gain a

495
00:25:08,059 --> 00:25:11,480
souped up video game machine to do that

496
00:25:11,480 --> 00:25:14,059
but that's now maybe you'll be working

497
00:25:14,059 --> 00:25:16,130
on some serviceworker stuff to get deep

498
00:25:16,130 --> 00:25:18,910
style transfer happening

499
00:25:18,910 --> 00:25:21,679
you also notice that these rules might

500
00:25:21,679 --> 00:25:25,130
apply to other programming languages but

501
00:25:25,130 --> 00:25:27,170
I think JavaScript is a unique artistic

502
00:25:27,170 --> 00:25:29,720
medium because iterations are cheap

503
00:25:29,720 --> 00:25:32,750
since it doesn't need to compile you can

504
00:25:32,750 --> 00:25:35,240
continually make changes to your code

505
00:25:35,240 --> 00:25:37,550
and then also continually refine your

506
00:25:37,550 --> 00:25:40,460
ideas according to the piece or about

507
00:25:40,460 --> 00:25:43,820
the piece you're making and also it's

508
00:25:43,820 --> 00:25:46,309
easily accessible to everyone with an

509
00:25:46,309 --> 00:25:53,270
internet internet connection this is no

510
00:25:53,270 --> 00:25:56,179
way a comprehensive list if you're

511
00:25:56,179 --> 00:25:57,740
interested in this stuff I would invite

512
00:25:57,740 --> 00:25:59,300
you to further explore the capabilities

513
00:25:59,300 --> 00:26:02,150
of JavaScript as an artistic medium but

514
00:26:02,150 --> 00:26:05,300
also to not treat your artwork as an app

515
00:26:05,300 --> 00:26:08,090
so what might be a bug that crashes your

516
00:26:08,090 --> 00:26:09,920
minimal Viable Product might actually

517
00:26:09,920 --> 00:26:12,830
have some very interesting aesthetic

518
00:26:12,830 --> 00:26:15,740
effects so I hope this talk has gotten

519
00:26:15,740 --> 00:26:18,320
you excited about making art with

520
00:26:18,320 --> 00:26:21,830
JavaScript thanks

