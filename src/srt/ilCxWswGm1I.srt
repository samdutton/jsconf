1
00:00:18,740 --> 00:00:21,860

the presentations called test Alejo

2
00:00:21,860 --> 00:00:25,230
squeezing ketsu tiny mobile tubes my

3
00:00:25,230 --> 00:00:27,300
name is Felix caisson defer and I'm

4
00:00:27,300 --> 00:00:29,669
involved in a bunch of projects one of

5
00:00:29,669 --> 00:00:32,129
them is note copter note copters the

6
00:00:32,129 --> 00:00:33,690
full day went of programming flying

7
00:00:33,690 --> 00:00:36,390
robots with JavaScript we started this

8
00:00:36,390 --> 00:00:38,070
in Berlin last year at she askin for you

9
00:00:38,070 --> 00:00:39,870
and the people I saw with with are

10
00:00:39,870 --> 00:00:41,790
actually here there's torsten Robin and

11
00:00:41,790 --> 00:00:44,460
Tim and what's really fun is that here

12
00:00:44,460 --> 00:00:46,199
Jess conf yes we're actually able to do

13
00:00:46,199 --> 00:00:47,820
node cop the event for the activity day

14
00:00:47,820 --> 00:00:50,760
tomorrow so I'll not say too much about

15
00:00:50,760 --> 00:00:52,339
this I'll just give you a little teaser

16
00:00:52,339 --> 00:00:54,180
this is kind of what it's going to look

17
00:00:54,180 --> 00:00:56,820
like so if you want to come maybe you

18
00:00:56,820 --> 00:00:58,500
can trade with somebody if you haven't

19
00:00:58,500 --> 00:01:00,299
signed up already what's this should be

20
00:01:00,299 --> 00:01:02,729
fun unfortunately I don't get to play

21
00:01:02,729 --> 00:01:05,729
with flying robots for living so have a

22
00:01:05,729 --> 00:01:07,710
day job i'm a co-founder at this company

23
00:01:07,710 --> 00:01:10,650
at least we have a robot in the logo so

24
00:01:10,650 --> 00:01:13,320
that's good so we're called trans loaded

25
00:01:13,320 --> 00:01:15,299
and we do file uploading and file

26
00:01:15,299 --> 00:01:16,950
processing as a service so we help

27
00:01:16,950 --> 00:01:18,780
companies receive user-generated media

28
00:01:18,780 --> 00:01:20,580
files and then we convert videos and

29
00:01:20,580 --> 00:01:22,530
images and all that stuff and we censor

30
00:01:22,530 --> 00:01:24,030
original files in the modified stuff

31
00:01:24,030 --> 00:01:27,270
back I've also been involved with a no

32
00:01:27,270 --> 00:01:29,250
chess project I was one of the first

33
00:01:29,250 --> 00:01:30,960
contributors to no trace and did a lot

34
00:01:30,960 --> 00:01:34,320
of early contributions the reason this

35
00:01:34,320 --> 00:01:36,899
happened was when we built trans noted

36
00:01:36,899 --> 00:01:39,539
we were trying to get upload progress

37
00:01:39,539 --> 00:01:42,030
bars for users and back when we did says

38
00:01:42,030 --> 00:01:43,820
this was really hard to do in javascript

39
00:01:43,820 --> 00:01:46,590
basically the only option you had was to

40
00:01:46,590 --> 00:01:48,899
constantly ask your web server hey I'm

41
00:01:48,899 --> 00:01:50,579
uploading this file right now how much

42
00:01:50,579 --> 00:01:52,259
data have you received so far and so you

43
00:01:52,259 --> 00:01:54,479
keep pulling the web server and in order

44
00:01:54,479 --> 00:01:55,859
to actually be able to pull the web

45
00:01:55,859 --> 00:01:57,600
server like this the web server kind of

46
00:01:57,600 --> 00:01:59,159
needs to be aware of that you're going

47
00:01:59,159 --> 00:02:00,719
to pull him and said that it keeps track

48
00:02:00,719 --> 00:02:02,520
of the upload the streams and this was

49
00:02:02,520 --> 00:02:04,259
really hard with the web server said

50
00:02:04,259 --> 00:02:05,609
we're outside back then most notably

51
00:02:05,609 --> 00:02:10,350
Mabley Apache and we saw nodejs and no

52
00:02:10,350 --> 00:02:11,910
chairs was really great because suddenly

53
00:02:11,910 --> 00:02:13,440
we could do this really easily on the

54
00:02:13,440 --> 00:02:15,840
application level we would just use the

55
00:02:15,840 --> 00:02:17,760
normal node HTTP stuff and would be able

56
00:02:17,760 --> 00:02:19,950
to stream and upload in and send kind of

57
00:02:19,950 --> 00:02:21,690
keep track of the state for the clients

58
00:02:21,690 --> 00:02:23,490
asking about the upload progress though

59
00:02:23,490 --> 00:02:25,980
that was fun but we were using node way

60
00:02:25,980 --> 00:02:28,290
too early so I ended up spending more

61
00:02:28,290 --> 00:02:29,790
time contributing to know it and fixing

62
00:02:29,790 --> 00:02:30,910
bugs and doing stuff

63
00:02:30,910 --> 00:02:32,990
working on the startup but it was fun

64
00:02:32,990 --> 00:02:35,000
these days I don't do much of the note

65
00:02:35,000 --> 00:02:36,980
core anymore but a maintains the modules

66
00:02:36,980 --> 00:02:39,080
and maintains a MySQL module which is a

67
00:02:39,080 --> 00:02:40,970
pure JavaScript implementation of my

68
00:02:40,970 --> 00:02:43,280
sequel protocol and I do formidable

69
00:02:43,280 --> 00:02:45,830
which is a module for parsing

70
00:02:45,830 --> 00:02:47,360
multi-platform data and I'm going to

71
00:02:47,360 --> 00:02:50,210
talk about this in a bit a little bit

72
00:02:50,210 --> 00:02:52,190
blasphemy I'm kind of moving away from

73
00:02:52,190 --> 00:02:55,730
nodejs these days to go I will not say

74
00:02:55,730 --> 00:02:56,960
too much about go but it's really

75
00:02:56,960 --> 00:02:58,760
beautiful language so if you want to

76
00:02:58,760 --> 00:03:00,230
hear more about it to find me later and

77
00:03:00,230 --> 00:03:03,770
I'll talk your ear off and yeah check it

78
00:03:03,770 --> 00:03:05,540
out I haven't contributed yet but I plan

79
00:03:05,540 --> 00:03:08,840
to and we kind of went to bed very late

80
00:03:08,840 --> 00:03:10,580
last night so chances are i'm going to

81
00:03:10,580 --> 00:03:12,230
say stupid stuff and incorrect stuff

82
00:03:12,230 --> 00:03:14,690
when this happens just let me know so I

83
00:03:14,690 --> 00:03:16,430
can kind of clarify afterwards or

84
00:03:16,430 --> 00:03:18,920
something so let's get started let's

85
00:03:18,920 --> 00:03:21,200
talk about file uploads and let's kind

86
00:03:21,200 --> 00:03:23,030
of put things into perspective about how

87
00:03:23,030 --> 00:03:24,800
we get file uploads on the internet or

88
00:03:24,800 --> 00:03:26,900
can is a history there's so this trip

89
00:03:26,900 --> 00:03:30,800
starts in 1971 1971 was great because we

90
00:03:30,800 --> 00:03:35,480
get this thing called ftp you have to

91
00:03:35,480 --> 00:03:37,100
appreciate how long ever time this was

92
00:03:37,100 --> 00:03:40,090
to go so i'll see 114 was published in

93
00:03:40,090 --> 00:03:43,250
1971 this was three years before tcp/ip

94
00:03:43,250 --> 00:03:46,880
we had ftp which i saw it was insane and

95
00:03:46,880 --> 00:03:48,410
two must have taking a lot of foresight

96
00:03:48,410 --> 00:03:49,730
i actually don't know what's networking

97
00:03:49,730 --> 00:03:52,220
stacks were at that time and what's also

98
00:03:52,220 --> 00:03:54,140
amazing that ftp it kind of remains the

99
00:03:54,140 --> 00:03:56,480
state of art of internet uploads for 25

100
00:03:56,480 --> 00:03:58,280
years so if you wanted to bring files to

101
00:03:58,280 --> 00:04:01,570
the internet you'd usually use ftp

102
00:04:01,570 --> 00:04:04,670
what's kind of said about it ftp it's

103
00:04:04,670 --> 00:04:06,440
not said that it's being replaced but

104
00:04:06,440 --> 00:04:07,640
it's kind of sad that it's being

105
00:04:07,640 --> 00:04:09,380
replaced by a proprietary technology

106
00:04:09,380 --> 00:04:11,690
mostly amazon s3 and I'll kind of talk

107
00:04:11,690 --> 00:04:13,760
about this a little bit later but let's

108
00:04:13,760 --> 00:04:15,590
fast forward for 25 years basically

109
00:04:15,590 --> 00:04:17,690
nothing happens uploads on the web don't

110
00:04:17,690 --> 00:04:20,320
change and then 1995 comes around and

111
00:04:20,320 --> 00:04:23,180
1925 was a cool year a bunch of things

112
00:04:23,180 --> 00:04:25,700
happened PHP happened for the better or

113
00:04:25,700 --> 00:04:28,520
worse internet explorer happened for the

114
00:04:28,520 --> 00:04:30,740
better or worse javascript happened for

115
00:04:30,740 --> 00:04:32,830
the better or worse hopefully the better

116
00:04:32,830 --> 00:04:35,540
HTML 2 20 s release there was the first

117
00:04:35,540 --> 00:04:37,760
time HTML was standardized and it gave

118
00:04:37,760 --> 00:04:40,400
browsers a way to implement it in a more

119
00:04:40,400 --> 00:04:42,409
compatible fashion than before

120
00:04:42,409 --> 00:04:44,899
and just a day after this there was a

121
00:04:44,899 --> 00:04:46,580
new off see coming out which described

122
00:04:46,580 --> 00:04:49,309
how to do file uploads through HTML this

123
00:04:49,309 --> 00:04:50,899
was later on merchant with the HTML

124
00:04:50,899 --> 00:04:53,899
specification and was part of HTML 3 and

125
00:04:53,899 --> 00:04:57,830
it's now still part of html5 and this

126
00:04:57,830 --> 00:05:01,339
was RC 1867 form-based file upload in

127
00:05:01,339 --> 00:05:03,529
HTML you may be familiar with other

128
00:05:03,529 --> 00:05:05,269
works FC all services this was done by

129
00:05:05,269 --> 00:05:08,029
larry maher center and one notable RFC

130
00:05:08,029 --> 00:05:11,599
he has also worked on is RC 2324 does

131
00:05:11,599 --> 00:05:14,059
anybody know what is this this is a

132
00:05:14,059 --> 00:05:16,969
hypertext coffee pot control protocol so

133
00:05:16,969 --> 00:05:19,939
if you've ever received the 418 I'm a

134
00:05:19,939 --> 00:05:21,679
teapot status code from a web server

135
00:05:21,679 --> 00:05:23,839
that's this evil genius at work it's

136
00:05:23,839 --> 00:05:28,099
Larry anyway I admire this RC because it

137
00:05:28,099 --> 00:05:29,539
made something that is kind of complex

138
00:05:29,539 --> 00:05:31,999
underneath incredibly easy and I kind of

139
00:05:31,999 --> 00:05:33,139
want to show you how easy you've all

140
00:05:33,139 --> 00:05:34,519
done this before but I kind of want to

141
00:05:34,519 --> 00:05:36,289
go through the troll a little bit so

142
00:05:36,289 --> 00:05:40,729
let's let's do programming all right so

143
00:05:40,729 --> 00:05:42,199
let's say we want to do a file upload

144
00:05:42,199 --> 00:05:43,759
and we want to do it like we would do it

145
00:05:43,759 --> 00:05:46,550
in 1995 so we're doing this form that

146
00:05:46,550 --> 00:05:48,619
HTML thing and we're going to do this

147
00:05:48,619 --> 00:05:51,169
form and it's going to get it's a font

148
00:05:51,169 --> 00:05:55,550
size okay for everybody okay cool we're

149
00:05:55,550 --> 00:05:56,779
going to get it an action let's say

150
00:05:56,779 --> 00:06:01,339
we're going to /a action as post no no

151
00:06:01,339 --> 00:06:05,199
no no too late last night messages post

152
00:06:05,199 --> 00:06:08,990
and the action of / and one of the

153
00:06:08,990 --> 00:06:10,789
things GRC defined was an encoding type

154
00:06:10,789 --> 00:06:13,759
before we had and it's called

155
00:06:13,759 --> 00:06:19,969
multi-platform data like this before we

156
00:06:19,969 --> 00:06:21,259
have multi-part formed at us the only

157
00:06:21,259 --> 00:06:23,419
way to get form submitted on the web

158
00:06:23,419 --> 00:06:25,789
worse by URL encoding them and doing

159
00:06:25,789 --> 00:06:27,589
this with files is technically possible

160
00:06:27,589 --> 00:06:30,019
but the escaping mechanism would blow up

161
00:06:30,019 --> 00:06:32,059
the payload quite a bit so you would

162
00:06:32,059 --> 00:06:34,009
have a two or 3x increase in payload

163
00:06:34,009 --> 00:06:35,300
size because you have all these e escape

164
00:06:35,300 --> 00:06:37,399
sequence is going on and so people they

165
00:06:37,399 --> 00:06:39,110
had to come up with a new format to kind

166
00:06:39,110 --> 00:06:40,099
of put files into and those whose

167
00:06:40,099 --> 00:06:43,459
multi-platform data another thing that

168
00:06:43,459 --> 00:06:46,099
they did sa extended the input element

169
00:06:46,099 --> 00:06:48,169
and they created this input type called

170
00:06:48,169 --> 00:06:52,219
file and we're going to put this gives

171
00:06:52,219 --> 00:06:54,630
us a name and say my upload

172
00:06:54,630 --> 00:06:57,150
on now we need a little submit button

173
00:06:57,150 --> 00:07:01,910
this was actually part of HTML before

174
00:07:01,910 --> 00:07:10,020
submit value and some / form okay this

175
00:07:10,020 --> 00:07:15,930
should give us a file uploader okay so

176
00:07:15,930 --> 00:07:17,610
you've seen this before this is

177
00:07:17,610 --> 00:07:19,320
basically the file selection element

178
00:07:19,320 --> 00:07:21,390
notoriously difficult to start with CSS

179
00:07:21,390 --> 00:07:24,390
but it works and what you can do is you

180
00:07:24,390 --> 00:07:26,010
can choose a file and we can select this

181
00:07:26,010 --> 00:07:28,680
tiny image here and hit submit and

182
00:07:28,680 --> 00:07:30,870
nothing happens why does nothing

183
00:07:30,870 --> 00:07:32,040
happened because we haven't written a

184
00:07:32,040 --> 00:07:35,970
backend for it so it's 1995 we don't

185
00:07:35,970 --> 00:07:37,170
have a lot of options for back in

186
00:07:37,170 --> 00:07:39,690
technology so let's use my 1995

187
00:07:39,690 --> 00:07:44,400
technology its use PHP let's go and do

188
00:07:44,400 --> 00:07:50,270
PHP and what this looks like is this

189
00:07:50,270 --> 00:07:56,640
print our files and I'll show you first

190
00:07:56,640 --> 00:07:57,690
how it works then I'll talk a bit a

191
00:07:57,690 --> 00:07:59,640
little bit about it what we can do now

192
00:07:59,640 --> 00:08:06,210
oh there's one mistake form that PHP all

193
00:08:06,210 --> 00:08:09,390
right now we need a web server and these

194
00:08:09,390 --> 00:08:13,430
days luckily PHP does ship with one and

195
00:08:13,430 --> 00:08:17,250
we can do form that PHP and we can

196
00:08:17,250 --> 00:08:20,160
select the file and hit submit and

197
00:08:20,160 --> 00:08:22,380
what's this is basically doing is we

198
00:08:22,380 --> 00:08:23,910
just implemented file uploading so

199
00:08:23,910 --> 00:08:26,010
forcing front-end and back-end we were

200
00:08:26,010 --> 00:08:28,230
just hitting submit button to payload

201
00:08:28,230 --> 00:08:30,330
get encoding multi-platform data PHP

202
00:08:30,330 --> 00:08:32,370
automatically picked up on that decoded

203
00:08:32,370 --> 00:08:34,140
sub payload and gave us reference to the

204
00:08:34,140 --> 00:08:37,229
file on disk as a temporary file there's

205
00:08:37,229 --> 00:08:40,110
a lot of problems with this but what I

206
00:08:40,110 --> 00:08:42,450
think is amazing is that this to me is

207
00:08:42,450 --> 00:08:44,340
the appropriate amount of complexity

208
00:08:44,340 --> 00:08:45,750
file uploading should have on the web

209
00:08:45,750 --> 00:08:47,370
and anything thats kind of gets more

210
00:08:47,370 --> 00:08:49,560
complex is kind of and we've

211
00:08:49,560 --> 00:08:51,090
gotten a lot worse with this over time

212
00:08:51,090 --> 00:08:53,340
and i'll talk about this so this is this

213
00:08:53,340 --> 00:08:55,890
is a really cool in terms of complexity

214
00:08:55,890 --> 00:08:57,810
what's not so cool is that features were

215
00:08:57,810 --> 00:09:00,030
missing so what's most notable about

216
00:09:00,030 --> 00:09:02,340
this is that this wasn't really a

217
00:09:02,340 --> 00:09:06,240
scriptable via JavaScript so we most

218
00:09:06,240 --> 00:09:07,980
notably had no way to get up

219
00:09:07,980 --> 00:09:10,170
progress events so the user was uploaded

220
00:09:10,170 --> 00:09:11,700
file and we would get no feedback on

221
00:09:11,700 --> 00:09:14,160
what's going on and even worse the

222
00:09:14,160 --> 00:09:15,720
process at the time when Damon shown

223
00:09:15,720 --> 00:09:17,070
existence the status bar at the bottom

224
00:09:17,070 --> 00:09:19,350
so the user had virtually virtually no

225
00:09:19,350 --> 00:09:22,020
indication so what happened on the web

226
00:09:22,020 --> 00:09:24,860
for a while we can enter the dark ages

227
00:09:24,860 --> 00:09:27,870
people look for solutions and the way

228
00:09:27,870 --> 00:09:29,280
happy to take anything coming along the

229
00:09:29,280 --> 00:09:31,590
way and flash it was and this was a huge

230
00:09:31,590 --> 00:09:33,720
step back from what we had in 1995 sure

231
00:09:33,720 --> 00:09:35,460
we get file upload progress events but

232
00:09:35,460 --> 00:09:36,900
dealing with these flash-based uploaders

233
00:09:36,900 --> 00:09:39,150
was just a huge pain in the ass we had

234
00:09:39,150 --> 00:09:40,590
to deal with us for a very long time

235
00:09:40,590 --> 00:09:44,100
which is unfortunate then like Lisa

236
00:09:44,100 --> 00:09:45,570
standard bodies started moving again

237
00:09:45,570 --> 00:09:47,190
after kind of taking a break for quite a

238
00:09:47,190 --> 00:09:50,100
bit and in 2008 they came up with this

239
00:09:50,100 --> 00:09:52,560
xml httprequest level two which is

240
00:09:52,560 --> 00:09:55,470
basically HX version 2 and they added a

241
00:09:55,470 --> 00:09:56,880
bunch of new features they basically

242
00:09:56,880 --> 00:09:58,410
give us the ability to file uploads

243
00:09:58,410 --> 00:10:00,690
previously HX could do file uploads they

244
00:10:00,690 --> 00:10:02,250
give us progress events for up and down

245
00:10:02,250 --> 00:10:04,370
loads they gave us cross-site request

246
00:10:04,370 --> 00:10:07,080
which is useful and they gave us a form

247
00:10:07,080 --> 00:10:08,640
data interface which actually allows us

248
00:10:08,640 --> 00:10:10,710
to create this multi-part formed at our

249
00:10:10,710 --> 00:10:13,560
request when using HX very easily and

250
00:10:13,560 --> 00:10:16,200
this is now part of the official hhx

251
00:10:16,200 --> 00:10:18,090
petrification it was merged into the

252
00:10:18,090 --> 00:10:20,130
main spec and it's good to go and in

253
00:10:20,130 --> 00:10:22,200
fact it's actually widely implemented at

254
00:10:22,200 --> 00:10:24,170
this point so seventy percent of all

255
00:10:24,170 --> 00:10:26,520
browsers that people are using have

256
00:10:26,520 --> 00:10:29,250
support for this API the most notable

257
00:10:29,250 --> 00:10:30,780
exception is always Internet Explorer

258
00:10:30,780 --> 00:10:33,600
didn't have it until version 10 but so

259
00:10:33,600 --> 00:10:34,710
if you have to support file uploads

260
00:10:34,710 --> 00:10:36,150
really well and Internet Explorer you

261
00:10:36,150 --> 00:10:38,040
will have to go back to the dark ages or

262
00:10:38,040 --> 00:10:40,530
do other unholy things but for all the

263
00:10:40,530 --> 00:10:44,040
new stuff it works really well 2009 they

264
00:10:44,040 --> 00:10:46,440
released another API as a file API

265
00:10:46,440 --> 00:10:48,630
what's the file API does it basically

266
00:10:48,630 --> 00:10:50,820
takes these file input elements and

267
00:10:50,820 --> 00:10:53,130
gives them a new property called dot

268
00:10:53,130 --> 00:10:55,050
files and this is essentially an array

269
00:10:55,050 --> 00:10:57,060
of file objects there's a file interface

270
00:10:57,060 --> 00:10:59,420
this gives you name and last modified

271
00:10:59,420 --> 00:11:01,920
and a bunch of other informations file

272
00:11:01,920 --> 00:11:05,340
size of the file and you can kind of

273
00:11:05,340 --> 00:11:06,630
play with it it also gives you a way to

274
00:11:06,630 --> 00:11:08,850
slice so you can say file that slice

275
00:11:08,850 --> 00:11:12,060
right 100 to 200 and this returns a blob

276
00:11:12,060 --> 00:11:14,370
what's important about this is the plot

277
00:11:14,370 --> 00:11:15,780
that this point doesn't get loaded into

278
00:11:15,780 --> 00:11:18,090
memory you just get a reference to it so

279
00:11:18,090 --> 00:11:19,170
if you actually want to load it into

280
00:11:19,170 --> 00:11:21,030
memory and breathe this data you have to

281
00:11:21,030 --> 00:11:21,670
use the file

282
00:11:21,670 --> 00:11:23,560
either interface kinda flower reader

283
00:11:23,560 --> 00:11:26,500
interface takes a file or a plot object

284
00:11:26,500 --> 00:11:28,780
and allows you to read the data in it's

285
00:11:28,780 --> 00:11:29,920
a little weird but it works really well

286
00:11:29,920 --> 00:11:32,080
and security Isis is also fine because

287
00:11:32,080 --> 00:11:34,030
you only get access to files if you user

288
00:11:34,030 --> 00:11:35,620
has selected them so you cannot just

289
00:11:35,620 --> 00:11:37,800
take random stuff from the hard disk

290
00:11:37,800 --> 00:11:41,140
what else so this is available and

291
00:11:41,140 --> 00:11:43,240
sixty-five percent of all browsers again

292
00:11:43,240 --> 00:11:44,800
the same limitation Internet Explorer

293
00:11:44,800 --> 00:11:48,820
version 10 is where it starts so you'd

294
00:11:48,820 --> 00:11:50,740
assume that by now everything is kind of

295
00:11:50,740 --> 00:11:55,150
very good I'm actually one second get my

296
00:11:55,150 --> 00:11:57,760
purse n denote the back so you would

297
00:11:57,760 --> 00:11:58,930
assume that by now we have seized

298
00:11:58,930 --> 00:12:01,030
powerful API and file uploading on the

299
00:12:01,030 --> 00:12:02,620
web should just be amazing and so much

300
00:12:02,620 --> 00:12:05,800
fun to do and easy but I don't think

301
00:12:05,800 --> 00:12:07,840
that's the case I think we made a huge

302
00:12:07,840 --> 00:12:09,400
amount of backwards progress in terms of

303
00:12:09,400 --> 00:12:11,950
simplicity in 1995 we had an appropriate

304
00:12:11,950 --> 00:12:14,050
amount of simplicity but we don't have

305
00:12:14,050 --> 00:12:16,300
this anymore even worse we don't even

306
00:12:16,300 --> 00:12:18,190
have two features while to implement we

307
00:12:18,190 --> 00:12:19,870
could do these things but we don't have

308
00:12:19,870 --> 00:12:22,060
them so let's take one example that I

309
00:12:22,060 --> 00:12:24,190
find very important and this is the

310
00:12:24,190 --> 00:12:26,980
sample of resume ability right now a lot

311
00:12:26,980 --> 00:12:28,900
of file upload us on the web like resume

312
00:12:28,900 --> 00:12:31,840
ability and by resume ability I mean you

313
00:12:31,840 --> 00:12:33,610
get to ninety-nine ninety-nine percent

314
00:12:33,610 --> 00:12:35,140
of an upload something happens and

315
00:12:35,140 --> 00:12:37,870
basically the SU hey there was an error

316
00:12:37,870 --> 00:12:40,270
can you upload this again and this is a

317
00:12:40,270 --> 00:12:42,160
few lucky if you're unlucky the progress

318
00:12:42,160 --> 00:12:43,660
bar just stops and doesn't tell me

319
00:12:43,660 --> 00:12:46,390
anything it was kind of unacceptable and

320
00:12:46,390 --> 00:12:48,250
I believe that this is actually the

321
00:12:48,250 --> 00:12:49,810
major reason why millions of cat videos

322
00:12:49,810 --> 00:12:53,220
get lost every year on the internet and

323
00:12:53,220 --> 00:12:55,300
this is also a problem when you kind of

324
00:12:55,300 --> 00:12:57,310
look at the landscape HD cameras are

325
00:12:57,310 --> 00:12:58,780
everywhere now if you buy a new device

326
00:12:58,780 --> 00:13:00,970
with a camera it will be HD and you get

327
00:13:00,970 --> 00:13:03,370
these huge file sizes so a 45 second

328
00:13:03,370 --> 00:13:05,770
video clip on iphone 5 is 100 megabytes

329
00:13:05,770 --> 00:13:07,870
that's a lot of data and unfortunately

330
00:13:07,870 --> 00:13:09,490
our app links are hardly keeping up with

331
00:13:09,490 --> 00:13:11,140
this I mean they're a thing so the

332
00:13:11,140 --> 00:13:12,460
download is usually faster than the

333
00:13:12,460 --> 00:13:14,590
upload and so kind of slow so if you

334
00:13:14,590 --> 00:13:16,720
have a Wi-Fi with a backing 5m bit

335
00:13:16,720 --> 00:13:19,060
connection uploading this 45-second clip

336
00:13:19,060 --> 00:13:21,730
takes you two and a half minutes it only

337
00:13:21,730 --> 00:13:24,760
gets worse from here lt10 to be 340 edge

338
00:13:24,760 --> 00:13:27,610
66 minutes this is terrible when you

339
00:13:27,610 --> 00:13:28,780
consider that we're living in a world

340
00:13:28,780 --> 00:13:30,550
where we can measure how 100

341
00:13:30,550 --> 00:13:32,110
milliseconds make a difference in user

342
00:13:32,110 --> 00:13:33,769
behavior and revenue so

343
00:13:33,769 --> 00:13:36,499
you're looking at minutes here you don't

344
00:13:36,499 --> 00:13:38,059
want to this up because if you

345
00:13:38,059 --> 00:13:39,439
 this up people will not come back

346
00:13:39,439 --> 00:13:41,089
this up people will not come back
to your site and if you run on a

347
00:13:41,089 --> 00:13:42,499
business model like Facebook or Twitter

348
00:13:42,499 --> 00:13:43,970
where you show these activity streams

349
00:13:43,970 --> 00:13:45,649
you really need that content because I

350
00:13:45,649 --> 00:13:47,209
don't go on facebook to look at walls of

351
00:13:47,209 --> 00:13:48,739
text I look at the pictures people

352
00:13:48,739 --> 00:13:50,389
upload and I look at the videos so you

353
00:13:50,389 --> 00:13:52,309
really want to nail this so how come

354
00:13:52,309 --> 00:13:55,069
does not be a solve problem and how

355
00:13:55,069 --> 00:13:57,920
could we even do this so let's say we

356
00:13:57,920 --> 00:13:59,299
want a sausage let's say we want to do

357
00:13:59,299 --> 00:14:02,049
this how can we resume an HTTP upload

358
00:14:02,049 --> 00:14:06,199
well whenever you have an HTTP you kind

359
00:14:06,199 --> 00:14:08,029
of consult the ancient scripture and by

360
00:14:08,029 --> 00:14:11,709
that i mean our see 2616 HTTP one at one

361
00:14:11,709 --> 00:14:13,910
actually HTTP is a lot like ancient

362
00:14:13,910 --> 00:14:16,069
scripture and the Bible so people

363
00:14:16,069 --> 00:14:17,779
basically think they understand

364
00:14:17,779 --> 00:14:19,009
everything and it explains the whole

365
00:14:19,009 --> 00:14:20,480
world but they really they're just pick

366
00:14:20,480 --> 00:14:21,949
and choose parts that they like and

367
00:14:21,949 --> 00:14:27,559
probably even get so strong so um let's

368
00:14:27,559 --> 00:14:29,809
htp doesn't say anything about uploads

369
00:14:29,809 --> 00:14:31,489
but it says something about this kind of

370
00:14:31,489 --> 00:14:33,829
similar range requests what range

371
00:14:33,829 --> 00:14:35,209
requests do is they allow you to

372
00:14:35,209 --> 00:14:36,889
retrieve a partial file from a web

373
00:14:36,889 --> 00:14:38,540
server so you can send a header called

374
00:14:38,540 --> 00:14:40,429
range and you can say i want to i don't

375
00:14:40,429 --> 00:14:42,589
know first 100 bytes of a file and the

376
00:14:42,589 --> 00:14:44,420
web server understands this it will

377
00:14:44,420 --> 00:14:46,040
reply with the content range header that

378
00:14:46,040 --> 00:14:47,809
kind of acknowledges that it's now

379
00:14:47,809 --> 00:14:50,480
transmitting a part of this file so this

380
00:14:50,480 --> 00:14:52,490
is good and it looks kind of like it

381
00:14:52,490 --> 00:14:54,470
would be useful for uploads so companies

382
00:14:54,470 --> 00:14:55,970
have started to use these headers for

383
00:14:55,970 --> 00:14:59,629
uploads most notably YouTube they have

384
00:14:59,629 --> 00:15:01,759
an API for resumable uploads and it's

385
00:15:01,759 --> 00:15:04,059
based on the Google gears protocol and

386
00:15:04,059 --> 00:15:07,100
they do a bunch of terrible things say

387
00:15:07,100 --> 00:15:09,110
and then the new status code 308 resume

388
00:15:09,110 --> 00:15:11,119
incomplete this is in violation of

389
00:15:11,119 --> 00:15:13,730
upcoming specifications I guess if you

390
00:15:13,730 --> 00:15:15,589
google you can invent status codes and

391
00:15:15,589 --> 00:15:17,269
not bother to register them but I think

392
00:15:17,269 --> 00:15:18,679
this ball gets him in trouble and it's

393
00:15:18,679 --> 00:15:20,179
also an interoperability problem with a

394
00:15:20,179 --> 00:15:22,720
lot of libraries and server side stuff

395
00:15:22,720 --> 00:15:24,889
they use as I said it's the content

396
00:15:24,889 --> 00:15:26,959
range and range chatters and unfortunate

397
00:15:26,959 --> 00:15:28,459
part about this is they are also in

398
00:15:28,459 --> 00:15:30,379
violation of upcoming specification so

399
00:15:30,379 --> 00:15:31,549
they are working on the HTTP

400
00:15:31,549 --> 00:15:34,429
specification again the HTTP bit working

401
00:15:34,429 --> 00:15:36,169
group and one of the things they define

402
00:15:36,169 --> 00:15:38,029
the set put requests which YouTube is

403
00:15:38,029 --> 00:15:39,919
using must explicitly not use these

404
00:15:39,919 --> 00:15:42,439
headers when they talk to a server so it

405
00:15:42,439 --> 00:15:44,299
works but you really shouldn't do it

406
00:15:44,299 --> 00:15:46,150
according to specification

407
00:15:46,150 --> 00:15:49,330
and they also use put to query would you

408
00:15:49,330 --> 00:15:51,430
scatter head for this to get the upload

409
00:15:51,430 --> 00:15:54,220
status it's kind of weird API but the

410
00:15:54,220 --> 00:15:55,720
last thing is kind of most important

411
00:15:55,720 --> 00:15:57,580
they actually have two similar protocol

412
00:15:57,580 --> 00:15:58,840
internally that's your use for google

413
00:15:58,840 --> 00:16:02,110
drive it's also public API and it

414
00:16:02,110 --> 00:16:04,300
actually looks a lot like the YouTube

415
00:16:04,300 --> 00:16:06,310
protocol but it's slightly incompatible

416
00:16:06,310 --> 00:16:09,220
and what's this says to me is that even

417
00:16:09,220 --> 00:16:10,870
Google cannot figure out how to make

418
00:16:10,870 --> 00:16:13,390
this work with HTTP they can make it

419
00:16:13,390 --> 00:16:15,040
work but they cannot figure out how to

420
00:16:15,040 --> 00:16:16,570
do it really well it's not it's not

421
00:16:16,570 --> 00:16:20,530
solved so assuming that it's not really

422
00:16:20,530 --> 00:16:22,240
solved in HTTP what else is kind of

423
00:16:22,240 --> 00:16:24,310
around in terms of prior art there's ms

424
00:16:24,310 --> 00:16:25,450
on a three which is big if you're

425
00:16:25,450 --> 00:16:26,680
dealing with files on the web right now

426
00:16:26,680 --> 00:16:28,750
they have a thing called multi-part API

427
00:16:28,750 --> 00:16:30,460
which is the most terrible name ever

428
00:16:30,460 --> 00:16:31,660
because it has nothing to do with

429
00:16:31,660 --> 00:16:33,490
multi-platform data which is what prod

430
00:16:33,490 --> 00:16:37,000
uploads to the web but or whatever what

431
00:16:37,000 --> 00:16:38,920
it allows you to do is to send files and

432
00:16:38,920 --> 00:16:41,170
chunks so you define the chunk size

433
00:16:41,170 --> 00:16:43,390
let's say a few megabytes and then you

434
00:16:43,390 --> 00:16:45,100
cut the file at these chunk intervals

435
00:16:45,100 --> 00:16:46,360
and you make individual requests

436
00:16:46,360 --> 00:16:48,870
uploading these chunks of the file and

437
00:16:48,870 --> 00:16:51,070
protocols not entirely unreasonable I

438
00:16:51,070 --> 00:16:53,410
mean sir API is a little weird but it's

439
00:16:53,410 --> 00:16:55,750
doable one thing that's really sucks

440
00:16:55,750 --> 00:16:57,220
about it this has a five megabyte

441
00:16:57,220 --> 00:17:00,010
minimum chunk size so if there's a

442
00:17:00,010 --> 00:17:02,170
network error you have to kind of go

443
00:17:02,170 --> 00:17:03,670
back five megabytes in the worst case

444
00:17:03,670 --> 00:17:05,140
and if you're on a mobile connections

445
00:17:05,140 --> 00:17:06,459
that really has a lot of network errors

446
00:17:06,459 --> 00:17:08,470
and it is very slow this may mean that

447
00:17:08,470 --> 00:17:10,209
you never make progress you used to just

448
00:17:10,209 --> 00:17:11,740
keep repeating the same chunk over and

449
00:17:11,740 --> 00:17:13,720
over again it's not really ideal maybe

450
00:17:13,720 --> 00:17:16,690
they can fix it maybe not um biggest

451
00:17:16,690 --> 00:17:18,400
problem I see with Amazon s3 is that its

452
00:17:18,400 --> 00:17:20,410
proprietary and this wouldn't be a

453
00:17:20,410 --> 00:17:22,450
problem by itself but Amazon s3 has kind

454
00:17:22,450 --> 00:17:24,850
of become such a force that open source

455
00:17:24,850 --> 00:17:27,120
storage solutions has adopted the api's

456
00:17:27,120 --> 00:17:30,040
just to be able to be compatible with

457
00:17:30,040 --> 00:17:31,630
the existing ecosystem of client

458
00:17:31,630 --> 00:17:33,670
libraries and this is really really bad

459
00:17:33,670 --> 00:17:35,560
because we used to have an open standard

460
00:17:35,560 --> 00:17:37,540
and protocol for this this was ftp

461
00:17:37,540 --> 00:17:39,640
unfortunately ftp is not web technology

462
00:17:39,640 --> 00:17:43,000
so nobody is using ftp anymore but now

463
00:17:43,000 --> 00:17:45,400
that amazon s3 is kind of dominating the

464
00:17:45,400 --> 00:17:47,620
way that we exchange files with web

465
00:17:47,620 --> 00:17:49,960
servers people implement their stuff now

466
00:17:49,960 --> 00:17:50,980
what happens if they want to make

467
00:17:50,980 --> 00:17:53,110
changes to the protocol they cannot make

468
00:17:53,110 --> 00:17:54,250
any changes that are incompatible

469
00:17:54,250 --> 00:17:55,900
because then they lose the reason why

470
00:17:55,900 --> 00:17:57,280
they chose to go down this route to

471
00:17:57,280 --> 00:17:59,200
begin with

472
00:17:59,200 --> 00:18:00,850
and what essentially happens to see have

473
00:18:00,850 --> 00:18:02,889
to go to amazon and i think amazon has

474
00:18:02,889 --> 00:18:04,960
literally zero interest to work on open

475
00:18:04,960 --> 00:18:06,279
standards and to work with the community

476
00:18:06,279 --> 00:18:08,019
and to work with anybody unless you pay

477
00:18:08,019 --> 00:18:09,190
them a lot of money which is a

478
00:18:09,190 --> 00:18:10,960
reasonable approach to business but it's

479
00:18:10,960 --> 00:18:12,220
not really good approach to have an open

480
00:18:12,220 --> 00:18:15,149
web so amazon has we even if the API or

481
00:18:15,149 --> 00:18:17,230
protocol for resumable uploads was

482
00:18:17,230 --> 00:18:18,760
create which should never be under

483
00:18:18,760 --> 00:18:22,389
consideration what should you use if you

484
00:18:22,389 --> 00:18:23,529
actually want to solve this problem

485
00:18:23,529 --> 00:18:25,059
today and you just want to solve it with

486
00:18:25,059 --> 00:18:26,889
JavaScript as inks this library is great

487
00:18:26,889 --> 00:18:29,230
it's called resumable pjs it's actually

488
00:18:29,230 --> 00:18:32,110
based on multi-platform data files are

489
00:18:32,110 --> 00:18:33,880
split into fixed size chunks similar to

490
00:18:33,880 --> 00:18:35,649
the s3 protocol you can choose your own

491
00:18:35,649 --> 00:18:38,950
chunk size as as probably the best open

492
00:18:38,950 --> 00:18:40,389
source solution that's out there right

493
00:18:40,389 --> 00:18:43,240
now it works really well and say they

494
00:18:43,240 --> 00:18:45,730
kind of define a protocol so you don't

495
00:18:45,730 --> 00:18:47,470
have to kind of go through the steps and

496
00:18:47,470 --> 00:18:50,200
figure out how to do it over HTTP like

497
00:18:50,200 --> 00:18:51,789
you would do with other JavaScript based

498
00:18:51,789 --> 00:18:53,919
uploaders unfortunately this is not to

499
00:18:53,919 --> 00:18:55,840
find us a standard and this is not a

500
00:18:55,840 --> 00:18:57,700
problem all you care about is solving

501
00:18:57,700 --> 00:18:59,679
this problem for your little wet damp

502
00:18:59,679 --> 00:19:02,169
and doing it only in JavaScript but it

503
00:19:02,169 --> 00:19:03,789
creates a situation where we have seized

504
00:19:03,789 --> 00:19:06,960
one thousand one week project of

505
00:19:06,960 --> 00:19:09,580
solutions that barely work and just keep

506
00:19:09,580 --> 00:19:10,990
repeating this stuff over and over again

507
00:19:10,990 --> 00:19:12,880
and it just cannot compete with the

508
00:19:12,880 --> 00:19:14,230
power we would have and the simplicity

509
00:19:14,230 --> 00:19:16,570
we would have this was a standard so

510
00:19:16,570 --> 00:19:18,399
what could happen first of all what's

511
00:19:18,399 --> 00:19:20,320
addition observation is adding resumable

512
00:19:20,320 --> 00:19:21,940
file uploads should take five minutes

513
00:19:21,940 --> 00:19:23,470
instead of five hours I think that

514
00:19:23,470 --> 00:19:25,809
should be the basic goal like the 1995

515
00:19:25,809 --> 00:19:27,789
level of complexity in demo i was

516
00:19:27,789 --> 00:19:28,840
showing we should be able to do this

517
00:19:28,840 --> 00:19:31,720
life right now without using a huge

518
00:19:31,720 --> 00:19:35,950
amount of external libraries and if it

519
00:19:35,950 --> 00:19:37,990
said what's the case the future could

520
00:19:37,990 --> 00:19:40,120
look like this is just but I

521
00:19:40,120 --> 00:19:42,039
entertained the sword for a second we

522
00:19:42,039 --> 00:19:43,630
could have a resumable attribute

523
00:19:43,630 --> 00:19:45,250
informed and this would make a former

524
00:19:45,250 --> 00:19:47,350
assumably upload a ball and then pull

525
00:19:47,350 --> 00:19:49,210
the HX stuff you would also just have a

526
00:19:49,210 --> 00:19:51,190
property called resumable on the HX

527
00:19:51,190 --> 00:19:53,470
object and would make sure that on HX

528
00:19:53,470 --> 00:19:55,480
request is resumable and so how can we

529
00:19:55,480 --> 00:19:57,580
get to this future well unfortunately

530
00:19:57,580 --> 00:19:59,230
nobody is working on this problem right

531
00:19:59,230 --> 00:20:01,389
now nobody's working on anything for

532
00:20:01,389 --> 00:20:03,580
resumable uploads so we kind of thought

533
00:20:03,580 --> 00:20:05,380
ok let's start this project and we call

534
00:20:05,380 --> 00:20:07,690
the toss today oh and what toss today oh

535
00:20:07,690 --> 00:20:09,820
is it's an informal working group to

536
00:20:09,820 --> 00:20:12,940
resume resumable file uploads over HTTP

537
00:20:12,940 --> 00:20:14,830
this is a fancy way of saying that we're

538
00:20:14,830 --> 00:20:15,970
a bunch of people on github and

539
00:20:15,970 --> 00:20:19,810
everybody can join and help we are also

540
00:20:19,810 --> 00:20:23,170
a collection of open source project that

541
00:20:23,170 --> 00:20:25,660
implements the draft specifications we

542
00:20:25,660 --> 00:20:28,510
do this for HTML iOS and Android as well

543
00:20:28,510 --> 00:20:30,910
as server side platforms like noches go

544
00:20:30,910 --> 00:20:33,430
Ruby Python PHP etc and the reason we do

545
00:20:33,430 --> 00:20:35,860
this at this early point is to just see

546
00:20:35,860 --> 00:20:37,450
if what we are defining makes sense if

547
00:20:37,450 --> 00:20:40,210
it's portable and if the end result is

548
00:20:40,210 --> 00:20:41,410
something that's nice and that we would

549
00:20:41,410 --> 00:20:45,730
want to use the goal for this is to

550
00:20:45,730 --> 00:20:47,800
publish this as an internet Engineering

551
00:20:47,800 --> 00:20:50,170
Task Force standard as an RFC and if we

552
00:20:50,170 --> 00:20:52,270
could get there to this point the future

553
00:20:52,270 --> 00:20:53,650
could be really nice because then

554
00:20:53,650 --> 00:20:55,480
languages could just thought start

555
00:20:55,480 --> 00:20:57,130
building this into the back end and when

556
00:20:57,130 --> 00:20:58,480
you use file uploading it will always be

557
00:20:58,480 --> 00:21:00,040
resumable on the back end you don't have

558
00:21:00,040 --> 00:21:01,690
to worry about it its built-in same on

559
00:21:01,690 --> 00:21:03,580
the front end you'll just have the stuff

560
00:21:03,580 --> 00:21:05,650
available maybe in web browsers maybe

561
00:21:05,650 --> 00:21:07,420
you have to use the library but it will

562
00:21:07,420 --> 00:21:08,920
just be much easier and there will be

563
00:21:08,920 --> 00:21:10,570
one way to do it you will not have to

564
00:21:10,570 --> 00:21:12,250
ask yourself am I using the right HTTP

565
00:21:12,250 --> 00:21:15,880
headers am I doing this correctly and we

566
00:21:15,880 --> 00:21:17,620
can also do this for mobile I mean

567
00:21:17,620 --> 00:21:19,210
people here don't want to develop mobile

568
00:21:19,210 --> 00:21:21,550
apps finish our script conference but if

569
00:21:21,550 --> 00:21:23,470
you do native mobile you also need a way

570
00:21:23,470 --> 00:21:25,000
to do this and maybe your company has to

571
00:21:25,000 --> 00:21:27,100
shoot all kinds of apps native web and

572
00:21:27,100 --> 00:21:29,080
native mobile so it's good to have a

573
00:21:29,080 --> 00:21:30,700
protocol so what does all protocol look

574
00:21:30,700 --> 00:21:32,430
like I'll just go over it real quickly

575
00:21:32,430 --> 00:21:34,840
at this point we have this protocol

576
00:21:34,840 --> 00:21:36,640
where you do post request against a

577
00:21:36,640 --> 00:21:38,290
well-known URL you can define this

578
00:21:38,290 --> 00:21:40,390
anything you would like here we use /

579
00:21:40,390 --> 00:21:43,720
files then you use two headers content

580
00:21:43,720 --> 00:21:45,100
lengths which is an existing header you

581
00:21:45,100 --> 00:21:47,560
sub set to 0 and final lengths which is

582
00:21:47,560 --> 00:21:49,690
a new header we're proposing which we're

583
00:21:49,690 --> 00:21:51,880
setting to 100 here what this means is

584
00:21:51,880 --> 00:21:53,830
we're essentially creating an empty file

585
00:21:53,830 --> 00:21:55,990
on server and with letting the server

586
00:21:55,990 --> 00:21:57,460
knows that we are intending to upload

587
00:21:57,460 --> 00:21:59,680
100 bytes into it so its final length of

588
00:21:59,680 --> 00:22:01,600
this file will be 100 bytes but we're

589
00:22:01,600 --> 00:22:03,040
not uploading it yet which just asked me

590
00:22:03,040 --> 00:22:04,750
to server to create the mt resource and

591
00:22:04,750 --> 00:22:06,340
the server responds with the location

592
00:22:06,340 --> 00:22:08,980
header saying hey I created this

593
00:22:08,980 --> 00:22:11,140
resource for you at / files / one for

594
00:22:11,140 --> 00:22:13,150
example we just get a fully full

595
00:22:13,150 --> 00:22:15,040
absolute view ALB and then we can start

596
00:22:15,040 --> 00:22:17,320
the actual upload and the upload would

597
00:22:17,320 --> 00:22:19,030
be done with a pet request if you're not

598
00:22:19,030 --> 00:22:20,950
familiar with patch it's a new HTTP

599
00:22:20,950 --> 00:22:22,900
methods that we specified or released in

600
00:22:22,900 --> 00:22:25,210
2010 Realtors now heavily adopting it

601
00:22:25,210 --> 00:22:27,100
and it's meant to modify

602
00:22:27,100 --> 00:22:29,140
files without completely replacing zamp

603
00:22:29,140 --> 00:22:30,700
so the tube partial in place

604
00:22:30,700 --> 00:22:33,250
modification of resources and so we

605
00:22:33,250 --> 00:22:35,530
would do a pet request again / file / 1

606
00:22:35,530 --> 00:22:37,500
which is ul we get from the server and

607
00:22:37,500 --> 00:22:39,789
what we would do by default is try to

608
00:22:39,789 --> 00:22:41,320
upload the whole thing so we did

609
00:22:41,320 --> 00:22:43,960
content-length to 100 offset 20 I'll

610
00:22:43,960 --> 00:22:45,580
talk about this in a second and then we

611
00:22:45,580 --> 00:22:47,590
just sent a whole file if this succeeds

612
00:22:47,590 --> 00:22:51,820
we receive a 200 ok status code if this

613
00:22:51,820 --> 00:22:54,610
doesn't didn't work we have to ask the

614
00:22:54,610 --> 00:22:56,710
server how much data received because on

615
00:22:56,710 --> 00:22:59,200
bsd sockets and most most libraries we

616
00:22:59,200 --> 00:23:01,059
reduce we do not gets information how

617
00:23:01,059 --> 00:23:02,980
much data was actually sent across the

618
00:23:02,980 --> 00:23:04,900
wire successfully and if it was received

619
00:23:04,900 --> 00:23:08,470
do we have to ask the server so we would

620
00:23:08,470 --> 00:23:10,630
do a head request to doing that so we do

621
00:23:10,630 --> 00:23:12,610
a head request again / file / one which

622
00:23:12,610 --> 00:23:14,380
is our ul and thence the server could

623
00:23:14,380 --> 00:23:16,510
reply with an offset header which would

624
00:23:16,510 --> 00:23:18,190
tell us how many bytes did you receive

625
00:23:18,190 --> 00:23:19,960
so in this case the server's like hey I

626
00:23:19,960 --> 00:23:22,000
received 70 bites and something terrible

627
00:23:22,000 --> 00:23:24,490
happened so now we can use this

628
00:23:24,490 --> 00:23:26,080
information to do another pet request

629
00:23:26,080 --> 00:23:28,030
and now we set to Compton like 230 and

630
00:23:28,030 --> 00:23:30,220
see offset 270 and this basically allows

631
00:23:30,220 --> 00:23:32,500
us to upload the remaining 30 bites and

632
00:23:32,500 --> 00:23:34,090
the server will know where to apply them

633
00:23:34,090 --> 00:23:37,510
it's pretty simple we're also as I

634
00:23:37,510 --> 00:23:38,980
mentioned lamenting clients and servers

635
00:23:38,980 --> 00:23:40,809
we have a reference implementation go

636
00:23:40,809 --> 00:23:43,390
because I want to play with this we have

637
00:23:43,390 --> 00:23:46,230
the noche s server that was imminent

638
00:23:46,230 --> 00:23:49,539
contributed by narrow and from return to

639
00:23:49,539 --> 00:23:52,809
community we have jquery iOS and a

640
00:23:52,809 --> 00:23:54,880
Python client and if you want to play

641
00:23:54,880 --> 00:23:56,530
with this in kind of experiment if you

642
00:23:56,530 --> 00:23:58,059
want to do this for Ruby or some other

643
00:23:58,059 --> 00:23:59,980
language go ahead and edit to this page

644
00:23:59,980 --> 00:24:01,450
but really interesting and see more

645
00:24:01,450 --> 00:24:04,450
stuff we also have an idea for an

646
00:24:04,450 --> 00:24:06,460
alternative protocol I'll just go over

647
00:24:06,460 --> 00:24:09,220
this really briefly it would also be

648
00:24:09,220 --> 00:24:10,960
possible to take a more form centric

649
00:24:10,960 --> 00:24:12,400
approach and deal with the fact that

650
00:24:12,400 --> 00:24:14,320
forms consist of multiple fields and

651
00:24:14,320 --> 00:24:16,990
kind of broaden the scope of this

652
00:24:16,990 --> 00:24:19,090
project a little bit the benefit of this

653
00:24:19,090 --> 00:24:20,770
is that we could be compatible with the

654
00:24:20,770 --> 00:24:22,990
alt request and we could potentially

655
00:24:22,990 --> 00:24:25,179
make it this more seamless upgrade where

656
00:24:25,179 --> 00:24:26,770
you don't have to completely change the

657
00:24:26,770 --> 00:24:29,530
way you upload stuff there's good end up

658
00:24:29,530 --> 00:24:32,289
more complex but potentially also more

659
00:24:32,289 --> 00:24:34,179
powerful we'll see if we go this route

660
00:24:34,179 --> 00:24:35,980
for now the other thing that I showed

661
00:24:35,980 --> 00:24:37,540
you looks like the most promising

662
00:24:37,540 --> 00:24:39,370
candidate another thing we're really

663
00:24:39,370 --> 00:24:40,600
interested in is upload

664
00:24:40,600 --> 00:24:44,200
acceleration we want to explore how we

665
00:24:44,200 --> 00:24:46,180
can make file uploads faster and the

666
00:24:46,180 --> 00:24:48,250
idea behind this is set tcp performance

667
00:24:48,250 --> 00:24:50,980
over multiple mobile networks is not

668
00:24:50,980 --> 00:24:53,320
always ideal and this really depends on

669
00:24:53,320 --> 00:24:55,240
many many factors it depends on the

670
00:24:55,240 --> 00:24:56,980
congestion window package loss link

671
00:24:56,980 --> 00:24:59,050
layer latency and it's really complex

672
00:24:59,050 --> 00:25:01,690
subject I mean you would assume that for

673
00:25:01,690 --> 00:25:03,850
example the TCP protocol takes care of

674
00:25:03,850 --> 00:25:05,590
resending lost packages and you can

675
00:25:05,590 --> 00:25:06,940
build a mental model of the network

676
00:25:06,940 --> 00:25:08,890
based on this but it's actually not the

677
00:25:08,890 --> 00:25:10,240
full truth when you go to mobile

678
00:25:10,240 --> 00:25:12,400
networks for example LTE it will

679
00:25:12,400 --> 00:25:13,870
actually do similar things on a link

680
00:25:13,870 --> 00:25:15,640
layer so LTE will actually recent

681
00:25:15,640 --> 00:25:17,670
packages on the link layer IP packages

682
00:25:17,670 --> 00:25:19,990
so when you're trying to model this on

683
00:25:19,990 --> 00:25:22,060
how it TCP work it's just not going to

684
00:25:22,060 --> 00:25:23,860
work what I'm saying is this is very

685
00:25:23,860 --> 00:25:26,170
complex but it's also very likely that

686
00:25:26,170 --> 00:25:27,940
TCP doesn't always choose the optimal

687
00:25:27,940 --> 00:25:29,560
window size to get optimal throughput

688
00:25:29,560 --> 00:25:31,480
and so there may be benefits to using

689
00:25:31,480 --> 00:25:32,890
parallel requests and parallel

690
00:25:32,890 --> 00:25:34,840
connections for single upload this would

691
00:25:34,840 --> 00:25:36,400
mean extending our protocol a little bit

692
00:25:36,400 --> 00:25:38,500
because the server will need to reply

693
00:25:38,500 --> 00:25:40,150
with multiple offset but it's something

694
00:25:40,150 --> 00:25:42,490
we want to explore before we want to add

695
00:25:42,490 --> 00:25:44,110
such complexity we want to study this on

696
00:25:44,110 --> 00:25:46,360
the real world conditions so we want to

697
00:25:46,360 --> 00:25:48,040
create a little app or something where

698
00:25:48,040 --> 00:25:49,390
people can try this out all over the

699
00:25:49,390 --> 00:25:50,890
world under different network conditions

700
00:25:50,890 --> 00:25:52,960
and we can actually get a lot of data on

701
00:25:52,960 --> 00:25:54,640
the different upload methods and see if

702
00:25:54,640 --> 00:25:56,970
there's actually performance benefit I

703
00:25:56,970 --> 00:25:59,380
think we can show a little demo of what

704
00:25:59,380 --> 00:26:04,240
this looks like so on right now when you

705
00:26:04,240 --> 00:26:07,180
go to toss that I oh and you click on

706
00:26:07,180 --> 00:26:09,520
demo you have this little demo uploader

707
00:26:09,520 --> 00:26:11,350
which implements the current protocol

708
00:26:11,350 --> 00:26:13,810
it's using the jQuery client and the go

709
00:26:13,810 --> 00:26:16,960
server and we can choose a file here

710
00:26:16,960 --> 00:26:23,770
that was too big let's choose a smaller

711
00:26:23,770 --> 00:26:27,580
file

712
00:26:27,590 --> 00:26:31,520
come on demo gods if resumable uploads

713
00:26:31,520 --> 00:26:34,580
should work actually hang on a second I

714
00:26:34,580 --> 00:26:44,220
need to rename this file

715
00:26:44,230 --> 00:26:47,810
right

716
00:26:47,820 --> 00:26:50,280
okay so we have this upload here and now

717
00:26:50,280 --> 00:26:52,140
let's interrupt it we could force a

718
00:26:52,140 --> 00:26:54,390
network error here but we could also do

719
00:26:54,390 --> 00:26:55,710
something different closing the browser

720
00:26:55,710 --> 00:26:57,300
this essentially kills the upload

721
00:26:57,300 --> 00:26:59,040
connection but it's actually an

722
00:26:59,040 --> 00:27:00,330
interesting use case because it was

723
00:27:00,330 --> 00:27:02,430
killed by the user the user became

724
00:27:02,430 --> 00:27:03,960
impatient and just close the window and

725
00:27:03,960 --> 00:27:08,640
now if we came back to test today oh and

726
00:27:08,640 --> 00:27:11,400
we go to demo we click to choose file we

727
00:27:11,400 --> 00:27:13,470
can select this file again and we're

728
00:27:13,470 --> 00:27:15,150
lucky it continues to upload right where

729
00:27:15,150 --> 00:27:17,280
we left off how does this actually work

730
00:27:17,280 --> 00:27:18,660
how does it know where to resume once

731
00:27:18,660 --> 00:27:20,280
the browser was closed because that

732
00:27:20,280 --> 00:27:23,340
state has to be kept somewhere what we

733
00:27:23,340 --> 00:27:25,380
were doing for this is we were using the

734
00:27:25,380 --> 00:27:29,040
protocol for one but also when if pile

735
00:27:29,040 --> 00:27:31,290
is selected we take the file name file

736
00:27:31,290 --> 00:27:34,620
size and last modified field and we

737
00:27:34,620 --> 00:27:36,600
combine these into an ID for the file

738
00:27:36,600 --> 00:27:42,600
and we take CC IDs and we maps them to

739
00:27:42,600 --> 00:27:44,640
the URLs that we get from the initial

740
00:27:44,640 --> 00:27:47,100
post request so we creates a file with

741
00:27:47,100 --> 00:27:48,990
post we get a location header with the

742
00:27:48,990 --> 00:27:51,570
URL and then we take local storage and

743
00:27:51,570 --> 00:27:54,120
we use a file id as defined up here and

744
00:27:54,120 --> 00:27:57,270
we map it to the upload URLs that we got

745
00:27:57,270 --> 00:28:00,180
and what this basically allows us when

746
00:28:00,180 --> 00:28:02,610
somebody's like to file again we'll know

747
00:28:02,610 --> 00:28:04,350
that this file was already the upload

748
00:28:04,350 --> 00:28:05,790
already started before and we know the

749
00:28:05,790 --> 00:28:07,650
URL for it so we can do a head request

750
00:28:07,650 --> 00:28:09,240
to inquire how much data is there and

751
00:28:09,240 --> 00:28:10,830
where we need to continue this is not

752
00:28:10,830 --> 00:28:13,050
perfect but it's simple by not perfect I

753
00:28:13,050 --> 00:28:14,880
mean it's conceivable that somebody has

754
00:28:14,880 --> 00:28:16,620
a flower was the same name sighs and

755
00:28:16,620 --> 00:28:18,900
last modified time on his disk and he

756
00:28:18,900 --> 00:28:20,340
wants to upload both of them on the same

757
00:28:20,340 --> 00:28:22,980
size I don't think it happens a lot so I

758
00:28:22,980 --> 00:28:24,870
think it's reasonable for now but if it

759
00:28:24,870 --> 00:28:26,730
does happen a lot and we need to deal

760
00:28:26,730 --> 00:28:28,080
with it we can improve this by actually

761
00:28:28,080 --> 00:28:31,400
using a sha-1 checksum for the file ID

762
00:28:31,400 --> 00:28:33,930
this is kind of a little slow still but

763
00:28:33,930 --> 00:28:35,430
I think this is going to get lost faster

764
00:28:35,430 --> 00:28:38,370
things to stuff like smgs has everybody

765
00:28:38,370 --> 00:28:40,680
seen a SMS where's the end ok cool

766
00:28:40,680 --> 00:28:43,530
everybody knows this so this is this and

767
00:28:43,530 --> 00:28:45,840
other JavaScript engine optimizations

768
00:28:45,840 --> 00:28:47,880
are going to make check sums viable very

769
00:28:47,880 --> 00:28:51,360
soon um I think we're almost done here

770
00:28:51,360 --> 00:28:53,700
beach time ah you should join us if you

771
00:28:53,700 --> 00:28:55,020
care about resumable uploads and you

772
00:28:55,020 --> 00:28:56,670
care about doing it right and not just

773
00:28:56,670 --> 00:28:58,110
doing these one-off solutions anymore

774
00:28:58,110 --> 00:28:59,640
and kind of fix a WEP a little bit

775
00:28:59,640 --> 00:29:01,200
better so this is one project to help us

776
00:29:01,200 --> 00:29:01,850
with

777
00:29:01,850 --> 00:29:04,020
we're already seeing some interest from

778
00:29:04,020 --> 00:29:05,610
bigger companies as well for example

779
00:29:05,610 --> 00:29:07,980
vimeo came out and one of the developers

780
00:29:07,980 --> 00:29:10,470
is working with us they're using a AP I

781
00:29:10,470 --> 00:29:12,630
very similar to what YouTube is using

782
00:29:12,630 --> 00:29:14,370
right now and say sees the same problem

783
00:29:14,370 --> 00:29:16,260
with it that it's kind of taking HTTP

784
00:29:16,260 --> 00:29:18,030
and abusing it in a way it's not

785
00:29:18,030 --> 00:29:19,680
supposed to be used so they are

786
00:29:19,680 --> 00:29:20,850
interested in working with this one of

787
00:29:20,850 --> 00:29:22,860
the developers is helping out and I

788
00:29:22,860 --> 00:29:24,540
think there's a good amount of interest

789
00:29:24,540 --> 00:29:27,480
from the community of all that's it

790
00:29:27,480 --> 00:29:34,440
questions

791
00:29:34,450 --> 00:29:41,110
I have a question can we go to the beach

792
00:29:41,110 --> 00:29:52,990
now okay so the question is if we also

793
00:29:52,990 --> 00:29:56,710
include progress events know our our

794
00:29:56,710 --> 00:29:58,630
protocol is basically just the network

795
00:29:58,630 --> 00:30:00,850
protocol so the progress depends on the

796
00:30:00,850 --> 00:30:02,680
API you have if you have JavaScript used

797
00:30:02,680 --> 00:30:05,230
to javascript stuff of xhr too if you

798
00:30:05,230 --> 00:30:07,900
are native you use iOS libraries and

799
00:30:07,900 --> 00:30:10,870
callbacks whatever you have but it's not

800
00:30:10,870 --> 00:30:20,880
part of all right is there a reasonable

801
00:30:20,880 --> 00:30:22,750
expectations that the partial upload

802
00:30:22,750 --> 00:30:25,120
will stick around for a while that's a

803
00:30:25,120 --> 00:30:26,980
good question so one problem is that

804
00:30:26,980 --> 00:30:29,050
somebody starts uploading a file then he

805
00:30:29,050 --> 00:30:30,580
close this browser and he comes back two

806
00:30:30,580 --> 00:30:31,900
years later and once to resume the

807
00:30:31,900 --> 00:30:33,460
upload do we keep the partial file

808
00:30:33,460 --> 00:30:36,150
around for two years I think this goes

809
00:30:36,150 --> 00:30:37,840
potentially a little outside of the

810
00:30:37,840 --> 00:30:39,610
protocol itself but i think the protocol

811
00:30:39,610 --> 00:30:40,870
will include the sections that makes

812
00:30:40,870 --> 00:30:42,490
recommendations for how long to keep

813
00:30:42,490 --> 00:30:44,680
files around I don't know if we need a

814
00:30:44,680 --> 00:30:46,720
way to negotiate this between client and

815
00:30:46,720 --> 00:30:48,430
server because if the file is not there

816
00:30:48,430 --> 00:30:50,470
it basically gets a poor for when it

817
00:30:50,470 --> 00:30:51,850
does the head request and then it just

818
00:30:51,850 --> 00:30:53,740
starts the upload again so it's not a

819
00:30:53,740 --> 00:30:55,390
deal breaker so the server can decide

820
00:30:55,390 --> 00:31:04,390
how long to keep the fault

821
00:31:04,400 --> 00:31:07,110
okay the question is what happens if i

822
00:31:07,110 --> 00:31:09,030
send patch requests for somebody else's

823
00:31:09,030 --> 00:31:12,990
upload the answer to that is first you

824
00:31:12,990 --> 00:31:15,030
should use this over HTTPS if you care

825
00:31:15,030 --> 00:31:16,710
about security and then you should use

826
00:31:16,710 --> 00:31:18,690
your l's when you do the post request

827
00:31:18,690 --> 00:31:21,180
it's up to you to return a random URL or

828
00:31:21,180 --> 00:31:24,390
like how to guess URL so just use a uuid

829
00:31:24,390 --> 00:31:26,970
or something in your return location and

830
00:31:26,970 --> 00:31:28,440
I think that should make covers a

831
00:31:28,440 --> 00:31:33,150
problem entirely alright let's go to the

