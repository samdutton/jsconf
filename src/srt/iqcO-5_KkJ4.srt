1
00:00:10,300 --> 00:00:12,300
Hello everyone and

2
00:00:12,540 --> 00:00:20,100
Thanks the organization for giving me the chance to give this talk here, in the last CSSconf edition in this type or whatever

3
00:00:20,740 --> 00:00:25,020
So it's really a pleasure and an honor to be here in this great conference

4
00:00:25,689 --> 00:00:30,599
So the title of my talk is "Improving Website Performance with CSS Containment"

5
00:00:31,150 --> 00:00:36,419
So quite a long title even doesn't fit on the slide, so I will go over it slowly

6
00:00:37,660 --> 00:00:41,729
So first, let's explain a little bit about me. I'm Manuel Rego

7
00:00:41,730 --> 00:00:45,959
I'm part of Igalia Web Pplatform team. Igalia is an open source consultancy that

8
00:00:46,539 --> 00:00:47,770
has a

9
00:00:47,770 --> 00:00:51,659
Cooperative like structure, so we have people all around the globe

10
00:00:52,300 --> 00:00:55,110
despite the headquarter are in Spain and

11
00:00:56,050 --> 00:01:01,469
we have a large team working on browsers and we having implementing in several CSS

12
00:01:01,719 --> 00:01:04,198
specifications and other things on browsers

13
00:01:04,199 --> 00:01:08,069
I have been working on Grid Layout mostly for several years

14
00:01:08,420 --> 00:01:13,420
And also other specs in Blink and WebKit and now I'm working also in the CSS Containment

15
00:01:16,080 --> 00:01:21,020
And as part of all these work I having interacting more and more with the CSS Working Group people

16
00:01:21,020 --> 00:01:24,620
Putting issues participating in discussions and finally joined the group like two years ago

17
00:01:26,560 --> 00:01:28,000
So

18
00:01:28,000 --> 00:01:33,029
Yeah the spec I mean the talk is about CSS Containment. This is a CSS spec

19
00:01:33,850 --> 00:01:41,460
this spec has a property that is called "contain" and it has four values "layout", "paint",  "size" and "style" and that's all

20
00:01:41,650 --> 00:01:42,570
We are almost done

21
00:01:42,570 --> 00:01:46,110
I mean, it's very simple in theory

22
00:01:46,110 --> 00:01:48,149
But I think is going to be tricky to explain

23
00:01:48,640 --> 00:01:53,699
Maybe you watched some of my talks about Grid Layout or read some of my blog post about it.

24
00:01:54,700 --> 00:01:55,960
I mean

25
00:01:55,960 --> 00:02:00,540
Grid has tons of properties, many different values for each of them and all that

26
00:02:01,869 --> 00:02:05,639
But I believe it's easier to understand that maybe CSS Containment

27
00:02:05,640 --> 00:02:09,720
So let's see if I manage to do it properly and you don't get very bored

28
00:02:11,200 --> 00:02:15,330
So the other part of the title was improving website performance

29
00:02:16,000 --> 00:02:20,459
So basically you can improve the performance of a website in many different parts

30
00:02:20,459 --> 00:02:27,238
You can improve how images are loaded or the resources or whatever. In this case is more about the rendering pipeline

31
00:02:27,239 --> 00:02:32,548
These are somehow the main phases from a very nice article by Lin Clark

32
00:02:33,099 --> 00:02:37,289
So you have like where you compute the style you do the layout where you are

33
00:02:37,510 --> 00:02:40,709
Positioning the things then you paint and then you composite the layers

34
00:02:41,680 --> 00:02:47,879
And basically with CSS Containment you're going to be  able to get performance benefits in this pipeline

35
00:02:49,780 --> 00:02:53,789
So, let's go to the spec, the spec is now candidate recommendation

36
00:02:55,239 --> 00:02:57,628
So it's quite a stable at this stage

37
00:02:58,269 --> 00:03:04,828
And we will explain how it works and try to explain the different options and all that. So basically the main goal of

38
00:03:05,890 --> 00:03:09,989
CSS Containment is to improve the performance of a website by

39
00:03:11,980 --> 00:03:13,359
identifying the

40
00:03:13,359 --> 00:03:15,359
independent parts of a website which are

41
00:03:15,639 --> 00:03:21,149
parts of the DOM tree that doesn't have to interact with the rest, so somehow it's like isolating

42
00:03:21,819 --> 00:03:23,819
that subtree from the rest of the page

43
00:03:24,220 --> 00:03:27,509
In a way that if you do modifications inside that subtree

44
00:03:27,510 --> 00:03:31,620
they don't get propagated outside so you don't need to do work in the

45
00:03:32,200 --> 00:03:34,200
ancestors and all that

46
00:03:34,720 --> 00:03:39,929
One confusing thing about containment when you first read about it or you hear about it is that

47
00:03:41,199 --> 00:03:47,219
is not that things outside cannot affect the elements inside, is not top to bottom. But is the other way around

48
00:03:47,769 --> 00:03:50,548
Things inside that element are not going to affect anything outside

49
00:03:50,549 --> 00:03:52,060
So this is a sentence

50
00:03:52,060 --> 00:03:57,959
By Tab Atkins, one of the spec editors, that he usually needs to repeat over a over in the CSS Working Group meetings

51
00:03:57,959 --> 00:04:02,488
"contain" property doesn't block things going into the subtree, it blocks things leaking out

52
00:04:03,459 --> 00:04:06,929
So it's quite relevant for all the containment stuff

53
00:04:08,199 --> 00:04:14,699
So yeah, I already say that. This spec only introduces a new property, which name is "contain"

54
00:04:14,699 --> 00:04:21,029
So it's very easy to remember and this property has four values, main values, or types of containments

55
00:04:22,479 --> 00:04:29,098
layout, paint, size, style. You can just put one or put two combine or combine the four, you can do whatever you want there

56
00:04:29,409 --> 00:04:36,419
style is red in the slides because it's market as at risk now in the spec, so we will talk more later about that

57
00:04:37,599 --> 00:04:42,989
So imagine this is a website. You have some content, some text, the header, whatever and

58
00:04:43,810 --> 00:04:46,859
you know that you have a component, maybe in the top left corner

59
00:04:46,960 --> 00:04:52,979
For example that you are showing some live information that you are getting or showing

60
00:04:53,349 --> 00:04:57,299
an animation or whatever, but you know that's totally independent from the rest of the page

61
00:04:58,060 --> 00:05:02,129
So you identify that part, mark it like a contained element

62
00:05:02,560 --> 00:05:06,659
And when the browser does work there, it doesn't need to care about the rest of the pages

63
00:05:06,659 --> 00:05:09,509
The page is very big or very complex DOM tree or whatever

64
00:05:09,939 --> 00:05:13,919
The browser doesn't need to spend any single time in doing other stuff

65
00:05:16,120 --> 00:05:19,560
So basically what web authors will need to do is to identify

66
00:05:20,439 --> 00:05:26,759
which are that independent parts of a website and mark them with the "contain" property and then

67
00:05:27,339 --> 00:05:29,339
The browser engine needs to do

68
00:05:29,889 --> 00:05:32,878
something because it's not just parse the property and

69
00:05:33,520 --> 00:05:39,810
implement the restrictions but also it needs to implement some optimizations and avoid doing extra work. Browser engines usually

70
00:05:40,180 --> 00:05:42,149
Try to do as less work as possible

71
00:05:42,149 --> 00:05:47,939
When you do a change in a website, they have some kind of heuristics in order to achieve that

72
00:05:48,729 --> 00:05:52,199
But still there are many corner cases and many combinations of things

73
00:05:52,199 --> 00:05:55,049
So when you do a change on a single element that you believe is

74
00:05:55,990 --> 00:05:57,750
Not going to affect anything else

75
00:05:57,750 --> 00:05:59,500
The browser still needs to maybe

76
00:05:59,500 --> 00:06:05,939
Check all the siblings just in case your overflowing content and you need to paint something in other parts of whatever

77
00:06:08,289 --> 00:06:13,949
And when you use containment, you have some kind of restrictions or implications of using it

78
00:06:13,949 --> 00:06:17,878
so you cannot just put "contain" to all the elements and you are done you need to

79
00:06:18,279 --> 00:06:20,279
To put it when it makes sense

80
00:06:21,069 --> 00:06:22,449
so there are

81
00:06:22,449 --> 00:06:25,228
Like this four type of containers we are going to review

82
00:06:25,839 --> 00:06:32,999
First one for example layout containment. Basically here that means that the internal layout of the isolated subtree

83
00:06:33,669 --> 00:06:38,999
Is totally isolated from the rest of the tree. So the element where you put "contain: layout"

84
00:06:39,880 --> 00:06:43,799
The layout of that element is totally independent of the ancestor

85
00:06:45,070 --> 00:06:52,439
so these are the effects it takes to element. Any overflow on that element is treated as ink overflow flow

86
00:06:52,720 --> 00:06:55,140
like shadows for example, I'll show an example later

87
00:06:56,350 --> 00:07:01,170
That element becomes a containing block for absolute and fixed position and descendants

88
00:07:01,930 --> 00:07:07,230
it also creates a new stacking context and independent formating context like display flow-root and

89
00:07:07,900 --> 00:07:11,790
Also that the element has no baseline. So why these

90
00:07:12,850 --> 00:07:20,489
Restrictions when you use it. So let's see an example of this ink overflow thing. We have here two

91
00:07:21,070 --> 00:07:23,070
divs that one has

92
00:07:23,200 --> 00:07:29,969
"contain: none" the other "contain: layout", is the magenta dotted border the element that has the "contain: none" or "contain: layout"

93
00:07:30,310 --> 00:07:35,549
So if the size of the text is changing here you see that an

94
00:07:36,580 --> 00:07:39,630
scrollbar is appearing on the parent element. So the browser

95
00:07:40,600 --> 00:07:44,820
Something changes inside and needs to do work outside like painting this scrollbar

96
00:07:45,520 --> 00:07:48,419
But with "contain: layout" it doesn't need to do anything outside

97
00:07:49,060 --> 00:07:50,710
this is

98
00:07:50,710 --> 00:07:53,519
treated as ink overflow, like shadows

99
00:07:53,520 --> 00:07:54,780
You cannot access it actually

100
00:07:54,780 --> 00:08:00,630
But I mean the browser can avoid doing any work in the parents checking if there are overflow and it needs to paint

101
00:08:00,970 --> 00:08:02,970
to show a scrollbar like here

102
00:08:04,660 --> 00:08:11,070
Similar is for baseline. I say that when you use layout containment the element is considered to have no baseline

103
00:08:12,130 --> 00:08:15,809
So basically is the same, here in the 
"contain: none"

104
00:08:15,810 --> 00:08:20,190
you see that the "foo" is aligned with the "bar" in the other one if use the

105
00:08:20,190 --> 00:08:27,749
synthesized baseline that is the underline in this case, if the size changes inside the browser needs to move foo a

106
00:08:28,030 --> 00:08:29,350
little bit below

107
00:08:29,350 --> 00:08:33,089
however with "contain: layout" something changes inside but the browser

108
00:08:33,640 --> 00:08:37,679
Doesn't care. I mean it can save time and avoid that kind of operations

109
00:08:39,729 --> 00:08:45,899
So another type of containment is paint containment, which is pretty similar to "overflow: hidden," but also has some

110
00:08:46,690 --> 00:08:51,840
Effects so basically the descendants cannot be displayed outside of the boundaries of that element

111
00:08:54,340 --> 00:09:01,559
But again it has some effects, contents are clipped like with "overflow: hidden", but also it becomes the containing block for

112
00:09:02,410 --> 00:09:10,230
positioned descendants/children, it also creates a stacking content and independent formatting context. So let's  see another example

113
00:09:11,920 --> 00:09:15,960
So we have "contain: none" again in the dotted magenta

114
00:09:16,900 --> 00:09:21,719
element and "contain: paint" and we have an absolute positioned at the element that has

115
00:09:22,060 --> 00:09:26,820
-100 pixels top and left. It has 200 pixels by 200 pixels size

116
00:09:27,460 --> 00:09:31,169
So it's positioned against the parent, it means the viewport or whatever

117
00:09:31,170 --> 00:09:36,089
And in the other case is positioned against the container element is moved a little bit left

118
00:09:36,910 --> 00:09:38,910
and top and also

119
00:09:39,370 --> 00:09:40,570
the

120
00:09:40,570 --> 00:09:42,570
overflowing things are clipped

121
00:09:42,850 --> 00:09:46,050
So when you change the color

122
00:09:46,420 --> 00:09:53,670
Here the browser needs to paint also things outside that element but here the browser needs to paint

123
00:09:54,100 --> 00:09:55,630
things inside

124
00:09:55,630 --> 00:09:56,460
so again

125
00:09:56,460 --> 00:10:00,509
If you have an element with content paint that is not in the viewport the browser can avoid

126
00:10:00,790 --> 00:10:05,040
doing work on it doing, doing any painting because

127
00:10:05,770 --> 00:10:07,770
the browser is sure that there are not

128
00:10:09,220 --> 00:10:14,730
something overflowing that that is painted in the viewport or whatever, they know that they can save that the time

129
00:10:15,970 --> 00:10:20,100
Size containment is about how the browser computes the size of an element

130
00:10:21,100 --> 00:10:24,570
Basically, if you put "contain: size" is going to ignore the children

131
00:10:25,870 --> 00:10:31,679
so the element is treated as having no contents, only things like padding add space or

132
00:10:32,050 --> 00:10:36,270
column-gap if you have multi column or the tracks in grid something like that

133
00:10:36,270 --> 00:10:41,009
you already defined, but not the contents itself. And also it's monolithic

134
00:10:41,010 --> 00:10:46,739
That means that you cannot split it when you print it or it's in multi column or things like that.

135
00:10:48,220 --> 00:10:53,700
So again, this is the same example again. So the first element

136
00:10:54,220 --> 00:10:57,000
The size depends on the contents is "Hello World!"

137
00:10:57,640 --> 00:10:59,110
and

138
00:10:59,110 --> 00:11:01,380
when the contents change the size changes

139
00:11:01,380 --> 00:11:07,449
but in this case, only is the padding the one that is  defining  the size of that element, if the

140
00:11:08,089 --> 00:11:11,078
contents change it doesn't care. You see that it's overflowing

141
00:11:11,899 --> 00:11:16,299
The thing is that when you combine this with the other ones, the browser can say, okay

142
00:11:16,399 --> 00:11:23,379
I know for sure that nothing is going to change outside, even the size isn't going to affect anything outside and all that

143
00:11:23,959 --> 00:11:27,309
And then last one is style containment

144
00:11:27,800 --> 00:11:32,380
This is somehow special because it only affects counters and quotes.

145
00:11:32,990 --> 00:11:37,209
I don't know if you use them a lot. I guess no because it's not very common, but

146
00:11:37,730 --> 00:11:39,730
at least is on the spec and

147
00:11:40,220 --> 00:11:47,470
It's currently market as at risk, because the scope is maybe too narrow only counter and quotes

148
00:11:47,470 --> 00:11:53,529
So there are some discussions about if it's worth. Firefox for example is not implementing this so far

149
00:11:53,529 --> 00:11:57,729
So that's another reason why is at risk in the spec? Because they don't see the benefit

150
00:11:59,449 --> 00:12:05,949
And also chroming implementation of style containment is pretty broken so only works for the very simple cases

151
00:12:06,410 --> 00:12:09,310
so if any of you find a use case that

152
00:12:09,589 --> 00:12:14,739
Can get performances benefit with style containment share with the CSS Working Group at the GitHub repository

153
00:12:15,410 --> 00:12:20,439
Because that will be valuable information to know if we need to keep or not this value

154
00:12:21,889 --> 00:12:26,379
so basically the effects are that the counters and quotes are scoped to the subtree and

155
00:12:26,990 --> 00:12:31,779
That when you try to increment a counter you actually are creating a new one instead of incrementing it

156
00:12:33,230 --> 00:12:36,189
So basically, just an example with counters

157
00:12:36,649 --> 00:12:42,249
This is a class that is incrementing this counter "n" and this is just an element that paints the counter

158
00:12:42,740 --> 00:12:47,829
So we are here creating this counter "n" and increment it to 1, then we print it is just 1

159
00:12:48,949 --> 00:12:50,870
then we have a

160
00:12:50,870 --> 00:12:57,729
"contain: style" element, so this counter inside cannot increment the one outside so it creates a new one

161
00:12:57,829 --> 00:13:00,369
so we have here 1.1 and

162
00:13:01,040 --> 00:13:06,670
When we print it after outside of the contained element, this doesn't know anything of what happened inside with the counter

163
00:13:06,949 --> 00:13:12,008
So that's what's isolated, so still 1 again. So that will be the expected output

164
00:13:14,290 --> 00:13:17,459
Then with quotes, quotes are I think even a

165
00:13:18,010 --> 00:13:19,780
less common use case

166
00:13:19,780 --> 00:13:21,899
So you can define

167
00:13:22,450 --> 00:13:24,629
Which symbols are you using when you have

168
00:13:25,240 --> 00:13:31,260
nested quotes. So this is double first and then single or whatever and then we are opening a quote here

169
00:13:31,260 --> 00:13:36,179
We have "foo" then we have the style containment element and we open another quote

170
00:13:36,970 --> 00:13:38,970
we have the text "bar" and then we close

171
00:13:39,760 --> 00:13:44,999
the quote. When we close this, it doesn't know that a new one was opening inside the style containment element

172
00:13:45,310 --> 00:13:47,970
So it just closes the initial opening

173
00:13:48,490 --> 00:13:54,090
We are not closing both in this case, but they mean basically that the changes here doesn't affect anything outside

174
00:13:56,740 --> 00:13:57,600
So, okay

175
00:13:57,600 --> 00:14:04,170
We have aliases in the spec so you can say "contain: content" and that implies layout and paint

176
00:14:04,420 --> 00:14:08,189
Or you can say "contain: strict" and that implies layout, paint and size

177
00:14:09,460 --> 00:14:15,090
This used to include style too, but like style is market at risk and Firefox was planning to ship

178
00:14:15,790 --> 00:14:23,219
CSS Containment, it was removed from the spec at this stage. If in the future style is implemented by all the browsers probably

179
00:14:23,560 --> 00:14:27,119
There will be a new alias like "all" or whatever that will include style too

180
00:14:28,690 --> 00:14:31,800
So let's just check the status of things

181
00:14:32,950 --> 00:14:36,689
This is not a new spec. Maybe it's the first time you've heard about it

182
00:14:36,690 --> 00:14:41,489
But if has been shipping for three years already in Chromium, so it's not an new spec at all

183
00:14:42,730 --> 00:14:49,889
and Google has been using it in their products like YouTube or Gmail, even in the Chrome Dev Tools, things like that

184
00:14:51,310 --> 00:14:56,460
But during past year there has been quite a lot of work in the in the spec

185
00:14:57,520 --> 00:15:03,179
Florian Rivoal one of the spec editors has been working quite a lot

186
00:15:03,180 --> 00:15:05,489
in pushing the spec to candidate recommendation

187
00:15:05,500 --> 00:15:12,960
Also the test suite in Web Platform Tests repository has been completed by Gérard Talbot and with contributors from Mozilla and Chromium

188
00:15:13,420 --> 00:15:16,079
while we were working in the implementations

189
00:15:16,720 --> 00:15:23,850
We at Igalia having fixing the implementation in Chromium. So it's aligned with the spec and we can start to implement optimizations based on that

190
00:15:24,700 --> 00:15:30,579
And that was causing us to be breaking most of the sites

191
00:15:30,580 --> 00:15:33,430
I mean, we broke YouTube for a while

192
00:15:34,190 --> 00:15:41,169
we broke Gmail, we broke Dev Tools several times because maybe they were using "contain: layout" for example in many places and now

193
00:15:41,900 --> 00:15:48,070
the overflow is treated as ink overflow so you can access it, things like that, or now that is a containing block for

194
00:15:48,070 --> 00:15:54,399
the positioned descendants, so everything is positioned wrongly, so you need to or stop using contain layout or

195
00:15:55,400 --> 00:15:57,730
Change how things work inside that element

196
00:15:58,790 --> 00:15:59,990
and

197
00:15:59,990 --> 00:16:02,469
Then Firefox is also working on the implementation

198
00:16:03,110 --> 00:16:05,110
They are targeting Firefox

199
00:16:05,450 --> 00:16:10,389
69 to ship it, but you can already test it behind the runtime flag

200
00:16:11,480 --> 00:16:16,180
And meanwhile Chromium has been implementing some optimizations based on css-contain

201
00:16:16,180 --> 00:16:21,609
So like I say you can just parse the property in the browser implement the restrictions and you are

202
00:16:22,040 --> 00:16:26,380
passing all the tests of CSS Containment so you are totally spec on client

203
00:16:26,630 --> 00:16:31,689
But maybe you don't have any optimization in the browser so is not useful at all at the end

204
00:16:31,910 --> 00:16:36,670
So then when the browser has that information it needs to still implement some

205
00:16:37,310 --> 00:16:38,690
optimizations

206
00:16:38,690 --> 00:16:39,800
and

207
00:16:39,800 --> 00:16:44,349
If we look at "Can I use" like Microsoft is moving to Chromium/Blink

208
00:16:44,350 --> 00:16:51,279
it's getting support for this, all the Chromium browsers has support for this, and Firefox is about to ship in a few releases and

209
00:16:51,590 --> 00:16:55,120
and then regarding Safari/WebKit there are no public signals yet

210
00:16:57,050 --> 00:17:01,450
So let's show some examples to try to understand this a little bit better

211
00:17:03,020 --> 00:17:06,670
This is one example from a blog post I published about

212
00:17:07,640 --> 00:17:13,570
Containment is very simple and not cool at all. But I believe it's the best want to understand how how it works

213
00:17:13,820 --> 00:17:21,399
so imagine that we have a very big DOM tree, like ten thousand elements like this item that has all of them have

214
00:17:21,770 --> 00:17:23,979
one child and

215
00:17:24,500 --> 00:17:30,700
We are modifying the content of that child over and over or whatever. So we have a DOM tree like this

216
00:17:30,700 --> 00:17:35,080
We have many many elements here, but we are only doing changes in this green

217
00:17:35,680 --> 00:17:37,680
div

218
00:17:37,790 --> 00:17:43,719
But still the browser needs to do work in the rest, not a lot of work maybe just

219
00:17:44,150 --> 00:17:50,229
Traversing the whole DOM tree to do some checks or whatever but it's doing work in all of them, so we can say okay

220
00:17:50,230 --> 00:17:57,370
This has "contain: strict". We cannot affect anything outside. We are just changing things inside here, the browser can avoid

221
00:17:57,980 --> 00:17:59,980
Navigating the rest of the things

222
00:18:00,110 --> 00:18:05,560
So this example is, I mean not cool at all, is changing the the text in the first

223
00:18:06,350 --> 00:18:08,030
element

224
00:18:08,030 --> 00:18:13,780
it actually goes from changing is taking six milliseconds without containment to take

225
00:18:14,360 --> 00:18:17,349
0.2 milliseconds with "contain: strict". So it's like a

226
00:18:18,170 --> 00:18:20,170
quite a bit difference

227
00:18:20,480 --> 00:18:27,010
This is another example is the same one, but I'm using grid layout in the items because I know that

228
00:18:27,590 --> 00:18:30,490
grid layout has all these track sizing algorithms. So it's

229
00:18:31,280 --> 00:18:33,280
somehow costly

230
00:18:33,320 --> 00:18:36,189
if we think about performance, so it takes a while and

231
00:18:36,920 --> 00:18:39,219
On the left we have Chromium on the right we have Firefox

232
00:18:40,070 --> 00:18:43,089
that's because I was crafting this example for this talk and

233
00:18:43,430 --> 00:18:46,899
I realize it we were not getting very good results in Chromium

234
00:18:46,900 --> 00:18:51,999
So I was checking Firefox and Firefox was much better and it makes actually sense the results

235
00:18:52,000 --> 00:18:52,600
We are getting in Firefox

236
00:18:52,600 --> 00:18:59,080
For example with these 10,000 items in Chromium is like 12 times faster with "contain: strict"

237
00:18:59,300 --> 00:19:02,229
which is quite a lot but in Firefox is like

238
00:19:03,800 --> 00:19:08,409
2,700 times faster, but that makes sense because if you need to visit

239
00:19:08,780 --> 00:19:14,229
10,000 grid containers and do layout on will on each of them and all that, or whatever you need to do

240
00:19:14,300 --> 00:19:19,570
Instead of just doing it in one. It's suspected that it's very very fast when you just have this

241
00:19:20,090 --> 00:19:22,720
strict containment in that element, that you just do it there

242
00:19:25,370 --> 00:19:27,050
So

243
00:19:27,050 --> 00:19:33,039
We have been working on this at Igalia as part of our ongoing collaboration with Bloomberg in which we implemented

244
00:19:33,530 --> 00:19:41,019
CSS Grid Layout in the past years or we have been implementing things in JavaScript like async/await or BigInt lately

245
00:19:41,850 --> 00:19:43,850
and

246
00:19:44,880 --> 00:19:51,920
Bloomberg has some quite complex UIs and then we're getting benefit of using CSS Containment in some of them

247
00:19:52,470 --> 00:19:56,959
So this is one of the stress cases we had this is like a huge

248
00:19:57,660 --> 00:20:02,060
table like layout or grid like layout. It doesn't have to be a table or grid

249
00:20:02,060 --> 00:20:06,889
It doesn't matter but it has like 10,000 cells or whatever and the text is changing constantly

250
00:20:08,280 --> 00:20:13,790
but we actually know that we are just changing one number by  another number

251
00:20:13,920 --> 00:20:17,119
that the number is going to fit in the size we are providing, we know that for sure

252
00:20:18,150 --> 00:20:20,150
So we don't need

253
00:20:20,670 --> 00:20:22,969
We can say to the browser. Okay, this element has

254
00:20:24,240 --> 00:20:28,339
"contain: layout size" and you can avoid doing the layout of the

255
00:20:28,710 --> 00:20:35,000
text you are changing there ,because if you are adding a long sentence or whatever the browser needs to do line breaking, all that and

256
00:20:35,370 --> 00:20:37,790
Calculate some things, so we are saying okay

257
00:20:37,790 --> 00:20:40,399
You can save all that time if we have "contain: layout size"

258
00:20:40,560 --> 00:20:44,659
because we know that we are just changing one number way another and it's going to fit inside and

259
00:20:45,180 --> 00:20:51,139
Then this stress test with 10,000 elements. We were like four times faster using containment. So it's a nice optimization

260
00:20:52,230 --> 00:20:58,130
This is the still to ported to LayoutNG, which is new thing that Chromium is shipping really soon. So

261
00:20:59,190 --> 00:21:01,490
It will be like similar things

262
00:21:02,430 --> 00:21:09,680
This was another one pretty similar again very big table or whatever. Here are some of the

263
00:21:10,470 --> 00:21:17,660
Progress bars are moving are changing size. We're not changing the contents like that. But something is changing size inside each of them

264
00:21:18,720 --> 00:21:25,130
But the thing is that in the use case each of these cells were absolute positioned. So we have like

265
00:21:26,610 --> 00:21:28,939
Each of them has its own layer

266
00:21:29,790 --> 00:21:34,430
So the browser when something was changing inside one. It was traversing the whole layer three

267
00:21:35,310 --> 00:21:41,509
and depending on the size of the DOM, that was taking a while in some phases and then we "contain: strict"

268
00:21:41,670 --> 00:21:48,829
and a very big stress we get like 10% faster. It's not a lot but it is, I mean, everything helps

269
00:21:48,830 --> 00:21:51,949
Probably we were respecting more, but maybe there are room for more things yet

270
00:21:53,220 --> 00:21:56,720
So let's talk about the future of all these

271
00:21:57,360 --> 00:22:02,240
We can expect better browser support Firefox is shipping really soon. We don't know Safari but

272
00:22:02,790 --> 00:22:07,159
We hope that, I mean, we never heard complaints from Apple about this spec. So it seems

273
00:22:07,679 --> 00:22:10,009
Maybe at some point they will have it

274
00:22:10,980 --> 00:22:14,870
Other thing that we can expect is more optimizations based on css-contain

275
00:22:14,870 --> 00:22:21,079
Basically when people are start to use it, they will say okay like this example, I just did in Chromium

276
00:22:21,750 --> 00:22:26,390
Ok, this will be much faster than what we are seeing. I mean I'm changing just one element

277
00:22:26,549 --> 00:22:31,129
It should be almost as fast as having just one element in the DOM despite I have a ton of

278
00:22:31,830 --> 00:22:33,720
10,000 elements or whatever

279
00:22:33,720 --> 00:22:37,669
So you can report a bug and probably the browser will try to

280
00:22:38,010 --> 00:22:39,960
improve that use case with some

281
00:22:39,960 --> 00:22:44,750
optimization because maybe, I mean this is somehow it's not new because it has been there for a while but

282
00:22:45,179 --> 00:22:46,760
There has not being a lot of work

283
00:22:46,760 --> 00:22:52,219
So there are still a lot of room for improvement here in a lot of optimizations to be done in the browser

284
00:22:52,620 --> 00:22:54,620
And also there are some new features

285
00:22:55,110 --> 00:23:01,579
or proposals that some browsers are working on, that are based on this spec

286
00:23:02,070 --> 00:23:07,220
So, I don't know if you have heard about Display Locking proposal from Google. Google is

287
00:23:08,040 --> 00:23:11,389
experimenting with this and have some experimental implementation already in Chromium

288
00:23:12,210 --> 00:23:18,049
Main idea of display locking is that in a DOM tree you can lock an element of the DOM

289
00:23:18,840 --> 00:23:22,069
Then you do manipulation in JavaScript you modify

290
00:23:22,070 --> 00:23:28,760
Whatever you need there without blocking the main thread and then when everything is ready you unlock it and show it in the screen

291
00:23:29,130 --> 00:23:35,179
But for that you need that the element is independent of the rest and that's where containment

292
00:23:35,700 --> 00:23:41,480
comes to the rescue. And I mean you mark that element with "contain" and then you can do that

293
00:23:41,880 --> 00:23:43,999
so things like this

294
00:23:44,940 --> 00:23:50,390
in the future will appear maybe display locking is not the the feature that is finally standardized

295
00:23:50,390 --> 00:23:53,119
But it's one of these ideas

296
00:23:54,030 --> 00:23:58,280
And that's all from my side. I hope you understand a little bit better

297
00:23:58,280 --> 00:24:02,659
Now what this spec is about you can start experimenting with it and report bugs about it

298
00:24:03,570 --> 00:24:04,980
in my blog you can read

299
00:24:05,280 --> 00:24:07,859
I just only have one article about this but maybe in the future

300
00:24:07,860 --> 00:24:12,479
I will have more, I've been writing articles about grid and things we are working on for a while

301
00:24:12,640 --> 00:24:20,009
And I will be around the whole day. Feel free to talk to me about CSS Containment, CSS Grid, what it takes to implement a

302
00:24:21,010 --> 00:24:25,290
CSS spec in a browser or things like that or even ask me about Igalia and the things we do

