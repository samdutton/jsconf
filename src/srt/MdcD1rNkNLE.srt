1
00:00:01,430 --> 00:00:26,340
Hello everyone, this is my first time at JSConf,
I'm really excited to be here and talk to

2
00:00:26,340 --> 00:00:32,940
you about servicerless apps powered by web
components, I just want to give a bit of context,

3
00:00:32,940 --> 00:00:40,140
I work for guardian as a senior engineer,
and I work on editorialial tools, which is

4
00:00:40,140 --> 00:00:45,860
the main two being the new guard yawn CMS
called composer and the new media service

5
00:00:45,860 --> 00:00:52,950
for managing images, these are all built as
web apps, three tiered architecture, which

6
00:00:52,950 --> 00:00:58,840
is this one, that means you is a front end,
at the front, which is the browser, and your

7
00:00:58,840 --> 00:01:03,510
code running in the browser, so typically
we use Angular JS for that, then the back

8
00:01:03,510 --> 00:01:09,430
end, which is the code running of your servers,
for that we usually use skyline, city natura,

9
00:01:09,430 --> 00:01:14,600
play, finally the data is store in the the
database, we use elastic search, Mongo and

10
00:01:14,600 --> 00:01:19,250
other things, these are typically referred
to as presentation\h‑‑ let me turn that

11
00:01:19,250 --> 00:01:22,520
off, that's going to annoy me, people tweeting
me.

12
00:01:22,520 --> 00:01:28,010
Presentation, middle tier and data storage,
this is what we're going to refer to in the

13
00:01:28,010 --> 00:01:32,340
rest of the presentation, keep that in mind.

14
00:01:32,340 --> 00:01:36,420
The idea for this talk came in about a few
months back when I started getting increasingly

15
00:01:36,420 --> 00:01:43,030
jealous of this information\h‑‑ that my
colleague built, the responsetive front end

16
00:01:43,030 --> 00:01:50,290
site shows a lot of information about the
health of the server, key system metrics,

17
00:01:50,290 --> 00:01:56,250
KPIs, the deployment status, health service,
and so on, so that's a really useful thing

18
00:01:56,250 --> 00:02:02,670
the too have at the end of your desk, compare
to what we had on my team, yeah, it was a

19
00:02:02,670 --> 00:02:09,539
bit Meh, so why is it Meh, it's not just bauds
it looks a bit shit, it's also complex, it's

20
00:02:09,539 --> 00:02:17,459
complex as a user, I had to be on the VPN
oaccess it, you can't log in on the VPN on

21
00:02:17,459 --> 00:02:22,879
your phone, really tedious, it was also complex
as a developer, sometimes you want to change

22
00:02:22,879 --> 00:02:28,400
these dashboards, if something goes bad, last
week we needed to start monitoring a new cue,

23
00:02:28,400 --> 00:02:34,060
it was tedious to add new things to the dashboard,
it was deployed somewhere and written in this

24
00:02:34,060 --> 00:02:35,060
horrible PHP.

25
00:02:35,060 --> 00:02:43,159
The other side of that is it's also very rigid
because you only pull data from one source,

26
00:02:43,159 --> 00:02:49,269
graphite, which is internal monitoring service,
and, also, the configuration was very much

27
00:02:49,269 --> 00:02:53,939
mix in the with this horrible PHP that I mentioned
which made it hard to edit and manipulate

28
00:02:53,939 --> 00:02:57,650
graphs the way I would like to be able to
do.

29
00:02:57,650 --> 00:03:02,069
When something's not good, you put nit the
bin and you say, let's build a better one.

30
00:03:02,069 --> 00:03:08,359
So, let's try and build a better one, going
back to the architecture I presented earlier,

31
00:03:08,359 --> 00:03:13,939
we know that we have the data storage, this
is what data is, it can be possibly in graphite,

32
00:03:13,939 --> 00:03:18,909
which is occurring, what we had for our more
legacy systems, and more and more we're moving

33
00:03:18,909 --> 00:03:26,409
towards AWS, Amazon web services, which has
it's own monitoring service called Cloud watch,

34
00:03:26,409 --> 00:03:30,579
that's what we're going focus on for the rest
of the presentation, that's where services

35
00:03:30,579 --> 00:03:35,809
are moving, so that's where the data is, and
we know that we want to have the presentation,

36
00:03:35,809 --> 00:03:40,409
layer display, the graph in your browser,
that's what we've got, now, what about this

37
00:03:40,409 --> 00:03:43,139
middle tier thing.

38
00:03:43,139 --> 00:03:49,999
What happens with it? Do we need it? Well,
so, I really love sky dive, more I love not

39
00:03:49,999 --> 00:03:55,269
having to write any code or maintain servers
that might go down, have to monitor the monitoring,

40
00:03:55,269 --> 00:04:01,769
it's boring can we get rid of it? What do
we actually need it for in the first place?

41
00:04:01,769 --> 00:04:07,060
Traditionally, I think aver if Id three things
that you do on the middle tier, the first

42
00:04:07,060 --> 00:04:08,709
one is Auth.

43
00:04:08,709 --> 00:04:14,349
By that I mean authentication, which is know
hog the person is, and then authorization,

44
00:04:14,349 --> 00:04:18,310
which is determining what their missions you
is in the system.

45
00:04:18,310 --> 00:04:23,389
Once you know that they can come in, okay,
great, I can query the database on their behalf,

46
00:04:23,389 --> 00:04:28,270
and retrieve some data, and once I've got
the data, I can just render it.

47
00:04:28,270 --> 00:04:31,900
That's the simplest thing that the middle
tier does, and that's what wow would do if

48
00:04:31,900 --> 00:04:36,860
you implement the any language.

49
00:04:36,860 --> 00:04:42,669
Serverring the actual files, maybe caching,
serving data, let's leave that on the side

50
00:04:42,669 --> 00:04:43,669
for now.

51
00:04:43,669 --> 00:04:47,139
So, let's see, can we do all of that on the
client instead.

52
00:04:47,139 --> 00:04:52,650
Let's say we have an HTML page, and we write
all of this in JavaScript.

53
00:04:52,650 --> 00:04:55,780
So how do we Saturday? We start with the Auth
aspect.

54
00:04:55,780 --> 00:05:01,759
Now, AWS gives us nice primitives for that,
support this idea of cry didn'tbles that you

55
00:05:01,759 --> 00:05:07,400
can create, and then once you have these drew
enables, which is a key and a secret, don't

56
00:05:07,400 --> 00:05:13,400
try and copy those, they're not real, and,
the region, and once you've got that you can

57
00:05:13,400 --> 00:05:17,789
define the permissions that they have, so
I'm going to define these credentials, all

58
00:05:17,789 --> 00:05:21,479
think can do is query Cloud watch, can't spin
up new servers and so on, all they can do

59
00:05:21,479 --> 00:05:24,639
is read the metrics data.

60
00:05:24,639 --> 00:05:30,030
Define them and put them in the page like,
this I have my Auth sorted.

61
00:05:30,030 --> 00:05:31,030
That's in JavaScript.

62
00:05:31,030 --> 00:05:36,030
Now I have my Auth, I'm going to do a query
with it.

63
00:05:36,030 --> 00:05:44,599
So do that, I'm going to use the AWS JDK,
it's Open Source, you can download it.

64
00:05:44,599 --> 00:05:49,650
It lets you query the Aws services you yeeuate
a new instance of the Cloud watch service

65
00:05:49,650 --> 00:05:55,009
with the cree credentials we've passed in
earlier, then you can call the method to get

66
00:05:55,009 --> 00:06:00,360
method statistics and define what you're querying.

67
00:06:00,360 --> 00:06:08,289
Here we're going to look at the request count,
in a given load balance or given time, and

68
00:06:08,289 --> 00:06:09,289
sum it.

69
00:06:09,289 --> 00:06:13,760
And when we do this, asin concurrent resolution
nosily we get the response back, that's what

70
00:06:13,760 --> 00:06:20,729
we see at the bottom here, that's quite, it's
AWS specific, so we might transform that,

71
00:06:20,729 --> 00:06:25,379
don't look at this code, basically you transform
it into a time series, which a simple array

72
00:06:25,379 --> 00:06:31,539
of pairs, and in the pair you got the first
item is the time, the event happened at and

73
00:06:31,539 --> 00:06:33,500
then the second item is the value.

74
00:06:33,500 --> 00:06:35,570
Very simple data structure.

75
00:06:35,570 --> 00:06:39,400
So we've got our day the, we have our metrics
data, now we fled to render it.

76
00:06:39,400 --> 00:06:44,689
I'm lacy, not go dog that myself, just load
in Google chat, and write this.

77
00:06:44,689 --> 00:06:50,349
It's actually quite, it's quite a lot of boilerplate
here, that's what you have to do, that's from

78
00:06:50,349 --> 00:06:57,389
the example on the Docs, in the middle here
we actually see that we add the rows in the

79
00:06:57,389 --> 00:07:03,020
middle of this big blob of JavaScript, and
at the end we also say, okay, select this

80
00:07:03,020 --> 00:07:05,949
element and then inject the graph in the page.

81
00:07:05,949 --> 00:07:08,499
And then we get our graph.

82
00:07:08,499 --> 00:07:09,499
That's great, okay.

83
00:07:09,499 --> 00:07:12,189
Job done, let's all go to the pub.

84
00:07:12,189 --> 00:07:19,240
Not quite, so we fixed the first aspect, it's
no longer complex, it's just static HTML page

85
00:07:19,240 --> 00:07:26,930
in the browser, there's no VPN crap anymore,
no PHP anymore, that's sorted in terms of

86
00:07:26,930 --> 00:07:32,900
rigidity we're still pulling from only one
data source, now reading from AWS that's still

87
00:07:32,900 --> 00:07:37,810
only one, and the configuration was mixed
into all this spaghetti code I showed you

88
00:07:37,810 --> 00:07:44,659
earlier, that's not very nice, it's not veri'
city change graphs quite rapidly.

89
00:07:44,659 --> 00:07:50,360
So it's not better enough, so what can we
do? What we actually want, ideally is to not

90
00:07:50,360 --> 00:07:55,909
have any of this broiler plate, we want to
say I want this graph of request, and, well,

91
00:07:55,909 --> 00:08:01,460
that's sounds very much like an element, right?
Can we do that with an element? So, I'm sure

92
00:08:01,460 --> 00:08:03,740
hopefully you know where I'm going with this.

93
00:08:03,740 --> 00:08:09,760
Web components who in the room has heard of
web components? Cool.

94
00:08:09,760 --> 00:08:15,039
Who has tried web components? Quite a lot,
great.

95
00:08:15,039 --> 00:08:21,180
So, quick primer, so, web component is this
idea of custom element, so you can say there's

96
00:08:21,180 --> 00:08:27,580
this Google map element that will show a map
of this Geo position, okay, if you put this

97
00:08:27,580 --> 00:08:31,409
in your browser it's not going to work magically,
right, it's not going do anything.

98
00:08:31,409 --> 00:08:37,610
How does it work? The idea of web components
you can teach the browser how to do\h‑‑

99
00:08:37,610 --> 00:08:41,330
what to do with this when you see in in the
page, you can define the behavior when you

100
00:08:41,330 --> 00:08:45,570
see custom element and make it do anything
you want.

101
00:08:45,570 --> 00:08:47,730
All of this you program in JavaScript.

102
00:08:47,730 --> 00:08:53,660
So, once you've defined\h‑‑ once you've
written the code for this, so that it's in

103
00:08:53,660 --> 00:08:58,320
the scope, this is like you import the style
sheets to sort of change the presentation

104
00:08:58,320 --> 00:09:03,990
of your page, this is simply using the HTML
import, once you have that, well, actually

105
00:09:03,990 --> 00:09:10,300
all of this, in fact it doesn't really, kind
of using futuristic APIs, you need to use

106
00:09:10,300 --> 00:09:17,790
poly fills, I will use platform JS, live Google
rewrite to port all the Google APIs to the

107
00:09:17,790 --> 00:09:21,470
current browser.

108
00:09:21,470 --> 00:09:27,100
If HTML element is your classic Lggo blocks,
this is like the Lego mind Storm, you can

109
00:09:27,100 --> 00:09:28,690
do anything.

110
00:09:28,690 --> 00:09:37,040
We're going to use web components we're going
to lay polymer on top of this, on top of platform

111
00:09:37,040 --> 00:09:43,220
J S, you don't have to use it to use web components
you can use X tag from Mozilla if you prefer.

112
00:09:43,220 --> 00:09:50,050
Let's use polymer it has a few niceties such
as these elements scaffolding, the clarity

113
00:09:50,050 --> 00:09:58,829
of sin tack, we've seen this example we just
import polymers, so we can use the polymers

114
00:09:58,829 --> 00:10:03,720
element to define new element called Margarita,
it takes one attribute\h‑‑ my greeter\h‑‑

115
00:10:03,720 --> 00:10:12,850
and we have a tag my greeter, tag many my
name, as an attribute.

116
00:10:12,850 --> 00:10:16,899
We see that the template that this is what
the\h‑‑ we're going to put in the shad

117
00:10:16,899 --> 00:10:25,139
come DOM, basically it's what's going to appear
ton page instead of the my greeter element,

118
00:10:25,139 --> 00:10:29,850
and it's going to say hello and then my name,
this is the day the binding syntax, so polymers

119
00:10:29,850 --> 00:10:36,360
supports data binding, which meanness that
it's going to replace the name, sort of curly

120
00:10:36,360 --> 00:10:43,590
thing with the value of the at try bud, here
Seb, and because it's bidirectional, you can

121
00:10:43,590 --> 00:10:48,680
also bind it to this input text, where it's
going to give the initial value to the input

122
00:10:48,680 --> 00:10:53,980
text Seb, if you change it ill will change
it everywhere for this variable.

123
00:10:53,980 --> 00:10:54,980
That's powerful.

124
00:10:54,980 --> 00:10:58,300
And we're going to use it throughout the rest
of this presentation.

125
00:10:58,300 --> 00:11:01,759
Okay, so, will's dive in.

126
00:11:01,759 --> 00:11:04,399
Or not ...

127
00:11:04,399 --> 00:11:09,680
oh, here we go.

128
00:11:09,680 --> 00:11:12,870
So we've got this Aws con fig element.

129
00:11:12,870 --> 00:11:16,820
We've created a few element AWS‑Config.

130
00:11:16,820 --> 00:11:21,459
It takes three attributes, region key and
secret.

131
00:11:21,459 --> 00:11:25,889
We just pass in key values to the at try brute.

132
00:11:25,889 --> 00:11:31,079
What do these elements do? Nothing, not useful.

133
00:11:31,079 --> 00:11:38,160
Nothing to display, it's just a configuration
thing, what do we cowith it? We add a new

134
00:11:38,160 --> 00:11:44,630
attribute, we call it Sync, an at try brute
we're going to write out what sort of the

135
00:11:44,630 --> 00:11:53,600
out put of the element is as data here we're
going to out put to AWS‑Co infig, which

136
00:11:53,600 --> 00:11:59,750
is what we had earlier in the JavaScript,
so actually, if you go to the implementation

137
00:11:59,750 --> 00:12:02,420
it looks similar to what we did earlier.

138
00:12:02,420 --> 00:12:10,270
We load in polymers, A W S‑Config with four
attributes then I declare how this element

139
00:12:10,270 --> 00:12:15,870
works, I'm observing the first three attributes,
the first three inputs, when ever any of it

140
00:12:15,870 --> 00:12:17,720
changes I'm going to update.

141
00:12:17,720 --> 00:12:22,420
I'm also going to update when the element
is ready, it's been put in the page.

142
00:12:22,420 --> 00:12:27,579
What does update do? It just checks that the
three inputs are there, if they R.

143
00:12:27,579 --> 00:12:32,050
create a new object and write it\h‑‑ sort
of assign it to the same property which will

144
00:12:32,050 --> 00:12:34,880
basically set it to this variable that we
day bound.

145
00:12:34,880 --> 00:12:41,329
So, I have this element, by the way, all of
this is Open Source, it's GitHub, so you can

146
00:12:41,329 --> 00:12:45,889
play with this, you can just make your own.

147
00:12:45,889 --> 00:12:50,710
So we've got our credentials now as a variable,
so we can pass it in to this Cloud watch element,

148
00:12:50,710 --> 00:12:56,850
extract same JavaScript element we had earlier,
which, does the querying using the SDK, not

149
00:12:56,850 --> 00:13:01,819
going show you the code for that, basically
we have this element that takes the con give

150
00:13:01,819 --> 00:13:08,830
as input, it's going to have it's own sing
attribute that will write asin concurrent

151
00:13:08,830 --> 00:13:14,630
resolution nosily when the day the comes back,
write the into the variable, that's going

152
00:13:14,630 --> 00:13:22,630
to contain time series, you mass AWS dimension,
just the same way you do like an option inside

153
00:13:22,630 --> 00:13:23,860
a select for instance.

154
00:13:23,860 --> 00:13:28,089
So we have our data and it looks very much
like what we had before.

155
00:13:28,089 --> 00:13:34,140
Of\h‑‑ is this thing working? It looks
like what we had before, which is this time

156
00:13:34,140 --> 00:13:38,110
series data, we can pass it in to the render
element.

157
00:13:38,110 --> 00:13:42,339
Now, actually, because I'm super Lazy, I'm
not going to write it, I'll steal it from

158
00:13:42,339 --> 00:13:51,060
Google, Google wrote their own chart element
testimony wraps their Google chat library

159
00:13:51,060 --> 00:13:56,899
there's a lot less of this horrible boilerplate
than before, that's already a nice win.

160
00:13:56,899 --> 00:14:03,980
Just passing in my data, define how it's going
to look, and, there we go, we've got our chart,

161
00:14:03,980 --> 00:14:04,980
so that's cool.

162
00:14:04,980 --> 00:14:09,639
And, weave got all of this through web components,
so what does it look likened to end, end to

163
00:14:09,639 --> 00:14:15,070
end we have\h‑‑ weave got our three‑string
attributes that we pass into the AWS config

164
00:14:15,070 --> 00:14:24,000
element, that will write it to a new variable,
we pass that to Cloud watch alongside parameters,

165
00:14:24,000 --> 00:14:28,629
do the Ajax request, we can write that into
another variable and pass to Google chart

166
00:14:28,629 --> 00:14:34,240
and boom chart appears, great, what does this
look like in code, very similar in fact, we

167
00:14:34,240 --> 00:14:40,250
load in platform JS at the top, which is the
poly fill, we import our three elements, we

168
00:14:40,250 --> 00:14:45,860
use them in our auto binding context that
gives us the data binding thing, that's it,

169
00:14:45,860 --> 00:14:49,860
this is three elements, that works for single
chart.

170
00:14:49,860 --> 00:14:53,839
If we end up having more chart, more request
charts you can already tell that it's going

171
00:14:53,839 --> 00:14:55,200
to take quite a lot of courage.

172
00:14:55,200 --> 00:15:00,790
Went up with a something like this, a lot
of code application, adopt repeat yourself,

173
00:15:00,790 --> 00:15:05,839
not clean to pop I paste code if you're doing
it, you're doing it wrong probably.

174
00:15:05,839 --> 00:15:12,730
How do you abstract this? When typical programming
you paramettize it as a function, right, then

175
00:15:12,730 --> 00:15:16,890
bits that change you make them parameters
of the function and abstracted it way way.

176
00:15:16,890 --> 00:15:24,129
You're going to use an element instead, maybee
make the two input, the config, and load banner

177
00:15:24,129 --> 00:15:29,861
which is the only thing that change in the
code, question abstract it to an Aws element

178
00:15:29,861 --> 00:15:36,009
and just pass in the load balance, and then
we can use it and it's done what we want it,

179
00:15:36,009 --> 00:15:44,019
with have the Aws element, and request a draft
for the load\h‑‑ great, we've done it

180
00:15:44,019 --> 00:15:51,210
for requests, we can show latent say, you
can show like bucketed numbers of accounts,

181
00:15:51,210 --> 00:15:53,500
you can do anything you want.

182
00:15:53,500 --> 00:15:57,620
And because weave based that on small awe
Tommic modules you can replace some of the

183
00:15:57,620 --> 00:16:00,029
piece of the puzzle.

184
00:16:00,029 --> 00:16:05,589
You can say, let's fetch the data from another
source, let's fetch day from graphite instead

185
00:16:05,589 --> 00:16:12,250
of AWS Cloud watch, it's a completely different
server, but, because we out put this in the

186
00:16:12,250 --> 00:16:14,389
same data format\h‑‑ interesting.

187
00:16:14,389 --> 00:16:25,060
(Laughing) that's how impressive web components
are (Laughing) because we use the same data

188
00:16:25,060 --> 00:16:29,160
form mat we can pass it into the Google chat
and it works just the same.

189
00:16:29,160 --> 00:16:37,350
So, a small confession weave actually cheated
all along, everywhere we pass in the the exact

190
00:16:37,350 --> 00:16:42,850
sort of string values for the time, well,
that's a bit stupid, that means we're also

191
00:16:42,850 --> 00:16:47,199
watching a given sort of time range, time
interval for all our data, that's not a very

192
00:16:47,199 --> 00:16:49,250
useful graph.

193
00:16:49,250 --> 00:16:55,550
So what can we do instead? So, what we\h‑‑
what do we want, we want to say just the last

194
00:16:55,550 --> 00:17:00,149
hour of data, so how do we do that? Well,
the last hour of data means that the time

195
00:17:00,149 --> 00:17:02,890
interval, ends now.

196
00:17:02,890 --> 00:17:10,580
So, we're just going to create new variables
with the now time, where does now come from,

197
00:17:10,580 --> 00:17:16,000
there's an element for that, just create the
new time element, that's going to export the

198
00:17:16,000 --> 00:17:21,130
time, when it Eastern initialized and the
time, the now variable will store a date time

199
00:17:21,130 --> 00:17:25,860
that is passed into the Cloud watch element
that's great, except that it's just\h‑‑

200
00:17:25,860 --> 00:17:27,160
it doesn't update.

201
00:17:27,160 --> 00:17:32,280
We can make it update, we can pass this a
refresh attribute that says update every minute.

202
00:17:32,280 --> 00:17:39,110
That means that actually the nice thing here
is that of when now updates after a minute,

203
00:17:39,110 --> 00:17:44,760
the now value changes and because Cloud watches
also observing these inputs is going to update,

204
00:17:44,760 --> 00:17:52,080
is going to do another request to fetch the
updated data, and because the charting elementals

205
00:17:52,080 --> 00:17:54,270
watches its inputs, it's going to update the
graph.

206
00:17:54,270 --> 00:18:00,200
It's like functional reactive programming
where you define the data flow and then everything

207
00:18:00,200 --> 00:18:04,280
updates without having to explicitly listen
for special vents, nobody knows about the

208
00:18:04,280 --> 00:18:08,830
other things happening, it's just day the
bound.

209
00:18:08,830 --> 00:18:12,460
We're not quite done yet because the start
time is still hard coded, so what we said

210
00:18:12,460 --> 00:18:17,681
we wanted to have a\h‑‑ time interval
of one hour, so, let's do that, let's define

211
00:18:17,681 --> 00:18:19,660
a time range, el.

212
00:18:19,660 --> 00:18:24,850
That says one hour and then we bind the end
to now, which means that the start is going

213
00:18:24,850 --> 00:18:31,400
to be an output, which will be\h‑‑ can
attach to Cloud watch element.

214
00:18:31,400 --> 00:18:37,080
We've got now our time range of one hour,
that's enforced, when it start changes, except

215
00:18:37,080 --> 00:18:41,080
we're still not done the number of hours is
fixed, what do we want? We probably want a

216
00:18:41,080 --> 00:18:46,370
custom number of hours what if your service
died a horrible death an hour and half ago,

217
00:18:46,370 --> 00:18:50,200
we want to do change.time range.

218
00:18:50,200 --> 00:18:55,520
So if you said the user needs to do it, we
need offI element, I'm Lazy, I'm not going

219
00:18:55,520 --> 00:19:00,680
to write my own, steel this one from gage
Google that's what they're for, we take the

220
00:19:00,680 --> 00:19:10,300
paper ment, and that's going to export a simple
integer value that we're going to bind as

221
00:19:10,300 --> 00:19:15,120
ours, when I change the value here as you
see in the give, that changes the number of

222
00:19:15,120 --> 00:19:22,420
hours, the same way as when now changes, that
cascades down, changes the data and renders

223
00:19:22,420 --> 00:19:23,420
again.

224
00:19:23,420 --> 00:19:28,330
If you change the number of hours as a user,
it just cascades down and changes what you

225
00:19:28,330 --> 00:19:33,560
see in the graph automatically .
so that's pretty neat.

226
00:19:33,560 --> 00:19:38,680
This is what the code looks like, you can
review this later.

227
00:19:38,680 --> 00:19:43,940
Another thing we did, which we cheated a bit
on is we've hard coded secret in the page.

228
00:19:43,940 --> 00:19:49,970
Now if you are security expert even if you're
not, this is not a good thing to do, you don't

229
00:19:49,970 --> 00:19:53,660
want to put secrets in the page if someone
sees that page, that means they can access

230
00:19:53,660 --> 00:19:58,840
your\h‑‑ well, they can query how slow
your service are, not souper dangerous, still

231
00:19:58,840 --> 00:20:02,650
not a nice thing to do, probably don't want
do that.

232
00:20:02,650 --> 00:20:06,520
How do you do that, you need to awe then the
Kate with your servers.

233
00:20:06,520 --> 00:20:13,580
Well, what we can do is we can use this magical
thing with the AWS web identity federation,

234
00:20:13,580 --> 00:20:18,620
this is provide by the AWS, and it lets you
acquire a talk with a third party or with

235
00:20:18,620 --> 00:20:26,830
a provider like Google, Facebook, or Amazon,
and then you said that token for temporary

236
00:20:26,830 --> 00:20:31,550
set of cry didn'tbles that you can define
permissions for this is what I've done here,

237
00:20:31,550 --> 00:20:36,830
weave written a new AWS I deputy element that
wraps the Google element that Google provided

238
00:20:36,830 --> 00:20:41,450
they had to writ for me, so that's nice.

239
00:20:41,450 --> 00:20:46,720
That expose the same AWS config object as
the previous element did, you can substitute

240
00:20:46,720 --> 00:20:55,080
the hard coded con fig we had previously with
this one that does it in a safer way and without

241
00:20:55,080 --> 00:20:58,930
revoling any secrets, so, that's nice.

242
00:20:58,930 --> 00:21:03,080
So let's do live Demo.

243
00:21:03,080 --> 00:21:05,060
(Laughing) maybe.

244
00:21:05,060 --> 00:21:06,060
Okay.

245
00:21:06,060 --> 00:21:15,350
So, let's see if it still works this is a
demo ready to have made.

246
00:21:15,350 --> 00:21:24,320
You see on the right there is tag API metrics,
they appear here, they fetch from graphite

247
00:21:24,320 --> 00:21:27,860
is simply I P based I have to be on the VPN
for this.

248
00:21:27,860 --> 00:21:34,300
And other thing we see is these weird rounded
colored dots and these represent deploy either

249
00:21:34,300 --> 00:21:39,740
proproduction or preproduction environment
where whether they succeeded or failed.

250
00:21:39,740 --> 00:21:42,850
This is day that's live from today, from now.

251
00:21:42,850 --> 00:21:50,130
And, so, as said, we're going to use AWS identity
element to do the Auth so this is the Google

252
00:21:50,130 --> 00:21:53,660
sign in element, in is what it looks like,
this is the button for it.

253
00:21:53,660 --> 00:22:03,750
I'm just going to need Auth with Google, and
that creates a tocken, trades it with Amazon

254
00:22:03,750 --> 00:22:12,270
and gets a set of credential, everything is
data bound, the data appears here magically

255
00:22:12,270 --> 00:22:18,970
so we can see things like this, you the latency,
request, and\h‑‑ this is a static page,

256
00:22:18,970 --> 00:22:31,650
this is just a Python server, static HTML
file\h‑‑ and this' all using web components.

257
00:22:31,650 --> 00:22:42,240
(applause) you can change that, you can change
what time window, it automatically updates

258
00:22:42,240 --> 00:22:47,160
just through the magic of data binding, that's
also neat, you don't have to write complex

259
00:22:47,160 --> 00:22:51,840
logic to update.

260
00:22:51,840 --> 00:23:05,510
That's the demo.

261
00:23:05,510 --> 00:23:09,960
So does that mean we can all say Fuck server
I'm just going to write JavaScript code if

262
00:23:09,960 --> 00:23:14,950
now on and don't need to do anymore server,
I'm just going to talk today that base from

263
00:23:14,950 --> 00:23:22,450
the end of times no? Not quite partly because
well, it's\h‑‑ well, if you use the web

264
00:23:22,450 --> 00:23:27,440
components the support is still fairly limited,
it doesn't support all browsers, especially

265
00:23:27,440 --> 00:23:31,630
all the browsers, and you might want to support
that.

266
00:23:31,630 --> 00:23:35,960
The other thing is, as we saw, querying the
database directly from the browser that doesn't

267
00:23:35,960 --> 00:23:41,240
really scale very well, so for things with
low traffic like something that develops use

268
00:23:41,240 --> 00:23:45,820
or internal users use, thattest a fine you
can use that, but I wouldn't put that on the

269
00:23:45,820 --> 00:23:49,900
front of the Guardian web site, I don't think
Patrick would like that much.

270
00:23:49,900 --> 00:23:53,080
That would not scale very well.

271
00:23:53,080 --> 00:23:57,770
The other thing is we want to have a system
for authentication, especially if you're doing

272
00:23:57,770 --> 00:24:01,450
read/write, even reading sensitive data like
this.

273
00:24:01,450 --> 00:24:07,010
For this the only sort of component you can
rely on is the back end, you can't rely on

274
00:24:07,010 --> 00:24:10,490
the front end for that, anyone can write it.

275
00:24:10,490 --> 00:24:16,150
So, you need support from your back end services,
and you can do that with IP restrictions or

276
00:24:16,150 --> 00:24:21,990
do with that things like AWS policies, but
the policies are quite course grain, you can

277
00:24:21,990 --> 00:24:27,740
only say\h‑‑ this column in this database,
so there's limitations that make it a bit

278
00:24:27,740 --> 00:24:33,470
harder to use for write services, you can
still do it for things like this, and quite

279
00:24:33,470 --> 00:24:35,300
a lot of other cases.

280
00:24:35,300 --> 00:24:39,850
6 in the future I think there's more things
we want to do with the dashboard, this is

281
00:24:39,850 --> 00:24:47,120
the beginning, showing deploy lines on graphs,
like how many immanages I add every day, surfacing

282
00:24:47,120 --> 00:24:51,460
JavaScript, we use the century service to
coupe them, great to see when there's a spike

283
00:24:51,460 --> 00:24:55,130
after deploy.

284
00:24:55,130 --> 00:25:01,080
And see the server hayseed, a lot particular
things you can add to the servers carrying

285
00:25:01,080 --> 00:25:03,590
on the same pattern.

286
00:25:03,590 --> 00:25:07,400
What have we learned so far? I think we've
seen that it's possible to remove this middle

287
00:25:07,400 --> 00:25:13,220
tier, that makes the whole system a lot simpler
to maintain to edit.

288
00:25:13,220 --> 00:25:17,230
It works in a variety of cases.

289
00:25:17,230 --> 00:25:18,230
The other Inc.

290
00:25:18,230 --> 00:25:24,130
this we've learn is that you can use web components
as atomic programmable blocks like Lego blocks,

291
00:25:24,130 --> 00:25:31,210
then you can combine them using data binding
or composition or events and that lets you

292
00:25:31,210 --> 00:25:36,510
create quite a complex system out of very
simple blocks that you can then substitute.

293
00:25:36,510 --> 00:25:41,450
So that's what I've got, and as said, all
of this is Open Source, you can check it out,

294
00:25:41,450 --> 00:25:47,380
so I recommend you go and play with it, find
bug reports and everything and play with it

295
00:25:47,380 --> 00:25:49,370
at home, it's safe that's all.

