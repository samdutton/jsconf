1
00:00:01,100 --> 00:00:19,840

[Music]

2
00:00:19,840 --> 00:00:23,150
salamat petang thank you so much all for

3
00:00:23,150 --> 00:00:25,130
being here I put this in front of every

4
00:00:25,130 --> 00:00:26,480
one of my presentations it's a lot of

5
00:00:26,480 --> 00:00:28,820
fun and I'll just stare at it can we get

6
00:00:28,820 --> 00:00:36,690
the house lights lowered please pardon

7
00:00:36,700 --> 00:00:39,560
so I look up at this cat and I just kind

8
00:00:39,560 --> 00:00:46,160
of reach I just do this generally not

9
00:00:46,160 --> 00:00:47,840
this long but again I'm just stalling

10
00:00:47,840 --> 00:00:55,570
for the lights and it calms me down as

11
00:00:55,570 --> 00:00:57,770
long as you keep laughing I'm going to

12
00:00:57,770 --> 00:01:05,790
keep doing it

13
00:01:05,800 --> 00:01:09,010
okay that seems good I'm so much more

14
00:01:09,010 --> 00:01:12,370
relaxed now okay so let's let's talk

15
00:01:12,370 --> 00:01:14,880
about node versions so my name is miles

16
00:01:14,880 --> 00:01:19,020
I work for a small disruptive startup

17
00:01:19,020 --> 00:01:25,090
called IBM and I contribute to a small

18
00:01:25,090 --> 00:01:27,880
platform called nodejs it's worth

19
00:01:27,880 --> 00:01:29,380
mentioning you'll see cut at the bottom

20
00:01:29,380 --> 00:01:31,390
here the opinions in this talk are my

21
00:01:31,390 --> 00:01:33,970
own you know you got to just say that if

22
00:01:33,970 --> 00:01:35,500
you're ever up on stage I advise that

23
00:01:35,500 --> 00:01:38,200
you say that always cover yourself but

24
00:01:38,200 --> 00:01:42,040
so version how do they work so it turns

25
00:01:42,040 --> 00:01:44,320
out you know versions are versions are a

26
00:01:44,320 --> 00:01:47,170
lot like magnets and stick with me on

27
00:01:47,170 --> 00:01:50,080
this for a second versions versions are

28
00:01:50,080 --> 00:01:57,010
a lot like magnets primarily in the way

29
00:01:57,010 --> 00:01:59,110
that many people are pretty darn

30
00:01:59,110 --> 00:02:01,150
confused about how they work like how do

31
00:02:01,150 --> 00:02:02,680
magnets work I don't know how two

32
00:02:02,680 --> 00:02:04,090
versions work well I do know so that's

33
00:02:04,090 --> 00:02:05,590
why I'm here I'm going to tell you about

34
00:02:05,590 --> 00:02:08,679
it but you know real talk this stuff is

35
00:02:08,679 --> 00:02:11,350
complicated there's a lot of moving

36
00:02:11,350 --> 00:02:14,350
parts and trying to hold it all in your

37
00:02:14,350 --> 00:02:15,700
head at one time can be really hard

38
00:02:15,700 --> 00:02:17,260
especially if it's not something that

39
00:02:17,260 --> 00:02:20,830
you're used to but you know the nice

40
00:02:20,830 --> 00:02:22,660
thing here is that you don't actually

41
00:02:22,660 --> 00:02:25,030
need to understand everything to

42
00:02:25,030 --> 00:02:27,430
contribute in a meaningful way I think

43
00:02:27,430 --> 00:02:28,950
this is a really great takeaway for

44
00:02:28,950 --> 00:02:31,690
software in general or even just you

45
00:02:31,690 --> 00:02:34,060
know like life but you don't need to

46
00:02:34,060 --> 00:02:35,739
understand everything to make a

47
00:02:35,739 --> 00:02:37,300
difference to contribute and to help

48
00:02:37,300 --> 00:02:39,880
make a difference so what we're going to

49
00:02:39,880 --> 00:02:41,080
do is we're going to start with a small

50
00:02:41,080 --> 00:02:43,060
piece we're going to break it down and

51
00:02:43,060 --> 00:02:44,830
figure out how this becomes something

52
00:02:44,830 --> 00:02:47,050
bigger and the first small piece to talk

53
00:02:47,050 --> 00:02:50,320
about is semantic versioning Rico is

54
00:02:50,320 --> 00:02:52,720
awesome and brought it up earlier and

55
00:02:52,720 --> 00:02:56,020
you know we see this in any of you have

56
00:02:56,020 --> 00:02:58,239
written code how many of you have have

57
00:02:58,239 --> 00:02:59,620
heard of semantic versioning before can

58
00:02:59,620 --> 00:03:01,930
I just see hands that's awesome that's a

59
00:03:01,930 --> 00:03:03,790
lot of you for those of you who haven't

60
00:03:03,790 --> 00:03:07,150
any time you see a version number that

61
00:03:07,150 --> 00:03:08,920
version number can be semantic

62
00:03:08,920 --> 00:03:11,200
versioning I'll say can be because some

63
00:03:11,200 --> 00:03:12,610
people just like to put random numbers

64
00:03:12,610 --> 00:03:13,660
in front of their code and it doesn't

65
00:03:13,660 --> 00:03:16,000
mean anything but what semantic

66
00:03:16,000 --> 00:03:18,520
versioning is is it's a contract it's a

67
00:03:18,520 --> 00:03:19,630
contract from the people who

68
00:03:19,630 --> 00:03:21,370
we're developing the code to the people

69
00:03:21,370 --> 00:03:24,430
are using the code to let them know how

70
00:03:24,430 --> 00:03:26,440
the code works and what kind of changes

71
00:03:26,440 --> 00:03:28,600
to expect them between versions we have

72
00:03:28,600 --> 00:03:32,290
the major the minor and the patch

73
00:03:32,290 --> 00:03:34,300
version numbers and so let's talk a

74
00:03:34,300 --> 00:03:36,240
little bit about what those are

75
00:03:36,240 --> 00:03:40,060
assembler a patch is any change which

76
00:03:40,060 --> 00:03:42,610
does not add new features and does not

77
00:03:42,610 --> 00:03:45,790
break any expected behavior a patch

78
00:03:45,790 --> 00:03:47,620
change can be an update to documentation

79
00:03:47,620 --> 00:03:51,220
it can be an update to a test it can be

80
00:03:51,220 --> 00:03:53,470
an optimization to make something faster

81
00:03:53,470 --> 00:03:55,780
it could be a bug fix there's a whole

82
00:03:55,780 --> 00:03:57,010
list of things that can come in

83
00:03:57,010 --> 00:03:59,020
assembler patch and basically as I was

84
00:03:59,020 --> 00:04:00,160
saying the only thing that's important

85
00:04:00,160 --> 00:04:02,020
is it's not a new feature and it doesn't

86
00:04:02,020 --> 00:04:06,370
change behavior what's a minor so a

87
00:04:06,370 --> 00:04:09,420
minor is anything that adds any new

88
00:04:09,420 --> 00:04:13,360
functionality to a piece of code this

89
00:04:13,360 --> 00:04:15,370
can be a new function this can be an

90
00:04:15,370 --> 00:04:20,830
extended API this could be this could be

91
00:04:20,830 --> 00:04:22,780
a new feature that isn't even something

92
00:04:22,780 --> 00:04:24,670
that you directly call on but it just

93
00:04:24,670 --> 00:04:26,800
kind of changes the way things work any

94
00:04:26,800 --> 00:04:29,350
time that you add something new to a

95
00:04:29,350 --> 00:04:30,700
code and you're doing a release you

96
00:04:30,700 --> 00:04:32,410
should do that release as December minor

97
00:04:32,410 --> 00:04:36,610
a December major is any change that's

98
00:04:36,610 --> 00:04:38,890
breaking that could be changing the name

99
00:04:38,890 --> 00:04:40,810
of a function that could be changing the

100
00:04:40,810 --> 00:04:42,940
functionality of a return in the node

101
00:04:42,940 --> 00:04:44,770
project we even consider changing error

102
00:04:44,770 --> 00:04:46,390
messages assembler major because of how

103
00:04:46,390 --> 00:04:49,780
many people rely on our error messages

104
00:04:49,780 --> 00:04:51,730
for making decisions or for checking

105
00:04:51,730 --> 00:04:53,800
things you may be doing like a catch and

106
00:04:53,800 --> 00:04:55,210
then making a change based on the catch

107
00:04:55,210 --> 00:04:58,650
of a throw so we'll get more into

108
00:04:58,650 --> 00:05:00,820
examples of things that are breaking a

109
00:05:00,820 --> 00:05:04,570
little bit later so node has a number of

110
00:05:04,570 --> 00:05:06,310
different release lines we have the

111
00:05:06,310 --> 00:05:07,960
current release line which is most

112
00:05:07,960 --> 00:05:09,610
recently released v seven point two

113
00:05:09,610 --> 00:05:12,460
point zero that was released on Tuesday

114
00:05:12,460 --> 00:05:14,050
or as I've learned on Wednesday in

115
00:05:14,050 --> 00:05:17,770
Singapore we have active LTS there's

116
00:05:17,770 --> 00:05:20,920
versions 6.9 point 1 and version four

117
00:05:20,920 --> 00:05:23,800
point six point two these are two

118
00:05:23,800 --> 00:05:26,370
different release lines v4 has been

119
00:05:26,370 --> 00:05:28,600
being released a little bit longer and

120
00:05:28,600 --> 00:05:32,229
v6 is a little more is a little newer v6

121
00:05:32,229 --> 00:05:33,340
was actually moved in

122
00:05:33,340 --> 00:05:36,070
LTS about a month ago and we'll talk a

123
00:05:36,070 --> 00:05:37,840
little bit more about what LTS is it

124
00:05:37,840 --> 00:05:40,870
stands for long-term support and we have

125
00:05:40,870 --> 00:05:42,550
maintenance LT LT s and you're going to

126
00:05:42,550 --> 00:05:45,820
see these 0 1217 you'll notice that V 0

127
00:05:45,820 --> 00:05:48,340
10 is not on there anymore which is

128
00:05:48,340 --> 00:05:50,320
really great 10 was around for a long

129
00:05:50,320 --> 00:05:51,850
time and it's it's great that we don't

130
00:05:51,850 --> 00:05:54,910
need to maintain it anymore because it

131
00:05:54,910 --> 00:05:56,050
was very different than all the other

132
00:05:56,050 --> 00:05:58,660
releases and we'll talk about why so as

133
00:05:58,660 --> 00:06:00,940
I said the 0-10 is no longer mint

134
00:06:00,940 --> 00:06:03,520
maintained and v-0 12 is actually going

135
00:06:03,520 --> 00:06:05,650
to be end of life in December so if any

136
00:06:05,650 --> 00:06:07,240
of you are running note and production

137
00:06:07,240 --> 00:06:09,070
at your company's and you currently have

138
00:06:09,070 --> 00:06:11,650
stuff running on V 0 10 or V 0 12 you

139
00:06:11,650 --> 00:06:13,030
should work on getting that upgraded as

140
00:06:13,030 --> 00:06:14,620
soon as possible and we'll talk a little

141
00:06:14,620 --> 00:06:16,360
bit later about what versions to use and

142
00:06:16,360 --> 00:06:20,080
and why so you know we were talking

143
00:06:20,080 --> 00:06:22,810
about V 0 10 and then V 0 12 and then

144
00:06:22,810 --> 00:06:25,630
all of a sudden we jump to v4 and v6 so

145
00:06:25,630 --> 00:06:28,389
where the heck did V 1 through 3 go and

146
00:06:28,389 --> 00:06:30,490
what's the deal with 12 and where's 5

147
00:06:30,490 --> 00:06:31,990
there's all these different numbers what

148
00:06:31,990 --> 00:06:35,919
do they mean so when node when the node

149
00:06:35,919 --> 00:06:38,800
project was started you had even an odd

150
00:06:38,800 --> 00:06:40,960
releases and the even releases were

151
00:06:40,960 --> 00:06:42,639
stable releases and the odd releases

152
00:06:42,639 --> 00:06:45,310
were unstable releases and for a very

153
00:06:45,310 --> 00:06:47,169
long time you would have you know like

154
00:06:47,169 --> 00:06:50,440
v08 and that was a stable release and it

155
00:06:50,440 --> 00:06:51,910
was expected not to have any breaking

156
00:06:51,910 --> 00:06:53,530
changes on it and then you would have V

157
00:06:53,530 --> 00:06:55,300
0 11 we're more experimental things

158
00:06:55,300 --> 00:06:57,940
would happen v9 we're more expensive

159
00:06:57,940 --> 00:06:58,990
things would happen and then when they

160
00:06:58,990 --> 00:07:01,840
were ready for a bump they would bump up

161
00:07:01,840 --> 00:07:04,539
to an even number again you're going to

162
00:07:04,539 --> 00:07:05,950
notice there's an interesting pattern in

163
00:07:05,950 --> 00:07:08,289
cember if you do not have a 1 in the

164
00:07:08,289 --> 00:07:10,990
first digit your sembra minor digit

165
00:07:10,990 --> 00:07:12,700
actually becomes December major digit

166
00:07:12,700 --> 00:07:14,560
and you're cember patch digit becomes

167
00:07:14,560 --> 00:07:16,389
your sin ver minor digit and you end up

168
00:07:16,389 --> 00:07:18,940
losing the granularity of even having

169
00:07:18,940 --> 00:07:21,970
the idea of assembler patch this is a

170
00:07:21,970 --> 00:07:23,860
problem if you want to follow some ver

171
00:07:23,860 --> 00:07:27,220
direct like to the key and the spec and

172
00:07:27,220 --> 00:07:28,690
that's why actually a lot of people

173
00:07:28,690 --> 00:07:30,070
suggest that you start your code at

174
00:07:30,070 --> 00:07:32,260
version 1 point 0 which may not be

175
00:07:32,260 --> 00:07:36,010
entirely intuitive based on practices in

176
00:07:36,010 --> 00:07:37,570
the past many people would wait until

177
00:07:37,570 --> 00:07:39,430
their code base was stable and reliable

178
00:07:39,430 --> 00:07:41,770
before going to one and using going to

179
00:07:41,770 --> 00:07:44,560
one as a way to signal that personally I

180
00:07:44,560 --> 00:07:46,340
think having that extra grand

181
00:07:46,340 --> 00:07:47,480
molarity and the ability to stick

182
00:07:47,480 --> 00:07:50,180
December is way more important people

183
00:07:50,180 --> 00:07:51,380
will know the stability based on your

184
00:07:51,380 --> 00:07:55,070
documentation so it started taking a

185
00:07:55,070 --> 00:07:57,830
really long time to get to v-0 12 the

186
00:07:57,830 --> 00:08:00,380
0-10 was the stable version of node for

187
00:08:00,380 --> 00:08:03,020
almost two years in the path 20 12

188
00:08:03,020 --> 00:08:04,699
wasn't entirely clear and even more so

189
00:08:04,699 --> 00:08:07,370
than that the path to v1 was like

190
00:08:07,370 --> 00:08:09,680
completely people had no idea when node

191
00:08:09,680 --> 00:08:11,180
was going to go to v1 and start being

192
00:08:11,180 --> 00:08:13,910
able to properly follow cember and a

193
00:08:13,910 --> 00:08:17,090
number of people on the project fed up

194
00:08:17,090 --> 00:08:19,820
with waiting fork the project in

195
00:08:19,820 --> 00:08:21,979
December of 2014 it's hard to believe

196
00:08:21,979 --> 00:08:23,479
that it's almost been two years since I

197
00:08:23,479 --> 00:08:26,240
ojs when they forked the project they

198
00:08:26,240 --> 00:08:29,030
did what is actually interestingly the

199
00:08:29,030 --> 00:08:31,130
correct cember thing and they released

200
00:08:31,130 --> 00:08:33,800
it as one point oh so this new I ojs

201
00:08:33,800 --> 00:08:35,240
project came out it came out with

202
00:08:35,240 --> 00:08:36,979
version 1 point 0 they still released

203
00:08:36,979 --> 00:08:39,050
binaries that were called node and you

204
00:08:39,050 --> 00:08:40,250
could have the choice to go and download

205
00:08:40,250 --> 00:08:42,200
node V 0 10 or you could go and download

206
00:08:42,200 --> 00:08:46,790
I ojs one and so as that project moved

207
00:08:46,790 --> 00:08:50,089
forward it just did more releases in the

208
00:08:50,089 --> 00:08:52,370
februari of 2015 right before node

209
00:08:52,370 --> 00:08:56,209
summit joint released v 0 12 v 0 dot 12

210
00:08:56,209 --> 00:08:58,220
did not have any of the updates that

211
00:08:58,220 --> 00:09:00,020
were happening in the I ojs project and

212
00:09:00,020 --> 00:09:02,150
had a slightly updated version of v8

213
00:09:02,150 --> 00:09:04,040
which was still quite old unfortunately

214
00:09:04,040 --> 00:09:05,209
and I had some updates to

215
00:09:05,209 --> 00:09:06,560
internationalization which was very

216
00:09:06,560 --> 00:09:09,230
useful but it had still continued to go

217
00:09:09,230 --> 00:09:11,000
further away from the direction that a

218
00:09:11,000 --> 00:09:12,470
lot of the community had been working on

219
00:09:12,470 --> 00:09:17,120
so during this time the I ojs project

220
00:09:17,120 --> 00:09:19,750
move forward in n cuts version 1 2 and 3

221
00:09:19,750 --> 00:09:23,300
based on semantic versioning they had an

222
00:09:23,300 --> 00:09:24,800
extremely aggressive release process

223
00:09:24,800 --> 00:09:26,510
where basically anytime that something

224
00:09:26,510 --> 00:09:27,920
was agreed on that it should be landed

225
00:09:27,920 --> 00:09:29,660
it just landed and when they cut a

226
00:09:29,660 --> 00:09:30,950
release they would just cut a release

227
00:09:30,950 --> 00:09:33,680
with the appropriate December to signal

228
00:09:33,680 --> 00:09:35,779
the release line this is really great as

229
00:09:35,779 --> 00:09:37,520
a way to move a project forward quickly

230
00:09:37,520 --> 00:09:38,900
and there was a lot of ground to catch

231
00:09:38,900 --> 00:09:41,089
up on the node project but this isn't

232
00:09:41,089 --> 00:09:42,740
the best way to do something when you

233
00:09:42,740 --> 00:09:43,790
have a project that's being run in

234
00:09:43,790 --> 00:09:45,770
production by companies such as NASA and

235
00:09:45,770 --> 00:09:48,740
paypal and netflix they need something

236
00:09:48,740 --> 00:09:50,000
that's a little bit more reliable and

237
00:09:50,000 --> 00:09:52,130
you can't be expecting your teams to do

238
00:09:52,130 --> 00:09:54,380
assembler major bump every other week

239
00:09:54,380 --> 00:09:58,160
and have to fix broken stuff so node was

240
00:09:58,160 --> 00:09:59,480
put in a foundation

241
00:09:59,480 --> 00:10:01,639
and the projects I ojs and node were

242
00:10:01,639 --> 00:10:03,740
merged as version four point oh in

243
00:10:03,740 --> 00:10:06,380
September of 2015 this is around the

244
00:10:06,380 --> 00:10:07,820
same time that I started working on the

245
00:10:07,820 --> 00:10:12,139
project so what we have up here is our

246
00:10:12,139 --> 00:10:15,620
release schedule for nodejs so what you

247
00:10:15,620 --> 00:10:18,649
can see up here is node 0 10 which ended

248
00:10:18,649 --> 00:10:21,860
maintenance in October 2016 we could see

249
00:10:21,860 --> 00:10:24,709
that 0 12 had a current release and a

250
00:10:24,709 --> 00:10:26,810
top in October 2015 and moved into

251
00:10:26,810 --> 00:10:29,000
active LTS and then it was a maintenance

252
00:10:29,000 --> 00:10:31,310
until December at which wich point

253
00:10:31,310 --> 00:10:33,199
december 31st of this year we're going

254
00:10:33,199 --> 00:10:36,230
to be deprecating node V 0 12 you'll see

255
00:10:36,230 --> 00:10:37,370
we have master here and we'll talk a

256
00:10:37,370 --> 00:10:38,750
little bit more about that and how we

257
00:10:38,750 --> 00:10:40,820
manage the different versions and we

258
00:10:40,820 --> 00:10:42,920
have knowed v4 note before is the is the

259
00:10:42,920 --> 00:10:45,440
first LTS release of node it is

260
00:10:45,440 --> 00:10:47,329
currently in an active LTS release

261
00:10:47,329 --> 00:10:48,589
process we'll talk a little bit more

262
00:10:48,589 --> 00:10:51,290
about that in a bit and in April of 2017

263
00:10:51,290 --> 00:10:53,930
that will move to maintenance node v5

264
00:10:53,930 --> 00:10:57,880
was a current release from October 2015

265
00:10:57,880 --> 00:11:02,269
until a little bit after April 2016 so

266
00:11:02,269 --> 00:11:03,860
the way that it works right now is we

267
00:11:03,860 --> 00:11:05,600
have our current release line every six

268
00:11:05,600 --> 00:11:07,190
months we do a cember major bump and

269
00:11:07,190 --> 00:11:11,180
every even release is a release that's

270
00:11:11,180 --> 00:11:13,610
going to go into into LTS and have you

271
00:11:13,610 --> 00:11:15,380
every odd release is a release that

272
00:11:15,380 --> 00:11:16,639
would be deprecated after the release

273
00:11:16,639 --> 00:11:19,279
process so you can see lower down how we

274
00:11:19,279 --> 00:11:22,220
have the same release process for v6 and

275
00:11:22,220 --> 00:11:23,959
we have v7 which is the current release

276
00:11:23,959 --> 00:11:27,110
which will be end of life you know in in

277
00:11:27,110 --> 00:11:29,540
October when we bump to v8 so what

278
00:11:29,540 --> 00:11:30,649
you'll notice on here is that we have an

279
00:11:30,649 --> 00:11:33,170
active LTS in a maintenance LTS so long

280
00:11:33,170 --> 00:11:36,440
term support lasts for 30 months after

281
00:11:36,440 --> 00:11:38,060
the branch has moved out of the current

282
00:11:38,060 --> 00:11:40,399
release stream you have 18 months of

283
00:11:40,399 --> 00:11:42,260
active back boarding and 12 months of

284
00:11:42,260 --> 00:11:43,459
maintenance back boarding so let's take

285
00:11:43,459 --> 00:11:46,100
a little bit more into that so current

286
00:11:46,100 --> 00:11:49,459
which right now is v7 gets every commit

287
00:11:49,459 --> 00:11:51,470
that lands on to master that is in

288
00:11:51,470 --> 00:11:53,660
cember major so every week or every

289
00:11:53,660 --> 00:11:56,180
other week depending on how many commits

290
00:11:56,180 --> 00:11:58,069
are sitting on master will cut a new

291
00:11:58,069 --> 00:12:00,410
version of the current release line that

292
00:12:00,410 --> 00:12:02,269
will get a bump to either cember minor

293
00:12:02,269 --> 00:12:04,190
or cember patch depending on the commits

294
00:12:04,190 --> 00:12:06,500
that are in that are sitting on master

295
00:12:06,500 --> 00:12:09,620
everything gets in there these can be

296
00:12:09,620 --> 00:12:11,600
updates that may actually have the

297
00:12:11,600 --> 00:12:13,220
potential of a regression

298
00:12:13,220 --> 00:12:15,709
the purpose of this is that by living on

299
00:12:15,709 --> 00:12:17,089
the current release lining going out

300
00:12:17,089 --> 00:12:19,100
into production for individuals we can

301
00:12:19,100 --> 00:12:20,360
catch regressions that we're not

302
00:12:20,360 --> 00:12:22,160
catching in our review or testing

303
00:12:22,160 --> 00:12:24,470
process quickly and before it ends up

304
00:12:24,470 --> 00:12:29,149
reaching in LTS so active LTS is the

305
00:12:29,149 --> 00:12:30,949
process of back porting commits that

306
00:12:30,949 --> 00:12:32,480
have landed into the current release

307
00:12:32,480 --> 00:12:35,029
line onto our active release line so are

308
00:12:35,029 --> 00:12:37,850
right now v4 and v6 are both active LTS

309
00:12:37,850 --> 00:12:40,370
and so we go through when we audit every

310
00:12:40,370 --> 00:12:42,920
commit that's landed on on master that

311
00:12:42,920 --> 00:12:44,959
have moved into current that's been in a

312
00:12:44,959 --> 00:12:47,209
release for at least two weeks the idea

313
00:12:47,209 --> 00:12:49,699
here is that what these can be updates

314
00:12:49,699 --> 00:12:52,490
to tests updates to documentation and

315
00:12:52,490 --> 00:12:55,370
bug fixes we generally do not backports

316
00:12:55,370 --> 00:12:58,730
ember major commits assembler december

317
00:12:58,730 --> 00:13:01,220
minor commits to LTS but if something

318
00:13:01,220 --> 00:13:03,230
makes sense and has a very very low

319
00:13:03,230 --> 00:13:05,959
probability of causing breakages we have

320
00:13:05,959 --> 00:13:07,399
a working group that will vote on it and

321
00:13:07,399 --> 00:13:09,139
sometimes we'll backports ember minor

322
00:13:09,139 --> 00:13:11,509
stuff an example of that would be we're

323
00:13:11,509 --> 00:13:13,639
in the process of releasing some new

324
00:13:13,639 --> 00:13:15,980
symbols for openssl to windows so

325
00:13:15,980 --> 00:13:17,689
there's a lot of hacks that exist in the

326
00:13:17,689 --> 00:13:20,720
ecosystem right now to be able to act to

327
00:13:20,720 --> 00:13:23,540
access some openssl symbols when writing

328
00:13:23,540 --> 00:13:25,850
native modules on windows and buyback

329
00:13:25,850 --> 00:13:27,649
porting this we're able to actually get

330
00:13:27,649 --> 00:13:29,209
this fixed in production we have

331
00:13:29,209 --> 00:13:30,620
companies such as PayPal who have come

332
00:13:30,620 --> 00:13:31,939
to us and told us that they're floating

333
00:13:31,939 --> 00:13:33,800
these commits already in production on

334
00:13:33,800 --> 00:13:35,569
the LTS release lines so we know that

335
00:13:35,569 --> 00:13:37,100
it's stable we know that there's a very

336
00:13:37,100 --> 00:13:38,779
low chance of breaking things so it

337
00:13:38,779 --> 00:13:41,180
makes sense to backport it so we also

338
00:13:41,180 --> 00:13:43,100
have maintenance LTS that's the last 12

339
00:13:43,100 --> 00:13:45,259
months of the 30-month cycle maitenance

340
00:13:45,259 --> 00:13:47,120
LTS is not going to have the same active

341
00:13:47,120 --> 00:13:48,559
back porting we're not going back and

342
00:13:48,559 --> 00:13:50,240
getting as many things as possible

343
00:13:50,240 --> 00:13:52,189
landed what we're doing is we're making

344
00:13:52,189 --> 00:13:53,689
sure that if there's major security

345
00:13:53,689 --> 00:13:55,550
vulnerabilities or major bugs that are

346
00:13:55,550 --> 00:13:57,410
found that we're patching them in

347
00:13:57,410 --> 00:13:59,569
releasing security updates so this

348
00:13:59,569 --> 00:14:01,250
happens whenever there's a cv for

349
00:14:01,250 --> 00:14:02,779
something like openssl which there's

350
00:14:02,779 --> 00:14:05,420
been a couple releases on v12 and v10 in

351
00:14:05,420 --> 00:14:07,819
the last six months for those this could

352
00:14:07,819 --> 00:14:09,800
be a bug that's found we've had security

353
00:14:09,800 --> 00:14:12,529
releases for our own modules for HTTP

354
00:14:12,529 --> 00:14:14,959
we've had security releases for a number

355
00:14:14,959 --> 00:14:16,779
of other other dependents that we ship

356
00:14:16,779 --> 00:14:20,089
this is really important we want to make

357
00:14:20,089 --> 00:14:21,949
sure that if you go and put something

358
00:14:21,949 --> 00:14:23,600
into production on note if you went and

359
00:14:23,600 --> 00:14:25,189
put something in production on node V

360
00:14:25,189 --> 00:14:26,810
for when it when LTS a

361
00:14:26,810 --> 00:14:28,279
year ago you're going to have three

362
00:14:28,279 --> 00:14:30,680
years of support where you don't have to

363
00:14:30,680 --> 00:14:32,480
worry about things breaking or about

364
00:14:32,480 --> 00:14:33,920
vulnerabilities well you have your code

365
00:14:33,920 --> 00:14:36,320
in there and we believe that that's

366
00:14:36,320 --> 00:14:38,150
enough time to give you an upgrade path

367
00:14:38,150 --> 00:14:40,010
for your things that you have sitting in

368
00:14:40,010 --> 00:14:45,230
production so what about master we've

369
00:14:45,230 --> 00:14:46,670
talked about master a little bit but I

370
00:14:46,670 --> 00:14:48,290
didn't talk too much about how we land

371
00:14:48,290 --> 00:14:50,630
things master is a special case any

372
00:14:50,630 --> 00:14:53,540
commit that gets approved lands directly

373
00:14:53,540 --> 00:14:55,670
into master we don't have a dev branch

374
00:14:55,670 --> 00:14:58,940
we don't have any special branch for

375
00:14:58,940 --> 00:15:00,770
master we have master and then our

376
00:15:00,770 --> 00:15:02,210
release lines that branch off of that

377
00:15:02,210 --> 00:15:04,430
any cember major commit any sin ver

378
00:15:04,430 --> 00:15:06,620
patch commit any sin ver minor commit

379
00:15:06,620 --> 00:15:08,300
they all just go right into master and

380
00:15:08,300 --> 00:15:10,100
then we cherry pick off of master to our

381
00:15:10,100 --> 00:15:11,360
release lines when we're ready to do

382
00:15:11,360 --> 00:15:13,610
releases what this means is if you're

383
00:15:13,610 --> 00:15:15,110
ever running off the nightly version of

384
00:15:15,110 --> 00:15:17,930
node that's built off the head which

385
00:15:17,930 --> 00:15:20,510
would right now be a nightly a v8 you

386
00:15:20,510 --> 00:15:22,250
have the opportunity or potential of

387
00:15:22,250 --> 00:15:24,290
getting major changes that are sitting

388
00:15:24,290 --> 00:15:27,080
there we tend to not land december

389
00:15:27,080 --> 00:15:28,820
majors right away all the time we give

390
00:15:28,820 --> 00:15:31,280
it a lot of time but we also cut off

391
00:15:31,280 --> 00:15:33,710
cember majors landing on to master about

392
00:15:33,710 --> 00:15:34,970
a month before we're about to cut a

393
00:15:34,970 --> 00:15:36,800
release so that we have the proper time

394
00:15:36,800 --> 00:15:39,470
to run an air RC + beta + test the

395
00:15:39,470 --> 00:15:40,580
things aren't going to break things for

396
00:15:40,580 --> 00:15:45,760
people so how do we manage all of this

397
00:15:45,760 --> 00:15:51,070
magic mostly and particularly

398
00:15:51,070 --> 00:15:53,990
particularly we do it with get magic and

399
00:15:53,990 --> 00:15:56,210
what I really love about get magic is

400
00:15:56,210 --> 00:15:57,950
that get magic is magic with trees and

401
00:15:57,950 --> 00:16:01,640
that basically makes us elves which I'm

402
00:16:01,640 --> 00:16:04,430
really into but so we maintain release

403
00:16:04,430 --> 00:16:05,990
branches and this is what's important we

404
00:16:05,990 --> 00:16:08,990
have a zero 12x French a 4x branch a6x

405
00:16:08,990 --> 00:16:11,300
branch and a7x branch these are our

406
00:16:11,300 --> 00:16:14,120
release branch lines we also have

407
00:16:14,120 --> 00:16:17,240
staging branches 12x staging 4x staging

408
00:16:17,240 --> 00:16:20,209
6x staging and 7x staging each of these

409
00:16:20,209 --> 00:16:22,390
staging branches are where we'll we'll

410
00:16:22,390 --> 00:16:24,650
cherry-pick commits off of master in

411
00:16:24,650 --> 00:16:29,660
between releases so most changes as I

412
00:16:29,660 --> 00:16:31,250
said have to live in a release for at

413
00:16:31,250 --> 00:16:32,720
least two weeks before they'll be back

414
00:16:32,720 --> 00:16:34,850
ported to the LTS staging but as soon as

415
00:16:34,850 --> 00:16:36,830
something lands on master it can land on

416
00:16:36,830 --> 00:16:39,260
7x staging now the only time where this

417
00:16:39,260 --> 00:16:40,070
is an entirely

418
00:16:40,070 --> 00:16:42,560
true is for documentation updates or

419
00:16:42,560 --> 00:16:44,600
sometimes for tooling updates we won't

420
00:16:44,600 --> 00:16:45,920
actually wait for things to go out

421
00:16:45,920 --> 00:16:48,320
because we need to like for a tap

422
00:16:48,320 --> 00:16:49,970
reporter update for example we need our

423
00:16:49,970 --> 00:16:52,160
entire CI release working on all of our

424
00:16:52,160 --> 00:16:54,230
different branches so it's not a like

425
00:16:54,230 --> 00:16:56,120
fast and hard rule but for anything that

426
00:16:56,120 --> 00:16:57,980
has any potential of breaking things it

427
00:16:57,980 --> 00:16:59,660
needs to be in production before we

428
00:16:59,660 --> 00:17:02,810
landed on LTS so let's do a little bit

429
00:17:02,810 --> 00:17:04,459
of a demo and I'm going to be having a

430
00:17:04,459 --> 00:17:06,079
screen up here so if you can't read it

431
00:17:06,079 --> 00:17:07,550
just all of you together just scream

432
00:17:07,550 --> 00:17:09,680
enhance and I'll zoom in a little bit so

433
00:17:09,680 --> 00:17:12,230
you can see but see here's here's the

434
00:17:12,230 --> 00:17:14,690
nodejs repo and I'm going to show you a

435
00:17:14,690 --> 00:17:16,160
little bit of how our release process

436
00:17:16,160 --> 00:17:18,440
works so we can go here to pull requests

437
00:17:18,440 --> 00:17:20,120
and you know I'm just going to go and

438
00:17:20,120 --> 00:17:21,890
grab a random pull request that I

439
00:17:21,890 --> 00:17:23,510
definitely haven't audited or thought

440
00:17:23,510 --> 00:17:25,760
that I'm going to use as an example here

441
00:17:25,760 --> 00:17:29,030
this is by my friend Francis it's a new

442
00:17:29,030 --> 00:17:31,370
commit that allows test dot pi to use

443
00:17:31,370 --> 00:17:33,320
the full path of a test so this is

444
00:17:33,320 --> 00:17:34,640
actually really useful for us we have a

445
00:17:34,640 --> 00:17:35,870
test runner and the test runner is

446
00:17:35,870 --> 00:17:37,880
written in Python if you go to run that

447
00:17:37,880 --> 00:17:40,450
test runner you can run individual tests

448
00:17:40,450 --> 00:17:42,200
unfortunately the test runner was

449
00:17:42,200 --> 00:17:44,060
designed that you can't actually pass

450
00:17:44,060 --> 00:17:47,210
the full test so if we take a look here

451
00:17:47,210 --> 00:17:50,210
if we had the word test in front and the

452
00:17:50,210 --> 00:17:52,640
dot J s at the end the test runner

453
00:17:52,640 --> 00:17:54,020
actually wouldn't recognize that path

454
00:17:54,020 --> 00:17:56,330
what it would recognize is without the

455
00:17:56,330 --> 00:17:58,160
test directory and without the j s at

456
00:17:58,160 --> 00:18:00,380
the end and that's not really useful if

457
00:18:00,380 --> 00:18:01,580
you're working on your own machine and

458
00:18:01,580 --> 00:18:04,730
one or on your own test so Francis went

459
00:18:04,730 --> 00:18:06,830
through and basically all it does is

460
00:18:06,830 --> 00:18:08,540
normalize the path in case you have

461
00:18:08,540 --> 00:18:10,550
tests in front and gf's at the at the

462
00:18:10,550 --> 00:18:14,630
end and this allows us to now run

463
00:18:14,630 --> 00:18:17,780
individual tests so what we can do here

464
00:18:17,780 --> 00:18:20,120
is we can go and grab this commit and we

465
00:18:20,120 --> 00:18:21,830
could copy the link this is a really

466
00:18:21,830 --> 00:18:23,360
cool thing will go and look at when we

467
00:18:23,360 --> 00:18:27,590
open it here we could see the commit so

468
00:18:27,590 --> 00:18:29,780
github actually has this amazing feature

469
00:18:29,780 --> 00:18:32,210
where you can add dot patch to the end

470
00:18:32,210 --> 00:18:35,750
of a commit they broke it actually so

471
00:18:35,750 --> 00:18:38,720
you need to like I have a little regex

472
00:18:38,720 --> 00:18:41,450
that fixes that but now we get this get

473
00:18:41,450 --> 00:18:43,640
mail message come and grab me later if

474
00:18:43,640 --> 00:18:44,900
you want to learn more about what a mail

475
00:18:44,900 --> 00:18:47,060
messages but it's the old way in which

476
00:18:47,060 --> 00:18:48,860
the gate project used to pass around

477
00:18:48,860 --> 00:18:50,720
commits and you can float a mail message

478
00:18:50,720 --> 00:18:53,660
directly onto a tree without having any

479
00:18:53,660 --> 00:18:55,370
expected changes happening to that tree

480
00:18:55,370 --> 00:18:57,320
so it's really great about this is we

481
00:18:57,320 --> 00:18:59,000
can take those mail messages pass them

482
00:18:59,000 --> 00:19:00,920
to get a.m. and it's going to patch it

483
00:19:00,920 --> 00:19:03,260
directly onto the head of the tree so we

484
00:19:03,260 --> 00:19:06,020
can go we can take this link we can go

485
00:19:06,020 --> 00:19:11,230
here on master and we can patch it and

486
00:19:11,230 --> 00:19:14,480
we've applied it to the head so now we

487
00:19:14,480 --> 00:19:18,920
can go and look at the commit and we can

488
00:19:18,920 --> 00:19:20,840
see that we have this commit here in a

489
00:19:20,840 --> 00:19:22,100
commit message but it's missing the

490
00:19:22,100 --> 00:19:24,590
metadata that we use in the project so

491
00:19:24,590 --> 00:19:26,920
what I can do is I can go back here to

492
00:19:26,920 --> 00:19:29,600
the original pull request and we have

493
00:19:29,600 --> 00:19:33,410
this little utility that we use going to

494
00:19:33,410 --> 00:19:43,289
just refresh this really quickly

495
00:19:43,299 --> 00:19:45,970
so the utility is deciding not to work

496
00:19:45,970 --> 00:19:48,789
in that version of Chrome so as we've

497
00:19:48,789 --> 00:19:51,279
seen with live coding today being fun

498
00:19:51,279 --> 00:19:54,610
let's try it here for a second we press

499
00:19:54,610 --> 00:19:56,619
this it's going to generate the metadata

500
00:19:56,619 --> 00:19:59,080
that we need for the commit we're going

501
00:19:59,080 --> 00:20:01,239
to go back in here we're going to paste

502
00:20:01,239 --> 00:20:03,489
the metadata into the commit we're going

503
00:20:03,489 --> 00:20:04,809
to save that we're going to close it

504
00:20:04,809 --> 00:20:07,809
we've now made the commit and then we're

505
00:20:07,809 --> 00:20:14,559
going to push to master so we've just

506
00:20:14,559 --> 00:20:16,899
updated note and so what I'm going to do

507
00:20:16,899 --> 00:20:18,129
is I'm going to go and grab that commit

508
00:20:18,129 --> 00:20:22,659
I'm going to go back to the to the thing

509
00:20:22,659 --> 00:20:24,669
here i'm going to say you know where it

510
00:20:24,669 --> 00:20:27,220
landed and i'm going to close it so

511
00:20:27,220 --> 00:20:29,019
we've actually landed a pull request on

512
00:20:29,019 --> 00:20:32,019
two nodes master branch so because this

513
00:20:32,019 --> 00:20:33,369
is a commit that doesn't affect anything

514
00:20:33,369 --> 00:20:35,559
that's problematic we can actually go

515
00:20:35,559 --> 00:20:38,200
ahead and start back boarding it on to

516
00:20:38,200 --> 00:20:41,470
our various release lines so we can look

517
00:20:41,470 --> 00:20:43,690
here at the head we can grab this and we

518
00:20:43,690 --> 00:20:46,830
can check out the seven point x staging

519
00:20:46,830 --> 00:20:52,389
okay and now we can cherry-pick it so

520
00:20:52,389 --> 00:20:53,889
now we can see it's sitting on on the

521
00:20:53,889 --> 00:20:57,399
staging branch for the next release and

522
00:20:57,399 --> 00:20:59,139
we could push that and as long as no one

523
00:20:59,139 --> 00:21:00,460
else has put anything on the stage one

524
00:21:00,460 --> 00:21:03,190
branch we should be good which we are so

525
00:21:03,190 --> 00:21:04,359
now we've updated and put it into

526
00:21:04,359 --> 00:21:06,309
staging but we can also do is take it a

527
00:21:06,309 --> 00:21:10,330
step further we can look here at v 68 we

528
00:21:10,330 --> 00:21:11,919
can update the tree so we could get the

529
00:21:11,919 --> 00:21:13,419
commits that are sitting in master and

530
00:21:13,419 --> 00:21:14,769
just what we're doing that I'm going to

531
00:21:14,769 --> 00:21:20,739
update d for as well and can go you can

532
00:21:20,739 --> 00:21:27,690
grab this commit grab that link address

533
00:21:27,700 --> 00:21:32,450
we can patch it on v6 we catch it on v4

534
00:21:32,450 --> 00:21:36,080
and we can push upstream to both the v6

535
00:21:36,080 --> 00:21:39,440
staging and the v4 staging so now we've

536
00:21:39,440 --> 00:21:41,180
gone ahead and we've we've landed this

537
00:21:41,180 --> 00:21:43,610
update into all of our release lines so

538
00:21:43,610 --> 00:21:44,960
I can go and market so that we know that

539
00:21:44,960 --> 00:21:47,000
it's ready to go so we've gone ahead and

540
00:21:47,000 --> 00:21:48,770
taken this commit that fixes our tooling

541
00:21:48,770 --> 00:21:50,990
we've updated all of our release lines

542
00:21:50,990 --> 00:21:52,850
and it's ready to go in all of our next

543
00:21:52,850 --> 00:21:55,580
releases for node so this is kind of an

544
00:21:55,580 --> 00:21:57,170
example of what the release process

545
00:21:57,170 --> 00:22:00,170
looks like so if any of you have more

546
00:22:00,170 --> 00:22:01,520
questions about how we manage that

547
00:22:01,520 --> 00:22:03,620
release come and grab me but this is the

548
00:22:03,620 --> 00:22:05,600
process of landing code onto node and

549
00:22:05,600 --> 00:22:07,240
updating our different release processes

550
00:22:07,240 --> 00:22:10,490
so when we're ready for a release we'll

551
00:22:10,490 --> 00:22:12,830
go and we'll branch off of the four

552
00:22:12,830 --> 00:22:14,330
point x six point X or seven its

553
00:22:14,330 --> 00:22:16,340
branches and then we'll cherry picker

554
00:22:16,340 --> 00:22:17,780
commits that are sitting on staging

555
00:22:17,780 --> 00:22:20,660
ready to go into the release how do we

556
00:22:20,660 --> 00:22:22,310
know which trick which commits we're

557
00:22:22,310 --> 00:22:24,230
going to cherry pick we primarily know

558
00:22:24,230 --> 00:22:26,720
through github labels so every commit

559
00:22:26,720 --> 00:22:28,970
the December major has a label every

560
00:22:28,970 --> 00:22:30,500
commits the December minor has a label

561
00:22:30,500 --> 00:22:33,260
we also have LTS watch labels and we

562
00:22:33,260 --> 00:22:35,540
have don't land labels so if I go back

563
00:22:35,540 --> 00:22:37,790
to the repo here for a second and we go

564
00:22:37,790 --> 00:22:41,570
to our pull requests here we could go

565
00:22:41,570 --> 00:22:43,130
here and we can say hey what's

566
00:22:43,130 --> 00:22:47,000
everything that we have unlike on the

567
00:22:47,000 --> 00:22:51,770
floor point LTS watch for v4 point X and

568
00:22:51,770 --> 00:22:53,570
we're going to see all the stuff that's

569
00:22:53,570 --> 00:22:55,160
ready to land there and we can do LTS

570
00:22:55,160 --> 00:22:58,490
watch for six point X as well and now we

571
00:22:58,490 --> 00:22:59,690
have a list of all the commits that are

572
00:22:59,690 --> 00:23:02,180
ready to land on both that have closed

573
00:23:02,180 --> 00:23:03,800
and already landed on master we have a

574
00:23:03,800 --> 00:23:06,530
big list here so we can go back here and

575
00:23:06,530 --> 00:23:09,410
we can see that there's another commit

576
00:23:09,410 --> 00:23:14,180
that I was that i was looking at which

577
00:23:14,180 --> 00:23:15,980
is this right here which changes a

578
00:23:15,980 --> 00:23:18,440
deprecated deprecated method that isn't

579
00:23:18,440 --> 00:23:19,970
supposed to exist but still does and we

580
00:23:19,970 --> 00:23:23,570
can see that this was landed by Franzi

581
00:23:23,570 --> 00:23:24,800
who's sitting in the audience right now

582
00:23:24,800 --> 00:23:27,350
and she landed it in eighty nineteen

583
00:23:27,350 --> 00:23:29,840
forty one two and so I asked her if it

584
00:23:29,840 --> 00:23:31,700
should be backboard and she said that if

585
00:23:31,700 --> 00:23:33,710
it lands cleanly we can so we can go

586
00:23:33,710 --> 00:23:35,420
ahead and we can copy this commit that's

587
00:23:35,420 --> 00:23:38,220
ready to land and we can run our

588
00:23:38,220 --> 00:23:42,090
to command but it didn't work which is

589
00:23:42,090 --> 00:23:44,220
unfortunate but expected so we can

590
00:23:44,220 --> 00:23:46,740
actually just say please and now we're

591
00:23:46,740 --> 00:23:48,330
going to use a three-way merge strategy

592
00:23:48,330 --> 00:23:50,970
instead of the git merge strategy and we

593
00:23:50,970 --> 00:23:54,210
push it upstream and we can see there's

594
00:23:54,210 --> 00:23:57,480
the commit and I think that it's already

595
00:23:57,480 --> 00:24:00,450
landed so now we can go back to v4 and

596
00:24:00,450 --> 00:24:04,409
we can try to patch it and we're going

597
00:24:04,409 --> 00:24:06,179
to see a wait it didn't work so we can

598
00:24:06,179 --> 00:24:07,530
see what's going on we can see there's

599
00:24:07,530 --> 00:24:12,390
actually a diff in note CC and we can

600
00:24:12,390 --> 00:24:13,710
see that there's actually some stuff

601
00:24:13,710 --> 00:24:15,210
that exists on this tree that doesn't

602
00:24:15,210 --> 00:24:17,909
exist in v4 and generally when we start

603
00:24:17,909 --> 00:24:19,590
touching c++ and changes that I'm not

604
00:24:19,590 --> 00:24:21,840
familiar with I get kind of nervous so

605
00:24:21,840 --> 00:24:23,190
what I'm going to do is I'm actually

606
00:24:23,190 --> 00:24:25,230
just going to abort this I'm going to go

607
00:24:25,230 --> 00:24:26,880
back to this I'm going to switch the tag

608
00:24:26,880 --> 00:24:30,570
for LTS v6 and let them know that we've

609
00:24:30,570 --> 00:24:32,220
landed it but I'm also going to do is

610
00:24:32,220 --> 00:24:34,230
again a lamo label to say don't tool and

611
00:24:34,230 --> 00:24:36,600
don't land it on v4 because it didn't

612
00:24:36,600 --> 00:24:39,120
land cleanly we're going to see those

613
00:24:39,120 --> 00:24:40,679
labels update we're going to go down

614
00:24:40,679 --> 00:24:42,890
here and I'm going to just messaged

615
00:24:42,890 --> 00:24:46,320
frenzy and just say you know landed

616
00:24:46,320 --> 00:24:51,270
cleanly on v6 but not before please feel

617
00:24:51,270 --> 00:24:54,510
free to manually backport so now we've

618
00:24:54,510 --> 00:24:57,090
gone it's landed on six it's ready to go

619
00:24:57,090 --> 00:24:59,370
in a 6 release it didn't land on for so

620
00:24:59,370 --> 00:25:00,870
we put a label so that we know that it's

621
00:25:00,870 --> 00:25:02,039
not going to land on the four in the

622
00:25:02,039 --> 00:25:03,659
future but we've messaged someone to

623
00:25:03,659 --> 00:25:05,010
give them the opportunity to land it

624
00:25:05,010 --> 00:25:08,580
later if we'd like so this is how we go

625
00:25:08,580 --> 00:25:10,049
through and we have tools that we can

626
00:25:10,049 --> 00:25:12,419
use that can automate going through all

627
00:25:12,419 --> 00:25:14,700
of these different labels so if we're on

628
00:25:14,700 --> 00:25:16,980
the six right here we can use this tool

629
00:25:16,980 --> 00:25:18,990
called branch diff and we can say hey

630
00:25:18,990 --> 00:25:20,130
you know what's the difference between

631
00:25:20,130 --> 00:25:23,940
the 6.8 staging and v6 point acts and

632
00:25:23,940 --> 00:25:26,130
it's nothing which was fun but we could

633
00:25:26,130 --> 00:25:27,299
then go and say well what's the

634
00:25:27,299 --> 00:25:29,460
difference between v6 and master it's

635
00:25:29,460 --> 00:25:30,450
going to go through and it's going to

636
00:25:30,450 --> 00:25:32,250
grab every single commit it's going to

637
00:25:32,250 --> 00:25:34,320
compare them based on labels and what's

638
00:25:34,320 --> 00:25:36,030
really cool about this tool is instead

639
00:25:36,030 --> 00:25:37,799
of doing it based on the tree which is

640
00:25:37,799 --> 00:25:39,659
what a git diff usually does it does it

641
00:25:39,659 --> 00:25:41,280
based on our metadata and it does it

642
00:25:41,280 --> 00:25:43,169
based on the titles of the commit so

643
00:25:43,169 --> 00:25:45,030
what it can do is we actually care about

644
00:25:45,030 --> 00:25:47,549
atomic change atomic change is not the

645
00:25:47,549 --> 00:25:49,919
same thing as the changes in which we

646
00:25:49,919 --> 00:25:51,600
have in a get

647
00:25:51,600 --> 00:25:54,059
tree so a diff between two trees that

648
00:25:54,059 --> 00:25:55,470
have different changes are going to be a

649
00:25:55,470 --> 00:25:57,390
diff but we care about are the actual

650
00:25:57,390 --> 00:25:59,610
commits so now what we can see here are

651
00:25:59,610 --> 00:26:01,799
all the commits that are a master that

652
00:26:01,799 --> 00:26:04,169
are not on v6 and there's a whole bunch

653
00:26:04,169 --> 00:26:05,970
and a lot of them are cember major so

654
00:26:05,970 --> 00:26:07,230
what we're able to do is actually make a

655
00:26:07,230 --> 00:26:08,610
whole bunch of different labels and you

656
00:26:08,610 --> 00:26:13,020
can see here if I go to github com to my

657
00:26:13,020 --> 00:26:16,679
gists I maintain a gist of various

658
00:26:16,679 --> 00:26:18,630
audits that I'm doing and we could see

659
00:26:18,630 --> 00:26:20,460
the audit of v6 this is the command that

660
00:26:20,460 --> 00:26:22,380
includes excluding labels and these are

661
00:26:22,380 --> 00:26:23,610
all the commits that still need to be

662
00:26:23,610 --> 00:26:25,200
labeled they have not yet been labeled

663
00:26:25,200 --> 00:26:27,120
they live on master not yet on these six

664
00:26:27,120 --> 00:26:28,980
and i go through periodically you know

665
00:26:28,980 --> 00:26:30,840
once every two weeks or so and audit

666
00:26:30,840 --> 00:26:32,640
these the last time i actually did a

667
00:26:32,640 --> 00:26:34,950
live stream of it and explained commits

668
00:26:34,950 --> 00:26:35,970
what was going through what was

669
00:26:35,970 --> 00:26:38,250
happening if you follow me on twitter at

670
00:26:38,250 --> 00:26:40,440
the alpha nerd I'll tweet on there

671
00:26:40,440 --> 00:26:41,730
whenever I'm going to be doing these

672
00:26:41,730 --> 00:26:44,100
these live sessions and if enough of you

673
00:26:44,100 --> 00:26:46,020
from Singapore interested because I have

674
00:26:46,020 --> 00:26:47,760
a really weird sleep schedule I totally

675
00:26:47,760 --> 00:26:49,320
be up for doing it at a time it's like

676
00:26:49,320 --> 00:26:51,840
reasonable for you but so now that we

677
00:26:51,840 --> 00:26:53,220
have these labels were able to use tools

678
00:26:53,220 --> 00:26:55,530
like I was talking about release tools

679
00:26:55,530 --> 00:26:57,450
including branch diff to find the

680
00:26:57,450 --> 00:26:58,890
difference release tools such as

681
00:26:58,890 --> 00:27:01,470
changelog maker which can use that the

682
00:27:01,470 --> 00:27:03,299
diffs between the branches and generate

683
00:27:03,299 --> 00:27:05,850
our change log for us we also have

684
00:27:05,850 --> 00:27:07,919
various scripts that we use during the

685
00:27:07,919 --> 00:27:12,330
release and all of those allow us to do

686
00:27:12,330 --> 00:27:14,700
our release process and automate it so

687
00:27:14,700 --> 00:27:17,039
we got a little bit of time left so

688
00:27:17,039 --> 00:27:18,000
we're going to talk a little bit about

689
00:27:18,000 --> 00:27:21,090
what is a breaking change I love this

690
00:27:21,090 --> 00:27:25,200
one I really hope no one got hurt but

691
00:27:25,200 --> 00:27:28,679
it's just that's pretty glorious just

692
00:27:28,679 --> 00:27:30,390
good I know I just said I don't have a

693
00:27:30,390 --> 00:27:32,070
lot of time but I'm just gonna watch it

694
00:27:32,070 --> 00:27:36,120
anyways so as we talked about before

695
00:27:36,120 --> 00:27:38,640
what's December major change what's a

696
00:27:38,640 --> 00:27:40,230
breaking change it's a change in

697
00:27:40,230 --> 00:27:42,450
behavior generally a change in behavior

698
00:27:42,450 --> 00:27:45,210
is obvious but sometimes we can be

699
00:27:45,210 --> 00:27:46,559
really surprised and we're going to talk

700
00:27:46,559 --> 00:27:48,240
a little bit about how we figure out if

701
00:27:48,240 --> 00:27:51,120
we have breaking changes and then look

702
00:27:51,120 --> 00:27:52,470
at an example of one that's unexpected

703
00:27:52,470 --> 00:27:56,190
so how do we avoid breaking changes you

704
00:27:56,190 --> 00:27:57,990
know there's obvious ways continuous

705
00:27:57,990 --> 00:28:00,750
integration and a large testing suite

706
00:28:00,750 --> 00:28:02,700
but we also do something called smoke

707
00:28:02,700 --> 00:28:04,409
testing so one of the utilities that

708
00:28:04,409 --> 00:28:05,280
I've worked on is called

709
00:28:05,280 --> 00:28:07,170
canary in the gold mine what it will do

710
00:28:07,170 --> 00:28:09,000
is it will actually go and grab the

711
00:28:09,000 --> 00:28:11,280
tarball from github of a module it will

712
00:28:11,280 --> 00:28:14,160
untie it it will NPM install it and then

713
00:28:14,160 --> 00:28:16,170
it will run npm test it will then take

714
00:28:16,170 --> 00:28:17,790
the results of that test and give us the

715
00:28:17,790 --> 00:28:20,130
results so you can npm install this npm

716
00:28:20,130 --> 00:28:22,740
install g you can see I TGM and start

717
00:28:22,740 --> 00:28:24,240
running test Suites on your laptop if

718
00:28:24,240 --> 00:28:25,800
you want but what's interesting is it

719
00:28:25,800 --> 00:28:27,600
also comes with the lookup table of the

720
00:28:27,600 --> 00:28:29,520
top 70 modules in the ecosystem that

721
00:28:29,520 --> 00:28:30,900
we've derived for a number of different

722
00:28:30,900 --> 00:28:33,600
reasons we then run that in CI and we

723
00:28:33,600 --> 00:28:35,070
can run the test suite automate the test

724
00:28:35,070 --> 00:28:37,380
suite of 70 of the top modules in n p.m.

725
00:28:37,380 --> 00:28:39,660
and then get those results to see if

726
00:28:39,660 --> 00:28:41,190
something's broken and we can run that

727
00:28:41,190 --> 00:28:43,890
test on any arbitrary commit of node we

728
00:28:43,890 --> 00:28:45,120
are now at the point where we will not

729
00:28:45,120 --> 00:28:46,800
land December major change or do a

730
00:28:46,800 --> 00:28:49,050
release if anything is broken and canary

731
00:28:49,050 --> 00:28:50,910
in the gold line so what this means is

732
00:28:50,910 --> 00:28:52,440
that anytime someone sends a commit

733
00:28:52,440 --> 00:28:54,450
that's questionable we can run canary in

734
00:28:54,450 --> 00:28:55,890
the gold mine and we can tell whether or

735
00:28:55,890 --> 00:28:57,210
not we've actually broken something in

736
00:28:57,210 --> 00:29:02,250
the ecosystem so once upon a time canary

737
00:29:02,250 --> 00:29:03,840
in the gold mine found some failures

738
00:29:03,840 --> 00:29:05,310
there was a failure in Jade and a

739
00:29:05,310 --> 00:29:08,970
failure and body parser so it turned out

740
00:29:08,970 --> 00:29:10,680
that Jade just moved their args their

741
00:29:10,680 --> 00:29:11,700
orgs and did an update their

742
00:29:11,700 --> 00:29:13,830
package.json so this was an example of

743
00:29:13,830 --> 00:29:15,480
where we didn't actually break anything

744
00:29:15,480 --> 00:29:17,430
but the modules themselves broke

745
00:29:17,430 --> 00:29:18,810
something and this has been an awesome

746
00:29:18,810 --> 00:29:20,310
side effect of canary on a gold mine

747
00:29:20,310 --> 00:29:22,440
that wasn't expected was that when we

748
00:29:22,440 --> 00:29:24,450
actually have were able to test that

749
00:29:24,450 --> 00:29:26,970
these orgs have broken things we can

750
00:29:26,970 --> 00:29:28,740
actually give a heads up to people hey

751
00:29:28,740 --> 00:29:30,540
your module is broken and they like they

752
00:29:30,540 --> 00:29:33,060
love it two days ago we actually found

753
00:29:33,060 --> 00:29:34,770
that ember CLI pushed some stuff that

754
00:29:34,770 --> 00:29:36,750
was unexpected that broke note in a

755
00:29:36,750 --> 00:29:39,750
weird way just on v4 and we were able to

756
00:29:39,750 --> 00:29:41,460
let them know within like two days of

757
00:29:41,460 --> 00:29:43,020
their release and they were able to get

758
00:29:43,020 --> 00:29:44,580
an update out in about 30 minutes

759
00:29:44,580 --> 00:29:48,090
because they were so adamant that they

760
00:29:48,090 --> 00:29:49,050
would be tested in canary in the

761
00:29:49,050 --> 00:29:50,310
coalmine that they worked with us super

762
00:29:50,310 --> 00:29:53,160
quickly so the next one that broke was

763
00:29:53,160 --> 00:29:55,650
body parser how many people here know

764
00:29:55,650 --> 00:29:58,920
what body parser is can I see a number

765
00:29:58,920 --> 00:30:00,990
of hands how many people here know what

766
00:30:00,990 --> 00:30:05,370
Express is cool so Express is a tool

767
00:30:05,370 --> 00:30:08,550
that's used for running all sorts of

768
00:30:08,550 --> 00:30:10,710
servers it's used inside a paypal's

769
00:30:10,710 --> 00:30:12,720
Kraken so an idea of how much it's used

770
00:30:12,720 --> 00:30:15,600
so there was an optimization to query

771
00:30:15,600 --> 00:30:18,690
string parse that took a length and

772
00:30:18,690 --> 00:30:21,540
this is the change that came in and we

773
00:30:21,540 --> 00:30:23,010
can see just like right here essentially

774
00:30:23,010 --> 00:30:25,710
originally we just checked if the max

775
00:30:25,710 --> 00:30:28,050
keys was larger than the length and then

776
00:30:28,050 --> 00:30:31,110
we just cut it and instead we realize

777
00:30:31,110 --> 00:30:35,430
that you can too stringed up split you

778
00:30:35,430 --> 00:30:37,560
could pass a max length and in doing so

779
00:30:37,560 --> 00:30:39,180
we were able to have an optimization and

780
00:30:39,180 --> 00:30:42,540
not create lots of garbage so one thing

781
00:30:42,540 --> 00:30:44,040
we didn't account for was infinity

782
00:30:44,040 --> 00:30:46,860
because based on the spec the number

783
00:30:46,860 --> 00:30:48,810
that you give for max length is actually

784
00:30:48,810 --> 00:30:51,000
an integer and when infinity gets

785
00:30:51,000 --> 00:30:53,310
inferred to be an integer it infers 20

786
00:30:53,310 --> 00:30:55,350
so body parts are actually had a test

787
00:30:55,350 --> 00:30:57,320
for this and we found out that basically

788
00:30:57,320 --> 00:31:00,030
what would originally have passed one

789
00:31:00,030 --> 00:31:03,270
with this code started passing zero so

790
00:31:03,270 --> 00:31:04,440
this was a code that was a small

791
00:31:04,440 --> 00:31:05,640
optimization it was something that

792
00:31:05,640 --> 00:31:07,230
easily would have been backported we

793
00:31:07,230 --> 00:31:08,550
would have had no idea that this could

794
00:31:08,550 --> 00:31:10,290
have broken code in production but I

795
00:31:10,290 --> 00:31:12,030
mean this is an extremely hot code this

796
00:31:12,030 --> 00:31:13,770
could have broken the world but Canarian

797
00:31:13,770 --> 00:31:15,720
the gold mine found it smoke testing

798
00:31:15,720 --> 00:31:18,750
save the day so with the change the

799
00:31:18,750 --> 00:31:20,010
change had landed on master but not

800
00:31:20,010 --> 00:31:21,780
going on out in a release yet so we were

801
00:31:21,780 --> 00:31:23,190
able to land to fix before it even hit

802
00:31:23,190 --> 00:31:27,300
userland so let's quickly wrap up which

803
00:31:27,300 --> 00:31:30,180
version should you use forex has had the

804
00:31:30,180 --> 00:31:33,330
while on LTS to stabilize 6x has been on

805
00:31:33,330 --> 00:31:34,980
LTS for about a month and it's getting

806
00:31:34,980 --> 00:31:37,440
ready for a third LTS release and v7 is

807
00:31:37,440 --> 00:31:38,700
always getting the latest and greatest

808
00:31:38,700 --> 00:31:42,150
things so why use V for hardened by an

809
00:31:42,150 --> 00:31:44,340
ongoing release process you already have

810
00:31:44,340 --> 00:31:45,600
an app in production that's working you

811
00:31:45,600 --> 00:31:46,710
probably should just stick to vie for

812
00:31:46,710 --> 00:31:50,460
right now why use v6 and it's going to

813
00:31:50,460 --> 00:31:51,810
have the longest support cycle of all

814
00:31:51,810 --> 00:31:53,280
the LTS releases that are out right now

815
00:31:53,280 --> 00:31:55,770
and it's the closer to master of all the

816
00:31:55,770 --> 00:31:58,830
LTS releases it also comes with v8 5.1

817
00:31:58,830 --> 00:32:00,720
which has a much larger coverage of es6

818
00:32:00,720 --> 00:32:04,590
than 4.8 which was in node v4 and it has

819
00:32:04,590 --> 00:32:06,090
the inspector api i don't know if you've

820
00:32:06,090 --> 00:32:07,590
used that yet some people have talked

821
00:32:07,590 --> 00:32:08,910
about it earlier this conference it's

822
00:32:08,910 --> 00:32:12,180
awesome do you have to use LTS you know

823
00:32:12,180 --> 00:32:13,680
no you can do whatever you want I'm not

824
00:32:13,680 --> 00:32:16,260
the boss of you but if you want to use

825
00:32:16,260 --> 00:32:18,600
6x what you're going to get is v8 5.4

826
00:32:18,600 --> 00:32:20,390
you're going to get a little bit of yes

827
00:32:20,390 --> 00:32:22,800
2016 you know you can use two stars for

828
00:32:22,800 --> 00:32:24,150
doing exponents which is super cool

829
00:32:24,150 --> 00:32:25,470
you're going to have the latest and

830
00:32:25,470 --> 00:32:27,240
greatest stuff but if you use in

831
00:32:27,240 --> 00:32:29,120
production I'm going to be really scared

832
00:32:29,120 --> 00:32:31,650
so you know be prepared for breakages if

833
00:32:31,650 --> 00:32:32,190
you're in

834
00:32:32,190 --> 00:32:33,330
doctor and that's just kind of the

835
00:32:33,330 --> 00:32:34,470
message that will leave you with their

836
00:32:34,470 --> 00:32:37,110
so thank you all so much this is a dog

837
00:32:37,110 --> 00:32:40,070
surfing

