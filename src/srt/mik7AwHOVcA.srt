1
00:00:10,610 --> 00:00:21,630

you

2
00:00:21,640 --> 00:00:25,180


3
00:00:25,190 --> 00:00:29,570
so yeah this is a talk a super nerdy

4
00:00:29,570 --> 00:00:32,119
talk about networking crypto and early

5
00:00:32,119 --> 00:00:35,540
phase tinker and all kinds stuff thanks

6
00:00:35,540 --> 00:00:39,230
for yeah man thanks for coming i hack on

7
00:00:39,230 --> 00:00:41,930
compilers at a company called agalya we

8
00:00:41,930 --> 00:00:45,140
do mostly browser internals so if you

9
00:00:45,140 --> 00:00:47,120
ship WebKit or you should blink or you

10
00:00:47,120 --> 00:00:49,190
ship you know note or v8 or something

11
00:00:49,190 --> 00:00:51,559
like that and you want to participate in

12
00:00:51,559 --> 00:00:53,660
making the web better for your use case

13
00:00:53,660 --> 00:00:55,700
and for everyone now let's get in touch

14
00:00:55,700 --> 00:00:57,500
we can make it happen we recently did

15
00:00:57,500 --> 00:01:01,940
the generators work in v8 and adapted

16
00:01:01,940 --> 00:01:03,860
the generator stuff that existed in

17
00:01:03,860 --> 00:01:06,650
spider monkey so work with a new es6

18
00:01:06,650 --> 00:01:08,150
standard and that was all sponsored by

19
00:01:08,150 --> 00:01:10,040
bloomberg that's the sort of stuff I

20
00:01:10,040 --> 00:01:11,930
normally do and this is not a talk like

21
00:01:11,930 --> 00:01:15,140
that right this is talk about crypto I'm

22
00:01:15,140 --> 00:01:17,390
not a cryptographer and I'm not you know

23
00:01:17,390 --> 00:01:19,550
super network engineer I'm just you know

24
00:01:19,550 --> 00:01:22,340
a tinker and a nerd and so I thought

25
00:01:22,340 --> 00:01:25,310
that you know I saw this paper and I was

26
00:01:25,310 --> 00:01:26,960
like damn I got to play around with this

27
00:01:26,960 --> 00:01:28,909
thing right so this is to talk about

28
00:01:28,909 --> 00:01:33,830
that so the context we're in is you know

29
00:01:33,830 --> 00:01:37,280
the context of you got generals peeping

30
00:01:37,280 --> 00:01:39,530
in on your emails and your google

31
00:01:39,530 --> 00:01:41,810
searches and you know if you search for

32
00:01:41,810 --> 00:01:43,490
the wrong thing if you read the wrong

33
00:01:43,490 --> 00:01:46,160
thing they'll send men with guns right

34
00:01:46,160 --> 00:01:47,900
this is what they did you know recently

35
00:01:47,900 --> 00:01:49,880
if you with the mother that was

36
00:01:49,880 --> 00:01:51,290
searching for a new pressure cooker

37
00:01:51,290 --> 00:01:53,990
while the teenage son as one does was

38
00:01:53,990 --> 00:01:56,420
searching for the Anarchist Cookbook and

39
00:01:56,420 --> 00:01:59,180
you know they sent the SWAT team so I

40
00:01:59,180 --> 00:02:01,790
mean this is just a freaky place to be

41
00:02:01,790 --> 00:02:03,410
in you know it in the world it's just

42
00:02:03,410 --> 00:02:05,300
you know creepy and disgusting and the

43
00:02:05,300 --> 00:02:07,700
the thing it makes me think of more than

44
00:02:07,700 --> 00:02:10,910
anything is that at Tom Waits tune you

45
00:02:10,910 --> 00:02:13,810
know like what's he building in there

46
00:02:13,810 --> 00:02:17,390
he's got subscriptions to those RSS

47
00:02:17,390 --> 00:02:22,340
feeds he's been hacking on minima LT or

48
00:02:22,340 --> 00:02:25,340
in his router and we're in his phone and

49
00:02:25,340 --> 00:02:26,840
you won't believe what we saw from the

50
00:02:26,840 --> 00:02:28,590
drone

51
00:02:28,590 --> 00:02:32,049
what's he building in there what the

52
00:02:32,049 --> 00:02:35,379
hell is he building in there we have a

53
00:02:35,379 --> 00:02:38,230
right to know you know it's like these

54
00:02:38,230 --> 00:02:40,269
assholes are looking at you and the real

55
00:02:40,269 --> 00:02:42,010
solution of course is to smash the state

56
00:02:42,010 --> 00:02:44,799
you know overthrow the political systems

57
00:02:44,799 --> 00:02:46,599
that are you know creating this reality

58
00:02:46,599 --> 00:02:49,599
we live in right now in the meantime you

59
00:02:49,599 --> 00:02:55,480
know as you know people who make the raw

60
00:02:55,480 --> 00:02:58,060
substance of the future we need to make

61
00:02:58,060 --> 00:03:00,340
their jobs a bit more difficult right

62
00:03:00,340 --> 00:03:06,280
and so let's talk about HTTPS HTTPS is

63
00:03:06,280 --> 00:03:09,790
you know it can be fairly secure its

64
00:03:09,790 --> 00:03:12,489
seen the long good life and Wilkin will

65
00:03:12,489 --> 00:03:14,500
see you know even more but if you are

66
00:03:14,500 --> 00:03:16,030
going to attack it you know you have a

67
00:03:16,030 --> 00:03:18,549
number of vectors at your disposal right

68
00:03:18,549 --> 00:03:20,590
now that you know you didn't have maybe

69
00:03:20,590 --> 00:03:22,690
you know five years ago you could do

70
00:03:22,690 --> 00:03:25,750
some serious crypt analysis work on RC

71
00:03:25,750 --> 00:03:28,299
for something you could you know pay off

72
00:03:28,299 --> 00:03:30,970
the certificate authorities to issue you

73
00:03:30,970 --> 00:03:33,459
a rogue certificate and you could use

74
00:03:33,459 --> 00:03:36,160
JavaScript boo boo right in the crime

75
00:03:36,160 --> 00:03:37,569
and beast attacks that we've seen

76
00:03:37,569 --> 00:03:40,329
recently there's been recent talk that

77
00:03:40,329 --> 00:03:42,579
you know some implementations of sea

78
00:03:42,579 --> 00:03:45,280
lice have back doors but I don't think

79
00:03:45,280 --> 00:03:49,180
these are you know the the biggest

80
00:03:49,180 --> 00:03:51,730
vulnerability in HTTPS because for me

81
00:03:51,730 --> 00:03:54,760
it's HTTP right it's the fact that you

82
00:03:54,760 --> 00:03:57,609
can access services in an encrypted

83
00:03:57,609 --> 00:03:59,889
fashion or not encrypted fashion and

84
00:03:59,889 --> 00:04:01,510
often we're doing it in such a way that

85
00:04:01,510 --> 00:04:04,060
everything can be snooped on right so

86
00:04:04,060 --> 00:04:08,169
the biggest enemy to me of HTTPS is HTTP

87
00:04:08,169 --> 00:04:12,459
and dan Jay Bernstein has a competition

88
00:04:12,459 --> 00:04:14,349
that that he and some other folks are

89
00:04:14,349 --> 00:04:15,660
running to come up with a

90
00:04:15,660 --> 00:04:18,190
next-generation stream cipher and they

91
00:04:18,190 --> 00:04:20,049
quote so number of disasters and if you

92
00:04:20,049 --> 00:04:21,519
go visit this web page there's lots of

93
00:04:21,519 --> 00:04:23,560
interesting stories about you know

94
00:04:23,560 --> 00:04:26,199
crypto systems that just broke right and

95
00:04:26,199 --> 00:04:27,639
the worst kind of breaking is when you

96
00:04:27,639 --> 00:04:29,530
just don't get any crypto at all right

97
00:04:29,530 --> 00:04:33,550
and an HTTP has that sort of side of

98
00:04:33,550 --> 00:04:35,050
things so I want to do a poll i always

99
00:04:35,050 --> 00:04:37,090
like doing polls in my talks so how many

100
00:04:37,090 --> 00:04:40,450
of you use the eff HTTPS Everywhere

101
00:04:40,450 --> 00:04:42,100
extension good job

102
00:04:42,100 --> 00:04:44,230
I mean that's really great but obviously

103
00:04:44,230 --> 00:04:45,370
you know it's not all of you and it's

104
00:04:45,370 --> 00:04:47,260
not even me right so how many of you

105
00:04:47,260 --> 00:04:50,770
ever use Google to search you know using

106
00:04:50,770 --> 00:04:54,190
the normal HTTP thing or that has this

107
00:04:54,190 --> 00:04:55,780
in the reverse way so i can't i'm

108
00:04:55,780 --> 00:04:57,760
confusing all of you but you know i know

109
00:04:57,760 --> 00:04:59,920
i searched sometimes often usually

110
00:04:59,920 --> 00:05:03,580
actually over just plain HTTP and it's

111
00:05:03,580 --> 00:05:06,910
just you know it's Nast right so there's

112
00:05:06,910 --> 00:05:09,550
actually a reason for this though you

113
00:05:09,550 --> 00:05:11,710
know it and I think you know you feel it

114
00:05:11,710 --> 00:05:14,220
yourself and it goes down to you know

115
00:05:14,220 --> 00:05:16,480
actual fundamental things about the

116
00:05:16,480 --> 00:05:18,550
internet so i took a packet trace of my

117
00:05:18,550 --> 00:05:20,920
browser which you know i run linux as

118
00:05:20,920 --> 00:05:23,770
any you know tinker and hacker does and

119
00:05:23,770 --> 00:05:26,230
then i actually use epiphany which is a

120
00:05:26,230 --> 00:05:28,870
browser built on WebKit to on the gum

121
00:05:28,870 --> 00:05:31,630
system so i'm super weirdo here but you

122
00:05:31,630 --> 00:05:35,140
know it's a modern web kit to build so

123
00:05:35,140 --> 00:05:37,000
this is very similar to what you have in

124
00:05:37,000 --> 00:05:39,220
your browser's so I at zero milliseconds

125
00:05:39,220 --> 00:05:44,110
I did it get to http now too goood org

126
00:05:44,110 --> 00:05:46,630
right so at zero milliseconds we send

127
00:05:46,630 --> 00:05:48,490
out this syn packet right in the syn

128
00:05:48,490 --> 00:05:51,550
packets saying hey and then 130

129
00:05:51,550 --> 00:05:53,920
milliseconds we get back a packet from

130
00:05:53,920 --> 00:05:56,380
the server saying hey you know it's

131
00:05:56,380 --> 00:05:57,520
exactly like when you pick up the phone

132
00:05:57,520 --> 00:05:59,710
it's like hello hello and from this we

133
00:05:59,710 --> 00:06:01,060
can compute in this particular situation

134
00:06:01,060 --> 00:06:03,490
that I've got a 130 millisecond trip

135
00:06:03,490 --> 00:06:05,740
time or half of that would be the

136
00:06:05,740 --> 00:06:08,470
latency and you know this is not going

137
00:06:08,470 --> 00:06:10,510
to go down like this is bandwidth are

138
00:06:10,510 --> 00:06:13,630
going to go up but this particular kind

139
00:06:13,630 --> 00:06:15,160
of latency obviously this is a

140
00:06:15,160 --> 00:06:16,690
transatlantic one from you know my

141
00:06:16,690 --> 00:06:20,560
french home to the server in Boston but

142
00:06:20,560 --> 00:06:22,630
it can't go down below you know a

143
00:06:22,630 --> 00:06:24,910
certain level that certain level is you

144
00:06:24,910 --> 00:06:26,470
know if you were to take a plane like a

145
00:06:26,470 --> 00:06:28,450
light speed plane you know your latency

146
00:06:28,450 --> 00:06:30,700
would be 45 milliseconds so there is you

147
00:06:30,700 --> 00:06:32,170
know something at which you're not going

148
00:06:32,170 --> 00:06:35,560
to go down and so after I get this syn

149
00:06:35,560 --> 00:06:37,330
ACK I can you know finally send off my

150
00:06:37,330 --> 00:06:40,990
you know get me the page later on I get

151
00:06:40,990 --> 00:06:43,690
the first packet and the in the result

152
00:06:43,690 --> 00:06:46,210
and I can start to parse it right and so

153
00:06:46,210 --> 00:06:48,190
I realize okay I got some CSS and some

154
00:06:48,190 --> 00:06:49,930
JavaScript and all the things and so I

155
00:06:49,930 --> 00:06:51,970
can't actually ask for anything else

156
00:06:51,970 --> 00:06:54,370
over this same connection so I fire off

157
00:06:54,370 --> 00:06:55,720
three

158
00:06:55,720 --> 00:06:57,760
in this particular case parallel

159
00:06:57,760 --> 00:07:00,010
connections so three more sin packets go

160
00:07:00,010 --> 00:07:02,560
out to guna org I finally get the end of

161
00:07:02,560 --> 00:07:05,200
my request like the end of the response

162
00:07:05,200 --> 00:07:08,530
back at 410 milliseconds and then in

163
00:07:08,530 --> 00:07:11,770
super sad panda mode you know well I

164
00:07:11,770 --> 00:07:13,360
finally get my parallel connections

165
00:07:13,360 --> 00:07:15,670
opened after I've gotten the first

166
00:07:15,670 --> 00:07:17,350
document and only then can I make the

167
00:07:17,350 --> 00:07:19,000
other round trip necessary to actually

168
00:07:19,000 --> 00:07:21,490
start fetching the auxiliary resources

169
00:07:21,490 --> 00:07:24,220
so I mean this is our internet and you

170
00:07:24,220 --> 00:07:25,960
know I don't know this is half a second

171
00:07:25,960 --> 00:07:28,540
and it's horrible well yeah so this is

172
00:07:28,540 --> 00:07:30,790
even not very many bites so it's not a

173
00:07:30,790 --> 00:07:32,890
bandwidth question at all it's

174
00:07:32,890 --> 00:07:35,170
completely latency driven and of course

175
00:07:35,170 --> 00:07:37,330
you know with HTTPS as we all know it

176
00:07:37,330 --> 00:07:40,360
just gets much worse so sin I get back

177
00:07:40,360 --> 00:07:42,520
my syn ACK i sent off my you know client

178
00:07:42,520 --> 00:07:44,740
hello thing server comes back and says

179
00:07:44,740 --> 00:07:46,600
hello we do the certificate exchange

180
00:07:46,600 --> 00:07:48,940
dance at this particular case and this

181
00:07:48,940 --> 00:07:51,490
just blew my mind right when I saw it

182
00:07:51,490 --> 00:07:53,440
for some reason we wait for the act for

183
00:07:53,440 --> 00:07:56,260
the server so that it received our

184
00:07:56,260 --> 00:07:59,020
certificate change packet to then send

185
00:07:59,020 --> 00:08:00,910
another thing saying change cypher and I

186
00:08:00,910 --> 00:08:02,050
don't know if this is a bug in my

187
00:08:02,050 --> 00:08:03,130
networking stack or if it's something

188
00:08:03,130 --> 00:08:04,810
more fundamental because I wasn't

189
00:08:04,810 --> 00:08:06,430
intending to you know do a deep

190
00:08:06,430 --> 00:08:08,110
investigation on TLS in this particular

191
00:08:08,110 --> 00:08:10,300
case but I don't know this is a sort of

192
00:08:10,300 --> 00:08:12,400
you know multiple round trips thing to

193
00:08:12,400 --> 00:08:15,610
set up a secure network connection that

194
00:08:15,610 --> 00:08:18,040
it's really horrible i can i can only

195
00:08:18,040 --> 00:08:20,080
start to send my request you know i've

196
00:08:20,080 --> 00:08:21,370
been talking back and forth and back and

197
00:08:21,370 --> 00:08:24,370
forth and wasted an entire half a second

198
00:08:24,370 --> 00:08:26,500
right i would have gotten the result

199
00:08:26,500 --> 00:08:29,290
before using HTTP but i'm only now just

200
00:08:29,290 --> 00:08:32,229
asking for it using https to finally get

201
00:08:32,229 --> 00:08:34,599
back the result that almost a second in

202
00:08:34,599 --> 00:08:37,180
and only now you know only at that half

203
00:08:37,180 --> 00:08:40,479
a second the when i get back the first

204
00:08:40,479 --> 00:08:41,589
packet which is somewhere in between

205
00:08:41,589 --> 00:08:45,640
this 583 and 764 milliseconds are we are

206
00:08:45,640 --> 00:08:46,930
we actually starting to kick off the

207
00:08:46,930 --> 00:08:49,210
parallel connections which do the same

208
00:08:49,210 --> 00:08:52,270
thing x 3 you know and this is why it's

209
00:08:52,270 --> 00:08:53,620
slow like this is why the internet is

210
00:08:53,620 --> 00:08:55,600
slow and it's fundamental because i'm

211
00:08:55,600 --> 00:08:58,510
doing this cynic dance for nothing right

212
00:08:58,510 --> 00:09:01,270
for nothing you know i'm saying you know

213
00:09:01,270 --> 00:09:03,190
hello hello establish me a connection is

214
00:09:03,190 --> 00:09:06,790
not even secure so there is readers room

215
00:09:06,790 --> 00:09:09,430
here for a protocol which for

216
00:09:09,430 --> 00:09:11,440
provides properly implemented strong

217
00:09:11,440 --> 00:09:13,630
crypto a phrase which you might

218
00:09:13,630 --> 00:09:15,310
recognize from the first Snowden

219
00:09:15,310 --> 00:09:17,620
interview like that this is what works

220
00:09:17,620 --> 00:09:19,980
right properly implemented strong crypto

221
00:09:19,980 --> 00:09:23,140
that connects faster than TCP I like

222
00:09:23,140 --> 00:09:25,420
that this is a possibility so this is

223
00:09:25,420 --> 00:09:26,920
something that probably will happen at

224
00:09:26,920 --> 00:09:28,600
some point and this particular talk is a

225
00:09:28,600 --> 00:09:31,450
kind of early technological preview the

226
00:09:31,450 --> 00:09:33,850
the preprint on this paper for minima LT

227
00:09:33,850 --> 00:09:36,610
this new protocol just came out in May

228
00:09:36,610 --> 00:09:40,270
so it's it's early days yet still you

229
00:09:40,270 --> 00:09:42,339
know making and breaking but you know

230
00:09:42,339 --> 00:09:44,560
this could be a sort of future glimpse

231
00:09:44,560 --> 00:09:46,720
on the internet so I want to talk about

232
00:09:46,720 --> 00:09:48,100
the two parts so properly implemented

233
00:09:48,100 --> 00:09:50,800
strong crypto part and the faster than

234
00:09:50,800 --> 00:09:54,910
TCP part minimality uses a high-level

235
00:09:54,910 --> 00:09:56,380
knakal library yes it's actually

236
00:09:56,380 --> 00:10:02,170
pronounced salt I always say knakal from

237
00:10:02,170 --> 00:10:05,080
DJ B and Tanya lang hash breaker and

238
00:10:05,080 --> 00:10:06,700
hyper lipstick on the Crypt on the

239
00:10:06,700 --> 00:10:10,830
twitters and doing a fresh protocol

240
00:10:10,830 --> 00:10:13,570
actually can make things much more

241
00:10:13,570 --> 00:10:14,980
secure because you can design things

242
00:10:14,980 --> 00:10:17,320
sensibly from the ground up you don't

243
00:10:17,320 --> 00:10:18,910
have to include like a bunch of broken

244
00:10:18,910 --> 00:10:21,580
ciphers you don't have to include the

245
00:10:21,580 --> 00:10:23,500
null cipher you know the opportunity to

246
00:10:23,500 --> 00:10:25,959
make a connection in plain text mode you

247
00:10:25,959 --> 00:10:28,300
can make sure that by default your

248
00:10:28,300 --> 00:10:30,370
implementations of the crypto primitives

249
00:10:30,370 --> 00:10:32,320
are not vulnerable to these various

250
00:10:32,320 --> 00:10:34,510
timing attacks that we've been seeing

251
00:10:34,510 --> 00:10:37,779
recently and I know it's just like an

252
00:10:37,779 --> 00:10:42,010
opinionated high level base on which to

253
00:10:42,010 --> 00:10:43,810
work and the salt library has been out

254
00:10:43,810 --> 00:10:46,690
and crypto analyzed a bit still

255
00:10:46,690 --> 00:10:48,700
relatively new you know but but it seems

256
00:10:48,700 --> 00:10:51,089
like a solid thing and on top of that

257
00:10:51,089 --> 00:10:54,339
minimality adds forward secrecy layer so

258
00:10:54,339 --> 00:10:57,190
that if someone breaks into either side

259
00:10:57,190 --> 00:11:00,579
and manages to get all the private keys

260
00:11:00,579 --> 00:11:03,220
on the server or the client they won't

261
00:11:03,220 --> 00:11:05,950
be able to decrypt previous connection

262
00:11:05,950 --> 00:11:08,440
so that's that's what that is and it's

263
00:11:08,440 --> 00:11:11,170
minimal latency right the equivalent of

264
00:11:11,170 --> 00:11:13,660
DNS and min melty includes a sort of

265
00:11:13,660 --> 00:11:16,270
equivalent to DNS requires one round

266
00:11:16,270 --> 00:11:20,230
trip and otherwise zero in theory you

267
00:11:20,230 --> 00:11:22,209
can send your sort of hello packet which

268
00:11:22,209 --> 00:11:23,110
opens the connect

269
00:11:23,110 --> 00:11:26,019
and include the equivalent of the HTTP

270
00:11:26,019 --> 00:11:29,200
GET request in that first packet so you

271
00:11:29,200 --> 00:11:30,730
don't actually need a round trip in the

272
00:11:30,730 --> 00:11:32,920
beginning and furthermore your

273
00:11:32,920 --> 00:11:35,769
connection can be it's actually a tunnel

274
00:11:35,769 --> 00:11:37,510
there are connections inside tunnels

275
00:11:37,510 --> 00:11:39,730
your tunnel can be persistent they can

276
00:11:39,730 --> 00:11:42,760
live a long time it can persist over IP

277
00:11:42,760 --> 00:11:45,940
changes so you don't need to do some

278
00:11:45,940 --> 00:11:48,399
particular parts of the protocol set up

279
00:11:48,399 --> 00:11:51,370
every time you work so you can start

280
00:11:51,370 --> 00:11:53,529
working at home like reading your

281
00:11:53,529 --> 00:11:55,209
Twitter's or whatever and you get on the

282
00:11:55,209 --> 00:11:58,600
train and as the GSM changes your IP you

283
00:11:58,600 --> 00:12:00,519
know it's still persisting on the same

284
00:12:00,519 --> 00:12:04,510
tunnel without you know seamlessly

285
00:12:04,510 --> 00:12:06,519
changing you over IPS without needing

286
00:12:06,519 --> 00:12:09,370
the application layer to do recovery and

287
00:12:09,370 --> 00:12:11,470
reconnection logic so it can it can make

288
00:12:11,470 --> 00:12:14,079
things a lot faster in that case and in

289
00:12:14,079 --> 00:12:16,660
addition you know so you're designing a

290
00:12:16,660 --> 00:12:19,420
protocol today you have to base it on

291
00:12:19,420 --> 00:12:21,910
UDP or TCP all right otherwise it

292
00:12:21,910 --> 00:12:23,160
doesn't get through the internet and

293
00:12:23,160 --> 00:12:26,110
minimality is based on UDP it adds a

294
00:12:26,110 --> 00:12:28,329
reliability layer so it's sort of

295
00:12:28,329 --> 00:12:32,980
equivalent to TCPS reliability it adds

296
00:12:32,980 --> 00:12:35,470
crypto as well so it sort of folds in

297
00:12:35,470 --> 00:12:38,019
what would be a TLS layer as well so it

298
00:12:38,019 --> 00:12:40,570
packs them in into one sort of layer

299
00:12:40,570 --> 00:12:44,079
violating protocol but you know I think

300
00:12:44,079 --> 00:12:45,640
it comes with a lot of advantages and

301
00:12:45,640 --> 00:12:48,070
and it seems to be okay it's also

302
00:12:48,070 --> 00:12:49,720
resistant to a denial of service attacks

303
00:12:49,720 --> 00:12:53,350
which is another important detail when

304
00:12:53,350 --> 00:12:55,690
designing there's sort of a family of

305
00:12:55,690 --> 00:12:57,279
this kind of protocol coming out right

306
00:12:57,279 --> 00:12:59,019
now and and resistance of denial of

307
00:12:59,019 --> 00:13:00,850
service is one thing that that all of

308
00:13:00,850 --> 00:13:02,260
them are struggling with and minimal LT

309
00:13:02,260 --> 00:13:03,550
seems to have a good solution although

310
00:13:03,550 --> 00:13:05,260
there are some some details will touch

311
00:13:05,260 --> 00:13:07,180
on a little bit later and it's fast it's

312
00:13:07,180 --> 00:13:10,630
really fast it's really fast when you're

313
00:13:10,630 --> 00:13:14,199
you know running full speed you can

314
00:13:14,199 --> 00:13:17,490
saturate your multiple gigabit links and

315
00:13:17,490 --> 00:13:19,810
it can connect it very high rates as

316
00:13:19,810 --> 00:13:22,000
well so will poke at that so their

317
00:13:22,000 --> 00:13:24,490
tunnels and connections inside the

318
00:13:24,490 --> 00:13:25,779
tunnel the first time you create the

319
00:13:25,779 --> 00:13:27,220
tunnel you have one connection its

320
00:13:27,220 --> 00:13:29,079
connection 0 it's a distinguished

321
00:13:29,079 --> 00:13:30,850
connection and that's the one that

322
00:13:30,850 --> 00:13:32,470
actually allows you to create other

323
00:13:32,470 --> 00:13:35,079
connections so you would make you know

324
00:13:35,079 --> 00:13:36,579
your tunnel and you would

325
00:13:36,579 --> 00:13:38,589
I opened me a connection to the HTTP

326
00:13:38,589 --> 00:13:41,110
service and then on that connection

327
00:13:41,110 --> 00:13:42,759
which you provide that connection number

328
00:13:42,759 --> 00:13:45,579
you would say get me index.html and at

329
00:13:45,579 --> 00:13:47,679
the same time you could add open other

330
00:13:47,679 --> 00:13:52,149
connections and get other resources also

331
00:13:52,149 --> 00:13:54,279
connection 0 is for authentication the

332
00:13:54,279 --> 00:13:55,809
minim LT includes something that's like

333
00:13:55,809 --> 00:13:58,660
client-side certificates it's an

334
00:13:58,660 --> 00:14:00,249
equivalent basically but i won't go more

335
00:14:00,249 --> 00:14:03,670
into that and the multiple connections

336
00:14:03,670 --> 00:14:05,949
yep can proceed that at the same time

337
00:14:05,949 --> 00:14:08,860
although the precise congestion control

338
00:14:08,860 --> 00:14:11,769
details differ a little bit from quick

339
00:14:11,769 --> 00:14:13,509
which is a new protocol from google

340
00:14:13,509 --> 00:14:15,519
that's very similar so you might want to

341
00:14:15,519 --> 00:14:18,129
google both of these to get more

342
00:14:18,129 --> 00:14:19,959
information about them quick seems a bit

343
00:14:19,959 --> 00:14:23,739
more interested in that a packet loss

344
00:14:23,739 --> 00:14:27,100
that affects in the beginning doesn't

345
00:14:27,100 --> 00:14:29,049
delay parallel resource loading in the

346
00:14:29,049 --> 00:14:31,209
end whereas minimality seems to be more

347
00:14:31,209 --> 00:14:34,420
interested in total ordering of all of

348
00:14:34,420 --> 00:14:36,910
the packets even between connections so

349
00:14:36,910 --> 00:14:38,649
they're totally ordered but again see

350
00:14:38,649 --> 00:14:41,169
the paper for details so it wouldn't be

351
00:14:41,169 --> 00:14:43,149
a crypto nerd you know networking

352
00:14:43,149 --> 00:14:45,100
protocol talk without some ascii art so

353
00:14:45,100 --> 00:14:46,540
i'm just busting that out right now i

354
00:14:46,540 --> 00:14:48,910
didn't i didn't have inkscape at the

355
00:14:48,910 --> 00:14:50,319
time that I was making this and so I

356
00:14:50,319 --> 00:14:51,399
didn't ask you art them like that's

357
00:14:51,399 --> 00:14:53,589
awesome leaving that so there are two

358
00:14:53,589 --> 00:14:55,449
parts to a packet all right there's a

359
00:14:55,449 --> 00:14:57,459
clear text part and the ciphertext part

360
00:14:57,459 --> 00:14:59,379
and the clear text includes your

361
00:14:59,379 --> 00:15:01,509
Ethernet headers and your IP headers and

362
00:15:01,509 --> 00:15:04,329
your UDP headers and as 42 bytes in

363
00:15:04,329 --> 00:15:07,209
addition there are 16 more bites half of

364
00:15:07,209 --> 00:15:09,339
that identifies the tunnel and half of

365
00:15:09,339 --> 00:15:11,649
that is a nonce nonce is actually an

366
00:15:11,649 --> 00:15:13,389
English word and I didn't know that and

367
00:15:13,389 --> 00:15:16,209
so it means like the moment the now you

368
00:15:16,209 --> 00:15:18,429
know and it's also pronounced number

369
00:15:18,429 --> 00:15:20,319
used once because that's the thing it's

370
00:15:20,319 --> 00:15:21,369
like a number that just keeps on

371
00:15:21,369 --> 00:15:22,869
incrementing and you combine it with

372
00:15:22,869 --> 00:15:24,639
your secret so you can prevent replay

373
00:15:24,639 --> 00:15:26,379
attacks it's basically that's form and

374
00:15:26,379 --> 00:15:28,239
in addition the first packet includes

375
00:15:28,239 --> 00:15:30,009
your ephemeral public key which as you

376
00:15:30,009 --> 00:15:32,290
can see is only 32 bytes which is the

377
00:15:32,290 --> 00:15:34,299
wild thing about elliptic curve

378
00:15:34,299 --> 00:15:35,980
cryptography you can have keys that

379
00:15:35,980 --> 00:15:38,230
aren't like you know 2048 bits long

380
00:15:38,230 --> 00:15:40,269
they're only 256 bits long or something

381
00:15:40,269 --> 00:15:42,819
like that so that that goes out in the

382
00:15:42,819 --> 00:15:45,249
first packet to establish the shared

383
00:15:45,249 --> 00:15:47,289
secret and then later the tunnel ID

384
00:15:47,289 --> 00:15:48,999
identifies a shared secret for the

385
00:15:48,999 --> 00:15:50,019
server

386
00:15:50,019 --> 00:15:51,970
in a ciphertext you include the flow

387
00:15:51,970 --> 00:15:53,800
control fields the SEC the sequence

388
00:15:53,800 --> 00:15:55,209
number and the acknowledgement field

389
00:15:55,209 --> 00:15:58,569
those are the ones in TCP that allow TCP

390
00:15:58,569 --> 00:16:00,850
to be reliable reliability is a layer

391
00:16:00,850 --> 00:16:03,189
you know on top of the protocol of

392
00:16:03,189 --> 00:16:05,050
communicating with those fields so

393
00:16:05,050 --> 00:16:06,610
that's actually that can be done in user

394
00:16:06,610 --> 00:16:08,920
space and that is super rad I was like

395
00:16:08,920 --> 00:16:11,049
you know how do you make a reliable

396
00:16:11,049 --> 00:16:12,639
protocol because I didn't know you know

397
00:16:12,639 --> 00:16:14,350
and then I saw that it's just layered

398
00:16:14,350 --> 00:16:15,879
over this field and you have this round

399
00:16:15,879 --> 00:16:17,980
trip timer and you estimate how many

400
00:16:17,980 --> 00:16:19,449
bytes are in flight and this is totally

401
00:16:19,449 --> 00:16:21,069
something you know anybody can hack up

402
00:16:21,069 --> 00:16:22,689
and do that's one of the points of this

403
00:16:22,689 --> 00:16:24,189
presentation it's like you know there's

404
00:16:24,189 --> 00:16:26,379
room for new protocols and we can hack

405
00:16:26,379 --> 00:16:27,879
them in user space you know we can hack

406
00:16:27,879 --> 00:16:29,230
them a node you know and we can

407
00:16:29,230 --> 00:16:30,309
experiment with different congestion

408
00:16:30,309 --> 00:16:32,170
control protocols and and that's a thing

409
00:16:32,170 --> 00:16:34,149
man that's totally a thing so after that

410
00:16:34,149 --> 00:16:37,149
what's so so after that we got the

411
00:16:37,149 --> 00:16:38,589
payload you know that's as your

412
00:16:38,589 --> 00:16:40,720
application data on the crypt aside the

413
00:16:40,720 --> 00:16:45,670
the ciphertext is a box which is a

414
00:16:45,670 --> 00:16:48,670
concept from the salt library it's a

415
00:16:48,670 --> 00:16:51,220
public key system and so you have a

416
00:16:51,220 --> 00:16:53,199
public/private key exchange obviously

417
00:16:53,199 --> 00:16:54,910
you keep your your private keys and you

418
00:16:54,910 --> 00:16:56,889
exchange your public keys and in a way

419
00:16:56,889 --> 00:16:58,119
that you establish a shared secret

420
00:16:58,119 --> 00:16:59,759
combine that with an onsen and

421
00:16:59,759 --> 00:17:01,779
authenticate and encrypt the box so it's

422
00:17:01,779 --> 00:17:03,459
complete tamper proof it's at a higher

423
00:17:03,459 --> 00:17:06,699
level than the most crypto primitives

424
00:17:06,699 --> 00:17:08,439
it's built on top of other crypto

425
00:17:08,439 --> 00:17:10,630
primitives and an opinion aid way by DJ

426
00:17:10,630 --> 00:17:12,159
Bernstein and tonya lang so it's like

427
00:17:12,159 --> 00:17:15,459
you know check right right but the the

428
00:17:15,459 --> 00:17:17,230
shared secret is this public key

429
00:17:17,230 --> 00:17:19,179
exchange which takes some bites right

430
00:17:19,179 --> 00:17:23,620
fix this you know larger 32 byte key and

431
00:17:23,620 --> 00:17:26,620
the 32 byte keys and combines them so we

432
00:17:26,620 --> 00:17:28,480
actually trim you know we don't have to

433
00:17:28,480 --> 00:17:30,940
send that at each packet you do that

434
00:17:30,940 --> 00:17:32,409
shared secret established in the

435
00:17:32,409 --> 00:17:34,330
beginning and then the server identifies

436
00:17:34,330 --> 00:17:37,570
associate it's a 64-bit identifier with

437
00:17:37,570 --> 00:17:39,820
that larger shared secret on the server

438
00:17:39,820 --> 00:17:43,330
side that's the tunnel ID and there's a

439
00:17:43,330 --> 00:17:45,010
protocol to sort of change your tunnel

440
00:17:45,010 --> 00:17:47,799
ID periodically so that you know passive

441
00:17:47,799 --> 00:17:49,659
analysis can't track your connection

442
00:17:49,659 --> 00:17:51,820
over IP movements although if you

443
00:17:51,820 --> 00:17:53,289
control the entire internet like some

444
00:17:53,289 --> 00:17:55,570
assholes do you know maybe maybe that's

445
00:17:55,570 --> 00:17:58,139
a thing so it's a public key system and

446
00:17:58,139 --> 00:18:00,490
that's the problem right you know how

447
00:18:00,490 --> 00:18:02,380
how do you distribute public keys it's

448
00:18:02,380 --> 00:18:03,789
just a big old mess

449
00:18:03,789 --> 00:18:07,090
right so in TLS as we know the mass goes

450
00:18:07,090 --> 00:18:08,979
like this your your client knows the

451
00:18:08,979 --> 00:18:11,200
address of a DNS provider the DNS

452
00:18:11,200 --> 00:18:12,879
provider gives the address of the server

453
00:18:12,879 --> 00:18:15,039
may you know there's no authentication

454
00:18:15,039 --> 00:18:17,679
or anything in that it still hackable

455
00:18:17,679 --> 00:18:19,960
thing the client connects to the server

456
00:18:19,960 --> 00:18:22,419
directly and the server gives it you

457
00:18:22,419 --> 00:18:24,519
know its key and then the client checks

458
00:18:24,519 --> 00:18:25,809
that key against the list of known

459
00:18:25,809 --> 00:18:28,690
routes which is also you know a hackable

460
00:18:28,690 --> 00:18:32,019
thing in minimality it's a little bit

461
00:18:32,019 --> 00:18:33,039
different the client knows you address

462
00:18:33,039 --> 00:18:34,690
of the directory service which is like

463
00:18:34,690 --> 00:18:39,129
dns and and the directory service the

464
00:18:39,129 --> 00:18:40,929
server's register with the directory

465
00:18:40,929 --> 00:18:44,080
service and the client connects to the

466
00:18:44,080 --> 00:18:45,700
directory service over a minimal LTE

467
00:18:45,700 --> 00:18:47,049
connection because it knows its

468
00:18:47,049 --> 00:18:49,179
long-term public key and makes a minima

469
00:18:49,179 --> 00:18:52,049
LT query for that servers address and

470
00:18:52,049 --> 00:18:54,549
current ephemeral public key their

471
00:18:54,549 --> 00:18:56,619
ephemeral because they they change for

472
00:18:56,619 --> 00:18:58,929
forward security and then it gets that

473
00:18:58,929 --> 00:19:00,669
back and with that information they can

474
00:19:00,669 --> 00:19:02,139
then connect directly to the server

475
00:19:02,139 --> 00:19:04,509
without a roundtrip I'm kind of breezing

476
00:19:04,509 --> 00:19:05,769
through this stuff because you know I'm

477
00:19:05,769 --> 00:19:08,590
burning through time but the paper is

478
00:19:08,590 --> 00:19:11,769
super interesting and check it out so

479
00:19:11,769 --> 00:19:15,940
yeah I'll skip a bit for performance the

480
00:19:15,940 --> 00:19:17,470
expensive part of the whole thing is

481
00:19:17,470 --> 00:19:19,239
this initial establishment of the shared

482
00:19:19,239 --> 00:19:21,669
secret like that's that's the only thing

483
00:19:21,669 --> 00:19:23,979
that just costs a lot of resources yo

484
00:19:23,979 --> 00:19:28,450
and so minimality can do about 8000

485
00:19:28,450 --> 00:19:30,519
connections per core on a modern x86

486
00:19:30,519 --> 00:19:32,710
system and extrapolating from some other

487
00:19:32,710 --> 00:19:34,450
numbers that they have I think it's

488
00:19:34,450 --> 00:19:36,369
about 750 on an arm device although I

489
00:19:36,369 --> 00:19:38,679
haven't tried and then afterwards it can

490
00:19:38,679 --> 00:19:41,979
go quite fast so why does TCP need a

491
00:19:41,979 --> 00:19:45,879
three-way handshake and why can

492
00:19:45,879 --> 00:19:48,099
minimality avoid it well one you know in

493
00:19:48,099 --> 00:19:50,399
a in a connection flooding attempt

494
00:19:50,399 --> 00:19:52,809
minimality can force the client to sort

495
00:19:52,809 --> 00:19:54,989
of effectively mine for bitcoins like

496
00:19:54,989 --> 00:19:57,669
given this secret produce another value

497
00:19:57,669 --> 00:19:59,499
that with when combined with it it has a

498
00:19:59,499 --> 00:20:02,619
hash whose three low bits are 0 or

499
00:20:02,619 --> 00:20:04,330
something like that you know forcing the

500
00:20:04,330 --> 00:20:07,359
client to pay computationally for the

501
00:20:07,359 --> 00:20:10,330
ability to connect to the server and in

502
00:20:10,330 --> 00:20:13,269
addition if you have a request to an

503
00:20:13,269 --> 00:20:16,059
unloaded server and you just give back a

504
00:20:16,059 --> 00:20:17,620
response directly

505
00:20:17,620 --> 00:20:19,809
to call is designed ideally that the

506
00:20:19,809 --> 00:20:22,030
response would be smaller than the

507
00:20:22,030 --> 00:20:23,800
request so you can't use the servers

508
00:20:23,800 --> 00:20:25,840
resources to attack a third party

509
00:20:25,840 --> 00:20:28,150
although that's that's really the result

510
00:20:28,150 --> 00:20:30,820
of this day has come for me I was

511
00:20:30,820 --> 00:20:32,890
talking with folks and then I realized

512
00:20:32,890 --> 00:20:36,400
you know is that right you know ken it

513
00:20:36,400 --> 00:20:39,100
is our zero round-trip protocols

514
00:20:39,100 --> 00:20:41,980
actually compatible with defending

515
00:20:41,980 --> 00:20:45,280
against amplification attacks and that's

516
00:20:45,280 --> 00:20:47,860
not clear to me you know the the paper

517
00:20:47,860 --> 00:20:49,270
sort of gloss is over but that's

518
00:20:49,270 --> 00:20:52,150
definitely not clear to me because it's

519
00:20:52,150 --> 00:20:54,309
not authenticated when you get a packet

520
00:20:54,309 --> 00:20:57,370
that it comes from that IP because the

521
00:20:57,370 --> 00:20:59,140
authentication corresponds to the fact

522
00:20:59,140 --> 00:21:00,670
that it comes from this public key but

523
00:21:00,670 --> 00:21:03,010
not that when you reply to the IP bits

524
00:21:03,010 --> 00:21:04,780
in the packet that it will be to the

525
00:21:04,780 --> 00:21:07,390
person who sent it and so if you include

526
00:21:07,390 --> 00:21:09,309
a request like get you know whatever

527
00:21:09,309 --> 00:21:11,590
file in your first packet you're going

528
00:21:11,590 --> 00:21:14,440
to fill up the window in the TCP window

529
00:21:14,440 --> 00:21:17,890
is you know five or 16 kilobytes or on

530
00:21:17,890 --> 00:21:19,570
that order you know in your response

531
00:21:19,570 --> 00:21:21,730
which is a pretty big implication and

532
00:21:21,730 --> 00:21:24,970
I'm not sure I probably don't understand

533
00:21:24,970 --> 00:21:25,929
the things and so I'm not a

534
00:21:25,929 --> 00:21:27,790
cryptographer and all the stuff it's

535
00:21:27,790 --> 00:21:29,230
also where the protocol is really new in

536
00:21:29,230 --> 00:21:31,780
any case if it is the case that you

537
00:21:31,780 --> 00:21:33,730
acquire a round trip it's still not a

538
00:21:33,730 --> 00:21:36,820
total lose because you are not worse

539
00:21:36,820 --> 00:21:39,790
than TCP in the worst case and in the

540
00:21:39,790 --> 00:21:41,440
best case where you have a tunnel

541
00:21:41,440 --> 00:21:44,770
established already yet you you don't

542
00:21:44,770 --> 00:21:48,070
need that round trip so so in that in

543
00:21:48,070 --> 00:21:50,770
that regard zero round-trip connections

544
00:21:50,770 --> 00:21:53,080
are always faster than TCP at any

545
00:21:53,080 --> 00:21:55,330
network latency over half a millisecond

546
00:21:55,330 --> 00:21:59,200
which I mean damn right and it always

547
00:21:59,200 --> 00:22:01,690
can x faster than openssl obviously for

548
00:22:01,690 --> 00:22:05,320
the round trip time reasons so very

549
00:22:05,320 --> 00:22:07,270
briefly for foreign alice up this

550
00:22:07,270 --> 00:22:09,580
project is new its associated with a

551
00:22:09,580 --> 00:22:10,990
research project at a university of

552
00:22:10,990 --> 00:22:13,929
illinois chicago and their main thing is

553
00:22:13,929 --> 00:22:15,940
not minimality it's this new operating

554
00:22:15,940 --> 00:22:17,679
system called ethos it's built on the

555
00:22:17,679 --> 00:22:20,740
Xen hypervisor and and it's kind of

556
00:22:20,740 --> 00:22:23,200
complicated and new and stuff and john

557
00:22:23,200 --> 00:22:24,610
so where's the main fellow and and

558
00:22:24,610 --> 00:22:26,320
michael patellas doing minimality part

559
00:22:26,320 --> 00:22:28,420
and minimal t is best conceived out for

560
00:22:28,420 --> 00:22:31,389
them as a way of they do typed IPC

561
00:22:31,389 --> 00:22:33,219
interim process communication in their

562
00:22:33,219 --> 00:22:35,469
in their operating system and for them

563
00:22:35,469 --> 00:22:37,899
minimality is a way of like transferring

564
00:22:37,899 --> 00:22:40,659
that you know to the remote case and so

565
00:22:40,659 --> 00:22:41,829
there I think they're thinking about

566
00:22:41,829 --> 00:22:43,359
more authenticated connections between

567
00:22:43,359 --> 00:22:45,849
hosts but in any case it's a mess right

568
00:22:45,849 --> 00:22:47,200
because you got you know this new

569
00:22:47,200 --> 00:22:49,839
operating system and you got to build it

570
00:22:49,839 --> 00:22:51,849
and it's built with the fork of an old

571
00:22:51,849 --> 00:22:53,049
version of go that doesn't compile

572
00:22:53,049 --> 00:22:56,529
anymore and Linux side as well you have

573
00:22:56,529 --> 00:22:58,929
libraries building for both and I mean

574
00:22:58,929 --> 00:23:00,279
that worked on I worked and I worked on

575
00:23:00,279 --> 00:23:02,739
and I just I wanted to give you all an

576
00:23:02,739 --> 00:23:06,549
old library but I didn't make it I'm

577
00:23:06,549 --> 00:23:07,959
getting there though I'm getting pretty

578
00:23:07,959 --> 00:23:10,479
close the POSIX API I think it's going

579
00:23:10,479 --> 00:23:12,849
to look more like this what they do I'm

580
00:23:12,849 --> 00:23:14,049
going to go back a little bit they they

581
00:23:14,049 --> 00:23:18,489
have these types I pcs but the type the

582
00:23:18,489 --> 00:23:20,349
way to establish these types between the

583
00:23:20,349 --> 00:23:23,379
two sides for me it's kind of more

584
00:23:23,379 --> 00:23:24,969
complication than I care about right now

585
00:23:24,969 --> 00:23:26,320
you know I'd rather like an API that

586
00:23:26,320 --> 00:23:30,159
allows me to just sort of write data on

587
00:23:30,159 --> 00:23:32,259
top of a lower level protocol and I

588
00:23:32,259 --> 00:23:33,579
don't have to you know convert

589
00:23:33,579 --> 00:23:35,919
everything to this new API so that's

590
00:23:35,919 --> 00:23:37,269
that's what I'm working on should have

591
00:23:37,269 --> 00:23:40,089
out soon and the JavaScript I n is that

592
00:23:40,089 --> 00:23:42,099
you need an event loop running in order

593
00:23:42,099 --> 00:23:43,959
to manage your your window and your

594
00:23:43,959 --> 00:23:45,879
reach we transmit times and stuff like

595
00:23:45,879 --> 00:23:49,089
that so Libby V is an obvious and

596
00:23:49,089 --> 00:23:52,209
awesome you know thing to think about

597
00:23:52,209 --> 00:23:54,789
right there and you could talk about you

598
00:23:54,789 --> 00:23:59,769
know actually just basing it on salt and

599
00:23:59,769 --> 00:24:03,849
other things they're like progressively

600
00:24:03,849 --> 00:24:06,789
rewriting parts that are in see right

601
00:24:06,789 --> 00:24:09,429
now into JavaScript like the whole

602
00:24:09,429 --> 00:24:11,109
reliability layer I think that would be

603
00:24:11,109 --> 00:24:13,570
super awesome right have the pure

604
00:24:13,570 --> 00:24:15,219
JavaScript congestion control running on

605
00:24:15,219 --> 00:24:19,779
you know authenticated encryption flow

606
00:24:19,779 --> 00:24:21,609
control fields so that'd be super

607
00:24:21,609 --> 00:24:24,279
awesome so any message is that BAM

608
00:24:24,279 --> 00:24:26,349
weights going up latency staying the

609
00:24:26,349 --> 00:24:29,459
same there's a space for a protocol that

610
00:24:29,459 --> 00:24:33,940
offers a strong crypto at low latencies

611
00:24:33,940 --> 00:24:37,839
you can you know they you can lower your

612
00:24:37,839 --> 00:24:39,819
Layton sees by a large percentage I

613
00:24:39,819 --> 00:24:41,529
think it's on the order of you know

614
00:24:41,529 --> 00:24:43,370
twenty to fifty percent on

615
00:24:43,370 --> 00:24:47,420
gone connections so it's a new thing go

616
00:24:47,420 --> 00:24:49,910
forth and hack the minimality this is

617
00:24:49,910 --> 00:24:51,710
the first presentation about this

618
00:24:51,710 --> 00:24:54,290
project anywhere that I know of and the

619
00:24:54,290 --> 00:24:55,580
next one is going to be here in Berlin

620
00:24:55,580 --> 00:24:58,880
in November at the ACM computer and

621
00:24:58,880 --> 00:25:00,860
communication security conference so

622
00:25:00,860 --> 00:25:02,720
they're actually presenting the paper of

623
00:25:02,720 --> 00:25:04,850
which the preprint came out in may so

624
00:25:04,850 --> 00:25:07,250
cynic just say no i'll be on the

625
00:25:07,250 --> 00:25:09,650
twitters andy wing it i'll tweet these

626
00:25:09,650 --> 00:25:12,350
slides and give an update on on the

627
00:25:12,350 --> 00:25:23,590
release so thanks very much

