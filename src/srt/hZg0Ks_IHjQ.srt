1
00:00:10,420 --> 00:00:16,760
So, thank you very much for attending this
talk pip hope you brought your hat for this

2
00:00:16,760 --> 00:00:17,940
talk.

3
00:00:17,940 --> 00:00:27,461
Did you ever wonder why organizations, companies
or even the governments try to when you get

4
00:00:27,461 --> 00:00:32,610
to the Internet and how they are able to do
that even though you don't save the cookies

5
00:00:32,610 --> 00:00:35,860
in your browser.

6
00:00:35,860 --> 00:00:38,030
Your default.

7
00:00:38,030 --> 00:00:43,579
We will cover a little bit about the whole
history of the fingerprint in the web environment

8
00:00:43,579 --> 00:00:44,649
and the browsers.

9
00:00:44,649 --> 00:00:54,960
And towards the end we will talk a little
bit more about more advanced fingerprint techniques.

10
00:00:54,960 --> 00:00:58,140
And also, like how they try to mitigate them.

11
00:00:58,140 --> 00:01:03,289
I say try because it's basically a cat/mouse
game.

12
00:01:03,289 --> 00:01:09,340
And they are in pursuit to circumvent our
fingerprinting protections.

13
00:01:09,340 --> 00:01:12,860
So, it's a game and the user always loses.

14
00:01:12,860 --> 00:01:18,710
And the final thing I'm going to say in the
talk is, I'm going to say the word "Attacker"

15
00:01:18,710 --> 00:01:19,710
a lot.

16
00:01:19,710 --> 00:01:26,860
When I say the word" Attacker," we can think
about anyone who tries to demonize us.

17
00:01:26,860 --> 00:01:29,729
Could be a company, advertiser, anything like
that.

18
00:01:29,729 --> 00:01:31,340
So, that's it.

19
00:01:31,340 --> 00:01:35,870
So, like I said before, I work for the browser.

20
00:01:35,870 --> 00:01:37,570
Mainly work on the mobile stuff.

21
00:01:37,570 --> 00:01:40,020
I work with little bit with the fingerprinting.

22
00:01:40,020 --> 00:01:48,030
If you have questions about the browser, complain,
stop by and ask about it.

23
00:01:48,030 --> 00:01:57,710
So, before I talk about track, we need to
understand what is the motivation?

24
00:01:57,710 --> 00:01:59,979
Like, it's a good word.

25
00:01:59,979 --> 00:02:06,240
If we're talking about the different attacks,
we need to think about the attacker's mentality.

26
00:02:06,240 --> 00:02:13,400
So, we need to know why people want to attack
the user once you demonize the user.

27
00:02:13,400 --> 00:02:19,050
So, star developers, we have a design document.

28
00:02:19,050 --> 00:02:25,440
And we think those are the mainly kind of
goals of the attacker.

29
00:02:25,440 --> 00:02:26,860
The first one is analytics.

30
00:02:26,860 --> 00:02:31,970
So, people to want know organizations want
to know what users do.

31
00:02:31,970 --> 00:02:38,420
How many times a unique user accesses a site?

32
00:02:38,420 --> 00:02:39,490
It's for analytics.

33
00:02:39,490 --> 00:02:40,490
Target ads, personalization.

34
00:02:40,490 --> 00:02:47,010
So, sometimes a company wants to have a hand
wants to send the user a hand crafted experience.

35
00:02:47,010 --> 00:02:53,100
So, it is by doing it, some things make sense.

36
00:02:53,100 --> 00:02:58,200
But we will have having a lot of sense.

37
00:02:58,200 --> 00:03:00,150
For the detection as the organization.

38
00:03:00,150 --> 00:03:10,610
And probably it's the most because they are
made by trying to demonize it.

39
00:03:10,610 --> 00:03:16,240
These are the main goals of attackers.

40
00:03:16,240 --> 00:03:22,490
But before talking about fingerprint techniques
we should understand why the fingerprint techniques

41
00:03:22,490 --> 00:03:25,130
are more and more advanced at this stage.

42
00:03:25,130 --> 00:03:28,180
And one of the motivations is because of the
cookies.

43
00:03:28,180 --> 00:03:29,580
So, I love this.

44
00:03:29,580 --> 00:03:37,900
This quote from the L.A. Times from an article
from 1996 where it says they are data that

45
00:03:37,900 --> 00:03:40,750
can be stored to your PC.

46
00:03:40,750 --> 00:03:43,770
And they access it every time you go back
to the website.

47
00:03:43,770 --> 00:03:52,790
And it says that sites because of the third
party, it was not that clear at that time.

48
00:03:52,790 --> 00:03:58,500
So, again, it was self contained to a single
site.

49
00:03:58,500 --> 00:04:01,530
And the cookies are really simple.

50
00:04:01,530 --> 00:04:04,740
Probably everyone knows here how cookies work.

51
00:04:04,740 --> 00:04:07,410
So, the first step, the user requests a web
page.

52
00:04:07,410 --> 00:04:13,780
They send back the cage with the cookies using
the cookie.

53
00:04:13,780 --> 00:04:21,040
And finally, will the user access a page from
the same website?

54
00:04:21,040 --> 00:04:25,300
So, the server knows things on that page.

55
00:04:25,300 --> 00:04:26,770
It's simple.

56
00:04:26,770 --> 00:04:28,250
It's easy.

57
00:04:28,250 --> 00:04:35,950
But what's happened after the cookie was created
was people were able to attack users.

58
00:04:35,950 --> 00:04:38,660
They were able to attack users.

59
00:04:38,660 --> 00:04:41,250
Especially like advertisers and trackers.

60
00:04:41,250 --> 00:04:50,290
And they did that because cookies are really
easy to [audio cutting out to Skype] and it's

61
00:04:50,290 --> 00:04:52,170
almost the same.

62
00:04:52,170 --> 00:05:15,810
The only difference is the main change, you
have an advertiser.

63
00:05:15,810 --> 00:05:17,280
Normally they're a friend.

64
00:05:17,280 --> 00:05:22,560
So, they have the domain.

65
00:05:22,560 --> 00:05:26,360
The user sends to the website.

66
00:05:26,360 --> 00:05:31,920
The advertiser and their content websites.

67
00:05:31,920 --> 00:05:34,550
The server sends the content to the advertiser.

68
00:05:34,550 --> 00:05:36,720
And the advertiser also sets it up.

69
00:05:36,720 --> 00:05:45,680
But when you go to another website, the advertiser
reads that cookie and they know what kind

70
00:05:45,680 --> 00:05:47,020
of site did you visit.

71
00:05:47,020 --> 00:05:54,370
So, this is a good example created by like
and working with privacy.

72
00:05:54,370 --> 00:06:01,230
Sometimes, for example, we test the news websites.

73
00:06:01,230 --> 00:06:05,700
And later on, you can access health websites.

74
00:06:05,700 --> 00:06:08,830
Search for a curser or something like that.

75
00:06:08,830 --> 00:06:13,070
And now they advertise what you are doing.

76
00:06:13,070 --> 00:06:19,139
So, the third party is attached to this.

77
00:06:19,139 --> 00:06:24,450
But a few people felt lots about that.

78
00:06:24,450 --> 00:06:30,960
For example, and this created a bunch of ad
blockers.

79
00:06:30,960 --> 00:06:40,500
You have privacy badge, and in from EFF, block,
a bunch of ad blockers try to event third

80
00:06:40,500 --> 00:06:42,230
party cookies.

81
00:06:42,230 --> 00:06:49,030
However, what's happened to us, preventing
cookies is not enough anymore.

82
00:06:49,030 --> 00:06:55,950
You need you need to show how the browser
behaves to have really privacy these days.

83
00:06:55,950 --> 00:07:03,840
Because JavaScript, CSS, how HTTP protocol
behaves.

84
00:07:03,840 --> 00:07:08,900
It like exposes the user locality.

85
00:07:08,900 --> 00:07:12,300
Besides the user locality, it exposes the
user's machine.

86
00:07:12,300 --> 00:07:15,000
What kind of machine I am.

87
00:07:15,000 --> 00:07:20,350
It's exposed what language the user navigates
on the Internet.

88
00:07:20,350 --> 00:07:25,180
So, all the tools are amazing, but they are
not enough right now.

89
00:07:25,180 --> 00:07:29,990
If you want to really have privacy, they are
not enough.

90
00:07:29,990 --> 00:07:36,130
So, let's talk a little bit about the browser
fingerprints.

91
00:07:36,130 --> 00:07:44,560
The browser, like I said, we have a document,
a design documentation where we talk about

92
00:07:44,560 --> 00:07:53,120
what kind of fingerprint attacks trackers,
advertisers, governments try on users.

93
00:07:53,120 --> 00:07:59,980
And the four of them are request behavior,
JavaScript attackers, CSS attackers and plugins.

94
00:07:59,980 --> 00:08:05,760
We're to the going to talk about plugins because
if you are using a plugin, you are screwing

95
00:08:05,760 --> 00:08:06,760
up.

96
00:08:06,760 --> 00:08:07,760
Sorry.

97
00:08:07,760 --> 00:08:14,010
So, the first one, the most simple is the
behavior attack.

98
00:08:14,010 --> 00:08:21,330
And basically, it is when you are requesting
content from a server and it's really about

99
00:08:21,330 --> 00:08:23,210
the user agents.

100
00:08:23,210 --> 00:08:24,400
There are others.

101
00:08:24,400 --> 00:08:32,089
But the others are more the HTTP level the
HTTP connection level, people are able to

102
00:08:32,089 --> 00:08:36,140
get the HTTP specification.

103
00:08:36,140 --> 00:08:38,870
This is the simplest one.

104
00:08:38,870 --> 00:08:40,550
A good example is accept language.

105
00:08:40,550 --> 00:08:47,790
So, an attacker or advertiser knows you are
an English speaker if you say language English,

106
00:08:47,790 --> 00:08:50,980
U.S. Or accepting code.

107
00:08:50,980 --> 00:08:55,850
And every browser has a different accept encoding.

108
00:08:55,850 --> 00:09:02,270
So, trackers or malware people, malware attackers,
they know what browser you are on and can

109
00:09:02,270 --> 00:09:07,360
provide you malware specific for you.

110
00:09:07,360 --> 00:09:18,170
And the user agents, so, every time you access
websites, they apply to the machine.

111
00:09:18,170 --> 00:09:24,580
So, it's from the past and we never changed
that.

112
00:09:24,580 --> 00:09:29,670
The other one is, think more about JavaScript.

113
00:09:29,670 --> 00:09:36,790
JavaScript is really interesting because it's
a language that allows you to do anything

114
00:09:36,790 --> 00:09:37,790
and everything.

115
00:09:37,790 --> 00:09:41,779
And in this side, when you do anything and
everything, it's terrible.

116
00:09:41,779 --> 00:09:46,750
So, I don't know if you ever use it the top
browser.

117
00:09:46,750 --> 00:09:55,330
And you can use the secret slides, it can
change how much safe you want.

118
00:09:55,330 --> 00:10:02,310
For example, the default option on JavaScript,
you are able to play video and be able to

119
00:10:02,310 --> 00:10:03,580
play audio.

120
00:10:03,580 --> 00:10:12,200
But when you move up a little bit to the safe
to a more safer privacy.

121
00:10:12,200 --> 00:10:15,250
We start to disable things from the browser.

122
00:10:15,250 --> 00:10:18,560
Start to disable JavaScript, video.

123
00:10:18,560 --> 00:10:19,750
Save audio.

124
00:10:19,750 --> 00:10:25,930
So, the first thing is the navigate objects.

125
00:10:25,930 --> 00:10:26,930
The dot navigate objects.

126
00:10:26,930 --> 00:10:28,890
This object exposes so many things.

127
00:10:28,890 --> 00:10:32,760
Like, for example, this is an example exposed
by language.

128
00:10:32,760 --> 00:10:34,450
Even expose what part am I?

129
00:10:34,450 --> 00:10:38,540
And this shows up and I took it from my Macbook.

130
00:10:38,540 --> 00:10:42,680
It says Mac can tell.

131
00:10:42,680 --> 00:10:45,760
The attacker knows that I'm on a Macbook.

132
00:10:45,760 --> 00:10:46,810
And it's scary.

133
00:10:46,810 --> 00:10:48,130
Really scary.

134
00:10:48,130 --> 00:10:54,730
Especially for, I'm in this, I'm so crazy.

135
00:10:54,730 --> 00:10:55,730
It's really scary.

136
00:10:55,730 --> 00:11:00,450
GS is posting this much information.

137
00:11:00,450 --> 00:11:06,600
Other one is GS other GS information is on
the screen.

138
00:11:06,600 --> 00:11:15,360
So, the problem about the screen is because
when you're mobile or when you are on a notebook,

139
00:11:15,360 --> 00:11:17,200
when you are mobile, especially Android.

140
00:11:17,200 --> 00:11:24,940
Android has so many sometimes you are able
to learn what this specific device does on

141
00:11:24,940 --> 00:11:25,940
the screen.

142
00:11:25,940 --> 00:11:32,720
So, in this example we show like the whole
screen for the Macbook and also the pixel

143
00:11:32,720 --> 00:11:34,050
is scary.

144
00:11:34,050 --> 00:11:37,380
You should never expose that.

145
00:11:37,380 --> 00:11:39,279
So, we tried to mitigate that.

146
00:11:39,279 --> 00:11:41,680
Like make it in a new form.

147
00:11:41,680 --> 00:11:45,430
There's two kind of mitigations.

148
00:11:45,430 --> 00:11:46,870
Researchers explain in the papers.

149
00:11:46,870 --> 00:11:49,550
The first one is make everything in a form.

150
00:11:49,550 --> 00:11:52,779
All the users should have the same values.

151
00:11:52,779 --> 00:11:55,130
It's the approach you use on top browser.

152
00:11:55,130 --> 00:12:00,800
And the other one is make summarize each user
is.

153
00:12:00,800 --> 00:12:07,610
We don't do that because it's a little bit
hard to do that.

154
00:12:07,610 --> 00:12:11,839
To do that without adding issues to the browser.

155
00:12:11,839 --> 00:12:14,620
Because every time you access something, it's
going to make a noise.

156
00:12:14,620 --> 00:12:18,570
And we can make an issue.

157
00:12:18,570 --> 00:12:22,840
So, we make like dates, vendors.

158
00:12:22,840 --> 00:12:24,680
We try to make everything universal.

159
00:12:24,680 --> 00:12:27,270
So, for example, dates.

160
00:12:27,270 --> 00:12:31,880
If you are using your top browser and you
instantiate objects.

161
00:12:31,880 --> 00:12:37,110
And you see the user, and they are all in
the zero.

162
00:12:37,110 --> 00:12:39,550
All of them are each.

163
00:12:39,550 --> 00:12:42,730
We try to normalize them.

164
00:12:42,730 --> 00:12:44,860
All the vendors are the same.

165
00:12:44,860 --> 00:12:50,680
We try to build up the language inside the
browser to normalize everything.

166
00:12:50,680 --> 00:12:55,520
All the fonts in the browser to make it the
same across everywhere.

167
00:12:55,520 --> 00:12:59,270
So, we try to make everything universal.

168
00:12:59,270 --> 00:13:03,830
So, the second one is the web value.

169
00:13:03,830 --> 00:13:05,860
The web value is amazing API.

170
00:13:05,860 --> 00:13:14,180
I remember when I went to release it and the
gamer developers were like insanely excited

171
00:13:14,180 --> 00:13:17,870
about that because they were able to do a
bunch of stuff.

172
00:13:17,870 --> 00:13:31,370
However, since 2016/2015, a few researchers
say how do people play on websites?

173
00:13:31,370 --> 00:13:39,180
The user is able to hear the audio, but it
will be playing in the background.

174
00:13:39,180 --> 00:13:42,640
And it will be used to track users.

175
00:13:42,640 --> 00:13:43,790
But why?

176
00:13:43,790 --> 00:13:46,660
The first thing is the context.

177
00:13:46,660 --> 00:13:51,801
So, every time you create a web browser object
in this group, every time you go to use the

178
00:13:51,801 --> 00:13:53,850
web browser, you must create the context.

179
00:13:53,850 --> 00:14:00,330
The context exposes so much information about
your machine and it is unique.

180
00:14:00,330 --> 00:14:05,480
Even if you have two Macbooks from the same
year and the same day, they are unique.

181
00:14:05,480 --> 00:14:10,120
For instance, this is totally different from
the machine.

182
00:14:10,120 --> 00:14:13,380
Document time is also didn't from machine
to machine.

183
00:14:13,380 --> 00:14:17,020
Nothing is unique.

184
00:14:17,020 --> 00:14:21,050
Like in mention, sometimes they have the two
numbers in the same and other things are the

185
00:14:21,050 --> 00:14:22,110
same across machines.

186
00:14:22,110 --> 00:14:27,950
But objects can expose some information about
the user.

187
00:14:27,950 --> 00:14:32,089
So, we try to normalize a little bit as well.

188
00:14:32,089 --> 00:14:35,480
And there's other this one's the most scary
one.

189
00:14:35,480 --> 00:14:40,790
So, this graph is when I play one single audio.

190
00:14:40,790 --> 00:14:42,260
But these are not able to hear.

191
00:14:42,260 --> 00:14:47,070
I just created audio context and play that.

192
00:14:47,070 --> 00:14:53,339
So, the bluish line is the baseline created
by the experience.

193
00:14:53,339 --> 00:14:57,160
And the red line, red curve, it's my machine.

194
00:14:57,160 --> 00:15:00,450
So, one machine is different from another
machine.

195
00:15:00,450 --> 00:15:06,010
Doesn't matter if you were bought on the same
day in the same place.

196
00:15:06,010 --> 00:15:08,490
It has the psalm configuration.

197
00:15:08,490 --> 00:15:10,760
Each machine is didn't from another machine.

198
00:15:10,760 --> 00:15:16,730
So, when you play this audio, you can see
a difference between them.

199
00:15:16,730 --> 00:15:21,250
So, this block here, this organization is
created using these codes.

200
00:15:21,250 --> 00:15:28,330
This code was in the previous line there is
a paper and this block of code was taken from

201
00:15:28,330 --> 00:15:29,330
the paper.

202
00:15:29,330 --> 00:15:33,279
And this code is really simple.

203
00:15:33,279 --> 00:15:38,000
Create an answer, create and play back.

204
00:15:38,000 --> 00:15:40,180
After that, you get the data, get the frequency.

205
00:15:40,180 --> 00:15:43,390
And the frequency is different for each user.

206
00:15:43,390 --> 00:15:49,540
And even worse, not just each browser, but
each browser version is different.

207
00:15:49,540 --> 00:15:54,329
So, if I play this code, if I don't know.

208
00:15:54,329 --> 00:15:58,200
59, if I do 60, we are talking different values.

209
00:15:58,200 --> 00:16:05,790
So, it is crazy, and fits everything from
the web.

210
00:16:05,790 --> 00:16:12,610
So, it's like it was almost impossible to
make it uniform without breaking the whole

211
00:16:12,610 --> 00:16:15,480
user experience.

212
00:16:15,480 --> 00:16:22,190
And probably it's so simple to explore and
so many people explore that.

213
00:16:22,190 --> 00:16:25,000
It's the time based side channels.

214
00:16:25,000 --> 00:16:31,430
One thing about JavaScript is, like I said
before, the CPU, you can get the same CPU,

215
00:16:31,430 --> 00:16:35,760
the same built into the same date and they
will have few differences.

216
00:16:35,760 --> 00:16:37,710
So, JavaScript is really complex.

217
00:16:37,710 --> 00:16:41,850
JavaScript has an adjustment time, a minimum
agent.

218
00:16:41,850 --> 00:16:43,470
Each is different.

219
00:16:43,470 --> 00:16:48,269
And JavaScript runs on top of the CPU because
of the JavaScript just in time.

220
00:16:48,269 --> 00:16:58,350
Based on that, we are able to know huge function
takes to run and look into that.

221
00:16:58,350 --> 00:17:06,059
So, a good example of that is all those functions
here we were able to calculate the difference

222
00:17:06,059 --> 00:17:10,929
between where a function runs and use the
function to calculate that.

223
00:17:10,929 --> 00:17:15,139
A good example is a block of code that's really
simple.

224
00:17:15,139 --> 00:17:22,029
It's basically so, it was written by Andrew
Bartz in 2007.

225
00:17:22,029 --> 00:17:26,669
The channels are known for like years and
years and years.

226
00:17:26,669 --> 00:17:35,379
And this is an example, basically, they want
to know how long the works in the browser

227
00:17:35,379 --> 00:17:39,789
results when the source is not an image.

228
00:17:39,789 --> 00:17:44,570
For example, in the line nine, if you look
at the line nine, the test of the source and

229
00:17:44,570 --> 00:17:46,139
the damage.

230
00:17:46,139 --> 00:17:54,659
With this code we know how long the browser
the browser sends to the stack and they do

231
00:17:54,659 --> 00:18:00,910
the computations and filters out, okay, this
is not an image.

232
00:18:00,910 --> 00:18:04,399
So, like, it's a really simple code.

233
00:18:04,399 --> 00:18:09,960
And there is we can do kind of things, the
kind of attack

234
00:18:09,960 --> 00:18:15,570
And the thing we do, we try to remove granularity.

235
00:18:15,570 --> 00:18:18,659
We claim 200 milliseconds.

236
00:18:18,659 --> 00:18:29,419
If you get it now and it is attracted by other
performance stuff, the variable will be 100

237
00:18:29,419 --> 00:18:30,659
milliseconds.

238
00:18:30,659 --> 00:18:38,799
It's the best we can do because everyone agrees
side channels, basically the type of channels

239
00:18:38,799 --> 00:18:40,529
are terrible.

240
00:18:40,529 --> 00:18:43,760
And basically, we should remove it from JavaScript.

241
00:18:43,760 --> 00:18:46,389
However, it's not possible to break the whole
web.

242
00:18:46,389 --> 00:18:49,279
So, this is an alternative.

243
00:18:49,279 --> 00:18:50,940
We try to cut the variable.

244
00:18:50,940 --> 00:18:52,500
And it works reasonably.

245
00:18:52,500 --> 00:18:55,359
But, again, it's not a silver bullet.

246
00:18:55,359 --> 00:18:56,851
We know that someone can explore that.

247
00:18:56,851 --> 00:19:01,049
That people are able to explore that.

248
00:19:01,049 --> 00:19:04,259
Like even increase a little bit more of the
timer.

249
00:19:04,259 --> 00:19:09,250
But like for the majority of the attackers,
it works.

250
00:19:09,250 --> 00:19:10,879
The other things that cover today.

251
00:19:10,879 --> 00:19:18,760
And we cover today, because each browser has
a different library.

252
00:19:18,760 --> 00:19:24,259
And each graphics library, even for different
operating systems renders differently.

253
00:19:24,259 --> 00:19:30,639
So, the key for the attack, where there's
a bunch of things on the screen using few

254
00:19:30,639 --> 00:19:33,809
text, few style, few reqs.

255
00:19:33,809 --> 00:19:40,820
And use that to get the data and the image
and sent to a server.

256
00:19:40,820 --> 00:19:45,350
This image is basically a key and a map.

257
00:19:45,350 --> 00:19:50,330
So, we tried a different approach to mitigate
that.

258
00:19:50,330 --> 00:19:53,110
But sadly, it was complex to the user.

259
00:19:53,110 --> 00:20:01,429
We tried to access the HTML files and it shows
a pop up on my screen saying, okay, this user

260
00:20:01,429 --> 00:20:06,960
has tried to go to the image from the browser.

261
00:20:06,960 --> 00:20:10,809
And you're like, you cannot allow, you can
allow.

262
00:20:10,809 --> 00:20:17,479
So, it's for the user, it was the best we
could do we could do about that.

263
00:20:17,479 --> 00:20:19,499
Like that attack.

264
00:20:19,499 --> 00:20:22,549
I think Mozilla's explaining a little bit.

265
00:20:22,549 --> 00:20:25,830
Mozilla is using the same thing a little bit.

266
00:20:25,830 --> 00:20:29,940
But right now, they are kind of following
the same idea as well.

267
00:20:29,940 --> 00:20:34,239
Now talking a little bit about CSS.

268
00:20:34,239 --> 00:20:41,519
With our same property that trackers are able
to fingerprint the line heights.

269
00:20:41,519 --> 00:20:49,580
So, line heights, they are simple, and they
okay.

270
00:20:49,580 --> 00:20:50,899
And the font size.

271
00:20:50,899 --> 00:20:55,840
So, but for different machines, those are
different.

272
00:20:55,840 --> 00:20:56,840
Especially on Firefox.

273
00:20:56,840 --> 00:21:03,379
So, in Firefox, if you get the line height
from if you get the default line height so,

274
00:21:03,379 --> 00:21:06,220
for Linux, it's lines and pixels.

275
00:21:06,220 --> 00:21:09,009
It's 19 dot pixels.

276
00:21:09,009 --> 00:21:16,489
And sometimes it's 19 but what's happening?

277
00:21:16,489 --> 00:21:19,440
It's because fonts are broken.

278
00:21:19,440 --> 00:21:20,440
Fonts are terrible.

279
00:21:20,440 --> 00:21:21,440
And really hard to create a font.

280
00:21:21,440 --> 00:21:23,370
It's really hard to create a font.

281
00:21:23,370 --> 00:21:31,639
And each like each machine each browser, each
assistant has a different default font.

282
00:21:31,639 --> 00:21:33,859
And each font has an official.

283
00:21:33,859 --> 00:21:42,729
So, it is like on Firefox where it uses the
font from the system, the font from the system,

284
00:21:42,729 --> 00:21:44,130
the line height's different.

285
00:21:44,130 --> 00:21:48,580
So, we also try to uniform that.

286
00:21:48,580 --> 00:21:56,619
So, we had the default be instead of the font
size, we need to make sure it's what that

287
00:21:56,619 --> 00:22:00,450
agency recommends so we're following the specification
at least.

288
00:22:00,450 --> 00:22:05,809
But, again, it's not amazing ID.

289
00:22:05,809 --> 00:22:08,629
It should be fixed in the font size instead
of in the fonts.

290
00:22:08,629 --> 00:22:13,440
And from that side instead of browser side.

291
00:22:13,440 --> 00:22:16,340
And talking a little bit more about this.

292
00:22:16,340 --> 00:22:20,039
These are able to track you.

293
00:22:20,039 --> 00:22:21,799
Like the properties.

294
00:22:21,799 --> 00:22:28,360
We have like the best device heights, are
able to strike the device.

295
00:22:28,360 --> 00:22:31,419
The user's machine device size.

296
00:22:31,419 --> 00:22:35,019
So, we also uniform those values.

297
00:22:35,019 --> 00:22:38,850
So, the default puts the 1.0.

298
00:22:38,850 --> 00:22:42,149
We create for the height.

299
00:22:42,149 --> 00:22:43,739
We also make them uniform.

300
00:22:43,739 --> 00:22:50,200
So, when someone tries to know what's the
size of your device, like what's the size

301
00:22:50,200 --> 00:22:51,490
of your device?

302
00:22:51,490 --> 00:22:54,820
We lie to the requester.

303
00:22:54,820 --> 00:23:03,480
And the last thing I didn't talk about is
we do also something about cookies.

304
00:23:03,480 --> 00:23:06,609
And Mozilla called that first by isolation,
what we do.

305
00:23:06,609 --> 00:23:08,470
We are a little bit more fancy.

306
00:23:08,470 --> 00:23:12,399
We have a trademark.

307
00:23:12,399 --> 00:23:17,640
And basically, it is it isolates all the identifier
source.

308
00:23:17,640 --> 00:23:21,049
By what are the source cookies?

309
00:23:21,049 --> 00:23:22,169
Shared work?

310
00:23:22,169 --> 00:23:23,299
Web storage?

311
00:23:23,299 --> 00:23:30,580
For example, when you are accessing a website,
and it has a frame.

312
00:23:30,580 --> 00:23:43,629
In iFrame we isolate inside of iFrame, all
the workers, storage, WebGL.

313
00:23:43,629 --> 00:23:48,149
We try to translate everything for the URL.

314
00:23:48,149 --> 00:23:52,549
The URL is a key to any identified source.

315
00:23:52,549 --> 00:23:54,769
It looks simple.

316
00:23:54,769 --> 00:23:59,399
However, it breaks the whole web when enable
that.

317
00:23:59,399 --> 00:24:01,820
So, it is why Mozilla doesn't have it on by
default.

318
00:24:01,820 --> 00:24:07,769
We need it enabled for isolation.

319
00:24:07,769 --> 00:24:14,220
Programmers, they want to be able to communicate
across the whole domain.

320
00:24:14,220 --> 00:24:18,649
And we don't allow that anymore with the isolation.

321
00:24:18,649 --> 00:24:20,399
Thank you, guys.

