1
00:00:00,640 --> 00:00:01,640
Native Web Apps: React, JavaScript and WebAssembly
to rewrite native apps

2
00:00:01,640 --> 00:00:02,640
Florian Rival
PARISS: Okay. How was everyone's lunch?

3
00:00:02,640 --> 00:00:06,339
[ Applause ]
Good. I had a really successful lunch. I finally

4
00:00:06,339 --> 00:00:07,520
beat all the kids to the desserts. I didn't
get any on Monday. So, feeling good. Can we

5
00:00:07,520 --> 00:00:10,690
give a round of applause for our next speaker
speaking on native web apps, Florian Rival.

6
00:00:10,690 --> 00:00:11,690
[ Applause ]
FLORIAN: Hi, everyone. My name is Florian,

7
00:00:11,690 --> 00:00:12,770
I'm working as a software engineer at Google.
And today I want to talk about something that

8
00:00:12,770 --> 00:00:18,340
I really like. It's applications. And when
I say applications, it's any kind of application,

9
00:00:18,340 --> 00:00:23,170
but in particular the ones that allow people
to create things or to do things that they

10
00:00:23,170 --> 00:00:28,730
were not able to do before. So there is something
that I really like. It's video games. That's

11
00:00:28,730 --> 00:00:34,149
why I created GDevelop. It's an open source
and cross platform game engine that anyone

12
00:00:34,149 --> 00:00:41,690
can use to create any kind of games. Why anyone?
It's a visual editor for games where you can

13
00:00:41,690 --> 00:00:49,510
create. And there are some kinds of visual
programming. I will show an example. And anyone

14
00:00:49,510 --> 00:00:55,579
can use it, even those who don't know thousand
create games. And then you can get an HTML

15
00:00:55,579 --> 00:01:03,629
game that you can put on the web. So, here
is what the software used to look like. I

16
00:01:03,629 --> 00:01:12,010
say used to because it's a software that was
created, in C + +, it's a desktop C + + application.

17
00:01:12,010 --> 00:01:17,979
You can see on the right, there's a list of
objects in the game. And in the intermediary

18
00:01:17,979 --> 00:01:27,160
of the game. Is, here it's a platform. And
what we want to do as an example is to have

19
00:01:27,160 --> 00:01:33,630
when the player is stepping button, we want
the button on the platform on the right to

20
00:01:33,630 --> 00:01:40,450
go up in the air. I will show how to do it
using visual programming. And so, here we

21
00:01:40,450 --> 00:01:45,110
go. I go to the events tab and I'm adding
a new event. An event is a condition, an action,

22
00:01:45,110 --> 00:01:53,400
kind of like an if then. I'm adding a new
condition to check if the player is collision

23
00:01:53,400 --> 00:02:00,320
with the tree. And if that's the case, I can
add two actions. The first action would be

24
00:02:00,320 --> 00:02:06,010
to change the animation of the button so it's
going to the state where it's pressed. It's

25
00:02:06,010 --> 00:02:12,430
animation number one. And I'm adding another
action, which is an action to move the platform

26
00:02:12,430 --> 00:02:20,650
up in the air. So, I'm adding to the platform
a false on the Y axis. And now, if I press

27
00:02:20,650 --> 00:02:25,400
play, the game is compiled to demonstrate
and running in the browser. And we can verify

28
00:02:25,400 --> 00:02:30,480
that the button is working. It's kind of simple
for people that don't know how to program

29
00:02:30,480 --> 00:02:38,800
and it's only based on logic. Syntax. So,
a few games have been done with it. So, a

30
00:02:38,800 --> 00:02:48,940
few were working quite well. And the game
with the cat, but at some point I had some

31
00:02:48,940 --> 00:02:55,200
issues. And the editor was getting quite old.
I had lots of cross platform issues. In particular

32
00:02:55,200 --> 00:02:58,991
on macOS and Linux. It wasn't working that
well. And iterating on the software of the

33
00:02:58,991 --> 00:03:07,280
quite slow, C++. And it was limited to old
UI components, and the UX would need some

34
00:03:07,280 --> 00:03:14,720
enhancements. And the entry barrier for new
contributors was quite high. C++, again. So,

35
00:03:14,720 --> 00:03:21,410
it was time for me to react. And I was wondering,
would web technologies help? I have been doing

36
00:03:21,410 --> 00:03:27,170
a lot of React before at work. And I was like,
okay. That's perfect for making complex UI.

37
00:03:27,170 --> 00:03:36,299
I was iterating. Can we have hundreds of elements,
dynamic panels, 2D and 3D visualizations,

38
00:03:36,299 --> 00:03:43,590
and all of the things that make a real application,
you know? Can we make an ambitious application

39
00:03:43,590 --> 00:03:49,140
using React? And the same goes for JavaScript.
It's perfect for most applications. Or is

40
00:03:49,140 --> 00:03:56,170
it really? Can we reuse an existing native
codebase? Should we? Or if we have advanced

41
00:03:56,170 --> 00:04:02,340
situations or computations, what do we do?
Or if we need consistent performance? Still,

42
00:04:02,340 --> 00:04:08,790
let's look at the quick post of GDevelop.
There is the core of the software, composed

43
00:04:08,790 --> 00:04:15,489
of the C++ classes and defining what a game
is, what is an object, and how an event is

44
00:04:15,489 --> 00:04:21,580
composed of conditions and actions. And then
all the tools that are transpiring to the

45
00:04:21,580 --> 00:04:27,230
events to JavaScript that you get a running
game. And on the top of this there was an

46
00:04:27,230 --> 00:04:35,841
interface in C++ using WX widgets. And there
was the interaction with the device. So, my

47
00:04:35,841 --> 00:04:42,490
first idea is, okay, let's replace the interface
with React. Because I have an idea that it

48
00:04:42,490 --> 00:04:47,890
could be better. And in a fortified system,
I could write adapters for Node.js or even

49
00:04:47,890 --> 00:04:57,660
in the browser simulator file system. We could
run this on the JS or a browser or on electrons

50
00:04:57,660 --> 00:05:04,110
so that we have a browser in the JS and you
can package the application. And for the central

51
00:05:04,110 --> 00:05:15,350
part, we could use WebAssembly to expose the
code to the rest of the JavaScript application.

52
00:05:15,350 --> 00:05:23,300
So, a few notes about WebAssembly. It's a
kind of a language that is running in your

53
00:05:23,300 --> 00:05:31,500
browsers. And it's a bit like assembly, meaning
that it's not one that you write to, but what

54
00:05:31,500 --> 00:05:37,130
you're compiling to. And at the end, it's
simply like a language. Browsers are able

55
00:05:37,130 --> 00:05:45,960
to generate really fast execution of any program
that is retaining WebAssembly. And it is running

56
00:05:45,960 --> 00:05:54,600
on actually most recent browsers including
on iOS and Android. So, how do we write WebAssembly?

57
00:05:54,600 --> 00:06:00,241
Well, there was\h the first solution was to
use Emscripten. Which is what I did. It's

58
00:06:00,241 --> 00:06:09,490
a project with a C++ WebAssembly compiler.
It's a C++, running through a compiler, and

59
00:06:09,490 --> 00:06:15,040
translating it to WebAssembly. And there are
solutions for any language you can compile

60
00:06:15,040 --> 00:06:23,260
to WebAssembly. Or even things like AssemblyScript
which allows you to create WebAssembly using

61
00:06:23,260 --> 00:06:29,140
a syntax that is really\h that looks like
TypeScript. So, it's really interesting. In

62
00:06:29,140 --> 00:06:34,700
my case, I have been using Emscripten. And
I will show you the way it works. So, using

63
00:06:34,700 --> 00:06:43,990
Emscripten, you can download it and sort it.
It's pretty easy. And then getting EMCC, the

64
00:06:43,990 --> 00:06:52,590
C++ to WebAssembly compiler. And you can run
it on a C or C++ file. And in my case, as

65
00:06:52,590 --> 00:07:01,320
I have a large codebase, I can replace the
build to chain that was using the compiler,

66
00:07:01,320 --> 00:07:07,250
and instead of at the end having a binary,
I have a WebAssembly. And so, we have the

67
00:07:07,250 --> 00:07:13,810
WebAssembly, which is the C++ codebase compiled
to WebAssembly. And we have to expose the

68
00:07:13,810 --> 00:07:20,400
existing classes in C++ so that we could view
them in JavaScript. So, let's take an example.

69
00:07:20,400 --> 00:07:26,750
For example, we have a class that is an objects
container. So, it's\h think of it as the list

70
00:07:26,750 --> 00:07:31,800
of objects that you've seen. So, we could
have objects and get some objects inside.

71
00:07:31,800 --> 00:07:36,470
And then we can have a layout. It's a bit
like a level, again. Which is iterating from

72
00:07:36,470 --> 00:07:43,250
an objects container so it can have a list
of objects. And there are additional, name,

73
00:07:43,250 --> 00:07:50,880
to change the name. So, also, we have this.
We ought to write bindings. Bindings in my

74
00:07:50,880 --> 00:07:57,980
case I have been using WebIDL. There are a
few ways to write it. But in my case, use\hWebIDL,

75
00:07:57,980 --> 00:08:07,530
we use something that is the interface of
your C++ class. You have to write it for all

76
00:08:07,530 --> 00:08:17,160
the classes in your codebase. And this will
generate new code that will be doing the bridge

77
00:08:17,160 --> 00:08:25,210
between JavaScript and the WebAssembly module.
So, the way it works once you have compiles

78
00:08:25,210 --> 00:08:30,140
the WebAssembly module plus the bindings is
that you have a module that you can instant

79
00:08:30,140 --> 00:08:37,570
ship into the JavaScript engine. So, on the
browser or in the JS. And when it's an instant

80
00:08:37,570 --> 00:08:43,860
change, here it's called GD. You have this
module and you can start creating new classes,

81
00:08:43,860 --> 00:08:52,240
new instances of your classes just like usual
JavaScript. And you can call them and it's

82
00:08:52,240 --> 00:08:57,500
working more or less automatically out of
the box because the primitive types of your

83
00:08:57,500 --> 00:09:02,720
functions are automatically converted. So,
depends on the language that you're using.

84
00:09:02,720 --> 00:09:12,991
C++ or another language. But in my case, C++
and JavaScript are translated to C++. Same

85
00:09:12,991 --> 00:09:19,590
for numbers and for strings. It's also more
or less automatic. So it's quite convenient.

86
00:09:19,590 --> 00:09:26,430
If you are passing objects to the parameters,
then they are converted to a pointer or a

87
00:09:26,430 --> 00:09:37,760
reference in C++. And you can debug using
the input and output stream that's converted

88
00:09:37,760 --> 00:09:44,440
to console.log in JavaScript. With this, we
have something that is running in the browser.

89
00:09:44,440 --> 00:09:50,430
Here is the Chrome debugger. And you can see
on the top, they also output\h it's outputted

90
00:09:50,430 --> 00:09:57,251
by the C++ codebase. It's working. And then
I can create a new object. So, yeah, it's

91
00:09:57,251 --> 00:10:03,530
working. And it's quite nice to have, you
know, with V C++ codebase you have been writing

92
00:10:03,530 --> 00:10:10,140
since a few years. There are a few things
to know. First is the memory management requires

93
00:10:10,140 --> 00:10:14,770
care. Because when you're creating a new object,
it's quite interesting because it's not garbage

94
00:10:14,770 --> 00:10:22,340
collected. We mean that. If I'm looking at
what this layout object is, it's a pointer

95
00:10:22,340 --> 00:10:27,910
to some place in the WebAssembly memory. So,
you can think of the WebAssembly memory as

96
00:10:27,910 --> 00:10:33,410
a huge array that is containing bytes. When
you're creating a new object, it's already

97
00:10:33,410 --> 00:10:39,140
creating some bytes in this memory. Meaning
that if you just drop the reference to the

98
00:10:39,140 --> 00:10:44,650
object in the JavaScript world, the WebAssembly
object will still be living in memory. So,

99
00:10:44,650 --> 00:10:52,620
you have to explicitly call GD, to destroy,
to remove this content from memory. So, in

100
00:10:52,620 --> 00:11:00,820
the case of using React or any component based
framework, if you're creating a framework

101
00:11:00,820 --> 00:11:05,510
when the component is mounted, you have to
remember to delete it or you can use an effect

102
00:11:05,510 --> 00:11:13,350
hook if you're using React. So, know that
the output files are quite large. For GDevelop,

103
00:11:13,350 --> 00:11:21,400
it's at least 3 megabytes when compared to
the WebAssembly module. And honestly, I don't

104
00:11:21,400 --> 00:11:27,860
really care because I'm making a kind of desktop
application, a rich application. So, knowing

105
00:11:27,860 --> 00:11:34,460
that I will package one thing and make it
a few hundred megabytes. 300 megabytes, more

106
00:11:34,460 --> 00:11:42,980
or less. And something else to know, having
a complete test set is really, really useful

107
00:11:42,980 --> 00:11:47,450
because without the kind of heroes that you
will be getting when something is going wrong

108
00:11:47,450 --> 00:11:55,840
in the WebAssembly module. And for example,
you have the wrong type of parameter. Or if

109
00:11:55,840 --> 00:12:02,590
you forgot parameter, then instead of getting
a number of boolean or a pointer in the C++

110
00:12:02,590 --> 00:12:08,350
world, we get undefined which is translated,
I guess, zeros. Everything will be broken.

111
00:12:08,350 --> 00:12:16,080
And same thing if you're using a deleted object.
Trying to iterate on something that was removed

112
00:12:16,080 --> 00:12:21,910
from memory, and it will crush, basic lip.
This being said, we have something that is

113
00:12:21,910 --> 00:12:29,350
working in the browser. So, my next change
was, oh, I can create an interface on top

114
00:12:29,350 --> 00:12:35,570
of it is that as good or even better as the
one that I use to do in the native world using

115
00:12:35,570 --> 00:12:45,080
C++ before. So, let's see how to do it. Again
in my case I was using React. And my change

116
00:12:45,080 --> 00:12:53,890
was to make all of these examples. For example,
context menus, trace objects, lots of forms

117
00:12:53,890 --> 00:13:01,730
and buttons and properties. All of this in\h
in the browser. So, we go through a few buttons.

118
00:13:01,730 --> 00:13:09,770
An example that I have been using in the hope
that it will\h the first advice I have is

119
00:13:09,770 --> 00:13:15,190
to find a component library, material UI,
React Toolbox or Blueprint. These are examples

120
00:13:15,190 --> 00:13:23,410
of React's component libraries. And the things
I was looking at was the extensive list of

121
00:13:23,410 --> 00:13:29,930
high quality components because I don't want
to spend time redoing the basic widgets. I

122
00:13:29,930 --> 00:13:37,830
want to build an application, not to make
a design system. And good theming support

123
00:13:37,830 --> 00:13:45,500
and accessibility. And some good documentation.
Because the world interface will be standing

124
00:13:45,500 --> 00:13:53,140
on this component library. It better be good.
I went with Material UI. It was the library

125
00:13:53,140 --> 00:14:03,440
with the most extensive support. And it was
allowing me to design quickly. And once I

126
00:14:03,440 --> 00:14:09,370
had it, the first thing I had to get was to
display a large list of objects. When they

127
00:14:09,370 --> 00:14:14,980
say large list, in the case of drag and drop,
a large list of objects that are living in

128
00:14:14,980 --> 00:14:22,370
the game and can be a few hundred objects.
So, this originally here was to use categorization.

129
00:14:22,370 --> 00:14:32,080
So, for example, using react virtualized and
react sortable hoc, and you can create a list.

130
00:14:32,080 --> 00:14:39,120
That means that instead of having in the DOM\h
in the browser to have a button for 300 DOM

131
00:14:39,120 --> 00:14:46,880
elements for every object, then you will only
have the object that are on the screen in

132
00:14:46,880 --> 00:14:52,580
the DOM. So, 10 or maybe 20 objects. The way
it works is that instead of having a list

133
00:14:52,580 --> 00:15:00,089
of objects that is just mapping over an array,
you're converting your list to be using the

134
00:15:00,089 --> 00:15:06,280
list component that is referred to by the
list and using this property. And you can

135
00:15:06,280 --> 00:15:10,880
say this is the function that you will call
to identify every line that is to display

136
00:15:10,880 --> 00:15:21,710
on the screen. And then using React sortable
hoc, you can add on top of the list. And you

137
00:15:21,710 --> 00:15:27,090
are using sortable elements and you get a
list that is virtualized and you can reorder

138
00:15:27,090 --> 00:15:40,780
and drag and drop. That was the first way
to get things that\h not\h but working well

139
00:15:40,780 --> 00:15:47,880
even with large lists and big games. And the
next thing is that I wanted to have patterns.

140
00:15:47,880 --> 00:15:54,100
And it was as on the screen. As I'm doing
a game, people want to customize their workspace.

141
00:15:54,100 --> 00:15:59,260
And so, for this I have been using a tiling
window library which is called a react mosaic.

142
00:15:59,260 --> 00:16:06,350
There are a few different libraries like this.
But this is the one I've used and it's\h I

143
00:16:06,350 --> 00:16:16,960
mean, it's working out of the box. So, check
it out. Then I've been trying to remake the

144
00:16:16,960 --> 00:16:24,190
events. It's more or less large trees. A large
trees arrays with events. An event is composed

145
00:16:24,190 --> 00:16:30,930
of conditions and actions. But it can also
have sub events like blocks of code in a traditional

146
00:16:30,930 --> 00:16:36,830
programming language. So, here, again, the
solution was to use a virtualization. Previously

147
00:16:36,830 --> 00:16:45,050
I have been using React sortable tree which
is a library to make a tree of nodes which

148
00:16:45,050 --> 00:16:51,320
you can reorder. And the interesting thing
about this library is it's using React virtualized

149
00:16:51,320 --> 00:17:00,110
under the hood. So, quickly, every node that
you see on the screen here is actually a line

150
00:17:00,110 --> 00:17:08,910
in the list. And the lines that are in between
the node is just a fake scaffolding that is

151
00:17:08,910 --> 00:17:15,480
making like\h that is making the tree look
like a tree and another a list. So, it's a

152
00:17:15,480 --> 00:17:21,600
customized version of what I have been using.
And then at some point I wanted to remake\h

153
00:17:21,600 --> 00:17:28,620
it was the first thing that I did. And at
this moment, I wanted to display the screen

154
00:17:28,620 --> 00:17:35,750
so it can be composed of individual tiles
and objects to be displayed. And at this moment

155
00:17:35,750 --> 00:17:44,100
you can forget the DOM and go to be using
WebGL. Not using WebGL directly, but a library

156
00:17:44,100 --> 00:17:51,060
called Pixi.JS. Which is the 2D library that
I have been using for the game engine. I can

157
00:17:51,060 --> 00:17:58,030
as well use it for the game. And it's super-fast
and easy to use and based more or less on

158
00:17:58,030 --> 00:18:05,291
the Flash API. And they also have options
like Three.js or Phaser if you want something

159
00:18:05,291 --> 00:18:12,600
that looks more like a game engine. Sometimes
you can still rely on the DOM, for example.

160
00:18:12,600 --> 00:18:18,010
Say you have an editor that is displaying
an object, here a spaceship, and you want

161
00:18:18,010 --> 00:18:29,740
to know what is the box for the spaceship?
What I have been doing is using SVG elements

162
00:18:29,740 --> 00:18:39,780
to display this protocol. And using things
like onPointerMove in the DOM, you can drag

163
00:18:39,780 --> 00:18:49,860
and drop. So, you get something\h a pretty
good editor that is very easy to architecture

164
00:18:49,860 --> 00:18:58,310
and to act on because it's all done using
React. And it's enough for what you want to

165
00:18:58,310 --> 00:19:04,140
do. Sometimes things are not fast enough.
So, the first performance that you can have

166
00:19:04,140 --> 00:19:11,100
is that rendering the picture is too slow.
At this point, you can profile the rendering.

167
00:19:11,100 --> 00:19:18,590
Here in the case of React, you can use the
React profiler. And in this case, I had an

168
00:19:18,590 --> 00:19:24,120
interesting problem. When I was opening or
closing a tab, I had to do\h the whole thing

169
00:19:24,120 --> 00:19:31,140
was taking like 1 second to be done. And when
using the profiler, you can see that every\h

170
00:19:31,140 --> 00:19:36,160
it's displaying every component that is re
rendered when you're doing interactions. And

171
00:19:36,160 --> 00:19:43,471
on the graph, the code, is re rendered when
you're doing interactions. And you can see

172
00:19:43,471 --> 00:19:50,240
from right to left I had a whole set of components
that was deploying the project manager. The

173
00:19:50,240 --> 00:19:56,150
project manager, it's a bit like a file explorer.
And this thing was being re rendered. It was

174
00:19:56,150 --> 00:20:06,330
switching from one user when it was written.
So, this was to add some updates or organization

175
00:20:06,330 --> 00:20:11,929
so that it's not re rendered every time you're
doing an interaction. So, basically avoid

176
00:20:11,929 --> 00:20:18,530
re rendering if you don't need to. Something
to note is that make sure that you measure

177
00:20:18,530 --> 00:20:23,020
performance in production. Because in the
case of React, the development build is way

178
00:20:23,020 --> 00:20:28,750
slower than the production build. And something
that's\h I got an issue where I was drag and

179
00:20:28,750 --> 00:20:34,590
dropping things and it was taking like 1 second
again to update. But it was a few minutes.

180
00:20:34,590 --> 00:20:41,160
So, I built it in production. And you can
have an issue with the calls to WebAssembly.

181
00:20:41,160 --> 00:20:48,130
If you have a lot of calls being made, you're
paying the calls to go through the bridge

182
00:20:48,130 --> 00:20:53,990
between JavaScript and WebAssembly every time
you are calling a function. This is a case,

183
00:20:53,990 --> 00:20:59,030
I think, Firefox, at least has been optimizing
this use case. But if, for example, you have

184
00:20:59,030 --> 00:21:05,780
a list of lots of objects and every time you're
mapping on the list, you're calling a function,

185
00:21:05,780 --> 00:21:11,850
at the end, it can add up. It won't be noticeable
in most situations. But something to remember

186
00:21:11,850 --> 00:21:17,770
that sometimes it might be useful to store
in the JavaScript, to cache in the JavaScript

187
00:21:17,770 --> 00:21:24,150
world the results of some computation if you
want to avoid paying the cost to go through

188
00:21:24,150 --> 00:21:31,080
the bridge to do WebAssembly. Sometimes you're
reaching a point where your codebase is growing

189
00:21:31,080 --> 00:21:38,929
a lot. So, a few tips on this. In my case
it was because I did the project, I got more

190
00:21:38,929 --> 00:21:42,960
and more contributors. The first thing I will
tell you is to stick to your components. So,

191
00:21:42,960 --> 00:21:50,220
the idea is that if you have a button that
is showing to open the software, you might

192
00:21:50,220 --> 00:21:55,799
think that's a\h let's change the design of
the button so it's smaller on screen. You

193
00:21:55,799 --> 00:22:03,360
can add a font size that is different. What
I would recommend is to make a help button.

194
00:22:03,360 --> 00:22:09,549
Basically to create components for as much
things as possible. In other words, make a

195
00:22:09,549 --> 00:22:15,790
design system and try to stick to it. Because
once you've been doing this thing, it will

196
00:22:15,790 --> 00:22:23,730
be much faster to build new screens and consistent
screens. Something I don't know is I'm not

197
00:22:23,730 --> 00:22:30,690
doing any unit tests. Sorry. Actually, I do,
but only there is a bit of logic in my components.

198
00:22:30,690 --> 00:22:40,590
And I think it's the case in most\h it's really
where what you are doing that you need tests

199
00:22:40,590 --> 00:22:49,320
for react components. Instead, I'm creating
visual stories. So, using Storybook or React

200
00:22:49,320 --> 00:22:55,090
Styleguidist, you can create stories that
are displaying your components outside of

201
00:22:55,090 --> 00:23:01,860
your application. I found this button to be
faster and way more powerful to first develop

202
00:23:01,860 --> 00:23:07,530
components outside of the application. So,
much faster because rather than having to

203
00:23:07,530 --> 00:23:14,260
load the application and then to navigate
to a screen to see that your changes are right

204
00:23:14,260 --> 00:23:20,880
or not, you just have to run Storybook and
go to the proper story. It's much faster for

205
00:23:20,880 --> 00:23:28,500
development and also for testing. It's not
automatic. But in the future, I'm changing

206
00:23:28,500 --> 00:23:35,290
or updating the UI. Or I'm making changes
on the component, I can quickly open Storybook

207
00:23:35,290 --> 00:23:39,100
and see my component in a different state
and make sure that everything is correct.

208
00:23:39,100 --> 00:23:47,350
It's in particular useful for cases like,
for example, to have the handling, the component

209
00:23:47,350 --> 00:23:53,430
showing something that you have never seen
when you're developing because everything

210
00:23:53,430 --> 00:23:58,870
is going all right. But at least using Storybook,
you can make sure that your components all

211
00:23:58,870 --> 00:24:07,030
have a neutral state that is working. The
next advice would be to use types. Flow or

212
00:24:07,030 --> 00:24:14,000
TypeScript. I have been using flow because
I was more used to it. And the useful things

213
00:24:14,000 --> 00:24:19,640
with types that they will tell you when you
forgot to pass or remove a product or refactoring

214
00:24:19,640 --> 00:24:25,220
something. And help auto completion, avoid
silly mistakes and help document objects.

215
00:24:25,220 --> 00:24:30,610
But not useful when you write code, but when
you're back on a module that you or someone

216
00:24:30,610 --> 00:24:37,640
has wrote a few months ago. In other words,
types are really shining when you or someone

217
00:24:37,640 --> 00:24:43,440
else is coming back and refactoring some parts
of the application. And after a few months,

218
00:24:43,440 --> 00:24:51,530
you are a stranger to your own codebase. So,
this being done, we now have the core of the

219
00:24:51,530 --> 00:24:58,220
software and an interface that is being made
on top of it. And let's see how to package

220
00:24:58,220 --> 00:25:04,090
this. So, we have a few packaging options.
We could make a PWA because WebAssembly is

221
00:25:04,090 --> 00:25:11,169
running in the browser. So, it's not an issue.
I have been using Electron to have access

222
00:25:11,169 --> 00:25:17,320
to the design system. And also people like
to download the application, to own it, in

223
00:25:17,320 --> 00:25:25,590
a way. And having access to the system, you
can avoid making something that is only working

224
00:25:25,590 --> 00:25:32,940
on online. And you can use the software offline.
And in some cases you can even embed the JavaScript

225
00:25:32,940 --> 00:25:38,240
application inside the native application
using Chromium embedded framework. If you

226
00:25:38,240 --> 00:25:46,030
have an application, and you have the manpower
to do it. And my advice would be to build

227
00:25:46,030 --> 00:25:51,890
over the native API as much as you can. So,
for example, I did two versions of the context

228
00:25:51,890 --> 00:25:58,540
menu. One that is using on the left the map
UI context menu, running in a browser. And

229
00:25:58,540 --> 00:26:05,910
on the right, you can seeing the menu using
APIs. So, you have the context menu. And I

230
00:26:05,910 --> 00:26:13,570
won't go through the code. But instead of
renders some material, I can use the UI to

231
00:26:13,570 --> 00:26:21,570
create this context. And this is helpful for
people\h not helpful, but that makes the application

232
00:26:21,570 --> 00:26:30,970
look like a native application. It does not
look web ish. And, yeah. We can know now what's

233
00:26:30,970 --> 00:26:36,740
the result of all of this? Let's take a look.
So, this is a new application. And the demo

234
00:26:36,740 --> 00:26:43,570
I'm doing here is the same as before. I will
be creating a button object with one when

235
00:26:43,570 --> 00:26:49,049
it's pressed and one animation when it's not
pressed. And I will be adding it to the screen

236
00:26:49,049 --> 00:26:55,710
after the button. And doing the same thing
as before with the event. When the player

237
00:26:55,710 --> 00:27:02,320
is stepping on the button that the platform
is there. So, that's the same more or less

238
00:27:02,320 --> 00:27:06,920
interface as before. But all using React WebAssembly
and JavaScript. And here I'm choosing the

239
00:27:06,920 --> 00:27:13,370
player and the button. And there is a condition
between these two objects. Then I'm adding

240
00:27:13,370 --> 00:27:20,940
two actions. The first one is to add a false
so that the platform is going up in the air.

241
00:27:20,940 --> 00:27:26,200
And then another direction so that the button
is going to the state where it's pressed.

242
00:27:26,200 --> 00:27:33,450
So, changing the animation. That's how you
do it. And when that will be pressing play,

243
00:27:33,450 --> 00:27:39,990
same as before, the WebAssembly module is
going to JavaScript by putting files in and

244
00:27:39,990 --> 00:27:47,080
you get a working game in the browser. Yeah.
That's working. In my definition, as a developer,

245
00:27:47,080 --> 00:27:53,429
it's working. But what do our users say? I
will be honest. The first feedbacks were really

246
00:27:53,429 --> 00:28:02,300
bad because\h not because it wasn't the application
or built using React or it was using web technologies,

247
00:28:02,300 --> 00:28:08,710
it was just because the new version was lacking
a lot of features from the previous one. Even

248
00:28:08,710 --> 00:28:14,840
if I did reuse the existing codebase, I had
to remake the whole interface around it. So,

249
00:28:14,840 --> 00:28:20,530
of course I had started a few things and adding
new things. So, it was lacking features. But

250
00:28:20,530 --> 00:28:26,940
after a few year D a few years. After one
year, okay, there is a real difference. And

251
00:28:26,940 --> 00:28:31,010
it's easier to use and actually I can be more
productive using the new version rather than

252
00:28:31,010 --> 00:28:38,230
the old one. And it works. It works so well
it's better than the native application. Why

253
00:28:38,230 --> 00:28:45,740
better? I can do ultrafast iteration on it,
I can test super easily. I have a near perfect

254
00:28:45,740 --> 00:28:52,600
cross platform and I have a faster startup
time. It's faster. Autoupdates, more contributors.

255
00:28:52,600 --> 00:29:00,190
We can try it online and we can even run it
on phones. I mean, running it on a phone.

256
00:29:00,190 --> 00:29:05,059
It's not made for a phone so you cannot really
use it properly\h I mean, you can use it properly.

257
00:29:05,059 --> 00:29:12,510
But it will need some enhancement to do it.
But my point is that it's working almost everywhere.

258
00:29:12,510 --> 00:29:22,460
So, this was to show that actually we can
do things using React, WebAssembly, JavaScript

259
00:29:22,460 --> 00:29:28,570
and all of this new frontend framework can
do things that are not only as good as what

260
00:29:28,570 --> 00:29:32,690
we used to do in the native world, but we
can be more ambitious. Thank you.

