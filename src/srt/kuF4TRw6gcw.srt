1
00:00:07,730 --> 00:00:11,460

my name is John David Dalton and I've

2
00:00:11,460 --> 00:00:12,870
been working on a framework for about

3
00:00:12,870 --> 00:00:16,740
two years now at night in my spare time

4
00:00:16,740 --> 00:00:19,560
and today I'm going to be talking about

5
00:00:19,560 --> 00:00:21,570
some of the innovative solutions I've

6
00:00:21,570 --> 00:00:24,660
done to address common problems with

7
00:00:24,660 --> 00:00:28,529
JavaScript libraries and I'll get into

8
00:00:28,529 --> 00:00:32,250
that but before I do I want some crowd

9
00:00:32,250 --> 00:00:34,770
participation if you're familiar with

10
00:00:34,770 --> 00:00:37,500
jas comp there's a big pirate theme I

11
00:00:37,500 --> 00:00:39,300
want you guys if you see something cool

12
00:00:39,300 --> 00:00:42,629
I want to hear an offer and if you if

13
00:00:42,629 --> 00:00:44,879
you don't like something don't say

14
00:00:44,879 --> 00:00:47,610
something yeah so to help with that I'm

15
00:00:47,610 --> 00:00:49,079
going to go through a series of slides

16
00:00:49,079 --> 00:00:51,059
and if you see something cool I want to

17
00:00:51,059 --> 00:00:55,199
hear it all I'm allowed all and so let's

18
00:00:55,199 --> 00:01:03,570
uh let's do this all right favorite jas

19
00:01:03,570 --> 00:01:07,770
right there so here we go so there's an

20
00:01:07,770 --> 00:01:12,840
ice cream cone it's spilt there's a flat

21
00:01:12,840 --> 00:01:16,890
tire no one no one likes that right no

22
00:01:16,890 --> 00:01:22,740
one likes that but what about bacon all

23
00:01:22,740 --> 00:01:24,509
right so then there's some wilted

24
00:01:24,509 --> 00:01:28,170
flowers nothing right a shoe with a

25
00:01:28,170 --> 00:01:30,840
ghetto lace you don't you don't want

26
00:01:30,840 --> 00:01:35,610
that oh but what's this

27
00:01:35,620 --> 00:01:39,340
alright so let's try it again at a chew

28
00:01:39,340 --> 00:01:44,530
toy yeah a diluted addy saturated sunset

29
00:01:44,530 --> 00:01:46,840
there's nothing good about that or what

30
00:01:46,840 --> 00:01:50,910
about fuchsia is spelled with bacon oh

31
00:01:50,910 --> 00:01:57,460
oh what what what about plus beer okay

32
00:01:57,460 --> 00:01:59,260
alright so now I'm going to get into

33
00:01:59,260 --> 00:02:00,940
some of some of the innovative things

34
00:02:00,940 --> 00:02:04,570
that I've done so so here we go there's

35
00:02:04,570 --> 00:02:07,120
the yaar alright so I've been working on

36
00:02:07,120 --> 00:02:09,700
this framework for two years now in my

37
00:02:09,700 --> 00:02:14,280
spare time at night in dark rooms and

38
00:02:14,280 --> 00:02:18,790
yeah and in over those two years I've

39
00:02:18,790 --> 00:02:21,400
come up with let's see I've come up with

40
00:02:21,400 --> 00:02:23,770
two features that I want to talk about

41
00:02:23,770 --> 00:02:27,580
today just to two features all right but

42
00:02:27,580 --> 00:02:29,320
maybe maybe it's a little bit more than

43
00:02:29,320 --> 00:02:34,270
that maybe it's maybe it's 50 plus

44
00:02:34,270 --> 00:02:35,380
features that I'm going to talk about

45
00:02:35,380 --> 00:02:39,300
today all right and that gets a what

46
00:02:39,300 --> 00:02:44,640
your 50 plus features all right about

47
00:02:44,640 --> 00:02:48,310
not so much there alright so one of the

48
00:02:48,310 --> 00:02:50,580
first things I addressed is a script

49
00:02:50,580 --> 00:02:54,340
synchronous script injection i forked

50
00:02:54,340 --> 00:02:56,950
from prototype js2 years ago and I've

51
00:02:56,950 --> 00:03:00,190
been moving it forward since then as few

52
00:03:00,190 --> 00:03:03,070
cas and so one one issue I've addressed

53
00:03:03,070 --> 00:03:05,650
is synchronous script injection and what

54
00:03:05,650 --> 00:03:07,959
I do there is whenever you insert a

55
00:03:07,959 --> 00:03:10,239
script via like the update method where

56
00:03:10,239 --> 00:03:12,850
you use inner HTML or HTML and you

57
00:03:12,850 --> 00:03:14,830
include script tags and your code you

58
00:03:14,830 --> 00:03:18,459
want them to execute as you insert them

59
00:03:18,459 --> 00:03:21,280
which is how jquery does this and and

60
00:03:21,280 --> 00:03:23,080
some other libraries and so I came up

61
00:03:23,080 --> 00:03:26,680
with a way to insert script elements

62
00:03:26,680 --> 00:03:28,180
into the dome and when you when you do

63
00:03:28,180 --> 00:03:30,610
this you have to feed your test and so

64
00:03:30,610 --> 00:03:33,010
there's various feature testings that

65
00:03:33,010 --> 00:03:36,430
you have to do like for example IE will

66
00:03:36,430 --> 00:03:38,470
allow you to set the source of a script

67
00:03:38,470 --> 00:03:40,630
element over and over again and continue

68
00:03:40,630 --> 00:03:44,109
to update the code and then firefox may

69
00:03:44,109 --> 00:03:45,380
not allow you to do

70
00:03:45,380 --> 00:03:50,030
that but it will allow you to remove it

71
00:03:50,030 --> 00:03:51,500
from the script and then insert it back

72
00:03:51,500 --> 00:03:52,850
in and so there's all these variations

73
00:03:52,850 --> 00:03:54,950
and I have it to where now you can

74
00:03:54,950 --> 00:03:56,780
insert script elements directly into the

75
00:03:56,780 --> 00:03:58,910
code and they'll execute as you insert

76
00:03:58,910 --> 00:04:00,980
them and on top of that something that

77
00:04:00,980 --> 00:04:04,580
jQuery doesn't address or prototype is

78
00:04:04,580 --> 00:04:05,900
that it actually leaves the script

79
00:04:05,900 --> 00:04:07,580
element in the source so as you're

80
00:04:07,580 --> 00:04:09,770
updating HTML um it doesn't magically

81
00:04:09,770 --> 00:04:11,600
strip that away you can actually access

82
00:04:11,600 --> 00:04:13,190
the script element just like any other

83
00:04:13,190 --> 00:04:15,590
element a lot of libraries remove that

84
00:04:15,590 --> 00:04:18,739
because of how hard it is to get be able

85
00:04:18,739 --> 00:04:20,330
to track whenever it's been written to

86
00:04:20,330 --> 00:04:21,830
and whenever it's been set but I handle

87
00:04:21,830 --> 00:04:26,050
all of that so that's script injection I

88
00:04:26,050 --> 00:04:30,170
have solved global a vowel with fused

89
00:04:30,170 --> 00:04:33,200
run and what's neat if you use jQuery

90
00:04:33,200 --> 00:04:34,610
you know they've got like a global eval

91
00:04:34,610 --> 00:04:37,070
solution they tie it into their Ajax

92
00:04:37,070 --> 00:04:39,590
methods and things like that prototype

93
00:04:39,590 --> 00:04:43,310
has a Val scripts method and I'm sure

94
00:04:43,310 --> 00:04:45,740
Domo tools has something similar but

95
00:04:45,740 --> 00:04:47,600
what's unique about this and I take it a

96
00:04:47,600 --> 00:04:50,270
step further than jQuery or prototype is

97
00:04:50,270 --> 00:04:55,010
that you're able to execute code and get

98
00:04:55,010 --> 00:04:57,080
the result back so it's just like a

99
00:04:57,080 --> 00:04:59,300
normal eval but it sits on the global

100
00:04:59,300 --> 00:05:01,880
the global scope so the window and

101
00:05:01,880 --> 00:05:03,260
what's also cool is you can send a

102
00:05:03,260 --> 00:05:05,570
second parameter of an iframe and

103
00:05:05,570 --> 00:05:08,300
execute global code in the iframe and

104
00:05:08,300 --> 00:05:09,890
it's it's awesome because then you're

105
00:05:09,890 --> 00:05:11,570
also able to capture that result to

106
00:05:11,570 --> 00:05:12,740
which is something you haven't been able

107
00:05:12,740 --> 00:05:15,530
to do in jQuery or or prototype or

108
00:05:15,530 --> 00:05:18,530
mootools and I guess I should explain

109
00:05:18,530 --> 00:05:21,200
when I mentioned jquery prototype remove

110
00:05:21,200 --> 00:05:25,220
tools fuse j/s is a collection of the

111
00:05:25,220 --> 00:05:27,530
good parts of these existing frameworks

112
00:05:27,530 --> 00:05:30,260
it's a fuse of their techniques and

113
00:05:30,260 --> 00:05:33,470
ideas and so what I've done is I've

114
00:05:33,470 --> 00:05:35,090
looked at these various frameworks and

115
00:05:35,090 --> 00:05:37,070
looked at how they solve these solutions

116
00:05:37,070 --> 00:05:40,640
are these problems and try to pick and

117
00:05:40,640 --> 00:05:42,200
choose the best parts of them and come

118
00:05:42,200 --> 00:05:44,750
up with a better a better solution so

119
00:05:44,750 --> 00:05:49,460
there's global eval something I do is I

120
00:05:49,460 --> 00:05:52,220
work across context like like I frames

121
00:05:52,220 --> 00:05:54,590
so you don't have to have the framework

122
00:05:54,590 --> 00:05:57,110
loaded into the iframe

123
00:05:57,110 --> 00:05:58,850
be able to manipulate Dom elements in

124
00:05:58,850 --> 00:06:00,830
that iframe you're able to pass a

125
00:06:00,830 --> 00:06:04,160
context into like the fuse method which

126
00:06:04,160 --> 00:06:06,230
is the same as like a dollar sign method

127
00:06:06,230 --> 00:06:09,350
and then you're able to work with

128
00:06:09,350 --> 00:06:11,540
iframes in foreign documents without

129
00:06:11,540 --> 00:06:13,130
having to have the framework actually

130
00:06:13,130 --> 00:06:15,200
loaded in that other document so you're

131
00:06:15,200 --> 00:06:19,790
able to pass contexts I do feature

132
00:06:19,790 --> 00:06:22,040
detection for XHTML supports which means

133
00:06:22,040 --> 00:06:24,500
i don't use inner HTML if i don't have

134
00:06:24,500 --> 00:06:27,620
to i check to see if it's supported by

135
00:06:27,620 --> 00:06:30,710
running various tests and some of those

136
00:06:30,710 --> 00:06:32,660
tests are actually going to be donated

137
00:06:32,660 --> 00:06:36,710
to Peter Higgins has j s which is a he's

138
00:06:36,710 --> 00:06:39,710
trying to standardize a feature

139
00:06:39,710 --> 00:06:42,890
detection javascript low-level

140
00:06:42,890 --> 00:06:44,990
javascript that frameworks can share and

141
00:06:44,990 --> 00:06:46,490
use so we're not all running over the

142
00:06:46,490 --> 00:06:48,560
same feature test because jquery does

143
00:06:48,560 --> 00:06:50,900
feature tests i do feature test fuse jss

144
00:06:50,900 --> 00:06:53,210
feature tests and yui probably does some

145
00:06:53,210 --> 00:06:55,730
feature tests and so instead of us keep

146
00:06:55,730 --> 00:06:57,260
repeating things we want to share that

147
00:06:57,260 --> 00:06:59,900
stuff and so I support testing inner

148
00:06:59,900 --> 00:07:05,420
HTML and XHTML support something else

149
00:07:05,420 --> 00:07:07,760
I've done is the methods / tag and this

150
00:07:07,760 --> 00:07:09,410
is a really unique feature that you know

151
00:07:09,410 --> 00:07:11,570
prototype has this too and it's

152
00:07:11,570 --> 00:07:12,860
something that jQuery doesn't doesn't

153
00:07:12,860 --> 00:07:15,020
have for being dom centric and that's

154
00:07:15,020 --> 00:07:17,510
being able to give specific elements

155
00:07:17,510 --> 00:07:19,730
methods so you can have an image element

156
00:07:19,730 --> 00:07:21,260
and give it a refresh method or you can

157
00:07:21,260 --> 00:07:22,430
have an input element and give it a

158
00:07:22,430 --> 00:07:26,210
validate method on the element but

159
00:07:26,210 --> 00:07:28,700
because I don't extend the native Dom

160
00:07:28,700 --> 00:07:31,490
elements i use wrappers i'm able to

161
00:07:31,490 --> 00:07:35,330
simulate the the Dom object structure so

162
00:07:35,330 --> 00:07:40,340
for example I have fuse Dom node element

163
00:07:40,340 --> 00:07:45,350
dot HTML element dot HTML div element

164
00:07:45,350 --> 00:07:47,120
and so on it just keeps going and going

165
00:07:47,120 --> 00:07:48,800
and going and you're able to assign

166
00:07:48,800 --> 00:07:53,450
specific methods to various tags so I've

167
00:07:53,450 --> 00:07:57,480
got that

168
00:07:57,490 --> 00:07:59,800
the methods except fragments and text

169
00:07:59,800 --> 00:08:03,220
nodes this is something i think jquery

170
00:08:03,220 --> 00:08:05,800
has started to do in prototype lacks at

171
00:08:05,800 --> 00:08:07,810
the moment but you're able to actually

172
00:08:07,810 --> 00:08:10,240
pass dom fragments and text nodes into

173
00:08:10,240 --> 00:08:12,669
like the update method and as you know

174
00:08:12,669 --> 00:08:14,259
working with fragments allows you to

175
00:08:14,259 --> 00:08:16,690
increase your speed of injection and and

176
00:08:16,690 --> 00:08:19,270
and managing nodes all at once because

177
00:08:19,270 --> 00:08:21,069
instead of doing individual opinions you

178
00:08:21,069 --> 00:08:23,770
can just append one fragment with all of

179
00:08:23,770 --> 00:08:25,000
your your nodes in there and then the

180
00:08:25,000 --> 00:08:26,470
fragment is able to be reused and

181
00:08:26,470 --> 00:08:30,190
recycled so I accept fragments and text

182
00:08:30,190 --> 00:08:34,599
notes I do event delegation with event

183
00:08:34,599 --> 00:08:38,649
bubbling if you've used jquery you know

184
00:08:38,649 --> 00:08:43,839
that you're able to bubble in on events

185
00:08:43,839 --> 00:08:45,430
that normally don't work cross browser

186
00:08:45,430 --> 00:08:48,790
like submit reset and change and so i

187
00:08:48,790 --> 00:08:51,910
found a way to do this also with blur

188
00:08:51,910 --> 00:08:54,610
and a focus and i found a way to do this

189
00:08:54,610 --> 00:08:56,500
that doesn't require all the work that

190
00:08:56,500 --> 00:09:00,190
jquery does basically when jquery does

191
00:09:00,190 --> 00:09:02,890
event delegation with bubbling they try

192
00:09:02,890 --> 00:09:04,810
to guess what you're doing they say well

193
00:09:04,810 --> 00:09:07,209
did you do key up did you press enter

194
00:09:07,209 --> 00:09:09,160
does this really change and it tries to

195
00:09:09,160 --> 00:09:11,829
compare the last value and the logic is

196
00:09:11,829 --> 00:09:15,100
just really thick and very complex and

197
00:09:15,100 --> 00:09:17,770
it's it's it's not a stable because it's

198
00:09:17,770 --> 00:09:19,060
trying to guess something instead of

199
00:09:19,060 --> 00:09:20,800
just knowing something actually happened

200
00:09:20,800 --> 00:09:24,100
and so how what I do is I break it down

201
00:09:24,100 --> 00:09:27,640
into a different technique and this is

202
00:09:27,640 --> 00:09:28,930
I'm going to try to explain this with

203
00:09:28,930 --> 00:09:31,779
hand gestures so it's a lot easier than

204
00:09:31,779 --> 00:09:35,709
like code because it's crazy what you do

205
00:09:35,709 --> 00:09:38,020
is you you have a parent element when

206
00:09:38,020 --> 00:09:39,339
you're delegating does everyone know

207
00:09:39,339 --> 00:09:46,240
about event delegation no yes are ok ok

208
00:09:46,240 --> 00:09:48,160
ok good so you know you have a parent

209
00:09:48,160 --> 00:09:50,020
element and the but the event bubbles up

210
00:09:50,020 --> 00:09:51,279
to the parent element from the child

211
00:09:51,279 --> 00:09:53,470
element all right well what I do is I

212
00:09:53,470 --> 00:09:56,170
attach a watch here a watcher on the

213
00:09:56,170 --> 00:09:58,570
parent element and basically it's it's

214
00:09:58,570 --> 00:10:01,240
two types of events one is for IE and

215
00:10:01,240 --> 00:10:04,660
one is for modern browsers well I guess

216
00:10:04,660 --> 00:10:07,329
ie9 but and so what this does is on IE

217
00:10:07,329 --> 00:10:09,190
it uses an event called on before

218
00:10:09,190 --> 00:10:09,939
activate

219
00:10:09,939 --> 00:10:11,829
which fires before any other event and

220
00:10:11,829 --> 00:10:14,470
for the other browsers I use focus with

221
00:10:14,470 --> 00:10:16,869
a capture face so it's it's triggered

222
00:10:16,869 --> 00:10:19,749
before the other bubbling events and

223
00:10:19,749 --> 00:10:22,089
what I do there is I inspect the event

224
00:10:22,089 --> 00:10:23,859
target so the element that you're just

225
00:10:23,859 --> 00:10:25,329
about to interact with our that you've

226
00:10:25,329 --> 00:10:27,249
just interacted with either clicking on

227
00:10:27,249 --> 00:10:29,709
it or about to change something or

228
00:10:29,709 --> 00:10:32,289
submit something and when you do that it

229
00:10:32,289 --> 00:10:34,479
goes and it says hey is this element a

230
00:10:34,479 --> 00:10:36,159
problem element does this element have

231
00:10:36,159 --> 00:10:38,829
events that need to bubble but don't

232
00:10:38,829 --> 00:10:41,229
bubble and it goes yes and so what I do

233
00:10:41,229 --> 00:10:44,349
is I then flag the event system and tell

234
00:10:44,349 --> 00:10:46,689
it to manually bubble whenever that

235
00:10:46,689 --> 00:10:48,759
event is triggered and I if that element

236
00:10:48,759 --> 00:10:51,039
if that target doesn't have a dispatcher

237
00:10:51,039 --> 00:10:52,989
on it or a mechanism to trigger those

238
00:10:52,989 --> 00:10:55,779
events I add one listener to it and then

239
00:10:55,779 --> 00:10:57,669
whenever it's triggered it knows to

240
00:10:57,669 --> 00:10:59,679
manually bubble afterwards so it's not

241
00:10:59,679 --> 00:11:01,599
guessing that something happened it

242
00:11:01,599 --> 00:11:03,579
actually responds to the real event that

243
00:11:03,579 --> 00:11:05,019
happened and then just tells the event

244
00:11:05,019 --> 00:11:07,509
system to simulate bubbling so it fixes

245
00:11:07,509 --> 00:11:09,339
the bubbling issue without having to do

246
00:11:09,339 --> 00:11:11,889
a lot of guessing and so you get a lot

247
00:11:11,889 --> 00:11:16,479
smaller code and it works it just works

248
00:11:16,479 --> 00:11:18,639
without all these complex conditions and

249
00:11:18,639 --> 00:11:20,259
like race conditions about click and

250
00:11:20,259 --> 00:11:22,899
change and all of that so that's event

251
00:11:22,899 --> 00:11:27,970
delegation with bubble I support on what

252
00:11:27,970 --> 00:11:31,419
is this I support clone with more robust

253
00:11:31,419 --> 00:11:35,409
options so mootools jQuery prototype all

254
00:11:35,409 --> 00:11:38,199
do element cloning and what cloning

255
00:11:38,199 --> 00:11:40,389
allows you to do is take an element and

256
00:11:40,389 --> 00:11:42,939
basically clone it and copy all of its

257
00:11:42,939 --> 00:11:45,039
children if you want you can use it's

258
00:11:45,039 --> 00:11:47,589
called a deep clone but then on top of

259
00:11:47,589 --> 00:11:49,269
that there's cross browser issues with

260
00:11:49,269 --> 00:11:51,639
like ie which copies over the events too

261
00:11:51,639 --> 00:11:54,220
and you don't want that necessarily so

262
00:11:54,220 --> 00:11:56,169
what jQuery does is they allow you to

263
00:11:56,169 --> 00:11:58,209
say well no don't copy the events or do

264
00:11:58,209 --> 00:12:00,069
copy the events but I take it a step

265
00:12:00,069 --> 00:12:03,009
further and I say that you can copy the

266
00:12:03,009 --> 00:12:05,619
events you can copy the data which is

267
00:12:05,619 --> 00:12:07,359
the data per element if you've used the

268
00:12:07,359 --> 00:12:08,799
jQuery data method you know you can

269
00:12:08,799 --> 00:12:10,809
store data per element so you can clone

270
00:12:10,809 --> 00:12:12,819
the data but then you can also tell it

271
00:12:12,819 --> 00:12:15,429
to exclude certain attributes so let's

272
00:12:15,429 --> 00:12:17,499
say your cloning a chunk of elements but

273
00:12:17,499 --> 00:12:19,239
you don't want to clone their IDs

274
00:12:19,239 --> 00:12:21,279
because IDs are unique and so if you're

275
00:12:21,279 --> 00:12:22,400
about to inject those and

276
00:12:22,400 --> 00:12:24,380
to another chunk of your HTML you don't

277
00:12:24,380 --> 00:12:25,910
want to have duplicate IDs you can tell

278
00:12:25,910 --> 00:12:28,130
it to exclude specific IDs and that's

279
00:12:28,130 --> 00:12:30,710
taken from mootools so I've combined the

280
00:12:30,710 --> 00:12:32,300
mootools approach with the jQuery

281
00:12:32,300 --> 00:12:35,090
approach to get a better more robust

282
00:12:35,090 --> 00:12:39,100
option there so that's element climbing

283
00:12:39,100 --> 00:12:41,660
ok and I have what's if you'll notice

284
00:12:41,660 --> 00:12:44,750
this is fused object dot clone instead

285
00:12:44,750 --> 00:12:47,600
of window object clone and that's

286
00:12:47,600 --> 00:12:49,310
because I use what's called sandbox

287
00:12:49,310 --> 00:12:52,370
natives I gave a little talk about this

288
00:12:52,370 --> 00:12:55,610
at j s conf in april i also have slides

289
00:12:55,610 --> 00:12:58,430
up that i'll be linking to at the end of

290
00:12:58,430 --> 00:12:59,810
the presentation so you can get like

291
00:12:59,810 --> 00:13:01,970
screencast about sandbox natives and how

292
00:13:01,970 --> 00:13:03,800
they work but basically what it allows

293
00:13:03,800 --> 00:13:05,690
me to do is have multiple instances of

294
00:13:05,690 --> 00:13:09,470
native constructors on a page so i can

295
00:13:09,470 --> 00:13:11,630
extend those native constructors without

296
00:13:11,630 --> 00:13:13,760
dealing with the window object or window

297
00:13:13,760 --> 00:13:15,950
array or window dot string or date or

298
00:13:15,950 --> 00:13:17,530
math or you know or all of these things

299
00:13:17,530 --> 00:13:20,810
and so it for the in this example i'm

300
00:13:20,810 --> 00:13:24,260
actually extending the another instance

301
00:13:24,260 --> 00:13:25,940
of the object constructed there and

302
00:13:25,940 --> 00:13:28,220
giving it a clone method but what's nice

303
00:13:28,220 --> 00:13:30,770
about this is that it also clones other

304
00:13:30,770 --> 00:13:32,780
objects like arrays and dates and reg

305
00:13:32,780 --> 00:13:35,030
axes which some of them some other

306
00:13:35,030 --> 00:13:36,440
frameworks don't do that and so I've

307
00:13:36,440 --> 00:13:38,950
gone and taken it a step further and

308
00:13:38,950 --> 00:13:42,590
given at that also I address issues with

309
00:13:42,590 --> 00:13:44,450
for in and cross browser issues with

310
00:13:44,450 --> 00:13:46,970
that IE has issues where it may not

311
00:13:46,970 --> 00:13:51,320
iterate over shadowed properties of the

312
00:13:51,320 --> 00:13:53,630
of the better exists on the prototype so

313
00:13:53,630 --> 00:13:55,040
like if you if you have a two-string

314
00:13:55,040 --> 00:13:57,440
method on your object whenever you do a

315
00:13:57,440 --> 00:13:59,270
four in it's not going to see that so I

316
00:13:59,270 --> 00:14:00,950
address cross browser issues with that

317
00:14:00,950 --> 00:14:02,840
because there's also bugs with Safari

318
00:14:02,840 --> 00:14:07,730
and other issues there so I I handle all

319
00:14:07,730 --> 00:14:10,480
of that for you so you can do a very

320
00:14:10,480 --> 00:14:13,640
accurate each in that which goes over

321
00:14:13,640 --> 00:14:18,380
each and every own property of a object

322
00:14:18,380 --> 00:14:21,170
so if it's if it's their own property it

323
00:14:21,170 --> 00:14:22,610
will literate over that in the for in

324
00:14:22,610 --> 00:14:27,560
loop all right I also do I took a little

325
00:14:27,560 --> 00:14:29,900
bit of stuff from mootools here and I

326
00:14:29,900 --> 00:14:30,499
have

327
00:14:30,499 --> 00:14:33,709
class mix-ins basically they're like

328
00:14:33,709 --> 00:14:36,919
plugins or extending the prototype

329
00:14:36,919 --> 00:14:40,809
except they don't add in the super sugar

330
00:14:40,809 --> 00:14:42,979
and they're able to be passed around

331
00:14:42,979 --> 00:14:46,459
from class to class and mixing them in

332
00:14:46,459 --> 00:14:49,969
for example I use class a class mixing

333
00:14:49,969 --> 00:14:53,709
for events for classes so your your

334
00:14:53,709 --> 00:14:57,289
class sugar can have and observe and

335
00:14:57,289 --> 00:14:59,809
stop observing on your your your

336
00:14:59,809 --> 00:15:01,669
constructs for like your factory method

337
00:15:01,669 --> 00:15:04,519
or your your your widget that you have

338
00:15:04,519 --> 00:15:05,989
in your page you can you can trigger

339
00:15:05,989 --> 00:15:08,299
events for them for your classes so

340
00:15:08,299 --> 00:15:11,209
that's mix-ins I also do which leads

341
00:15:11,209 --> 00:15:13,429
into class events and then here's

342
00:15:13,429 --> 00:15:14,509
something that's that's really neat

343
00:15:14,509 --> 00:15:17,539
debug mode with that allows errors

344
00:15:17,539 --> 00:15:19,929
without halting the event handler loops

345
00:15:19,929 --> 00:15:22,819
crockford talked about the event loop

346
00:15:22,819 --> 00:15:24,649
and one of his slides and I noticed it

347
00:15:24,649 --> 00:15:26,119
was that he said that you can have a

348
00:15:26,119 --> 00:15:28,519
chunk of code fail and it won't stop the

349
00:15:28,519 --> 00:15:30,499
rest of your stuff from from executing

350
00:15:30,499 --> 00:15:32,929
and that's true in a in a browser

351
00:15:32,929 --> 00:15:35,569
whenever you have event handlers if one

352
00:15:35,569 --> 00:15:37,729
air is it will still execute the next

353
00:15:37,729 --> 00:15:41,689
one in line and so frameworks that kind

354
00:15:41,689 --> 00:15:43,699
of man handle this and take over this

355
00:15:43,699 --> 00:15:47,329
this the the event execution will

356
00:15:47,329 --> 00:15:49,009
actually go through there in a for loop

357
00:15:49,009 --> 00:15:51,529
and if it errors it will actually fail

358
00:15:51,529 --> 00:15:53,119
instantly and so you lose that

359
00:15:53,119 --> 00:15:56,419
relationship jquery does this mootools

360
00:15:56,419 --> 00:15:59,599
does this um it's some people say well

361
00:15:59,599 --> 00:16:01,549
if it errors you know I it's best that I

362
00:16:01,549 --> 00:16:03,879
know about it but if you're picky I've

363
00:16:03,879 --> 00:16:07,329
put in a mode a debug mode so if you put

364
00:16:07,329 --> 00:16:10,879
fuse underscore debug in the URL and

365
00:16:10,879 --> 00:16:12,259
there's also a variation in the source

366
00:16:12,259 --> 00:16:14,899
tag it will run in debug mode and that

367
00:16:14,899 --> 00:16:16,759
means that that gives me the potential

368
00:16:16,759 --> 00:16:19,729
to later give you errors and error

369
00:16:19,729 --> 00:16:20,929
messages and things like that in the

370
00:16:20,929 --> 00:16:23,029
code but what it also does is it allows

371
00:16:23,029 --> 00:16:25,669
me to run a switch modes in my event

372
00:16:25,669 --> 00:16:28,099
handler loops and actually use script

373
00:16:28,099 --> 00:16:30,949
injection to create a different context

374
00:16:30,949 --> 00:16:33,859
so I can actually execute these handlers

375
00:16:33,859 --> 00:16:35,719
in a for loop and if it fails it doesn't

376
00:16:35,719 --> 00:16:37,609
stop the for loop from going on and it

377
00:16:37,609 --> 00:16:39,470
gives you accurate line numbers for your

378
00:16:39,470 --> 00:16:41,419
error messages so that's that's really

379
00:16:41,419 --> 00:16:42,130
really

380
00:16:42,130 --> 00:16:44,380
cool i geeked out over that one all

381
00:16:44,380 --> 00:16:47,890
right all Ajax ready states are

382
00:16:47,890 --> 00:16:51,250
guaranteed to be hit if you if you run

383
00:16:51,250 --> 00:16:52,660
through some of the documentation on

384
00:16:52,660 --> 00:16:54,820
these frameworks they'll say that you

385
00:16:54,820 --> 00:16:58,330
know like some some of the earlier ready

386
00:16:58,330 --> 00:17:01,390
states in an AJAX request may or may not

387
00:17:01,390 --> 00:17:04,360
be hit what I've done is I've taken over

388
00:17:04,360 --> 00:17:07,930
that and basically ensure that if if

389
00:17:07,930 --> 00:17:10,720
ready state like three was hit then you

390
00:17:10,720 --> 00:17:12,550
know one and two would also be so you'll

391
00:17:12,550 --> 00:17:13,930
it's guaranteed to hit every single

392
00:17:13,930 --> 00:17:18,310
ready state in an AJAX request it also

393
00:17:18,310 --> 00:17:21,189
observed because I have because my Ajax

394
00:17:21,189 --> 00:17:24,069
calls are a wrapper around this stuff

395
00:17:24,069 --> 00:17:26,380
it's it's using the the class sugar and

396
00:17:26,380 --> 00:17:28,510
because it uses the class sugar i use

397
00:17:28,510 --> 00:17:30,910
the event mix-ins and so the event

398
00:17:30,910 --> 00:17:32,620
mix-ins allow me to have ajax event

399
00:17:32,620 --> 00:17:39,340
observers for the Ajax requests if you

400
00:17:39,340 --> 00:17:40,900
see something that's marked with a

401
00:17:40,900 --> 00:17:44,710
asterisk that means that it's King X

402
00:17:44,710 --> 00:17:46,150
approved I don't know how many people

403
00:17:46,150 --> 00:17:49,330
know King X from Twitter how about an R

404
00:17:49,330 --> 00:17:53,050
for that all right so it's khang x

405
00:17:53,050 --> 00:17:55,090
approved i gave him a preview of this

406
00:17:55,090 --> 00:17:57,520
and if you like something you went ahead

407
00:17:57,520 --> 00:18:00,520
and put a little notch there so ajax on

408
00:18:00,520 --> 00:18:02,680
timeout I believe jquery allows you to

409
00:18:02,680 --> 00:18:04,330
do this basically if your Ajax requests

410
00:18:04,330 --> 00:18:06,760
times out you can put a call back and it

411
00:18:06,760 --> 00:18:08,380
will trigger that so you're able to do

412
00:18:08,380 --> 00:18:11,590
something so I like that about jQuery

413
00:18:11,590 --> 00:18:15,130
and so I decided to take that also i do

414
00:18:15,130 --> 00:18:17,560
on the board and i have an abort method

415
00:18:17,560 --> 00:18:20,530
so if you want to cancel your Ajax call

416
00:18:20,530 --> 00:18:23,290
you can do that and it will respond as

417
00:18:23,290 --> 00:18:28,720
well I am try to ensure that the CSS is

418
00:18:28,720 --> 00:18:32,230
loaded before the dawn load fires I

419
00:18:32,230 --> 00:18:36,250
don't know if y'all follow jquery issues

420
00:18:36,250 --> 00:18:38,080
but there was an issue where depending

421
00:18:38,080 --> 00:18:40,540
on how you loaded your style sheets if

422
00:18:40,540 --> 00:18:42,070
you loaded your style sheets after your

423
00:18:42,070 --> 00:18:44,350
javascript it would cause an issue where

424
00:18:44,350 --> 00:18:46,630
sometimes download would fire before

425
00:18:46,630 --> 00:18:50,350
your CSS was finished loading and so

426
00:18:50,350 --> 00:18:51,430
then you would be able you would be

427
00:18:51,430 --> 00:18:53,700
trying to evaluate styles on elements

428
00:18:53,700 --> 00:18:55,590
and it wouldn't it wouldn't give you the

429
00:18:55,590 --> 00:18:57,389
right results because the CSS hadn't

430
00:18:57,389 --> 00:18:58,799
finished loading so I make my best

431
00:18:58,799 --> 00:19:02,970
attempt to ensure that the CSS is loaded

432
00:19:02,970 --> 00:19:06,600
before the Dom load event triggers and

433
00:19:06,600 --> 00:19:10,320
because I'm I manage the events in the

434
00:19:10,320 --> 00:19:12,149
event handlers I'm able to actually also

435
00:19:12,149 --> 00:19:15,510
say that Dom load is a simulated event

436
00:19:15,510 --> 00:19:19,320
in IE so there's a potential that

437
00:19:19,320 --> 00:19:21,210
depending on on how things are done that

438
00:19:21,210 --> 00:19:25,110
it may end up having some handlers that

439
00:19:25,110 --> 00:19:27,510
are called sometimes after a window load

440
00:19:27,510 --> 00:19:30,240
issue and so what I do is I actually

441
00:19:30,240 --> 00:19:32,399
ensure that window load will not fire

442
00:19:32,399 --> 00:19:34,860
until everything is wrapped up in the

443
00:19:34,860 --> 00:19:39,750
Dom load I add more traversal methods

444
00:19:39,750 --> 00:19:41,789
like a first and a last and with first

445
00:19:41,789 --> 00:19:44,100
and last you can also say give me the

446
00:19:44,100 --> 00:19:46,740
first three and that's the first three

447
00:19:46,740 --> 00:19:48,990
elements give me the last three give me

448
00:19:48,990 --> 00:19:50,909
the last three elements you can say give

449
00:19:50,909 --> 00:19:53,340
me the last three that match this query

450
00:19:53,340 --> 00:19:55,679
and then the selector and so it would be

451
00:19:55,679 --> 00:19:58,350
three and then a selector you can also

452
00:19:58,350 --> 00:20:00,480
say give me the first that returns true

453
00:20:00,480 --> 00:20:02,519
to this function call so you can put a

454
00:20:02,519 --> 00:20:04,679
function and a condition and if it

455
00:20:04,679 --> 00:20:06,600
returns true you'll get the first that

456
00:20:06,600 --> 00:20:09,600
returns true for that so that's some

457
00:20:09,600 --> 00:20:14,549
more sugar for traversing I've gone and

458
00:20:14,549 --> 00:20:16,470
taken the jQuery approach and done

459
00:20:16,470 --> 00:20:19,590
things like a pinch I'll prepend child

460
00:20:19,590 --> 00:20:21,840
and then I'm really big into naming

461
00:20:21,840 --> 00:20:24,840
consistency so there's prepend siblings

462
00:20:24,840 --> 00:20:27,240
a pinch I'll to prepend child 2 and so

463
00:20:27,240 --> 00:20:29,639
on and they just make managing and

464
00:20:29,639 --> 00:20:32,730
handling your elements that much easier

465
00:20:32,730 --> 00:20:34,320
and I noticed some some libraries don't

466
00:20:34,320 --> 00:20:36,539
have that jQuery did and I thought that

467
00:20:36,539 --> 00:20:38,610
was a really good addition so props to

468
00:20:38,610 --> 00:20:43,139
jQuery for that another nice thing is

469
00:20:43,139 --> 00:20:47,100
that there's the mark again that you can

470
00:20:47,100 --> 00:20:48,960
create elements just like jQuery that

471
00:20:48,960 --> 00:20:51,870
really easy fantastic syntax of just

472
00:20:51,870 --> 00:20:54,600
fuse and then your HTML there and then

473
00:20:54,600 --> 00:20:57,240
you could then go like a pin to body or

474
00:20:57,240 --> 00:20:58,919
whatever and then it would upend it it

475
00:20:58,919 --> 00:20:59,730
would upend it to the

476
00:20:59,730 --> 00:21:03,690
body all right now this is this is a

477
00:21:03,690 --> 00:21:05,610
really a really cool one I support

478
00:21:05,610 --> 00:21:08,580
jQuery style with a node list and this

479
00:21:08,580 --> 00:21:10,560
node list is basically another array

480
00:21:10,560 --> 00:21:14,940
constructor on fuse Dom node list so

481
00:21:14,940 --> 00:21:16,680
it's separate from shoes array and

482
00:21:16,680 --> 00:21:18,690
separate from window array so I'm able

483
00:21:18,690 --> 00:21:21,480
to add dome centric Dom centric methods

484
00:21:21,480 --> 00:21:25,080
to the query result and so this actually

485
00:21:25,080 --> 00:21:27,570
works with the dot hide in the dot show

486
00:21:27,570 --> 00:21:29,700
but it's not an array-like object it's a

487
00:21:29,700 --> 00:21:31,380
real array with an internal class of

488
00:21:31,380 --> 00:21:33,240
array so you can use it in methods that

489
00:21:33,240 --> 00:21:36,240
require it to be an array and that means

490
00:21:36,240 --> 00:21:37,770
the length works and everything so if

491
00:21:37,770 --> 00:21:41,880
that's that's really cool in fact I want

492
00:21:41,880 --> 00:21:47,070
our for that all right I put it there

493
00:21:47,070 --> 00:21:49,980
just for you guys all right all of my

494
00:21:49,980 --> 00:21:52,680
methods conform to the es five spec

495
00:21:52,680 --> 00:21:54,660
which means and that's not just array

496
00:21:54,660 --> 00:21:58,140
that's also a string number any kind of

497
00:21:58,140 --> 00:22:00,030
method that I add to it I try to ensure

498
00:22:00,030 --> 00:22:02,760
that it works with the spec and so that

499
00:22:02,760 --> 00:22:04,740
also means that it works with sparse

500
00:22:04,740 --> 00:22:07,470
arrays it also is this generic so you

501
00:22:07,470 --> 00:22:09,750
can pass it array like objects a common

502
00:22:09,750 --> 00:22:12,840
pattern with that is if you have the

503
00:22:12,840 --> 00:22:14,340
arguments object and you want to convert

504
00:22:14,340 --> 00:22:16,770
it to an array you do slice well you do

505
00:22:16,770 --> 00:22:19,080
a ray prototype sliced call and you slap

506
00:22:19,080 --> 00:22:21,090
the arguments object in there and it

507
00:22:21,090 --> 00:22:22,830
converts it to an array but a lot of

508
00:22:22,830 --> 00:22:24,630
frameworks when they when they add their

509
00:22:24,630 --> 00:22:26,130
array methods they don't make it this

510
00:22:26,130 --> 00:22:27,810
generic so you can't do that with their

511
00:22:27,810 --> 00:22:29,430
methods so I went ahead and made sure

512
00:22:29,430 --> 00:22:32,900
that all of my stuff follows es5 and

513
00:22:32,900 --> 00:22:36,530
that's that's taking it up a notch there

514
00:22:36,530 --> 00:22:40,010
my event wrappers are optimized for

515
00:22:40,010 --> 00:22:43,050
execution so going along with this thing

516
00:22:43,050 --> 00:22:45,450
of fixing the issues of extending

517
00:22:45,450 --> 00:22:47,340
natives and extending the Dom part of

518
00:22:47,340 --> 00:22:48,900
that is using wrappers i use dom

519
00:22:48,900 --> 00:22:51,450
wrappers I don't extend natives on the

520
00:22:51,450 --> 00:22:54,510
window and I also use event rappers but

521
00:22:54,510 --> 00:22:56,580
something that a lot of libraries do is

522
00:22:56,580 --> 00:22:58,800
up front every time you pass an event it

523
00:22:58,800 --> 00:23:01,410
populates every single property even if

524
00:23:01,410 --> 00:23:03,000
you're ever accessing that property and

525
00:23:03,000 --> 00:23:04,260
so it's doing all these calculations

526
00:23:04,260 --> 00:23:06,600
that don't need to be done and like if

527
00:23:06,600 --> 00:23:08,280
you're using a mouse move sometimes

528
00:23:08,280 --> 00:23:10,230
they're they slow it down so much that

529
00:23:10,230 --> 00:23:11,940
they have to do something like debounce

530
00:23:11,940 --> 00:23:13,200
the balancing

531
00:23:13,200 --> 00:23:14,970
something it's where you where you where

532
00:23:14,970 --> 00:23:17,700
you call it every other time and try to

533
00:23:17,700 --> 00:23:19,230
try to delay it because your stuff is

534
00:23:19,230 --> 00:23:21,419
slow this allows it to actually be

535
00:23:21,419 --> 00:23:22,590
optimized so you don't have to worry

536
00:23:22,590 --> 00:23:32,250
about that one moment Oh better so

537
00:23:32,250 --> 00:23:33,630
basically what i do is instead of

538
00:23:33,630 --> 00:23:37,169
properties i have methods that you call

539
00:23:37,169 --> 00:23:39,179
so you can say get target get current

540
00:23:39,179 --> 00:23:44,549
target get related target and all of

541
00:23:44,549 --> 00:23:46,799
these things and it's doing something

542
00:23:46,799 --> 00:23:50,549
super cool here it's actually lazy

543
00:23:50,549 --> 00:23:54,000
defining so it's it's actually not

544
00:23:54,000 --> 00:23:58,080
forking based on features until it's not

545
00:23:58,080 --> 00:24:00,179
working based on features until you call

546
00:24:00,179 --> 00:24:02,399
it the first time and then if you call

547
00:24:02,399 --> 00:24:05,519
it and then it actually stores the

548
00:24:05,519 --> 00:24:09,510
result on the instance of the event

549
00:24:09,510 --> 00:24:12,269
wrapper and this allows it to not have

550
00:24:12,269 --> 00:24:13,830
to be doing those calculations every

551
00:24:13,830 --> 00:24:15,299
time you call that function so it

552
00:24:15,299 --> 00:24:17,510
actually stores the results afterwards

553
00:24:17,510 --> 00:24:20,399
which creates a highly optimized ivette

554
00:24:20,399 --> 00:24:22,169
wrapper which is great for like mouse

555
00:24:22,169 --> 00:24:23,639
move and other things when you need it

556
00:24:23,639 --> 00:24:24,899
to just work and you need it to work

557
00:24:24,899 --> 00:24:30,630
fast so that's cool my element rappers

558
00:24:30,630 --> 00:24:33,419
have caching built in and this is

559
00:24:33,419 --> 00:24:34,679
important for backwards compatibility

560
00:24:34,679 --> 00:24:37,169
when I'm trying to run as prototype and

561
00:24:37,169 --> 00:24:43,980
you'll see there when I explain it this

562
00:24:43,980 --> 00:24:45,600
means that whenever you create a new

563
00:24:45,600 --> 00:24:47,460
instance like with jquery you can create

564
00:24:47,460 --> 00:24:51,120
a jquery instance boom and then you do

565
00:24:51,120 --> 00:24:54,269
it again identical it returns the exact

566
00:24:54,269 --> 00:24:56,220
same instance so it's not a different

567
00:24:56,220 --> 00:24:57,750
instance and so this will actually be

568
00:24:57,750 --> 00:24:59,669
true and this is great because I meant

569
00:24:59,669 --> 00:25:00,809
what does this look like if you do a

570
00:25:00,809 --> 00:25:02,940
dollar sign there instead of fuse that

571
00:25:02,940 --> 00:25:05,010
looks like prototype or mootools and so

572
00:25:05,010 --> 00:25:06,929
this is this will work just like that

573
00:25:06,929 --> 00:25:09,240
but it's using wrappers instead so it's

574
00:25:09,240 --> 00:25:15,299
a familiar syntax something else cool as

575
00:25:15,299 --> 00:25:18,539
I use advanced character encoding and

576
00:25:18,539 --> 00:25:21,120
what that means is that some some escape

577
00:25:21,120 --> 00:25:22,750
HTML method

578
00:25:22,750 --> 00:25:25,210
and unescape will well actually only

579
00:25:25,210 --> 00:25:26,980
convert like three characters the

580
00:25:26,980 --> 00:25:29,380
greater than less than an ampersand and

581
00:25:29,380 --> 00:25:32,380
I actually go through and i use the the

582
00:25:32,380 --> 00:25:36,240
doctype and the inner HTML to actually

583
00:25:36,240 --> 00:25:39,580
encode all of these supported entities

584
00:25:39,580 --> 00:25:41,620
and so you can you can really get fancy

585
00:25:41,620 --> 00:25:44,200
with with your stuff there and it works

586
00:25:44,200 --> 00:25:46,080
to its feature tested for like Safari

587
00:25:46,080 --> 00:25:50,200
2.00 crazy old browser and then crazy

588
00:25:50,200 --> 00:25:54,820
new browser too so it has you covered I

589
00:25:54,820 --> 00:25:56,680
added a bit of sugar on top of the

590
00:25:56,680 --> 00:25:58,960
function bind and this is very handy

591
00:25:58,960 --> 00:26:01,270
whenever you get into a lazy defining

592
00:26:01,270 --> 00:26:02,560
methods which is great whenever your

593
00:26:02,560 --> 00:26:03,790
feature detecting and you don't have

594
00:26:03,790 --> 00:26:06,190
like say the body element available or

595
00:26:06,190 --> 00:26:07,570
something like that until you need it

596
00:26:07,570 --> 00:26:11,200
you can actually pass it an array and I

597
00:26:11,200 --> 00:26:13,230
kept this the the argument signature

598
00:26:13,230 --> 00:26:16,270
identical to spec so even if you know

599
00:26:16,270 --> 00:26:18,430
later on something happens it's still

600
00:26:18,430 --> 00:26:20,620
the same i'm not going to crazy off spec

601
00:26:20,620 --> 00:26:22,270
and adding an extra argument you can

602
00:26:22,270 --> 00:26:24,430
pass it an array and then it will it

603
00:26:24,430 --> 00:26:27,070
will use the the object and the method

604
00:26:27,070 --> 00:26:31,270
to be executed during the bind instead

605
00:26:31,270 --> 00:26:33,160
of just the method reference so you can

606
00:26:33,160 --> 00:26:35,110
actually define that at a later time it

607
00:26:35,110 --> 00:26:37,210
would still work in your bond which is

608
00:26:37,210 --> 00:26:44,380
great i have class defaults so whenever

609
00:26:44,380 --> 00:26:49,870
you instantiate a class or a constructor

610
00:26:49,870 --> 00:26:53,290
with sugar you're able to have options

611
00:26:53,290 --> 00:26:54,970
that are that are there by default so

612
00:26:54,970 --> 00:26:58,690
you can set things like default color or

613
00:26:58,690 --> 00:27:01,510
default name or you know any of your

614
00:27:01,510 --> 00:27:04,800
properties they will support defaults a

615
00:27:04,800 --> 00:27:07,300
big one is there's no expand owes on IE

616
00:27:07,300 --> 00:27:11,530
and and a now on firefox and this is

617
00:27:11,530 --> 00:27:13,030
cool because if you'll notice there's

618
00:27:13,030 --> 00:27:14,830
there's jquery issues and there's

619
00:27:14,830 --> 00:27:17,020
prototype issues of some elements don't

620
00:27:17,020 --> 00:27:20,380
allow expand those like 4am and applet

621
00:27:20,380 --> 00:27:24,340
or object and this also avoids redraw

622
00:27:24,340 --> 00:27:26,830
issues and i don't it's it's a it allows

623
00:27:26,830 --> 00:27:28,750
me to have a rapper that doesn't touch

624
00:27:28,750 --> 00:27:31,060
an element it leaves it completely

625
00:27:31,060 --> 00:27:32,740
unchanged and unmodified which is

626
00:27:32,740 --> 00:27:33,460
fantastic

627
00:27:33,460 --> 00:27:36,100
and so that works for IE which is great

628
00:27:36,100 --> 00:27:38,080
because I E has the problems and then

629
00:27:38,080 --> 00:27:40,690
now firefox has a Dom level 3 method

630
00:27:40,690 --> 00:27:43,779
called get user data and set user data

631
00:27:43,779 --> 00:27:47,169
and you can use that to set IDs on that

632
00:27:47,169 --> 00:27:48,940
as well which then is used to look back

633
00:27:48,940 --> 00:27:53,169
for it's it's a data storage so that's

634
00:27:53,169 --> 00:27:57,250
that's pretty cool a big one that that

635
00:27:57,250 --> 00:27:59,950
seems to buy every framework and you'll

636
00:27:59,950 --> 00:28:03,279
see the the j s nerds go crazy for this

637
00:28:03,279 --> 00:28:07,649
and that's proper attribute handling

638
00:28:07,649 --> 00:28:12,580
jQuery confuses properties attributes

639
00:28:12,580 --> 00:28:15,549
mootools does dojo every framework does

640
00:28:15,549 --> 00:28:17,049
because at the time whenever they were

641
00:28:17,049 --> 00:28:19,809
creating them the difference is really

642
00:28:19,809 --> 00:28:22,480
hard to determine because the spec uses

643
00:28:22,480 --> 00:28:24,760
the same words for different meanings

644
00:28:24,760 --> 00:28:28,149
one is an interface one is a one is an

645
00:28:28,149 --> 00:28:30,760
attribute and they'll say an attribute

646
00:28:30,760 --> 00:28:32,020
in it'll say the interface has

647
00:28:32,020 --> 00:28:33,220
attributes which actually means

648
00:28:33,220 --> 00:28:37,840
properties it's crazy so I have handled

649
00:28:37,840 --> 00:28:39,340
it in a way that's where I don't confuse

650
00:28:39,340 --> 00:28:40,990
what an attribute is and what a property

651
00:28:40,990 --> 00:28:43,149
is for example an attribute is like

652
00:28:43,149 --> 00:28:44,799
what's in there in the HTML source

653
00:28:44,799 --> 00:28:47,409
source when the page loads and then a

654
00:28:47,409 --> 00:28:49,480
property would be like the live value so

655
00:28:49,480 --> 00:28:51,460
like on input the attribute would be

656
00:28:51,460 --> 00:28:54,070
whatever was there in the beginning the

657
00:28:54,070 --> 00:28:55,750
property is there what's there right now

658
00:28:55,750 --> 00:28:57,520
after you've changed it so that's

659
00:28:57,520 --> 00:28:59,590
attributes and properties and my methods

660
00:28:59,590 --> 00:29:01,570
handle them correctly and this actually

661
00:29:01,570 --> 00:29:05,559
bleeds into things like proper query

662
00:29:05,559 --> 00:29:08,169
selectors on your selector engines if

663
00:29:08,169 --> 00:29:10,090
they can handle things like attributes

664
00:29:10,090 --> 00:29:12,340
and properties correctly and so that

665
00:29:12,340 --> 00:29:16,570
that is what I do there fragment caching

666
00:29:16,570 --> 00:29:19,600
a John Resig did a lot of testing with

667
00:29:19,600 --> 00:29:21,820
this I was doing some testing about the

668
00:29:21,820 --> 00:29:25,539
same time fragments are awesome they

669
00:29:25,539 --> 00:29:29,260
help speed up things in the Dom I've run

670
00:29:29,260 --> 00:29:32,230
some tests where like just a little a

671
00:29:32,230 --> 00:29:35,350
minor league complex insert can cause IE

672
00:29:35,350 --> 00:29:37,899
to freeze for like 60 seconds like ie6

673
00:29:37,899 --> 00:29:40,169
to freeze for 60 seconds which is crazy

674
00:29:40,169 --> 00:29:43,510
slow but with caching it was like down

675
00:29:43,510 --> 00:29:44,690
to one second so I'm

676
00:29:44,690 --> 00:29:46,700
that's that's still bad but not as bad

677
00:29:46,700 --> 00:29:49,300
in 60 seconds so caching is really good

678
00:29:49,300 --> 00:29:52,340
it really helps out whenever you do

679
00:29:52,340 --> 00:29:54,710
iterations over your selectors over your

680
00:29:54,710 --> 00:29:57,290
your query results it actually will sit

681
00:29:57,290 --> 00:29:59,240
there and say if you pass it an HTML

682
00:29:59,240 --> 00:30:00,830
string it'll create that element and

683
00:30:00,830 --> 00:30:03,800
then as it's going over the items in

684
00:30:03,800 --> 00:30:05,540
your collection it actually instead of

685
00:30:05,540 --> 00:30:06,710
creating that element over and over

686
00:30:06,710 --> 00:30:09,140
again it just clones it but unlike

687
00:30:09,140 --> 00:30:14,150
jQuery which persists that cash I just

688
00:30:14,150 --> 00:30:16,100
discarded after that iteration and the

689
00:30:16,100 --> 00:30:17,720
reason is is because if you have single

690
00:30:17,720 --> 00:30:20,060
page apps and you're continually caching

691
00:30:20,060 --> 00:30:22,400
elements that cash just grows and grows

692
00:30:22,400 --> 00:30:24,500
and grows and grows and it's a pseudo

693
00:30:24,500 --> 00:30:26,540
page leak and so you don't want that and

694
00:30:26,540 --> 00:30:30,260
so I cash fragments correctly I also do

695
00:30:30,260 --> 00:30:32,420
this for I mentioned before where I

696
00:30:32,420 --> 00:30:34,430
support the iframe context and foreign

697
00:30:34,430 --> 00:30:36,950
documents and things it creates specific

698
00:30:36,950 --> 00:30:39,530
fragments for those as well because you

699
00:30:39,530 --> 00:30:42,590
can't use foreign fragments on your

700
00:30:42,590 --> 00:30:44,960
pages fragments on a foreign document so

701
00:30:44,960 --> 00:30:49,250
it caches that too all right my methods

702
00:30:49,250 --> 00:30:52,490
support I'm literals and objects and

703
00:30:52,490 --> 00:30:55,310
this is because sandbox natives are

704
00:30:55,310 --> 00:30:57,740
objects if they were primitives they

705
00:30:57,740 --> 00:30:59,150
would be primitives of the window and

706
00:30:59,150 --> 00:31:02,150
not prim and not of the fused array or

707
00:31:02,150 --> 00:31:04,700
dot fuse Dom node list and so my methods

708
00:31:04,700 --> 00:31:06,980
because I have to support both actually

709
00:31:06,980 --> 00:31:10,580
support you know this and this which is

710
00:31:10,580 --> 00:31:13,880
unique and if you're ever wondering why

711
00:31:13,880 --> 00:31:15,770
that's that's because I have to support

712
00:31:15,770 --> 00:31:17,600
them for sandbox natives and regular

713
00:31:17,600 --> 00:31:21,020
natives I have consistent naming of

714
00:31:21,020 --> 00:31:25,490
functions um so if J queries API is WTF

715
00:31:25,490 --> 00:31:28,160
and some of prototypes is the same way

716
00:31:28,160 --> 00:31:32,300
mootools is very good about naming

717
00:31:32,300 --> 00:31:34,360
consistency and so I've kind of taken

718
00:31:34,360 --> 00:31:38,360
the lead from them and done things where

719
00:31:38,360 --> 00:31:41,390
if I've return a boolean value I prefix

720
00:31:41,390 --> 00:31:43,700
it with is or has because it's returning

721
00:31:43,700 --> 00:31:45,950
a boolean value and if it's getting

722
00:31:45,950 --> 00:31:50,360
something it's get blah or set blah so

723
00:31:50,360 --> 00:31:51,890
there's no ambiguous meaning of what's

724
00:31:51,890 --> 00:31:53,630
attr you know or

725
00:31:53,630 --> 00:31:55,820
or what CSS mean oh is it a style

726
00:31:55,820 --> 00:31:58,610
property or instead of CSS value of is

727
00:31:58,610 --> 00:32:03,040
it's it's very consistent naming honor

728
00:32:03,040 --> 00:32:05,510
yeah in fact did that have an asterisk

729
00:32:05,510 --> 00:32:09,920
it sure did so feature testing 0 browse

730
00:32:09,920 --> 00:32:11,210
our sniffing and this is a big deal

731
00:32:11,210 --> 00:32:15,140
because with ie9 coming out we're

732
00:32:15,140 --> 00:32:17,570
getting to see again what happens when

733
00:32:17,570 --> 00:32:21,410
you browser sniff there's some nice

734
00:32:21,410 --> 00:32:23,450
frameworks out there that are breaking

735
00:32:23,450 --> 00:32:27,230
now in ie9 um because they browser sniff

736
00:32:27,230 --> 00:32:29,840
they basically said is IE let's assume

737
00:32:29,840 --> 00:32:31,670
all these features exist and now with

738
00:32:31,670 --> 00:32:34,460
ie9 they don't and so we use feature

739
00:32:34,460 --> 00:32:37,220
testing for everything so there's no

740
00:32:37,220 --> 00:32:38,660
browser sniffing I actually have a

741
00:32:38,660 --> 00:32:41,240
feature registry so you test once it

742
00:32:41,240 --> 00:32:43,760
caches the results and then if you query

743
00:32:43,760 --> 00:32:46,490
that that feature again it automatically

744
00:32:46,490 --> 00:32:48,290
has the result there for you so you're

745
00:32:48,290 --> 00:32:50,630
able to look that up it's fused a and v4

746
00:32:50,630 --> 00:32:53,960
environment dot test the the string and

747
00:32:53,960 --> 00:32:56,600
so I have that and that's part of what

748
00:32:56,600 --> 00:33:01,430
I'll be donating to has Jas will support

749
00:33:01,430 --> 00:33:04,790
custom builds like mootools does where

750
00:33:04,790 --> 00:33:06,200
you can basically select the pieces you

751
00:33:06,200 --> 00:33:08,630
want and this is because the pieces i

752
00:33:08,630 --> 00:33:11,060
use don't depend on other pieces in the

753
00:33:11,060 --> 00:33:13,790
other modules in the scripts and its

754
00:33:13,790 --> 00:33:16,130
uses a lot of vanilla j/s and so you're

755
00:33:16,130 --> 00:33:17,450
able to get really fine grained control

756
00:33:17,450 --> 00:33:19,220
over what you want to include in your

757
00:33:19,220 --> 00:33:22,700
library or in the build of fuse jas i'm

758
00:33:22,700 --> 00:33:25,880
also working on supporting being able to

759
00:33:25,880 --> 00:33:27,740
load things via like a seed file like

760
00:33:27,740 --> 00:33:29,990
yui does where you can have load one

761
00:33:29,990 --> 00:33:32,060
file and then add in the pieces as you

762
00:33:32,060 --> 00:33:34,970
go and jquery i know is working on that

763
00:33:34,970 --> 00:33:37,430
too so that's that's going to be really

764
00:33:37,430 --> 00:33:41,540
cool kind of a random note i resolve the

765
00:33:41,540 --> 00:33:43,070
scroll element which could either be

766
00:33:43,070 --> 00:33:44,840
body or document element depending on

767
00:33:44,840 --> 00:33:47,600
the quirks mode browser all kinds of

768
00:33:47,600 --> 00:33:50,900
jazz i do that if you needed it you'll

769
00:33:50,900 --> 00:33:52,370
appreciate it if you don't you probably

770
00:33:52,370 --> 00:33:54,790
have no idea so that's that's all right

771
00:33:54,790 --> 00:33:57,030
method generics this is some

772
00:33:57,030 --> 00:33:59,310
that Firefox supports I don't know if

773
00:33:59,310 --> 00:34:00,900
any other browser does but I supported

774
00:34:00,900 --> 00:34:03,810
on mine as well so any array or any

775
00:34:03,810 --> 00:34:08,159
method on any namespace has a generic on

776
00:34:08,159 --> 00:34:11,790
its constructor so arrays elements

777
00:34:11,790 --> 00:34:13,800
anything it's there's always a generic

778
00:34:13,800 --> 00:34:16,400
there that you can pass a values to I

779
00:34:16,400 --> 00:34:19,050
support eight selector engines which

780
00:34:19,050 --> 00:34:21,300
means i support basically any of the

781
00:34:21,300 --> 00:34:23,270
ones that are in existence and that have

782
00:34:23,270 --> 00:34:25,919
mildly been used i support them i'm very

783
00:34:25,919 --> 00:34:28,380
open to supporting any others i don't

784
00:34:28,380 --> 00:34:29,909
like to recreate the wheel believe it or

785
00:34:29,909 --> 00:34:32,790
not i like to use components that exists

786
00:34:32,790 --> 00:34:35,669
so i'm all for like has j s or if there

787
00:34:35,669 --> 00:34:38,850
was a ECMA five shim i totally adopt

788
00:34:38,850 --> 00:34:40,290
that in a heartbeat because i don't want

789
00:34:40,290 --> 00:34:42,510
to have to keep doing that so I support

790
00:34:42,510 --> 00:34:44,550
eight selector engines including sizzle

791
00:34:44,550 --> 00:34:47,429
and the most awesome NW matter which is

792
00:34:47,429 --> 00:34:49,560
totally the best css3 compliance

793
00:34:49,560 --> 00:34:51,390
selector ancient out there and also the

794
00:34:51,390 --> 00:34:55,980
fastest engine as well a big thing is I

795
00:34:55,980 --> 00:34:59,330
support emulation which is brand-new in

796
00:34:59,330 --> 00:35:02,700
jas frameworks you can run as prototype

797
00:35:02,700 --> 00:35:07,410
and actually delete prototype j/s drop

798
00:35:07,410 --> 00:35:11,250
few JSN and then your api won't know the

799
00:35:11,250 --> 00:35:13,260
difference that's the goal with

800
00:35:13,260 --> 00:35:15,600
innovation and what's cool is that

801
00:35:15,600 --> 00:35:16,770
you'll be able to get the browser

802
00:35:16,770 --> 00:35:18,450
support the added speed and added

803
00:35:18,450 --> 00:35:20,700
features but not have to relearn an API

804
00:35:20,700 --> 00:35:23,700
and so eventually we're also gearing up

805
00:35:23,700 --> 00:35:26,190
to support jquery so you'll be able to

806
00:35:26,190 --> 00:35:28,530
use jquery plugins and everything and

807
00:35:28,530 --> 00:35:32,310
it'll still be awesome I support special

808
00:35:32,310 --> 00:35:35,850
Dom events like setting up and tear down

809
00:35:35,850 --> 00:35:37,710
so I can support things like Mao Center

810
00:35:37,710 --> 00:35:39,180
and mouse leave cross browser I'm

811
00:35:39,180 --> 00:35:42,540
speeding up now because I'm sensing it's

812
00:35:42,540 --> 00:35:45,690
time to wrap it up I support firing Dom

813
00:35:45,690 --> 00:35:49,380
events and that also includes bubbling

814
00:35:49,380 --> 00:35:55,980
and other nifty features I similar to

815
00:35:55,980 --> 00:35:58,470
jQuery even if you lazy load the

816
00:35:58,470 --> 00:35:59,850
framework it'll still trigger some

817
00:35:59,850 --> 00:36:01,680
events I know there's some discussion

818
00:36:01,680 --> 00:36:03,150
about whether that should be moved into

819
00:36:03,150 --> 00:36:04,680
like a ready method and I'm open for

820
00:36:04,680 --> 00:36:05,870
discussion there were

821
00:36:05,870 --> 00:36:08,630
we're about ready to start making some

822
00:36:08,630 --> 00:36:10,670
solid decisions there minification

823
00:36:10,670 --> 00:36:12,260
support I'm really big on minification

824
00:36:12,260 --> 00:36:14,570
I'm it's frustrating to see some

825
00:36:14,570 --> 00:36:16,400
frameworks on Google CDN not support

826
00:36:16,400 --> 00:36:17,990
magnification or not provide a min ified

827
00:36:17,990 --> 00:36:21,170
version because minified can give you a

828
00:36:21,170 --> 00:36:23,300
gain of like 18 plus kilobytes which is

829
00:36:23,300 --> 00:36:25,040
awesome for mobile so minification

830
00:36:25,040 --> 00:36:28,310
support is big I will eventually be

831
00:36:28,310 --> 00:36:29,930
supporting JSON p it's something I don't

832
00:36:29,930 --> 00:36:32,840
do yet but since its mapping to jquery i

833
00:36:32,840 --> 00:36:35,900
want to do that i do also want to add no

834
00:36:35,900 --> 00:36:38,300
Jas and comedy is compliance so for like

835
00:36:38,300 --> 00:36:39,800
the module system be able to load that

836
00:36:39,800 --> 00:36:42,880
and an export thing on the exports

837
00:36:42,880 --> 00:36:45,830
object names based events is something

838
00:36:45,830 --> 00:36:49,700
that jQuery uses a Yui calls it like

839
00:36:49,700 --> 00:36:52,550
label event labels or something I'm

840
00:36:52,550 --> 00:36:54,230
totally butchering that but I want to be

841
00:36:54,230 --> 00:36:55,760
able to do that that's handy for widgets

842
00:36:55,760 --> 00:36:58,490
and custom events something else is

843
00:36:58,490 --> 00:37:00,140
really cool is all of our developers

844
00:37:00,140 --> 00:37:07,010
have signed what is it see la's clas and

845
00:37:07,010 --> 00:37:10,880
and whenever we release we will be

846
00:37:10,880 --> 00:37:12,620
submitting our stuff to the dojo

847
00:37:12,620 --> 00:37:15,470
foundation I like following and in

848
00:37:15,470 --> 00:37:17,420
committing to really good open-source

849
00:37:17,420 --> 00:37:18,890
practices and we're going to go that

850
00:37:18,890 --> 00:37:22,090
extra mile and join the dojo foundation

851
00:37:22,090 --> 00:37:25,730
we offer crazy browser support which is

852
00:37:25,730 --> 00:37:27,620
great for the mobile market because they

853
00:37:27,620 --> 00:37:29,480
use kind of crappy browsers and we do a

854
00:37:29,480 --> 00:37:31,670
lot of feature testing so even if you're

855
00:37:31,670 --> 00:37:33,380
like I'll never use that browser you

856
00:37:33,380 --> 00:37:35,930
might we support it later on we'll be

857
00:37:35,930 --> 00:37:37,550
able to add custom builds based on

858
00:37:37,550 --> 00:37:40,010
features because we have a feature

859
00:37:40,010 --> 00:37:42,260
registry and so you can profile certain

860
00:37:42,260 --> 00:37:44,810
environments and then create a build

861
00:37:44,810 --> 00:37:47,480
specific to that environment so that's

862
00:37:47,480 --> 00:37:50,660
awesome and that will be added once I

863
00:37:50,660 --> 00:37:54,260
get help we are very active I try to do

864
00:37:54,260 --> 00:37:56,390
commits every week if I don't just

865
00:37:56,390 --> 00:37:57,920
assume I'm actually doing them on my

866
00:37:57,920 --> 00:38:00,230
side and there's going to be a massive

867
00:38:00,230 --> 00:38:04,550
commit any time now so I try to do that

868
00:38:04,550 --> 00:38:06,350
every day it's I work on this project in

869
00:38:06,350 --> 00:38:08,090
my spare time I work on it from like ten

870
00:38:08,090 --> 00:38:12,160
o'clock the 3am and it's a passion

871
00:38:12,160 --> 00:38:15,010
of mine and so I've been very active for

872
00:38:15,010 --> 00:38:17,980
two years now haven't slowed down so

873
00:38:17,980 --> 00:38:19,930
i'll keep being active i fix a ton of

874
00:38:19,930 --> 00:38:21,670
bug fixes I even go into other

875
00:38:21,670 --> 00:38:24,460
frameworks bug repositories and take

876
00:38:24,460 --> 00:38:26,049
their bugs and fix them and then put

877
00:38:26,049 --> 00:38:27,880
that in my change log that I've been

878
00:38:27,880 --> 00:38:29,559
able to address that bug as well so if

879
00:38:29,559 --> 00:38:30,940
you go to the change log which is like

880
00:38:30,940 --> 00:38:33,579
mile and a half long you'll see every

881
00:38:33,579 --> 00:38:35,589
bug I fixed in other other frameworks

882
00:38:35,589 --> 00:38:37,240
that I've applied to my framework and

883
00:38:37,240 --> 00:38:39,940
then I've also included all the credits

884
00:38:39,940 --> 00:38:41,829
to anyone that's helped during the bug

885
00:38:41,829 --> 00:38:46,480
fix process and then thanks I'm not done

886
00:38:46,480 --> 00:38:49,270
yet I have a special presentation for

887
00:38:49,270 --> 00:38:51,339
Peter Higgins I need him to come up to

888
00:38:51,339 --> 00:38:58,180
the front where is he at I need him need

889
00:38:58,180 --> 00:39:05,079
him to come up here say where's yet he's

890
00:39:05,079 --> 00:39:06,730
got a coffee someone go out there and

891
00:39:06,730 --> 00:39:12,359
grab them all right Peter Higgins has

892
00:39:12,359 --> 00:39:14,980
gave me a pretty hard time about being

893
00:39:14,980 --> 00:39:17,260
vaporware so I've got a special

894
00:39:17,260 --> 00:39:19,660
presentation for him it's very urgent

895
00:39:19,660 --> 00:39:21,520
for you you got to come up here I'm

896
00:39:21,520 --> 00:39:22,950
giving I'm presenting something to you

897
00:39:22,950 --> 00:39:25,390
yeah why don't you stand right over

898
00:39:25,390 --> 00:39:30,940
there well that's it it's you have no

899
00:39:30,940 --> 00:39:34,950
idea we are cooperating and it's awesome

900
00:39:34,950 --> 00:39:39,660
what well I don't know um here you go

901
00:39:39,660 --> 00:39:53,620
I've got a little card for you

902
00:39:53,630 --> 00:39:56,329
then I've got something else for you

903
00:39:56,329 --> 00:40:04,200
here you go yeah you basically pop it

904
00:40:04,200 --> 00:40:05,430
Chuck the whole thing while you put

905
00:40:05,430 --> 00:40:08,550
anything yeah there you go you can't

906
00:40:08,550 --> 00:40:09,990
block it you have to do it right now

907
00:40:09,990 --> 00:40:15,589
yeah he's getting bro ice by the way so

908
00:40:15,589 --> 00:40:19,859
yeah oh I actually had one of my pocket

909
00:40:19,859 --> 00:40:22,170
too and you have to do it today that

910
00:40:22,170 --> 00:40:28,020
adds to the humiliation do it it's look

911
00:40:28,020 --> 00:40:43,930
warm too

912
00:40:43,940 --> 00:40:48,240
thank you for you guys I've also

913
00:40:48,240 --> 00:40:50,070
launched the website now so no longer

914
00:40:50,070 --> 00:40:52,160
has that annoying like seizure-inducing

915
00:40:52,160 --> 00:40:55,530
green or the orange and yellow thing

916
00:40:55,530 --> 00:40:57,150
there we have a full website up it's

917
00:40:57,150 --> 00:40:58,800
still work in progress but if you go to

918
00:40:58,800 --> 00:41:02,430
fuchsia is calm it's up now and here are

919
00:41:02,430 --> 00:41:03,570
some other links that you might find

920
00:41:03,570 --> 00:41:07,020
interesting I've got to Jay Dalton my

921
00:41:07,020 --> 00:41:11,250
email my aim my why my skype fuse Jes my

922
00:41:11,250 --> 00:41:13,080
repos I've got some other things they're

923
00:41:13,080 --> 00:41:16,680
all you can lead calm is my blog don't

924
00:41:16,680 --> 00:41:18,960
type it all you can feet it's not the

925
00:41:18,960 --> 00:41:22,200
same and all you can lead and that's it

926
00:41:22,200 --> 00:41:28,870
thank you guys

