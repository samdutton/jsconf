1
00:00:00,000 --> 00:00:02,190

if everyone can hear me and if not use

2
00:00:02,190 --> 00:00:05,759
your imagination so yeah my name is dave

3
00:00:05,759 --> 00:00:09,269
stevens i am here from zappos hence the

4
00:00:09,269 --> 00:00:12,990
oversized logo behind me there and I

5
00:00:12,990 --> 00:00:15,330
just wanted to talk to you about using

6
00:00:15,330 --> 00:00:19,640
happy plugins to version your API and

7
00:00:19,640 --> 00:00:21,779
try not have this fall off my ear while

8
00:00:21,779 --> 00:00:25,080
I do so quick thing on me because I'm

9
00:00:25,080 --> 00:00:28,189
not famous as you may have noticed

10
00:00:28,189 --> 00:00:31,470
started using node back in 2010 going to

11
00:00:31,470 --> 00:00:32,700
hold this down here because ice flying

12
00:00:32,700 --> 00:00:40,469
all around me ok cool and first use

13
00:00:40,469 --> 00:00:42,420
happy at the end of last year on a

14
00:00:42,420 --> 00:00:44,600
personal recommendation of a friend and

15
00:00:44,600 --> 00:00:46,950
we actually managed to get something

16
00:00:46,950 --> 00:00:49,710
into customer-facing production at the

17
00:00:49,710 --> 00:00:51,570
end of last year and then a/b test for

18
00:00:51,570 --> 00:00:54,030
6pm calm the mobile views which is our

19
00:00:54,030 --> 00:00:56,610
sister site and we have happy eight in

20
00:00:56,610 --> 00:00:59,640
production today on internal analytics

21
00:00:59,640 --> 00:01:02,730
API not quite Black Friday at Walmart

22
00:01:02,730 --> 00:01:06,450
foot we're doing our best so quick

23
00:01:06,450 --> 00:01:07,830
project setup for what I'm going to go

24
00:01:07,830 --> 00:01:10,860
through I'll keep this brief I wrote up

25
00:01:10,860 --> 00:01:12,750
a big long post about how I like to

26
00:01:12,750 --> 00:01:16,470
organize happy plugins that bit ly URL

27
00:01:16,470 --> 00:01:18,360
will take you there if you would like to

28
00:01:18,360 --> 00:01:20,540
know why I've structured it in this way

29
00:01:20,540 --> 00:01:24,420
but we've got this one controller which

30
00:01:24,420 --> 00:01:25,530
is going to give us information about

31
00:01:25,530 --> 00:01:29,970
our API the info controller and our main

32
00:01:29,970 --> 00:01:32,759
application just uses glue because i

33
00:01:32,759 --> 00:01:36,509
like the compose functionality that got

34
00:01:36,509 --> 00:01:40,860
removed in version 8 to set up a server

35
00:01:40,860 --> 00:01:43,549
and run out and 49 thousands pulling in

36
00:01:43,549 --> 00:01:50,820
the info module is a plug-in that plugin

37
00:01:50,820 --> 00:01:53,700
looks like this very simple it captures

38
00:01:53,700 --> 00:01:58,469
the root of / version and has a handler

39
00:01:58,469 --> 00:02:01,920
there which we'll look at next and it

40
00:02:01,920 --> 00:02:04,439
just replies back with the name of the

41
00:02:04,439 --> 00:02:07,770
API the example API and a version number

42
00:02:07,770 --> 00:02:10,950
which is one in this instance okay so

43
00:02:10,950 --> 00:02:13,190
once that's running

44
00:02:13,190 --> 00:02:17,510
this co request will return back this

45
00:02:17,510 --> 00:02:20,330
JSON response which is very exciting I

46
00:02:20,330 --> 00:02:22,250
know you're all dying for me to push

47
00:02:22,250 --> 00:02:24,440
this live but unfortunately it's just an

48
00:02:24,440 --> 00:02:27,860
example but now we've got to the point

49
00:02:27,860 --> 00:02:29,840
where everyone was so excited by it we

50
00:02:29,840 --> 00:02:31,760
want to go on to version 2 and improve

51
00:02:31,760 --> 00:02:33,080
it because it you know didn't do too

52
00:02:33,080 --> 00:02:34,940
much and we're going to introduce some

53
00:02:34,940 --> 00:02:36,860
breaking changes but we're going to be

54
00:02:36,860 --> 00:02:38,870
good net citizens we're not going to

55
00:02:38,870 --> 00:02:41,510
break the previous calls for anyone that

56
00:02:41,510 --> 00:02:43,780
is relying on it and we're going to

57
00:02:43,780 --> 00:02:48,470
version our API so before in the modules

58
00:02:48,470 --> 00:02:51,800
section we just had an index j s and

59
00:02:51,800 --> 00:02:53,600
then this version handler which itself

60
00:02:53,600 --> 00:02:58,550
at an index j s we're now going to break

61
00:02:58,550 --> 00:03:00,470
this down into version 1 and version 2

62
00:03:00,470 --> 00:03:05,240
of our api first thing we're going to do

63
00:03:05,240 --> 00:03:06,440
we're going to take the current version

64
00:03:06,440 --> 00:03:08,360
handler and we're going to move that to

65
00:03:08,360 --> 00:03:11,140
version 1 the idea here being that

66
00:03:11,140 --> 00:03:13,700
version 1 is the one that was already

67
00:03:13,700 --> 00:03:16,280
there so this will then become your

68
00:03:16,280 --> 00:03:18,140
default as well so anyone that doesn't

69
00:03:18,140 --> 00:03:21,470
update their code will later receive

70
00:03:21,470 --> 00:03:25,040
this and achieving that just by moving

71
00:03:25,040 --> 00:03:28,489
it into that folder version 2 gets

72
00:03:28,489 --> 00:03:31,700
really fancy almost as big of a

73
00:03:31,700 --> 00:03:34,910
announcement is happy version 8 today is

74
00:03:34,910 --> 00:03:37,459
that we now give you a status code and

75
00:03:37,459 --> 00:03:39,830
we we have our breaking change instead

76
00:03:39,830 --> 00:03:41,920
of the name in the version being

77
00:03:41,920 --> 00:03:45,110
directly ahead in in the response object

78
00:03:45,110 --> 00:03:47,440
we now have this application detail

79
00:03:47,440 --> 00:03:51,800
object so then when we move over to our

80
00:03:51,800 --> 00:03:54,950
version handler this is where we're

81
00:03:54,950 --> 00:03:58,010
going to start looking at the versioning

82
00:03:58,010 --> 00:04:02,239
okay so what we first of all do is we

83
00:04:02,239 --> 00:04:05,900
check to see whether an api version

84
00:04:05,900 --> 00:04:08,180
parameter has been certain in the route

85
00:04:08,180 --> 00:04:11,420
and we do a quick test to make sure that

86
00:04:11,420 --> 00:04:14,590
it just matches the v and then a number

87
00:04:14,590 --> 00:04:17,359
format with a regular expression just

88
00:04:17,359 --> 00:04:19,130
for security purposes never trust

89
00:04:19,130 --> 00:04:22,430
anything the user puts in and then we

90
00:04:22,430 --> 00:04:24,210
require

91
00:04:24,210 --> 00:04:28,380
the local folder that matches that

92
00:04:28,380 --> 00:04:32,039
version number here and we passed

93
00:04:32,039 --> 00:04:35,610
through the request and the reply below

94
00:04:35,610 --> 00:04:37,620
that we have our default full back as I

95
00:04:37,620 --> 00:04:40,680
mentioned before which says if no

96
00:04:40,680 --> 00:04:43,530
version is specified give them version 1

97
00:04:43,530 --> 00:04:46,009
because that's what they'll be expecting

98
00:04:46,009 --> 00:04:51,000
the info plugin we now have a slight

99
00:04:51,000 --> 00:04:52,440
change we've added in another route

100
00:04:52,440 --> 00:04:56,509
which has the API version specified and

101
00:04:56,509 --> 00:04:58,889
that's the only change that we do there

102
00:04:58,889 --> 00:05:01,050
we leave versions still pointing to this

103
00:05:01,050 --> 00:05:06,270
dispersion handler that we just saw so

104
00:05:06,270 --> 00:05:11,759
once we have this set up like so testing

105
00:05:11,759 --> 00:05:16,590
on this URL parameter if we curl as we

106
00:05:16,590 --> 00:05:18,210
did before we get the same response so

107
00:05:18,210 --> 00:05:19,650
we're not breaking anything for anybody

108
00:05:19,650 --> 00:05:24,539
else but if we put in v1 as our API

109
00:05:24,539 --> 00:05:27,300
version parameter again we get the same

110
00:05:27,300 --> 00:05:29,159
response because the default is version

111
00:05:29,159 --> 00:05:31,620
1 but then we change it to version two

112
00:05:31,620 --> 00:05:34,500
and now our responses from the the other

113
00:05:34,500 --> 00:05:38,250
handler when I was looking in subversion

114
00:05:38,250 --> 00:05:40,409
a pis there's a really good article by

115
00:05:40,409 --> 00:05:44,550
Troy hunt feel familiar with them on the

116
00:05:44,550 --> 00:05:46,650
three wrong ways because no matter which

117
00:05:46,650 --> 00:05:48,300
one you choose and you say i'm going to

118
00:05:48,300 --> 00:05:50,219
version my api this way somebody has a

119
00:05:50,219 --> 00:05:53,849
complaint about it so if you've done a

120
00:05:53,849 --> 00:05:55,320
bit ly URL so you can look up that

121
00:05:55,320 --> 00:05:57,150
article if you're interested he

122
00:05:57,150 --> 00:05:58,800
describes the the three different ways

123
00:05:58,800 --> 00:06:01,320
that he likes to version api's the first

124
00:06:01,320 --> 00:06:03,360
we've already covered but then they

125
00:06:03,360 --> 00:06:04,770
should actually say custom request

126
00:06:04,770 --> 00:06:07,380
header but everything's about customer

127
00:06:07,380 --> 00:06:09,630
where I work so apparently i just typed

128
00:06:09,630 --> 00:06:13,469
customer when i was making this so we're

129
00:06:13,469 --> 00:06:15,840
going to add in the ability to handle a

130
00:06:15,840 --> 00:06:18,000
custom request header that we've

131
00:06:18,000 --> 00:06:21,199
specified API dash version as a way to

132
00:06:21,199 --> 00:06:24,419
specify which versions the API we want

133
00:06:24,419 --> 00:06:27,539
the requests come to be handled with and

134
00:06:27,539 --> 00:06:30,180
that gets at this happens here and the

135
00:06:30,180 --> 00:06:32,370
second piece where again we test to make

136
00:06:32,370 --> 00:06:34,620
sure that it's nothing malicious coming

137
00:06:34,620 --> 00:06:36,449
in and then again we

138
00:06:36,449 --> 00:06:41,099
I require from the folder that matches

139
00:06:41,099 --> 00:06:45,360
the version that's passed in so here we

140
00:06:45,360 --> 00:06:47,969
are a curl to test it because doing

141
00:06:47,969 --> 00:06:49,379
things old-school is the way I like to

142
00:06:49,379 --> 00:06:53,430
do everything and we get that that

143
00:06:53,430 --> 00:06:56,009
version one back if we pass in version 2

144
00:06:56,009 --> 00:06:58,969
than the responses from the second

145
00:06:58,969 --> 00:07:01,699
iteration that we came up with for a

146
00:07:01,699 --> 00:07:05,039
fancy handler but you'll notice that the

147
00:07:05,039 --> 00:07:10,339
URL in both of those stays the same then

148
00:07:10,339 --> 00:07:14,360
the third method he suggests is the

149
00:07:14,360 --> 00:07:17,279
specifying accept error with the

150
00:07:17,279 --> 00:07:20,270
application and then the vendor in there

151
00:07:20,270 --> 00:07:24,180
which we can again test on in a similar

152
00:07:24,180 --> 00:07:27,539
manner and then require based on the

153
00:07:27,539 --> 00:07:31,379
value that gets passed in so again this

154
00:07:31,379 --> 00:07:33,270
is what it may look like for the example

155
00:07:33,270 --> 00:07:36,120
API company name I don't have a start-up

156
00:07:36,120 --> 00:07:37,559
you might have noticed I'm other than

157
00:07:37,559 --> 00:07:42,419
naming things this is an example of that

158
00:07:42,419 --> 00:07:44,360
as much as it is an example of the API

159
00:07:44,360 --> 00:07:48,180
so you pass in v1 and you get the first

160
00:07:48,180 --> 00:07:51,210
response and you pass in v2 and you get

161
00:07:51,210 --> 00:07:56,069
the second response if you can imagine

162
00:07:56,069 --> 00:07:59,819
here we've got this set up that I showed

163
00:07:59,819 --> 00:08:02,490
earlier where we just have these folders

164
00:08:02,490 --> 00:08:04,680
based in different places this is a very

165
00:08:04,680 --> 00:08:06,449
small application so that works out

166
00:08:06,449 --> 00:08:08,699
quite well if you can imagine in a

167
00:08:08,699 --> 00:08:10,649
larger application or in a large company

168
00:08:10,649 --> 00:08:11,759
where you have different teams doing

169
00:08:11,759 --> 00:08:14,039
different things each folder could

170
00:08:14,039 --> 00:08:17,490
actually be its own mpm module on a

171
00:08:17,490 --> 00:08:20,370
private repo or even the public one if

172
00:08:20,370 --> 00:08:23,310
that works for you devil-may-care and

173
00:08:23,310 --> 00:08:25,469
all that which could then have its own

174
00:08:25,469 --> 00:08:27,659
repository so everyone could work

175
00:08:27,659 --> 00:08:29,479
independently and then you can just say

176
00:08:29,479 --> 00:08:32,010
okay in this folder I want to pull in

177
00:08:32,010 --> 00:08:36,539
this version of that controller in this

178
00:08:36,539 --> 00:08:40,199
folder I want to pull in the next so

179
00:08:40,199 --> 00:08:41,909
finally go we'll be back through to the

180
00:08:41,909 --> 00:08:45,060
ends these are the various ways you can

181
00:08:45,060 --> 00:08:46,670
contact me if you

182
00:08:46,670 --> 00:08:50,690
are so inclined trying to put out as

183
00:08:50,690 --> 00:08:54,770
much as we've learned unhappy on medium

184
00:08:54,770 --> 00:08:56,420
at the moment so if you follow twitter

185
00:08:56,420 --> 00:08:59,060
you'll see those and then also at the

186
00:08:59,060 --> 00:09:01,550
bottom there is a repository with the

187
00:09:01,550 --> 00:09:03,200
example application for you to try out

188
00:09:03,200 --> 00:09:04,730
for yourself if you want to play around

189
00:09:04,730 --> 00:09:07,340
with it also the slides from today if

190
00:09:07,340 --> 00:09:09,370
you were just blown away by those and

191
00:09:09,370 --> 00:09:13,550
finally the concept of doing that

192
00:09:13,550 --> 00:09:15,470
testing on the three different ways you

193
00:09:15,470 --> 00:09:19,130
conversion your API I was a very hungry

194
00:09:19,130 --> 00:09:20,930
at lunch so I turned that into a plug-in

195
00:09:20,930 --> 00:09:22,550
itself so as soon as I've come up with a

196
00:09:22,550 --> 00:09:24,140
cool name for it which as I said I

197
00:09:24,140 --> 00:09:26,570
struggle with I'll publish that and show

