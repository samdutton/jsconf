1
00:00:00,750 --> 00:00:09,580

[Music]

2
00:00:09,590 --> 00:00:12,809
hi everyone I prepared this because the

3
00:00:12,809 --> 00:00:16,170
Wi-Fi was growing up on me so actually I

4
00:00:16,170 --> 00:00:21,539
wired in and now it works so my name is

5
00:00:21,539 --> 00:00:24,240
David crocheted and I'm excited to be

6
00:00:24,240 --> 00:00:26,039
here for two reasons

7
00:00:26,039 --> 00:00:28,010
number one I get to share the stage with

8
00:00:28,010 --> 00:00:31,410
so many amazing talented women and men

9
00:00:31,410 --> 00:00:34,110
in the CSS community so that's pretty

10
00:00:34,110 --> 00:00:34,590
awesome

11
00:00:34,590 --> 00:00:37,110
and also because today we're going to be

12
00:00:37,110 --> 00:00:39,840
exploring some areas of CSS that we

13
00:00:39,840 --> 00:00:41,040
frankly never thought was possible

14
00:00:41,040 --> 00:00:45,780
before I work for Microsoft so I'm

15
00:00:45,780 --> 00:00:47,969
obligated to tell you that edge does not

16
00:00:47,969 --> 00:00:52,590
suck okay and if it does I'm not on the

17
00:00:52,590 --> 00:00:57,539
edge team so it's not my fault a year

18
00:00:57,539 --> 00:00:59,789
and a half ago I entered a hackathon

19
00:00:59,789 --> 00:01:02,879
with my friends um it was an angular 2

20
00:01:02,879 --> 00:01:05,640
hackathon which almost sounds like fun

21
00:01:05,640 --> 00:01:08,310
and there were two main goals number one

22
00:01:08,310 --> 00:01:10,860
was learn the basics of angular 2 which

23
00:01:10,860 --> 00:01:13,619
I think right now is on version 5 or 13

24
00:01:13,619 --> 00:01:17,790
and also build a useful app using Engler

25
00:01:17,790 --> 00:01:20,939
2 so something like a to-do list or a

26
00:01:20,939 --> 00:01:26,390
weather app so we built tinder for goats

27
00:01:26,390 --> 00:01:30,390
this was our app idea you know not

28
00:01:30,390 --> 00:01:34,710
really viable but um I was delegated as

29
00:01:34,710 --> 00:01:37,320
the CSS person for doing this project

30
00:01:37,320 --> 00:01:39,840
and everyone else to the angular which I

31
00:01:39,840 --> 00:01:41,850
was thankful for and they were thankful

32
00:01:41,850 --> 00:01:44,880
that I was doing that CSS because as you

33
00:01:44,880 --> 00:01:46,860
all know the maximum number of CSS

34
00:01:46,860 --> 00:01:48,509
developers that could work on a

35
00:01:48,509 --> 00:01:50,310
stylesheet without messing it up is

36
00:01:50,310 --> 00:01:54,680
between zero and one and so I was at one

37
00:01:54,680 --> 00:01:58,350
and I managed to make the interface look

38
00:01:58,350 --> 00:02:00,509
as close to the attender in her face as

39
00:02:00,509 --> 00:02:03,509
possible with the exception of one thing

40
00:02:03,509 --> 00:02:06,930
and that's the whole swiping thing now I

41
00:02:06,930 --> 00:02:08,940
had only two hours to do this so I was

42
00:02:08,940 --> 00:02:11,790
trying to frantically figure out how do

43
00:02:11,790 --> 00:02:13,060
I do the whole

44
00:02:13,060 --> 00:02:15,670
swiping interaction so I was looking up

45
00:02:15,670 --> 00:02:17,710
tutorials and they said here's this

46
00:02:17,710 --> 00:02:20,560
jQuery thing you could use here's this

47
00:02:20,560 --> 00:02:23,410
ionic thing but none of those were going

48
00:02:23,410 --> 00:02:25,810
to work in Engler - just because angular

49
00:02:25,810 --> 00:02:30,310
2 was so new and so this led to a lot of

50
00:02:30,310 --> 00:02:32,800
questions first and foremost how our

51
00:02:32,800 --> 00:02:37,750
goats going to use this app and secondly

52
00:02:37,750 --> 00:02:40,180
how do you create interactive

53
00:02:40,180 --> 00:02:43,390
experiences in you know CSS and

54
00:02:43,390 --> 00:02:48,220
JavaScript so for years I challenged

55
00:02:48,220 --> 00:02:50,560
myself to create these complex

56
00:02:50,560 --> 00:02:52,450
interfaces and even animations like this

57
00:02:52,450 --> 00:02:57,250
box using only CSS and by doing that I

58
00:02:57,250 --> 00:03:00,280
got to see how much CSS could actually

59
00:03:00,280 --> 00:03:04,150
do because one year constraints to

60
00:03:04,150 --> 00:03:06,340
thinking inside the box and stuff

61
00:03:06,340 --> 00:03:08,620
outside the box you get to know the box

62
00:03:08,620 --> 00:03:11,800
really well so by doing this I got to

63
00:03:11,800 --> 00:03:13,570
you know look at all the ins and outs of

64
00:03:13,570 --> 00:03:16,660
CSS and all the little tricks that you

65
00:03:16,660 --> 00:03:18,670
could use in order to create complex

66
00:03:18,670 --> 00:03:20,980
things but eventually working in just

67
00:03:20,980 --> 00:03:24,310
CSS you hit a wall right and you

68
00:03:24,310 --> 00:03:28,510
discover that CSS is not powerful at all

69
00:03:28,510 --> 00:03:30,790
you know you need JavaScript to do

70
00:03:30,790 --> 00:03:33,010
complex interactions but I also

71
00:03:33,010 --> 00:03:35,560
discovered that CSS not being powerful

72
00:03:35,560 --> 00:03:39,040
is a good thing and there's a principle

73
00:03:39,040 --> 00:03:41,620
of least power that the w3c has where it

74
00:03:41,620 --> 00:03:43,930
says to use a language with the least

75
00:03:43,930 --> 00:03:46,450
power in order to express what you want

76
00:03:46,450 --> 00:03:48,820
to do so CSS would be that language for

77
00:03:48,820 --> 00:03:56,470
styling now on CSS HTML and JavaScript

78
00:03:56,470 --> 00:03:58,450
are pretty much the bread and butter of

79
00:03:58,450 --> 00:04:00,150
web apps which is completely different

80
00:04:00,150 --> 00:04:03,910
than Android apps or iOS apps where is

81
00:04:03,910 --> 00:04:09,560
some Java and Swift or objective-c and

82
00:04:09,570 --> 00:04:11,410
we're in an age right now where

83
00:04:11,410 --> 00:04:13,299
progressive web apps are becoming more

84
00:04:13,299 --> 00:04:15,549
and more important and alliance between

85
00:04:15,549 --> 00:04:19,000
web apps and native apps are being

86
00:04:19,000 --> 00:04:21,609
blurred and because of this micro

87
00:04:21,609 --> 00:04:24,160
interactions are crucial not only

88
00:04:24,160 --> 00:04:26,040
because users come to a

89
00:04:26,040 --> 00:04:28,710
affected because users wants to be able

90
00:04:28,710 --> 00:04:30,660
to play with an interface and move it

91
00:04:30,660 --> 00:04:32,190
and pan it and do all sorts of stuff

92
00:04:32,190 --> 00:04:34,440
with it but also because it reduces

93
00:04:34,440 --> 00:04:39,540
cognitive load so what if what if web

94
00:04:39,540 --> 00:04:43,620
apps felt like native apps and if we

95
00:04:43,620 --> 00:04:46,230
could think about that how exactly can

96
00:04:46,230 --> 00:04:49,650
we get there now Android and iOS have a

97
00:04:49,650 --> 00:04:52,410
slight advantage you know you have core

98
00:04:52,410 --> 00:04:54,180
animations you have layouts you have

99
00:04:54,180 --> 00:04:59,190
property animations and they they handle

100
00:04:59,190 --> 00:05:02,160
nated interactions like touch and voice

101
00:05:02,160 --> 00:05:05,460
and all sorts of stuff natively within

102
00:05:05,460 --> 00:05:08,010
their api's the web is playing catch-up

103
00:05:08,010 --> 00:05:11,310
but it still has a little while to go so

104
00:05:11,310 --> 00:05:14,250
think about this what if interactive web

105
00:05:14,250 --> 00:05:18,080
user interfaces were easier to make

106
00:05:18,080 --> 00:05:21,180
right and what if they were easier to

107
00:05:21,180 --> 00:05:28,580
make with CSS so you all might know that

108
00:05:28,580 --> 00:05:30,800
CSS is awesome

109
00:05:30,800 --> 00:05:35,460
but some people don't think so some

110
00:05:35,460 --> 00:05:37,770
people are like and no CSS has its

111
00:05:37,770 --> 00:05:41,760
quirks right and there's you know some

112
00:05:41,760 --> 00:05:42,960
of the things that we sometimes struggle

113
00:05:42,960 --> 00:05:46,050
with CSS but the thing is if you you

114
00:05:46,050 --> 00:05:47,490
know read the spec for once in your life

115
00:05:47,490 --> 00:05:49,770
you could fix a lot of these problems

116
00:05:49,770 --> 00:05:52,440
but that doesn't stop people from

117
00:05:52,440 --> 00:05:55,470
thinking that CSS is just awful so

118
00:05:55,470 --> 00:05:58,590
instead today what I want you to do at

119
00:05:58,590 --> 00:06:01,560
least for the next 24 minutes and 13 12

120
00:06:01,560 --> 00:06:05,640
seconds is to think of CSS as fun and

121
00:06:05,640 --> 00:06:07,710
we're going to make it fun by

122
00:06:07,710 --> 00:06:10,230
introducing functional and reactive

123
00:06:10,230 --> 00:06:15,510
programming right and the techniques I'm

124
00:06:15,510 --> 00:06:17,730
going to show you are you know going to

125
00:06:17,730 --> 00:06:21,960
be applied anywhere so we're going to be

126
00:06:21,960 --> 00:06:24,020
talking about CSS variables and

127
00:06:24,020 --> 00:06:27,030
functional and reactive programming what

128
00:06:27,030 --> 00:06:28,440
we're not going to be talking about is

129
00:06:28,440 --> 00:06:32,610
CSS JavaScript that means later and

130
00:06:32,610 --> 00:06:33,630
we're not going to be talking about

131
00:06:33,630 --> 00:06:35,970
frameworks such as react angular and

132
00:06:35,970 --> 00:06:37,830
view and other things that you might be

133
00:06:37,830 --> 00:06:39,510
using to build web apps

134
00:06:39,510 --> 00:06:41,460
the reason is because the techniques I'm

135
00:06:41,460 --> 00:06:43,050
going to show you can be applied

136
00:06:43,050 --> 00:06:48,030
anywhere so as you might know you know

137
00:06:48,030 --> 00:06:51,390
on the subject of CSS MJS there's only

138
00:06:51,390 --> 00:06:53,400
two hard things in computer science you

139
00:06:53,400 --> 00:06:54,840
know of course the first one is naming

140
00:06:54,840 --> 00:06:55,470
things

141
00:06:55,470 --> 00:07:02,840
now CSS MJS aims to tackle this one

142
00:07:02,840 --> 00:07:05,400
naming things so how many of you have

143
00:07:05,400 --> 00:07:08,550
actually used something like CSS modules

144
00:07:08,550 --> 00:07:11,910
or I'll know any of the other million

145
00:07:11,910 --> 00:07:14,610
CSS MJS things how many of you use it

146
00:07:14,610 --> 00:07:17,280
alright so you might know how it works

147
00:07:17,280 --> 00:07:20,520
right you have a style sheet or you have

148
00:07:20,520 --> 00:07:23,670
something where you define styles and it

149
00:07:23,670 --> 00:07:26,100
takes whatever class name you give it

150
00:07:26,100 --> 00:07:29,330
and it turns it into complete gibberish

151
00:07:29,330 --> 00:07:33,690
and this way it tackles the naming

152
00:07:33,690 --> 00:07:35,880
things problems and it also tackles the

153
00:07:35,880 --> 00:07:38,610
problem of global styles by isolating

154
00:07:38,610 --> 00:07:43,320
this by creating unintelligible name not

155
00:07:43,320 --> 00:07:51,180
part and also there is there were some

156
00:07:51,180 --> 00:07:54,030
solutions that were proposed a long time

157
00:07:54,030 --> 00:07:56,400
ago in Internet Explorer 7 we had

158
00:07:56,400 --> 00:07:58,640
something called CSS expressions and

159
00:07:58,640 --> 00:08:02,190
this is where we put JavaScript inside

160
00:08:02,190 --> 00:08:03,900
of CSS so it's actually sort of the

161
00:08:03,900 --> 00:08:06,620
complete opposite of doing CSS MJS and

162
00:08:06,620 --> 00:08:09,690
over here is code to vertically Center

163
00:08:09,690 --> 00:08:12,150
this div in the body so this goes to

164
00:08:12,150 --> 00:08:13,830
show you how hard it is to vertically

165
00:08:13,830 --> 00:08:16,590
Center something in Internet Explorer

166
00:08:16,590 --> 00:08:18,980
where we have to add all of that and

167
00:08:18,980 --> 00:08:21,780
Netscape and not wanting to be left out

168
00:08:21,780 --> 00:08:23,640
of the party came out with its own

169
00:08:23,640 --> 00:08:26,760
JavaScript style sheets where instead of

170
00:08:26,760 --> 00:08:29,880
using CSS it just used plain JavaScript

171
00:08:29,880 --> 00:08:33,660
in order to style anything and if you're

172
00:08:33,660 --> 00:08:35,700
wondering why Netscape died it's because

173
00:08:35,700 --> 00:08:41,970
of this but now today we have CSS

174
00:08:41,970 --> 00:08:44,460
variables also known as CSS custom

175
00:08:44,460 --> 00:08:46,860
properties but let's be honest no one's

176
00:08:46,860 --> 00:08:49,080
ever going to call it that and

177
00:08:49,080 --> 00:08:51,960
thankfully for all the browser's that we

178
00:08:51,960 --> 00:08:53,140
care about its

179
00:08:53,140 --> 00:08:57,210
supported which is really really awesome

180
00:08:57,210 --> 00:09:00,280
unfortunately in Internet Explorer if

181
00:09:00,280 --> 00:09:03,180
you have to support Internet Explorer

182
00:09:03,180 --> 00:09:05,830
variables aren't supported variables

183
00:09:05,830 --> 00:09:07,780
don't work but that's ok cuz nothing

184
00:09:07,780 --> 00:09:12,690
else works and there's also Opera Mini 2

185
00:09:12,690 --> 00:09:14,770
all right so how many of you actually

186
00:09:14,770 --> 00:09:17,830
know what CSS variables are I I would

187
00:09:17,830 --> 00:09:20,500
assume most of you right because er SPSS

188
00:09:20,500 --> 00:09:22,510
conference you want to you know be

189
00:09:22,510 --> 00:09:25,360
up-to-date on the latest and greatest so

190
00:09:25,360 --> 00:09:27,460
here's the CSS variable in case you

191
00:09:27,460 --> 00:09:29,830
don't know it starts with two dashes and

192
00:09:29,830 --> 00:09:31,900
the reason it starts with two dashes is

193
00:09:31,900 --> 00:09:34,720
actually a really important reason I

194
00:09:34,720 --> 00:09:36,460
don't know what that reason is

195
00:09:36,460 --> 00:09:39,010
but it I'm sure it's important right now

196
00:09:39,010 --> 00:09:42,280
this does nothing until you actually

197
00:09:42,280 --> 00:09:44,620
apply the variable inside of a ver

198
00:09:44,620 --> 00:09:47,740
statement like that and so this 150

199
00:09:47,740 --> 00:09:49,810
pixels is applied to the transform and

200
00:09:49,810 --> 00:09:51,940
so it moves one hundreds of B pixels to

201
00:09:51,940 --> 00:09:56,020
the right but what if we do this what if

202
00:09:56,020 --> 00:09:59,010
we took the unit's out of the variable

203
00:09:59,010 --> 00:10:03,130
right now we have to use calc and when

204
00:10:03,130 --> 00:10:05,380
you're using CSS variables the more you

205
00:10:05,380 --> 00:10:06,700
use it you're going to discover that

206
00:10:06,700 --> 00:10:09,100
calc is going to be your best friend

207
00:10:09,100 --> 00:10:12,430
with CSS variables here's why we did

208
00:10:12,430 --> 00:10:16,600
this it's because you can set to use

209
00:10:16,600 --> 00:10:19,810
this variables using javascript all you

210
00:10:19,810 --> 00:10:22,420
have to do is you take the elements the

211
00:10:22,420 --> 00:10:24,910
node you do the nodes that style that

212
00:10:24,910 --> 00:10:27,010
set property and then you can set that

213
00:10:27,010 --> 00:10:30,100
to get this variable to any number or

214
00:10:30,100 --> 00:10:33,430
string that works inside of CSS so in

215
00:10:33,430 --> 00:10:34,990
this case I'm using a library called

216
00:10:34,990 --> 00:10:36,880
hammer and I love hammered because

217
00:10:36,880 --> 00:10:40,320
hammer handles touches pans taps any

218
00:10:40,320 --> 00:10:43,900
interaction with your fingers so so what

219
00:10:43,900 --> 00:10:45,730
emulates mobile experience is really

220
00:10:45,730 --> 00:10:48,370
well and over here I'm just setting it

221
00:10:48,370 --> 00:10:51,340
to recognize when I pan left and right I

222
00:10:51,340 --> 00:10:54,190
take the Delta X from that and I set it

223
00:10:54,190 --> 00:10:58,690
to that Delta X variable and so now I

224
00:10:58,690 --> 00:11:00,910
could use that variable inside of this

225
00:11:00,910 --> 00:11:03,880
transformed there's one problem here

226
00:11:03,880 --> 00:11:06,640
though and that's when I dupe an end

227
00:11:06,640 --> 00:11:08,440
I set it to zero because obviously we're

228
00:11:08,440 --> 00:11:10,630
not panning anymore and just jumped to

229
00:11:10,630 --> 00:11:13,450
the mill this is where the magic of CSS

230
00:11:13,450 --> 00:11:16,570
comes in we can set another variable

231
00:11:16,570 --> 00:11:20,020
called panning and do sort of like a a

232
00:11:20,020 --> 00:11:25,120
boolean CSS where we set it to 1 if we

233
00:11:25,120 --> 00:11:28,540
are panning and we set to 0 if we're not

234
00:11:28,540 --> 00:11:32,080
panning and over here down spawn don't

235
00:11:32,080 --> 00:11:34,570
know if you can see but we set the

236
00:11:34,570 --> 00:11:39,010
transition duration to 600 milliseconds

237
00:11:39,010 --> 00:11:42,370
if we're not panning and we set to 0 if

238
00:11:42,370 --> 00:11:44,590
we are panning because the movement is

239
00:11:44,590 --> 00:11:47,410
controlled with our fingers and you

240
00:11:47,410 --> 00:11:51,880
might see this complex formula over here

241
00:11:51,880 --> 00:11:56,170
and this reverses whatever I passed into

242
00:11:56,170 --> 00:11:58,660
panning so if I am panning negative 1

243
00:11:58,660 --> 00:12:01,300
times 1 plus 1 is 0 so it's the opposite

244
00:12:01,300 --> 00:12:03,700
if I'm not handing negative 1 times 0

245
00:12:03,700 --> 00:12:07,180
plus 1 is 1 so I am caning I like to

246
00:12:07,180 --> 00:12:08,800
call this boolean Stiles

247
00:12:08,800 --> 00:12:11,770
also known as BS not not to be confused

248
00:12:11,770 --> 00:12:16,520
with the other BS you know bootstrap

249
00:12:16,530 --> 00:12:19,450
so here's I'm just kidding by the way

250
00:12:19,450 --> 00:12:24,220
here's the real example over here and so

251
00:12:24,220 --> 00:12:26,290
I'm just using my mouse to just go back

252
00:12:26,290 --> 00:12:28,990
and forth and you can see it works

253
00:12:28,990 --> 00:12:34,450
pretty well if you're clapping out that

254
00:12:34,450 --> 00:12:36,900
I'm really excited because there's more

255
00:12:36,900 --> 00:12:39,640
you might be asking why did I use the SS

256
00:12:39,640 --> 00:12:40,720
variables to do this

257
00:12:40,720 --> 00:12:44,020
why can I just set it directly using

258
00:12:44,020 --> 00:12:47,440
javascript so there's a few reasons if

259
00:12:47,440 --> 00:12:49,750
you've ever tried to use media queries

260
00:12:49,750 --> 00:12:54,040
in JavaScript it's a complete pain like

261
00:12:54,040 --> 00:12:56,350
especially trying to detect when the

262
00:12:56,350 --> 00:12:58,510
window resizes listening for that

263
00:12:58,510 --> 00:13:00,970
putting in the requestanimationframe so

264
00:13:00,970 --> 00:13:02,890
it doesn't block your UI all the time

265
00:13:02,890 --> 00:13:05,110
and there's also things like

266
00:13:05,110 --> 00:13:08,650
prefer to reduce motion which you know I

267
00:13:08,650 --> 00:13:09,910
don't even know how to do it in

268
00:13:09,910 --> 00:13:11,500
JavaScript but I'm sure that there's a

269
00:13:11,500 --> 00:13:14,740
way and so you could use media queries

270
00:13:14,740 --> 00:13:17,050
in order to control your CSS variables

271
00:13:17,050 --> 00:13:19,340
this is great because that means

272
00:13:19,340 --> 00:13:21,080
that whatever values you're sending

273
00:13:21,080 --> 00:13:23,450
through JavaScript you're not married to

274
00:13:23,450 --> 00:13:25,070
those values you're not committed to

275
00:13:25,070 --> 00:13:26,900
them you could use them however you want

276
00:13:26,900 --> 00:13:30,110
in your CSS files and what this also

277
00:13:30,110 --> 00:13:31,700
means is that you could use them in

278
00:13:31,700 --> 00:13:34,160
pseudo elements I recognize I said

279
00:13:34,160 --> 00:13:36,530
pseudo selectors over here I was wrong

280
00:13:36,530 --> 00:13:39,470
I'm sorry don't attack me on Twitter or

281
00:13:39,470 --> 00:13:41,630
anything but yeah you could use them

282
00:13:41,630 --> 00:13:43,760
inside before and after which makes

283
00:13:43,760 --> 00:13:46,790
things really easy of course you could

284
00:13:46,790 --> 00:13:48,590
sort of emulate before and after

285
00:13:48,590 --> 00:13:51,530
elements in JavaScript but don't do it

286
00:13:51,530 --> 00:13:53,140
please

287
00:13:53,140 --> 00:13:58,100
there's also performance it's much much

288
00:13:58,100 --> 00:14:02,120
much faster to set a CSS variable on a

289
00:14:02,120 --> 00:14:05,270
parent's container that is inherited by

290
00:14:05,270 --> 00:14:08,690
all of its child and descendant elements

291
00:14:08,690 --> 00:14:11,690
then having to go through each and every

292
00:14:11,690 --> 00:14:13,580
single one of those elements that has

293
00:14:13,580 --> 00:14:16,160
that style and set them one by one and

294
00:14:16,160 --> 00:14:18,740
so here's a benchmark where it shows

295
00:14:18,740 --> 00:14:22,160
that more than twice as fast as doing it

296
00:14:22,160 --> 00:14:25,040
with inline Styles if you don't believe

297
00:14:25,040 --> 00:14:27,710
me you could just click this link but

298
00:14:27,710 --> 00:14:29,570
don't tweet us because I will get in

299
00:14:29,570 --> 00:14:34,040
trouble and there's also in section two

300
00:14:34,040 --> 00:14:36,530
you could open up your dev tools and you

301
00:14:36,530 --> 00:14:38,810
could immediately inspect via CSS

302
00:14:38,810 --> 00:14:41,900
variables apply through anywhere just so

303
00:14:41,900 --> 00:14:44,630
you could see that it doesn't matter

304
00:14:44,630 --> 00:14:46,520
where these values are coming from right

305
00:14:46,520 --> 00:14:48,980
you could just modify them directly and

306
00:14:48,980 --> 00:14:51,250
be able to visually see immediately

307
00:14:51,250 --> 00:14:53,450
what's happening when you change those

308
00:14:53,450 --> 00:14:57,190
values which is much harder to do in

309
00:14:57,190 --> 00:15:03,170
JavaScript so what if instead you you

310
00:15:03,170 --> 00:15:07,340
wanted to react to any events at any

311
00:15:07,340 --> 00:15:10,660
time that could come from anywhere in

312
00:15:10,660 --> 00:15:13,190
order to create rich interactive user

313
00:15:13,190 --> 00:15:16,310
interfaces in an expressive declarative

314
00:15:16,310 --> 00:15:22,100
way so this is where functional reactive

315
00:15:22,100 --> 00:15:24,260
animations come in I could tell you're

316
00:15:24,260 --> 00:15:27,700
really excited so hold on there

317
00:15:27,700 --> 00:15:31,700
Proactive animations here's our reactive

318
00:15:31,700 --> 00:15:35,720
animations are they are animations that

319
00:15:35,720 --> 00:15:38,570
involve discrete changes due to

320
00:15:38,570 --> 00:15:43,010
potentially continuous events so if

321
00:15:43,010 --> 00:15:44,480
you're a musician one of the best ways

322
00:15:44,480 --> 00:15:47,480
to think about this is sheet music sound

323
00:15:47,480 --> 00:15:50,060
is conceptually continuous right you

324
00:15:50,060 --> 00:15:52,450
play a note it goes on and it's

325
00:15:52,450 --> 00:15:55,580
basically an infinite series of sound

326
00:15:55,580 --> 00:15:56,060
waves

327
00:15:56,060 --> 00:15:58,580
however sheet music is like you know

328
00:15:58,580 --> 00:16:01,100
single dots on the page that represents

329
00:16:01,100 --> 00:16:03,590
what you play and animations are sort of

330
00:16:03,590 --> 00:16:04,430
the same way

331
00:16:04,430 --> 00:16:07,040
animations are conceptually continuous

332
00:16:07,040 --> 00:16:10,010
right but there's specific keyframes

333
00:16:10,010 --> 00:16:12,260
where you define all of these animations

334
00:16:12,260 --> 00:16:14,630
and so that's where the discrete changes

335
00:16:14,630 --> 00:16:18,500
are now this idea is not new it's

336
00:16:18,500 --> 00:16:20,570
actually really really old coming from

337
00:16:20,570 --> 00:16:23,650
1997 a year after

338
00:16:23,650 --> 00:16:26,450
well visit CSS or the web was born or

339
00:16:26,450 --> 00:16:29,480
something like that and in this paper

340
00:16:29,480 --> 00:16:32,270
which is very much an academic paper

341
00:16:32,270 --> 00:16:34,190
there's one quote where it says by

342
00:16:34,190 --> 00:16:36,380
allowing programmers to express the what

343
00:16:36,380 --> 00:16:38,900
of an interactive animation one can hope

344
00:16:38,900 --> 00:16:42,230
to automate the how of its presentation

345
00:16:42,230 --> 00:16:44,360
and I quoted this because it's the only

346
00:16:44,360 --> 00:16:46,190
paragraph I understood in this entire

347
00:16:46,190 --> 00:16:50,630
paper but also because it um and this is

348
00:16:50,630 --> 00:16:52,760
her website by the way this is what they

349
00:16:52,760 --> 00:16:54,410
did with reactive animations we're not

350
00:16:54,410 --> 00:16:56,360
going to be doing this this is just

351
00:16:56,360 --> 00:17:00,200
weird but it's important to understand

352
00:17:00,200 --> 00:17:02,180
this because it blurs the lines between

353
00:17:02,180 --> 00:17:05,330
development and design which is really

354
00:17:05,330 --> 00:17:07,640
good so in JavaScript we have what's

355
00:17:07,640 --> 00:17:09,590
called a value which could be anything

356
00:17:09,590 --> 00:17:11,990
it could be a number boolean value it

357
00:17:11,990 --> 00:17:14,570
could be an object and if we have

358
00:17:14,570 --> 00:17:17,390
multiple you know a multiple collection

359
00:17:17,390 --> 00:17:19,850
of these values we have an array or an

360
00:17:19,850 --> 00:17:21,250
iterable

361
00:17:21,250 --> 00:17:26,060
now this is the the spectrum of things

362
00:17:26,060 --> 00:17:28,340
that happen immediately we get this

363
00:17:28,340 --> 00:17:30,740
value immediately we get each of those

364
00:17:30,740 --> 00:17:33,590
values in the array immediately now what

365
00:17:33,590 --> 00:17:35,260
about things that happen over time a

366
00:17:35,260 --> 00:17:37,910
single value can be represented as a

367
00:17:37,910 --> 00:17:38,980
promise

368
00:17:38,980 --> 00:17:41,530
you get a value but it doesn't come

369
00:17:41,530 --> 00:17:43,510
immediately it comes eventually maybe

370
00:17:43,510 --> 00:17:45,880
after three seconds we're going to be

371
00:17:45,880 --> 00:17:49,240
talking about today is observables which

372
00:17:49,240 --> 00:17:52,000
are multiple values just like an array

373
00:17:52,000 --> 00:17:58,480
that all occur over time so we're going

374
00:17:58,480 --> 00:18:00,550
to be implementing observables with rxjs

375
00:18:00,550 --> 00:18:03,760
and this is a library that follows the

376
00:18:03,760 --> 00:18:05,800
observable spec so this is something

377
00:18:05,800 --> 00:18:08,350
that could very well be a native part of

378
00:18:08,350 --> 00:18:11,890
the web but this is essentially a

379
00:18:11,890 --> 00:18:13,960
polyfill with a whole bunch of goodies

380
00:18:13,960 --> 00:18:18,400
built into it so if we do um observable

381
00:18:18,400 --> 00:18:22,000
from event we could represent mouth

382
00:18:22,000 --> 00:18:25,180
moves for example on the box by grabbing

383
00:18:25,180 --> 00:18:28,540
the client X and the client Y and being

384
00:18:28,540 --> 00:18:30,340
able to observe each one of those

385
00:18:30,340 --> 00:18:33,240
positions on the map we could use our

386
00:18:33,240 --> 00:18:36,070
server both from a bent pattern for

387
00:18:36,070 --> 00:18:38,560
doing the same thing and this is for

388
00:18:38,560 --> 00:18:40,000
things that are not natively Dom

389
00:18:40,000 --> 00:18:43,660
elements so if I'm using hammer Jas then

390
00:18:43,660 --> 00:18:46,300
I could um I could grab the Delta X

391
00:18:46,300 --> 00:18:49,080
Delta Y values by passing in a callback

392
00:18:49,080 --> 00:18:52,450
into this from a bent pattern and here's

393
00:18:52,450 --> 00:18:56,230
why this is so powerful it's because we

394
00:18:56,230 --> 00:18:58,630
could operate and compose these

395
00:18:58,630 --> 00:19:01,840
observable values so if you think of

396
00:19:01,840 --> 00:19:03,790
this as an array of value set happening

397
00:19:03,790 --> 00:19:06,750
over time and we get all of these events

398
00:19:06,750 --> 00:19:09,640
represented as balls we could map each

399
00:19:09,640 --> 00:19:11,440
of these false that's one of the

400
00:19:11,440 --> 00:19:13,450
operators and transform it into

401
00:19:13,450 --> 00:19:17,620
something else such as a square but

402
00:19:17,620 --> 00:19:18,880
because we're working over time

403
00:19:18,880 --> 00:19:22,570
we could also delay or do other time

404
00:19:22,570 --> 00:19:24,460
like transformations such as the

405
00:19:24,460 --> 00:19:26,500
bouncing and throttling and buffering

406
00:19:26,500 --> 00:19:28,600
things that you can't do with an array

407
00:19:28,600 --> 00:19:31,150
because in the array exists at only a

408
00:19:31,150 --> 00:19:34,020
single point in time and not over time

409
00:19:34,020 --> 00:19:36,490
there's also filtering of course just

410
00:19:36,490 --> 00:19:39,640
like an array and there's a important

411
00:19:39,640 --> 00:19:42,370
operator called scan and what scan does

412
00:19:42,370 --> 00:19:45,310
is it takes the previous value and it

413
00:19:45,310 --> 00:19:47,710
combines it with the current value so

414
00:19:47,710 --> 00:19:50,440
over here I'm just adding 1 plus 1 is 2

415
00:19:50,440 --> 00:19:52,300
2 plus 1 is 3

416
00:19:52,300 --> 00:19:55,360
three plus five is eight and so on and

417
00:19:55,360 --> 00:19:57,550
this is a distancing operator that I use

418
00:19:57,550 --> 00:20:02,590
a lot when I use rxjs so these are

419
00:20:02,590 --> 00:20:05,980
called marble diagrams and they're fun

420
00:20:05,980 --> 00:20:07,570
to play with because you could visually

421
00:20:07,570 --> 00:20:09,910
see on this website arced marbles com

422
00:20:09,910 --> 00:20:12,250
how observables work together with

423
00:20:12,250 --> 00:20:14,980
different operators I personally like to

424
00:20:14,980 --> 00:20:20,680
call them observables so I'm subscribing

425
00:20:20,680 --> 00:20:22,600
to observables is where the magic

426
00:20:22,600 --> 00:20:24,700
actually happens once you have an

427
00:20:24,700 --> 00:20:30,220
observable if you hit subscribe you get

428
00:20:30,220 --> 00:20:32,650
each value as they come in

429
00:20:32,650 --> 00:20:35,050
so it's sort of like a callback except

430
00:20:35,050 --> 00:20:37,600
by doing this you could isolate all of

431
00:20:37,600 --> 00:20:39,490
your side effects and changes into one

432
00:20:39,490 --> 00:20:42,790
dot subscribe and be observable

433
00:20:42,790 --> 00:20:45,190
the other good thing about is you define

434
00:20:45,190 --> 00:20:47,530
it but it doesn't do anything unless it

435
00:20:47,530 --> 00:20:50,320
absolutely has to so it's really lazy

436
00:20:50,320 --> 00:20:54,070
it's sort of like me all right so here's

437
00:20:54,070 --> 00:20:59,410
an example of using observables to get

438
00:20:59,410 --> 00:21:02,740
the get something else get a change

439
00:21:02,740 --> 00:21:06,400
value from this this range over here and

440
00:21:06,400 --> 00:21:08,140
the reason I'm doing this is because I

441
00:21:08,140 --> 00:21:10,360
got a comment on this pen that said this

442
00:21:10,360 --> 00:21:12,340
dog is a little bit hyperactive but it's

443
00:21:12,340 --> 00:21:15,550
cool and so I added a range slider in

444
00:21:15,550 --> 00:21:19,030
order to slow the animation down and you

445
00:21:19,030 --> 00:21:20,830
can see where I'm doing that over here

446
00:21:20,830 --> 00:21:24,010
I'm grabbing this value and I'm using it

447
00:21:24,010 --> 00:21:27,850
to define each of the durations I didn't

448
00:21:27,850 --> 00:21:29,320
realize I also made so that it goes

449
00:21:29,320 --> 00:21:35,260
super fast though too so yeah now we

450
00:21:35,260 --> 00:21:38,320
could also add physics all I'm doing is

451
00:21:38,320 --> 00:21:41,050
adding a dinette dynamics Ras library in

452
00:21:41,050 --> 00:21:43,690
order to create a physics observable

453
00:21:43,690 --> 00:21:47,440
every time I stop panning so when I do

454
00:21:47,440 --> 00:21:51,310
that instead of just going smoothly back

455
00:21:51,310 --> 00:21:53,800
to the location it bounces right back

456
00:21:53,800 --> 00:21:56,590
this has been controlled entirely with

457
00:21:56,590 --> 00:21:58,960
CSS variables the only thing that Java

458
00:21:58,960 --> 00:22:01,330
scripts doing is sending over the values

459
00:22:01,330 --> 00:22:03,550
so now we have complete control of

460
00:22:03,550 --> 00:22:05,799
styling and we could use those values

461
00:22:05,799 --> 00:22:09,009
however we want here's another example

462
00:22:09,009 --> 00:22:11,190
where I'm actually using

463
00:22:11,190 --> 00:22:13,809
requestanimationframe in an observable

464
00:22:13,809 --> 00:22:19,119
in order to to tilt this clock in a

465
00:22:19,119 --> 00:22:22,299
smooth way and so you could see that

466
00:22:22,299 --> 00:22:23,649
over here

467
00:22:23,649 --> 00:22:26,470
smooth mouse so if I change this and I

468
00:22:26,470 --> 00:22:29,830
just used now then you're going to see

469
00:22:29,830 --> 00:22:32,320
that it's very very rigid and this is

470
00:22:32,320 --> 00:22:34,330
one of the beauties of being able to

471
00:22:34,330 --> 00:22:38,409
compose observables and control them

472
00:22:38,409 --> 00:22:44,210
declaratively just like you do with CSS

473
00:22:44,220 --> 00:22:47,139
alright here's another example that I

474
00:22:47,139 --> 00:22:49,480
did recently where I'm using linear

475
00:22:49,480 --> 00:22:53,230
interpolation to smoothly go from one

476
00:22:53,230 --> 00:22:56,109
place to another and this is also being

477
00:22:56,109 --> 00:22:59,859
controlled with CSS variables as well so

478
00:22:59,859 --> 00:23:01,659
I have a bunch of things that I'm

479
00:23:01,659 --> 00:23:05,489
listening to right touches touchend

480
00:23:05,489 --> 00:23:08,109
numbers which is whenever the number

481
00:23:08,109 --> 00:23:10,570
changes in the range and I'm making it

482
00:23:10,570 --> 00:23:14,109
smooth by using lerp where on by the way

483
00:23:14,109 --> 00:23:15,519
if you don't know what lerp is linear

484
00:23:15,519 --> 00:23:17,350
interpolation it's just if you're going

485
00:23:17,350 --> 00:23:19,419
from one place to another instead of

486
00:23:19,419 --> 00:23:21,399
from jumping from one place to another

487
00:23:21,399 --> 00:23:23,379
you go part of the way there and then a

488
00:23:23,379 --> 00:23:25,539
little closer and a little closer so you

489
00:23:25,539 --> 00:23:28,090
get this really smooth effect going on

490
00:23:28,090 --> 00:23:35,909
here and when my last things I made is

491
00:23:35,909 --> 00:23:40,330
this app which uses a lot of observables

492
00:23:40,330 --> 00:23:44,889
and a lot of CSS variables too and this

493
00:23:44,889 --> 00:23:47,739
is one of the reasons I'm using CSS

494
00:23:47,739 --> 00:23:49,960
variables is because for example that's

495
00:23:49,960 --> 00:23:52,749
Delta X value for going left and right

496
00:23:52,749 --> 00:23:55,570
that's the only value value need to send

497
00:23:55,570 --> 00:23:58,269
in JavaScript in order to control so

498
00:23:58,269 --> 00:24:00,970
many things for example I'm controlling

499
00:24:00,970 --> 00:24:02,759
the gradients in the background I'm

500
00:24:02,759 --> 00:24:06,190
controlling the contents inside and also

501
00:24:06,190 --> 00:24:08,409
controlling the text inside here so

502
00:24:08,409 --> 00:24:10,779
there's a lot of things and a lot of

503
00:24:10,779 --> 00:24:12,990
moving parts that are happening with

504
00:24:12,990 --> 00:24:16,330
just that single value that single CSS

505
00:24:16,330 --> 00:24:19,779
variable now there's a really

506
00:24:19,779 --> 00:24:23,320
good reason why we want to move to CSS

507
00:24:23,320 --> 00:24:25,210
very or not CSS variables but

508
00:24:25,210 --> 00:24:28,659
observables and be able to expressively

509
00:24:28,659 --> 00:24:32,349
and declaratively define these

510
00:24:32,349 --> 00:24:35,469
animations and these interactions this

511
00:24:35,469 --> 00:24:38,200
is a charts by the material motion team

512
00:24:38,200 --> 00:24:41,229
at Google and it shows the typical

513
00:24:41,229 --> 00:24:44,109
process for what happens when we create

514
00:24:44,109 --> 00:24:46,929
a motion design designers prototype that

515
00:24:46,929 --> 00:24:48,460
they get feedback they use that feedback

516
00:24:48,460 --> 00:24:50,320
to continue the prototyping and

517
00:24:50,320 --> 00:24:51,969
eventually they hand off that motion

518
00:24:51,969 --> 00:24:54,309
design to a developer or a team of a

519
00:24:54,309 --> 00:24:57,339
team of developers and from there that's

520
00:24:57,339 --> 00:25:02,499
when the engineering starts instead we

521
00:25:02,499 --> 00:25:06,219
could narrow that cycle and have the

522
00:25:06,219 --> 00:25:09,190
prototype be an actual working prototype

523
00:25:09,190 --> 00:25:13,119
using real code that both engineers and

524
00:25:13,119 --> 00:25:16,419
designers can work on in tandem and by

525
00:25:16,419 --> 00:25:19,419
doing this and by allowing the feedback

526
00:25:19,419 --> 00:25:21,309
cycle to be part of the development

527
00:25:21,309 --> 00:25:23,950
instead of just part of the prototyping

528
00:25:23,950 --> 00:25:27,580
you ship faster and that's one of the

529
00:25:27,580 --> 00:25:31,570
main goals right because right now the

530
00:25:31,570 --> 00:25:33,849
way we're sort of doing things in

531
00:25:33,849 --> 00:25:36,519
JavaScript for dynamic styling is we

532
00:25:36,519 --> 00:25:39,729
apply two styles directly in JavaScript

533
00:25:39,729 --> 00:25:43,899
but if we move styling over to CSS and

534
00:25:43,899 --> 00:25:46,450
use JavaScript only for sending over

535
00:25:46,450 --> 00:25:49,919
values then we could potentially replace

536
00:25:49,919 --> 00:25:53,409
JavaScript and CSS with any sourcing any

537
00:25:53,409 --> 00:25:56,229
medium which means that these important

538
00:25:56,229 --> 00:25:58,659
values can come from anywhere and they

539
00:25:58,659 --> 00:26:00,070
could be applied to anything

540
00:26:00,070 --> 00:26:03,759
so instead CSS think of it as canvas or

541
00:26:03,759 --> 00:26:07,179
can give it as WebGL or think of it as

542
00:26:07,179 --> 00:26:12,070
platforms such as Android or iOS so one

543
00:26:12,070 --> 00:26:14,710
team is doing this right now which is

544
00:26:14,710 --> 00:26:17,080
material motion this is something that

545
00:26:17,080 --> 00:26:19,509
is very much in progress they're making

546
00:26:19,509 --> 00:26:23,649
a animation library using observables

547
00:26:23,649 --> 00:26:26,349
just like we talked about and they're

548
00:26:26,349 --> 00:26:30,309
targeting us iOS with Swift androids and

549
00:26:30,309 --> 00:26:32,859
the web it's still a few months out but

550
00:26:32,859 --> 00:26:33,490
they have a

551
00:26:33,490 --> 00:26:36,100
documentation on it and some really cool

552
00:26:36,100 --> 00:26:38,410
examples already so I definitely invite

553
00:26:38,410 --> 00:26:41,170
you to check that out and when doing

554
00:26:41,170 --> 00:26:43,570
this I also think of the future of what

555
00:26:43,570 --> 00:26:46,570
could be done with prototyping if any of

556
00:26:46,570 --> 00:26:49,059
you have used Facebook origami studio

557
00:26:49,059 --> 00:26:50,920
then this might look familiar to you

558
00:26:50,920 --> 00:26:54,460
where we define these these little

559
00:26:54,460 --> 00:26:56,410
fragments that you could connect to

560
00:26:56,410 --> 00:26:59,290
other fragments and what these are like

561
00:26:59,290 --> 00:27:01,660
is sort of a function where you connect

562
00:27:01,660 --> 00:27:03,010
one function to another and then you

563
00:27:03,010 --> 00:27:05,380
could control exactly what happens

564
00:27:05,380 --> 00:27:08,650
dynamically when creating your motion

565
00:27:08,650 --> 00:27:11,860
designs for at the beauty of this though

566
00:27:11,860 --> 00:27:13,990
is that it could be translated directly

567
00:27:13,990 --> 00:27:18,250
to code and so that way we blur the

568
00:27:18,250 --> 00:27:22,710
lines between design and development so

569
00:27:22,710 --> 00:27:25,170
what will you make with CSS variables

570
00:27:25,170 --> 00:27:27,580
this is an example of something that

571
00:27:27,580 --> 00:27:31,150
someone made with CSS variables and

572
00:27:31,150 --> 00:27:33,870
observables where when I move my mouse

573
00:27:33,870 --> 00:27:37,809
it's actually changing the HSL value and

574
00:27:37,809 --> 00:27:40,300
it's sending the delta x position of the

575
00:27:40,300 --> 00:27:44,770
mouse over the CSS and so the javascript

576
00:27:44,770 --> 00:27:46,360
is not controlling this all JavaScript's

577
00:27:46,360 --> 00:27:49,950
doing is sending over the values and

578
00:27:49,950 --> 00:27:52,720
yeah there's a whole collection of CSS

579
00:27:52,720 --> 00:27:55,330
variables that I've collected over coat

580
00:27:55,330 --> 00:27:56,800
ends because because then sort of my

581
00:27:56,800 --> 00:28:00,760
addiction but I really invite you to

582
00:28:00,760 --> 00:28:03,550
play around with CSS variables see what

583
00:28:03,550 --> 00:28:06,010
you could make and see how using

584
00:28:06,010 --> 00:28:08,230
observables can really help your

585
00:28:08,230 --> 00:28:10,600
interactive user interfaces in both

586
00:28:10,600 --> 00:28:16,520
design and development so thank you

587
00:28:16,530 --> 00:28:18,780
thank you

588
00:28:18,780 --> 00:28:21,600
okay so we're going to have a break for

