1
00:00:09,720 --> 00:00:12,470

I'm going to talk about cecchetti oh

2
00:00:12,470 --> 00:00:16,650
it's a open source project for enabling

3
00:00:16,650 --> 00:00:18,630
WebSocket and making real time

4
00:00:18,630 --> 00:00:23,130
applications easy to make on every

5
00:00:23,130 --> 00:00:25,140
browser and every mobile device and we

6
00:00:25,140 --> 00:00:28,320
can make it work on so my name is

7
00:00:28,320 --> 00:00:31,410
Guillermo ouch and the CTO and

8
00:00:31,410 --> 00:00:33,870
co-founder of an education startup in

9
00:00:33,870 --> 00:00:37,410
San Francisco we have a big commitment

10
00:00:37,410 --> 00:00:40,770
to open source and I spent part of my

11
00:00:40,770 --> 00:00:44,910
time developing this technology having

12
00:00:44,910 --> 00:00:48,330
heavily involved with no Jas since it

13
00:00:48,330 --> 00:00:50,610
appeared I originally developed a

14
00:00:50,610 --> 00:00:53,700
standalone WebSocket server that of

15
00:00:53,700 --> 00:00:55,410
course would only work with WebSocket

16
00:00:55,410 --> 00:00:58,470
clients and then I saw the opportunity

17
00:00:58,470 --> 00:01:01,860
of making WebSocket work on more than

18
00:01:01,860 --> 00:01:06,360
just cutting edge browsers i'm also a

19
00:01:06,360 --> 00:01:09,780
core modules developer I've been working

20
00:01:09,780 --> 00:01:11,159
on client side JavaScript for a while

21
00:01:11,159 --> 00:01:15,600
and those are my if you want to reach

22
00:01:15,600 --> 00:01:19,620
out or fork any of my projects you can

23
00:01:19,620 --> 00:01:22,650
go to github or follow me on Twitter or

24
00:01:22,650 --> 00:01:27,060
find me on freenode so Sokka do is

25
00:01:27,060 --> 00:01:30,510
actually two projects there's a socket

26
00:01:30,510 --> 00:01:32,370
i/o client that of course runs on the

27
00:01:32,370 --> 00:01:36,470
browser uses feature detection to decide

28
00:01:36,470 --> 00:01:40,020
what how to establish a real-time

29
00:01:40,020 --> 00:01:42,180
communication to the server depending on

30
00:01:42,180 --> 00:01:45,690
the user agent capabilities and an

31
00:01:45,690 --> 00:01:49,049
officially supported socket i/o noth web

32
00:01:49,049 --> 00:01:53,369
server there some projects are trying to

33
00:01:53,369 --> 00:01:56,640
make socket i/o work also on other

34
00:01:56,640 --> 00:02:02,310
stacks such as air leg python with

35
00:02:02,310 --> 00:02:07,470
tornado twisted even google go so you

36
00:02:07,470 --> 00:02:10,140
can go to the socket a website to learn

37
00:02:10,140 --> 00:02:13,349
more about those so the client-side API

38
00:02:13,349 --> 00:02:14,300
looks

39
00:02:14,300 --> 00:02:15,440
I know if you guys are familiar with

40
00:02:15,440 --> 00:02:17,990
WebSocket but i'm going to go into it

41
00:02:17,990 --> 00:02:22,100
later the api that you instantiate from

42
00:02:22,100 --> 00:02:23,780
the client looks pretty much like

43
00:02:23,780 --> 00:02:27,830
WebSocket it does it does more than web

44
00:02:27,830 --> 00:02:30,590
socket which is necessary for creating

45
00:02:30,590 --> 00:02:34,970
real world real time applications the

46
00:02:34,970 --> 00:02:36,140
premise is that it works in every

47
00:02:36,140 --> 00:02:38,180
browser so you're not concerned about

48
00:02:38,180 --> 00:02:42,230
compatibility and it's lightweight it's

49
00:02:42,230 --> 00:02:48,110
only 10 kilobytes when compressed I'm

50
00:02:48,110 --> 00:02:49,610
going to talk a little bit about about

51
00:02:49,610 --> 00:02:52,400
the real time web and what I mean when I

52
00:02:52,400 --> 00:02:55,900
talk about real time web applications

53
00:02:55,900 --> 00:02:58,880
there when you when we talk about real

54
00:02:58,880 --> 00:03:00,530
time web applications there are many

55
00:03:00,530 --> 00:03:02,900
terms that come to mind and that have

56
00:03:02,900 --> 00:03:06,290
been popularized over the years such as

57
00:03:06,290 --> 00:03:11,450
the Bayeux prodigal comet this this

58
00:03:11,450 --> 00:03:15,380
premise of server push so we're sending

59
00:03:15,380 --> 00:03:17,360
data to the client which is reversing

60
00:03:17,360 --> 00:03:20,390
the request response model now there's

61
00:03:20,390 --> 00:03:27,310
web socket and all other protocols like

62
00:03:27,310 --> 00:03:34,910
XMPP so what is which I'm going to start

63
00:03:34,910 --> 00:03:39,860
by describing a real simple real time

64
00:03:39,860 --> 00:03:44,750
application at Twitter client that

65
00:03:44,750 --> 00:03:47,390
fetches know Jas tweets as they are

66
00:03:47,390 --> 00:03:51,860
pushed by Twitter's and you might wish

67
00:03:51,860 --> 00:03:54,350
to display the tweets on your website so

68
00:03:54,350 --> 00:03:56,330
the first approach that would come to

69
00:03:56,330 --> 00:03:59,000
mind for most people is just making

70
00:03:59,000 --> 00:04:01,340
agents requests every five seconds right

71
00:04:01,340 --> 00:04:04,610
so you could use set interval and with a

72
00:04:04,610 --> 00:04:10,190
light jquery call you can get data from

73
00:04:10,190 --> 00:04:15,370
server to the client in pseudo real time

74
00:04:15,370 --> 00:04:19,010
of course the problem is that you're

75
00:04:19,010 --> 00:04:20,690
only getting data five seconds at a time

76
00:04:20,690 --> 00:04:22,880
and whatever happens in the middle

77
00:04:22,880 --> 00:04:25,039
you're not showing instantly or you're

78
00:04:25,039 --> 00:04:25,510
not sure

79
00:04:25,510 --> 00:04:27,370
wing to the user as frequently as you

80
00:04:27,370 --> 00:04:32,320
could wish so the next approach that

81
00:04:32,320 --> 00:04:34,150
would come to mind was would be making a

82
00:04:34,150 --> 00:04:37,930
nation skull and that as the server is

83
00:04:37,930 --> 00:04:39,850
there any data ordinary tweets for me

84
00:04:39,850 --> 00:04:43,990
and if there is show them if there is

85
00:04:43,990 --> 00:04:48,370
not initiate another Asians request but

86
00:04:48,370 --> 00:04:51,820
that approach has two major flaws one is

87
00:04:51,820 --> 00:04:55,060
that taken into consideration the HTTP

88
00:04:55,060 --> 00:04:57,190
latency and download time the best-case

89
00:04:57,190 --> 00:04:59,710
scenario for that is that it might take

90
00:04:59,710 --> 00:05:03,780
500 milliseconds between Asia's requests

91
00:05:03,780 --> 00:05:05,890
where the client is basically

92
00:05:05,890 --> 00:05:08,800
disconnected and another problems that

93
00:05:08,800 --> 00:05:10,960
we're increasing network traffic but the

94
00:05:10,960 --> 00:05:12,640
server might not have any tweets for us

95
00:05:12,640 --> 00:05:15,700
might not have any data so we're

96
00:05:15,700 --> 00:05:17,560
basically asking the server a law

97
00:05:17,560 --> 00:05:20,590
generating a lot of calls for and we're

98
00:05:20,590 --> 00:05:21,880
not sure if there is going to be data

99
00:05:21,880 --> 00:05:25,090
there so they're the first solution to

100
00:05:25,090 --> 00:05:27,580
this problem is called long polling it

101
00:05:27,580 --> 00:05:29,890
it's not actual server push but it

102
00:05:29,890 --> 00:05:31,720
that's a pretty good job for most of the

103
00:05:31,720 --> 00:05:35,680
use cases because what it does is it

104
00:05:35,680 --> 00:05:37,870
opens the connection and if there is no

105
00:05:37,870 --> 00:05:39,490
data for us it keeps it open for a

106
00:05:39,490 --> 00:05:41,890
number of seconds like 20 seconds it

107
00:05:41,890 --> 00:05:44,320
effectively decreases latency and or

108
00:05:44,320 --> 00:05:47,680
traffic and another advantage of this

109
00:05:47,680 --> 00:05:49,150
approach is that it pretty much works in

110
00:05:49,150 --> 00:05:52,300
every browser if you're using jQuery to

111
00:05:52,300 --> 00:05:53,740
make the call or and any other

112
00:05:53,740 --> 00:05:57,400
JavaScript framework you're you're

113
00:05:57,400 --> 00:05:59,020
enabling your application to make a

114
00:05:59,020 --> 00:06:03,030
real-time call without any overhead or

115
00:06:03,030 --> 00:06:06,970
incompatibilities of course it also has

116
00:06:06,970 --> 00:06:09,790
witnesses if there's a lot of data for

117
00:06:09,790 --> 00:06:12,910
us then the long polling loop will be

118
00:06:12,910 --> 00:06:15,430
would be effectively closing and opening

119
00:06:15,430 --> 00:06:17,530
connections all the time so we're back

120
00:06:17,530 --> 00:06:20,710
at our second approach which was calling

121
00:06:20,710 --> 00:06:23,770
the HS create another HS code when when

122
00:06:23,770 --> 00:06:26,700
when finished so again we're hitting

123
00:06:26,700 --> 00:06:31,290
latency and network traffic problems so

124
00:06:31,290 --> 00:06:33,310
the solution that makes the most sense

125
00:06:33,310 --> 00:06:36,750
would be keeping the connection open and

126
00:06:36,750 --> 00:06:39,060
there are transports there are solutions

127
00:06:39,060 --> 00:06:43,880
for this too pretty common ones are

128
00:06:43,880 --> 00:06:46,860
opening an iframe in not closing it and

129
00:06:46,860 --> 00:06:49,980
get a script tags that are executed when

130
00:06:49,980 --> 00:06:53,460
there's data and another one a little

131
00:06:53,460 --> 00:06:55,650
bit less known but supported by Firefox

132
00:06:55,650 --> 00:06:59,670
is the multi-part x-mix replace content

133
00:06:59,670 --> 00:07:01,850
type essentially it's a normal

134
00:07:01,850 --> 00:07:04,680
xmlhttprequest object that is created by

135
00:07:04,680 --> 00:07:08,880
passing the multi-part flag and it

136
00:07:08,880 --> 00:07:10,890
senses messages with boundaries so the

137
00:07:10,890 --> 00:07:12,840
server has to say okay here's a message

138
00:07:12,840 --> 00:07:18,930
the boundary some some delimiter message

139
00:07:18,930 --> 00:07:21,690
and the connection is open and we're

140
00:07:21,690 --> 00:07:24,570
getting data all the time the hidden

141
00:07:24,570 --> 00:07:28,020
iframe also has implementation

142
00:07:28,020 --> 00:07:30,990
differences we have to make sure we send

143
00:07:30,990 --> 00:07:32,450
the connection keep-alive header

144
00:07:32,450 --> 00:07:36,480
transfer encoding chunked those are HTTP

145
00:07:36,480 --> 00:07:39,360
headers that we have to send and as a

146
00:07:39,360 --> 00:07:42,210
new experience problem what happens when

147
00:07:42,210 --> 00:07:44,370
you just open an iframe that is injected

148
00:07:44,370 --> 00:07:46,290
into the DOM is that many browsers

149
00:07:46,290 --> 00:07:48,930
browsers are going to show the progress

150
00:07:48,930 --> 00:07:52,650
bar as if the page never loaded so the

151
00:07:52,650 --> 00:07:57,390
user will be met with a progress bar

152
00:07:57,390 --> 00:07:59,130
that it's like he's not sure what's

153
00:07:59,130 --> 00:08:02,669
going on really there is a solution for

154
00:08:02,669 --> 00:08:04,229
this which is implemented by cerca de

155
00:08:04,229 --> 00:08:06,960
enero explorer discovered and

156
00:08:06,960 --> 00:08:09,300
popularized by the gmail team when they

157
00:08:09,300 --> 00:08:12,300
created gmail chat which is hiding this

158
00:08:12,300 --> 00:08:14,340
iframe injecting it into a pseudo

159
00:08:14,340 --> 00:08:17,940
document which is an activex HTML file

160
00:08:17,940 --> 00:08:21,000
component that effectively hides the

161
00:08:21,000 --> 00:08:24,180
spinners and progress bars so these are

162
00:08:24,180 --> 00:08:27,090
to transport that transports that we can

163
00:08:27,090 --> 00:08:29,460
leverage to make real-time communication

164
00:08:29,460 --> 00:08:31,560
possible of course for certain browsers

165
00:08:31,560 --> 00:08:34,800
and the server has to behave differently

166
00:08:34,800 --> 00:08:38,310
depending on which transport is used so

167
00:08:38,310 --> 00:08:42,300
the this technique are there they vary

168
00:08:42,300 --> 00:08:45,360
by user agent they're only for incoming

169
00:08:45,360 --> 00:08:47,410
data so when you open that iframe

170
00:08:47,410 --> 00:08:49,569
and you need to send data to a server in

171
00:08:49,569 --> 00:08:50,730
order to have bi-directional

172
00:08:50,730 --> 00:08:52,810
communication you still have to use

173
00:08:52,810 --> 00:08:59,410
regular Ajax so the solution by the web

174
00:08:59,410 --> 00:09:02,319
standards people is called WebSocket so

175
00:09:02,319 --> 00:09:05,439
you shouldn't be needing to struggle

176
00:09:05,439 --> 00:09:08,019
with all these limitations we need the

177
00:09:08,019 --> 00:09:10,600
prodigal that enables bi-directional

178
00:09:10,600 --> 00:09:12,220
communication out of the box with a

179
00:09:12,220 --> 00:09:16,930
simple API if you guys read the spec

180
00:09:16,930 --> 00:09:19,180
it's it's this is the way the

181
00:09:19,180 --> 00:09:22,870
description and simplicity is one of the

182
00:09:22,870 --> 00:09:26,920
core goals of this protocol the way that

183
00:09:26,920 --> 00:09:29,949
it works at an HTTP level is that it

184
00:09:29,949 --> 00:09:33,430
updates the connection HTTP 1.1 supports

185
00:09:33,430 --> 00:09:35,709
this upgrade header that basically says

186
00:09:35,709 --> 00:09:38,709
at this point we're not doing a normal

187
00:09:38,709 --> 00:09:41,230
HTTP communication we're upgrading it to

188
00:09:41,230 --> 00:09:43,329
a new protocol in this case the

189
00:09:43,329 --> 00:09:47,860
WebSocket protocol again the server has

190
00:09:47,860 --> 00:09:51,100
to behave react to this response by

191
00:09:51,100 --> 00:09:54,550
doing several things during the

192
00:09:54,550 --> 00:09:59,259
handshake process draft 76 linear draft

193
00:09:59,259 --> 00:10:01,930
of WebSocket introduced a security

194
00:10:01,930 --> 00:10:04,829
mechanism it has a fairly unique

195
00:10:04,829 --> 00:10:09,370
pregnancy framing system it does utf-8

196
00:10:09,370 --> 00:10:11,649
for the encoding know binary support and

197
00:10:11,649 --> 00:10:13,769
of course it's only supported by

198
00:10:13,769 --> 00:10:17,709
cutting-edge browsers and it's still

199
00:10:17,709 --> 00:10:19,660
ongoing constant changes it's pretty

200
00:10:19,660 --> 00:10:23,829
much a work in progress but again one of

201
00:10:23,829 --> 00:10:25,329
the advantages is a WebSocket is really

202
00:10:25,329 --> 00:10:30,790
simple basically we declare we connect

203
00:10:30,790 --> 00:10:34,630
to the server with the WSS schema and we

204
00:10:34,630 --> 00:10:37,180
have three event handlers actually for

205
00:10:37,180 --> 00:10:40,959
there is an error when that notifies us

206
00:10:40,959 --> 00:10:43,059
when the connection is open when a

207
00:10:43,059 --> 00:10:44,709
message is received and when the

208
00:10:44,709 --> 00:10:48,389
connection is gratefully closed

209
00:10:48,399 --> 00:10:53,060
so considering the state of WebSocket

210
00:10:53,060 --> 00:10:55,790
today let's think about cross browser

211
00:10:55,790 --> 00:10:59,660
support when we do latex today like I

212
00:10:59,660 --> 00:11:02,390
described earlier we were used to using

213
00:11:02,390 --> 00:11:06,850
some obstruction of xml httprequest

214
00:11:06,850 --> 00:11:10,339
which also gives us compatibility for

215
00:11:10,339 --> 00:11:13,420
example with ie6 by leveraging the

216
00:11:13,420 --> 00:11:16,820
ActiveX object that microsoft created

217
00:11:16,820 --> 00:11:20,810
back in the day they say this kind of

218
00:11:20,810 --> 00:11:23,149
API make it simpler to achieve the goal

219
00:11:23,149 --> 00:11:26,269
of making an asynchronous request to the

220
00:11:26,269 --> 00:11:28,579
server and they also have new features

221
00:11:28,579 --> 00:11:31,070
in the case of jquery we all say we now

222
00:11:31,070 --> 00:11:35,079
have support for timeouts caching

223
00:11:35,079 --> 00:11:38,720
filters depending on the content type of

224
00:11:38,720 --> 00:11:44,060
the response and again the entire goal

225
00:11:44,060 --> 00:11:46,279
is that were making age it's simple to

226
00:11:46,279 --> 00:11:49,820
use and so ko has a really similar goal

227
00:11:49,820 --> 00:11:53,510
so we're abstracting away all these

228
00:11:53,510 --> 00:11:58,040
transports it's not just WebSocket we

229
00:11:58,040 --> 00:12:00,980
can also use flash if available we can

230
00:12:00,980 --> 00:12:03,920
use long polling we can use multi-part

231
00:12:03,920 --> 00:12:06,620
HX iframes and it all depends on what

232
00:12:06,620 --> 00:12:08,720
user agent is trying to connect to a

233
00:12:08,720 --> 00:12:14,420
server so far Sokka do has been tested

234
00:12:14,420 --> 00:12:19,790
on I 5.5 with different transports like

235
00:12:19,790 --> 00:12:23,649
flash and HTML file safari 3 chrome

236
00:12:23,649 --> 00:12:28,550
opera and mobile devices it again adds

237
00:12:28,550 --> 00:12:32,660
new features so for example well when

238
00:12:32,660 --> 00:12:34,820
you open a WebSocket connection they the

239
00:12:34,820 --> 00:12:37,160
closed event will only be fired if the

240
00:12:37,160 --> 00:12:40,490
connection is closed appropriately if if

241
00:12:40,490 --> 00:12:42,949
the server dies or the client internet

242
00:12:42,949 --> 00:12:45,500
connection is has issues that closed

243
00:12:45,500 --> 00:12:48,290
event will never fire so even though the

244
00:12:48,290 --> 00:12:51,019
API is simple we still have limitations

245
00:12:51,019 --> 00:12:52,699
when we really need to create a

246
00:12:52,699 --> 00:12:58,019
functional real world application

247
00:12:58,029 --> 00:13:01,820
we were trying to do what all these

248
00:13:01,820 --> 00:13:04,310
frameworks did for Ajax we're trying to

249
00:13:04,310 --> 00:13:10,279
do for real-time communication so so far

250
00:13:10,279 --> 00:13:12,680
the the project has been successfully

251
00:13:12,680 --> 00:13:15,350
deployed to production in many cases if

252
00:13:15,350 --> 00:13:17,300
you guys follow the node knockout

253
00:13:17,300 --> 00:13:20,540
competition many people have created

254
00:13:20,540 --> 00:13:22,579
real ten games and other kinds of

255
00:13:22,579 --> 00:13:25,880
real-time applications with it and there

256
00:13:25,880 --> 00:13:31,199
is a lot of community interest on github

257
00:13:31,209 --> 00:13:34,610
but one thing to keep in mind that sucka

258
00:13:34,610 --> 00:13:37,010
day was just a building block it's okay

259
00:13:37,010 --> 00:13:39,950
is protocol agnostic saga de oh you can

260
00:13:39,950 --> 00:13:42,589
send Jason and on the client side

261
00:13:42,589 --> 00:13:45,470
interpret it and do something or you can

262
00:13:45,470 --> 00:13:48,170
connect and implement the IRC protocol

263
00:13:48,170 --> 00:13:50,269
for example and you can create an IRC

264
00:13:50,269 --> 00:13:55,459
client and speak the IRC idioms again

265
00:13:55,459 --> 00:14:00,480
Sokka do is just a building block

266
00:14:00,490 --> 00:14:03,350
creating real-time applications is not

267
00:14:03,350 --> 00:14:07,310
trivial there's many different protocols

268
00:14:07,310 --> 00:14:10,570
in many different ways to do it and

269
00:14:10,570 --> 00:14:12,770
again is significantly significantly

270
00:14:12,770 --> 00:14:15,890
different from making certain things in

271
00:14:15,890 --> 00:14:19,839
your regular web application real time

272
00:14:19,839 --> 00:14:26,000
so i created this project that leverages

273
00:14:26,000 --> 00:14:29,450
socket AO called no stream the goal of

274
00:14:29,450 --> 00:14:33,410
no stream is being the protocol for the

275
00:14:33,410 --> 00:14:35,899
most common use cases for your web

276
00:14:35,899 --> 00:14:44,600
applications as an example i created a

277
00:14:44,600 --> 00:14:51,199
really simple to the list application on

278
00:14:51,199 --> 00:14:58,910
nodejs

279
00:14:58,920 --> 00:15:02,590
so again this is a regular web

280
00:15:02,590 --> 00:15:04,030
application that interfaces with the

281
00:15:04,030 --> 00:15:07,660
database and displays the two Lewis

282
00:15:07,660 --> 00:15:09,820
items that you have the complete and it

283
00:15:09,820 --> 00:15:12,880
allows you to have new items every time

284
00:15:12,880 --> 00:15:16,180
we have something the page is refreshed

285
00:15:16,180 --> 00:15:24,760
and we can edit right so even though

286
00:15:24,760 --> 00:15:26,440
this is a really simple application it

287
00:15:26,440 --> 00:15:30,250
still has many flaws for the users the

288
00:15:30,250 --> 00:15:31,870
first one is that what happens when you

289
00:15:31,870 --> 00:15:34,510
open two tabs of two instances of your

290
00:15:34,510 --> 00:15:37,330
application and you decide to delete an

291
00:15:37,330 --> 00:15:39,640
item all of a sudden this page has two

292
00:15:39,640 --> 00:15:44,320
items this page has three it ends up

293
00:15:44,320 --> 00:15:45,610
hurting the user experience in this

294
00:15:45,610 --> 00:15:48,430
particular case but what happens if more

295
00:15:48,430 --> 00:15:51,060
than one person are trying to use this

296
00:15:51,060 --> 00:15:56,710
this application so I'm going to quickly

297
00:15:56,710 --> 00:16:00,970
show what the code looks like to create

298
00:16:00,970 --> 00:16:02,800
this application for those not familiar

299
00:16:02,800 --> 00:16:10,960
with no Jas I'm defining a model I'm

300
00:16:10,960 --> 00:16:12,670
using Express web framework to defined

301
00:16:12,670 --> 00:16:17,040
to define some routes like edit as

302
00:16:17,040 --> 00:16:20,650
delete and I call the database and I

303
00:16:20,650 --> 00:16:22,270
remove the items to have the items

304
00:16:22,270 --> 00:16:25,030
respectively and then what I sent to the

305
00:16:25,030 --> 00:16:29,050
client is a redirect and this is this is

306
00:16:29,050 --> 00:16:30,280
what we're trying to change with no

307
00:16:30,280 --> 00:16:34,690
string so i'm going to show you what the

308
00:16:34,690 --> 00:16:36,690
real time version of this to do list

309
00:16:36,690 --> 00:16:41,860
looks like

310
00:16:41,870 --> 00:16:45,440
this in this case we're attaching socket

311
00:16:45,440 --> 00:16:54,830
i/o to the web server so and it has two

312
00:16:54,830 --> 00:16:58,010
new features first we're displaying who

313
00:16:58,010 --> 00:17:02,540
is editing and now we're making all the

314
00:17:02,540 --> 00:17:03,770
interactions that I described through

315
00:17:03,770 --> 00:17:05,660
the routes we're making them real time

316
00:17:05,660 --> 00:17:10,540
so what happens when I open a new tab is

317
00:17:10,540 --> 00:17:13,339
that all of a sudden they're all the

318
00:17:13,339 --> 00:17:15,199
same and we can take it to a new level

319
00:17:15,199 --> 00:17:19,040
and we can try out different browsers

320
00:17:19,040 --> 00:17:22,910
it's interesting to see that so far I

321
00:17:22,910 --> 00:17:24,650
five of course is connecting to socket

322
00:17:24,650 --> 00:17:26,870
i/o through WebSocket because it's the

323
00:17:26,870 --> 00:17:28,900
best transporter socket i/o can find

324
00:17:28,900 --> 00:17:32,450
what happens when I go to Firefox is

325
00:17:32,450 --> 00:17:36,559
that it's going to use multi-part like I

326
00:17:36,559 --> 00:17:37,910
describe this process is complete

327
00:17:37,910 --> 00:17:41,780
transparent to the developer and and

328
00:17:41,780 --> 00:17:45,250
again it we are in effectively enabling

329
00:17:45,250 --> 00:17:48,500
real-time collaboration across users if

330
00:17:48,500 --> 00:17:51,140
I close one tab the counter will stop

331
00:17:51,140 --> 00:17:55,010
will change now the real interesting

332
00:17:55,010 --> 00:17:57,920
part about no stream is that we're all

333
00:17:57,920 --> 00:18:00,290
these features have been created by only

334
00:18:00,290 --> 00:18:03,500
doing two things one is firing events

335
00:18:03,500 --> 00:18:06,620
when certain actions happen which it's a

336
00:18:06,620 --> 00:18:09,620
great fit for no Jas of course and the

337
00:18:09,620 --> 00:18:11,660
other thing is that i'm only using I'm

338
00:18:11,660 --> 00:18:17,480
only telling the template language what

339
00:18:17,480 --> 00:18:20,780
things to update so this is what a

340
00:18:20,780 --> 00:18:22,580
template language looks like this is

341
00:18:22,580 --> 00:18:25,520
similar to Hamill it's called Jade this

342
00:18:25,520 --> 00:18:29,090
is the page for our old to do

343
00:18:29,090 --> 00:18:32,420
application the traditional one I get

344
00:18:32,420 --> 00:18:34,940
the items I go through them and I show a

345
00:18:34,940 --> 00:18:38,750
piece of template now in the real 10

346
00:18:38,750 --> 00:18:51,540
version

347
00:18:51,550 --> 00:18:54,170
all I do is declare a part of the

348
00:18:54,170 --> 00:18:56,900
template that's real time I tell it this

349
00:18:56,900 --> 00:18:59,300
piece of disputes of template it's real

350
00:18:59,300 --> 00:19:02,150
time and it it will repaint whenever the

351
00:19:02,150 --> 00:19:04,340
connections event is fire and the

352
00:19:04,340 --> 00:19:08,190
variable will be called connections

353
00:19:08,200 --> 00:19:20,860
sayin oh oh I'm sorry

354
00:19:20,870 --> 00:19:26,040
nope

355
00:19:26,050 --> 00:19:32,840
and not quite

356
00:19:32,850 --> 00:19:42,760
any suggestions lazy always good no pun

357
00:19:42,760 --> 00:19:46,360
intended again I simply replace that 4-h

358
00:19:46,360 --> 00:19:49,000
loop with this real time filter and I'm

359
00:19:49,000 --> 00:19:50,860
indicating it that it will append new

360
00:19:50,860 --> 00:19:53,050
items when the new event is fired it'll

361
00:19:53,050 --> 00:19:55,830
repaint with edits fired and remove when

362
00:19:55,830 --> 00:19:59,200
the removal and is fired and all i have

363
00:19:59,200 --> 00:20:01,660
to do from my application its fire those

364
00:20:01,660 --> 00:20:03,820
events so instead of resurrecting the

365
00:20:03,820 --> 00:20:06,000
user I'm just sending a 200 response and

366
00:20:06,000 --> 00:20:08,650
emitting this event so what happens is

367
00:20:08,650 --> 00:20:11,890
that the user the you as a developer I

368
00:20:11,890 --> 00:20:14,429
are simply making a nation's call that

369
00:20:14,429 --> 00:20:16,900
triggers that event and through the

370
00:20:16,900 --> 00:20:19,900
real-time socket we fired the we fire

371
00:20:19,900 --> 00:20:23,440
the changes so not only has the need

372
00:20:23,440 --> 00:20:25,120
effective way of making your application

373
00:20:25,120 --> 00:20:30,010
real time it also has it also makes the

374
00:20:30,010 --> 00:20:32,980
client-side code simpler because we're

375
00:20:32,980 --> 00:20:34,750
no longer making a nation's request that

376
00:20:34,750 --> 00:20:36,820
returns some HTML and then we decided to

377
00:20:36,820 --> 00:20:38,710
inject it somewhere you don't have it's

378
00:20:38,710 --> 00:20:42,520
transparently from the client-side point

379
00:20:42,520 --> 00:20:53,710
of view so that's a no stream again uses

380
00:20:53,710 --> 00:20:55,390
salga do as a building block to enable

381
00:20:55,390 --> 00:20:56,920
it to work on every browser including

382
00:20:56,920 --> 00:21:05,450
mobile devices and

383
00:21:05,460 --> 00:21:09,730
you can find this particular example

384
00:21:09,740 --> 00:21:16,620
oops at my github page JS conf to the

385
00:21:16,620 --> 00:21:27,370
demo that's it thank you

386
00:21:27,380 --> 00:21:50,750
any questions

387
00:21:50,760 --> 00:21:54,910
so yeah those the differences between

388
00:21:54,910 --> 00:21:58,330
transports including the ones related to

389
00:21:58,330 --> 00:22:01,030
message length are taken care of by

390
00:22:01,030 --> 00:22:03,550
cerca de oso at you when you're

391
00:22:03,550 --> 00:22:05,440
leveraging it you're not concerned at

392
00:22:05,440 --> 00:22:09,160
all with with how the limitation had

393
00:22:09,160 --> 00:22:10,810
limitations of limitations of the

394
00:22:10,810 --> 00:22:17,430
transport so Sokka dave has a very thin

395
00:22:17,430 --> 00:22:20,560
prodigal that is of course hidden from

396
00:22:20,560 --> 00:22:22,540
the user which is required for example

397
00:22:22,540 --> 00:22:25,480
for long polling so in one polling the

398
00:22:25,480 --> 00:22:26,530
client is opening and closing

399
00:22:26,530 --> 00:22:28,840
connections but the server might want to

400
00:22:28,840 --> 00:22:31,540
send messages during that disconnection

401
00:22:31,540 --> 00:22:34,150
period so we need a protocol that says

402
00:22:34,150 --> 00:22:36,160
okay this long polling client has a

403
00:22:36,160 --> 00:22:38,650
session ID and will buffer messages from

404
00:22:38,650 --> 00:22:41,140
for him on server side and when he

405
00:22:41,140 --> 00:22:44,410
recollects we're saying that protocol is

406
00:22:44,410 --> 00:22:46,210
saying okay you have ten messages so you

407
00:22:46,210 --> 00:22:49,810
have to fire ten message events and each

408
00:22:49,810 --> 00:22:51,940
the transfer also takes care of saying

409
00:22:51,940 --> 00:22:54,280
okay the message length is this and if

410
00:22:54,280 --> 00:22:57,940
it if the client can check okay is the

411
00:22:57,940 --> 00:23:00,010
entire message here otherwise it will

412
00:23:00,010 --> 00:23:06,990
wait for more data

413
00:23:07,000 --> 00:23:10,040
correct I'm gonna open source it right

414
00:23:10,040 --> 00:23:22,169
away

415
00:23:22,179 --> 00:23:25,880
no stream is entirely based on no Jas

416
00:23:25,880 --> 00:23:28,309
technologies so right now it works with

417
00:23:28,309 --> 00:23:31,570
a specific template language created for

418
00:23:31,570 --> 00:23:35,179
node but it wouldn't be too difficult to

419
00:23:35,179 --> 00:23:40,519
make it work with more and again the

420
00:23:40,519 --> 00:23:44,269
server side part of ocotillo itself the

421
00:23:44,269 --> 00:23:46,580
protocol is documented and it can be

422
00:23:46,580 --> 00:23:49,190
implemented on any back-end and again

423
00:23:49,190 --> 00:23:51,500
the client side part of no stream can

424
00:23:51,500 --> 00:23:54,860
also be leveraged for any implementation

425
00:23:54,860 --> 00:24:10,399
that speaks the no stream protocol yeah

426
00:24:10,399 --> 00:24:15,889
so connect is a framework that is geared

427
00:24:15,889 --> 00:24:19,120
towards request-response cycles so

428
00:24:19,120 --> 00:24:23,870
making it making Sokka a middleware in

429
00:24:23,870 --> 00:24:25,399
that regard would be extremely difficult

430
00:24:25,399 --> 00:24:28,580
and we would have to actually change how

431
00:24:28,580 --> 00:24:32,990
connect middleware is defined but what

432
00:24:32,990 --> 00:24:36,289
I'm working on is a session connect and

433
00:24:36,289 --> 00:24:40,210
the ability for easy identification of

434
00:24:40,210 --> 00:24:43,190
Sokka do clients to the session of your

435
00:24:43,190 --> 00:24:45,379
website so if connect if you're

436
00:24:45,379 --> 00:24:47,059
leveraging this session component in

437
00:24:47,059 --> 00:24:50,139
connect you probably have some like

438
00:24:50,139 --> 00:24:53,210
database data associated to that session

439
00:24:53,210 --> 00:24:55,000
because the user might be logged in and

440
00:24:55,000 --> 00:24:57,649
making that easy to retrieve from socket

441
00:24:57,649 --> 00:24:59,779
i/o is certainly one of my goals but

442
00:24:59,779 --> 00:25:02,590
also make it compatible with any other

443
00:25:02,590 --> 00:25:04,700
session mechanisms that you might be

444
00:25:04,700 --> 00:25:08,389
using not just connect and the session

445
00:25:08,389 --> 00:25:16,499
middleware yep

446
00:25:16,509 --> 00:25:21,090
nope

447
00:25:21,100 --> 00:25:24,100
correct yeah any sugg and a wood would

448
00:25:24,100 --> 00:25:30,549
totally support that yep

