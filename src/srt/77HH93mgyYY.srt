1
00:00:17,370 --> 00:00:20,550

hello everybody my name is Michael

2
00:00:20,550 --> 00:00:22,500
Boland I'm here to talk to you about the

3
00:00:22,500 --> 00:00:25,620
the width keyword the most evil thing

4
00:00:25,620 --> 00:00:27,030
that we've ever seen in JavaScript

5
00:00:27,030 --> 00:00:29,160
according to some people I'm also the

6
00:00:29,160 --> 00:00:30,660
author of closure the definitive guide

7
00:00:30,660 --> 00:00:32,370
so I'm going to commission a you some

8
00:00:32,370 --> 00:00:33,570
actually some actually some of the good

9
00:00:33,570 --> 00:00:34,830
parts about with some of the interesting

10
00:00:34,830 --> 00:00:37,500
problems that you can solve with it and

11
00:00:37,500 --> 00:00:39,510
also show you a little bit of closure as

12
00:00:39,510 --> 00:00:42,989
part of that so first let's just look at

13
00:00:42,989 --> 00:00:44,220
remember what people are saying about

14
00:00:44,220 --> 00:00:46,650
with so you know some of our most

15
00:00:46,650 --> 00:00:49,230
popular JavaScript books they're

16
00:00:49,230 --> 00:00:51,420
basically saying don't even look at this

17
00:00:51,420 --> 00:00:54,390
thing just this is the keyword it's

18
00:00:54,390 --> 00:00:55,800
going to sell your program down and

19
00:00:55,800 --> 00:00:57,330
you're going to have errors if you use

20
00:00:57,330 --> 00:00:59,220
it like let's move on to the next

21
00:00:59,220 --> 00:01:02,519
section usually when you see someone

22
00:01:02,519 --> 00:01:05,090
give an example of what with is used for

23
00:01:05,090 --> 00:01:08,550
its it trivializes it considerably it

24
00:01:08,550 --> 00:01:10,680
basically says oh you're probably a lazy

25
00:01:10,680 --> 00:01:13,320
programmer and if you want to add a lot

26
00:01:13,320 --> 00:01:15,180
of properties to an object you're using

27
00:01:15,180 --> 00:01:17,550
with you put the object properties to

28
00:01:17,550 --> 00:01:19,020
inside there you do all these things

29
00:01:19,020 --> 00:01:21,270
inside the block whereas you could also

30
00:01:21,270 --> 00:01:22,650
just do what I show on the bottom of

31
00:01:22,650 --> 00:01:24,390
this slide or just create a temporary

32
00:01:24,390 --> 00:01:26,430
variable and then do the assignments

33
00:01:26,430 --> 00:01:28,050
that way so basically the argument is

34
00:01:28,050 --> 00:01:31,470
that you really never need with with is

35
00:01:31,470 --> 00:01:32,820
actually doing a lot more it adds

36
00:01:32,820 --> 00:01:35,430
another object to the scope change for

37
00:01:35,430 --> 00:01:37,080
when you're resolving variables this

38
00:01:37,080 --> 00:01:38,040
actually lets you do a lot more

39
00:01:38,040 --> 00:01:40,560
interesting things then this little

40
00:01:40,560 --> 00:01:42,000
example that is what you usually see

41
00:01:42,000 --> 00:01:46,110
about with gives it credit for so let me

42
00:01:46,110 --> 00:01:48,120
show you a problem that we had my last

43
00:01:48,120 --> 00:01:50,340
job that we can actually only seem to be

44
00:01:50,340 --> 00:01:53,910
able to solve using with so this is

45
00:01:53,910 --> 00:01:56,130
actually snippet of code from from big

46
00:01:56,130 --> 00:01:59,910
Matt Bing Maps version 63 so you know so

47
00:01:59,910 --> 00:02:01,680
Bing Maps just like Google Maps or other

48
00:02:01,680 --> 00:02:04,710
other other libraries something that you

49
00:02:04,710 --> 00:02:06,060
would include in your application you

50
00:02:06,060 --> 00:02:08,459
put a script tag or load it and then

51
00:02:08,459 --> 00:02:11,470
you're actually giving that third party

52
00:02:11,470 --> 00:02:17,629
the ability sorry oh thank you you're

53
00:02:17,629 --> 00:02:19,069
giving that that library you know

54
00:02:19,069 --> 00:02:21,379
ability to act access code in your

55
00:02:21,379 --> 00:02:23,030
webpage and you're basically trusting

56
00:02:23,030 --> 00:02:25,970
them to behave appropriately does anyone

57
00:02:25,970 --> 00:02:28,220
actually see what's going on in this

58
00:02:28,220 --> 00:02:37,069
code that could be a problem I like the

59
00:02:37,069 --> 00:02:38,810
idea but in the sentiment in the energy

60
00:02:38,810 --> 00:02:41,959
but no so so what's actually happening

61
00:02:41,959 --> 00:02:45,170
is that if you look carefully this this

62
00:02:45,170 --> 00:02:47,840
snippet of code is declaring two new

63
00:02:47,840 --> 00:02:50,480
variables and Global's global scope the

64
00:02:50,480 --> 00:02:52,880
eye and the Len for short for length

65
00:02:52,880 --> 00:02:56,630
variables because the presumably heard

66
00:02:56,630 --> 00:02:57,890
wrote this made the mistake of thinking

67
00:02:57,890 --> 00:03:00,019
that javascript has blocked scope and

68
00:03:00,019 --> 00:03:01,640
that they were defining a variable in a

69
00:03:01,640 --> 00:03:02,599
block and it wasn't going to bother

70
00:03:02,599 --> 00:03:04,910
anybody but obviously you shall know

71
00:03:04,910 --> 00:03:06,950
better and knowing that javascript uses

72
00:03:06,950 --> 00:03:08,989
function scope and this actually leaks

73
00:03:08,989 --> 00:03:12,980
these variables into the global scope so

74
00:03:12,980 --> 00:03:14,900
but why so here's an example so why

75
00:03:14,900 --> 00:03:17,239
would this be a problem who cares like

76
00:03:17,239 --> 00:03:18,950
what with the global definition of I is

77
00:03:18,950 --> 00:03:20,299
and length like whatever you're going to

78
00:03:20,299 --> 00:03:21,829
use it you're probably going to reassign

79
00:03:21,829 --> 00:03:23,269
it and that sort of thing and you'd

80
00:03:23,269 --> 00:03:25,310
override whatever this Bing Maps code

81
00:03:25,310 --> 00:03:29,569
did well as it turns out we were using

82
00:03:29,569 --> 00:03:33,019
the closure compiler to minify our code

83
00:03:33,019 --> 00:03:34,910
and what happened was the closure

84
00:03:34,910 --> 00:03:36,380
compiler decided to save some bites

85
00:03:36,380 --> 00:03:37,850
instead of using four bytes for the word

86
00:03:37,850 --> 00:03:39,500
true it was going to assign it to the

87
00:03:39,500 --> 00:03:42,230
variable I and assigned so assigned true

88
00:03:42,230 --> 00:03:43,730
to I and everywhere in our code where we

89
00:03:43,730 --> 00:03:45,079
were going to reference the literal true

90
00:03:45,079 --> 00:03:49,220
we now reference this variable I so that

91
00:03:49,220 --> 00:03:51,440
means that once our application was

92
00:03:51,440 --> 00:03:53,299
running along and then after we loaded

93
00:03:53,299 --> 00:03:55,609
Bing Maps suddenly places where we were

94
00:03:55,609 --> 00:03:57,079
looking for true we were getting the

95
00:03:57,079 --> 00:04:00,230
number three this was extremely hard to

96
00:04:00,230 --> 00:04:03,049
figure out where this was coming from we

97
00:04:03,049 --> 00:04:04,489
certainly didn't know it was being maps

98
00:04:04,489 --> 00:04:06,200
at first but then eventually we tracked

99
00:04:06,200 --> 00:04:09,620
it down and so this is this leads to

100
00:04:09,620 --> 00:04:11,260
kind of the basic problem of how do you

101
00:04:11,260 --> 00:04:14,599
load code from another website and

102
00:04:14,599 --> 00:04:17,030
protect your own code to make sure that

103
00:04:17,030 --> 00:04:18,919
variables don't leak out of scope and

104
00:04:18,919 --> 00:04:21,590
that sort of thing so most people would

105
00:04:21,590 --> 00:04:23,630
say oh that's simple like all I need to

106
00:04:23,630 --> 00:04:24,380
do

107
00:04:24,380 --> 00:04:26,180
is load my code inside what a lot of

108
00:04:26,180 --> 00:04:27,800
people refer to is immediate function so

109
00:04:27,800 --> 00:04:29,960
a function that execute immediately

110
00:04:29,960 --> 00:04:32,030
basically giving all of your code a

111
00:04:32,030 --> 00:04:34,190
fresh scope protecting it from all the

112
00:04:34,190 --> 00:04:37,670
code on load from another page so

113
00:04:37,670 --> 00:04:39,200
normally that that is definitely

114
00:04:39,200 --> 00:04:41,300
sufficient absolutely the right way to

115
00:04:41,300 --> 00:04:44,870
go the problem is is now what happens if

116
00:04:44,870 --> 00:04:46,580
you have a lot of code and you so much

117
00:04:46,580 --> 00:04:48,800
code that you need to break it up into

118
00:04:48,800 --> 00:04:50,750
modules so by modules I mean you have

119
00:04:50,750 --> 00:04:52,520
you take all of your code you go a bit

120
00:04:52,520 --> 00:04:54,500
into one file and then you actually

121
00:04:54,500 --> 00:04:56,720
carve it up into bits that can be loaded

122
00:04:56,720 --> 00:04:58,760
dynamically so for example an

123
00:04:58,760 --> 00:05:00,260
application like Gmail where you might

124
00:05:00,260 --> 00:05:02,570
have some core use some core libraries

125
00:05:02,570 --> 00:05:04,490
like say string and array utilities

126
00:05:04,490 --> 00:05:06,230
that's a that's one cluster of

127
00:05:06,230 --> 00:05:07,490
JavaScript that you want to load

128
00:05:07,490 --> 00:05:09,260
initially and then depending on what the

129
00:05:09,260 --> 00:05:11,390
user does you might want to dynamically

130
00:05:11,390 --> 00:05:14,600
load other other JavaScript tags so if

131
00:05:14,600 --> 00:05:15,770
they go to the inbox you might want to

132
00:05:15,770 --> 00:05:17,000
load logic that's specific to that

133
00:05:17,000 --> 00:05:19,460
they'll go to settings load logic that's

134
00:05:19,460 --> 00:05:22,970
specific to that in that way you

135
00:05:22,970 --> 00:05:25,280
basically can improve the startup time

136
00:05:25,280 --> 00:05:26,390
of your application you're not

137
00:05:26,390 --> 00:05:28,220
penalizing the user for pulling down a

138
00:05:28,220 --> 00:05:29,690
bunch of code for things that they don't

139
00:05:29,690 --> 00:05:32,810
use so so this is this is a popular

140
00:05:32,810 --> 00:05:34,700
technique fairly popular technique to

141
00:05:34,700 --> 00:05:37,520
improve speed but the problem is is that

142
00:05:37,520 --> 00:05:39,530
if you think back to to this if you

143
00:05:39,530 --> 00:05:44,120
loaded every file every module inside of

144
00:05:44,120 --> 00:05:45,830
its own immediate function then you have

145
00:05:45,830 --> 00:05:48,950
this problem where code loaded in this

146
00:05:48,950 --> 00:05:50,900
module can't talk to code loaded in this

147
00:05:50,900 --> 00:05:52,990
module they don't share a scope anymore

148
00:05:52,990 --> 00:05:55,310
so the problem is that you want your

149
00:05:55,310 --> 00:05:56,780
modules to share scope but you don't

150
00:05:56,780 --> 00:06:01,910
want to share scope with Microsoft so so

151
00:06:01,910 --> 00:06:03,400
what are you to do what are your options

152
00:06:03,400 --> 00:06:07,250
so there's there's a few ways right now

153
00:06:07,250 --> 00:06:11,150
that people load modules so one is you

154
00:06:11,150 --> 00:06:13,400
load each module via its own script tag

155
00:06:13,400 --> 00:06:15,440
you just do in a pen child every time

156
00:06:15,440 --> 00:06:16,880
you want to load another another clump

157
00:06:16,880 --> 00:06:18,980
of JavaScript you just you just add it

158
00:06:18,980 --> 00:06:21,110
one of the nice things about this

159
00:06:21,110 --> 00:06:23,420
approach is that you can load your code

160
00:06:23,420 --> 00:06:25,220
from a CDN the content delivery network

161
00:06:25,220 --> 00:06:27,380
so this is popular because for your your

162
00:06:27,380 --> 00:06:29,030
static resources if you send them off to

163
00:06:29,030 --> 00:06:32,030
aqua or someone like that you know they

164
00:06:32,030 --> 00:06:33,979
have they have data centers around the

165
00:06:33,979 --> 00:06:35,900
world people your app should be able to

166
00:06:35,900 --> 00:06:37,760
load a lot faster

167
00:06:37,760 --> 00:06:39,020
so this is a pretty common way that

168
00:06:39,020 --> 00:06:41,690
people though JavaScript but the problem

169
00:06:41,690 --> 00:06:43,880
is that any code that you load in this

170
00:06:43,880 --> 00:06:46,400
way it's going to all operate in the

171
00:06:46,400 --> 00:06:47,720
global scope so now we're going to have

172
00:06:47,720 --> 00:06:50,020
to come back to our problem where

173
00:06:50,020 --> 00:06:51,710
JavaScript that we load from bing maps

174
00:06:51,710 --> 00:06:53,930
could theoretically interfere with our

175
00:06:53,930 --> 00:06:58,370
code a second technique is also if the

176
00:06:58,370 --> 00:07:00,200
code is on the same domain you could

177
00:07:00,200 --> 00:07:02,720
make an xhr fetch the code as a string

178
00:07:02,720 --> 00:07:07,400
and then just eval this actually this

179
00:07:07,400 --> 00:07:09,290
you can't even do in an immediate

180
00:07:09,290 --> 00:07:12,290
function because when you call eval it's

181
00:07:12,290 --> 00:07:14,690
either going to work in the the function

182
00:07:14,690 --> 00:07:16,220
scope and which are calling it or in the

183
00:07:16,220 --> 00:07:18,650
global scope either case it's not going

184
00:07:18,650 --> 00:07:21,350
to work at this module scope that that

185
00:07:21,350 --> 00:07:23,030
that we don't actually have yet but is

186
00:07:23,030 --> 00:07:26,630
the type of thing that we want also just

187
00:07:26,630 --> 00:07:29,330
as a as a minor in a problem with this

188
00:07:29,330 --> 00:07:31,610
also the the JavaScript has to be on the

189
00:07:31,610 --> 00:07:35,210
same domain so probably not usable with

190
00:07:35,210 --> 00:07:37,040
the content delivery network and also it

191
00:07:37,040 --> 00:07:39,020
can't be parsed as as it's downloaded so

192
00:07:39,020 --> 00:07:41,750
it's not as fast to say when you loaded

193
00:07:41,750 --> 00:07:44,390
something via via script tag and the

194
00:07:44,390 --> 00:07:45,680
third option which is a little bit

195
00:07:45,680 --> 00:07:48,980
better is to load the JavaScript in an

196
00:07:48,980 --> 00:07:51,080
iframe and so if you load all the

197
00:07:51,080 --> 00:07:52,610
JavaScript that you care about that you

198
00:07:52,610 --> 00:07:54,920
want to be specific to your modules you

199
00:07:54,920 --> 00:07:56,480
can create an iframe you could basically

200
00:07:56,480 --> 00:07:59,690
create a new environment where all only

201
00:07:59,690 --> 00:08:01,370
your javascript is loaded and it can

202
00:08:01,370 --> 00:08:02,770
talk to each other and it's effectively

203
00:08:02,770 --> 00:08:05,000
sandbox from from the other libraries

204
00:08:05,000 --> 00:08:07,670
that you load in the top-level frame the

205
00:08:07,670 --> 00:08:09,230
drawback to this is that it's just kind

206
00:08:09,230 --> 00:08:11,300
of complicated and that when you do

207
00:08:11,300 --> 00:08:13,760
things like load javascript in an iframe

208
00:08:13,760 --> 00:08:15,320
when you refer to the document you're

209
00:08:15,320 --> 00:08:17,120
referring it to that iframe and you're

210
00:08:17,120 --> 00:08:18,620
not referring it into the page where

211
00:08:18,620 --> 00:08:21,050
your application it most likely lives so

212
00:08:21,050 --> 00:08:22,130
you have you so you can do something

213
00:08:22,130 --> 00:08:24,200
like jiggering to keep the to make sure

214
00:08:24,200 --> 00:08:25,490
that you use the right variable in the

215
00:08:25,490 --> 00:08:27,530
right spot but it's pain and it could

216
00:08:27,530 --> 00:08:30,800
also be error prone so of these three

217
00:08:30,800 --> 00:08:32,680
solutions none of them are really

218
00:08:32,680 --> 00:08:36,919
satisfying they all have drawbacks so

219
00:08:36,919 --> 00:08:39,110
there fortunately there is a workaround

220
00:08:39,110 --> 00:08:41,419
and we have and it involves using the

221
00:08:41,419 --> 00:08:46,340
hated with keyword so this is a way this

222
00:08:46,340 --> 00:08:48,020
technique works is that it's similar to

223
00:08:48,020 --> 00:08:50,540
the immediate function but you wrap so

224
00:08:50,540 --> 00:08:51,320
you wrap your code

225
00:08:51,320 --> 00:08:53,090
in a function and what you do is

226
00:08:53,090 --> 00:08:56,210
initially you create a scope so this

227
00:08:56,210 --> 00:08:58,220
variable this is an object literal and

228
00:08:58,220 --> 00:08:59,840
this is going to function basically as

229
00:08:59,840 --> 00:09:02,270
the scope that we want to share between

230
00:09:02,270 --> 00:09:07,040
all modules as as they are loaded and we

231
00:09:07,040 --> 00:09:09,200
wrap our code in an immediate function

232
00:09:09,200 --> 00:09:10,700
and inside that immediate function the

233
00:09:10,700 --> 00:09:12,170
first thing the top-level thing is a

234
00:09:12,170 --> 00:09:15,920
with block and it takes the the module

235
00:09:15,920 --> 00:09:18,890
scope as an argument basically just so

236
00:09:18,890 --> 00:09:21,020
that we can alias it to a short of local

237
00:09:21,020 --> 00:09:22,760
variable so that in the page it's

238
00:09:22,760 --> 00:09:26,420
something you know unusual or unlikely

239
00:09:26,420 --> 00:09:28,730
to Clyde but inside our function we can

240
00:09:28,730 --> 00:09:31,310
use a short name like a so we pass it in

241
00:09:31,310 --> 00:09:34,040
and then we just do with that scope and

242
00:09:34,040 --> 00:09:36,230
then we when we do assignments top-level

243
00:09:36,230 --> 00:09:38,150
assignments like VAR i equals true

244
00:09:38,150 --> 00:09:41,240
instead of doing VAR y equals true we do

245
00:09:41,240 --> 00:09:43,670
at least the top-level assignments in

246
00:09:43,670 --> 00:09:45,800
the cellular module code we assign them

247
00:09:45,800 --> 00:09:48,140
directly on the on the object that we

248
00:09:48,140 --> 00:09:50,420
are passing to with so you notice that

249
00:09:50,420 --> 00:09:53,660
here the assignment is on is on a so

250
00:09:53,660 --> 00:09:56,510
it's directly on the object the scope

251
00:09:56,510 --> 00:09:58,640
object that we've passed in however once

252
00:09:58,640 --> 00:10:00,800
you do that all your uses of that

253
00:10:00,800 --> 00:10:03,050
variable don't need to be prefixed with

254
00:10:03,050 --> 00:10:05,180
a anymore if you had to prefix it with a

255
00:10:05,180 --> 00:10:07,310
everywhere this would be extremely

256
00:10:07,310 --> 00:10:08,750
tedious but you actually don't have to

257
00:10:08,750 --> 00:10:10,640
because what's happening is that when

258
00:10:10,640 --> 00:10:13,970
this alert statement executes eyes goes

259
00:10:13,970 --> 00:10:15,710
up the scope chain to get resolved and

260
00:10:15,710 --> 00:10:17,510
it actually gets resolved on the object

261
00:10:17,510 --> 00:10:19,490
that was passed passed to width which is

262
00:10:19,490 --> 00:10:23,060
a or this module scope variable that we

263
00:10:23,060 --> 00:10:26,150
created and so basically every other

264
00:10:26,150 --> 00:10:28,700
every module that you load which you now

265
00:10:28,700 --> 00:10:30,380
you can do via a script tag you have

266
00:10:30,380 --> 00:10:31,880
basically this you have the exact same

267
00:10:31,880 --> 00:10:34,250
thing as this except this declaration at

268
00:10:34,250 --> 00:10:35,870
the top because this is going to be a

269
00:10:35,870 --> 00:10:38,750
global that actually is shared and then

270
00:10:38,750 --> 00:10:41,060
every every module we'll just call its

271
00:10:41,060 --> 00:10:44,420
function and take and take module scope

272
00:10:44,420 --> 00:10:49,850
and and pass it in so the one problem

273
00:10:49,850 --> 00:10:52,550
that you might notice is that or your

274
00:10:52,550 --> 00:10:54,080
complaint might be I don't really want

275
00:10:54,080 --> 00:10:56,450
to write my code like this and I agree

276
00:10:56,450 --> 00:10:57,770
that you shouldn't want shouldn't write

277
00:10:57,770 --> 00:10:58,970
your code like that it'd be very tedious

278
00:10:58,970 --> 00:11:02,690
it wouldn't be portable across different

279
00:11:02,690 --> 00:11:05,190
different use cases and so fortunately

280
00:11:05,190 --> 00:11:08,430
you don't have to so there's two

281
00:11:08,430 --> 00:11:10,980
transformations that you need to do to

282
00:11:10,980 --> 00:11:13,080
your code and i'll show you how to do

283
00:11:13,080 --> 00:11:15,510
them with the closure compiler so

284
00:11:15,510 --> 00:11:17,130
basically the two things that happen are

285
00:11:17,130 --> 00:11:19,710
is that your function statements so

286
00:11:19,710 --> 00:11:23,000
function f this style has to get

287
00:11:23,000 --> 00:11:26,310
redefined into the function expression

288
00:11:26,310 --> 00:11:28,350
style so this is the style that's you

289
00:11:28,350 --> 00:11:31,110
know espoused in JavaScript of good

290
00:11:31,110 --> 00:11:35,790
parts and other places but so some of

291
00:11:35,790 --> 00:11:37,170
you may know that there actually is a

292
00:11:37,170 --> 00:11:38,970
behavioral difference when you do this

293
00:11:38,970 --> 00:11:41,640
type of trance transformation that has

294
00:11:41,640 --> 00:11:43,560
to do only if you use function hoisting

295
00:11:43,560 --> 00:11:46,740
and my experience that's usually not an

296
00:11:46,740 --> 00:11:48,120
issue it's a feature of the language

297
00:11:48,120 --> 00:11:51,030
that very few people use so this

298
00:11:51,030 --> 00:11:52,920
transformation is basically fairly safe

299
00:11:52,920 --> 00:11:54,270
and straightforward so this is the first

300
00:11:54,270 --> 00:11:56,330
transformation that you have to do

301
00:11:56,330 --> 00:11:58,440
basically different the function from

302
00:11:58,440 --> 00:12:00,120
getting coy stood outside the with block

303
00:12:00,120 --> 00:12:02,550
and the second transformation this one's

304
00:12:02,550 --> 00:12:05,610
a little a little stranger so this this

305
00:12:05,610 --> 00:12:07,410
part you need to make sure that all the

306
00:12:07,410 --> 00:12:09,090
assignments are done on what it what

307
00:12:09,090 --> 00:12:11,730
this shared scope variable is going to

308
00:12:11,730 --> 00:12:14,820
be across your modules so so if you have

309
00:12:14,820 --> 00:12:16,650
assignments so normally your code if

310
00:12:16,650 --> 00:12:18,840
we're just VAR x and then y equals Z

311
00:12:18,840 --> 00:12:21,510
equals 5 or and or another VAR

312
00:12:21,510 --> 00:12:23,280
declaration where you're defining it in

313
00:12:23,280 --> 00:12:25,230
terms of itself basically on the right

314
00:12:25,230 --> 00:12:27,870
side normally if you just said VAR x you

315
00:12:27,870 --> 00:12:29,640
wouldn't have to do an explicit

316
00:12:29,640 --> 00:12:31,200
assignment on the right but in to use

317
00:12:31,200 --> 00:12:32,580
this technique you need to assign it to

318
00:12:32,580 --> 00:12:35,250
undefined because if this global scope

319
00:12:35,250 --> 00:12:37,950
object a doesn't have a slot or a

320
00:12:37,950 --> 00:12:40,530
property so to speak for X then when you

321
00:12:40,530 --> 00:12:41,820
read it it's actually going to go

322
00:12:41,820 --> 00:12:44,190
outside the with block so so basically

323
00:12:44,190 --> 00:12:45,840
that's why all the initial all the

324
00:12:45,840 --> 00:12:48,120
initializations are all the variables

325
00:12:48,120 --> 00:12:50,520
top level variables in your module that

326
00:12:50,520 --> 00:12:51,990
you're going to use have to be defined

327
00:12:51,990 --> 00:12:55,050
or have some definition on the global

328
00:12:55,050 --> 00:12:57,510
scope object so you can see here these

329
00:12:57,510 --> 00:12:58,770
are the basic types of transformations

330
00:12:58,770 --> 00:13:02,910
that you need to do is our chain our pre

331
00:13:02,910 --> 00:13:04,680
fix things with whatever your you know

332
00:13:04,680 --> 00:13:05,790
local variable that you're going to pass

333
00:13:05,790 --> 00:13:07,920
to with is going to be so we can see we

334
00:13:07,920 --> 00:13:12,600
assign X don't defined and we also find

335
00:13:12,600 --> 00:13:14,910
eight like W to find that on a

336
00:13:14,910 --> 00:13:16,890
find in terms of itself and now these

337
00:13:16,890 --> 00:13:19,710
things will behave the same if if a is

338
00:13:19,710 --> 00:13:24,030
passed in so again this would be very

339
00:13:24,030 --> 00:13:26,340
tedious if you were expected to do all

340
00:13:26,340 --> 00:13:28,980
this by hand fortunately this is where

341
00:13:28,980 --> 00:13:32,280
the closure compiler comes in so if

342
00:13:32,280 --> 00:13:33,270
you're not familiar with the closure

343
00:13:33,270 --> 00:13:36,620
compiler is a whole whole whole program

344
00:13:36,620 --> 00:13:39,240
optimizing compiler from google that

345
00:13:39,240 --> 00:13:41,550
means it reads in the all of the code of

346
00:13:41,550 --> 00:13:43,620
your program of your JavaScript and

347
00:13:43,620 --> 00:13:45,060
compiles it all together at once so it

348
00:13:45,060 --> 00:13:47,940
can do you know a whole program analysis

349
00:13:47,940 --> 00:13:49,440
so it could find for a function it could

350
00:13:49,440 --> 00:13:51,360
find all the call sites and that sort of

351
00:13:51,360 --> 00:13:53,610
thing which is what part of what makes

352
00:13:53,610 --> 00:13:57,090
this this technique possible so there's

353
00:13:57,090 --> 00:14:00,180
there's two compiler passes that that

354
00:14:00,180 --> 00:14:01,800
you need to run so basically these to

355
00:14:01,800 --> 00:14:04,080
compile our passes take care of these

356
00:14:04,080 --> 00:14:05,910
two transformations that need to be done

357
00:14:05,910 --> 00:14:07,800
so you write your JavaScript as you

358
00:14:07,800 --> 00:14:09,900
always normally would but this is just

359
00:14:09,900 --> 00:14:11,610
an extra setting that you can enable

360
00:14:11,610 --> 00:14:15,270
when you compile your JavaScript so this

361
00:14:15,270 --> 00:14:17,610
this these passes have not been up

362
00:14:17,610 --> 00:14:19,110
straight up streamed into the closure

363
00:14:19,110 --> 00:14:21,810
compiler yet but that's that's in the

364
00:14:21,810 --> 00:14:24,780
process I've built a build tool for

365
00:14:24,780 --> 00:14:27,000
closure called plover and that's open

366
00:14:27,000 --> 00:14:29,250
source its prevail on google code and it

367
00:14:29,250 --> 00:14:31,560
has all the logic for these compiler

368
00:14:31,560 --> 00:14:32,850
passes it's actually not that difficult

369
00:14:32,850 --> 00:14:36,090
if someone wanted to port it to to

370
00:14:36,090 --> 00:14:39,720
another another compiler perhaps most

371
00:14:39,720 --> 00:14:41,670
interestingly most people are afraid is

372
00:14:41,670 --> 00:14:43,230
that does this really work or is this

373
00:14:43,230 --> 00:14:46,020
just some sort of toy exercise and

374
00:14:46,020 --> 00:14:48,060
JavaScript transformations I can show

375
00:14:48,060 --> 00:14:50,520
you assure you that it is not so I was

376
00:14:50,520 --> 00:14:54,630
formerly at yext and it's a well and

377
00:14:54,630 --> 00:14:57,840
there we built using a web applications

378
00:14:57,840 --> 00:14:59,130
over a hundred thousand lines of code

379
00:14:59,130 --> 00:15:02,490
had to run on ie6 and up we actually

380
00:15:02,490 --> 00:15:04,920
carved our code up into 25 modules to

381
00:15:04,920 --> 00:15:07,230
reduce the initial load size and let

382
00:15:07,230 --> 00:15:08,490
people pick from the pieces that they

383
00:15:08,490 --> 00:15:09,720
needed to and when using the application

384
00:15:09,720 --> 00:15:12,570
to dynamically load modules and and

385
00:15:12,570 --> 00:15:14,310
there were we did not witness any

386
00:15:14,310 --> 00:15:16,860
problems using this technique so it is

387
00:15:16,860 --> 00:15:18,990
definitely much more than a toy and has

388
00:15:18,990 --> 00:15:22,530
been used at scale the one other

389
00:15:22,530 --> 00:15:24,300
outstanding question is just that of

390
00:15:24,300 --> 00:15:25,980
speed since most attractors from with

391
00:15:25,980 --> 00:15:28,010
often claim that

392
00:15:28,010 --> 00:15:29,960
it's going to adversely affect your your

393
00:15:29,960 --> 00:15:32,720
runtime performance so I have not done

394
00:15:32,720 --> 00:15:35,600
any sort of benchmarking yet however we

395
00:15:35,600 --> 00:15:37,940
did not observe any any problems when

396
00:15:37,940 --> 00:15:47,260
when running it yeah

397
00:15:47,270 --> 00:15:53,060
I

398
00:15:53,070 --> 00:15:57,480
Oh

399
00:15:57,490 --> 00:15:59,130
hi

400
00:15:59,130 --> 00:16:02,550
yeah I mean so so that's it so you said

401
00:16:02,550 --> 00:16:11,960
100 times slower in a tight loop

402
00:16:11,970 --> 00:16:15,970
okay yeah so I mean so that's and and

403
00:16:15,970 --> 00:16:17,529
part of that problem though I would say

404
00:16:17,529 --> 00:16:19,500
is that you know there's there's what

405
00:16:19,500 --> 00:16:21,730
javascript interpreters do today and

406
00:16:21,730 --> 00:16:23,110
then there's what we want them to be

407
00:16:23,110 --> 00:16:25,269
able to do obviously recently things

408
00:16:25,269 --> 00:16:27,430
like the eight we've seen interpreters

409
00:16:27,430 --> 00:16:29,740
get a lot faster so I'm not really

410
00:16:29,740 --> 00:16:31,060
certain if there's actually a

411
00:16:31,060 --> 00:16:33,850
fundamental limit in with or really just

412
00:16:33,850 --> 00:16:35,920
that people have not looked at

413
00:16:35,920 --> 00:16:38,320
optimizing it very much yet obviously it

414
00:16:38,320 --> 00:16:40,600
somewhat outcast in yes or is out are

415
00:16:40,600 --> 00:16:43,860
outlawed by es5 script strict so

416
00:16:43,860 --> 00:16:46,450
obviously that that makes it less

417
00:16:46,450 --> 00:17:02,090
popular to work on yeah

418
00:17:02,100 --> 00:17:06,059
yeah well I yeah so this technique is a

419
00:17:06,059 --> 00:17:07,319
little different because it's using with

420
00:17:07,319 --> 00:17:09,630
at the very top as opposed to very deep

421
00:17:09,630 --> 00:17:12,419
in the AST so i'm not sure that many

422
00:17:12,419 --> 00:17:13,829
people have been using it or looking at

423
00:17:13,829 --> 00:17:16,110
it this way before but i could be wrong

424
00:17:16,110 --> 00:17:25,900
about that

425
00:17:25,910 --> 00:17:29,850
yeah well it's definitely worth

426
00:17:29,850 --> 00:17:32,190
measuring to be to be certain but you

427
00:17:32,190 --> 00:17:33,900
know telling other people it's still in

428
00:17:33,900 --> 00:17:35,760
JavaScript and compared to say Dom

429
00:17:35,760 --> 00:17:37,500
accesses or that sort of thing still

430
00:17:37,500 --> 00:17:39,360
actually may be very cheap it's hard to

431
00:17:39,360 --> 00:17:41,190
say without without actually testing it

432
00:17:41,190 --> 00:17:46,380
out one is certain we differentiate

433
00:17:46,380 --> 00:17:48,310
automated system

434
00:17:48,310 --> 00:17:51,450
four bears over like the property

435
00:17:51,450 --> 00:17:53,680
share pothole

436
00:17:53,680 --> 00:17:55,720
these are way different

437
00:17:55,720 --> 00:17:58,090
kind of like module context variables

438
00:17:58,090 --> 00:18:00,460
and then strip these local like a bear

439
00:18:00,460 --> 00:18:02,260
like hey I don't needs to be in the box

440
00:18:02,260 --> 00:18:05,020
oh yeah yeah so I guess I don't really

441
00:18:05,020 --> 00:18:06,370
demonstrate it here but the question was

442
00:18:06,370 --> 00:18:08,799
you know our is this transformation done

443
00:18:08,799 --> 00:18:10,330
for all very ductile erations or only

444
00:18:10,330 --> 00:18:12,070
ones at the top level and so the answer

445
00:18:12,070 --> 00:18:13,179
is that it's only done for ones at the

446
00:18:13,179 --> 00:18:15,850
top level so inside a function scope you

447
00:18:15,850 --> 00:18:19,630
don't need to do it in your life so you

448
00:18:19,630 --> 00:18:23,289
got like 25 across your entire entire

449
00:18:23,289 --> 00:18:25,900
occasion each one is it some closure you

450
00:18:25,900 --> 00:18:27,730
don't need like opportunity you want a

451
00:18:27,730 --> 00:18:29,990
very local

452
00:18:29,990 --> 00:18:33,360
looked like all their options like can

453
00:18:33,360 --> 00:18:36,600
you have my closure level variable right

454
00:18:36,600 --> 00:18:39,410
in addition to module level barriers

455
00:18:39,410 --> 00:18:42,180
yeah I think you can do that I don't

456
00:18:42,180 --> 00:18:43,800
believe the way that the passes are

457
00:18:43,800 --> 00:18:45,930
written right now do that because I

458
00:18:45,930 --> 00:18:47,820
don't think they take what's called

459
00:18:47,820 --> 00:18:50,190
cross code motion into account basically

460
00:18:50,190 --> 00:18:52,380
code make it move co gets move to the

461
00:18:52,380 --> 00:18:54,710
least common ancestor of where it's used

462
00:18:54,710 --> 00:18:56,880
but i think that is definitely possible

463
00:18:56,880 --> 00:18:58,410
that's true that would reduce the number

464
00:18:58,410 --> 00:19:00,690
of aliases that you'd have to create

465
00:19:00,690 --> 00:19:06,530
yeah it was good question though see

466
00:19:06,530 --> 00:19:08,400
anyway there are any other questions

467
00:19:08,400 --> 00:19:16,020
well I'm feeling questions okay so so

468
00:19:16,020 --> 00:19:18,930
this is just to sum up this was actually

469
00:19:18,930 --> 00:19:22,200
done by my colleague EXT American he he

470
00:19:22,200 --> 00:19:24,210
basically we got stung by this this Bing

471
00:19:24,210 --> 00:19:26,010
Maps problem and he tracked it down how

472
00:19:26,010 --> 00:19:29,010
I mysteriously became three and it

473
00:19:29,010 --> 00:19:30,300
turned out that this was so this

474
00:19:30,300 --> 00:19:31,890
protected us from arbitrary third-party

475
00:19:31,890 --> 00:19:33,570
modules but also we discovered that

476
00:19:33,570 --> 00:19:35,100
there are certain web proxies that also

477
00:19:35,100 --> 00:19:37,260
seemed to inject JavaScript into our

478
00:19:37,260 --> 00:19:39,810
page we weren't really sure why that was

479
00:19:39,810 --> 00:19:42,210
happening but this also protect adds

480
00:19:42,210 --> 00:19:44,340
level of protection around that sort of

481
00:19:44,340 --> 00:19:47,490
thing so I realized that because of all

482
00:19:47,490 --> 00:19:48,330
the things that have been written about

483
00:19:48,330 --> 00:19:50,760
within the past like it's it may be hard

484
00:19:50,760 --> 00:19:52,590
to accept that this is actually a really

485
00:19:52,590 --> 00:19:54,720
good solution to this type of problem

486
00:19:54,720 --> 00:19:56,760
but I certainly encourage you to take a

487
00:19:56,760 --> 00:19:59,820
look and I think that you know if we if

488
00:19:59,820 --> 00:20:02,070
this becomes a more popular technique

489
00:20:02,070 --> 00:20:05,100
than things can be optimized things that

490
00:20:05,100 --> 00:20:06,540
are slow today or not not necessarily

491
00:20:06,540 --> 00:20:07,920
going to be the things that are slow

492
00:20:07,920 --> 00:20:11,490
tomorrow so I encourage you to take a

493
00:20:11,490 --> 00:20:14,370
look at the code and contact me if you

