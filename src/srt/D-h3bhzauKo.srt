1
00:01:16,512 --> 00:01:18,512
please standby for realtime 

2
00:14:16,632 --> 00:14:18,256
captions... Test.  
   >> Please let me know if you

3
00:14:18,257 --> 00:14:21,282
can hear me right now.  
   >> STUDENT:  I can

4
00:14:25,004 --> 00:14:27,004
hear you! 
   >> Okay.  Awesome.  This is

5
00:14:28,237 --> 00:14:34,404
working right.  That's great.  
And I got you connected to the

6
00:14:34,602 --> 00:14:39,029
monitor.  I think it's like, ten
minutes...

7
00:14:44,660 --> 00:14:50,307
we're basically just waiting.  
We're running late, so you can

8
00:14:50,308 --> 00:14:55,322
make a call when you're ready.  
It's supposed to start at 11:10.

9
00:15:16,117 --> 00:15:17,503
captions...

10
00:15:17,504 --> 00:15:19,504
Please

11
00:15:24,764 --> 00:15:27,290
.

12
00:15:42,769 --> 00:15:44,769
for

13
00:15:56,159 --> 00:15:58,159
realtime

14
00:16:08,975 --> 00:16:15,042
.

15
00:16:24,124 --> 00:16:30,848
.  
       .

16
00:16:30,849 --> 00:16:38,051
.  
           . .

17
00:16:40,545 --> 00:16:50,102
.  
           .

18
00:16:52,332 --> 00:16:58,723
.  
   .              1

19
00:16:58,724 --> 00:17:02,994
.  
   .

20
00:17:23,891 --> 00:17:25,891
Live Captions by:

21
00:28:28,238 --> 00:28:30,586
>> Hey!
How's everyone doing?

22
00:28:30,587 --> 00:28:33,351
[ Applause ]
so, so, so quiet, I feel.  How

23
00:28:34,963 --> 00:28:36,842
is everyone doing? 
[ Cheers and Applause ]

24
00:28:36,843 --> 00:28:40,225
That's better.  That's how loud 
you should be when someone comes

25
00:28:40,628 --> 00:28:44,152
up here on stage, especially our
next speaker.  His name is

26
00:28:44,396 --> 00:28:49,179
David.  He comes from Microsoft.
He's very passionate about open

27
00:28:49,664 --> 00:28:54,982
source.  Loves talking about 
web-based technologies,

28
00:28:55,156 --> 00:28:59,493
JavaScript, CSS, and he is going
to talk to us about simplifying

29
00:28:59,659 --> 00:29:03,935
complex UIs.  Who here works on 
apps and thinks that they've

30
00:29:04,061 --> 00:29:08,458
gone like, you know, bananas, 
and it's way too complex for

31
00:29:08,578 --> 00:29:10,578
them to

32
00:29:14,966 --> 00:29:19,838
handle? Me included.  It can go 
into unbelievable complex

33
00:29:19,839 --> 00:29:25,083
things.  I don't know what a 
finite automa statechart is, but

34
00:29:25,232 --> 00:29:29,813
we will find out.  Here is David
to talk to us about complex UIs.

35
00:29:30,599 --> 00:29:32,267
[ Applause ]
   >> DAVID: Thank you.  Is this

36
00:29:32,268 --> 00:29:34,268
on? Can you all

37
00:29:37,059 --> 00:29:40,339
hear me? All right.  There we 
go! All right.

38
00:29:40,340 --> 00:29:43,071
So, yeah.  My talk is

39
00:29:46,749 --> 00:29:54,336
simplifying, though I would have
liked to see a talk titled

40
00:29:54,527 --> 00:29:57,609
simplifying complex talk titles 
with fewer words.  I know what

41
00:29:57,779 --> 00:30:02,912
you might be thinking right now.
The react API, a little scary?

42
00:30:03,337 --> 00:30:06,062
There's a good book in order to 
understand how to best work with

43
00:30:06,343 --> 00:30:08,856
it, and it's doing

44
00:30:16,535 --> 00:30:19,517
whatever Danny says to do.  The 
second half of this talk is

45
00:30:19,518 --> 00:30:23,245
exactly what I'm talking about 
today, except in the more

46
00:30:23,246 --> 00:30:25,598
general sense.  
    I want to talk about it,

47
00:30:25,739 --> 00:30:31,737
though.  Not in the context of 
React or you or angular or any

48
00:30:32,098 --> 00:30:34,946
of the last frameworks that came
out last week.  But I want to

49
00:30:35,139 --> 00:30:39,063
talk about it in a 
framework-less context.  This is

50
00:30:39,564 --> 00:30:42,751
an idea that doesn't just apply 
to any framework or no framework

51
00:30:42,956 --> 00:30:45,712
in general, but really any 
programming language as well.

52
00:30:45,974 --> 00:30:52,077
We can see how it could help us 
simplify our UIs.  So I'm a

53
00:30:56,389 --> 00:30:59,766
pianist, and I have been playing
for about 20 years.  This is the

54
00:31:00,127 --> 00:31:05,099
approach that I take to software
development.  I made the analogy

55
00:31:05,440 --> 00:31:10,154
that if software is music, then 
developers are composers.  We're

56
00:31:10,477 --> 00:31:14,520
taking that music, and we're 
composing it in a way that is

57
00:31:14,831 --> 00:31:18,123
applicable to any language or 
any platform.  And we do so in a

58
00:31:18,478 --> 00:31:21,808
variety of ways.  However, 
music's interesting, because

59
00:31:21,809 --> 00:31:25,462
with music, you have music 
notation, which you just saw

60
00:31:25,754 --> 00:31:30,315
there.  Let's go back and see 
it.  So this stuff right here.

61
00:31:30,614 --> 00:31:34,120
This music notation is hundreds 
and hundreds of years old.

62
00:31:34,121 --> 00:31:39,755
However, the exact same notation
is used today to represent music

63
00:31:39,890 --> 00:31:48,268
from classical, romantic, 
whatever the hell Bjork is.  You

64
00:31:48,408 --> 00:31:52,056
can give a musician who 
understands how to read sheet

65
00:31:52,186 --> 00:31:55,953
music, and they will be able to 
play it.  And this works for all

66
00:31:56,546 --> 00:31:59,849
instruments, and you know, all 
musicians of all levels.  So I

67
00:32:04,803 --> 00:32:09,360
was wondering, what is the music
notation of user interfaces?

68
00:32:09,760 --> 00:32:14,013
What do all user interfaces have
in common, and how can we

69
00:32:14,014 --> 00:32:16,014
represent that

70
00:32:18,687 --> 00:32:20,968
declaratively? 
    So when we're working with

71
00:32:21,097 --> 00:32:25,643
software, we usually deal with 
APIs.  Good APIs have three main

72
00:32:26,354 --> 00:32:29,759
qualities.  They're well 
documented.  You can read the

73
00:32:29,937 --> 00:32:32,302
documentation and understand 
exactly what's happening with

74
00:32:32,431 --> 00:32:35,588
the API.  They are very 
predictable.  The API is going

75
00:32:35,903 --> 00:32:40,743
to work the exact same way every
time.  And they're also

76
00:32:40,878 --> 00:32:45,062
testable.  You can test against 
an API.  They provide mocks for

77
00:32:45,063 --> 00:32:50,634
you or have a test database or 
something like that.  So user

78
00:32:51,414 --> 00:32:56,359
interfaces, though? User 
interfaces are really complex.

79
00:32:56,360 --> 00:33:01,094
I mean, does anyone find 
developing user interfaces easy?

80
00:33:01,415 --> 00:33:05,217
Those of you watching online, no
one raised their hand, which is

81
00:33:05,218 --> 00:33:07,817
good, because I would have 
called them out if they did.  We

82
00:33:08,007 --> 00:33:12,539
have to deal with something 
called a human API.  That's all

83
00:33:12,724 --> 00:33:17,652
of you, all of our clients, 
everyone we work with.  Human

84
00:33:17,653 --> 00:33:20,692
API is undocumented or 
unpredictable, and we're

85
00:33:21,462 --> 00:33:25,262
untestable.  And we're also 
extremely buggy.  If you don't

86
00:33:25,263 --> 00:33:28,699
believe me, turn on an American 
news network, and you'll see

87
00:33:28,823 --> 00:33:32,705
proof of that.  So I work for 
Microsoft.  By the way, I'm not

88
00:33:33,084 --> 00:33:37,408
relating Microsoft to any of 
this terrible API stuff, I

89
00:33:37,678 --> 00:33:43,117
promise.  And at Microsoft, we 
have more than 50,000 software

90
00:33:43,260 --> 00:33:46,867
engineers throughout the world, 
and at least 7 designers, I'm

91
00:33:48,402 --> 00:33:49,281
sure.  
[ Laughter ]

92
00:33:49,282 --> 00:33:53,421
And we also serve one and a half
billion customers.  I think this

93
00:33:53,800 --> 00:33:59,158
is just for windows.  It might 
be more than that.  When we're

94
00:33:59,617 --> 00:34:02,965
developing user interfaces for 
1.5 billion people, we have to

95
00:34:02,966 --> 00:34:06,148
imagine all the different ways a
user could use the user

96
00:34:06,598 --> 00:34:09,524
interface.  And you know, this 
is different cultures and

97
00:34:09,642 --> 00:34:13,016
languages.  You wonder why 
diversity is so important in

98
00:34:13,396 --> 00:34:17,660
tech? We have to reach the 1.5 
billion people.  So we don't

99
00:34:18,094 --> 00:34:23,633
develop software for just one 
person.  However, when we're

100
00:34:23,634 --> 00:34:27,162
developing software with just 
the happy path in mind, that's

101
00:34:27,352 --> 00:34:30,011
essentially what we're doing.  
We're assuming that there's this

102
00:34:30,228 --> 00:34:33,492
ideal user who's using our 
applications in the exact way

103
00:34:33,657 --> 00:34:35,657
that we want them to.  But this 
never

104
00:34:38,634 --> 00:34:40,918
happens.  
    We're going to take a look

105
00:34:41,049 --> 00:34:44,853
at the code example, but I don't
want you to read too deeply into

106
00:34:45,225 --> 00:34:48,244
the code.  I just want to see if
you relate to this.  We're going

107
00:34:48,834 --> 00:34:56,178
to create a sample F where we 
query the flickr API and then

108
00:34:56,716 --> 00:34:59,256
the results.  Similar to what 
Dan was doing with movies in his

109
00:34:59,409 --> 00:35:04,491
last talk.  So it's pretty 
simple right? We do a fetch.

110
00:35:04,610 --> 00:35:09,463
Then when we get the data, we 
show it.  Are there any bugs

111
00:35:09,797 --> 00:35:13,740
here? Are we done? Well... 
    Let's say the data takes a

112
00:35:13,925 --> 00:35:17,791
long time to load.  Okay.  So 
now we have to set this loading

113
00:35:17,792 --> 00:35:21,939
flag, loading is true.  And once
we finish loading data, then we

114
00:35:22,460 --> 00:35:26,960
have to set loading to false.  
Are we done? No.  What if we

115
00:35:27,152 --> 00:35:32,085
have an error.  Well, we have to
hide the loading screen, show

116
00:35:32,252 --> 00:35:37,589
the error, right? But, are we 
home free yet? No.  Because, we

117
00:35:37,749 --> 00:35:43,484
also have to make sure that we 
clear the error once we try to

118
00:35:43,642 --> 00:35:47,191
search again.  As you can see, 
the complexity is getting bigger

119
00:35:47,379 --> 00:35:53,458
and bigger.  Now my onserve to 
vent handler is getting

120
00:35:53,861 --> 00:35:56,569
extremely huge.  I'm sure many 
of you can relate to this code.

121
00:35:56,977 --> 00:36:00,254
Many of you will say yeah, some 
of my code looks like that.

122
00:36:00,411 --> 00:36:04,239
Sure.  What if your boss comes 
to you and says we want the use

123
00:36:04,430 --> 00:36:07,432
tore be able to cancel the 
search, because, you know,

124
00:36:08,232 --> 00:36:10,232
sometimes it takes too

125
00:36:12,471 --> 00:36:14,474
long.  
Sometimes they want to search

126
00:36:14,475 --> 00:36:17,362
for something else.  That logic 
gets crazier.  I don't know if

127
00:36:17,565 --> 00:36:22,744
you can read that.  I'll zoom in
for you.  But there's a lot of

128
00:36:23,229 --> 00:36:28,794
complexity in just one event 
handler.  You might know this as

129
00:36:28,795 --> 00:36:32,046
spaghetti code, where our code 
quickly gets unmanageable.  Some

130
00:36:32,252 --> 00:36:36,534
of you might see your engineers 
and think I don't do spaghetti

131
00:36:36,681 --> 00:36:40,980
code.  All of my code is modular
and layered and separation of

132
00:36:41,241 --> 00:36:46,549
concerns.  You might not write 
spaghetti code, but you might

133
00:36:47,351 --> 00:36:50,531
write lasagne code, which is 
spaghetti code in layers.  This

134
00:36:50,532 --> 00:36:53,745
is called the bottom-up 
approach.  That approach is

135
00:36:54,191 --> 00:37:00,784
whenever you have an event like 
onclick or on change, you do all

136
00:37:00,996 --> 00:37:06,265
of the logic in that event.  And
that can refer to so many

137
00:37:06,266 --> 00:37:08,913
different actions, and some of 
those actions might change the

138
00:37:09,070 --> 00:37:12,650
states.  But you have to choose 
which actions are executed,

139
00:37:13,140 --> 00:37:16,933
otherwise you might edit the 
state in a wrong way, and you

140
00:37:18,306 --> 00:37:24,616
have to ad if statements.  
There's a lot of downsides to

141
00:37:24,849 --> 00:37:29,046
this.  This bottom-up code is 
difficult to test.  All the

142
00:37:29,365 --> 00:37:31,772
application logic lives in your 
mind.  So when you're writing

143
00:37:31,773 --> 00:37:34,863
your tests, you have to output 
it from the developer's mind on

144
00:37:35,269 --> 00:37:38,550
to the tests.  And it makes it 
really hard to work with other

145
00:37:38,738 --> 00:37:41,014
developers.  The code is 
difficult to understand.  The

146
00:37:41,015 --> 00:37:44,010
code that I just showed you for 
showing and hiding the gallery,

147
00:37:44,170 --> 00:37:47,353
if you were to try to parse that
as a brand-new developer working

148
00:37:47,503 --> 00:37:52,515
on the project, you would find 
it really difficult to do so.

149
00:37:53,012 --> 00:37:56,556
The code will contain bugs, for 
sure, because there's going to

150
00:37:56,793 --> 00:37:59,467
be edge cases that you might not
have considered.  It will also

151
00:37:59,468 --> 00:38:03,915
be difficult to enhance, just 
like we've seen with

152
00:38:04,346 --> 00:38:07,731
cancellation.  And features, 
such as cancellation, make the

153
00:38:07,732 --> 00:38:10,964
code work.  They explode the 
potential possible states and

154
00:38:11,133 --> 00:38:13,133
actions that could happen in

155
00:38:15,124 --> 00:38:18,357
your application.  
    Here's an intuition for

156
00:38:18,358 --> 00:38:22,039
moving forward.  We have a 
realization that UI components

157
00:38:22,201 --> 00:38:26,145
are not independent.  We have 
frameworks that they isolate

158
00:38:26,329 --> 00:38:28,613
components and say these 
components fit in their nice

159
00:38:28,960 --> 00:38:31,790
little box, and we can stick 
them in the page

160
00:38:37,810 --> 00:38:39,662
anywhere.  
Everything they see on the

161
00:38:39,663 --> 00:38:43,128
screen is in the exact same 
context, and we have to

162
00:38:43,603 --> 00:38:46,463
coordinate from components to 
component.  So another

163
00:38:46,665 --> 00:38:49,200
realization is that actions, 
which is what happens when you

164
00:38:49,608 --> 00:38:56,245
do an event, are based both on 
the events executed, and the

165
00:38:56,246 --> 00:38:58,246
current state of

166
00:39:00,241 --> 00:39:04,384
the context.  
And it's also that this event

167
00:39:05,174 --> 00:39:07,665
action paradigm is too simple to
represent all the possible

168
00:39:08,128 --> 00:39:11,798
states our app can be in.  
    So, what's

169
00:39:19,222 --> 00:39:20,739
the solution? 
Standard statecharts.  I know a

170
00:39:20,740 --> 00:39:24,553
lot of you may have heard these 
before or studied them in

171
00:39:24,791 --> 00:39:27,554
school.  Even though you might 
know what these are, you

172
00:39:27,693 --> 00:39:30,722
probably haven't applied them to
user interfaces and actual

173
00:39:31,227 --> 00:39:35,280
software.  So, looking up 
material for this could be a

174
00:39:35,281 --> 00:39:39,604
little complicated.  I'm a 
visual person, and I'm going to

175
00:39:39,605 --> 00:39:41,605
do it in a very

176
00:39:47,870 --> 00:39:50,396
visual way.  
First you have an initial state.

177
00:39:50,556 --> 00:39:53,785
Then you have a finite number of
states, which represents the

178
00:39:53,936 --> 00:39:57,851
states that the app could be in.
When an app is in one state, it

179
00:39:58,133 --> 00:40:00,980
can't be in the other state at 
the same time.  You have a

180
00:40:01,412 --> 00:40:05,535
finite number of events, such as
fetching, resolving, or

181
00:40:05,536 --> 00:40:09,916
rejecting a promise.  You have a
mapping from state to state

182
00:40:10,237 --> 00:40:13,639
based on these events.  So for 
example, when you're fetching a

183
00:40:13,795 --> 00:40:17,284
promise and it resolves, you go 
to the fulfilled state.  And

184
00:40:17,660 --> 00:40:22,430
same way with reject and 
rejected state.  And you have a

185
00:40:23,510 --> 00:40:26,498
finite number of final states.  
User interfaces can be

186
00:40:30,772 --> 00:40:33,526
continuous.  We could keep using
them.  It doesn't say we're

187
00:40:33,647 --> 00:40:37,492
done, so go uninstall Instagram 
because you're not going to need

188
00:40:38,840 --> 00:40:43,181
it.  If you go to this site, 
it's going to say promises are

189
00:40:43,340 --> 00:40:46,533
just a state machine.  That 
should give you a big clue with

190
00:40:46,867 --> 00:40:49,793
what we're working with here.  
    So the original app that I

191
00:40:50,109 --> 00:40:54,051
showed you, the gallery app can 
be modelled as the state machine

192
00:40:54,052 --> 00:40:57,616
right here.  So we start in the 
idle state, and then we go to

193
00:40:57,890 --> 00:41:01,704
search.  Then we're in the 
searching state.  If we try to

194
00:41:02,112 --> 00:41:05,366
search again, it loops back.  
It's like hold on.  We're

195
00:41:05,942 --> 00:41:09,236
already searching.  We can 
either resolve or reject the

196
00:41:09,237 --> 00:41:12,003
search results.  And from those 
two states, we could

197
00:41:15,429 --> 00:41:19,800
search again.  This is clearly 
seen by the arrows going from

198
00:41:19,801 --> 00:41:22,850
success or failure back to 
searching again.

199
00:41:22,851 --> 00:41:27,754
So, the machine that -- the 
state machine that I envision

200
00:41:27,957 --> 00:41:35,130
looks sort of like this.  It's a
JSON object.  I like JSON better

201
00:41:35,402 --> 00:41:39,120
than blackbox functions because 
you can enumerate all the

202
00:41:39,121 --> 00:41:42,453
possible states and actions and 
be able to transition from one

203
00:41:42,623 --> 00:41:45,357
to the other with nice, simple 
function right here.  For

204
00:41:45,634 --> 00:41:49,384
example, if we're in the 
searching state, and I get a

205
00:41:49,634 --> 00:41:55,924
resolve, then I just look it up 
in this JSON object.  This

206
00:41:58,310 --> 00:42:00,310
searching,

207
00:42:01,704 --> 00:42:06,314
on resolve, success. 
In type script, it's a record.

208
00:42:06,534 --> 00:42:13,388
I guess it's the same in C#.  In
PHP, they call for help.  I

209
00:42:13,616 --> 00:42:17,992
don't know.  So here's an 
example of what I just showed

210
00:42:19,346 --> 00:42:23,487
you.  If I were to search for 
iceland -- let's search for

211
00:42:23,717 --> 00:42:27,803
goats first.  Let's say I don't 
want to search for goats.  I'll

212
00:42:28,147 --> 00:42:30,923
just cancel that.  Let's search 
for Iceland

213
00:42:40,917 --> 00:42:45,146
instead.  When we do the event 
of selecting a photo, we have a

214
00:42:45,147 --> 00:42:48,612
state transition that goes from 
gallery to photo.  We can exit

215
00:42:48,613 --> 00:42:55,659
that, search again, cancel, 
search.  Let's cancel that.

216
00:42:56,089 --> 00:42:58,915
Iceland.  And so you see it goes
from state to state, and no

217
00:42:58,916 --> 00:43:02,727
matter how many times I try to 
break this app, it's not going

218
00:43:02,728 --> 00:43:07,386
to deviate from this state 
machine that I have here.  And

219
00:43:07,921 --> 00:43:11,733
you see there was a few extra 
things such as done searching,

220
00:43:11,734 --> 00:43:16,279
actions over here.  When I'm 
update the items? We're going to

221
00:43:17,649 --> 00:43:20,289
discuss that in a little further
detail.  And also this is part

222
00:43:20,290 --> 00:43:23,801
of an article that I wrote which
gives an introduction to finite

223
00:43:23,802 --> 00:43:30,405
state machines.  
    So I use visual studio

224
00:43:30,406 --> 00:43:34,350
share.  I work on it and I also 
have to use it.  It's called dog

225
00:43:35,195 --> 00:43:39,892
fooding.  Anyway... and this is 
sort of what it looks like.  And

226
00:43:40,378 --> 00:43:46,441
so, I don't know if we have 
Sarah and Burke in here.  Here's

227
00:43:47,359 --> 00:43:53,975
Burke right now.  You can think 
of it as Google docs for

228
00:43:54,343 --> 00:43:57,434
collaborative coding.  It's in 
preview in Microsoft.  And I

229
00:43:57,988 --> 00:44:00,243
have no control over what 
they're typing, and they're

230
00:44:00,548 --> 00:44:03,325
typing this in realtime.  With 
this live share, we can

231
00:44:03,489 --> 00:44:05,895
collaboratively code in the 
exact same document at the same

232
00:44:06,021 --> 00:44:08,999
time.  These are a complex 
series of events that are

233
00:44:09,323 --> 00:44:13,000
happening at the same time, and 
so we have to manage all of

234
00:44:13,627 --> 00:44:16,518
these possible events and all 
the possible states that this

235
00:44:17,403 --> 00:44:24,376
could be in.  I have no idea... 
    Oh God.  Good luck breaking

236
00:44:25,252 --> 00:44:30,654
the demo.  It probably will, 
though.  Ha ha.  Anyway! I'm

237
00:44:30,655 --> 00:44:36,816
going to end this before it gets
too crazy...

238
00:44:36,817 --> 00:44:42,425
One of the big things I have to 
work on in liveshare is this

239
00:44:42,426 --> 00:44:45,732
whole sign-in flow.  You would 
think that signing in is easy

240
00:44:45,733 --> 00:44:49,714
and, you know, signing in, 
signing out, all of that.  But

241
00:44:49,715 --> 00:44:53,046
it's actually not.  Once you 
start drawing it out, it becomes

242
00:44:53,764 --> 00:44:56,195
a lot more complex.  So for 
example, there could be a

243
00:44:56,836 --> 00:45:00,279
sign-in failure.  You know, 
especially from Iceland.  I'm so

244
00:45:00,696 --> 00:45:03,781
glad that worked in Iceland.  
All of our servers are based in

245
00:45:04,025 --> 00:45:07,328
the United States.  So when you 
have a sign-in success, then you

246
00:45:07,747 --> 00:45:11,783
go to the signin state.  From 
there you could go do two

247
00:45:12,120 --> 00:45:15,224
things.  You could either share 
a session or join a session.  So

248
00:45:16,173 --> 00:45:20,906
what I did was a couple months 
back, I refactored this part of

249
00:45:21,112 --> 00:45:24,565
the app so that it uses an 
explicit state machine just like

250
00:45:25,006 --> 00:45:27,958
this.  We were getting a lot of 
bugs.  We were saying what if

251
00:45:27,959 --> 00:45:32,249
we're in the middle of sharing 
and the user signs out? What if

252
00:45:32,738 --> 00:45:37,728
we join the session, and then we
decide to share a session at the

253
00:45:37,976 --> 00:45:43,769
same time? That shouldn't be 
allowed.  We had all of these

254
00:45:45,075 --> 00:45:48,447
if/else and switch statements, 
so I decided there has to be a

255
00:45:48,732 --> 00:45:55,400
better way.  I did the simpl 
JSON object approach.  The state

256
00:45:55,648 --> 00:46:00,362
machine that I set up? It was 
very easy to add telemetry to

257
00:46:01,378 --> 00:46:04,904
it.  I added telemetry, and I 
get this nice visual showing

258
00:46:04,905 --> 00:46:08,236
exactly the frequency of how 
users go from state to state.

259
00:46:08,237 --> 00:46:11,840
So you could see obviously, most
of the users go through this

260
00:46:11,841 --> 00:46:14,822
initializing and then signing in
state, and then you could either

261
00:46:15,474 --> 00:46:18,813
externally sign in, or you could
sign out.  And then you could

262
00:46:18,947 --> 00:46:25,006
see that users tend to go to 
either joining or sharing, you

263
00:46:25,234 --> 00:46:29,520
know? At about the same 
frequency.  And yeah.  So it

264
00:46:29,521 --> 00:46:33,695
clearly shows, too, how many 
users go to the error state and

265
00:46:33,877 --> 00:46:38,159
how many users go to the success
state for each of these states

266
00:46:38,607 --> 00:46:42,537
as well.  Now, these are very 
powerful insights.  Because

267
00:46:43,581 --> 00:46:47,598
while telemetry will only tell 
you an atomic bit of data, here

268
00:46:47,924 --> 00:46:50,961
is telemetry that tells you the 
entire user flow of what's

269
00:46:51,579 --> 00:46:54,506
happening.  We could limit this 
to user and be able to see a

270
00:46:54,507 --> 00:46:57,165
nice path of what the user 
actually did in the app.  So

271
00:46:57,166 --> 00:47:01,210
it's sort of like, you know, 
like the funnel diagrams, except

272
00:47:01,380 --> 00:47:05,434
even crazier.  
    We could also use state

273
00:47:05,924 --> 00:47:09,269
machines for integration 
testing.  And so this gets a

274
00:47:09,591 --> 00:47:12,201
little bit into graph theory, so
bear with me a little bit.

275
00:47:15,705 --> 00:47:20,302
Here we would be using a 
shortest path algorithm.  You

276
00:47:20,303 --> 00:47:26,060
could choose your favorite one. 
It sounds like an

277
00:47:30,039 --> 00:47:33,201
Icelandic name.  
Any of these formulas for

278
00:47:33,599 --> 00:47:36,977
finding the shortest path.  And 
so, for those who don't know,

279
00:47:36,978 --> 00:47:40,078
the shortest path is just going 
from one state to the other with

280
00:47:40,079 --> 00:47:44,262
the minimal cost.  So you could 
imagine each of these arrows

281
00:47:44,476 --> 00:47:47,932
have a wait.  And so you just 
want to minimize, you know, how

282
00:47:48,123 --> 00:47:51,713
long it takes to get from one 
path to the other.  Sort of like

283
00:47:51,859 --> 00:47:55,265
in Google maps, finding the 
shortest ETA from one point to

284
00:47:55,592 --> 00:47:59,738
the other.  So analytics would 
provide these waits.  And this

285
00:48:02,603 --> 00:48:05,950
heaped represents all the happy 
paths a user could take.  If we

286
00:48:05,951 --> 00:48:10,231
want a user to, let's say, share
a session, and get to the shared

287
00:48:10,706 --> 00:48:14,931
state, we would imagine the user
going from signed in to sharing

288
00:48:14,932 --> 00:48:19,537
to shared.  Just that simple.  
These could be automatically

289
00:48:19,904 --> 00:48:22,931
generated from the JSON 
structure just like this.  But,

290
00:48:23,721 --> 00:48:29,679
remember, we're not just dealing
with the happy paths.  So, we

291
00:48:30,073 --> 00:48:33,349
would do a death first search 
algorithm to find all the other

292
00:48:34,032 --> 00:48:36,878
paths a user could take.  Some 
of you might be thinking these

293
00:48:37,364 --> 00:48:40,216
algorithm things, I didn't think
I would need them.  You sort of

294
00:48:40,431 --> 00:48:42,431
do; they're really

295
00:48:48,082 --> 00:48:50,730
helpful.  And so, these 
represent all the possible user

296
00:48:51,086 --> 00:48:54,554
flows.  You can imagine a user 
getting from state A to state C

297
00:48:54,555 --> 00:48:57,816
might not take the easiest 
route.  They might take a longer

298
00:48:58,098 --> 00:49:03,954
route to get all the way to C.  
And it reveals all the edge

299
00:49:04,360 --> 00:49:06,532
cases.  
When you model every single

300
00:49:06,912 --> 00:49:09,739
possible state with every single
possible action, and you get all

301
00:49:10,381 --> 00:49:15,655
of these flows, you're going to 
basically have 100,000% test

302
00:49:15,656 --> 00:49:18,854
coverage for anything that could
possibly happen in your app.

303
00:49:19,082 --> 00:49:21,864
And of course these could all be
automatically generated.  I

304
00:49:22,232 --> 00:49:25,217
caution against this, because 
you would be generating

305
00:49:25,785 --> 00:49:28,878
integration tests -- it would 
generate a lot of integration

306
00:49:29,434 --> 00:49:32,546
tests, which isn't necessarily a
bad thing, but when you're doing

307
00:49:32,947 --> 00:49:35,630
continuous integration, you 
don't want your tests to take

308
00:49:36,044 --> 00:49:39,402
four hours long.  
    It makes software bugs

309
00:49:39,403 --> 00:49:43,139
visually clear by drawing a map 
and putting them on the diagram.

310
00:49:43,140 --> 00:49:46,172
You can see when I do this 
event, I'm going to the wrong

311
00:49:46,552 --> 00:49:49,784
state.  Or maybe I have an 
unhandled event, which does

312
00:49:49,918 --> 00:49:53,090
nothing.  Or maybe I have a 
missing transition.  That's

313
00:49:53,356 --> 00:49:58,792
shown here, too.  For example, 
Dan was showing the example

314
00:49:58,983 --> 00:50:02,048
where when you click a movie, it
just waits and waits, and then

315
00:50:02,405 --> 00:50:05,197
you get the next movie, and 
there's no loading state.  You

316
00:50:05,528 --> 00:50:08,201
can clearly see that in the 
state transition diagram.  And

317
00:50:08,681 --> 00:50:13,629
also, my favorite, race 
conditions.  These are just made

318
00:50:14,548 --> 00:50:18,646
completely nil and void with 
state machines, because you

319
00:50:18,647 --> 00:50:22,131
explicitly say, when I get this 
event, I go to this state.  If I

320
00:50:22,332 --> 00:50:26,047
get another event after that 
that I don't care about, it's

321
00:50:26,341 --> 00:50:29,738
not going to cause a race 
condition, because I will ignore

322
00:50:30,182 --> 00:50:33,019
that event.  And that's what 
state machines can help with.

323
00:50:33,208 --> 00:50:38,910
Now I want to talk about 
Harold statecharts.  This could

324
00:50:39,111 --> 00:50:41,653
go on for hours and hours, 
because there's so much

325
00:50:41,879 --> 00:50:45,109
information here.  I'm going to 
give an overview of what these

326
00:50:45,110 --> 00:50:47,951
are and how these extend state 
machines in order to improve the

327
00:50:48,378 --> 00:50:52,280
way we look at user interfaces. 
Because, user interfaces can get

328
00:50:52,615 --> 00:50:56,362
complex, and finite state 
machines might not solve

329
00:50:56,675 --> 00:51:00,599
everything.  So with 
statecharts, they are similar to

330
00:51:01,360 --> 00:51:05,023
state machines.  They are an 
extension of it.  Except we can

331
00:51:05,536 --> 00:51:09,212
have actions with Harel 
statecharts, too.  They actually

332
00:51:10,223 --> 00:51:16,530
do things to the state and the 
app.  We can have guards which

333
00:51:16,531 --> 00:51:20,446
prevent states from going from 
one to the other if something

334
00:51:20,632 --> 00:51:22,762
doesn't match the condition.  If
I'm trying to search for

335
00:51:22,934 --> 00:51:26,349
something, and the user didn't 
give me a search query, then I'm

336
00:51:26,548 --> 00:51:30,383
not going to transition to the 
next state.  That could be

337
00:51:30,951 --> 00:51:33,185
declaratively modelled as well. 
There's the idea of nested

338
00:51:40,076 --> 00:51:44,082
states.  This is parallel 
states.  It is not concurrent

339
00:51:44,262 --> 00:51:47,205
states where an app can be in 
two states at the same time.

340
00:51:47,399 --> 00:51:50,531
It's more a way of simplifying 
the number of states you have so

341
00:51:50,961 --> 00:51:54,271
your state machine doesn't look 
all crazy.  And also, history,

342
00:51:54,272 --> 00:51:59,543
which is a very common feature 
that many users would want in

343
00:51:59,768 --> 00:52:05,228
order to go back to their safe 
state.  So I created this

344
00:52:05,229 --> 00:52:09,214
library called X states which 
models finite state machines and

345
00:52:11,091 --> 00:52:14,459
statecharts in a declarative 
way, so that all you would have

346
00:52:14,460 --> 00:52:18,464
to do is use this JSON structure
to model your state machine, and

347
00:52:18,465 --> 00:52:22,488
then you would get the next 
state by calling transition on

348
00:52:22,746 --> 00:52:27,577
the current state and the 
action.  It's functional, and

349
00:52:27,804 --> 00:52:31,230
it's going to work in any 
framework or no framework at

350
00:52:31,231 --> 00:52:34,575
all.  It also has the notion of 
actions, so it will return you

351
00:52:34,943 --> 00:52:38,918
an object telling you, these are
the next actions that you're

352
00:52:39,150 --> 00:52:41,844
going to take once you 
transition to a state.  It also

353
00:52:42,299 --> 00:52:45,910
has guards, so you could pass in
some external state, and it will

354
00:52:46,400 --> 00:52:51,055
validate against that external 
state and say, Okay, this

355
00:52:51,237 --> 00:52:56,132
condition is met.  So you go on 
to the next state.  It also has

356
00:52:56,476 --> 00:53:00,190
hierarchy so you can represent 
and compose machines easily.  It

357
00:53:00,342 --> 00:53:02,342
has

358
00:53:03,939 --> 00:53:09,119
orthogonality so you can 
represent parallel states and

359
00:53:09,802 --> 00:53:11,867
also represent remembered 
states.  If you're doing a

360
00:53:11,868 --> 00:53:14,876
payment flow and you're asking 
for cash or card, the user can

361
00:53:15,196 --> 00:53:18,709
switch between them, and the 
user gets to the review page.

362
00:53:18,897 --> 00:53:23,091
You want to remember if the user
chose cash or card.  So you go

363
00:53:23,731 --> 00:53:26,783
to method.history, and it would 
remember that.  And this is a

364
00:53:27,497 --> 00:53:32,063
purely functional, no side 
effect type of thing.  And so

365
00:53:32,333 --> 00:53:35,116
you can imagine the applications
of where you could apply this.

366
00:53:35,528 --> 00:53:42,266
One example of where you would 
use orthoganal states is this

367
00:53:42,429 --> 00:53:48,580
example.  Say you have bold, 
italic, or underline.  A user

368
00:53:48,772 --> 00:53:51,711
can use all or none of them, and
it's represented by all of these

369
00:53:51,882 --> 00:53:56,608
eight states.  And you can 
imagine if we add more options

370
00:53:57,837 --> 00:54:02,732
such as align left, align 
center, justify, it's going to

371
00:54:02,733 --> 00:54:09,461
explode into even more states.  
With orthogonal statecharts, we

372
00:54:10,133 --> 00:54:14,167
just have this succinct 
representation of these possible

373
00:54:14,168 --> 00:54:18,738
states, so that we know we can 
go from bold on to after,

374
00:54:18,886 --> 00:54:22,183
italics on to off, and same way 
with underline, and we can

375
00:54:22,184 --> 00:54:25,580
represent all of those at the 
same time.  And also, hierarchy

376
00:54:25,581 --> 00:54:29,703
helps to reduce the number of 
arrows that you have in your

377
00:54:29,845 --> 00:54:32,226
finite state machine.  So for 
example, both the success and

378
00:54:32,227 --> 00:54:36,734
failure states, we could search 
again and go back to the

379
00:54:37,047 --> 00:54:40,816
searching state.  We could 
simplify this by just nesting

380
00:54:40,817 --> 00:54:44,471
them in a single state, the 
search state.  This is fully

381
00:54:44,681 --> 00:54:49,078
supported by X state, and yeah. 
So, you could imagine how this

382
00:54:50,871 --> 00:54:56,832
would simplify just really 
complex state machines.  So, I

383
00:54:56,833 --> 00:55:02,556
released X state about six 
months ago at React rally, and

384
00:55:02,936 --> 00:55:05,892
since then, there has been a lot
of development and a lot of

385
00:55:05,893 --> 00:55:12,422
people actually using it to make
projects such as React automa

386
00:55:12,903 --> 00:55:16,385
and others.  And pretty soon, 
I'm going to be releasing

387
00:55:16,386 --> 00:55:21,410
another version, minor version. 
Don't worry; nothing crazy, of

388
00:55:22,189 --> 00:55:24,190
Xstate where we improved the 
user

389
00:55:28,560 --> 00:55:34,223
ergonomics.  It's full SCXML.  
It's not sexy.  Code is not sexy

390
00:55:34,700 --> 00:55:36,700
at all.  A

391
00:55:39,211 --> 00:55:43,827
Reactive interpreter, 
visualization interpreter, and a

392
00:55:44,025 --> 00:55:47,234
lot more examples.  
    In order to show you what

393
00:55:47,389 --> 00:55:51,060
I'm talking about, here is an 
example of a visualization tool.

394
00:55:51,585 --> 00:55:56,999
That same JSON object that you 
passed into xstate and the same

395
00:55:57,157 --> 00:56:00,682
one I used for my gallery app, 
this is one example of where you

396
00:56:00,861 --> 00:56:02,861
would

397
00:56:06,027 --> 00:56:09,965
use this.  My initial state is 
start, and I can hover over this

398
00:56:10,609 --> 00:56:14,517
search action, and go to this 
state.  Then I could see the

399
00:56:14,518 --> 00:56:18,540
possible different actions -- 
sorry, events that I could take

400
00:56:18,541 --> 00:56:23,005
from this state.  So let's say I
have a search success.  And so,

401
00:56:23,006 --> 00:56:27,660
I go into the gallery view.  And
then I choose to search again,

402
00:56:27,661 --> 00:56:29,661
or I could select a

403
00:56:35,961 --> 00:56:40,356
photo.  So, I can visually see 
what's happening in my state

404
00:56:40,357 --> 00:56:44,850
machine by pasting in that JSON 
object.  That's hard to do with

405
00:56:44,851 --> 00:56:48,142
just a function, so that's why I
decided to do it in a more

406
00:56:48,143 --> 00:56:50,894
declarative way.  I'm going to 
be releasing this soon.

407
00:56:50,895 --> 00:56:54,876
I want you all to enjoy the rest
of the conference before I

408
00:56:55,060 --> 00:56:58,254
release it, so you can have time
to play with it afterwards.

409
00:56:58,762 --> 00:57:07,395
That's my excuse, at least.  
It's not out yet.

410
00:57:07,559 --> 00:57:11,503
Now, it would be, you know, sort
of remiss of me to not talk

411
00:57:11,504 --> 00:57:17,000
about sort of the downsides of 
state machines and statecharts,

412
00:57:17,213 --> 00:57:21,961
but the truth is that you all 
are already creating finite

413
00:57:21,962 --> 00:57:24,603
state machines and statecharts 
in your app already, and you

414
00:57:24,785 --> 00:57:28,705
don't even know it.  However, 
the ones that you're creating

415
00:57:28,706 --> 00:57:32,102
are implicit.  They're full of 
bugs.  They're incomplete.  And

416
00:57:32,620 --> 00:57:34,620
that's just the nature of

417
00:57:37,525 --> 00:57:41,973
how we code.  So the advantage 
of finite state machines and

418
00:57:42,117 --> 00:57:47,273
modeling them in a very explicit
way is that you reduce a lot of

419
00:57:47,274 --> 00:57:52,748
complexity up front just by 
getting rid of your if/else

420
00:57:53,060 --> 00:57:55,471
statements and getting rid of 
your switch statements and

421
00:57:55,472 --> 00:57:59,229
having a direct mapping.  
However, that quickly explodes

422
00:57:59,670 --> 00:58:02,903
into many, many different 
states.  So statecharts help

423
00:58:02,904 --> 00:58:06,793
manage that with a little higher
complexity cost up front.  But

424
00:58:06,950 --> 00:58:10,276
in the long run, you will see it
will be very easy to add

425
00:58:10,666 --> 00:58:14,076
features, remove features, and 
handle different actions and

426
00:58:14,303 --> 00:58:18,827
different possible modes of your
application.

427
00:58:18,972 --> 00:58:22,510
So, of course, there's a lot of 
advantages to using statecharts,

428
00:58:22,773 --> 00:58:28,739
and the ones I am going to quote
are not actually from me.

429
00:58:28,740 --> 00:58:32,857
They're from NASA.  A few years 
ago, NASA had to send this

430
00:58:32,858 --> 00:58:37,452
little vehicle right here all 
the way to Mars.  And they did

431
00:58:37,453 --> 00:58:42,068
so using statecharts.  So the 
advantages that they said was,

432
00:58:42,069 --> 00:58:46,276
first of all, there's visualized
modeling.  So you could both

433
00:58:46,277 --> 00:58:50,557
model and examine the model of a
state chart using visual tools.

434
00:58:51,042 --> 00:58:55,076
You get these precise diagrams 
that tell you exactly what's

435
00:58:55,077 --> 00:58:58,796
going to happen when certain 
conditions are met, when you're

436
00:58:58,797 --> 00:59:02,202
in a certain state, and this 
event happens.  When you're

437
00:59:02,203 --> 00:59:04,812
sending something to Mars, you 
can't exactly just send it there

438
00:59:04,956 --> 00:59:10,136
and hope that it work works, 
right? You have to be absolutely

439
00:59:10,137 --> 00:59:13,009
sure that your billion dollar 
project is going to handle every

440
00:59:13,509 --> 00:59:19,155
single possible state.  And so 
they also use state charts for

441
00:59:19,156 --> 00:59:22,491
automatic code generation.  I'm 
not a fan, but you could see how

442
00:59:22,993 --> 00:59:28,145
it could be beneficial.  Also, 
comprehensive test coverage.  By

443
00:59:28,146 --> 00:59:32,025
using state charts, they were 
able to generate just all of

444
00:59:32,026 --> 00:59:35,939
these integration tests where 
they could test each and every

445
00:59:35,940 --> 00:59:39,495
one, and ensure that every 
single state was being hit, and

446
00:59:39,496 --> 00:59:45,610
every single possible action or 
event was being handled.  Also,

447
00:59:45,611 --> 00:59:49,324
you know, being on a big 
project, you have a lot of

448
00:59:49,325 --> 00:59:53,638
requirement changes.  We want to
add this to the rover.  We want

449
00:59:53,639 --> 00:59:56,672
to remove this functionality.  
We want to change the way this

450
00:59:56,862 --> 01:00:00,749
works.  And when you're working 
on a big project, and you have

451
01:00:00,750 --> 01:00:04,326
these late breaking requirement 
changes, then things can get

452
01:00:04,327 --> 01:00:08,726
really stressful.  With state 
charts, since you could clearly

453
01:00:08,727 --> 01:00:11,793
see the full flow of your 
application, you could easily

454
01:00:11,794 --> 01:00:15,606
add and remove features without 
worrying what's going to break,

455
01:00:15,764 --> 01:00:20,767
what's going to change, what's 
going to be affected.  So there

456
01:00:20,768 --> 01:00:27,412
are some disadvantages as well. 
    And the disadvantage is that

457
01:00:27,413 --> 01:00:30,941
my screen just went black.  I 
guess that means there are no

458
01:00:32,067 --> 01:00:35,398
disadvantages.  Ha ha.  
Anyway...

459
01:00:35,399 --> 01:00:38,812
Since the rest of my slides are 
forked, I want to show you this

460
01:00:38,813 --> 01:00:43,451
real quick.  I gave a talk about
one and a half years ago.

461
01:00:43,452 --> 01:00:46,300
It was at

462
01:00:49,561 --> 01:00:53,180
JSConf Iceland.  This is where I
saw the primary use case for

463
01:00:53,181 --> 01:00:56,248
using state machines and 
statecharts.  There was this

464
01:00:56,249 --> 01:01:02,585
really complex UI design that I 
really wanted to model, and I

465
01:01:02,945 --> 01:01:06,935
found it pretty difficult 
without using an explicit state

466
01:01:07,256 --> 01:01:10,557
machine or state chart.  So what
I'm doing here, there's three

467
01:01:10,558 --> 01:01:15,341
different states.  This one.  
This one.  And there's different

468
01:01:15,675 --> 01:01:17,675
actions as well.  So

469
01:01:19,638 --> 01:01:24,976
the user could pan right, but 
just a little bit.  So I handle

470
01:01:24,977 --> 01:01:30,512
that as a transition from going 
to state A, back to state A if

471
01:01:30,513 --> 01:01:33,409
they didn't move far enough.  Of
course, if they move far enough,

472
01:01:33,726 --> 01:01:37,350
it goes to the next state 
successfully.  And also, it

473
01:01:37,490 --> 01:01:42,489
handles, like, if I'm going up, 
and I decide to go left and

474
01:01:42,641 --> 01:01:45,528
right, it's not going to do 
anything, because we're already

475
01:01:45,686 --> 01:01:50,520
going up and down.  So it knows 
when this event happens, don't

476
01:01:50,521 --> 01:01:54,046
try to go to a different state, 
because we're already

477
01:02:00,028 --> 01:02:03,677
transitioning to one state.  
    I also wanted to mention two

478
01:02:04,080 --> 01:02:06,080
very good resources.

479
01:02:08,843 --> 01:02:14,334
The first one is on 
spectrum.oi/statecharts.  This

480
01:02:14,335 --> 01:02:17,359
is a community where we talk 
about statecharts, their

481
01:02:17,360 --> 01:02:21,231
possible applications, and how 
they're used everywhere.

482
01:02:21,232 --> 01:02:25,824
Statecharts are nothing new.  
They're invented by David Harel

483
01:02:26,124 --> 01:02:31,290
in 1987, which is what? 30 years
ago? This is not cutting-edge

484
01:02:31,458 --> 01:02:35,284
stuff.  If people are asking why
aren't we using statecharts

485
01:02:35,413 --> 01:02:39,315
everywhere now? Well, the thing 
is, they are in embedded systems

486
01:02:39,624 --> 01:02:43,793
or systems programming.  People 
do use statecharts in order to

487
01:02:43,794 --> 01:02:48,325
model their applications.  We 
don't, quite yet, but I think

488
01:02:48,511 --> 01:02:56,797
it's about time that we catch up
to it.  And so, Eric Mogansen

489
01:02:56,916 --> 01:03:01,210
made a wonderful resource called
the unfinished world of

490
01:03:01,211 --> 01:03:04,306
statecharts.  Over here, if you 
want to learn more information,

491
01:03:04,453 --> 01:03:06,453
there's a well

492
01:03:09,210 --> 01:03:11,210
wealth of

493
01:03:14,532 --> 01:03:16,532
information here.  I really want
to

494
01:03:19,759 --> 01:03:23,114
encourage you to revisit your 
application and the way you

495
01:03:23,115 --> 01:03:27,465
think about things, and actually
try to visualize things.  You

496
01:03:27,466 --> 01:03:30,895
will see that by visualizing 
your application, all of its

497
01:03:30,896 --> 01:03:33,681
possible states, all the events 
that could happen, that you're

498
01:03:34,545 --> 01:03:38,069
going to have a clearer 
representation of the possible

499
01:03:38,524 --> 01:03:43,115
bugs, the possible features that
you might have, the user

500
01:03:43,452 --> 01:03:45,561
improvements, and everything 
else.  So I want to thank you

501
01:03:46,028 --> 01:03:48,817
all for having me.  
Unfortunately, I can't show you

502
01:03:49,052 --> 01:03:51,802
my last slide, because it's not 
working, but thank you.

503
01:03:57,921 --> 01:03:59,921
[ Applause ]
   >> That was so awesome! I

504
01:03:59,975 --> 01:04:04,617
have a question for you.  I 
thought it was really

505
01:04:06,027 --> 01:04:09,296
interesting, and I also want to 
apply this to what I do in

506
01:04:09,541 --> 01:04:13,901
working with UIs.  Do I have to 
completely refactor my app so I

507
01:04:14,245 --> 01:04:18,038
can get the advantages of what 
you just talked about with

508
01:04:19,277 --> 01:04:21,998
finite state machines? 
   >> DAVID: That's a really

509
01:04:22,648 --> 01:04:26,897
good question.  With Redux, you 
have to pull everything out, but

510
01:04:27,547 --> 01:04:31,815
with statecharts, you don't.  
Statecharts can't model

511
01:04:32,147 --> 01:04:34,834
absolutely everything, and 
neither can finite state

512
01:04:35,259 --> 01:04:41,400
machines.  So what you could do 
is you could write a separate

513
01:04:41,963 --> 01:04:44,278
finite state machine that 
represents your app, use that to

514
01:04:44,697 --> 01:04:48,693
create tests, and once you see 
all the tests are passing, then

515
01:04:49,101 --> 01:04:52,472
you slowly start moving it in.  
You can use finite state

516
01:04:52,631 --> 01:04:57,141
machines for things as small as,
should this button be disabled?

517
01:04:57,142 --> 01:05:01,248
And then you stick it in there, 
have your app grow, and use

518
01:05:01,249 --> 01:05:03,805
state machines everywhere.  
   >> That's awesome.  Thank you

519
01:05:03,999 --> 01:05:07,042
so much.  That's actually a 
really good transition into the

520
01:05:11,872 --> 01:05:17,867
next talk.  It's going to be 
from Will.  He's coming from

521
01:05:18,306 --> 01:05:22,317
Colorado.  He's passionate about
open source software as well,

522
01:05:23,019 --> 01:05:26,273
organizing events and meet-ups. 
Is Will around?

523
01:06:29,987 --> 01:06:32,520
All right! Seems like Will's not
here?

524
01:06:41,528 --> 01:06:46,021
>> Let's take a bit of a break 
while we wait for the next talk.

525
01:06:46,022 --> 01:06:48,256
Thank you.

526
01:07:59,956 --> 01:08:01,956
>> Will is here, so, we're

527
01:08:04,047 --> 01:08:06,047
>> Will is here, so, we're going
to get started

528
01:08:09,435 --> 01:08:13,778
really soon.  I'm going to talk 
about Will and Will's talk while

529
01:08:13,926 --> 01:08:19,735
he sets up.  He's a front-end 
engineer, co-organizes the React

530
01:08:19,870 --> 01:08:24,411
Denver meet-up.  He loves 
sharing what he can, organizing

531
01:08:24,550 --> 01:08:29,751
events, mentoring others.  And 
he says he lives on a healthy

532
01:08:29,951 --> 01:08:31,951
diet of diet coke and

533
01:08:38,784 --> 01:08:42,042
ice cream.
That sounds healthy.  And he

534
01:08:42,207 --> 01:08:48,128
will be testing using a tool 
called Cyprus.  And it's for

535
01:08:49,209 --> 01:08:52,810
end-to-end testing.  Now we 
discussed complex UIs, and now

536
01:08:52,961 --> 01:08:55,742
it's time to test the complex 
UIs that we just created.

537
01:09:26,330 --> 01:09:31,063
>> WILL: Thanks! Almost.  One 
second.  Thank you.

538
01:09:35,223 --> 01:09:39,160
Is it actually presenting okay? 
   >> I think it looks great

539
01:09:39,569 --> 01:09:43,966
from this  end.  Anyway, give it
up for Will Klein!

540
01:09:53,084 --> 01:09:55,084
[ Applause ]
   >> WILL: Oh my gosh, I think

541
01:09:55,645 --> 01:10:05,263
it works! Cool! Okay.  Whoo! 
    So, I've got a talk about

542
01:10:06,688 --> 01:10:08,688
end-to-end testing, and why the

543
01:10:11,380 --> 01:10:13,858
game has changed.  I actually 
have a little story to share as

544
01:10:14,080 --> 01:10:16,800
well that's kind of personal, 
but it means a lot to be

545
01:10:22,474 --> 01:10:27,470
here today.  My name is Will, 
and this is my wife, Diane.

546
01:10:27,471 --> 01:10:32,294
This is us on Amelia island.  It
was a really great time.  I

547
01:10:38,269 --> 01:10:44,582
appreciated that JSConf welcomed
us and our family.  I appreciate

548
01:10:45,276 --> 01:10:48,224
that that tradition has 
continued here today.  I had a

549
01:10:48,225 --> 01:10:51,202
question at the time that I was 
trying to figure out the answer

550
01:10:51,497 --> 01:10:56,136
to.  How do you it's your front 
end? I think we've got answers

551
01:10:56,285 --> 01:10:59,080
about how to test our unit 
tests, how to test our

552
01:10:59,202 --> 01:11:02,654
functions, our classes, and our 
UI components in isolation.  I

553
01:11:02,655 --> 01:11:06,094
think it becomes more difficult 
when we try to integrate all of

554
01:11:06,095 --> 01:11:10,935
these things and put it all 
together.  A lot can go wrong,

555
01:11:11,232 --> 01:11:16,663
whether it's our UI or web APIs 
or our back-end or database or

556
01:11:16,825 --> 01:11:20,033
even our deployments.  When you 
put those things together,

557
01:11:20,034 --> 01:11:22,944
anything can break down, and we 
can have all the unit tests in

558
01:11:22,945 --> 01:11:27,788
the world, and they won't help 
us in most cases.  So the type

559
01:11:28,557 --> 01:11:36,198
of tests to emphasize this are 
called end-to-end tests, from

560
01:11:36,199 --> 01:11:39,747
one end all the way back.  I had
a lot of great conversations at

561
01:11:39,748 --> 01:11:44,564
the conference.  Sorry.  Move my
mouse off.  I had a lot of great

562
01:11:45,343 --> 01:11:47,343
conversations, but one stuck 
out.  I

563
01:11:50,317 --> 01:11:54,866
met this person Nicholas Boll, 
and he talked to me for hours.

564
01:11:54,867 --> 01:11:59,770
His wife was at the conference 
and she was quickly becoming

565
01:11:59,771 --> 01:12:02,964
friends with my wife while 
hanging out and talking about

566
01:12:03,201 --> 01:12:06,508
testing.  We talked about the 
tests his team had written.

567
01:12:06,509 --> 01:12:10,462
They had thousands and thousands
of unit tests.  Lots and lots of

568
01:12:10,836 --> 01:12:15,077
integration tests, and maybe a 
thousand or so end-to-end tests.

569
01:12:15,280 --> 01:12:19,421
They were testing an Enterprise 
app, which is an app that does

570
01:12:19,544 --> 01:12:22,999
way too many things.  I was so 
impressed with all the things

571
01:12:23,000 --> 01:12:26,342
they had to say about their 
stack and tools and all the

572
01:12:26,756 --> 01:12:31,469
effort they put in that I 
applied to work at his company.

573
01:12:31,973 --> 01:12:37,519
We moved to Colorado and joined 
his team.  He and his wife

574
01:12:37,520 --> 01:12:43,108
helped us off the moving truck, 
helped us settle in and invited

575
01:12:43,328 --> 01:12:49,132
us in for the holidays.  Now we 
hang out so much together today.

576
01:12:57,320 --> 01:13:00,738
So when I joined this team, 
I found they were using a tool

577
01:13:00,910 --> 01:13:03,080
that I was actually quite 
familiar with,

578
01:13:06,949 --> 01:13:11,819
se  Selenium.  It lets us test 
apps from the point of view of

579
01:13:11,820 --> 01:13:15,417
the browser.  It's a little old,
but it's done a lot of wonderful

580
01:13:15,762 --> 01:13:19,549
things and let us do things that
we otherwise might not be able

581
01:13:19,550 --> 01:13:23,225
to do.  It's go this java 
service that just listens for

582
01:13:23,468 --> 01:13:26,906
commands.  And you write test 
code in any language, actually,

583
01:13:26,907 --> 01:13:31,992
and more often than not, not 
JavaScript.  And that language

584
01:13:31,993 --> 01:13:37,384
would usually use a library to 
speak the language of Selenium.

585
01:13:37,961 --> 01:13:41,680
It sends the command to the 
service, and the service would

586
01:13:41,681 --> 01:13:45,553
cue the commands and try to send
them to any given browsers, real

587
01:13:46,477 --> 01:13:50,314
browsers.  There was a number of
different abstractions and

588
01:13:50,883 --> 01:13:54,376
interfaces where things could go
wrong.  It could be that your

589
01:13:54,377 --> 01:13:58,001
test code has an issue, or 
you're using the API different.

590
01:13:58,002 --> 01:14:04,862
And all the different APIs work 
with Selenium, and they all work

591
01:14:05,188 --> 01:14:09,613
with JavaScript.  They are all 
different.  They could have

592
01:14:09,614 --> 01:14:13,543
issues or you could use them 
differently.  They are sending

593
01:14:14,563 --> 01:14:17,992
command drivers to the browser, 
and the drivers could have bugs.

594
01:14:18,140 --> 01:14:22,762
There are so many ways for this 
to have bugs just with this

595
01:14:26,317 --> 01:14:28,107
architecture.  
    So the greatest complexity

596
01:14:28,108 --> 01:14:34,117
of all is our app.  I find that 
as we write modern JavaScript

597
01:14:34,330 --> 01:14:39,281
apps, we're doing a lot of 
things now in the browser.

598
01:14:39,282 --> 01:14:42,312
We're making the different API 
calls from the page loads.

599
01:14:42,313 --> 01:14:45,366
Those come back in different 
timings, different orders

600
01:14:45,640 --> 01:14:50,369
sometimes.  That can cause just 
different behaviors in our front

601
01:14:50,370 --> 01:14:54,208
end.  When the user interacts 
with our UI, that makes more

602
01:14:54,404 --> 01:14:58,932
calls.  More things happen.  All
these things happen

603
01:14:59,622 --> 01:15:02,981
asynchronously.  So we are 
rendering.  It could finish at

604
01:15:03,297 --> 01:15:06,683
any time, and we don't really 
necessarily know when it is, at

605
01:15:07,136 --> 01:15:11,105
least from our test code's point
of view.  As humans, it's

606
01:15:11,559 --> 01:15:15,346
intuitive to us.  But when we 
run our test code, it does

607
01:15:15,347 --> 01:15:19,551
exactly what we tell it to.  If 
it clicks a button and starts to

608
01:15:20,245 --> 01:15:23,331
rerender, and we try to do the 
next thing, we need to be

609
01:15:23,864 --> 01:15:26,671
careful about knowing that it 
finished rendering, or we might

610
01:15:26,672 --> 01:15:33,464
get something unexpected.  
    So, the greater problem of

611
01:15:33,465 --> 01:15:38,683
all is when we take the Selenium
architecture and combine it with

612
01:15:38,872 --> 01:15:42,586
the complexity of our apps.  
It's really a recipe for frees

613
01:15:47,427 --> 01:15:51,482
frustration.  We run a commit, 
push it to the build, and

614
01:15:51,901 --> 01:15:56,318
sometimes it would fail, usually
in an end-to-end test.  We would

615
01:15:56,667 --> 01:15:59,939
run that build again, because it
was a test that shouldn't have

616
01:16:00,097 --> 01:16:03,525
broken anything.  And it would 
pass.  We would see this over

617
01:16:03,526 --> 01:16:07,047
and over again, where different 
commits randomly fail different

618
01:16:07,185 --> 01:16:11,308
tests.  We call this flakeyness.
The problem might be something

619
01:16:11,713 --> 01:16:15,581
with the Selenium architecture. 
Often it was a combination of

620
01:16:15,759 --> 01:16:20,010
that and the complexity of our 
app working in different

621
01:16:20,011 --> 01:16:22,734
performance characteristics.  
Particularly when we're on build

622
01:16:23,922 --> 01:16:28,511
environments, they're 
virtualized, things would slow

623
01:16:28,777 --> 01:16:33,036
down.  Anything could make it 
work a little slower in one part

624
01:16:33,321 --> 01:16:38,122
of the stack at any given time, 
and something would fail.  We

625
01:16:38,344 --> 01:16:42,186
had a build job that would just 
run all the tests, and it would

626
01:16:42,187 --> 01:16:45,789
flush out dozens and dozens of 
tests that just failed a lot.

627
01:16:46,299 --> 01:16:49,407
Even with that, we just kept 
tripping over this issue over

628
01:16:49,408 --> 01:16:54,854
and over again.  Tests that 
would fail once in a while.  Why

629
01:16:55,177 --> 01:16:59,827
do we keep doing this? Well, 
these tests we found to be

630
01:17:00,375 --> 01:17:03,037
extremely valuable.  You can 
have all the unit tests in the

631
01:17:03,609 --> 01:17:06,089
world, but if everything 
integrates and something breaks

632
01:17:06,224 --> 01:17:09,229
down, you're going to have a 
really bad time.  And worst of

633
01:17:09,558 --> 01:17:12,763
all, your user is going to have 
a bad time.  At the end of the

634
01:17:12,991 --> 01:17:15,873
day, everything you do is about 
building a user experience,

635
01:17:17,208 --> 01:17:19,925
building values so somebody can 
do their job or that part of

636
01:17:20,098 --> 01:17:23,169
their job, or make that one 
thing easier that gives them joy

637
01:17:23,286 --> 01:17:29,724
and makes them happier or more 
productive.  We invested into

638
01:17:30,901 --> 01:17:34,101
making this better, the flakey 
finder.  And we tried to make

639
01:17:34,293 --> 01:17:38,434
our tests better in a lot of 
ways.  One example, we wrote

640
01:17:38,733 --> 01:17:42,116
some test helpers that would try
a command, and if something

641
01:17:42,243 --> 01:17:46,611
didn't work right, it would 
retry it a number of times for a

642
01:17:47,445 --> 01:17:51,058
certain time out.  This is 
called an implicit wait, built

643
01:17:51,803 --> 01:17:55,715
into the API, so you don't have 
to do that manually in the code.

644
01:17:55,848 --> 01:18:02,481
We also found that it helped to 
mock some service once in a

645
01:18:02,482 --> 01:18:06,164
while, mock services to test 
large data and certain

646
01:18:06,358 --> 01:18:09,562
scenarios.  Things like that.  
Doing that, we wrote some of our

647
01:18:09,691 --> 01:18:13,661
own service mocking libraries to
make that process easier.  We

648
01:18:14,133 --> 01:18:17,676
invested as much as we could 
into making the developer

649
01:18:17,677 --> 01:18:21,037
experience of using and running 
our tests better.  So we keep

650
01:18:21,299 --> 01:18:23,299
doing it, despite how painful

651
01:18:32,045 --> 01:18:34,045
it was.  
    So, after a while, I joined

652
01:18:34,170 --> 01:18:39,815
a new time and got Selenium up 
and running there.  That went

653
01:18:39,816 --> 01:18:44,570
all right.  Ran into some of the
same issues, and just this past

654
01:18:44,749 --> 01:18:49,028
fall in October, I was consult
consulting on a project.  We had

655
01:18:49,353 --> 01:18:53,329
run into a serious quality 
problem.  We didn't have a

656
01:18:53,476 --> 01:18:57,910
dedicated QA team.  As much as 
we smoke tested our app on every

657
01:18:58,288 --> 01:19:02,126
single commit, there were always
use cases we missed and we

658
01:19:02,276 --> 01:19:05,259
didn't know what happened.  We 
decided to write more tests.  I

659
01:19:05,398 --> 01:19:09,880
pulled the story to write the 
end-to-end test.  I pulled out

660
01:19:10,050 --> 01:19:16,090
Selenium, and the first thing I 
had to do on my year-old mac

661
01:19:16,448 --> 01:19:24,952
book was install java.  So the 
next tool I tried was Cyprus.

662
01:19:25,269 --> 01:19:28,155
And Cyprus was something that I 
had actually held off on using

663
01:19:31,043 --> 01:19:34,477
for a while.  It had been closed
source up until May of last

664
01:19:34,903 --> 01:19:39,568
year, and in private beta until 
October.  They had built a

665
01:19:39,569 --> 01:19:43,377
company around some of the 
premium CI features.  Now that

666
01:19:43,846 --> 01:19:47,125
it's open-sourced, everything 
that you need is right up there

667
01:19:47,390 --> 01:19:51,385
on GitHub.  If the team stopped 
doing what they're doing, the

668
01:19:51,656 --> 01:19:55,004
community could pick it up and 
run with it.  I waited to use

669
01:19:55,568 --> 01:19:58,653
this until it was open and 
freely available.  Something

670
01:19:58,654 --> 01:20:03,046
that was MIT licensed and ready 
to go.

671
01:20:03,183 --> 01:20:09,385
So I actually used it for maybe 
two hours, and I was honestly

672
01:20:09,386 --> 01:20:16,811
blown away.  I was so shocked by
how different and better my

673
01:20:16,812 --> 01:20:19,957
developer experience was that I 
wrote a proposal to a conference

674
01:20:20,139 --> 01:20:24,296
after just working on it for a 
couple of hours, and here I am.

675
01:20:28,842 --> 01:20:31,022
[ Laughter ]
    I have a few downloads that

676
01:20:31,206 --> 01:20:34,611
I will run through to show you 
how to install it, set it up,

677
01:20:34,612 --> 01:20:38,283
what some of the tests look 
like.  I don't want to get hung

678
01:20:38,284 --> 01:20:41,542
up on the syntax or commands.  I
just want to give you an idea of

679
01:20:41,783 --> 01:20:46,272
what it's like.  The first thing
you do is you MPM install it.

680
01:20:46,863 --> 01:20:50,842
This actually will do a download
from one of their -- from their

681
01:20:50,843 --> 01:20:57,719
website and pull down the right 
cypress app.  It will pull down

682
01:20:57,840 --> 01:21:00,630
based on your operating system 
and your CPU architecture.

683
01:21:05,060 --> 01:21:08,662
Next you open it.  And the first
time you open it, it kind of

684
01:21:08,663 --> 01:21:11,402
initializes some things and 
makes sure it's verified and

685
01:21:11,561 --> 01:21:15,595
it's the right thing and all.  
When it runs, there's a pop-up

686
01:21:15,596 --> 01:21:19,837
to say hey, to help get you 
started, we put some files in

687
01:21:20,079 --> 01:21:22,581
the file system, and you might 
want to take a look at that.

688
01:21:24,105 --> 01:21:26,458
The files are basically 
examples.  This is just nice.

689
01:21:26,586 --> 01:21:31,963
There is an example like 
fixture.  There's example

690
01:21:32,500 --> 01:21:36,117
plugin.  Custom commands, and an
example spec.  The example spec

691
01:21:36,575 --> 01:21:39,176
is a kitchen sink of all the 
different commands you might

692
01:21:39,465 --> 01:21:43,388
want, and gives you a quick 
reference.  You can go to their

693
01:21:43,623 --> 01:21:46,966
docs, but it's all right there. 
It gives you a little head-start

694
01:21:47,116 --> 01:21:49,479
with what you might want to try 
to do.

695
01:21:49,480 --> 01:21:54,140
The nice thing is, it's -- 
from there, it starts to get

696
01:21:54,548 --> 01:22:00,899
very familiar.  If you've ever 
done BDD style tests, the syntax

697
01:22:01,168 --> 01:22:05,921
is going to look very, very 
familiar.  Let me make this a

698
01:22:08,106 --> 01:22:15,149
little bigger.  Oh yes.  Cool.  
All right.  So this is just part

699
01:22:15,486 --> 01:22:18,962
of a spec file.  And the first 
thing is there's this top-level

700
01:22:19,680 --> 01:22:23,061
describe.  We're describing our 
app or some view in our app, and

701
01:22:23,196 --> 01:22:27,554
we can have the eaches, and do 
things before every test.  And

702
01:22:28,150 --> 01:22:34,163
most commonly will load the 
page, load a route on our app.

703
01:22:34,286 --> 01:22:39,154
We can have nested describes in 
mocha.  And we can have our

704
01:22:40,022 --> 01:22:44,223
it/shoulds.  It should do a 
thing.  It should focus on the

705
01:22:44,415 --> 01:22:50,341
to do field.  And from there we 
can start using the cypress API.

706
01:22:50,863 --> 01:22:55,598
We are doing focus, which is 
look at what's focused in the

707
01:22:55,732 --> 01:22:59,905
window.  And then it says it 
should have the class new to do.

708
01:23:00,465 --> 01:23:02,469
There's something interesting 
about the should, and this

709
01:23:02,624 --> 01:23:08,443
whole, you'll see some chaining 
here.  There's a reason why hay

710
01:23:08,652 --> 01:23:13,664
the use that style.  The should 
has a context of I'm try to do a

711
01:23:13,837 --> 01:23:16,740
should on something that was 
focused.  The should will keep

712
01:23:16,741 --> 01:23:20,757
trying until it's true or until 
there's a time-out.  This is

713
01:23:20,886 --> 01:23:25,237
nice, because when we first load
our page, the first thing that's

714
01:23:25,238 --> 01:23:28,385
focused might just be the window
or document.  That thing has not

715
01:23:28,951 --> 01:23:32,979
rendered that has that class.  
It's going to keep retrying

716
01:23:32,980 --> 01:23:36,880
until it passes.  This permeates
all of their APIs, and having

717
01:23:36,881 --> 01:23:42,647
that context and doing things 
more intelligently by nature.

718
01:23:43,260 --> 01:23:46,339
I'll show you one other example.
This is an example that is quite

719
01:23:46,920 --> 01:23:51,148
common where you try to get 
something based on selector.

720
01:23:52,968 --> 01:23:55,765
It's using

721
01:23:59,588 --> 01:24:03,185
Jquery under the hood.  And then
we just type in a little thing

722
01:24:03,186 --> 01:24:08,809
we want to do, and another thing
I'll point out is instead of

723
01:24:08,810 --> 01:24:14,148
having to embrace the key codes,
having to know what key code,

724
01:24:14,149 --> 01:24:18,928
they just use enter with curly 
braces.  It's nice and

725
01:24:18,929 --> 01:24:20,929
convenient that

726
01:24:23,055 --> 01:24:25,372
way.  
    From here, I want to show

727
01:24:25,541 --> 01:24:29,069
you what running the test and 
debugging the test looks like.

728
01:24:29,183 --> 01:24:33,112
All the other stuff is 
relatively familiar to Selenium.

729
01:24:33,236 --> 01:24:37,700
This is where it starts to take 
off.  So the first thing is you

730
01:24:37,993 --> 01:24:42,471
can run it headlessly.  By 
default, it runs headless

731
01:24:48,591 --> 01:24:54,047
ly.  It is recording by default.
So you can replay the recording

732
01:24:54,048 --> 01:24:57,869
and all the tests, if you want. 
Here is where it starts to get

733
01:24:58,335 --> 01:25:00,807
different.  There's an electron 
app.  The first thing that

734
01:25:01,002 --> 01:25:04,310
happens when you load the 
electron app, there's a yellow

735
01:25:04,848 --> 01:25:07,970
warning that says, Hey, can you 
make sure you're running your

736
01:25:09,057 --> 01:25:12,657
web server.  It will check that 
when this app electron app runs

737
01:25:12,888 --> 01:25:16,306
to make sure you're running your
web server.  I can't tell you

738
01:25:16,495 --> 01:25:20,623
how many times I forgot to run 
my local dev server when I'm

739
01:25:20,862 --> 01:25:26,108
running my test.  It tells you 
right away.  And you can also

740
01:25:27,807 --> 01:25:32,309
choose which browser, whatever 
version of Chrome or firefox and

741
01:25:32,673 --> 01:25:36,138
Edge and all of that eventually.
I'll get to that.  And then you

742
01:25:36,352 --> 01:25:38,536
run your spec.  From here we get
into the test

743
01:25:47,285 --> 01:25:51,169
runner.  This is running in a 
browser, a sandbox browser

744
01:25:51,589 --> 01:25:54,964
environment.  The test runner, 
there's our test on the left, a

745
01:25:54,965 --> 01:25:58,033
header on the top that has this 
information about what tests

746
01:25:58,034 --> 01:26:01,435
have passed, which have failed, 
how long it's been running.  We

747
01:26:01,436 --> 01:26:04,904
can stop and replay it.  There's
a URL preview.

748
01:26:04,905 --> 01:26:13,249
There's a target icon, that's 
adomadom a dom selector

749
01:26:14,112 --> 01:26:16,112
playground. 
There's view port information at

750
01:26:16,176 --> 01:26:19,518
the top.  On the right is our 
app.  This might seem like a

751
01:26:19,757 --> 01:26:22,838
little thing, but just having it
right in the same window is very

752
01:26:23,643 --> 01:26:26,320
convenient.  And there's a very 
good reason why they put this

753
01:26:26,701 --> 01:26:28,701
all in the same

754
01:26:32,152 --> 01:26:33,878
window.  
    So that thing on the left

755
01:26:33,879 --> 01:26:38,846
where our commands and tests are
logged, that's called the

756
01:26:39,404 --> 01:26:41,699
command log.  This thing is 
cool.  When we click on anything

757
01:26:41,825 --> 01:26:45,658
in there, expand one of our 
tests, we see all the commands

758
01:26:45,959 --> 01:26:52,959
that our test tried to execute. 
    If we click on any of the

759
01:26:53,297 --> 01:26:57,813
commands, it will jump to that 
part of the test.  It takes DOM

760
01:26:58,199 --> 01:27:02,076
snapshots throughout the test.  
We can jump around in our test

761
01:27:02,397 --> 01:27:05,854
sequentially or out of order, 
and replay the state of our dom

762
01:27:06,001 --> 01:27:11,415
and see what's going on in our 
app without having to -- without

763
01:27:12,556 --> 01:27:16,491
much effort.  And you'll see 
this thing at the bottom of our

764
01:27:16,636 --> 01:27:20,936
app that says before and after. 
Certain have commands such as

765
01:27:21,659 --> 01:27:26,325
before and after.  Typing is one
of them.  If you go to type new

766
01:27:27,306 --> 01:27:31,690
todo, you hit before, you can 
see what's going on, and then

767
01:27:32,054 --> 01:27:36,931
click the after and see what was
after the typed command.  This

768
01:27:37,109 --> 01:27:43,295
ability to walk through the dom 
snapshots just by click

769
01:27:43,637 --> 01:27:46,690
something a night and day 
difference from anything I

770
01:27:46,837 --> 01:27:50,355
experienced with Selenium.  The 
workflow I was used to is

771
01:27:50,731 --> 01:27:54,190
setting up a debugger, setting 
up a trigger point and hoping to

772
01:27:54,315 --> 01:27:59,980
stop at the right point and 
running into default time-outs

773
01:28:00,623 --> 01:28:05,538
and test reloading and all of 
the lockouts that were

774
01:28:05,805 --> 01:28:07,930
frustrating.  
    If you write really good

775
01:28:08,074 --> 01:28:10,947
tests about your app like this, 
you can actually sort of

776
01:28:11,332 --> 01:28:14,668
document how your app works.  
And a new user or new person on

777
01:28:14,921 --> 01:28:17,248
the team could look at it and 
get a good understanding of all

778
01:28:17,633 --> 01:28:21,284
the things it does and how it 
behaves and what it looks like.

779
01:28:21,457 --> 01:28:25,320
All of that.  
    So, let's talk about

780
01:28:26,001 --> 01:28:28,869
debugging, like really 
debugging.  The first thing is

781
01:28:29,005 --> 01:28:34,321
when we click on those things in
the test runner, any of those

782
01:28:34,518 --> 01:28:38,544
things we click, they have some 
context of there's a DOM element

783
01:28:38,917 --> 01:28:43,191
involved or a network request.  
If you click, they get logged in

784
01:28:43,317 --> 01:28:46,846
the console.  Normally I would 
have to set a break point and

785
01:28:47,166 --> 01:28:50,505
write the logs.  Just with a 
click, we can get that and start

786
01:28:50,853 --> 01:28:52,853
playing with it.

787
01:28:55,137 --> 01:28:59,205
DOM debugging, you can inspect 
the state of the DOM in any of

788
01:28:59,206 --> 01:29:03,376
these snapshots.  
It's not necessarily replaying

789
01:29:03,671 --> 01:29:07,212
all your different Redux states,
for example, your true app

790
01:29:07,413 --> 01:29:11,990
state.  It's just going based on
the DOM.  I have found in

791
01:29:12,683 --> 01:29:16,689
reality, with an app using React
and Redux, I was interact and

792
01:29:17,827 --> 01:29:20,881
things would sort of work.  And 
there are hooks to potentially

793
01:29:21,433 --> 01:29:25,932
do things like inject Redux 
state and snapshot that stuff.

794
01:29:26,169 --> 01:29:30,680
I haven't gotten to that yet; 
I'm not sure anybody has.  But

795
01:29:31,155 --> 01:29:37,780
there are crazy anyonings -- 
things we can do.

796
01:29:37,781 --> 01:29:41,760
I found it really awesome that I
only needed to run this one

797
01:29:42,230 --> 01:29:46,311
browser, this one app and this 
one debugger to debug my tests

798
01:29:46,312 --> 01:29:49,601
and app code.  This replay is 
showing hitting a break point in

799
01:29:49,975 --> 01:29:53,514
my test code here and hitting a 
break point in my app code.

800
01:29:53,909 --> 01:29:57,964
And being able to jump between 
those two contexts.  I was used

801
01:29:58,345 --> 01:30:02,987
to having a debugger, hopefully 
in node and another in the dev

802
01:30:03,285 --> 01:30:06,054
tools for my app, and I would be
bouncing around between the two.

803
01:30:06,560 --> 01:30:12,297
There's this cognitive load that
comes with, which one am I in?

804
01:30:12,673 --> 01:30:15,681
Where am I? Bouncing back and 
forth and windows switching and

805
01:30:15,923 --> 01:30:18,936
all of that.  When you start to 
take this very challenging thing

806
01:30:19,379 --> 01:30:23,370
that we do every day and you put
it in a single place and make it

807
01:30:23,499 --> 01:30:25,499
that much easier, it starts to 
make it

808
01:30:33,671 --> 01:30:36,628
fun again.  
    I mentioned we had to write

809
01:30:37,194 --> 01:30:40,247
our own implicit waits.  There's
a four-second time-out, which is

810
01:30:40,948 --> 01:30:44,170
plenty.  You can override that. 
There's direct access to the

811
01:30:44,959 --> 01:30:50,416
DOM.  In Selenium, everything 
was being serialized, so you're

812
01:30:51,013 --> 01:30:54,144
always getting a serialized 
version of the DOM.  You're

813
01:30:54,524 --> 01:30:58,000
actually dealing with a DOM 
that's in your app from your

814
01:30:58,207 --> 01:31:01,389
test code, and you just have it.
It's just nice.  And there's

815
01:31:01,695 --> 01:31:08,347
service mocking libraries built 
in.  They just made it easy to

816
01:31:08,567 --> 01:31:13,300
define things you want to match 
on like method or parameter and

817
01:31:13,424 --> 01:31:16,752
have it return fixture data.  
It's just rolled up.  That's the

818
01:31:16,891 --> 01:31:21,302
thing overall.  It rolls up all 
this tooling that we would

819
01:31:22,099 --> 01:31:24,865
normally be cobbling together 
ourselves, sign on for the

820
01:31:25,019 --> 01:31:28,379
request stuff, service mocking,

821
01:31:32,044 --> 01:31:36,381
Jquery, mocha and chai.  It 
takes care of all of that for us

822
01:31:36,550 --> 01:31:42,207
so we don't have to select them 
ourselves, and it becomes one

823
01:31:42,554 --> 01:31:45,551
cohesive package that is well 
documented on their site.

824
01:31:54,958 --> 01:31:59,429
On their blog and docs, they
have tidbits like this.  When

825
01:31:59,729 --> 01:32:02,490
you start to extend the 
time-out, which is a common

826
01:32:02,872 --> 01:32:05,982
trap, something didn't work.  It
wasn't ready yet.  So we'll

827
01:32:06,186 --> 01:32:09,480
extend the time-out.  There's a 
catch to that, especially if you

828
01:32:09,609 --> 01:32:14,473
do it universally.  There are 
things, tidbits that are not

829
01:32:14,597 --> 01:32:19,352
specific to cypress.  There's a 
book in here about how to write

830
01:32:19,541 --> 01:32:22,107
good end-to-end tests that could
apply to Selenium or whatever

831
01:32:22,314 --> 01:32:24,992
other tool you want to use.  I 
like that.  I like that they're

832
01:32:26,562 --> 01:32:31,543
a little opinionated and they 
share these things right in

833
01:32:32,330 --> 01:32:34,330
their docs.  It's nice that they
went

834
01:32:42,144 --> 01:32:44,572
that far.  
    There are trade-offs.  I

835
01:32:44,758 --> 01:32:47,765
have been talking about how 
awesome it is, but I want to

836
01:32:48,085 --> 01:32:51,969
talk about what it lacks.  It's 
a new tool, new technology, a

837
01:32:52,166 --> 01:32:55,259
new thing to bring into your 
team.  There's always a cost to

838
01:32:55,372 --> 01:33:02,520
that.  I take that very 
carefully.  It has a style of

839
01:33:02,662 --> 01:33:06,097
chaining, and I don't like 
chaining, but there's a reason

840
01:33:06,290 --> 01:33:09,068
for it.  They like to maintain 
the context of what you're doing

841
01:33:09,588 --> 01:33:14,043
so they can intelligently tell 
what you're doing next.  They're

842
01:33:14,197 --> 01:33:19,000
up front about their trade-offs.
They have a whole doc dedicated

843
01:33:19,403 --> 01:33:24,852
to this.  They mention permanent
and temporary trade-offs.

844
01:33:24,853 --> 01:33:30,079
Permanent is that it runs in a 
single browser tab.  If it opens

845
01:33:30,281 --> 01:33:34,761
other tabs, you will not be able
to test those things in cypress.

846
01:33:34,875 --> 01:33:39,288
They didn't try to support every
browser out of the gate.  They

847
01:33:39,629 --> 01:33:43,477
just chose Chrome-based 
browsers.  They are working on

848
01:33:44,253 --> 01:33:48,017
Firefox.  They are fixing issues
on that, squashing some bugs,

849
01:33:48,161 --> 01:33:51,551
and they will have that as soon 
as they can.  And I'm sure that

850
01:33:52,264 --> 01:33:54,494
Edge and so forth will be next. 
That's something

851
01:34:02,536 --> 01:34:05,775
that is very important.  I would
suggest still having some

852
01:34:05,776 --> 01:34:09,526
Selenium tests just for those 
situations that cypress cannot

853
01:34:09,667 --> 01:34:14,017
do.  I find that 99% of the 
value of the tests is easily

854
01:34:14,018 --> 01:34:17,743
covered by cypress, making sure 
we exercise all the views and

855
01:34:18,403 --> 01:34:22,030
interactions that we care about,
testing each work flow once.

856
01:34:22,031 --> 01:34:27,341
The user wants to do A, B, C.  
Test those things.

857
01:34:27,342 --> 01:34:29,415
Testing the UI components at 
least once is really important.

858
01:34:43,562 --> 01:34:44,822
They basically re-invented 
the wheel, and any time you do

859
01:34:44,823 --> 01:34:48,318
that, you will have your own set
of bugs and challenges.  I think

860
01:34:48,319 --> 01:34:50,936
they tried to not only
    They basically re-invented

861
01:34:51,497 --> 01:34:54,899
reinvent Selenium but add a 
comprehensive developer

862
01:34:54,900 --> 01:35:01,874
experience on top of it.  That 
is crazy.  If I would have ever

863
01:35:01,875 --> 01:35:05,869
met the original author years 
ago, I would tell him good luck.

864
01:35:06,022 --> 01:35:08,577
I don't think it's possible.  
Don't feel bad if you fail.

865
01:35:08,578 --> 01:35:12,460
Here he is, with what started as
an experiment.

866
01:35:12,461 --> 01:35:15,884
He got it working, and he's 
built a team around it.  There's

867
01:35:16,003 --> 01:35:18,003
six full-time devs on

868
01:35:21,226 --> 01:35:23,962
it now.  
The open-source community is

869
01:35:24,079 --> 01:35:26,672
growing and others have made 
contributions.  There's going to

870
01:35:26,800 --> 01:35:33,010
be bugs and issues.  There's 
going to be the trade-offs I

871
01:35:33,320 --> 01:35:36,742
mentioned.  I'm really glad that
they made it anyway.

872
01:35:36,743 --> 01:35:42,490
So I would definitely say when 
it comes to end-to-end testing

873
01:35:42,491 --> 01:35:45,669
and our ability to test the user
experiences, the game has

874
01:35:45,987 --> 01:35:54,227
changed.  I would encourage 
everyone to not just think about

875
01:35:54,588 --> 01:35:57,246
unit coverages, but user 
experience

876
01:36:01,260 --> 01:36:06,249
coverage.  If you're new to 
this, do this.  Write a smoke

877
01:36:06,594 --> 01:36:10,383
test.  Test the main work flow. 
Do the happy path.  Make sure

878
01:36:10,521 --> 01:36:14,488
that's good.  That is going to 
give you 90% of the value.

879
01:36:14,489 --> 01:36:16,806
You're going to cover your build
and deployments and that one

880
01:36:16,949 --> 01:36:19,639
thing that your app is supposed 
to do.  From there you can start

881
01:36:19,805 --> 01:36:24,130
to cover more things.  But that 
is the one thing that you could

882
01:36:24,301 --> 01:36:32,646
do in maybe a day.  I think I 
had -- I think I had the first

883
01:36:32,647 --> 01:36:36,512
app tested in an hour or two, 
and I went from

884
01:36:43,294 --> 01:36:45,555
there.  
    I like to say this, don't

885
01:36:45,673 --> 01:36:49,457
let your users test an app.  If 
you're not automating these

886
01:36:49,633 --> 01:36:53,406
things, that's what you're 
doing.  You can have a QA team

887
01:36:53,702 --> 01:36:56,864
or smoke testing this yourself 
in your own browser, but there's

888
01:36:56,992 --> 01:37:00,347
no way you can catch all the 
things that the automated tests

889
01:37:00,606 --> 01:37:04,294
can catch as quickly as they can
catch.  If you do them manually,

890
01:37:05,221 --> 01:37:09,701
what's your dev cycle? These 
things can run very quickly and

891
01:37:09,921 --> 01:37:11,921
catch so much

892
01:37:13,253 --> 01:37:16,406
more.  
    So atlas law.  Any

893
01:37:17,146 --> 01:37:20,068
application that can do 
JavaScript eventually will,

894
01:37:20,267 --> 01:37:24,530
right? That's a good thing.  I 
was working in visual studio

895
01:37:24,646 --> 01:37:28,912
code, and I thought wow.  I 
remember when atom came out.

896
01:37:29,059 --> 01:37:34,098
Before I was using sublime.  
Everyone loves sublime.  Or at

897
01:37:34,225 --> 01:37:38,977
least they used to love sublime.
And then atom came out.  And oh,

898
01:37:39,136 --> 01:37:43,136
this is rendering JavaScript in 
editor? This is fast and crazy.

899
01:37:43,875 --> 01:37:50,275
And visual studio code? I'm 
thinking when I use visual

900
01:37:50,434 --> 01:37:56,488
studio code in atom, I'm using 
pluginplugins.  There are

901
01:37:57,105 --> 01:38:02,797
eco-systems of tools, because 
they're written in JavaScript,

902
01:38:02,798 --> 01:38:09,805
and things we're familiar with. 
With cypress, it's still evolve

903
01:38:11,024 --> 01:38:14,113
evolving.  We're in the early 
stages of seeing that eco-system

904
01:38:14,624 --> 01:38:17,771
expand and grow and become 
something beyond what the

905
01:38:18,989 --> 01:38:23,663
original authors intended.  
    I really want to thank the

906
01:38:24,067 --> 01:38:27,441
cypress team.  They did an 
amazing job.  They definitely

907
01:38:27,442 --> 01:38:30,664
ran into all the problems that I
experienced with Selenium, and

908
01:38:30,783 --> 01:38:34,802
said they wanted to do better.  
And they have.  They've built

909
01:38:35,249 --> 01:38:38,248
something that not only is 
written in JavaScript, but tried

910
01:38:38,712 --> 01:38:41,570
to solve the developer 
experience and tried to make it

911
01:38:41,716 --> 01:38:44,482
smoother and make it encouraging
for us to write the tests that

912
01:38:44,640 --> 01:38:47,604
are not always easy.  I think 
they've done a terrific job.  If

913
01:38:47,871 --> 01:38:51,665
you -- I think their docs are 
great.  But if you need more

914
01:38:51,787 --> 01:38:57,456
help than what's in their docs, 
check out their GitHub chat.  I

915
01:38:57,457 --> 01:38:59,319
promise you they're nice and 
friendly.

916
01:38:59,320 --> 01:39:03,424
I want to finish my personal 
story.  This is my family and

917
01:39:03,561 --> 01:39:08,322
Nicholas's family.  We each had 
a daughter two years ago.

918
01:39:08,323 --> 01:39:11,778
They're born a month apart.  Our
wives are both expecting our

919
01:39:11,980 --> 01:39:15,631
second this summer.  I really, 
really wanted to bring my family

920
01:39:16,623 --> 01:39:20,468
here, but my wife is five months
pregnant and my daughter is two

921
01:39:20,633 --> 01:39:24,593
years old and wants to climb 
over everything.  I asked my

922
01:39:24,808 --> 01:39:28,335
wife's doctor if I should, and 
she yelled at me.  She said that

923
01:39:28,782 --> 01:39:34,618
would be a very bad idea.  I 
miss them very much, but I will

924
01:39:34,755 --> 01:39:40,765
also say that Nicholas and I, 
you know, still talk for hours,

925
01:39:40,910 --> 01:39:45,542
and still teaches me new things.
I'm so grateful for having met

926
01:39:45,883 --> 01:39:50,731
them at JSConf five years ago.  
    Thank you for joining me

927
01:39:51,061 --> 01:39:54,830
today, for wanting to hear about
how to write tests, how to do

928
01:39:55,177 --> 01:39:58,140
this better, about what's 
changed.  I hope I have given

929
01:39:58,331 --> 01:40:04,029
you some ideas about that and 
about what's happened in our

930
01:40:04,030 --> 01:40:07,200
eco-system, what's happened in 
our tooling.  I love talking

931
01:40:07,640 --> 01:40:14,415
about this stuff.  Please come 
find me or find me on Twitter

932
01:40:16,248 --> 01:40:20,503
Twitter @willslab.  
   >> Thank you so much.  I find

933
01:40:20,660 --> 01:40:25,876
your story really inspiring.  
It's like a story of mentorship

934
01:40:26,117 --> 01:40:30,052
turning into friendship and more
mentorship after that.  We can

935
01:40:30,197 --> 01:40:36,041
all learn something from that.  
Really, talk to the people next

936
01:40:36,599 --> 01:40:39,695
to you and get to know their 
story and learn from them.

937
01:40:39,696 --> 01:40:42,948
We're all here to learn from one
another.  So a few

938
01:40:43,137 --> 01:40:48,294
announcements.  We do have a 
lunch break right now.  We also

939
01:40:48,619 --> 01:40:52,556
do have the diversity panel 
happening at 12:15.  Grab your

940
01:40:52,760 --> 01:40:55,509
lunch and join us on the 
diversity panel.  It's going to

941
01:40:55,705 --> 01:41:00,192
be fun.  Another thing is that 
the SO party passes or tickets

942
01:41:00,921 --> 01:41:04,344
are apparently still available, 
so you can still buy them.  And

943
01:41:04,345 --> 01:41:06,919
that's it.  Hope you have a good
lunch.

944
01:41:30,593 --> 01:41:33,859
Live Captions by:
@smiley845 with @whitecoatcapxg.

945
02:46:29,232 --> 02:46:31,232
>> Hey.  How's lunch? No

946
02:46:33,763 --> 02:46:35,812
>> Hey.  How's lunch? No one's a
fan of lunch? That's like my

947
02:46:41,791 --> 02:46:45,385
favorite time of day.  The lunch
was great.  I love fish and

948
02:46:45,876 --> 02:46:48,121
salmon.  Let's get into our next
round of talks.

949
02:46:55,647 --> 02:46:57,795
[ Applause ]
    People from Iceland are shy

950
02:46:58,232 --> 02:47:04,316
or don't feel like clapping? I 
don't know how medium works

951
02:47:04,710 --> 02:47:09,200
anymore.  Our next speaker is 
coming from London.  She is born

952
02:47:09,201 --> 02:47:11,201
and raised in

953
02:47:15,436 --> 02:47:18,909
San Francisco and is a creative 
engineer at Google.  And she

954
02:47:18,910 --> 02:47:22,493
will talk to us about something 
that is really cool, in my

955
02:47:23,099 --> 02:47:26,039
opinion.  It's augmented 
reality.  I've never played with

956
02:47:26,402 --> 02:47:30,513
it, but it seems like cool 
technology.  Please give it up

957
02:47:30,514 --> 02:47:34,288
and help me welcome Raisa up on 
the stage.

958
02:47:34,289 --> 02:47:36,289
[ Applause ]

959
02:47:38,803 --> 02:47:41,254
>> RAISA CUEVAS: Hey, 
everybody.  I think my mic is

960
02:47:44,747 --> 02:47:47,150
working.  I should have done 
this earlier.

961
02:47:54,145 --> 02:47:58,458
All right.  So, first of all, 
let's get this on

962
02:48:05,464 --> 02:48:10,687
the screen.  I'm a little 
embarrassed about my outfit.

963
02:48:10,688 --> 02:48:15,245
The truth is, I brought a really
nice, stylish shirt to wear

964
02:48:15,681 --> 02:48:18,630
today, but my hotel room didn't 
have an iron.  I called them at

965
02:48:18,770 --> 02:48:23,128
7:00 in the morning, and they 
took too long to bring it up.  I

966
02:48:23,129 --> 02:48:27,586
was panicking this morning, and 
called my boyfriend, and I said

967
02:48:27,587 --> 02:48:32,029
I don't have anything else to 
wear.  Maybe I'll go on stage

968
02:48:32,318 --> 02:48:34,318
and look like a

969
02:48:36,756 --> 02:48:40,985
mountineer.  And he said it's 
okay.  It's a developer

970
02:48:41,152 --> 02:48:45,306
conference.  And I'm like that's
right.  Let me introduce myself.

971
02:48:45,518 --> 02:48:50,358
My name is Raisa, and I'm a 
creative engineer at Google.  We

972
02:48:50,495 --> 02:48:54,469
were looking for ways to use 
augmented reality in one of our

973
02:48:55,097 --> 02:48:58,198
marketing campaigns.  I took the
liberty to do the research on my

974
02:48:58,599 --> 02:49:03,969
own and see what's possible.  I 
got really excited about the

975
02:49:03,970 --> 02:49:07,264
many years that it has gone 
back, and wanted to share with

976
02:49:07,839 --> 02:49:11,411
my team to help them appreciate 
what it is today, and do my

977
02:49:11,556 --> 02:49:13,643
actual job of reporting back 
what's possible today and

978
02:49:18,704 --> 02:49:20,704
in the future.  
    So what is possible in

979
02:49:24,823 --> 02:49:28,977
the future? I want to make a 
quick disclaimer that all this

980
02:49:29,174 --> 02:49:33,273
research I did was on my own.  
It's all public knowledge, and

981
02:49:33,602 --> 02:49:35,685
with that being said, I'm 
speaking on behalf of myself and

982
02:49:36,019 --> 02:49:39,809
not on behalf of my company or 
any of the organizations I'm a

983
02:49:40,017 --> 02:49:42,652
part of.  
    So let's step back into

984
02:49:43,487 --> 02:49:47,049
1901.  This is a time before 
airplanes, before traditional

985
02:49:47,476 --> 02:49:51,602
color photography that we know, 
and nearly a decade before the

986
02:49:51,603 --> 02:49:57,924
first talking motion picture.  
Yet, before all of these

987
02:49:58,664 --> 02:50:00,664
technological advances, we had a

988
02:50:04,823 --> 02:50:11,332
visionary author who envisioned 
a world in a book called "the

989
02:50:11,333 --> 02:50:16,549
Master Key," and he put on a 
pair of spectacles that would

990
02:50:16,911 --> 02:50:20,678
overlay a character marker.  He 
is looking around and can judge

991
02:50:20,835 --> 02:50:25,694
a person on a single look.  
These were really deep sci-fi

992
02:50:26,111 --> 02:50:29,383
thoughts back in 1901.  I can't 
imagine how he could have come

993
02:50:29,384 --> 02:50:37,424
up with the idea.  If the name L
Frank Baum rings a bell, he's

994
02:50:38,061 --> 02:50:44,742
also the author of the wizard of
Oz.

995
02:50:44,743 --> 02:50:51,700
Fast forward to 1968.  We have 
built a plane and orbited the

996
02:50:52,055 --> 02:50:56,838
moon.  And we also have the 
first head-mounted display.

997
02:50:57,153 --> 02:51:03,854
This was developed by Ivan 
Sutherland.  You can see him

998
02:51:04,533 --> 02:51:08,489
spinning around, and all he can 
see is a simple wire cube.

999
02:51:08,490 --> 02:51:11,641
After this hard work, you saw a 
visionary cube in space.  And

1000
02:51:11,784 --> 02:51:15,921
this was a really important 
precursor to AR.  As you can

1001
02:51:16,273 --> 02:51:20,988
see, there have been so many 
advancements with head-mounted

1002
02:51:21,370 --> 02:51:27,062
displays these days.  And now 
looking at 2018, we have a

1003
02:51:27,063 --> 02:51:32,555
rocket orbiting into space with 
a car that is out there

1004
02:51:32,915 --> 02:51:37,369
floating.  But we also have all 
of these advancements in

1005
02:51:37,370 --> 02:51:41,003
augmented reality.  Everyone is 
talking about it being the next

1006
02:51:41,795 --> 02:51:46,096
big thing.  Technologists and 
investors alike are speculating

1007
02:51:46,097 --> 02:51:51,357
on when this will blow up.  
    So what's happening? There

1008
02:51:52,004 --> 02:51:56,120
is rich history that dates 
augmented reality back to at

1009
02:51:56,121 --> 02:52:00,607
least 1901.  So, if you look at 
this chart from Google trends,

1010
02:52:01,050 --> 02:52:06,183
in case you haven't used it 
before, the Y  axis is the

1011
02:52:06,661 --> 02:52:13,393
search enjin  -- engine from 0 
to 10 and the X is time.  So I

1012
02:52:13,563 --> 02:52:16,981
did a search for 200 years.  As 
you can see, there's interesting

1013
02:52:17,977 --> 02:52:23,634
activity going on here.  
Suddenly in the summer of 2016,

1014
02:52:24,346 --> 02:52:29,514
we see a huge peak, and people 
are curious about the mysterious

1015
02:52:30,372 --> 02:52:36,483
AR thing.  This is when Pokemon 
go was released.  People

1016
02:52:36,899 --> 02:52:41,514
wondered, whoa! What is augment
augmented reality, and what else

1017
02:52:41,717 --> 02:52:45,306
is possible with this thing? 
This was probably the most

1018
02:52:45,511 --> 02:52:49,998
popular AR application, although
it's not fully AR capable, and

1019
02:52:49,999 --> 02:52:58,373
they're working on that fully AR
Pokemon go soon.  But this

1020
02:52:58,624 --> 02:53:03,458
opened the public's eyes into 
the possibility of AR and showed

1021
02:53:03,679 --> 02:53:07,317
the potential for its scale.  
    Later, around the fall of

1022
02:53:07,688 --> 02:53:10,833
2017, we have another peak 
that's starting to rise.  It's

1023
02:53:11,543 --> 02:53:18,641
not as high as Pokemon Go, this 
was from AR core and ARKit that

1024
02:53:19,594 --> 02:53:21,883
were released around the same 
time.  These are developer kits

1025
02:53:22,098 --> 02:53:25,938
that will allow people to build 
experiences such as Pokemon Go

1026
02:53:26,170 --> 02:53:30,109
in a much easier and more 
streamlined way.

1027
02:53:30,110 --> 02:53:36,880
So a quick definition, ARCore is
a platform for building AR apps

1028
02:53:36,881 --> 02:53:45,277
on Android, and ARKit is Apple's
version for building AR on iOs.

1029
02:53:45,636 --> 02:53:49,044
Looking back, this is as far 
back as you can go.  There is

1030
02:53:49,045 --> 02:53:52,100
some activity going on.  People 
are actually interested and

1031
02:53:52,280 --> 02:53:56,084
aware of augmented reality.  
Especially around 2009.  So that

1032
02:53:56,325 --> 02:53:59,922
was almost ten years ago.  And 
why does it seem like it's such

1033
02:53:59,923 --> 02:54:05,879
a new thing now? This is when AR
tool kit was released for web.

1034
02:54:05,999 --> 02:54:11,101
It's an open-sourced tool kit.  
If you want to compare it to

1035
02:54:12,611 --> 02:54:17,965
ARCore and ARKit, and allowed 
developers to build AR

1036
02:54:18,350 --> 02:54:21,334
applications.  The output would 
be Flash-based.

1037
02:54:21,335 --> 02:54:25,201
This is one of the reasons it 
didn't take on.  Users have to

1038
02:54:25,202 --> 02:54:29,163
install a plugin, and they have 
to use their web cam in a weird

1039
02:54:29,474 --> 02:54:33,164
way that does not feel natural 
compared to a mobile device,

1040
02:54:33,305 --> 02:54:35,891
where you can take it around 
with you, and it makes more

1041
02:54:35,892 --> 02:54:42,031
sense to point at what you want 
to project your AR object on to.

1042
02:54:42,032 --> 02:54:48,747
So, this really shows its 
state.  This publication about

1043
02:54:48,748 --> 02:54:53,481
it describes what AR tool kit 
is.  It shows AR tool kit in

1044
02:54:53,663 --> 02:54:58,691
action.  It's marker-based, so 
they have this code where it

1045
02:54:58,692 --> 02:55:02,562
will project the object from the
code.  And then in the

1046
02:55:03,089 --> 02:55:07,416
documentation, you can also see 
that it's using windows XP and

1047
02:55:07,641 --> 02:55:11,343
telling you how to use a web cam
on your computer.

1048
02:55:11,344 --> 02:55:15,414
Later in 2009, we have the 
introduction of augmented

1049
02:55:16,094 --> 02:55:21,799
reality into the real world.  
Esquire published this issue, it

1050
02:55:22,015 --> 02:55:25,302
was an augmented reality 
special, and on the front cover,

1051
02:55:25,607 --> 02:55:29,896
you had this QR code you could 
scan, and something magical

1052
02:55:30,104 --> 02:55:34,448
happens.  Robert Downey Jr. 
Comes out of the screen and

1053
02:55:35,006 --> 02:55:39,688
starts acknowledging you.  As 
you saw in the previous screen,

1054
02:55:39,689 --> 02:55:43,100
there were 12 pages of AR 
content and lots of publications

1055
02:55:43,548 --> 02:55:47,069
were talking about it, and it 
was becoming more noticeable to

1056
02:55:47,446 --> 02:55:50,961
consumers.  
    So fast forwarding to today,

1057
02:55:51,236 --> 02:56:01,095
we have back in 2012, Google 
hangouts foments

1058
02:56:02,721 --> 02:56:05,785
filters, which was long before 
snap

1059
02:56:11,797 --> 02:56:19,107
chat.  We have Pokemon Go, and 
Ikea's furniture app from the

1060
02:56:19,108 --> 02:56:21,108
Apple store.  
What's making this possible is

1061
02:56:21,449 --> 02:56:26,629
we have much more powerful 
devices, much more powerful

1062
02:56:26,772 --> 02:56:32,909
browsers that will soon be 
capable of AR.  Hopefully future

1063
02:56:33,230 --> 02:56:36,723
support on the web will help to 
bring this technology to the

1064
02:56:37,257 --> 02:56:39,362
masses.  
    So let's go back to basics

1065
02:56:39,607 --> 02:56:41,979
and talk about what defines 
augmented reality

1066
02:56:45,326 --> 02:56:50,359
apps.  So ARCore, again, is the 
kit that allows developers to

1067
02:56:50,360 --> 02:56:55,586
use these defining features in 
applications.  And these

1068
02:56:55,961 --> 02:56:59,082
defining features include motion
tracking, which allows the

1069
02:56:59,083 --> 02:57:03,092
device to understand and track 
its position relative to the

1070
02:57:03,093 --> 02:57:06,280
real world.  So a scare crow 
that you can place into the

1071
02:57:06,484 --> 02:57:09,582
world and move around and looks 
stationary just like the people

1072
02:57:09,884 --> 02:57:14,343
next to it.  And environmental 
understanding so the device can

1073
02:57:14,344 --> 02:57:18,677
detect the size and location.  
Previously it was only

1074
02:57:19,400 --> 02:57:23,664
horizontal surfaces, but with 
the new release, you can place

1075
02:57:25,162 --> 02:57:28,556
it on textured surfaces.  There 
was a demo of placing things on

1076
02:57:28,893 --> 02:57:32,726
the snow, like around the tree. 
And then light estimation, which

1077
02:57:32,727 --> 02:57:35,063
allows the device to estimate 
the lighting conditions.  This

1078
02:57:35,395 --> 02:57:39,974
helps brings objects to life.  
The Subtleties like shadows and

1079
02:57:39,975 --> 02:57:43,494
brightness can really make an 
object in the real world look

1080
02:57:48,632 --> 02:57:52,405
real.  
    So, previously we had a

1081
02:57:53,464 --> 02:57:58,592
platform called tango, which 
allowed augmented reality on

1082
02:57:58,593 --> 02:58:01,982
powerful devices, but we decided
we wanted to bring this to the

1083
02:58:02,204 --> 02:58:05,983
masses.  That's when we focused 
our efforts from late last year

1084
02:58:06,313 --> 02:58:11,317
on ARCore, which will make 
augmented reality possible on

1085
02:58:11,318 --> 02:58:15,314
more Android devices.  So that 
is a huge challenge, but a

1086
02:58:15,315 --> 02:58:18,902
really big opportunity.  The 
fact that there are 2 billion

1087
02:58:19,179 --> 02:58:23,240
plus active devices running on 
Android.  And each of these has

1088
02:58:23,241 --> 02:58:26,405
their own unique hardware 
requirements and specs that we

1089
02:58:26,655 --> 02:58:29,968
have to make sure align and 
provide the same high quality

1090
02:58:30,123 --> 02:58:32,700
experience that we want all 
users to have.

1091
02:58:32,701 --> 02:58:36,910
So currently, with the most 
recent release, it works on 100

1092
02:58:37,461 --> 02:58:40,922
million devices including 13 
unique models.  And we're

1093
02:58:40,923 --> 02:58:44,676
working with partners to make 
sure that more devices can

1094
02:58:44,677 --> 02:58:48,753
support this.  
    Going back to ARKits.  This

1095
02:58:48,754 --> 02:58:52,498
is the software developer kit 
allowing developers to use the

1096
02:58:53,086 --> 02:58:58,155
same essential features in iOS 
11.  It's very similar to the

1097
02:58:58,585 --> 02:59:04,817
three basic AR features that 
ARCore suggests.  Those are

1098
02:59:05,066 --> 02:59:10,864
essential AR features, not like 
AR core.  They can be described

1099
02:59:11,161 --> 02:59:18,432
for any augmented reality app.  
And the device compatibility,

1100
02:59:19,150 --> 02:59:21,150
most recent Apple devices.

1101
02:59:25,623 --> 02:59:31,944
So with iPhone 6S and above, and
some of the newer iPads.

1102
02:59:31,945 --> 02:59:35,413
Let's talk about building for 
web.  All of this allows you to

1103
02:59:35,414 --> 02:59:39,563
build native apps, and this is a
JS conference, so you are

1104
02:59:39,564 --> 02:59:42,479
probably bored thinking about 
building an app.  We want to

1105
02:59:42,682 --> 02:59:44,682
build for web.  So let's see

1106
02:59:49,137 --> 02:59:53,225
what's possible.  ARCore has an 
experiment exploring the

1107
02:59:53,441 --> 02:59:55,792
possibilities of web support, 
and it will lower the barrier to

1108
02:59:56,477 --> 02:59:59,836
enter, which people can build 
apps and release them out to the

1109
03:00:00,206 --> 03:00:05,405
web.  This is a pre-standards 
experimentation, just trying to

1110
03:00:05,628 --> 03:00:10,066
see what's possible.  It's 
basically a wrapper of chromium

1111
03:00:10,067 --> 03:00:13,862
extending web VR features, so 
it's really

1112
03:00:17,521 --> 03:00:22,418
scalable.  So they have this 
cool demo called article, which

1113
03:00:22,419 --> 03:00:30,419
you can download on get  GitHub 
and run it on the server.  It's

1114
03:00:30,420 --> 03:00:36,477
super easy.  
    ARCore is not one single

1115
03:00:36,901 --> 03:00:42,785
entity.  You're building a web 
app with AR capabilities.

1116
03:00:42,786 --> 03:00:45,295
You're running it on the 
experimental browser that is

1117
03:00:45,535 --> 03:00:49,959
supposed to emulate what the web
standards might look like.

1118
03:00:49,960 --> 03:00:52,786
Currently they have experimental
browsers that work on Android

1119
03:00:59,749 --> 03:01:02,537
and iOS.  
    And most of the examples on

1120
03:01:02,686 --> 03:01:11,805
the web AR for ARCore demos are 
built with 3JS.  It's a popular

1121
03:01:12,575 --> 03:01:16,271
library used since 2010.  Some 
of Google's projects have

1122
03:01:19,583 --> 03:01:24,407
used it, and all of these other 
cool Google and non-gilt

1123
03:01:24,408 --> 03:01:29,556
experiments you see here.  It 
allows you to create 3D shapes,

1124
03:01:29,791 --> 03:01:33,025
animations, complex scenes, and 
gives you tools to make this

1125
03:01:33,460 --> 03:01:36,333
easier.  3D modeling concepts 
are really hard.

1126
03:01:36,334 --> 03:01:41,961
So this is one of the tools that
it provides.  It's an in-browser

1127
03:01:42,130 --> 03:01:46,392
shape editor or scene editor.  
It allows you to control all the

1128
03:01:46,522 --> 03:01:51,357
different parameters.  And it's 
a really good way to start

1129
03:01:51,358 --> 03:01:55,470
learning 3D modeling, especially
if you haven't been paying

1130
03:01:55,471 --> 03:02:02,159
attention in math class.  You 
have to relearn mapping and

1131
03:02:02,160 --> 03:02:04,160
matrix multiplication, and 
sometimes it's

1132
03:02:10,183 --> 03:02:13,390
overwhelming.  With time, you 
can make 3D creations like this.

1133
03:02:13,960 --> 03:02:18,203
If you are having trouble, you 
can download some models on poly

1134
03:02:21,066 --> 03:02:24,286
and find these different kinds 
of cheese burgers.  Search for

1135
03:02:24,287 --> 03:02:27,035
the term, and you will find 
items tagged with that

1136
03:02:27,165 --> 03:02:32,231
description.  And if you really 
like these cheeseburgers, you

1137
03:02:32,232 --> 03:02:35,081
can put them together, start 
throwing them in the air, and

1138
03:02:35,082 --> 03:02:40,263
that's your AR app.
    So just to highlight what's

1139
03:02:40,264 --> 03:02:45,730
possible with 3JS, this is one 
of the apps that my team has

1140
03:02:46,219 --> 03:02:48,219
built, and it helps people

1141
03:02:54,439 --> 03:03:03,170
find the direction prayer for.  
This is basically just usek web

1142
03:03:06,005 --> 03:03:10,419
RTC to use the camera and 
navigation APIs.  And basically

1143
03:03:10,420 --> 03:03:15,852
it's projecting this into space 
rather than as we have learned

1144
03:03:15,997 --> 03:03:19,629
as an essential AR feature.  It 
doesn't allow you to place it on

1145
03:03:20,171 --> 03:03:26,488
to a detected surface.  It's a 
kind of faux AR, but it's -- I

1146
03:03:26,655 --> 03:03:30,410
guess you can compare it to 
Pokemon Go, where you're not

1147
03:03:32,280 --> 03:03:36,443
really throwing the Pokeball on 
to the Pokemon.  It's not on the

1148
03:03:36,775 --> 03:03:40,710
floor.  Sometimes it's floating 
around.  So that's kind of one

1149
03:03:41,072 --> 03:03:44,650
distinction of what's possible 
with 3JS and how we need to

1150
03:03:48,250 --> 03:03:55,858
bridge the gap.  There is a 
library called 3.AR.JS, which

1151
03:03:56,154 --> 03:03:59,518
detects the device compatibility
and interfaces with a web VR

1152
03:03:59,977 --> 03:04:04,940
extension that is exposed by the
experimental browsers.  That's

1153
03:04:04,941 --> 03:04:08,184
what is allowing you to throw 
things on to surfaces and detect

1154
03:04:08,705 --> 03:04:11,537
it with precision.  
    So putting it all together,

1155
03:04:11,942 --> 03:04:15,167
you can create useful apps.  For
example, this living room

1156
03:04:18,874 --> 03:04:22,172
modeling.  There's useful things
you can do for consumers,

1157
03:04:22,295 --> 03:04:25,549
especially if it's available for
the web.  People can reach these

1158
03:04:26,015 --> 03:04:31,431
experiences from a link, and 
access them if their device is

1159
03:04:31,851 --> 03:04:36,293
compatible.  
    So, again, the web AR and AR

1160
03:04:36,465 --> 03:04:41,031
core implementation is an 
experiment to explore what is

1161
03:04:41,194 --> 03:04:46,392
possible and what might be 
potential web standards.  There

1162
03:04:46,590 --> 03:04:50,382
are more possibilities.  Moz://a
has their possibility, and there

1163
03:04:51,030 --> 03:04:56,076
are a lot of commonalties in the
pre-standards proposals right

1164
03:04:56,311 --> 03:05:00,419
now.  Things are starting to 
align, and hopefully we have

1165
03:05:01,215 --> 03:05:04,713
standards, too.  I think one of 
the most popular ones might be

1166
03:05:04,987 --> 03:05:10,102
the marker-based ar.js.  If you 
recognize the markers from my

1167
03:05:10,523 --> 03:05:15,779
earlier slides, it's because 
it's based on AR tool kit.  So

1168
03:05:16,990 --> 03:05:20,340
it goes way back.  With all of 
these standards that are not

1169
03:05:20,587 --> 03:05:23,943
fully in place, why should we 
care now? What if it changes and

1170
03:05:24,129 --> 03:05:28,979
it stresses you out to learn all
of these new things? With 3D

1171
03:05:29,174 --> 03:05:32,672
modeling, it's a big concept to 
grasp, and if you start learning

1172
03:05:33,154 --> 03:05:38,629
it now, there's a lot to catch 
up on.  People have been 3D

1173
03:05:38,630 --> 03:05:41,983
modeling for decades.  If you're
interested, start equipping

1174
03:05:42,115 --> 03:05:44,450
yourself with the basic 
knowledge to get started.  And

1175
03:05:44,451 --> 03:05:48,503
people are already building 
really cool stuff right now.

1176
03:05:48,737 --> 03:05:52,574
Some sources of inspiration,
there are ARCore-specific

1177
03:05:55,912 --> 03:06:00,643
examples.  There's an ARKit 
version at the bottom there.

1178
03:06:00,644 --> 03:06:05,139
One of my favorites is here, 
which just features some of

1179
03:06:05,590 --> 03:06:10,088
Google's -- I am not biased or 
anything -- some of Google's AR

1180
03:06:10,260 --> 03:06:12,879
experiments.  But one of the 
reasons I love it so much is

1181
03:06:12,880 --> 03:06:15,957
half of the experiments were 
created by women.  So that's

1182
03:06:15,958 --> 03:06:21,303
awesome to show that 
representation in the web XR

1183
03:06:21,645 --> 03:06:26,400
community.  And going back to 
Ivan Sutherland, the professor

1184
03:06:27,479 --> 03:06:29,479
who created the first 
head-mounted

1185
03:06:37,769 --> 03:06:41,530
display.  With all of these 
advancements, I think we're

1186
03:06:41,531 --> 03:06:44,546
getting close to that.  
Although we might not be close

1187
03:06:44,547 --> 03:06:49,615
to the really complex 
head-mounted displays, I think

1188
03:06:49,862 --> 03:06:53,045
it's exciting that we are 
getting really close to building

1189
03:06:53,895 --> 03:06:57,012
web-based AR applications.  
That's what is really going to

1190
03:06:57,013 --> 03:06:59,924
make AR become more widespread. 
So thank you guys for

1191
03:07:06,722 --> 03:07:10,230
>> Thank you so much, Raisa. 
I have a question for you on

1192
03:07:15,353 --> 03:07:18,252
AR.
I want to get your viewpoint on

1193
03:07:18,626 --> 03:07:21,588
what you're most excited about 
on the types of experiences that

1194
03:07:21,589 --> 03:07:24,751
users will get from web AR? 
   >> RAISA CUEVAS: Yeah, I

1195
03:07:24,752 --> 03:07:29,745
mean, I'm really excited about 
web AR, because it's going to

1196
03:07:29,883 --> 03:07:34,118
open it up to more users.  There
won't be the barrier of entry to

1197
03:07:35,025 --> 03:07:38,756
have a specific device.  It has 
to be one of the compatible

1198
03:07:39,123 --> 03:07:43,491
devices.  But they won't have to
download a specific app, and it

1199
03:07:43,661 --> 03:07:47,237
opens up the possibilities.  But
some of the use cases that I'm

1200
03:07:47,238 --> 03:07:51,037
excited about is education.  We 
currently have the Google

1201
03:07:51,415 --> 03:07:55,939
expeditions, which was formerly 
like a VR classroom experiment,

1202
03:07:55,940 --> 03:08:00,400
but they have expanded it to AR,
so kids can use their phones in

1203
03:08:00,730 --> 03:08:05,947
class and see volcanos erupting 
on the floor or see the planets

1204
03:08:06,768 --> 03:08:12,976
in the sky.  It's a good way to 
see that interactively.

1205
03:08:12,977 --> 03:08:15,954
>> I wish I could go 
back-to-school.

1206
03:08:15,955 --> 03:08:17,384
>> RAISA CUEVAS: Definitely. 
   >> Thank you so much.

1207
03:08:17,385 --> 03:08:19,385
[ Applause ]

1208
03:08:25,849 --> 03:08:29,637
Our next talk is another 
creative talk.  It was previewed

1209
03:08:30,843 --> 03:08:35,743
earlier in the intros.  It's the
paint splatter technology that's

1210
03:08:35,971 --> 03:08:41,315
being used right now, outside.  
So it's by -- I don't know if

1211
03:08:41,454 --> 03:08:44,586
I'm going to say this right.

1212
03:08:58,189 --> 03:09:00,189
Halldór -- Halldór and pórour 
Hans Baldursson.  I think that's

1213
03:09:04,539 --> 03:09:06,539
Halldór -- Halldór

1214
03:09:18,217 --> 03:09:24,129
to talk to us about the colorful
painter technology that's all

1215
03:09:24,130 --> 03:09:26,917
over the concert hall them.  
They're right now.

1216
03:09:26,918 --> 03:09:33,436
Vandalism without consequences. 
And how they turned Harpa into a

1217
03:09:33,437 --> 03:09:39,206
giant LED-lit facade, into a 
collaborative art work that can

1218
03:09:39,207 --> 03:09:44,297
be used by everyone.  They make 
up the two-man digital arts

1219
03:09:44,690 --> 03:09:46,690
studio that is Staffly.

1220
03:09:51,756 --> 03:09:56,765
Is that right? Together they 
created a few interactive art

1221
03:09:56,902 --> 03:09:59,752
installations.  They most 
notable work is the one that's

1222
03:10:00,578 --> 03:10:02,578
outside utilizing the LED

1223
03:10:08,124 --> 03:10:10,029
facade.  
    While they set up, help me

1224
03:10:10,030 --> 03:10:14,859
welcome them to the stage.  Hall

1225
03:10:19,612 --> 03:10:21,612
Hall --

1226
03:10:24,885 --> 03:10:26,885
Halldór and pórour Hans 
Baldursson [ Applause ]

1227
03:11:32,667 --> 03:11:34,779
>> HALLDￓR: Hello.  My name

1228
03:11:40,916 --> 03:11:43,877
is Halldór.

1229
03:11:53,008 --> 03:11:54,639
>> HANS: Hello.  
   >> HALLDￓR: I'm going to

1230
03:11:54,640 --> 03:11:58,979
begin by telling you a little 
bit about myself.  I have a

1231
03:11:59,783 --> 03:12:05,673
bachelor's degree in computer 
science, a BS in CS, or a bull

1232
03:12:09,714 --> 03:12:16,672
shit degree in counter.  I also 
do my fair share of websites and

1233
03:12:17,975 --> 03:12:24,102
whatnotes.  My second job is as 
a musician.  I compose music,

1234
03:12:24,103 --> 03:12:29,588
and I also am in a band, which 
you should totally check out, if

1235
03:12:29,764 --> 03:12:31,764
you haven't already.  And I

1236
03:12:36,472 --> 03:12:41,797
collaborate with musicians on a 
new robotic piano project.  Some

1237
03:12:42,290 --> 03:12:44,290
of my work is

1238
03:12:48,061 --> 03:12:53,440
most notably a generated music 
piece, and it's writteden in

1239
03:12:53,630 --> 03:13:00,013
JavaScript.  It uses the photos 
taken during the moon landings

1240
03:13:00,014 --> 03:13:07,681
back in the '60s and '70s as an 
input to a musical engine, and

1241
03:13:07,682 --> 03:13:11,220
creates sound scoopss --

1242
03:13:14,847 --> 03:13:17,230
soundscapes.  
There is ambient music generated

1243
03:13:17,524 --> 03:13:23,629
in the browser.  And another 
project is the infinite string

1244
03:13:24,342 --> 03:13:28,897
quartet, which is a modular 
string quartet, written by my

1245
03:13:29,064 --> 03:13:34,417
brother, who is also a composer.
And we created an interactive

1246
03:13:34,822 --> 03:13:38,614
version of it that runs in the 
browser.  And you can select

1247
03:13:38,615 --> 03:13:44,807
modules or clips from the string
quartet, and make a 3D space

1248
03:13:44,808 --> 03:13:51,445
around you.  You can play for 
hours, creating creepy string

1249
03:13:51,446 --> 03:13:58,084
quartet music with this.  
    And then the project I'm

1250
03:13:58,417 --> 03:14:02,810
working on here.  Here we are 
contemplating how to make it

1251
03:14:03,317 --> 03:14:07,552
sound more like a flower.  You 
know, artists.  That is being

1252
03:14:14,356 --> 03:14:19,227
released very soon.  
   >> HANS: I work for the local

1253
03:14:19,906 --> 03:14:23,014
contracting company.  I'm also 
going to use the opportunity to

1254
03:14:23,015 --> 03:14:25,309
talk about some of my projects, 
since I have this

1255
03:14:31,006 --> 03:14:34,808
platform.  
This is a Chrome extension.

1256
03:14:35,227 --> 03:14:37,862
Woo!
It takes all of the works and

1257
03:14:38,080 --> 03:14:45,313
replaces them.  Here we have 
bacon.  And that gets replaced

1258
03:14:51,125 --> 03:14:56,064
with this.  Recently, just 
earlier this month, we did

1259
03:14:56,458 --> 03:15:00,538
another project using the facade
outside.  This was

1260
03:15:04,649 --> 03:15:11,210
done, and basically a giant 
heart projected.  The input is

1261
03:15:11,472 --> 03:15:17,573
users' heart rate.  
   >> HALLDￓR: So let's talk

1262
03:15:17,746 --> 03:15:21,052
about paint splatter.  It's an 
interactive installation where

1263
03:15:21,245 --> 03:15:24,563
you can participate on your 
phone.  And the simplest way to

1264
03:15:24,564 --> 03:15:26,564
describe it is that

1265
03:15:28,811 --> 03:15:34,864
it's a giant digital canvas made
out of the huge LED facade.  And

1266
03:15:35,194 --> 03:15:39,006
anyone with access to internet 
or a smart device or a computer

1267
03:15:39,007 --> 03:15:43,327
can interact with the cameras by
splashing virtual paint on it,

1268
03:15:43,328 --> 03:15:48,223
which drips straight down or 
sideways depending on wind

1269
03:15:48,489 --> 03:15:53,704
direction and force.  Take it 
away.

1270
03:15:53,705 --> 03:15:57,965
>> HANS: So, when you're 
creating collective art, it's

1271
03:15:58,426 --> 03:16:01,530
important that the user input is
simple and rewarding.  Most

1272
03:16:01,531 --> 03:16:06,517
people like vandalizing, 
especially without consequences.

1273
03:16:07,897 --> 03:16:14,100
So anonymously splashing paint 
on Iceland's most expensive

1274
03:16:14,591 --> 03:16:18,147
painting seemed like a rewarding
and simple way to be an outlet

1275
03:16:18,517 --> 03:16:21,511
for that kind of behavior.  
    For the first few days we

1276
03:16:22,424 --> 03:16:26,801
had thousands of visits from 
people all over the world.  And

1277
03:16:26,802 --> 03:16:30,837
some people standing outside in 
the storm splashing for hours.

1278
03:16:30,838 --> 03:16:34,831
The reason why it became so 
popular is our interactiveness.

1279
03:16:35,117 --> 03:16:39,492
The fact that by touching a 
small area on your phone

1280
03:16:39,493 --> 03:16:44,910
resulted in a giant blob visible
to all participants all over the

1281
03:16:44,911 --> 03:16:52,136
world.  It's also visibly 
pleasing.  The blobs have

1282
03:16:52,137 --> 03:16:56,230
different looks.  We could avoid
making this look like a giant,

1283
03:16:56,231 --> 03:16:59,663
shared Microsoft paint document.
We could avoid

1284
03:17:05,604 --> 03:17:13,676
mankind's most drawn art work 
ever, the phallic symbol.

1285
03:17:13,677 --> 03:17:16,789
>> HALLDￓR: The design process 
was straightforward.  It started

1286
03:17:17,133 --> 03:17:21,194
with conceptual sketches on 
paper, like all good ideas

1287
03:17:21,911 --> 03:17:26,336
start.  And the whole concept 
was thoroughly determined before

1288
03:17:26,643 --> 03:17:30,677
we started coding anything.  So 
that helped us really keep

1289
03:17:30,798 --> 03:17:32,798
things in scope.  And we did

1290
03:17:36,963 --> 03:17:39,717
one thing well.  
    The next step was doing some

1291
03:17:39,903 --> 03:17:48,703
web mock-ups just to get a gist 
of how the animation would look

1292
03:17:48,827 --> 03:17:56,638
like.  And I'm going to show you
a code pen I did here.

1293
03:17:56,639 --> 03:17:59,118
>> HANS: This is not the code 
pen.

1294
03:17:59,119 --> 03:18:04,239
>> HALLDￓR: No, this is my home.
This is where I live.  I used to

1295
03:18:04,240 --> 03:18:06,240
keep this

1296
03:18:08,467 --> 03:18:10,467
on my screen. 
Here it is.  Here

1297
03:18:17,585 --> 03:18:21,723
is the first directive, and how 
with input parameters, how it

1298
03:18:21,724 --> 03:18:26,773
would leak to get a sense of the
rendering and main obstacles.

1299
03:18:26,774 --> 03:18:31,290
This took like 30 minutes to do.
And it was so good to have this

1300
03:18:31,291 --> 03:18:39,503
with the project proposal.  
    Okay.  Back to the

1301
03:18:39,893 --> 03:18:42,431
presentation.  The biggest 
unknown factor in the whole

1302
03:18:42,760 --> 03:18:44,856
project was how to render stuff 
from the

1303
03:18:48,666 --> 03:18:53,800
light facade, but it had been 
done before.  So we got access

1304
03:18:53,801 --> 03:18:57,565
to node.js server access code 
written

1305
03:19:03,054 --> 03:19:08,498
by Owen Hendley.  
The networking part was also

1306
03:19:09,033 --> 03:19:11,392
pretty straightforward.  We used

1307
03:19:15,696 --> 03:19:19,729
socket.io, and you press and 
make a blob, and it sends the

1308
03:19:19,952 --> 03:19:23,991
event to all connected 
participants.  And it also

1309
03:19:23,992 --> 03:19:29,840
contains some rudimentary game 
logic and input sanitizing and

1310
03:19:29,958 --> 03:19:31,958
UX

1311
03:19:36,280 --> 03:19:39,027
throttling.  
    So when we set that up, we

1312
03:19:39,309 --> 03:19:45,131
faced some real-world problems. 
The server had to be located in

1313
03:19:45,654 --> 03:19:48,556
the basement with the rest of 
the controllers, that meant we

1314
03:19:48,557 --> 03:19:53,219
had to go up and down and up and
down endlessly in our feedback

1315
03:19:53,354 --> 03:19:55,369
loop.  This is a video of one of

1316
03:19:58,662 --> 03:20:00,662
those times.  But it was great

1317
03:20:03,672 --> 03:20:05,672
physical exercise.  
   >> And we also got lost a few

1318
03:20:08,109 --> 03:20:13,028
times.  It was like Hogwart's 
school.

1319
03:20:13,029 --> 03:20:15,528
>> I think there are a lot of 
people stuck down there.

1320
03:20:15,529 --> 03:20:20,560
>> Probably is a small 
population there by now.

1321
03:20:20,561 --> 03:20:24,500
>> Yeah.  And this was online, 
we wanted to allow more people

1322
03:20:24,501 --> 03:20:30,969
to participate.  So we decided 
to set up our live stream.  With

1323
03:20:31,639 --> 03:20:36,508
our limited budget, we picked up
the phone and duct taped it to

1324
03:20:36,509 --> 03:20:39,425
the ceiling of the hotel lobby 
across from the

1325
03:20:48,373 --> 03:20:51,701
location.  But soon, people 
started complaining about the

1326
03:20:51,702 --> 03:20:54,627
tourist bus blocking the view.  
And also the staff at the

1327
03:20:58,776 --> 03:21:04,077
hotel, they were not pleased 
about the unidentified phone

1328
03:21:04,078 --> 03:21:06,993
that was possibly broadcasting 
their conversations to the

1329
03:21:07,312 --> 03:21:10,009
internet.  
   >> Yeah.  We also encountered

1330
03:21:10,310 --> 03:21:16,360
some problems with deploying the
rendered server at Harpa.  We

1331
03:21:16,361 --> 03:21:21,642
had to connect our computer 
through six unmarked ether net

1332
03:21:21,904 --> 03:21:25,495
cables, and had to be done in 
correct order for it to work.

1333
03:21:25,496 --> 03:21:31,200
It was most definitely not a 
very atomic deployment process.

1334
03:21:31,313 --> 03:21:35,177
Almost like programming punch 
card

1335
03:21:38,450 --> 03:21:40,450
programs. 
   >> So we had to become like a

1336
03:21:41,001 --> 03:21:44,860
small tourist station.  
   >> Yeah.

1337
03:21:44,861 --> 03:21:50,272
>> We had to fulfill our duties 
as a live TV station.

1338
03:21:50,273 --> 03:21:53,941
Did you already mention the main
complaint from the

1339
03:21:59,378 --> 03:22:02,308
Reddit users?
The tour bus?

1340
03:22:02,309 --> 03:22:04,813
>> Yeah, yeah.  You're not even 
listening to me.

1341
03:22:04,814 --> 03:22:07,655
>> And then we got spammed.  
It was bound

1342
03:22:11,156 --> 03:22:14,615
to happen.  
Somebody found a way to

1343
03:22:15,723 --> 03:22:20,660
circumvent our rate limiting.  
Oh no! And why am I telling you

1344
03:22:21,151 --> 03:22:26,370
programmers and JavaScript 
people? And then we got, like,

1345
03:22:29,668 --> 03:22:31,988
properly hacked.  
    Now this is actually a very

1346
03:22:32,576 --> 03:22:35,819
funny story, because somebody 
found a way to override our

1347
03:22:36,037 --> 03:22:41,688
color scheme.  We had like a 
very limited color scheme.  You

1348
03:22:42,071 --> 03:22:44,911
could not draw black, for 
instance.  So you could not

1349
03:22:44,912 --> 03:22:48,271
clear the screen or something 
like that.  But somebody found a

1350
03:22:48,463 --> 03:22:56,744
way to override it, and were 
suddenly able to draw arbitrary

1351
03:22:56,912 --> 03:23:00,084
buffers of images.  We knew this
was a possibility from the

1352
03:23:00,248 --> 03:23:04,817
start, but didn't have the 
resources to prevent it, except

1353
03:23:04,818 --> 03:23:13,050
for some basic rate limiting and
exponentially increasing buffer

1354
03:23:13,185 --> 03:23:15,696
periods.  
    But this was a very fun

1355
03:23:16,197 --> 03:23:23,873
challenge, and war was upon us. 
Iceland is very small, and the

1356
03:23:24,397 --> 03:23:27,175
communities here are even 
smaller.  The proof for that is

1357
03:23:27,469 --> 03:23:32,443
that I just got on messenger and
guessed who the hacker was.

1358
03:23:35,803 --> 03:23:41,873
And this was  before the hacker 
started writing his name on the

1359
03:23:42,566 --> 03:23:45,254
facade.  He was my former 
computer game programming

1360
03:23:45,606 --> 03:23:49,117
teacher at university, and he's 
also a programmer at CCP.  And

1361
03:23:49,118 --> 03:23:53,917
the only person in Iceland I 
knew that would be able to do

1362
03:23:54,083 --> 03:24:00,716
such a thing, and invest the 
time to do it properly.

1363
03:24:00,717 --> 03:24:02,717
[ Laughter ]
    So I could immediately

1364
03:24:02,865 --> 03:24:07,050
recognize his way of doing the 
hacking, because it was very

1365
03:24:07,201 --> 03:24:10,121
professionally done.  We 
approached him and after

1366
03:24:10,544 --> 03:24:15,145
negotiations, he surrendered and
told us all about how he did it.

1367
03:24:15,640 --> 03:24:19,306
He sent his code and a lot of 
comments on our code, which was

1368
03:24:19,307 --> 03:24:25,686
very fun to read.  So he was 
able to draw arbitrary buffers

1369
03:24:26,059 --> 03:24:31,361
with paint.  This is where he 
was like neatly organizing his

1370
03:24:31,514 --> 03:24:33,514
name in a two-dimensional

1371
03:24:37,553 --> 03:24:39,553
array.
He wrote a whole rendering

1372
03:24:39,743 --> 03:24:44,595
service that was running on his 
computer that spun to our server

1373
03:24:45,113 --> 03:24:48,757
with paint blob events that 
enabled him to do this.  So he

1374
03:24:48,758 --> 03:24:53,193
was rendering on a rendering 
server, because we all like

1375
03:24:53,708 --> 03:24:59,429
rendering servers, right? 
    But, we made it harder for

1376
03:24:59,828 --> 03:25:06,815
him.  We just increased the rate
limiting of it, and added some

1377
03:25:09,079 --> 03:25:12,787
extra throttling without 
degrading the experience of the

1378
03:25:13,024 --> 03:25:17,940
normal, non-spamming user.  And 
this fight was ongoing

1379
03:25:18,700 --> 03:25:25,243
throughout the duration of the 
display.  He also was able to

1380
03:25:25,756 --> 03:25:27,756
avoid, because the

1381
03:25:29,419 --> 03:25:32,528
paint leaks. 
If you draw something, it won't

1382
03:25:32,679 --> 03:25:39,284
stay there forever, because it 
gets -- the paint leaks.

1383
03:25:39,285 --> 03:25:42,567
Somebody else paints over it.  
He added the skewing factor he

1384
03:25:42,978 --> 03:25:48,721
could tune to his tastes to be 
able to create very straight

1385
03:25:56,599 --> 03:25:59,930
images.  Then we added random 
noise to it to decrease the

1386
03:26:03,588 --> 03:26:06,788
resolution of what this hacker 
was able to draw.  And this is

1387
03:26:06,789 --> 03:26:14,229
still in the code.  You see it 
if you press the -- if you splat

1388
03:26:14,541 --> 03:26:20,420
paint, you can see that it -- 
   >> A receptor.

1389
03:26:20,421 --> 03:26:22,503
>> It doesn't come exactly in 
the center of where you

1390
03:26:27,783 --> 03:26:30,578
clicked.
And it's totally on concept,

1391
03:26:31,204 --> 03:26:35,322
because splatting paint with 
some paint blob is an unprecise

1392
03:26:35,550 --> 03:26:37,680
art.  It's just part of the

1393
03:26:42,111 --> 03:26:44,702
concept.  
   >> If you spend some time in

1394
03:26:44,828 --> 03:26:47,578
Iceland, you quickly learn that 
the weather here is quite

1395
03:26:48,929 --> 03:26:52,814
unpredictable.  When we did this
the first time in 2016, there

1396
03:26:52,815 --> 03:26:56,417
was basically a crazy storm 
throughout the whole time it was

1397
03:26:56,779 --> 03:27:00,081
up.  And that was a great way to
show off the feature that we

1398
03:27:00,656 --> 03:27:06,457
were using wind force and wind 
direction to render.  So we just

1399
03:27:06,750 --> 03:27:11,065
looked on the bright side.  
There were a

1400
03:27:14,772 --> 03:27:18,849
-- were not a lot of people 
outside trying it out, mostly

1401
03:27:19,248 --> 03:27:22,463
inside.  The next time, the 
weather was way better.

1402
03:27:22,464 --> 03:27:24,464
Nice weather and almost no wind

1403
03:27:29,228 --> 03:27:33,942
at all.  We were somewhere in 
our calculations, we were

1404
03:27:34,110 --> 03:27:39,964
dividing by zero.  For the first
time this happened, we were

1405
03:27:40,239 --> 03:27:43,705
going to be on live television, 
and this happened like five

1406
03:27:43,916 --> 03:27:47,728
minutes before that happened.  
And as you can see in this

1407
03:27:48,021 --> 03:27:52,706
picture, here's the mayor.  
Loads of wind.  You can see his

1408
03:27:52,972 --> 03:28:00,391
hair.  It's crazy.  In 2017, 
this is a frozen server with no

1409
03:28:01,048 --> 03:28:05,328
wind and we are somewhere in the
back having a panic attack.  We

1410
03:28:05,994 --> 03:28:08,725
somehow got through the 
interview demonstrating how it

1411
03:28:08,726 --> 03:28:11,663
worked without it actually 
working at all.  Nobody seemed

1412
03:28:12,091 --> 03:28:14,091
to notice, which was a pretty

1413
03:28:18,549 --> 03:28:21,362
good thing.  
   >> We learned a few lessons

1414
03:28:21,363 --> 03:28:23,363
through the whole process.  
First being that we

1415
03:28:29,025 --> 03:28:33,561
should avoid any ribbon cutting 
ceremonies, especially when it's

1416
03:28:33,715 --> 03:28:37,789
on live television.  Secondly, 
you should always allow for the

1417
03:28:38,177 --> 03:28:40,974
weather, even when you're 
writing code, even if it has

1418
03:28:41,390 --> 03:28:44,850
nothing to do with weather.  You
should do it, especially here in

1419
03:28:45,268 --> 03:28:47,350
Iceland.  
   >> And it's always fun when

1420
03:28:47,813 --> 03:28:54,452
your work is worth hacking.  At 
least when it's not done

1421
03:28:54,597 --> 03:29:01,036
maliciously, and it's 
entertaining.  This piece

1422
03:29:01,390 --> 03:29:05,902
revolves around the concept of 
vandalism, and that everybody

1423
03:29:05,903 --> 03:29:10,091
gets their say.  Everybody can 
participate.  So programmers

1424
03:29:10,301 --> 03:29:15,129
with the programming skills, 
they can, of course,

1425
03:29:15,566 --> 03:29:19,375
participate, but if you intend 
to do so, please behave

1426
03:29:19,538 --> 03:29:21,538
yourselves.  We don't have the 
money to

1427
03:29:28,322 --> 03:29:32,601
fight you.  Thank you so much 
for listening.  And the piece is

1428
03:29:35,051 --> 03:29:37,051
accessible at

1429
03:29:40,520 --> 03:29:47,236
point.jsconf.is.  Or just 
paint.is.  It's been a pleasure

1430
03:29:47,607 --> 03:29:51,355
talking here.  We would like to 
know if any of you had any

1431
03:29:51,704 --> 03:29:53,704
questions? We are happy

1432
03:30:10,958 --> 03:30:12,877
Inaudible Question ].
    Yeah?  to answer.

1433
03:30:12,878 --> 03:30:14,878
You have a question there? [
    The insights of how many

1434
03:30:15,260 --> 03:30:19,245
users and how many users at the 
same time have used this? The

1435
03:30:19,246 --> 03:30:26,923
night when it went live on 
reddit, we got like 7,000 hits

1436
03:30:26,924 --> 03:30:29,817
in a certain period of time.  
And that was after we set up the

1437
03:30:30,190 --> 03:30:35,336
live streaming cam.  So even if 
you were abroad, you could splat

1438
03:30:35,499 --> 03:30:37,499
paint and see a live stream of 
it actually

1439
03:30:44,672 --> 03:30:50,091
happening.  That was not -- it 
was a pretty even spike    >>

1440
03:30:50,092 --> 03:30:54,390
And the log file from the server
was around 300mb, if that tells

1441
03:31:01,064 --> 03:31:03,064
you anything.  Anymore

1442
03:31:05,619 --> 03:31:08,038
questions? 
   >> Oh yeah.  Uh-huh.

1443
03:31:13,119 --> 03:31:16,129
[ Inaudible Question ].
   >> Yeah.  We did one, a

1444
03:31:16,347 --> 03:31:23,063
couple of weeks ago, which we 
told you about briefly.  It's --

1445
03:31:23,969 --> 03:31:30,714
we connected a heart rate sensor
to heart animation on the front

1446
03:31:30,715 --> 03:31:33,102
of Harpa, so you could go

1447
03:31:37,235 --> 03:31:41,523
connect to the sensor that could
connect to your heart rate, and

1448
03:31:41,524 --> 03:31:46,142
it blended nicely on the light 
facade.

1449
03:31:46,143 --> 03:31:51,064
>> And we allowed for zero, but 
no one had zero heart

1450
03:31:58,154 --> 03:32:05,303
[ Inaudible Question ]
   >> Sorry?

1451
03:32:05,304 --> 03:32:09,360
>> It was taken down because the
hotel manager thought we were

1452
03:32:09,361 --> 03:32:12,728
spying on some guests in the 
hotel.  And our friend needed

1453
03:32:12,729 --> 03:32:18,818
his phone back as well.  
[ Laughter ]

1454
03:32:18,819 --> 03:32:20,819
>> Poor guy. 
   >> We'll take care of it.

1455
03:32:26,083 --> 03:32:28,083
>> Just ask away, if you have
any questions.

1456
03:32:34,109 --> 03:32:39,738
>> What is the time-out? Two 
seconds? Four seconds? Eight

1457
03:32:44,257 --> 03:32:47,566
seconds? A silly TCP joke.  
Sorry.  Thank you so much for

1458
03:32:47,712 --> 03:32:49,712
listening.

1459
03:32:56,784 --> 03:32:58,085
[ Applause ]
   >> Thank you.  I think their

1460
03:32:58,086 --> 03:33:02,974
talk is a perfect segue into our
next talk.  The next talk talks

1461
03:33:03,244 --> 03:33:10,221
about security and how to, you 
know, protect your web apps.  So

1462
03:33:11,460 --> 03:33:17,646
our next talk will be Dominik.  
If you will come on stage so we

1463
03:33:17,647 --> 03:33:24,924
can set up.  Dominik is a 
developer evangelist in Berlin.

1464
03:33:25,519 --> 03:33:29,585
He's passionate about 
JavaScript, hack-a-thons,

1465
03:33:29,942 --> 03:33:33,643
teaching, and also good whiskey.
You'll usually find him speaking

1466
03:33:33,850 --> 03:33:37,475
at conferences like this or 
meet-ups or mentoring in

1467
03:33:38,993 --> 03:33:40,993
hack-a-thons.  He's going to be

1468
03:33:45,346 --> 03:33:53,322
talking to us about about XSS, 
CSRF, CSP, JWT.  The title of

1469
03:33:53,495 --> 03:33:58,472
the talk says what the fuck.  I 
don't know.  So if he can come

1470
03:33:58,715 --> 03:34:00,715
up on stage to

1471
03:34:13,969 --> 03:34:15,969
set up.  There he is.  I think I
see him.

1472
03:34:20,769 --> 03:34:22,769
set

1473
03:35:06,915 --> 03:35:11,752
>> I'm going to spit out some
random Icelandic trivia that

1474
03:35:11,753 --> 03:35:15,961
I've learned from looking up 
random Icelandic facts.  I've

1475
03:35:15,962 --> 03:35:19,055
never been to Iceland, and this 
is my first time, you know,

1476
03:35:19,344 --> 03:35:21,344
here,

1477
03:35:23,417 --> 03:35:27,139
obviously.  One of them is 
apparently there's an Icelandic

1478
03:35:27,431 --> 03:35:30,845
naming committee that decides 
whether your child's name or

1479
03:35:31,081 --> 03:35:34,834
even your name is a valid name. 
So I don't think my name is

1480
03:35:34,835 --> 03:35:43,356
valid at all in Iceland.  So I 
think I'm an illyy

1481
03:35:44,925 --> 03:35:49,558
-- illegal named person here.  
No one tell the Icelandic naming

1482
03:35:49,713 --> 03:35:51,713
commission

1483
03:36:48,649 --> 03:36:50,649
that.  
    So update.  Apparently we're

1484
03:36:50,813 --> 03:36:56,204
running pretty early.  So we can
get a 12-minute break and just

1485
03:36:56,533 --> 03:36:58,967
come back here in 12 minutes so 
we can continue

1486
03:37:07,313 --> 03:37:07,483
on time.

1487
03:37:17,437 --> 03:37:19,437
Live Captions by:
@smiley845 with @whitecoatcapxg.

1488
03:47:45,474 --> 03:47:47,633
>> Okay.  I think we're finally 
ready for the next talk.

1489
03:47:47,634 --> 03:47:51,690
The live stream must be really 
confused.

1490
03:47:54,872 --> 03:47:58,126
Dominik is a programming 
evangelist.  You will find him

1491
03:47:58,127 --> 03:48:02,225
normally speaking at conferences
like this, meet-ups, or

1492
03:48:02,226 --> 03:48:06,445
mentoring in hack-a-thons.  He 
will be talking to us about all

1493
03:48:06,446 --> 03:48:09,823
of these abbreviations up here, 
and how to protect yourself and

1494
03:48:09,824 --> 03:48:17,068
your users from the new 
generation of bobby tables.  So

1495
03:48:17,069 --> 03:48:21,502
give it up for Dominik.  
[ Applause ]

1496
03:48:21,503 --> 03:48:25,325
>> Welcome everyone.  Is this 
mic on? Can you hear me? Thumbs

1497
03:48:32,307 --> 03:48:36,623
up? Awesome.  I think I have the
most click-baity title.  I will

1498
03:48:36,830 --> 03:48:39,471
not read all of the 
abbreviations, because that

1499
03:48:39,633 --> 03:48:42,980
wastes half of the time.  I 
would like to give you a quick

1500
03:48:42,981 --> 03:48:45,801
introduction to web security.  
And this is not going to be

1501
03:48:46,153 --> 03:48:49,453
making you all web security 
experts.  But one thing I that

1502
03:48:49,695 --> 03:48:53,837
want to make sure is all of the 
topics that I highlight are

1503
03:48:54,516 --> 03:48:58,184
topics that I think every web 
developer should be aware of

1504
03:48:58,638 --> 03:49:02,573
when they build an application. 
    Before we start, I would

1505
03:49:02,574 --> 03:49:06,892
like to quickly introduce 
myself.  I'm a developer

1506
03:49:06,893 --> 03:49:12,444
evangelist for a company called 
twilio.  We do APIs to send and

1507
03:49:13,007 --> 03:49:15,370
receive text messages and other 
things around communications.  I

1508
03:49:15,728 --> 03:49:18,906
live in Berlin.  But there's one
more thing you should know about

1509
03:49:19,500 --> 03:49:22,921
me.  I can drop this jacket now,
because it's getting really

1510
03:49:23,769 --> 03:49:26,798
warm.  And this is where the 
talk gets awkward.  All right.

1511
03:49:27,103 --> 03:49:29,103
So I'm a member of

1512
03:49:31,259 --> 03:49:35,388
a group called woed

1513
03:49:38,773 --> 03:49:42,149
onsie.js.  I think there is a 
unicorn running around.  But,

1514
03:49:42,150 --> 03:49:46,615
you know, like, today, we have 
so many social networks and

1515
03:49:46,616 --> 03:49:50,259
communication channels, but 
there isn't really one for

1516
03:49:51,553 --> 03:49:54,896
onsie-loving developers.  So 
being a developer myself, I did

1517
03:49:54,897 --> 03:49:59,565
what every developer does when 
something doesn't exist.  So I

1518
03:50:00,981 --> 03:50:06,832
built the future great social 
network called onesie life.  I'm

1519
03:50:07,281 --> 03:50:10,902
not sure why I don't have high 
traffic yet, but it will come.

1520
03:50:11,119 --> 03:50:13,984
And like being a developer, 
I made sure this is as secure

1521
03:50:17,010 --> 03:50:21,393
as possible.  And doesn't have 
any vulnerabilities, especially

1522
03:50:21,394 --> 03:50:24,581
nothing that can be hacked with 
a banana.  You know I thought of

1523
03:50:25,063 --> 03:50:28,804
everything.  It uses HTTPS, and 
I don't have to pay a dime for

1524
03:50:28,958 --> 03:50:35,579
that.  It uses HSPS, which just 
makes sure there's no

1525
03:50:35,733 --> 03:50:39,138
downgrading of the traffic.  
This is typically what blocks

1526
03:50:39,139 --> 03:50:44,435
you from going to Google.com 
when there's a public Wi-Fi with

1527
03:50:44,862 --> 03:50:46,862
a captive

1528
03:50:49,206 --> 03:50:54,019
model.  I don't allow mixed 
content.  So no HTTP content on

1529
03:50:54,020 --> 03:50:59,805
a website that is certified 
HTTPS.  I sanitize the HTML.  So

1530
03:51:00,334 --> 03:51:03,628
I allow people to put a mark 
down, but I will make sure to

1531
03:51:03,629 --> 03:51:07,403
send it before it goes to the 
page.  And there is no room for

1532
03:51:07,897 --> 03:51:11,711
SQL injections, because I'm not 
using a real database.

1533
03:51:11,712 --> 03:51:16,332
So there's no way to have the 
injections.  And I'm not talking

1534
03:51:18,199 --> 03:51:22,355
about NoSQL databases, but I'm 
literally using a plain start,

1535
03:51:22,550 --> 03:51:27,648
because I don't believe this 
will scale.  But turns out that

1536
03:51:28,042 --> 03:51:29,982
developing secure web 
applications isn't as secure as

1537
03:51:29,983 --> 03:51:34,880
I thought.  So I contacted my 
buddy, Bob Allison.  And he took

1538
03:51:34,881 --> 03:51:40,388
a stab at the application and 
figured out a bunch of security

1539
03:51:40,551 --> 03:51:43,282
vulnerabilities that I would 
like to share with you.  Now

1540
03:51:43,462 --> 03:51:46,147
it's really warm.  So I will 
take this off.

1541
03:51:46,148 --> 03:51:48,148
All right.  So, if we go

1542
03:52:06,380 --> 03:52:10,570
to this page.  I will set an 
HTTP cookie to maintain the

1543
03:52:10,729 --> 03:52:13,138
session. 
It's just a way that allows you

1544
03:52:13,139 --> 03:52:18,676
to to maintain session state 
throughout multiple sessions by

1545
03:52:18,677 --> 03:52:25,107
setting a value either by HTTP 
headers or via JavaScript.  If

1546
03:52:25,292 --> 03:52:27,292
we go into the console here, we

1547
03:52:30,170 --> 03:52:33,999
can access that.  I have one 
that is called off token.  This

1548
03:52:34,263 --> 03:52:39,223
is what is called a JWT or JSON

1549
03:52:43,246 --> 03:52:46,781
web token.  We can see that it 
has three different parts, a

1550
03:52:47,176 --> 03:52:50,397
header, a red part, a purple 
part which is like the payload,

1551
03:52:50,398 --> 03:52:53,690
and then it has a signature.  
That's generated by an algorithm

1552
03:52:54,016 --> 03:52:57,134
that is specified in the header 
using a secret.  If we look

1553
03:52:57,569 --> 03:53:01,695
here, it says invalid signature,
because I was smart enough not

1554
03:53:02,887 --> 03:53:07,720
to use "secret" as my secret, 
but there is a vulnerability in

1555
03:53:08,925 --> 03:53:10,925
my app around this that

1556
03:53:12,914 --> 03:53:15,031
we can exploit.  There are 
different algorithms that you

1557
03:53:15,032 --> 03:53:20,574
can use, and one of them that is
mandatory in the spec is none.

1558
03:53:20,847 --> 03:53:22,847
Disregard the

1559
03:53:28,208 --> 03:53:31,170
signature.  If we do this, and 
let's have fun.  We switched the

1560
03:53:31,369 --> 03:53:36,609
role to Admin.  And then I copy 
this part.  And this is just

1561
03:53:36,610 --> 03:53:40,886
basic code.  This is just plain 
data.  Don't think this is

1562
03:53:41,177 --> 03:53:44,687
secure or something.  And I will
set this as an off

1563
03:53:49,708 --> 03:53:53,160
token.  We can refresh the page,
and we will see that we are now

1564
03:53:53,161 --> 03:53:55,161
in Admin mode.  And that is 
because I'm

1565
03:53:58,648 --> 03:54:03,519
taking the JWT as a single 
source of truth.  If I say I'm

1566
03:54:03,900 --> 03:54:06,799
an Admin, I am.  That in 
combination with the algorithm

1567
03:54:06,967 --> 03:54:10,512
that is none, we can kind of 
just switch anything.  And I

1568
03:54:10,694 --> 03:54:14,258
wouldn't have had to log in in 
the first place.  I could have

1569
03:54:14,646 --> 03:54:17,778
generated this with any user 
name and sign in as anyone.  How

1570
03:54:17,779 --> 03:54:23,128
can we protect ourselves from 
that? You can set cookies via

1571
03:54:23,350 --> 03:54:30,341
JavaScript or HTTP headers.  And
you can declare cookies as HTTP

1572
03:54:30,342 --> 03:54:36,593
only.  They will still be sent 
by the browser, but you will not

1573
03:54:37,013 --> 03:54:43,347
be able to access and manipulate
them.  And an assigned cookie

1574
03:54:44,040 --> 03:54:47,834
means I could not manipulate 
without knowing the token and

1575
03:54:48,189 --> 03:54:51,212
that it's secured.  But there's 
another thing I should have

1576
03:54:51,632 --> 03:54:53,632
done, and that

1577
03:54:55,807 --> 03:55:00,366
revolves around jaws.  I'm using
the library on node, but I'm

1578
03:55:00,367 --> 03:55:04,006
using an old version, and that 
one has two flaws that the newer

1579
03:55:04,188 --> 03:55:06,643
one fixes. 
On the one hand, the library

1580
03:55:07,003 --> 03:55:10,509
should provide you with a way to
white list algorithms.  In this

1581
03:55:10,657 --> 03:55:14,987
case, I'm in the secure version 
of this, I'm saying that I only

1582
03:55:15,824 --> 03:55:19,881
allow HS256 tokens versus 
nothing else.  And then the

1583
03:55:19,997 --> 03:55:23,410
other thing is in this library, 
for example, if the secret is

1584
03:55:23,411 --> 03:55:28,027
set to something that is not 
null, the library will not

1585
03:55:28,340 --> 03:55:31,698
accept none as an algorithm.  
But that's only in the newer

1586
03:55:31,902 --> 03:55:35,476
libraries.  So the bottom line 
here is stay up to date.  You

1587
03:55:35,678 --> 03:55:41,834
don't want to be the next 
Equifax.  There was an older

1588
03:55:42,074 --> 03:55:45,206
version of an implementation 
that was known to be vulnerable

1589
03:55:45,437 --> 03:55:48,652
and them not getting around to 
updating it.  You don't want to

1590
03:55:48,653 --> 03:55:53,159
be in the news far that.  
    This is a social network, so

1591
03:55:53,510 --> 03:55:56,620
we can post stuff.  Let me jump 
back here and post something.

1592
03:55:56,621 --> 03:56:03,941
This is marked, so I can write 
something like hi, JSConf

1593
03:56:04,076 --> 03:56:07,385
Iceland.  And I will post this 
and look at the traffic.  We

1594
03:56:10,925 --> 03:56:16,504
will see that -- if I make this 
bigger, there's an HTTP post why

1595
03:56:18,107 --> 03:56:23,992
here that sets the token along 
and sends the form data in the

1596
03:56:24,181 --> 03:56:27,294
bottom.  This is nice, because 
it's really easy to implement.

1597
03:56:28,396 --> 03:56:33,027
I'm literally submitting a form 
asynchronously.  But the

1598
03:56:33,410 --> 03:56:37,838
combination of form and cookies 
is also something that can cause

1599
03:56:38,015 --> 03:56:42,126
a request forgery attack by 
hackers.  To give you an idea of

1600
03:56:42,266 --> 03:56:49,478
how this works and what this is,
this is -- sometimes it's

1601
03:56:49,479 --> 03:56:58,728
written as XXRF or CSRF, but 
typically pronounced "c-surf."

1602
03:56:58,729 --> 03:57:02,632
If you get back to the page and 
refresh here, you see that the

1603
03:57:02,822 --> 03:57:06,580
attacker was able to post on my 
behalf on the page.  The reason

1604
03:57:06,581 --> 03:57:10,795
why this works is the browser is
super eager to send all of these

1605
03:57:10,796 --> 03:57:14,853
cookies along on every request. 
If we look at the code that

1606
03:57:15,016 --> 03:57:20,874
hacked us here, it, on body 
unload, it will submit the form

1607
03:57:21,036 --> 03:57:24,171
that we have here.  In this case
it is visible, but it could have

1608
03:57:24,326 --> 03:57:29,775
been hidden.  There is an input 
tag with a message we want to

1609
03:57:29,947 --> 03:57:33,143
send.  It could be hidden.  It 
doesn't have to be visible.  And

1610
03:57:33,454 --> 03:57:36,670
then hit submit.  This is the 
danger about this, because the

1611
03:57:37,004 --> 03:57:39,913
browser is super eager to send 
this.  So let's talk about how

1612
03:57:40,057 --> 03:57:42,057
we can

1613
03:57:44,667 --> 03:57:48,905
fix this.  Let me find my slides
again.  Apparently it was hacked

1614
03:57:49,325 --> 03:57:52,738
twice by this application.  
Let's navigate and talk about

1615
03:57:52,739 --> 03:57:57,737
what happened here.  
When I clicked on the link here,

1616
03:57:58,022 --> 03:58:03,556
I'm using a target blank here.  
The attacker's page can access

1617
03:58:03,557 --> 03:58:08,836
my page window by using 
window.opener.application, and

1618
03:58:08,837 --> 03:58:11,777
rewrite that application.  In 
that case, the attacker page was

1619
03:58:12,376 --> 03:58:16,172
navigating me to another 
harmless page, but this could

1620
03:58:16,173 --> 03:58:22,560
have just as well been a 
redirection to a phishing page

1621
03:58:23,574 --> 03:58:30,635
that looks like your page.  
Someone could put in a page

1622
03:58:31,478 --> 03:58:35,445
filling that redirects the 
original browser to a phishing

1623
03:58:35,601 --> 03:58:38,643
page.  Luckily, protecting 
yourself from that is pretty

1624
03:58:38,894 --> 03:58:46,451
straightforward.  You want to 
use the rel attribute and set it

1625
03:58:46,680 --> 03:58:50,447
to no opener and no defer.  You 
don't want to provide access to

1626
03:58:51,205 --> 03:58:55,300
window.opener, and there is no 
refer because some browsers

1627
03:58:56,110 --> 03:59:03,790
don't support no opener.  Namely
IE and older versions of Edge.

1628
03:59:04,215 --> 03:59:10,339
You want to use the no refer as 
well.  Plus there are some

1629
03:59:10,340 --> 03:59:14,273
JavaScript scripts that allow 
you to circumvent this as well.

1630
03:59:14,581 --> 03:59:21,244
To get back to the CSRF 
attacks, the approach is

1631
03:59:21,999 --> 03:59:26,723
relatively straight-forward as 
well.  The basic idea is that

1632
03:59:26,935 --> 03:59:34,891
you will generate a new cookie 
called

1633
03:59:37,822 --> 03:59:41,166
_CSRF.  You pass it as a cookie 
and embed it into the page that

1634
03:59:41,167 --> 03:59:45,570
is supposed to have form 
submission and a hidden input

1635
03:59:46,081 --> 03:59:50,290
field.  When you submit the post
request, in this case, you will

1636
03:59:50,291 --> 03:59:54,539
check if the value in the cookie
equals the same value that is

1637
03:59:54,540 --> 03:59:57,824
either passed in the request 
body and the request query

1638
03:59:57,825 --> 03:59:59,825
parameters or in one of

1639
04:00:02,367 --> 04:00:04,367
the headers like the ones in the

1640
04:00:07,161 --> 04:00:11,379
example which are the wins that 
the CSRF library checks for.  In

1641
04:00:11,380 --> 04:00:15,826
that case, that works.  If it's 
not the case, it's likely

1642
04:00:16,117 --> 04:00:19,952
someone will perform a CSRF 
attack against you.  They are

1643
04:00:20,185 --> 04:00:24,509
not able to read the cookie 
since the browser auto-submits

1644
04:00:24,665 --> 04:00:28,603
this, so they will not be able 
to pass this as a header.

1645
04:00:30,456 --> 04:00:35,406
Let's talk about Sammy.  The 
reason is, to first give you

1646
04:00:35,751 --> 04:00:38,283
background about little bobby 
tables, if you're not familiar

1647
04:00:38,742 --> 04:00:44,359
with that, it comes from this 
comic, which is a joke about

1648
04:00:45,587 --> 04:00:49,810
squill injections who named 
their family like a squill

1649
04:00:51,067 --> 04:00:54,955
injections, and the principle 
being Mac, because they lost the

1650
04:00:55,149 --> 04:00:58,315
student records because they 
were not sanitizing the input.

1651
04:00:58,500 --> 04:01:01,865
Does anyone know what this 
source code is from? I would be

1652
04:01:02,507 --> 04:01:05,962
really impressed if someone 
knows this by heart.  This is

1653
04:01:06,328 --> 04:01:11,662
the myspace or Sammy worm.  Some
of you might be familiar with

1654
04:01:11,855 --> 04:01:18,501
this.  This was an attack from 
2005 on Myspace, which would

1655
04:01:19,200 --> 04:01:25,078
repost this code, add Sammy as 
your friend and post that Sammy

1656
04:01:25,681 --> 04:01:30,095
is awesome.  That's also how 
they caught him.  If the access

1657
04:01:31,405 --> 04:01:36,443
code points at your Myspace 
profile, that's not smart idea.

1658
04:01:36,776 --> 04:01:40,778
The cool thing about this attack
is it shows a couple of things

1659
04:01:41,141 --> 04:01:44,777
that people used to circumvent

1660
04:01:50,501 --> 04:01:53,817
the protection.  One thing they 
said is they don't allow script

1661
04:01:53,961 --> 04:01:58,578
tags, didn't allow JavaScript 
call-in in URLs and stuff, but

1662
04:01:59,059 --> 04:02:01,059
they did allow in-line

1663
04:02:05,598 --> 04:02:10,702
CSS.  And because he wasn't 
allowed to use quotes, he took

1664
04:02:10,703 --> 04:02:16,631
all of his code, wrapped it into
an evaland put it into another

1665
04:02:16,632 --> 04:02:18,632
HTML attribute, and that would 
be

1666
04:02:21,926 --> 04:02:24,522
evaluated.  
They have lists of words,

1667
04:02:29,806 --> 04:02:33,728
like this.  
    But, what Sammy just did, he

1668
04:02:33,729 --> 04:02:37,908
turned this into strings, split 
them by a plus, and recon

1669
04:02:45,967 --> 04:02:49,067
catinated them.  And then 
there's the other thing.  You

1670
04:02:49,262 --> 04:02:52,005
say I could block eval, and 
that's fine.  Those are all ways

1671
04:02:52,902 --> 04:02:55,753
to evaluate code.  The last one 
is from a project that I'm not

1672
04:02:56,006 --> 04:02:59,544
sure if I can name the name, 
because I'm not sure if it

1673
04:03:00,153 --> 04:03:05,237
violates a code of conduct, but 
talk to Martin, and he can tell

1674
04:03:05,448 --> 04:03:09,117
you the name.  Or I can tell you
the name afterwards.  But the

1675
04:03:09,118 --> 04:03:12,393
bottom line is there are a bunch
of ways to write the same code

1676
04:03:13,086 --> 04:03:16,483
in JavaScript.  You can't 
blacklist certain words, because

1677
04:03:16,634 --> 04:03:23,613
that doesn't help you.  
    So blocking XSS is not

1678
04:03:24,057 --> 04:03:28,488
trivial.  And I have a demo for 
that as well.  I told you I'm

1679
04:03:29,201 --> 04:03:32,741
use mark down here, and a 
library called marked.  If

1680
04:03:32,929 --> 04:03:36,017
you're a few versions back, but 
not really old, even though it

1681
04:03:36,228 --> 04:03:39,691
has a function that allows you 
to sanitize stuff.  So we can do

1682
04:03:39,692 --> 04:03:43,286
stuff like alert 1, and this

1683
04:03:46,366 --> 04:03:49,431
will not work.  There is a 
security vulnerability in here.

1684
04:03:49,587 --> 04:03:53,943
We can create links, right? I 
can do something like "click

1685
04:03:54,476 --> 04:04:04,430
me." And in here, if we would 
write JavaScript:alert hello

1686
04:04:06,175 --> 04:04:09,851
JSConf.  This doesn't work 
directly because the sanitizer

1687
04:04:10,163 --> 04:04:14,534
is smarter than that.  Shout out
to Guy from Sneak who actually

1688
04:04:14,833 --> 04:04:17,653
showed this to me.  Let's do 
some fun stuff with

1689
04:04:22,522 --> 04:04:24,822
encoding.  
This here is literally the same

1690
04:04:25,511 --> 04:04:28,473
as a closing parentheses.  And a
colon is

1691
04:04:31,505 --> 04:04:36,127
the same as this.  We don't have
the closing pieces anymore, but

1692
04:04:36,128 --> 04:04:40,098
we're getting there.  Now we can
use a quirkiness in the browser,

1693
04:04:40,099 --> 04:04:46,239
and actually write this here.  
And what this will do, let's

1694
04:04:46,240 --> 04:04:49,068
first try this.  It works.  And 
the reason why this works is

1695
04:04:49,069 --> 04:04:54,561
that the browser -- so first of 
all, the HTML sanitizer will see

1696
04:04:55,087 --> 04:04:57,201
this, and it doesn't see

1697
04:05:05,025 --> 04:05:10,896
JavaScript:
JavaScript: But I think you

1698
04:05:10,897 --> 04:05:15,210
meant a semi colon, so I'll be a
good guy and insert this.  So

1699
04:05:15,211 --> 04:05:19,331
this is valid, and it doesn't 
complain about that, and we can

1700
04:05:19,508 --> 04:05:21,508
do anything afterwards.  We've

1701
04:05:24,293 --> 04:05:28,350
seen this work.  The bottom line
here is encoding can be

1702
04:05:28,624 --> 04:05:31,790
dangerous.  Don't trust any code
that your user

1703
04:05:36,702 --> 04:05:41,365
can modify.  
Don't trust CSS.  And Greg just

1704
04:05:41,694 --> 04:05:45,439
tweeted about this two days ago.
Really don't trust it.  There's

1705
04:05:45,602 --> 04:05:50,061
a bunch of stuff you can do, and
I highly recommend you check out

1706
04:05:50,204 --> 04:05:54,919
the blog post in this tweet.  
    Let's talk about another

1707
04:05:56,331 --> 04:06:01,661
thing, and that's JSON with 
padding.  It's being used less

1708
04:06:02,264 --> 04:06:08,612
these days.  But basically it's 
a way to circumvent samor

1709
04:06:08,613 --> 04:06:13,247
general policy.  The way it 
works is you define a global

1710
04:06:13,248 --> 04:06:20,708
function.  If you just Jquery's 
JSON p method, but it's a call

1711
04:06:20,839 --> 04:06:24,965
function that has to be global, 
and you expect the data to be

1712
04:06:25,173 --> 04:06:31,020
passed into the code.  And you 
inject a script tag with the J

1713
04:06:32,401 --> 04:06:35,443
son P URL.  You define the name

1714
04:06:40,156 --> 04:06:45,106
of the function in this case, 
it's called got post.  It will

1715
04:06:45,495 --> 04:06:48,411
take the name and wrap the data 
into a function called with that

1716
04:06:48,803 --> 04:06:55,267
name.  If you use that, but you 
write poor JSONP, now this is

1717
04:06:55,910 --> 04:07:01,440
getting fun.  My JSONP end point
does not verify what I pass as a

1718
04:07:02,187 --> 04:07:05,419
call-back, and that means that 
we can -- I'm in the wrong

1719
04:07:05,420 --> 04:07:08,969
place.  We can generate 
arbitrary JavaScript here, and

1720
04:07:09,360 --> 04:07:12,801
this gets really fun.  I'm going
to first show it to you and then

1721
04:07:13,018 --> 04:07:17,806
explain what's going on.  This 
is a bit of a longer code

1722
04:07:17,930 --> 04:07:21,251
snippet, so I will copy this.  
So I'm going to press this and

1723
04:07:21,534 --> 04:07:25,076
click this button.  And nothing 
happens.  But if I refresh the

1724
04:07:25,286 --> 04:07:30,503
page, we get this.  And I can 
refresh as many times as I want.

1725
04:07:30,852 --> 04:07:36,774
It will stay like this.  The 
reason why this is happening, if

1726
04:07:36,979 --> 04:07:42,854
we go to application, I 
installed a service worker.  If

1727
04:07:43,033 --> 04:07:46,150
you don't know what service 
workers are, they're an API from

1728
04:07:46,364 --> 04:07:50,751
the browser that allows you to 
handle the network proxies so

1729
04:07:50,924 --> 04:07:54,513
that you can -- it's made for 
things like offline available

1730
04:07:54,732 --> 04:08:00,606
apps so you can cache your web
website and your resources and

1731
04:08:01,172 --> 04:08:03,951
handle which ones you want to 
cache and which ones you don't.

1732
04:08:04,545 --> 04:08:08,651
It can do pretty much anything 
because it can intercept the

1733
04:08:08,783 --> 04:08:12,743
network requests.  The browsers 
are smart enough to be sure a

1734
04:08:13,268 --> 04:08:16,219
service worker can only be 
installed from your domain.  But

1735
04:08:16,563 --> 04:08:23,158
if your domain has a vulnerable 
JSONP interaction, then you have

1736
04:08:23,282 --> 04:08:27,902
a problem like this.  We can see
the call-back parameter here is

1737
04:08:32,310 --> 04:08:37,567
really long.  We can see what's 
actually happening.  I'm

1738
04:08:38,507 --> 04:08:41,431
creating a service worker 
script.  And the data, I don't

1739
04:08:41,554 --> 04:08:46,707
care about.  I just commented.  
We just reply with a hack and a

1740
04:08:46,858 --> 04:08:50,024
script tag injected.  This is an
obvious attack, but you could do

1741
04:08:50,402 --> 04:08:54,069
it in a less obvious way as 
well.  You could actually fetch

1742
04:08:54,217 --> 04:08:57,755
the page, inject the script tag,
and send that to the user, and

1743
04:08:57,756 --> 04:09:02,357
the user will not recognize 
this.  Especially not a common

1744
04:09:03,115 --> 04:09:05,630
user with the dev tools to check
the service worker

1745
04:09:14,902 --> 04:09:18,282
install? Open that, and you will
see how many people actually

1746
04:09:18,283 --> 04:09:22,016
install service workers.  You 
have no idea what these service

1747
04:09:22,017 --> 04:09:25,829
workers do.  It's sort of a 
dangerous attack.

1748
04:09:25,830 --> 04:09:29,028
Let's actually remove this or I 
will forget about it.

1749
04:09:33,217 --> 04:09:36,844
Unregister.  If we reload this 
now, and you don't want to

1750
04:09:37,028 --> 04:09:40,798
explain your customers, go to 
your browser and click on

1751
04:09:41,181 --> 04:09:44,731
application in the dev tools and
click on unregister on this

1752
04:09:45,174 --> 04:09:49,281
thing called service worker.  
    So far we've seen different

1753
04:09:49,405 --> 04:09:53,692
attacks, and we should fix all 
of these and also all the other

1754
04:09:53,837 --> 04:09:57,585
attacks that we have in there.  
There is a new super hero in

1755
04:09:57,771 --> 04:10:01,955
town that allows you to protect 
yourself against some of these,

1756
04:10:02,835 --> 04:10:07,413
and that's called content 
security Policy, or CSP.  All

1757
04:10:07,766 --> 04:10:12,012
that I'm doing is injecting an 
HTTP header.  We can see if I

1758
04:10:12,310 --> 04:10:14,844
click on any of these, and 
refresh, nothing

1759
04:10:24,097 --> 04:10:29,657
happens.  23  -- if we open 
this, we will see a bunch of

1760
04:10:29,785 --> 04:10:35,902
errors.  What does that actually
mean? Content security policy is

1761
04:10:36,092 --> 04:10:40,812
just an HTTP header that you can
define rules that the browser

1762
04:10:40,813 --> 04:10:44,237
should play by for your 
resources.  These can be things

1763
04:10:44,238 --> 04:10:50,874
like by default.  For scripts 
and styles, I only want the

1764
04:10:50,875 --> 04:10:53,993
things that have the following 
non-s.  This can't be hard coded

1765
04:10:54,162 --> 04:10:58,162
by the attacker.  
That means no more in line

1766
04:10:59,503 --> 04:11:03,924
scripts unless they have this 
HTML attribute, no in line

1767
04:11:04,080 --> 04:11:08,085
styles.  And that's why the 
attacks don't work.  And

1768
04:11:08,705 --> 04:11:14,359
blocking objects here, image 
source, I'm only specifying

1769
04:11:14,689 --> 04:11:20,248
self, and the user.  I only 
allow Google fonts.  I block all

1770
04:11:20,639 --> 04:11:25,447
mixed content, so no HTTP 
content on my page.  And I

1771
04:11:25,605 --> 04:11:30,450
specify a report URI, and it 
will be pinged with every

1772
04:11:30,612 --> 04:11:33,050
violation.  There are tools you 
can point this against.  You can

1773
04:11:33,206 --> 04:11:36,471
point this against any end point
on your server, and this will

1774
04:11:36,676 --> 04:11:39,876
report it.  There's a 
report-only flag, and that

1775
04:11:40,060 --> 04:11:42,724
allows you to say that you want 
to only get the information that

1776
04:11:43,075 --> 04:11:46,113
something has been violated, but
you don't block the actual

1777
04:11:46,288 --> 04:11:49,121
content.  This is great for 
transitioning into it,

1778
04:11:49,258 --> 04:11:52,079
especially if you want to test 
this first in a local

1779
04:11:58,010 --> 04:12:01,503
environment or something.  CSP 
should not be your security

1780
04:12:01,729 --> 04:12:05,912
strategy, it should be your 
safety net.  Writing of really

1781
04:12:06,829 --> 04:12:11,325
strong CSP is hard, and there's 
a great paper by Google about

1782
04:12:11,451 --> 04:12:19,725
this, like about the dangers 
about this.  You should still

1783
04:12:19,873 --> 04:12:26,461
care about the attacks.  
    A couple of other things

1784
04:12:26,903 --> 04:12:31,121
that you should look out for.  
You should disallow framing.

1785
04:12:31,424 --> 04:12:35,524
Most websites don't have a 
legitimate reason to be allowing

1786
04:12:36,033 --> 04:12:40,260
to be iframed, what an attacker 
can do is place your page with

1787
04:12:40,991 --> 04:12:45,245
an opacity of zero above their 
page and line up buttons so that

1788
04:12:45,369 --> 04:12:49,710
they -- user thinks they're 
interacting with their page, but

1789
04:12:50,218 --> 04:12:54,338
they're really interacting with 
your page.  And so this is what

1790
04:12:54,551 --> 04:12:59,112
people could use, for example, 
to, like, if you want to like a

1791
04:12:59,508 --> 04:13:01,508
page.

1792
04:13:03,448 --> 04:13:08,851
Facebook blocks iframing.
Don't show versions of front-end

1793
04:13:09,622 --> 04:13:13,517
libraries and servers.  There 
are packages that are useful to

1794
04:13:13,884 --> 04:13:18,195
develop things, but if you show 
a version number in your HTML

1795
04:13:18,373 --> 04:13:24,120
page or HTTP headers, this gives
an attacker the right idea of

1796
04:13:24,582 --> 04:13:29,234
what security vulnerabilities to
test out.  And you don't want to

1797
04:13:29,608 --> 04:13:31,608
make their job

1798
04:13:35,368 --> 04:13:39,596
easier.  And check for types of 
input because there can be NoSQL

1799
04:13:44,834 --> 04:13:46,590
injections.  
Don't just assume that it's a

1800
04:13:46,591 --> 04:13:49,915
string.  There are some partial 
libraries that will parse things

1801
04:13:50,117 --> 04:13:53,498
like objects as well.  If you do
that, the result is that you

1802
04:13:53,680 --> 04:13:57,212
could, for example, have a NoSQL
injection.

1803
04:13:57,213 --> 04:14:01,765
Other things? Consider security 
audits, especially if your code

1804
04:14:01,766 --> 04:14:05,705
base has never had a security 
audit.  If you don't have an

1805
04:14:05,706 --> 04:14:08,447
internal security expert, 
contract one.  Because there's

1806
04:14:08,448 --> 04:14:12,335
so many things that it's really 
hard to keep up with that this

1807
04:14:12,336 --> 04:14:15,605
is really helpful.  And you 
learn yourself a lot if you look

1808
04:14:15,733 --> 04:14:18,699
over their shoulder.  That's how
I learned most of the stuff is

1809
04:14:18,846 --> 04:14:22,288
when I had to go through a 
security audit with a feature.

1810
04:14:23,188 --> 04:14:26,002
And then stay up to date 
with versions.  You don't want

1811
04:14:26,767 --> 04:14:32,888
to be the next Equifax.  
Similarly, use a tool to detect

1812
04:14:34,152 --> 04:14:36,178
security vulnerabilities in your
dependencies.  You can write the

1813
04:14:36,395 --> 04:14:39,588
most secure code, but if your 
dependencies are vulnerable,

1814
04:14:40,639 --> 04:14:42,639
that defeats the

1815
04:14:43,795 --> 04:14:47,446
purpose.  So, sneak is one of 
them.  They provide patches if

1816
04:14:47,447 --> 04:14:49,745
they are too late.  So marked

1817
04:14:53,385 --> 04:14:55,385
fixed that

1818
04:15:00,170 --> 04:15:05,766
volley ne'er-- 
vulnerability.  But Snyk has a

1819
04:15:06,151 --> 04:15:08,635
patch.  And there are other 
tools that check for this as

1820
04:15:09,343 --> 04:15:12,484
well.  GitHub scans and tells 
you about vulnerabilities as

1821
04:15:12,656 --> 04:15:17,340
well.  
    So to wrap this up, use

1822
04:15:17,536 --> 04:15:26,009
signed only HTTP cookies.  Be 
skeptical of JWPs.  Use no

1823
04:15:26,444 --> 04:15:32,082
opener and no refer on your 
target lines.  You CSRF tokens.

1824
04:15:32,543 --> 04:15:40,135
It's easy to use.  Blocking SSX 
is not trivial.  If you have

1825
04:15:40,636 --> 04:15:45,321
user input or query parameters, 
think of these and know that

1826
04:15:45,449 --> 04:15:49,091
they can cause harm.  Be aware 
of encoding, because there are a

1827
04:15:49,498 --> 04:15:56,674
million ways to write the same 
thing.  Be careful of JSONP.  It

1828
04:15:57,064 --> 04:16:00,969
should only accept call 
characters.  Use CSP as a safety

1829
04:16:01,545 --> 04:16:04,697
net, and most importantly, stay 
up to date.  I put up the slides

1830
04:16:04,975 --> 04:16:08,235
here, and I will tweet the link 
in a second, so you can check

1831
04:16:08,425 --> 04:16:13,449
them out again.  Similarly, the 
source code of the website is on

1832
04:16:13,634 --> 04:16:18,848
this URL, including different 
files for every one of these

1833
04:16:19,040 --> 04:16:21,040
vulnerabilities that I showed 
you and a couple others in

1834
04:16:21,796 --> 04:16:24,326
there, including resources that 
are interesting about their

1835
04:16:25,091 --> 04:16:28,116
respective topic.  With that, I 
thank you for your attention.  I

1836
04:16:28,292 --> 04:16:31,615
will be around for the rest of 
the day wearing likely this

1837
04:16:33,507 --> 04:16:38,993
jacket instead of the onesie.  
Come by, ask me questions, and

1838
04:16:39,148 --> 04:16:41,002
thank you for your attention.  
[ Applause ]

1839
04:16:41,003 --> 04:16:46,372
>> Thank you so much.  I have a 
question for you.  So, what do

1840
04:16:46,373 --> 04:16:52,584
you think we as software 
engineers can do to advocate in

1841
04:16:53,344 --> 04:16:57,679
our own companies to actually do
more things for security?

1842
04:16:57,680 --> 04:17:01,576
>> I think sort of highlighting 
past examples.

1843
04:17:01,577 --> 04:17:03,577
There is a

1844
04:17:07,840 --> 04:17:14,154
great talk by @jawegg on 
Twitter.  He has a great talk

1845
04:17:14,155 --> 04:17:17,478
online talking about different 
instances where people were

1846
04:17:18,088 --> 04:17:20,484
hacked because of security 
vulnerabilities.  Showing these

1847
04:17:20,638 --> 04:17:25,201
things.  You don't want to be in
this situation, right? Security

1848
04:17:25,599 --> 04:17:28,857
is a preemptive strategy.  You 
should always have security in

1849
04:17:29,021 --> 04:17:31,283
mind, because if you have to 
think about security because of

1850
04:17:31,628 --> 04:17:36,921
an attack, it's too late.  So 
you always should think of this

1851
04:17:37,056 --> 04:17:39,734
ahead of time. 
   >> Thank you so much.  Again,

1852
04:17:41,721 --> 04:17:46,344
Dominik.  So we have a break for
30 minutes.  So go get your

1853
04:17:46,465 --> 04:17:50,557
coffee.  I think I need coffee. 
Any body thinks I'm in New York,

1854
04:17:51,565 --> 04:17:57,023
still.  Head out, and come back 
in 30 minutes.

1855
04:17:57,152 --> 04:17:59,152
[ Break

1856
04:18:07,286 --> 04:18:08,449
]

1857
04:51:21,271 --> 04:51:24,471
Live Captions by:
@smiley845 with @whitecoatcapxg

1858
04:51:29,534 --> 04:51:32,734
Live Captions by:
@smiley845 with @whitecoatcapxg

1859
04:52:21,211 --> 04:52:25,490
>> Hello.  Okay.  Hello, 
everyone.  Welcome to our

1860
04:52:25,655 --> 04:52:29,071
lightning talk part of the 
event.  So, it's going to be

1861
04:52:29,483 --> 04:52:31,789
seven lightning talks, and we're
going to be starting

1862
04:52:35,246 --> 04:52:39,272
with Andy. 
I have a timer on my iPad timing

1863
04:52:39,613 --> 04:52:43,238
them.  We're a little strict 
about it.  Here's Andy talking

1864
04:52:43,543 --> 04:52:45,543
to us about TypeScript.

1865
04:52:50,287 --> 04:52:52,650
Awesome.  
[ Applause ]

1866
04:52:52,651 --> 04:53:02,358
>> Hi.  I'm Andy.  And I work at
shopify.  Today I'm going to be

1867
04:53:02,359 --> 04:53:06,301
giving you a whirlwind 
introduction to TypeScript.  A

1868
04:53:06,302 --> 04:53:09,303
brief disclaimer, most of the 
stuff I'm going to talk about

1869
04:53:10,224 --> 04:53:13,500
today is TypeScript-specific, 
but TypeScript is not the only

1870
04:53:13,749 --> 04:53:18,696
way to bring types into your 
JavaScript.  There are other

1871
04:53:19,087 --> 04:53:21,841
options.  I first started with 
flow, and we switched to

1872
04:53:22,025 --> 04:53:24,851
TypeScript at work, so that's 
what I do most of the time.  But

1873
04:53:25,409 --> 04:53:29,382
they're all great.  
    Okay.  So first, I want to

1874
04:53:29,383 --> 04:53:32,466
give you a little bit of why to 
use types.  This is probably the

1875
04:53:32,609 --> 04:53:36,936
most important, and then we'll 
dive into TypeScript syntax to

1876
04:53:37,208 --> 04:53:40,726
hopefully make it less scary to 
get started.  I really want to

1877
04:53:41,061 --> 04:53:43,480
talk about two main reasons that
you would want to use types in

1878
04:53:44,250 --> 04:53:48,487
your project.  The first one is 
if you're working on a large

1879
04:53:48,618 --> 04:53:52,014
application, as that application
grows, it's impossible to keep

1880
04:53:52,307 --> 04:53:54,922
in your own mind everything 
that's happening.  If you're

1881
04:53:55,246 --> 04:53:59,934
working on a small library, like
maybe the overhead of types is

1882
04:53:59,935 --> 04:54:04,368
overkill.  Be  but if you're 
working on a large application,

1883
04:54:04,543 --> 04:54:07,427
it will get to the point that 
you can't keep track of all of

1884
04:54:07,713 --> 04:54:09,939
the changes that are happening 
to functions or other interfaces

1885
04:54:10,127 --> 04:54:13,827
in your application, but the 
compiler can keep track of that.

1886
04:54:14,267 --> 04:54:18,909
It's like having a super-powered
buddy on your team who will keep

1887
04:54:19,115 --> 04:54:20,836
track of everything that's 
happening.

1888
04:54:20,837 --> 04:54:23,594
The second thing is that it's 
really hard to keep

1889
04:54:23,800 --> 04:54:26,420
documentation up to date, 
whether it be comments in your

1890
04:54:26,563 --> 04:54:30,541
code, or whether it be a read me
or whatever else.  The nice

1891
04:54:30,542 --> 04:54:33,839
thing about types is they make 
your code a little more

1892
04:54:34,857 --> 04:54:37,330
self-documenting.  Since the 
compiler is going to be

1893
04:54:37,331 --> 04:54:40,459
enforcing those types, it's a 
lot harder to get them out of

1894
04:54:40,777 --> 04:54:43,490
date.  It's definitely possible 
and easy to do things that still

1895
04:54:43,669 --> 04:54:46,788
make it hard to understand, but 
it's a little bit of a help to

1896
04:54:46,958 --> 04:54:49,462
make your code easier to jump 
into.

1897
04:54:49,463 --> 04:54:54,098
All right.  So, basic types.
We're going to start going

1898
04:54:54,099 --> 04:54:57,785
pretty fast through syntax here 
to give an overview.  So here is

1899
04:54:57,934 --> 04:55:04,736
like sort of a hello_world of 
primitive types in TypeScript.

1900
04:55:05,115 --> 04:55:08,883
It looks like normal JavaScript,
but you have a colon and the

1901
04:55:08,884 --> 04:55:12,131
name of a type, which is how 
you're going to annotate your

1902
04:55:12,655 --> 04:55:15,074
variables.  That actually isn't 
necessary a lot of the time.  I

1903
04:55:15,792 --> 04:55:19,038
more often than not don't have 
to add explicit annotations to

1904
04:55:19,330 --> 04:55:24,413
my code, because TypeScript is 
very good at inferring what I

1905
04:55:24,705 --> 04:55:26,687
mean.  
    You can also see here, this

1906
04:55:26,688 --> 04:55:30,203
is where the benefit starts 
coming in.  This screen shot is

1907
04:55:30,688 --> 04:55:35,442
from visual studio code, but 
it's a reflex of the error that

1908
04:55:36,444 --> 04:55:40,698
the compiler is putting out.  
You can see it has a red

1909
04:55:41,532 --> 04:55:48,243
squiggly, because the it doesn't
have the call.

1910
04:55:48,513 --> 04:55:51,650
Arrays.  You have an annotation.
You put square brackets after it

1911
04:55:51,984 --> 04:55:56,333
to say that it's an array.  I 
have this array of foods, and if

1912
04:55:56,491 --> 04:56:00,029
I initialize it to these 
strings, it's happy.  If I push

1913
04:56:00,030 --> 04:56:05,093
in a new string, it's still 
happy.  But if I were to try to

1914
04:56:05,094 --> 04:56:11,091
initialize it, or push in a 
bollion, it would complain and I

1915
04:56:11,530 --> 04:56:14,846
would have to fix that.  So your
functions, you will be inporting

1916
04:56:15,197 --> 04:56:18,817
them all over your application. 
Those were contrived examples,

1917
04:56:18,818 --> 04:56:22,260
because you can look at your 
variables three or four lines

1918
04:56:22,261 --> 04:56:24,911
above.  But a function, this is 
where you're going to be able to

1919
04:56:25,054 --> 04:56:28,300
catch things across your 
application as you import

1920
04:56:28,443 --> 04:56:31,348
things.  You can see here that I
typed my parameter with that

1921
04:56:31,349 --> 04:56:34,072
same annotation.  There's 
another annotation after the

1922
04:56:34,241 --> 04:56:37,480
arguments list, which is the 
return type.  And then we just

1923
04:56:37,974 --> 04:56:43,709
write normal JavaScript on the 
inside.  If I pass race car, it

1924
04:56:43,710 --> 04:56:50,866
will be happy, but bullion, it 
will complain.  It is smart at

1925
04:56:51,187 --> 04:56:54,436
figuring out what return types 
are, so you can omit the return

1926
04:56:54,629 --> 04:56:57,222
type if you don't want to do so 
much typing.

1927
04:56:57,355 --> 04:56:59,355
All right.

1928
04:57:05,320 --> 04:57:08,218
Unions.  This is something that 
I use all the time.  It's like

1929
04:57:08,219 --> 04:57:12,662
an or.  I want to say that a 
vegetable can be a broccoli or a

1930
04:57:13,506 --> 04:57:17,289
carrot.  Fruit can be any of 
these fruits.  And I use unions

1931
04:57:17,290 --> 04:57:21,461
with types.  I can say an 
ingredient for this restaurant

1932
04:57:21,462 --> 04:57:24,760
is going to be a vegetable or a 
truth,

1933
04:57:33,526 --> 04:57:36,156
fruit.  
If I try to make this sludge

1934
04:57:36,557 --> 04:57:41,021
drink out of bread and bacon, it
will not be happy because it's

1935
04:57:43,106 --> 04:57:46,716
neither a vegetable or a fruit. 
Interfaces.  This is how you

1936
04:57:47,317 --> 04:57:51,340
type objects.  This looks a lot 
like plain object notation.  You

1937
04:57:52,032 --> 04:57:54,918
have a colon, and instead of the
value, you put your type name.

1938
04:57:55,117 --> 04:57:57,799
You also can use all of these 
other features inside of your

1939
04:57:58,551 --> 04:58:01,865
interfaces.  So here we have a 
union between a bunch of

1940
04:58:02,075 --> 04:58:04,866
animals.  You can have your 
favorite.  You can make it

1941
04:58:05,098 --> 04:58:08,313
optional by allowing nulls, and 
TypeScript will help you check

1942
04:58:08,487 --> 04:58:11,349
null before you access the 
values or anything like that.

1943
04:58:11,656 --> 04:58:15,761
All right.  So most of my 
day I spend writing React, and

1944
04:58:15,898 --> 04:58:20,057
that is where TypeScript really 
shines for me.  I like it when

1945
04:58:20,058 --> 04:58:24,250
I'm writing plain TypeScript, 
but for React components, I

1946
04:58:24,251 --> 04:58:33,297
think it's the bees' knees.  If 
you use the prop types package,

1947
04:58:33,298 --> 04:58:37,092
this probably looks familiar toe
you.  In prop types, you have to

1948
04:58:37,905 --> 04:58:43,221
declare your types.  You get 
more help from the compiler.

1949
04:58:43,222 --> 04:58:46,484
You don't have to include the 
prop types package.  All of this

1950
04:58:46,889 --> 04:58:51,714
gets stripped out at compile 
time, and you ship a smaller

1951
04:58:51,909 --> 04:58:54,795
bundle, a little bit.  So just 
to walk through this, we have

1952
04:58:55,200 --> 04:58:58,956
our props.  We're going to have 
one prop called size that

1953
04:58:59,122 --> 04:59:03,729
accepts small, medium, or large.
And then we just pass it into

1954
04:59:03,962 --> 04:59:06,668
our component as usual.  And you
can see here that inside my

1955
04:59:06,992 --> 04:59:11,304
component, I have very little 
TypeScript-specific syntax.  It

1956
04:59:11,305 --> 04:59:14,968
really looks pretty much like 
normal JavaScript.  And this is

1957
04:59:14,969 --> 04:59:19,292
what it looks like to use that. 
I import my icon component, and

1958
04:59:19,293 --> 04:59:23,229
if I don't give props, 
TypeScript will complain because

1959
04:59:23,230 --> 04:59:27,275
I told it to expect props.  Here
if I give it size, it can

1960
04:59:27,459 --> 04:59:30,796
suggest to me what the props 
should be.  This is nice when

1961
04:59:30,797 --> 04:59:33,595
you're using a design system, 
because you can know exactly

1962
04:59:33,596 --> 04:59:38,620
what the values are supposed to 
be.  This is the VS code

1963
04:59:38,946 --> 04:59:42,403
interface, and when you run the 
compiler, it gives this exact

1964
04:59:42,404 --> 04:59:45,978
suggestion where it will list 
what it's expecting.  If I give

1965
04:59:45,979 --> 04:59:50,194
it something that it's 
expecting, it will be happy and

1966
04:59:50,425 --> 04:59:54,162
I can compile my code.  I hope 
that has made TypeScript a

1967
04:59:54,395 --> 04:59:56,395
little less mysterious.  Thank 
you very much.

1968
05:00:11,065 --> 05:00:13,870
[ Applause ]
   >> Hello? Hey.  Andy was

1969
05:00:14,041 --> 05:00:17,615
right on the dot on that timer. 
Our next speaker is

1970
05:00:17,616 --> 05:00:19,616
[ Applause ]
   >>Burke, and he's going to be

1971
05:00:20,291 --> 05:00:27,661
talking about, it's titled "the 
best UX is no UI at all."

1972
05:00:35,223 --> 05:00:39,019
>> Has it started yet? What 
do I do? Just go

1973
05:00:43,559 --> 05:00:46,553
to the right? 
Again? Wrong slides.  Wrong

1974
05:00:46,968 --> 05:00:50,486
slides.  Different slides.  
These are good slides, though.

1975
05:00:56,164 --> 05:00:58,167
[ Laughter ]
    Should I tell a joke while

1976
05:00:58,565 --> 05:01:02,624
we wait? I don't know any jokes!
Help me out.

1977
05:01:07,981 --> 05:01:13,544
Let's see.  A good book is like 
a puppy.  Easy to pick up; hard

1978
05:01:13,545 --> 05:01:17,050
to put down.  See, I told you I 
didn't know any good jokes.  You

1979
05:01:17,580 --> 05:01:20,902
forced me into it! I didn't want
to do it!

1980
05:01:20,903 --> 05:01:25,756
Please hurry.  Okay.  
    All right! Did we start?

1981
05:01:25,900 --> 05:01:31,826
Thank you! That's it.  I'm done.
Can I go? Did I already start?

1982
05:01:32,009 --> 05:01:36,049
Tell me when to start? Now? 
Okay.  Hi.  My name is Burke,

1983
05:01:36,173 --> 05:01:39,370
and I love user interface.  I 
have always loved user

1984
05:01:40,028 --> 05:01:43,708
interface.  I remember staring 
at the glory that was compact

1985
05:01:44,272 --> 05:01:46,832
tab works while I played this 
game called the incredible

1986
05:01:47,042 --> 05:01:51,336
machine and listened to the 
tears for fears greatest hit

1987
05:01:51,665 --> 05:01:55,796
album.  I was listening to mad 
world way before Donny darko and

1988
05:01:56,567 --> 05:02:00,522
that creepy rabbit movie.  
That's an old and obscure

1989
05:02:00,950 --> 05:02:08,263
reference.  It's not you.  It's 
me as Costanza would say.

1990
05:02:08,264 --> 05:02:13,789
That's another old and on secure
reference.  I got my first

1991
05:02:13,940 --> 05:02:17,258
computer when I was in boot 
camp.  They pay you but you

1992
05:02:17,451 --> 05:02:21,119
can't spend it because you're 
doing push-ups.  I got my first

1993
05:02:21,267 --> 05:02:24,934
computer -- oh, you can see the 
slides right here -- which was

1994
05:02:25,205 --> 05:02:33,294
an HP pavilion.  It came with 
windows 98.  My sounds aren't

1995
05:02:33,558 --> 05:02:37,628
working.  There we go.  I loved 
windows 98.  I spent so much

1996
05:02:38,357 --> 05:02:40,823
time changing the different 
themes, looking at the icons and

1997
05:02:41,096 --> 05:02:44,211
the text.  Each theme was better
than the previous theme.  It was

1998
05:02:44,993 --> 05:02:48,698
incredible.  It was so good! And
if only I had known then, if

1999
05:02:48,847 --> 05:02:51,443
only I had known what was 
coming, if only I had known

2000
05:02:52,621 --> 05:02:58,370
about windows XP... okay.  
    This was -- do you believe

2001
05:02:58,371 --> 05:03:02,354
in love at first sight? Does it 
exist? No, of course it doesn't.

2002
05:03:02,777 --> 05:03:06,544
Don't be ridiculous.  It's a 
complex human emotion.  Let me

2003
05:03:07,046 --> 05:03:11,866
tell you what does exist.  
Infactuation.  I was infact

2004
05:03:17,650 --> 05:03:23,768
-- 
I was infactuated with XP.  I

2005
05:03:23,769 --> 05:03:28,563
was not socially popular, so I 
had time to sit around and stare

2006
05:03:28,564 --> 05:03:32,143
at operating systems.  When you 
can do that, you want to make it

2007
05:03:32,719 --> 05:03:34,719
look like OS10.  So this

2008
05:03:37,264 --> 05:03:41,588
goes out to you.  As much as I 
love UI, I'm not a designer.  As

2009
05:03:41,767 --> 05:03:46,221
much as I want to be a designer,
I am not.  What I can do is

2010
05:03:46,222 --> 05:03:48,993
assemble building blocks.  If 
you give me sliders and

2011
05:03:49,615 --> 05:03:53,524
drop-downs and modal windows, 
then I can build you a UI.  I

2012
05:03:53,525 --> 05:03:57,455
used to work for a company 
called Kendall UI, and I have

2013
05:03:57,456 --> 05:04:00,904
been fortunate to be part of 
great products.  But you

2014
05:04:01,414 --> 05:04:05,172
wouldn't hire me to build a 
website for you.  Unless you're

2015
05:04:05,321 --> 05:04:09,427
my mom.  If you did, you would 
get sub par results.  What I

2016
05:04:09,832 --> 05:04:12,395
realized through all of my time 
working with UI, is that the

2017
05:04:12,713 --> 05:04:16,061
best user experience is no UI at
all.  So let me talk about that

2018
05:04:16,203 --> 05:04:19,412
for a second.  UI is a middle 
man.  It's a conversation.  It's

2019
05:04:21,377 --> 05:04:24,860
pre-canned.  It has boundaries. 
We try to code for the simplest

2020
05:04:25,264 --> 05:04:28,673
possible scenario to get a user 
through the process, or all the

2021
05:04:29,540 --> 05:04:33,747
processes in the world! Right? 
And so we could improve upon

2022
05:04:33,908 --> 05:04:42,125
this UX probably a little bit.  
There's been great feats of UXG.

2023
05:04:42,861 --> 05:04:45,943
If a baby can pick up an iPad 
without training, that's kind of

2024
05:04:46,118 --> 05:04:50,347
an amazing thing.  The reason we
have UI and wonderful buttons

2025
05:04:51,329 --> 05:04:55,673
and sliders is historically, we 
haven't been able to talk to

2026
05:04:55,850 --> 05:04:59,877
computers -- until now.  Natural
language processing is the field

2027
05:04:59,878 --> 05:05:03,357
of computing that deals with not
just speech recognition but

2028
05:05:03,647 --> 05:05:08,578
extracting a user's intent from 
what they just said.  We have

2029
05:05:08,723 --> 05:05:15,606
Alexa, Cortona, Google home, 
okay Google or Google assistant

2030
05:05:15,827 --> 05:05:18,431
or whatever you call that thing.
A lot of people have these.  I

2031
05:05:18,766 --> 05:05:23,619
will give you three examples of 
how no UI is better than a UI.

2032
05:05:24,266 --> 05:05:30,564
I can say hey siri, remind me to
e-mail my mom.  That experience

2033
05:05:30,692 --> 05:05:34,145
is way better than this.  No 
matter how beautiful the

2034
05:05:34,270 --> 05:05:38,093
reminders app is, it will never 
be easier than saying just do

2035
05:05:38,293 --> 05:05:42,204
it.  Here is an example of me 
turning lights on and off.

2036
05:05:42,205 --> 05:05:46,760
Here's the app that you do it 
with.  Here's me turning lights

2037
05:05:46,979 --> 05:05:51,711
on and off with the app.  Very 
nice.  Here's me

2038
05:06:00,631 --> 05:06:02,453
doing it... 
Alexa, turn off the lights in

2039
05:06:02,454 --> 05:06:05,115
the master bedroom    >> Now 
watch this.

2040
05:06:05,116 --> 05:06:09,838
>> Okay.  
   >> Alexa, can you turn on the

2041
05:06:09,985 --> 05:06:14,852
bedroom -- turn on the master 
bedroom lights.

2042
05:06:14,853 --> 05:06:18,123
>> Okay.  
   >> That is natural language

2043
05:06:18,244 --> 05:06:21,051
processing.  It completely 
botched that command seven

2044
05:06:22,193 --> 05:06:25,646
different ways and it was able 
to do it.  If you have a nest

2045
05:06:26,072 --> 05:06:29,208
thermostat, you can lay in bed 
and control your temp with your

2046
05:06:29,743 --> 05:06:34,437
voice.  Now that I said that, 
its sounds pathetic.  Never

2047
05:06:34,802 --> 05:06:40,223
mind.  I don't ever do it.  
    The last I would give you is

2048
05:06:40,224 --> 05:06:44,737
a service called digit.  It 
saves for you and it will give

2049
05:06:45,502 --> 05:06:50,246
you savings updates.  I blurred 
this out so you don't get too

2050
05:06:50,704 --> 05:06:52,704
depressed by my lowball lance.

2051
05:06:55,648 --> 05:06:59,296
-- low balance.  It was 
resilient at understanding my

2052
05:07:00,121 --> 05:07:03,343
commands.  I didn't have to know
what to say, I just said it.  So

2053
05:07:03,605 --> 05:07:11,222
the question now is, is UI as we
know it dead? The answer is no.

2054
05:07:11,672 --> 05:07:15,674
No! Absolutely not.  There are 
accessibility concerns.  You

2055
05:07:15,901 --> 05:07:18,388
wouldn't want to take photos 
with your voice or scroll

2056
05:07:18,887 --> 05:07:21,467
through pictures with your 
voice.  That's not a good user

2057
05:07:21,590 --> 05:07:25,041
experience.  But it does give us
a chance to rethink some of the

2058
05:07:25,253 --> 05:07:27,811
ways that we build UIs that 
maybe we don't need to build a

2059
05:07:28,300 --> 05:07:31,663
UI, and instead what we need to 
build is something that's more

2060
05:07:31,938 --> 05:07:34,814
conversational in nature that 
uses natural language

2061
05:07:34,938 --> 05:07:37,893
processing.  That's now 
available to all of us.  And if

2062
05:07:40,074 --> 05:07:42,999
I'm going to end a little early.
You can check out

2063
05:07:47,244 --> 05:07:51,003
the project here.  As long as 
you know how to make an AJAX

2064
05:07:51,401 --> 05:07:55,399
call, you can add natural 
language processing to your

2065
05:07:55,400 --> 05:07:59,597
applications and build a BOT or 
a conversational UI.

2066
05:07:59,598 --> 05:08:01,598
Thank you so

2067
05:08:06,348 --> 05:08:14,085
>> Thank you.  I just want to 
acknowledge my co-Emcee.  We use

2068
05:08:14,944 --> 05:08:19,256
they/them pronouns.  I don't 
really know the name yet.  We're

2069
05:08:19,842 --> 05:08:21,842
going to be friends in a

2070
05:08:27,245 --> 05:08:29,245
minute.
Their name is

2071
05:08:31,721 --> 05:08:41,529
Beyla.  Our next talk is Istvan 
and his talk,

2072
05:08:42,547 --> 05:08:46,037
2,506 bytes ought to be enough 
for anyone.  Thank you so much.

2073
05:09:05,057 --> 05:09:11,393
My Iceland.  dear co-presenter 
is going to

2074
05:09:11,394 --> 05:09:17,099
>> be here today, Beyla.  You 
can see them

2075
05:09:20,760 --> 05:09:28,851
holding yeast yesterday's beer. 
We will be talking about 2,560

2076
05:09:29,524 --> 05:09:32,799
bytes is probably enough for 
anyone.  If you don't get this,

2077
05:09:33,073 --> 05:09:35,073
you are probably not very old.

2078
05:09:39,680 --> 05:09:47,297
I am from Hungary, or at least 
from I rent an apartment there.

2079
05:09:47,639 --> 05:09:52,136
I'm a speaker.  I worked with 
the dev team doing the same

2080
05:09:52,358 --> 05:09:55,834
thing, and I'm doing a bunch of 
JavaScript,

2081
05:09:59,351 --> 05:10:01,351
microcontroler stuff, and

2082
05:10:04,707 --> 05:10:06,707
the T

2083
05:10:08,327 --> 05:10:12,831
Tessel project brought me into 
programming to begin with.  I

2084
05:10:13,179 --> 05:10:16,562
started playing around with it, 
and I did my first presentation

2085
05:10:17,904 --> 05:10:22,193
in Budapest on JavaScript and 
microcontrolers and convincing

2086
05:10:22,194 --> 05:10:25,635
people that running JavaScript 
on a microcontroler might be a

2087
05:10:25,985 --> 05:10:29,705
good idea, or at least not a 
terrible idea.  Why would that

2088
05:10:29,937 --> 05:10:33,422
be? I'm not sure this talk is 
going to sell it to you.  But

2089
05:10:33,639 --> 05:10:39,998
one of the creators, John McKay,
has given a talk last year

2090
05:10:40,584 --> 05:10:45,840
talking about the whole journey 
of the Tessel team.  It's

2091
05:10:46,317 --> 05:10:50,323
fascinating how they use 
JavaScript on a microcontroler.

2092
05:10:50,530 --> 05:10:53,727
There are devices like you see 
on the screen.  This is the

2093
05:10:53,953 --> 05:10:59,026
thing that you see is a USB 
connector.  And you can program

2094
05:10:59,336 --> 05:11:07,675
this with JavaScript.  It had a 
very strange JavaScript

2095
05:11:10,482 --> 05:11:14,255
compiler.  Somebody didn't think
it was okay, so they set out to

2096
05:11:14,444 --> 05:11:18,677
bring JavaScript properly on to 
microcontrolers.  It has

2097
05:11:20,892 --> 05:11:26,257
improved a lot.  Espruino is a

2098
05:11:30,865 --> 05:11:35,408
capable chip by now.  It powers 
a lot of devices.  You can power

2099
05:11:36,239 --> 05:11:40,039
BBC microbits on it.  It is 
interesting stuff happening, and

2100
05:11:40,174 --> 05:11:45,768
I forgot to set this up, so let 
me just set some -- hopefully --

2101
05:11:46,233 --> 05:11:48,233
yep.

2102
05:11:54,493 --> 05:11:59,730
Not yet.  Technical 
difficulties, I guess.  Let me

2103
05:11:59,942 --> 05:12:01,942
see if I can get this

2104
05:12:09,094 --> 05:12:14,534
to work.  
There you go.  Now we're

2105
05:12:14,777 --> 05:12:18,467
talking.  All righty.  Let's 
talk about a bunch more

2106
05:12:18,608 --> 05:12:20,608
interesting stuff like

2107
05:12:29,417 --> 05:12:32,772
JavaScript.  Babel announced 
they were running JavaScript on

2108
05:12:33,043 --> 05:12:36,812
their watches, and they didn't 
stop until they could get

2109
05:12:40,848 --> 05:12:44,504
JavaScript running and 
efficient.  230 lines of code

2110
05:12:44,645 --> 05:12:50,392
versus 39 lines of JavaScript 
over the UI of a smart watch.

2111
05:12:50,957 --> 05:12:54,695
And when they went defunct last 
year, they got bought out by fit

2112
05:12:55,547 --> 05:13:00,086
bit, and my watch is running 
JavaScript on the UI.  You can

2113
05:13:00,585 --> 05:13:03,846
create apps for your watch on 
JavaScript.  But we need to get

2114
05:13:04,067 --> 05:13:09,285
smaller.  These are pretty 
capable chips.  How about

2115
05:13:09,491 --> 05:13:12,170
putting JavaScript on a 
microcontroler like this? Have

2116
05:13:12,749 --> 05:13:16,175
you ever played with this 
before? This is an 8 bit

2117
05:13:16,514 --> 05:13:20,291
processor.  It literally has 
2,56 o

2118
05:13:24,095 --> 05:13:29,088
bytes of memory.  It holds 30K 
of flash.  And you can do stuff

2119
05:13:29,089 --> 05:13:36,040
like put space invaders on it.  
How? There are bunches of way.

2120
05:13:36,041 --> 05:13:39,227
Usually you use some C

2121
05:13:43,104 --> 05:13:46,977
+ + to code it.  It's a good 
thing, and you just mentioned

2122
05:13:47,109 --> 05:13:51,485
flow.  It uses flow to infer 
your types and stuff.  I don't

2123
05:13:52,165 --> 05:13:56,213
have time to explain it.  But 
come up to me and try it

2124
05:13:56,440 --> 05:13:59,154
yourself.  Because that's all 
the games you will be make

2125
05:13:59,345 --> 05:14:02,703
willing be just JavaScript, you 
can just put them on to the web

2126
05:14:02,936 --> 05:14:05,701
and play them.  And after you 
played them, you can compile

2127
05:14:06,050 --> 05:14:08,050
them and put them on to devices

2128
05:14:12,096 --> 05:14:16,502
like this one.  This is a 
JavaScript game running on a

2129
05:14:16,894 --> 05:14:25,418
microcontroler, with hardware 
that has 8 bit 16 megaHertz

2130
05:14:25,541 --> 05:14:30,658
processor.  Or you can use this 
one.  It's a tiny arcade box

2131
05:14:30,848 --> 05:14:36,488
that you can play with.  Why is 
that interesting? Because this

2132
05:14:36,664 --> 05:14:38,982
is just JavaScript as you are 
writing.  And you can check

2133
05:14:39,635 --> 05:14:43,179
that, because I have some links 
up.  If you go to this with your

2134
05:14:43,180 --> 05:14:46,554
computer or laptop, actually, 
you can play the exact same game

2135
05:14:47,525 --> 05:14:51,576
that gets compiled down to the 
microcontroler.  And we have

2136
05:14:51,747 --> 05:14:54,829
space invaders if you're into 
that kind of stuff.  And we have

2137
05:14:54,974 --> 05:14:58,825
a workshop.  So if you're 
Icelandic or going to be driving

2138
05:14:59,131 --> 05:15:03,462
around the island in the next 
week, drop by the university

2139
05:15:03,463 --> 05:15:08,208
next Saturday, and we're going 
to do a whole workshop with the

2140
05:15:08,607 --> 05:15:12,274
creators of these devices were 
kind enough to provide us with a

2141
05:15:12,443 --> 05:15:16,387
bunch of devices.  So you can 
play JavaScript games and put

2142
05:15:16,585 --> 05:15:18,585
them on to a microcontroler

2143
05:15:25,495 --> 05:15:28,555
and play around.  If you want to
talk to me about this stuff, hit

2144
05:15:28,715 --> 05:15:33,465
me up on Twitter or follow me.  
All of this is open source.

2145
05:15:34,606 --> 05:15:41,934
Most is built on node.js and 
compiler.  You can contribute if

2146
05:15:42,125 --> 05:15:47,508
you want to.  All the slides are
online.  That's an Icelandic

2147
05:15:53,485 --> 05:15:56,279
domain, right? Thank you very 
much.  There's a reading list,

2148
05:15:56,502 --> 05:16:00,596
if you want to know more about 
the talks.

2149
05:16:00,597 --> 05:16:02,597
[ Applause ]
   >> Thank you.  Our next talk

2150
05:16:02,649 --> 05:16:04,649
is from Martin, and he's going

2151
05:16:09,048 --> 05:16:13,532
to be talking about accessible 
customizable selects, and it's

2152
05:16:14,029 --> 05:16:15,894
probably harder than you 
thought.

2153
05:16:15,895 --> 05:16:17,895
>> Hi.  Okay.  This is

2154
05:16:20,037 --> 05:16:24,219
working? Great.  Welcome to my 
presentation about accessible

2155
05:16:28,198 --> 05:16:31,260
customizable select.  My name is
Martin, and I work as a

2156
05:16:36,717 --> 05:16:40,017
front-end developer for a 
company.  Let me address the

2157
05:16:40,191 --> 05:16:45,656
elephant in the room.  Why 
another JavaScript? Isn't it the

2158
05:16:45,791 --> 05:16:50,943
first rule that we should always
use the native whenever

2159
05:16:51,466 --> 05:16:55,220
possible? True.  However, the 
native thought is hard to style

2160
05:16:55,383 --> 05:16:59,894
using CSS.  This forces us to 
create our own custom

2161
05:17:00,204 --> 05:17:03,522
implementations, and we need to 
reimplement the accessibility

2162
05:17:03,679 --> 05:17:08,294
into it as well.  And I'm not 
talking about high enough

2163
05:17:08,813 --> 05:17:10,813
contrast and large enough fonts.
What I mean

2164
05:17:13,701 --> 05:17:17,049
is supporting assistive 
technologies, such as the screen

2165
05:17:17,878 --> 05:17:22,992
readers used by the visually 
impaired.  And there must be

2166
05:17:22,993 --> 05:17:26,105
plenty of existing solutions out
there? Well, I have looked

2167
05:17:30,191 --> 05:17:34,280
into them.  I have reviewed 
existing solutions provided by

2168
05:17:37,528 --> 05:17:41,883
various companies and various 
techniques.

2169
05:17:41,884 --> 05:17:44,333
Unfortunately, there were 
issues.  For example, the

2170
05:17:45,412 --> 05:17:47,651
implementation provided by 
Google as part of the polymer

2171
05:17:48,161 --> 05:17:56,074
project is not compatible with 
JAWS and square key when using

2172
05:17:56,220 --> 05:17:59,504
voiceover screen readers.  How 
can we use such a solution? We

2173
05:17:59,715 --> 05:18:06,283
cannot.  On the other hand, 
there's implementation by Jquery

2174
05:18:07,003 --> 05:18:10,799
UI, which is buggy and remains 
completely silent when used with

2175
05:18:11,492 --> 05:18:13,814
voiceover.  So how can we use 
such a solution? We

2176
05:18:19,390 --> 05:18:22,417
cannot.  We were looking for a 
solution that could be

2177
05:18:22,418 --> 05:18:26,171
integrated into any project 
regardless of its front end

2178
05:18:26,312 --> 05:18:29,992
technology.  But of course, 
accessibility was the top line

2179
05:18:30,219 --> 05:18:32,580
priority.  What do I mean? We 
were looking for a solution that

2180
05:18:33,126 --> 05:18:35,190
works regardless of the 
operating system the user may be

2181
05:18:37,734 --> 05:18:44,998
using.  With slight reservation 
when it comes to Linux,

2182
05:18:45,821 --> 05:18:48,756
assistive technologies is not as
great as it's going to be.

2183
05:18:48,757 --> 05:18:52,805
Next, we must support all of the
commonly used browsers,

2184
05:18:53,334 --> 05:18:59,386
including internet explorer 11. 
If the technologies used by the

2185
05:18:59,572 --> 05:19:04,883
solution would be available for 
up to I8.  Support for all major

2186
05:19:05,011 --> 05:19:09,335
screen readers used around the 
world is a must.  And of course,

2187
05:19:09,336 --> 05:19:17,360
we cannot forget about the 
myriad of keyboard shortcuts.

2188
05:19:17,361 --> 05:19:21,188
Don't worry.  We don't have to 
consider all of these

2189
05:19:21,588 --> 05:19:25,384
combinations and all of these 
technologies equally, since

2190
05:19:26,630 --> 05:19:28,840
there are combinations that are 
recommended by the providers and

2191
05:19:29,365 --> 05:19:32,511
vendors of these assistive 
technologies.  It doesn't mean

2192
05:19:32,512 --> 05:19:38,023
we can ignore the rest.  We just
need to make sure that these

2193
05:19:38,024 --> 05:19:40,606
work really well.  On the other 
hand, there are combinations

2194
05:19:41,025 --> 05:19:43,025
that are just not compatible at 
all.

2195
05:19:46,053 --> 05:19:51,661
For example, the JAWS screen 
reader is incompatible with the

2196
05:19:51,662 --> 05:19:54,851
Edge browser.  I'm told this is 
being fixed.

2197
05:19:54,852 --> 05:19:58,798
All of this has taken us on 
several months of a journey in

2198
05:19:59,033 --> 05:20:02,202
which we were testing and 
prototyping, and we made quite a

2199
05:20:02,203 --> 05:20:08,091
couple of findings.  
Accessibility supporting

2200
05:20:08,092 --> 05:20:13,392
browsers could be improved.  And
support for aria, which is used

2201
05:20:14,280 --> 05:20:18,797
to make our websites more 
accessible is implemented by

2202
05:20:19,654 --> 05:20:23,816
assistive technologies, not 
browsers, inconsistently.  This

2203
05:20:24,135 --> 05:20:26,922
makes situations where you are 
prototyping and testing a

2204
05:20:27,163 --> 05:20:31,919
solution.  It seems to work fine
with one assistive technology.

2205
05:20:31,920 --> 05:20:34,812
And things completely break 
apart.  After a moment, you will

2206
05:20:36,220 --> 05:20:40,018
begin to feel like Alice in 
wonderland.  Things just don't

2207
05:20:42,648 --> 05:20:47,120
make any sense.  
    This is me right here.

2208
05:20:47,121 --> 05:20:51,131
Anyway.  There are some positive
sides about this.  For example,

2209
05:20:51,616 --> 05:20:57,225
once you put accessibility into 
the mix, the Android and iOS

2210
05:20:57,226 --> 05:21:00,977
platform are pretty much the 
same.  Throughout all of this, I

2211
05:21:01,232 --> 05:21:06,207
have been reminded of a quote by
Steve Jobs.  Yes, he's more

2212
05:21:06,567 --> 05:21:10,721
handsome than me.  Great things 
are never done by one person in

2213
05:21:10,722 --> 05:21:15,462
business.  They are done by a 
team of people.  Similarly, to

2214
05:21:15,748 --> 05:21:18,887
achieve great accessibility, we 
cannot rely on just a single

2215
05:21:19,396 --> 05:21:22,068
technique.  We will need to find
a combination of techniques that

2216
05:21:22,387 --> 05:21:26,562
will work well together.  Well, 
have we found such a solution?

2217
05:21:30,204 --> 05:21:34,004
I'm happy to tell you that, 
indeed, we have.  We were able

2218
05:21:34,005 --> 05:21:40,238
to design a solution that adapts
and works very well with all the

2219
05:21:40,594 --> 05:21:44,351
compatible combinations of these
major technologyes.  The project

2220
05:21:44,496 --> 05:21:50,086
itself is MIT-licensed, open 
source, available at GitHub,

2221
05:21:50,590 --> 05:21:53,787
where you will find more 
detailed project information,

2222
05:21:54,117 --> 05:21:57,224
current documentation, and how 
you may integrate this into any

2223
05:21:57,386 --> 05:22:00,696
of your projects regardless of 
the technology you may be using.

2224
05:22:00,830 --> 05:22:03,578
Thank you, and I wish you a nice
day here in

2225
05:22:16,996 --> 05:22:18,277
>> That's our first half of the 
lightning talks.  We will have a

2226
05:22:18,278 --> 05:22:22,339
break for ten minutes, and come 
back for more later.

2227
05:22:22,340 --> 05:22:23,581
Thank you.  Iceland.  
[ Applause ]

2228
05:22:23,582 --> 05:22:25,062
>> That's our first half of the 
lightning talks.  We

2229
05:22:25,063 --> 05:22:25,202
[ Applause ]

2230
05:22:25,203 --> 05:22:28,464
[

2231
05:22:32,444 --> 05:22:35,319
Break ]

2232
05:22:35,918 --> 05:22:39,409
Live Captions by:

2233
05:30:28,075 --> 05:30:29,099
@smiley845 with @whitecoatcapxg 
>> Hey, everyone.  Welcome back.

2234
05:30:29,100 --> 05:30:38,835
We're going to be talking about 
hacking the future with Laurens.

2235
05:30:39,379 --> 05:30:43,542
>> Hi.  I'm at the university
of applied sciences at

2236
05:30:43,731 --> 05:30:46,581
Amsterdam, but that's not what 
I'm here to talk to you about

2237
05:30:46,930 --> 05:30:53,132
today.  I'm a volunteer at a 
refugee code school called hack

2238
05:30:53,293 --> 05:30:57,901
Your Future.  While I can tell 
you what that is, but it's been

2239
05:30:58,320 --> 05:31:00,320
done better in this

2240
05:31:07,311 --> 05:31:09,418
video.  I'll show you a short 
clip.

2241
05:31:09,841 --> 05:31:11,841
[ Video ]

2242
05:31:24,501 --> 05:31:27,260
. 
    [ Music ].

2243
05:31:27,261 --> 05:31:29,495
>> Hack your future is an 
initiative.

2244
05:31:29,496 --> 05:31:33,669
>> It's an organization.  that 
is especially for refugees.

2245
05:31:33,670 --> 05:31:37,744
>> That come to the Netherlands.
I think it's mostly Syria, but

2246
05:31:37,745 --> 05:31:40,804
other places as well. 
   >> People who have left their

2247
05:31:40,805 --> 05:31:45,058
countries involuntarily to pick 
up a new skill, hopefully.

2248
05:31:45,059 --> 05:31:49,571
>> So hack your future teaches 
them computer programming, web

2249
05:31:49,762 --> 05:31:52,675
development. 
   >> CSS and HTML.  And you

2250
05:31:53,878 --> 05:31:55,403
learn basics and JavaScript, of 
course.

2251
05:31:55,404 --> 05:31:57,404
>> And help them to find

2252
05:32:03,511 --> 05:32:05,511
jobs.  
   >> These are people who had

2253
05:32:05,953 --> 05:32:09,045
some unfortunate circumstances, 
perhaps, and are trying to do

2254
05:32:09,192 --> 05:32:11,736
something good for themselves 
and for the world.

2255
05:32:11,737 --> 05:32:15,309
>> I'm proud of myself that I 
could learn it.

2256
05:32:15,310 --> 05:32:17,987
>> So this actually tells you 
about what hack your future is.

2257
05:32:18,215 --> 05:32:22,348
But not so much about why hack 
your future is.  So hack your

2258
05:32:22,478 --> 05:32:25,783
future was founded by a couple 
of people who thought, well,

2259
05:32:26,006 --> 05:32:31,145
there's a growing group of 
refugees coming to our country.

2260
05:32:31,395 --> 05:32:35,349
And they actually have a lot of 
trouble entering the job market

2261
05:32:35,824 --> 05:32:38,602
because they won't have the 
right backgrounds.  They'll have

2262
05:32:38,902 --> 05:32:41,792
language barriers.  Maybe 
there's discrimination issues

2263
05:32:42,033 --> 05:32:46,982
going on.  How can we prevent 
these people from becoming

2264
05:32:47,152 --> 05:32:49,885
marginalized in our society.  So
they funded hack your future,

2265
05:32:50,096 --> 05:32:52,999
because they decided what's the 
best way to empower people and

2266
05:32:53,169 --> 05:32:59,233
the best way to get them jobs: 
One of the best ways is to teach

2267
05:32:59,366 --> 05:33:03,030
them web development skills.  
There's a lot of demand for web

2268
05:33:03,374 --> 05:33:06,048
development skills.  It allows 
you to go into various different

2269
05:33:06,705 --> 05:33:09,966
paths, as you all know.  We 
thought, well, how can we do

2270
05:33:10,119 --> 05:33:15,065
that? We came up with an idea of
setting up a volunteer program

2271
05:33:15,066 --> 05:33:18,697
where volunteers teach refugees 
every Sunday for about four

2272
05:33:19,249 --> 05:33:22,746
hours.  We have interactive 
sessions with them.  And then

2273
05:33:22,884 --> 05:33:25,602
they spend about 20 hours 
working on home work

2274
05:33:25,938 --> 05:33:29,731
assignments.  And they hand in 
their homework on GitHub.  And

2275
05:33:29,901 --> 05:33:33,723
we interact with them throughout
with week on Slack.  So they

2276
05:33:34,223 --> 05:33:37,356
have support for the whole week.
We teach them basic skills.

2277
05:33:37,478 --> 05:33:42,266
First we start off with HTMLHTML
CSS, because they have virtually

2278
05:33:42,267 --> 05:33:47,599
no technical skills coming in, 
and that's an easy way to enter

2279
05:33:47,600 --> 05:33:51,054
the field.  Then we spend nine 
weeks on the basics of

2280
05:33:51,055 --> 05:33:53,530
programming through JavaScript, 
which I had a lot of pleasure in

2281
05:33:54,359 --> 05:33:59,500
teaching them.  
They're super-motivated, so it

2282
05:34:00,178 --> 05:34:03,130
goes faster than with my 
students at the university.  And

2283
05:34:03,242 --> 05:34:07,271
after -- at the end of those six
months, they work on a project

2284
05:34:07,272 --> 05:34:10,319
and they actually develop 
something themselves.  They

2285
05:34:10,659 --> 05:34:12,706
often choose to develop 
something that will benefit

2286
05:34:13,774 --> 05:34:16,342
other refugees, which is really 
awesome.  And alongside that

2287
05:34:16,811 --> 05:34:20,931
program, we also teach seminars 
on how to conduct yourself in

2288
05:34:20,932 --> 05:34:26,713
job interviews.  How to make a 
good LinkedIn profile, you know?

2289
05:34:27,251 --> 05:34:32,541
Basic skills that you might also
want, and things that are quite

2290
05:34:32,960 --> 05:34:36,431
different in the Netherlands as 
opposed to, for instance, Syria.

2291
05:34:36,772 --> 05:34:43,745
So yeah, that's the way that we 
set it up.  So what have we

2292
05:34:44,027 --> 05:34:47,304
achieved? We have about 55 
students that have found jobs at

2293
05:34:47,765 --> 05:34:53,353
companies such as KPMG, 
booking.com, and KLM.  I guess

2294
05:34:53,524 --> 05:34:57,380
that's the main thing that we've
achieved.  But we also have an

2295
05:34:57,740 --> 05:35:04,217
active network of students, men 
20Rs,  -- mentors and alumni.

2296
05:35:04,476 --> 05:35:07,432
They're all in the Slack group, 
and they help each other out

2297
05:35:07,578 --> 05:35:13,131
with anything from finding good 
companies to apply it, to how to

2298
05:35:13,387 --> 05:35:18,610
cycle through the snow in the 
Netherlands when winter comes.

2299
05:35:19,046 --> 05:35:23,977
And we've also achieved 100% up 
time for the past two years, and

2300
05:35:24,382 --> 05:35:27,798
who can really say that about 
any program they're running.  We

2301
05:35:28,170 --> 05:35:35,273
also have new chapters in 
Copenhagenen, London, and more.

2302
05:35:35,384 --> 05:35:42,603
People have started copying our 
project.  Hopefully it leads to

2303
05:35:43,307 --> 05:35:45,323
a better future.  
    So I also have a quote.

2304
05:35:45,673 --> 05:35:50,676
It's not by Steve Jobs.  It's by
one of our students, Jack.  He

2305
05:35:50,944 --> 05:35:55,909
says that his main take-aways 
from the program were to -- how

2306
05:35:56,086 --> 05:35:59,798
to think like a programmer, how 
to work in a team, and most

2307
05:36:00,099 --> 05:36:03,854
importantly, that people can 
still treat him for the person

2308
05:36:03,980 --> 05:36:09,956
that he is and not the way that 
he might be seen.  Which I think

2309
05:36:10,244 --> 05:36:13,451
is a very important thing for 
these students coming to us,

2310
05:36:13,651 --> 05:36:17,724
because as soon as they enter 
our doors, they stop being a

2311
05:36:18,141 --> 05:36:20,433
refugee and they start being a 
student.  We just treat them

2312
05:36:20,560 --> 05:36:24,559
like that, and we don't really 
talk about their backgrounds at

2313
05:36:24,737 --> 05:36:28,339
all.  We treat them as students 
and we say this is your

2314
05:36:28,943 --> 05:36:32,930
homework.  You have to deliver 
on it.  We will be supportive

2315
05:36:33,110 --> 05:36:36,731
and try to help you with any 
issue, but you have to deliver.

2316
05:36:37,065 --> 05:36:40,389
So, actually, the point of 
this talk is not to tell you how

2317
05:36:41,198 --> 05:36:45,042
awesome it is that I work at 
this program, that I volunteer,

2318
05:36:45,043 --> 05:36:49,177
or how good this program is.  I 
actually want all of you to

2319
05:36:49,731 --> 05:36:53,533
start copying this idea, and to 
set up a hack your future of

2320
05:36:53,739 --> 05:36:58,427
your own.  I think it's one of 
the best ways to empower people.

2321
05:36:58,720 --> 05:37:03,195
So how can you do that? You'll 
need a couple of ingredients.

2322
05:37:03,306 --> 05:37:06,243
First off, a convenient 
location.  It's important that

2323
05:37:06,606 --> 05:37:12,045
people can actually reach your 
location.  And a lot of these

2324
05:37:12,493 --> 05:37:15,078
people will be in camps, and 
they might not have a lot of

2325
05:37:15,225 --> 05:37:17,537
money or means of 
transportation.  So that's

2326
05:37:17,770 --> 05:37:20,961
important that you find a good 
location.  Secondly, you'll need

2327
05:37:21,122 --> 05:37:25,530
some laptops.  They don't need 
to be start of the art.  It's

2328
05:37:25,701 --> 05:37:29,763
better if developers don't have 
state of the art laptops so they

2329
05:37:29,896 --> 05:37:34,604
learn to develop for old people.
You'll need a program director,

2330
05:37:34,895 --> 05:37:38,024
or better yet, a team of people 
prepared to think about the hard

2331
05:37:38,025 --> 05:37:41,004
challenges that you might face 
to get everybody together.  We

2332
05:37:41,184 --> 05:37:47,200
can help you a bit with that.  
You'll need mentors, and it

2333
05:37:47,370 --> 05:37:51,563
seems like it might be difficult
to find people to volunteer,

2334
05:37:51,735 --> 05:37:55,327
especially on a Sunday.  But 
we've found that there's an

2335
05:37:55,478 --> 05:37:58,443
abundance of mentors.  People 
are happy to help.  There are

2336
05:37:58,590 --> 05:38:01,661
people from universities.  
There's people from companies.

2337
05:38:02,132 --> 05:38:05,142
There's people from any place 
you can think of.  A lot of

2338
05:38:05,482 --> 05:38:08,543
people with diverse backgrounds 
like to help out as well.  So we

2339
05:38:08,919 --> 05:38:13,141
have a very diverse group of 
mentors helping out.  And

2340
05:38:13,317 --> 05:38:18,471
students, of course.  This is 
the most important part.  It

2341
05:38:18,748 --> 05:38:22,066
might not be as easy as finding 
the mentors, because you need to

2342
05:38:22,183 --> 05:38:25,774
find people that have basic 
English skills, first.  That's

2343
05:38:26,258 --> 05:38:29,463
our minimum requirement.  But we
also want them to be very

2344
05:38:29,899 --> 05:38:32,726
motivated.  So we actually have 
them do a little test before

2345
05:38:33,180 --> 05:38:35,372
they're allowed to join our 
program.  And it's about

2346
05:38:35,860 --> 05:38:38,006
learning a skill on your own.  
So they have to prove that they

2347
05:38:38,125 --> 05:38:40,833
can do that within a certain 
amount of time.  And it's a task

2348
05:38:41,211 --> 05:38:46,041
that really anybody can 
complete, as long as they're

2349
05:38:46,367 --> 05:38:48,308
motivated.  
    I guess a lot of people will

2350
05:38:48,309 --> 05:38:51,487
ask, how do you get financial 
support? You don't need that

2351
05:38:51,648 --> 05:38:55,811
much money.  It's nice if some 
companies help out and donate

2352
05:38:56,301 --> 05:39:00,298
old laptops.  It's nice in the 
municipality helps out with the

2353
05:39:00,459 --> 05:39:05,218
rent a bit or gets you a 
location.  But ultimately, this

2354
05:39:05,902 --> 05:39:08,645
is definitely something that you
can overcome.  You would be

2355
05:39:08,773 --> 05:39:12,053
surprised at how many people 
want to help if you have a good

2356
05:39:12,329 --> 05:39:14,477
idea.  
    Of course you also need a

2357
05:39:14,631 --> 05:39:17,192
curriculum.  This is something 
that can be very difficult to

2358
05:39:17,193 --> 05:39:20,918
set up, but we've already done 
it for you.  So I'll show you a

2359
05:39:21,078 --> 05:39:24,285
link on our curriculum.  It's 
just something on GitHub.  It's

2360
05:39:24,526 --> 05:39:27,335
just a list of topics that we 
think is good to talk about.

2361
05:39:27,556 --> 05:39:34,468
But of course you can set up 
your own way of doing it.  So,

2362
05:39:34,661 --> 05:39:36,661
how would you do this? Just

2363
05:39:38,895 --> 05:39:44,791
like JSConf, you can say I like 
this idea and I want to do it in

2364
05:39:44,968 --> 05:39:47,888
my city.  So you fork the 
project, and if you want to know

2365
05:39:47,889 --> 05:39:49,889
how to get started, you

2366
05:39:53,205 --> 05:39:56,351
go to start code school, and 
there will be lots of tips and

2367
05:39:56,352 --> 05:39:59,113
documents and a set-up for a 
code of conduct.

2368
05:39:59,114 --> 05:40:03,257
There will be an article about 
how to deal with students who

2369
05:40:04,084 --> 05:40:07,578
have some trouble with staying 
in the country.  There will be

2370
05:40:07,869 --> 05:40:13,183
some tips on how to conduct 
yourself as a teacher.  So, we

2371
05:40:13,343 --> 05:40:15,343
strive to share all of the 
knowledge that we already have

2372
05:40:15,540 --> 05:40:20,603
here.  And we also have links to
all of the resources that we

2373
05:40:20,969 --> 05:40:22,692
use.  
    If you need some more help,

2374
05:40:22,693 --> 05:40:28,576
you can talk to me on Slack.  I 
think there should be a space

2375
05:40:29,199 --> 05:40:37,155
between Laurens and Aarnoudse, 
which is a very dutch name.  I

2376
05:40:37,356 --> 05:40:40,461
will be around for these two 
days, and I like to work

2377
05:40:40,637 --> 05:40:43,886
together with you and to create 
a better future.  Thank

2378
05:40:52,000 --> 05:40:56,075
>> Thank you so much for that 
talk.  I hope someone -- I don't

2379
05:40:56,761 --> 05:40:59,905
know, maybe me can bring that to
New York.  That would be

2380
05:41:00,093 --> 05:41:06,319
awesome.  Anyway, our next talk 
is from Kristjan.  He's going to

2381
05:41:06,320 --> 05:41:09,819
be talking about something cool 
that GitHub

2382
05:41:14,140 --> 05:41:18,379
could do.  
   >> Hello.  Oh my God, I can't

2383
05:41:18,606 --> 05:41:24,034
see my speaker notes.  That's 
fine.  Hey.  I work at GitHub,

2384
05:41:25,434 --> 05:41:29,145
but this talk isn't about me as 
an engineer at GitHub.  It's

2385
05:41:29,277 --> 05:41:31,277
more of a

2386
05:41:36,982 --> 05:41:40,624
user.  Before I started at 
GitHub, I would have these ideas

2387
05:41:42,079 --> 05:41:47,034
like, I wish GitHub could do 
this one thing.  And I would

2388
05:41:47,035 --> 05:41:50,424
write Chrome extensions to do 
these things.  But there's some

2389
05:41:50,425 --> 05:41:53,433
things -- there they are! 
There's some stuff that I

2390
05:41:53,545 --> 05:41:55,545
couldn't do as Chrome

2391
05:41:57,660 --> 05:42:04,322
extensions.  For those things, 
I've recently discovered this

2392
05:42:04,491 --> 05:42:09,521
library.  This is not the right 
clicker.  There you go.  It's

2393
05:42:09,711 --> 05:42:13,121
called pro BOT, and it's a 
library for GitHub to write

2394
05:42:13,496 --> 05:42:18,002
these GitHub applications.  And 
pro BOT does this by leveraging

2395
05:42:18,495 --> 05:42:24,146
web hooks and the GitHub API to 
give you the power to extend

2396
05:42:24,327 --> 05:42:26,327
guilt hub in a

2397
05:42:27,872 --> 05:42:34,667
-- GitHub in a simple way.  If 
something happens to GitHub,

2398
05:42:35,052 --> 05:42:38,062
proBOT gets a ping, and it will 
analyze what to do in the

2399
05:42:38,768 --> 05:42:43,191
situation, and maybe fire off 
events of its own.  I have a

2400
05:42:43,192 --> 05:42:47,329
little trivial example.  If we 
want to respond to every issue

2401
05:42:47,330 --> 05:42:51,560
opened in our repository, and 
let's just say hello.  A

2402
05:42:51,561 --> 05:42:55,514
welcoming message.  
We're going to build it right

2403
05:42:55,647 --> 05:43:03,960
now.  We have this module, and 
it takes in probot as an

2404
05:43:04,134 --> 05:43:07,626
argument or parameter.  We can 
attach event listeners on the

2405
05:43:07,750 --> 05:43:13,718
robot.  There's a list on the 
GitHub documentation page for

2406
05:43:13,963 --> 05:43:17,204
what you can listen to.  You're 
listening to if there's any

2407
05:43:17,688 --> 05:43:20,341
events opened.  We get this 
context with it.  With the

2408
05:43:20,572 --> 05:43:23,621
context, we can create a 
comment.  This is kind of

2409
05:43:23,942 --> 05:43:26,494
confusing, and I didn't 
understand this at first.  But

2410
05:43:26,685 --> 05:43:30,786
it just gives you an object back
that operates in the context of

2411
05:43:31,000 --> 05:43:36,783
this issue.  And we just give it
the body for the issue.  And

2412
05:43:46,730 --> 05:43:51,758
then just using GitHub API, it's
easy.  Create this comment.  We

2413
05:43:52,034 --> 05:43:56,218
can run this.  And every time 
someone opens up an issue where

2414
05:43:56,374 --> 05:44:00,867
this probot is installed, it 
will respond, thanks for

2415
05:44:14,271 --> 05:44:16,836
the issue.  There's a bunch of 
these BOTs out there.  Sometimes

2416
05:44:17,417 --> 05:44:21,035
they will close down the issues 
when nobody has commented the

2417
05:44:21,036 --> 05:44:23,825
issue.   for some days, and I 
have a problem that I really

2418
05:44:23,826 --> 05:44:32,303
want it to solve with probot.  
And it is related to ES lent.

2419
05:44:34,148 --> 05:44:37,539
I don't know if everybody here 
uses it, but I almost always use

2420
05:44:38,114 --> 05:44:42,522
it.  It will run in a build.  
And if someone broke an ES lent

2421
05:44:42,523 --> 05:44:49,701
rule, it will give you like a 
red status.  There's just one

2422
05:44:49,702 --> 05:44:53,019
problem with this: People can 
just disable the rules right

2423
05:44:53,020 --> 05:44:58,767
there in the code.  So this is a
project that I have where

2424
05:44:59,890 --> 05:45:05,037
somebody disabled the rules and 
did whatever they wanted.  I

2425
05:45:05,251 --> 05:45:07,834
understand that people need to 
get stuff done.  They're like, I

2426
05:45:08,010 --> 05:45:15,194
don't know how to do this.  I 
know how to use JQuery show.  I

2427
05:45:15,503 --> 05:45:18,673
don't know how to show and hide 
things.  I maybe would want it

2428
05:45:19,053 --> 05:45:23,059
to focus that you shouldn't do 
this.  Or, like, ping me and I

2429
05:45:23,246 --> 05:45:27,882
can explain how to do it 
correctly.  So, like, this

2430
05:45:28,323 --> 05:45:31,461
previous one, it just goes 
through and everything is green,

2431
05:45:31,582 --> 05:45:33,582
people

2432
05:45:35,076 --> 05:45:39,197
are great.  I, like I said, I 
would like for these to be

2433
05:45:39,494 --> 05:45:46,253
flagged.  So I wrote this 
probot.  I gave it a logo.  It's

2434
05:45:46,668 --> 05:45:53,272
an ESLint logo with the eyes 
emojiemoji.  When a pull request

2435
05:45:54,294 --> 05:46:02,448
comes in, it checks the diff, 
and if disable is in there, it

2436
05:46:02,946 --> 05:46:06,994
will comment on there.  There's 
a great thing.  If you install

2437
05:46:08,473 --> 05:46:13,098
probots into your repositories, 
you can give conflicts.  My

2438
05:46:13,818 --> 05:46:17,370
probot, you can change this 
message.  If you wanted to give

2439
05:46:17,744 --> 05:46:25,577
him like a little image, you can
do that.  You can @ the team

2440
05:46:25,748 --> 05:46:33,434
that should review this.  
Like @the JS team.  And if

2441
05:46:33,549 --> 05:46:35,549
they're like legitimate

2442
05:46:38,837 --> 05:46:45,628
ESLint disables.  This talk went
really fast.  You can find

2443
05:46:45,629 --> 05:46:49,481
probot on my GitHub, which is up
there.

2444
05:46:49,482 --> 05:46:51,482
Thank you.

2445
05:47:02,917 --> 05:47:04,917
lightning talks for today.  So 
I'm here to say that y'all can

2446
05:47:05,095 --> 05:47:09,156
leave early.  But I'm also here 
to promote the party happening,

2447
05:47:09,264 --> 05:47:09,496
and I
[ Applause ]

2448
05:47:09,497 --> 05:47:09,635
>> That's actually all of our 
lightning talks for today.  So

2449
05:47:09,636 --> 05:47:13,188
hope I can pronounce this right.
At

2450
05:47:17,124 --> 05:47:20,964
Egisgarour.  I tried.
It's in your leaflet.

2451
05:47:25,501 --> 05:47:30,118
And also, until around 6:30, 
there's going to be a bus coming

2452
05:47:30,386 --> 05:47:34,210
in from here, and also the hotel
to the party.

2453
05:47:34,211 --> 05:47:38,107
And dinner is also provided.  So
don't, you know, have dinner

2454
05:47:38,406 --> 05:47:42,464
before the party, unless you 
want to have a second dinner,

2455
05:47:42,591 --> 05:47:50,381
which I won't judge.  And Harpa 
opens tomorrow at 9:00.  I hope

