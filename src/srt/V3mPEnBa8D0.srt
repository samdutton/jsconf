1
00:00:37,860 --> 00:00:42,580

I'm Dan Sylvester and there is Lord and

2
00:00:42,580 --> 00:00:44,740
he'll join the talk shortly so we're

3
00:00:44,740 --> 00:00:46,300
here to talk about it was the original

4
00:00:46,300 --> 00:00:49,900
title was distributed parallel computing

5
00:00:49,900 --> 00:00:51,910
of a multi machines and multicores in

6
00:00:51,910 --> 00:00:54,010
javascript using node but i couldn't fit

7
00:00:54,010 --> 00:00:55,600
it on the slide 8 so any or so i'm

8
00:00:55,600 --> 00:00:58,180
assuming that you guys are here because

9
00:00:58,180 --> 00:01:00,450
you know computering is the card and

10
00:01:00,450 --> 00:01:02,829
we're getting to this point where we've

11
00:01:02,829 --> 00:01:06,250
lost the ability to you know just saying

12
00:01:06,250 --> 00:01:07,810
oh well my cpu is just getting faster

13
00:01:07,810 --> 00:01:09,580
and faster and faster so it's becoming

14
00:01:09,580 --> 00:01:11,170
more of a parallel processing world out

15
00:01:11,170 --> 00:01:15,370
there and so before we jumped it out who

16
00:01:15,370 --> 00:01:17,470
we are and this isn't really a plug but

17
00:01:17,470 --> 00:01:19,570
Gordon are both from a bit hound we're

18
00:01:19,570 --> 00:01:20,799
sponsoring here comes out with us

19
00:01:20,799 --> 00:01:23,020
afterwards you can follow us on twitter

20
00:01:23,020 --> 00:01:26,680
confuse minh and gore tanner and you

21
00:01:26,680 --> 00:01:29,229
might know us better from our cosmonaut

22
00:01:29,229 --> 00:01:31,150
survival kits that we've told out and i

23
00:01:31,150 --> 00:01:32,799
keep hearing the little lasers go off so

24
00:01:32,799 --> 00:01:37,299
thanks so what do we do and this isn't

25
00:01:37,299 --> 00:01:39,070
again a plug for a company but this is

26
00:01:39,070 --> 00:01:40,630
why we're here talking about distributed

27
00:01:40,630 --> 00:01:42,580
computing we are here to help you write

28
00:01:42,580 --> 00:01:44,770
better code but to do that we have to

29
00:01:44,770 --> 00:01:47,229
analyze all of your repositories and all

30
00:01:47,229 --> 00:01:50,619
of the code in them and that is a lot of

31
00:01:50,619 --> 00:01:53,049
work that needs to be done right so kind

32
00:01:53,049 --> 00:01:55,540
of a typical problem you want to run

33
00:01:55,540 --> 00:01:58,030
lint you have something that's never run

34
00:01:58,030 --> 00:01:59,710
length before and this is an actual case

35
00:01:59,710 --> 00:02:02,950
I just I won't name the project 73-68

36
00:02:02,950 --> 00:02:04,299
right that's how many lint or through

37
00:02:04,299 --> 00:02:06,070
and it took 29 seconds to run this now

38
00:02:06,070 --> 00:02:08,649
if we want to run this over another

39
00:02:08,649 --> 00:02:11,739
thousand commits and we have multiple

40
00:02:11,739 --> 00:02:13,689
multiple critics or analyzers that we

41
00:02:13,689 --> 00:02:15,400
run this becomes

42
00:02:15,400 --> 00:02:17,079
quite onerous and you know some of this

43
00:02:17,079 --> 00:02:18,430
processing if you were to do it

44
00:02:18,430 --> 00:02:20,739
sequentially will take two three four

45
00:02:20,739 --> 00:02:24,189
hours and you know waiting sucks and we

46
00:02:24,189 --> 00:02:28,269
hate it we're on patient people but we

47
00:02:28,269 --> 00:02:29,799
have a bit of a challenge in javascript

48
00:02:29,799 --> 00:02:31,079
in that you know we're single threaded

49
00:02:31,079 --> 00:02:36,129
so how do you go about processing many

50
00:02:36,129 --> 00:02:39,040
many many things and still you know

51
00:02:39,040 --> 00:02:41,170
making things performing well so there's

52
00:02:41,170 --> 00:02:43,599
the cluster if you i know'd anyone we

53
00:02:43,599 --> 00:02:46,510
use cluster at all okay that's pretty

54
00:02:46,510 --> 00:02:48,129
cool there's a little bit of overhead

55
00:02:48,129 --> 00:02:49,889
but it's kind of nifty kids essentially

56
00:02:49,889 --> 00:02:55,209
it's you know the profs calda exactly

57
00:02:55,209 --> 00:02:56,680
and it just allows you to spawn

58
00:02:56,680 --> 00:02:59,290
processes and can take advantage of all

59
00:02:59,290 --> 00:03:02,409
the cores on that one machine and that's

60
00:03:02,409 --> 00:03:05,260
nice but that means you just have to buy

61
00:03:05,260 --> 00:03:06,700
bigger and bigger and bigger servers

62
00:03:06,700 --> 00:03:08,170
that have more and more cores and they

63
00:03:08,170 --> 00:03:09,879
cost a lot of money and you know for

64
00:03:09,879 --> 00:03:12,670
startups that gets expensive so to the

65
00:03:12,670 --> 00:03:14,920
cloud all right let's let's go out there

66
00:03:14,920 --> 00:03:16,780
and and use a whole bunch of different

67
00:03:16,780 --> 00:03:19,980
machines and max all of those out and

68
00:03:19,980 --> 00:03:22,599
see if we can get performance to

69
00:03:22,599 --> 00:03:28,209
increase and go better and so that's

70
00:03:28,209 --> 00:03:30,879
kind of what we do and this is where is

71
00:03:30,879 --> 00:03:34,060
your cue comes in as anyone used is your

72
00:03:34,060 --> 00:03:37,540
omq oh awesome cool if you have that

73
00:03:37,540 --> 00:03:38,889
installed on your laptop's by the way

74
00:03:38,889 --> 00:03:40,799
you could actually joined a demo later

75
00:03:40,799 --> 00:03:43,959
so I you know I read the description the

76
00:03:43,959 --> 00:03:46,120
first time I saw cmq it's like looks

77
00:03:46,120 --> 00:03:48,400
like an embeddable networking library

78
00:03:48,400 --> 00:03:50,169
about acts like a concurrency framework

79
00:03:50,169 --> 00:03:52,599
wow that's a whole lot of buzz words and

80
00:03:52,599 --> 00:03:54,310
I don't know what any of this means so

81
00:03:54,310 --> 00:03:56,019
we started kind of looking into a deeper

82
00:03:56,019 --> 00:03:58,780
so this is totally legit this is off of

83
00:03:58,780 --> 00:04:01,510
their manual so you basically take TCP

84
00:04:01,510 --> 00:04:03,780
sockets you add some spandex cosmic rays

85
00:04:03,780 --> 00:04:07,299
illegal radioscope or yeah radioisotopes

86
00:04:07,299 --> 00:04:09,849
from secret soviet atomic city and then

87
00:04:09,849 --> 00:04:12,340
that all of that stuff together and you

88
00:04:12,340 --> 00:04:15,129
end up with zero and few sockets and

89
00:04:15,129 --> 00:04:19,359
really awesome things so essentially the

90
00:04:19,359 --> 00:04:21,070
sucks you know the carrier atomic

91
00:04:21,070 --> 00:04:24,610
messages across multiple transports like

92
00:04:24,610 --> 00:04:26,380
that's kind of a key here for us as well

93
00:04:26,380 --> 00:04:27,820
so you can do it in process

94
00:04:27,820 --> 00:04:29,260
inter-process tcp

95
00:04:29,260 --> 00:04:36,960
multicast and you can connect sockets

96
00:04:36,960 --> 00:04:39,190
well as many of them as you'd like and

97
00:04:39,190 --> 00:04:40,810
there's multiple patterns that you can

98
00:04:40,810 --> 00:04:43,180
den take advantage of it there's the fan

99
00:04:43,180 --> 00:04:45,460
out fan in and I'll talk about that

100
00:04:45,460 --> 00:04:48,310
that's part of gorgeous demo we can do

101
00:04:48,310 --> 00:04:51,490
pub sub task distribution and then

102
00:04:51,490 --> 00:04:54,370
obviously the standard a kind of request

103
00:04:54,370 --> 00:04:57,910
response and of course we apply and this

104
00:04:57,910 --> 00:05:00,910
is kind of the you know simple I've got

105
00:05:00,910 --> 00:05:02,320
some tasks to be done I'm going to send

106
00:05:02,320 --> 00:05:04,710
it out there whoever is out in the cloud

107
00:05:04,710 --> 00:05:07,060
that's available to do the work we'll

108
00:05:07,060 --> 00:05:08,650
just pick it up do what they need to do

109
00:05:08,650 --> 00:05:13,390
and come back the pub sub I'm sure all

110
00:05:13,390 --> 00:05:15,220
of you are familiar with it within bit

111
00:05:15,220 --> 00:05:18,130
hound we use that mainly for all of our

112
00:05:18,130 --> 00:05:19,840
stats so we've got all of these

113
00:05:19,840 --> 00:05:21,910
distributed nodes you know doing work or

114
00:05:21,910 --> 00:05:23,980
being idle or whatever and we want to

115
00:05:23,980 --> 00:05:25,870
understand you know what our performance

116
00:05:25,870 --> 00:05:27,070
is at the various oh so they all just

117
00:05:27,070 --> 00:05:28,960
publish their stats and we've kind of

118
00:05:28,960 --> 00:05:30,190
segregated that sits there and listens

119
00:05:30,190 --> 00:05:33,790
and you know provide us with our with

120
00:05:33,790 --> 00:05:36,430
our stats tooling but this is really

121
00:05:36,430 --> 00:05:41,320
where all of our work comes in and this

122
00:05:41,320 --> 00:05:43,300
is the fan out and then fan back in so

123
00:05:43,300 --> 00:05:46,570
what we do is we have batches of work

124
00:05:46,570 --> 00:05:48,010
that need to be done that's so you have

125
00:05:48,010 --> 00:05:50,590
a thousand commits that doesn't critics

126
00:05:50,590 --> 00:05:54,340
then we need to run we fan those out and

127
00:05:54,340 --> 00:05:55,810
you can do that in batches or you can go

128
00:05:55,810 --> 00:05:58,000
to all the once it's up to you we do

129
00:05:58,000 --> 00:05:59,260
ours and batches really to kind of

130
00:05:59,260 --> 00:06:02,230
maintain a shallower queue depth so we

131
00:06:02,230 --> 00:06:05,140
can better utilize multiple requests for

132
00:06:05,140 --> 00:06:08,410
repositories each one of our slaves goes

133
00:06:08,410 --> 00:06:10,930
off and does some work and when it's

134
00:06:10,930 --> 00:06:12,970
done it kind of response back and we

135
00:06:12,970 --> 00:06:15,340
aggregate all of those results and we

136
00:06:15,340 --> 00:06:17,430
end up with with what's on our website

137
00:06:17,430 --> 00:06:20,380
so that's going to be a quick run

138
00:06:20,380 --> 00:06:24,460
through what zeromq is and how we use it

139
00:06:24,460 --> 00:06:25,990
and how you can go about doing

140
00:06:25,990 --> 00:06:27,250
distributed computing but that was just

141
00:06:27,250 --> 00:06:30,040
a theory essentially so we can prep for

142
00:06:30,040 --> 00:06:32,620
Gords part of the talk so I've gone six

143
00:06:32,620 --> 00:06:35,030
minutes so you have an extra four

144
00:06:35,030 --> 00:06:38,480
give you nice of course I've prepped for

145
00:06:38,480 --> 00:06:41,750
an extra four minutes um so when dan

146
00:06:41,750 --> 00:06:45,590
told me we were doing this talk and said

147
00:06:45,590 --> 00:06:47,080
you're doing the code portion of

148
00:06:47,080 --> 00:06:49,580
distributed computing in JavaScript I

149
00:06:49,580 --> 00:06:52,100
thought this is going to be fun so he's

150
00:06:52,100 --> 00:06:53,960
like you just need to come up with a

151
00:06:53,960 --> 00:06:56,570
really awesome demo and my mind was

152
00:06:56,570 --> 00:06:58,550
racing I was like oh I could do like I

153
00:06:58,550 --> 00:06:59,750
don't know like what about Fibonacci

154
00:06:59,750 --> 00:07:01,520
that's not controversial in the know

155
00:07:01,520 --> 00:07:04,510
community but that would be boring so I

156
00:07:04,510 --> 00:07:07,670
racked my mind for a long time running

157
00:07:07,670 --> 00:07:09,980
different things in it actually the idea

158
00:07:09,980 --> 00:07:12,890
for my demo kind of came from a ride

159
00:07:12,890 --> 00:07:15,110
with my daughter taking her back from

160
00:07:15,110 --> 00:07:17,150
school she was sitting in the back and

161
00:07:17,150 --> 00:07:18,860
kind of little conversation is a good

162
00:07:18,860 --> 00:07:21,080
time to catch up with your kids and she

163
00:07:21,080 --> 00:07:23,900
just randomly asked me daddy how many

164
00:07:23,900 --> 00:07:28,880
letters are in 10 and being a incredibly

165
00:07:28,880 --> 00:07:34,460
common question I said 3y and so she

166
00:07:34,460 --> 00:07:36,500
sits back there and she goes well well

167
00:07:36,500 --> 00:07:41,510
if Penn has three letters and three has

168
00:07:41,510 --> 00:07:44,600
five letters and then we worked it out

169
00:07:44,600 --> 00:07:47,540
okay well five has four letters and four

170
00:07:47,540 --> 00:07:52,370
has four letters that works and I was

171
00:07:52,370 --> 00:07:56,000
thinking this is odd so

172
00:07:56,000 --> 00:07:58,400
we we worked we worked out a few more

173
00:07:58,400 --> 00:07:59,990
numbers and she's like almost another

174
00:07:59,990 --> 00:08:01,670
number i'm like i don't know like 13

175
00:08:01,670 --> 00:08:03,800
he's like oh that's a lot of letters and

176
00:08:03,800 --> 00:08:06,320
we worked through it and back and forth

177
00:08:06,320 --> 00:08:08,030
and they everything kept reducing down

178
00:08:08,030 --> 00:08:13,400
to four and this was such a amazing

179
00:08:13,400 --> 00:08:17,450
experience like I I had to take a

180
00:08:17,450 --> 00:08:18,920
picture of it because it was this

181
00:08:18,920 --> 00:08:20,840
serendipitous exchange between me and my

182
00:08:20,840 --> 00:08:22,460
daughter where I'm saying they're

183
00:08:22,460 --> 00:08:24,470
thinking I have to have a compelling

184
00:08:24,470 --> 00:08:26,630
awesome example for distributed

185
00:08:26,630 --> 00:08:28,910
processing and here's my daughter

186
00:08:28,910 --> 00:08:31,610
sitting in the back doing word games and

187
00:08:31,610 --> 00:08:34,460
number games with me so that that is

188
00:08:34,460 --> 00:08:36,890
actually my face my mind was blown that

189
00:08:36,890 --> 00:08:41,770
that this happened so the key is

190
00:08:41,770 --> 00:08:48,500
everything can be reduced to four I'm

191
00:08:48,500 --> 00:08:50,900
not I'm not one to preach a religion

192
00:08:50,900 --> 00:08:55,910
ought to you but just so you know there

193
00:08:55,910 --> 00:08:58,580
is a real livered religion saw on urban

194
00:08:58,580 --> 00:09:03,410
dictionary so it's legit called for ism

195
00:09:03,410 --> 00:09:06,230
it's a religion based solely on the

196
00:09:06,230 --> 00:09:09,860
worship of the ever cool for often

197
00:09:09,860 --> 00:09:12,680
involving telling tales and giving of

198
00:09:12,680 --> 00:09:15,290
muffins but we're a start-up so you can

199
00:09:15,290 --> 00:09:19,490
buy your own muffins so I decided you

200
00:09:19,490 --> 00:09:22,220
know what I'm going to create an NPM

201
00:09:22,220 --> 00:09:26,870
module called for ism I I created it

202
00:09:26,870 --> 00:09:30,140
kind of last week somehow 34 people

203
00:09:30,140 --> 00:09:33,260
download it today with without me even

204
00:09:33,260 --> 00:09:38,180
telling you about it so kudos I have no

205
00:09:38,180 --> 00:09:40,030
idea how people are downloading that but

206
00:09:40,030 --> 00:09:43,100
so this is the official launch of for

207
00:09:43,100 --> 00:09:46,520
ism for this talk only and don't ever

208
00:09:46,520 --> 00:09:49,220
use it so for those of you who know

209
00:09:49,220 --> 00:09:51,140
about 0 and Q if you do have the zeromq

210
00:09:51,140 --> 00:09:54,470
libs installed you can easily npm

211
00:09:54,470 --> 00:09:56,690
install for ism and you can participate

212
00:09:56,690 --> 00:10:00,080
in this demo it's also codes on G Tanner

213
00:10:00,080 --> 00:10:02,990
for ism not that you really want to look

214
00:10:02,990 --> 00:10:06,380
at that but give you a quick idea of

215
00:10:06,380 --> 00:10:08,089
this summer's going to be this bigger

216
00:10:08,089 --> 00:10:09,700
because

217
00:10:09,700 --> 00:10:16,760
my eyes are old so I need to create a

218
00:10:16,760 --> 00:10:21,250
couple a couple small modules so first I

219
00:10:21,250 --> 00:10:24,890
need to create a module to like take a

220
00:10:24,890 --> 00:10:28,550
number and were to fly it which is a new

221
00:10:28,550 --> 00:10:35,030
word for me so we'll start here and

222
00:10:35,030 --> 00:10:41,990
let's take ten and that returns me lo

223
00:10:41,990 --> 00:10:46,100
and behold 10 and because the word the

224
00:10:46,100 --> 00:10:48,050
number four is the greatest for you will

225
00:10:48,050 --> 00:10:54,680
notice that it also returns for but it

226
00:10:54,680 --> 00:10:56,480
works up to like really crazy big

227
00:10:56,480 --> 00:11:01,580
numbers 10 trillion 43 billion 252

228
00:11:01,580 --> 00:11:07,880
million 350 2356 so that was a fun

229
00:11:07,880 --> 00:11:09,380
module I didn't really write that so I

230
00:11:09,380 --> 00:11:11,630
can't take much credit I grabbed it off

231
00:11:11,630 --> 00:11:13,160
a blog post somewhere that's the wrong

232
00:11:13,160 --> 00:11:17,210
module oh that could have been bad I'm

233
00:11:17,210 --> 00:11:19,970
yeah so Andrew Hoyer if you're here

234
00:11:19,970 --> 00:11:22,190
thank you I didn't have to write that

235
00:11:22,190 --> 00:11:25,070
but it's a really really fugly looking

236
00:11:25,070 --> 00:11:27,200
code that that does that for me so we

237
00:11:27,200 --> 00:11:31,550
won't look at that ever again so also we

238
00:11:31,550 --> 00:11:33,830
needed to do the little game my daughter

239
00:11:33,830 --> 00:11:36,950
played and little that I realized that

240
00:11:36,950 --> 00:11:39,500
she was a prophet in this new religion

241
00:11:39,500 --> 00:11:42,820
that we're going to talk about

242
00:11:42,820 --> 00:11:45,680
enlightening us all so we can take our

243
00:11:45,680 --> 00:11:51,800
example 10 I'll pass the word 10 to four

244
00:11:51,800 --> 00:11:59,110
ism and will log that and it returns for

245
00:11:59,120 --> 00:12:01,130
now I know some of your kind of like

246
00:12:01,130 --> 00:12:03,350
what so I'm just like you're just kind

247
00:12:03,350 --> 00:12:05,750
of like huh so if I this kind of passing

248
00:12:05,750 --> 00:12:08,750
huh it'll expand out and we'll see a

249
00:12:08,750 --> 00:12:10,880
little exchange ahead where 10 has three

250
00:12:10,880 --> 00:12:13,940
letters three has 55 has four and four

251
00:12:13,940 --> 00:12:17,510
has four and of course I wanted to play

252
00:12:17,510 --> 00:12:19,279
around as like all cool like let's do

253
00:12:19,279 --> 00:12:22,610
that awesome like 13 example it's also

254
00:12:22,610 --> 00:12:26,720
for weird now I was playing around with

255
00:12:26,720 --> 00:12:28,339
this and I notice that there's there's

256
00:12:28,339 --> 00:12:30,230
some ones that take a little longer like

257
00:12:30,230 --> 00:12:36,860
one two three which could be also for so

258
00:12:36,860 --> 00:12:41,600
if i run node talk so this this example

259
00:12:41,600 --> 00:12:44,540
is really interesting where 23 has 11

260
00:12:44,540 --> 00:12:50,450
letters 11 at 66 has 33 has 55 has 4 and

261
00:12:50,450 --> 00:12:57,110
4 has for those seven steps and seven is

262
00:12:57,110 --> 00:13:01,960
really close to four it all relates

263
00:13:01,960 --> 00:13:06,860
because if i took if i took seven that

264
00:13:06,860 --> 00:13:10,880
took three steps and if i took three we

265
00:13:10,880 --> 00:13:13,490
all know that three I should save the

266
00:13:13,490 --> 00:13:16,490
file three took three steps whatever I

267
00:13:16,490 --> 00:13:17,660
thought it'd be funny I did actually

268
00:13:17,660 --> 00:13:21,200
prepare that so that's cool it's not

269
00:13:21,200 --> 00:13:22,310
really a distributed but it takes a

270
00:13:22,310 --> 00:13:23,720
little time and I'm like okay I want to

271
00:13:23,720 --> 00:13:27,970
I want to like four fly all the numbers

272
00:13:27,970 --> 00:13:33,170
so starting off I made this little

273
00:13:33,170 --> 00:13:34,610
program it's really not not a whole lot

274
00:13:34,610 --> 00:13:36,709
so I were to fly I'm 80 utils just to

275
00:13:36,709 --> 00:13:39,620
like log log the results so I'll keep

276
00:13:39,620 --> 00:13:42,560
track of my counts for one to a million

277
00:13:42,560 --> 00:13:45,850
I'm going to for ism were defy the X

278
00:13:45,850 --> 00:13:50,800
keep track of the turns and this node

279
00:13:50,800 --> 00:13:57,850
sample and there was light thank you for

280
00:13:57,850 --> 00:14:04,769
so that took about four seconds

281
00:14:04,779 --> 00:14:07,690
so obviously this is going to take a

282
00:14:07,690 --> 00:14:11,630
long time oh my gosh I am probably going

283
00:14:11,630 --> 00:14:14,389
to hell for this talk it took a little

284
00:14:14,389 --> 00:14:15,560
time and I was like just going to take a

285
00:14:15,560 --> 00:14:16,820
while and this is a distributed

286
00:14:16,820 --> 00:14:19,490
computing talk so let's kind of go let's

287
00:14:19,490 --> 00:14:21,079
do this first thing and we all played

288
00:14:21,079 --> 00:14:23,060
with cluster before so I took the same

289
00:14:23,060 --> 00:14:26,300
code you'll basically kind of see right

290
00:14:26,300 --> 00:14:29,449
here but word of Phi for ism counted

291
00:14:29,449 --> 00:14:31,339
pretty much the same code except I'm

292
00:14:31,339 --> 00:14:33,139
just grabbing the start and end from the

293
00:14:33,139 --> 00:14:36,709
process environments and then when I'm

294
00:14:36,709 --> 00:14:39,589
done I send it back on process so if if

295
00:14:39,589 --> 00:14:42,139
your clusters you have a blaster and he

296
00:14:42,139 --> 00:14:44,750
delegates to his slaves so I have a

297
00:14:44,750 --> 00:14:46,699
little send function where I just kind

298
00:14:46,699 --> 00:14:50,180
of fork off a new process sitting start

299
00:14:50,180 --> 00:14:51,949
and end and when I get the message back

300
00:14:51,949 --> 00:14:54,829
I'll call my callback and just to make

301
00:14:54,829 --> 00:14:57,589
this easy to do the synchronization i'm

302
00:14:57,589 --> 00:14:59,600
using the async library which we all

303
00:14:59,600 --> 00:15:01,310
love a bit hound it's an awesome library

304
00:15:01,310 --> 00:15:03,709
for doing callback management so I just

305
00:15:03,709 --> 00:15:15,260
let's do five million on my I opted for

306
00:15:15,260 --> 00:15:20,060
the cheap cpu on my act book air so just

307
00:15:20,060 --> 00:15:27,199
wait for it wait obviously when someone

308
00:15:27,199 --> 00:15:29,300
hits our website running this this

309
00:15:29,300 --> 00:15:33,050
religion 20 seconds a long time to wait

310
00:15:33,050 --> 00:15:35,600
for our response you see there's really

311
00:15:35,600 --> 00:15:37,100
not a whole lot I can do to optimize

312
00:15:37,100 --> 00:15:40,190
this like I could buy a bigger computer

313
00:15:40,190 --> 00:15:44,779
but I'm poor but then we're kind of

314
00:15:44,779 --> 00:15:46,459
limited to like how many cores we have

315
00:15:46,459 --> 00:15:48,890
and we could do distributed kind of like

316
00:15:48,890 --> 00:15:50,720
we have like a proxy in front of our

317
00:15:50,720 --> 00:15:52,670
like node server and it will like go to

318
00:15:52,670 --> 00:15:54,319
each one but i will have state i kind of

319
00:15:54,319 --> 00:15:56,149
want to go i want to do when you request

320
00:15:56,149 --> 00:15:59,329
like the supreme knowledge of the number

321
00:15:59,329 --> 00:16:01,069
for you want to know all the numbers at

322
00:16:01,069 --> 00:16:04,250
the same time so that's that's where the

323
00:16:04,250 --> 00:16:09,949
true beauty of for ism lies so basically

324
00:16:09,949 --> 00:16:11,870
there's a lot of code here just want to

325
00:16:11,870 --> 00:16:15,519
make it pretty but at the root of it

326
00:16:15,519 --> 00:16:17,180
you'll still see

327
00:16:17,180 --> 00:16:21,280
I still have this little thing here so

328
00:16:21,280 --> 00:16:24,710
counts loop over here return account

329
00:16:24,710 --> 00:16:27,410
size call back and then back on the

330
00:16:27,410 --> 00:16:31,400
slides where are we here so all I'm

331
00:16:31,400 --> 00:16:34,960
really doing is using the push-pull

332
00:16:34,960 --> 00:16:38,960
socket so zeromq sockets have basically

333
00:16:38,960 --> 00:16:41,000
we're called types and the types are not

334
00:16:41,000 --> 00:16:42,380
really what you would think of normal

335
00:16:42,380 --> 00:16:43,970
socket type a lot of socket libraries

336
00:16:43,970 --> 00:16:44,990
would be like oh you want your in

337
00:16:44,990 --> 00:16:48,650
process socket or you're like TCP socket

338
00:16:48,650 --> 00:16:50,480
your web socket one of the key

339
00:16:50,480 --> 00:16:52,700
components of zeromq is you kind of a

340
00:16:52,700 --> 00:16:55,970
sign like message balancing type so you

341
00:16:55,970 --> 00:16:58,670
have a push socket which is you can push

342
00:16:58,670 --> 00:17:00,800
out messages and a pole socket which

343
00:17:00,800 --> 00:17:03,560
will pull messages from a poor socket so

344
00:17:03,560 --> 00:17:05,690
this this kind of diagram here is really

345
00:17:05,690 --> 00:17:07,370
all I'm doing in this example where I

346
00:17:07,370 --> 00:17:09,680
have a task ventilator well I'll push

347
00:17:09,680 --> 00:17:11,720
out these like little batches of a

348
00:17:11,720 --> 00:17:14,330
million processors and i'll have my

349
00:17:14,330 --> 00:17:15,830
workers well just call pull and then

350
00:17:15,830 --> 00:17:22,490
push back to the ventilator so that's

351
00:17:22,490 --> 00:17:23,840
what you're seeing here where I pushed

352
00:17:23,840 --> 00:17:30,470
result back pull it on and then really

353
00:17:30,470 --> 00:17:34,700
all I'm doing is calling batches push so

354
00:17:34,700 --> 00:17:36,830
pretty much the same code i did in

355
00:17:36,830 --> 00:17:41,990
cluster and there was life so I'm going

356
00:17:41,990 --> 00:17:46,700
to start this guy up so so I made like

357
00:17:46,700 --> 00:17:48,200
any good library there's a command-line

358
00:17:48,200 --> 00:17:50,840
interface so we have basically our

359
00:17:50,840 --> 00:17:53,540
master and we have our slave so our

360
00:17:53,540 --> 00:17:56,030
Master will start up he'll sit there

361
00:17:56,030 --> 00:17:58,430
waiting for people to connect and we can

362
00:17:58,430 --> 00:18:02,240
start up slave so go for ism master so

363
00:18:02,240 --> 00:18:03,260
you're just going to sit there prompt

364
00:18:03,260 --> 00:18:06,010
for millions all the star up locally

365
00:18:06,010 --> 00:18:12,140
slave okay so I've like because I have

366
00:18:12,140 --> 00:18:14,780
four cores on this machine therefore so

367
00:18:14,780 --> 00:18:17,600
i have now i have eight because i have

368
00:18:17,600 --> 00:18:19,790
some of my other guys from enhanced

369
00:18:19,790 --> 00:18:21,650
joining so we can next if any of you

370
00:18:21,650 --> 00:18:24,590
actually happen to install for ism my IP

371
00:18:24,590 --> 00:18:32,700
is where we have here

372
00:18:32,710 --> 00:18:39,470
192 168 1 59 128 so we should have more

373
00:18:39,470 --> 00:18:43,970
people join in oh there oh wow there we

374
00:18:43,970 --> 00:18:45,980
go that's distributed computing right

375
00:18:45,980 --> 00:18:49,130
now so that was super cool so now where

376
00:18:49,130 --> 00:18:53,330
is zul the gatekeeper ok i dazzle the

377
00:18:53,330 --> 00:18:56,540
gatekeeper so just I've never had 32

378
00:18:56,540 --> 00:18:58,400
cores on this this is good like so what

379
00:18:58,400 --> 00:19:01,010
the heck let's do 20 million so let's do

380
00:19:01,010 --> 00:19:04,490
this so cross your fingers so this is

381
00:19:04,490 --> 00:19:06,710
going off you'll see you like like your

382
00:19:06,710 --> 00:19:07,880
processors are going to get little

383
00:19:07,880 --> 00:19:10,580
batches of jobs like so the force is

384
00:19:10,580 --> 00:19:14,090
with them they'll kind of go off we're

385
00:19:14,090 --> 00:19:16,700
kind of turn along here I built massive

386
00:19:16,700 --> 00:19:18,860
stats otherwise no one is just waiting

387
00:19:18,860 --> 00:19:27,500
oh there we go so so that that's pretty

388
00:19:27,500 --> 00:19:29,810
cool that took 16 seconds and i just did

389
00:19:29,810 --> 00:19:34,010
20 million of those so oh I well I'm

390
00:19:34,010 --> 00:19:35,720
astonished at that I'm just going to

391
00:19:35,720 --> 00:19:37,760
let's do like so another cool thing with

392
00:19:37,760 --> 00:19:40,880
0 mq so you notice that my master

393
00:19:40,880 --> 00:19:43,580
service i just killed this i'm not

394
00:19:43,580 --> 00:19:45,500
starting a server it's just a it's just

395
00:19:45,500 --> 00:19:48,230
basically a node command line and so I

396
00:19:48,230 --> 00:19:50,180
killed that entire process and all these

397
00:19:50,180 --> 00:19:52,490
slaves out here in the audience were

398
00:19:52,490 --> 00:19:57,320
like uh where'd he go but I I stopped it

399
00:19:57,320 --> 00:19:58,520
now i just started up again and they've

400
00:19:58,520 --> 00:20:01,010
all reckon ected and you'll notice that

401
00:20:01,010 --> 00:20:04,700
in my code I didn't really do that all I

402
00:20:04,700 --> 00:20:08,960
did was use call connect so we just

403
00:20:08,960 --> 00:20:12,140
connected like on port 1337 replying on

404
00:20:12,140 --> 00:20:15,560
1338 and that's all we did it's just a

405
00:20:15,560 --> 00:20:18,320
TCP socket hidden but all that crazy

406
00:20:18,320 --> 00:20:20,060
stuff if you've ever done like any

407
00:20:20,060 --> 00:20:22,400
socket work where you're like oh god the

408
00:20:22,400 --> 00:20:24,980
server like disconnected and I guess I

409
00:20:24,980 --> 00:20:26,900
got to reconnect and then get some state

410
00:20:26,900 --> 00:20:28,820
back all that's been handled for us

411
00:20:28,820 --> 00:20:30,740
through zeromq because these sockets are

412
00:20:30,740 --> 00:20:34,520
amazing so i'm gonna i'm going to start

413
00:20:34,520 --> 00:20:36,680
out on the scope I don't want go 100

414
00:20:36,680 --> 00:20:39,680
million 1,000 million w well i'm just

415
00:20:39,680 --> 00:20:41,870
going to at that run

416
00:20:41,870 --> 00:20:44,650
1000 million is a desert word for that

417
00:20:44,650 --> 00:20:54,770
billion so really s about it because

418
00:20:54,770 --> 00:20:58,640
Danna was a four minutes earlier I have

419
00:20:58,640 --> 00:21:03,110
four minutes left so really as this

420
00:21:03,110 --> 00:21:04,610
Trump's way like the cool thing about

421
00:21:04,610 --> 00:21:07,340
this if you uh if you are doing any kind

422
00:21:07,340 --> 00:21:09,170
of distributed work think of as you're

423
00:21:09,170 --> 00:21:10,610
designing your applications rather than

424
00:21:10,610 --> 00:21:13,730
thinking of request response start

425
00:21:13,730 --> 00:21:14,750
trying to think about if there's ways

426
00:21:14,750 --> 00:21:16,130
you can just kind of send a message

427
00:21:16,130 --> 00:21:18,679
we're infinitely familiar with how to

428
00:21:18,679 --> 00:21:20,600
send messages and JavaScript kind of go

429
00:21:20,600 --> 00:21:22,610
send this off here's a call back when

430
00:21:22,610 --> 00:21:26,179
you're done but think about send this

431
00:21:26,179 --> 00:21:28,400
off send this group of stuff off and

432
00:21:28,400 --> 00:21:29,809
here's a call back when I'm done and

433
00:21:29,809 --> 00:21:31,929
think of the power if you can have an

434
00:21:31,929 --> 00:21:34,460
unlimited number of people out there

435
00:21:34,460 --> 00:21:39,620
waiting to basically do your bidding wow

436
00:21:39,620 --> 00:21:41,840
that's a minute to do a billion that's

437
00:21:41,840 --> 00:21:44,240
cool that was awesome dude actually to

438
00:21:44,240 --> 00:21:48,620
add to that room Q is also not linux

439
00:21:48,620 --> 00:21:50,990
specific right so if you got a whole

440
00:21:50,990 --> 00:21:52,190
bunch of work that you need to get done

441
00:21:52,190 --> 00:21:53,570
and some of it is to happen on the

442
00:21:53,570 --> 00:21:56,059
windows box or you know on a Mac machine

443
00:21:56,059 --> 00:21:58,160
because Allah say when we're going to

444
00:21:58,160 --> 00:22:01,820
analyzing objective-c and whatnot you

445
00:22:01,820 --> 00:22:03,500
could totally do that it's just a

446
00:22:03,500 --> 00:22:05,780
message and those slaves that run on

447
00:22:05,780 --> 00:22:07,760
those systems will pick it up just like

448
00:22:07,760 --> 00:22:09,050
anything else if they know what to do

449
00:22:09,050 --> 00:22:11,780
with it let's go process it and respond

450
00:22:11,780 --> 00:22:13,370
back so you can kind of still keep your

451
00:22:13,370 --> 00:22:14,660
management and you're going to overall

452
00:22:14,660 --> 00:22:16,910
restoration and node I just love

453
00:22:16,910 --> 00:22:20,390
JavaScript so that that's about it thank

454
00:22:20,390 --> 00:22:23,300
you also we are launching our developer

455
00:22:23,300 --> 00:22:25,340
preview this is our pitch parts so if

456
00:22:25,340 --> 00:22:26,960
you are interested in helping us build

457
00:22:26,960 --> 00:22:29,090
one of the tools that are going to sit

458
00:22:29,090 --> 00:22:30,410
there and help you guys build the best

459
00:22:30,410 --> 00:22:32,690
software possible help us help you

460
00:22:32,690 --> 00:22:35,450
register for our developer preview a bit

461
00:22:35,450 --> 00:22:38,030
how no sighs preview and may the force

