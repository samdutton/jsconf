1
00:00:09,690 --> 00:00:12,250

good evening everyone it's really

2
00:00:12,250 --> 00:00:16,360
exciting to be here great crowd great

3
00:00:16,360 --> 00:00:18,520
conference so let's talk about

4
00:00:18,520 --> 00:00:22,420
performance a bit about me I put a lot

5
00:00:22,420 --> 00:00:24,430
of effort in this life obviously and I

6
00:00:24,430 --> 00:00:27,190
just keep it it's a long flight from LA

7
00:00:27,190 --> 00:00:30,210
right so you've probably heard that

8
00:00:30,210 --> 00:00:33,370
there's Mark Twain attributing this

9
00:00:33,370 --> 00:00:36,010
quote to the British Prime Minister

10
00:00:36,010 --> 00:00:38,980
Benjamin Disraeli saying that so he

11
00:00:38,980 --> 00:00:40,750
reportedly said that there's three kinds

12
00:00:40,750 --> 00:00:43,720
of life lized the damn lies and

13
00:00:43,720 --> 00:00:47,280
statistics so I think the same can be

14
00:00:47,280 --> 00:00:50,260
kind of applied to a performance because

15
00:00:50,260 --> 00:00:53,799
it's it's kind of easy to to read and

16
00:00:53,799 --> 00:00:56,559
follow performance advice out there but

17
00:00:56,559 --> 00:00:59,440
um things that are usually not that

18
00:00:59,440 --> 00:01:01,449
simple or maybe something that is is

19
00:01:01,449 --> 00:01:04,210
good or has been true for a while who is

20
00:01:04,210 --> 00:01:06,729
no longer true or it doesn't really

21
00:01:06,729 --> 00:01:09,880
matter and so let's talk about this

22
00:01:09,880 --> 00:01:12,159
thing so first we talked about the

23
00:01:12,159 --> 00:01:13,540
understanding the problem with

24
00:01:13,540 --> 00:01:15,759
performing some benchmarks and then give

25
00:01:15,759 --> 00:01:19,630
some just some pointers and ideas so the

26
00:01:19,630 --> 00:01:21,969
thing is that we are chasing moving

27
00:01:21,969 --> 00:01:24,359
targets all the time because browsers

28
00:01:24,359 --> 00:01:27,700
come out to come up with new versions in

29
00:01:27,700 --> 00:01:31,060
most excellent JavaScript engines and it

30
00:01:31,060 --> 00:01:34,329
is great for us libraries also change so

31
00:01:34,329 --> 00:01:38,320
John racing in one talk said that he

32
00:01:38,320 --> 00:01:40,630
read some advice that you know somebody

33
00:01:40,630 --> 00:01:43,030
was saying in jQuery you shouldn't do a

34
00:01:43,030 --> 00:01:45,280
but you should do B instead because a

35
00:01:45,280 --> 00:01:48,369
slower and beats faster and so he was

36
00:01:48,369 --> 00:01:50,679
kind of I don't know why wouldn't you

37
00:01:50,679 --> 00:01:54,340
use a right so he he came and optimized

38
00:01:54,340 --> 00:01:56,939
whatever was supposedly slow and

39
00:01:56,939 --> 00:01:59,499
committed a new version so it became

40
00:01:59,499 --> 00:02:01,299
actually as fast if not faster in

41
00:02:01,299 --> 00:02:03,999
certain browsers so this advice was good

42
00:02:03,999 --> 00:02:08,429
for an or maybe just a few days so she

43
00:02:08,429 --> 00:02:11,050
different browsers different libraries

44
00:02:11,050 --> 00:02:14,200
so one example of advice that is

45
00:02:14,200 --> 00:02:15,430
floating around

46
00:02:15,430 --> 00:02:19,750
the string concatenation people from

47
00:02:19,750 --> 00:02:22,180
Microsoft has talked about it a lot how

48
00:02:22,180 --> 00:02:24,819
it's it slower to concatenate strings

49
00:02:24,819 --> 00:02:27,519
but it's it's faster if you obtain

50
00:02:27,519 --> 00:02:30,189
everything to an array and then join the

51
00:02:30,189 --> 00:02:33,790
array at the end so this this was true

52
00:02:33,790 --> 00:02:37,450
in in ie6 but is no longer 397 and eight

53
00:02:37,450 --> 00:02:40,780
and and it all kinds of depends how big

54
00:02:40,780 --> 00:02:42,959
are the strings how large is the array

55
00:02:42,959 --> 00:02:46,239
which browser and so on a lot of

56
00:02:46,239 --> 00:02:48,790
conditions for this to be true so it

57
00:02:48,790 --> 00:02:52,150
reminds me of a book by terry pratchett

58
00:02:52,150 --> 00:02:56,079
were in this world they were saying that

59
00:02:56,079 --> 00:02:57,639
we have to do some objectivity in

60
00:02:57,639 --> 00:02:59,200
literature we cannot just say you're

61
00:02:59,200 --> 00:03:01,090
kinds of stuff so you're allowed to say

62
00:03:01,090 --> 00:03:02,879
that the pen is mightier than the sword

63
00:03:02,879 --> 00:03:06,069
only if you explain that not only is

64
00:03:06,069 --> 00:03:07,750
true is the sword is very small and the

65
00:03:07,750 --> 00:03:11,650
pain is really sharp front so a bit

66
00:03:11,650 --> 00:03:14,319
about benchmarking so that's the the

67
00:03:14,319 --> 00:03:16,689
most common pattern maybe when people

68
00:03:16,689 --> 00:03:20,019
are doing benchmarks you take the start

69
00:03:20,019 --> 00:03:24,430
date you do some crazy repetitions and

70
00:03:24,430 --> 00:03:27,449
do something and then take the end time

71
00:03:27,449 --> 00:03:30,870
so kind of a problem with that is that

72
00:03:30,870 --> 00:03:33,310
you're not actually releasing the thread

73
00:03:33,310 --> 00:03:35,790
you're taking the end time right after

74
00:03:35,790 --> 00:03:38,319
something is completed but does the user

75
00:03:38,319 --> 00:03:40,150
see anything especially when it comes to

76
00:03:40,150 --> 00:03:43,120
dumb operations so maybe these are

77
00:03:43,120 --> 00:03:45,040
performed in memory but nothing is

78
00:03:45,040 --> 00:03:49,329
painted on the on the screen yet so the

79
00:03:49,329 --> 00:03:51,489
user is not really seeing any difference

80
00:03:51,489 --> 00:03:53,799
so when you start taking the end time

81
00:03:53,799 --> 00:03:57,329
with a just a set time time out of 0

82
00:03:57,329 --> 00:04:02,889
then then you're releasing the thread

83
00:04:02,889 --> 00:04:04,780
and taking the end time you're letting

84
00:04:04,780 --> 00:04:07,419
the browser finish whatever painting and

85
00:04:07,419 --> 00:04:10,650
rendering and get a much more realistic

86
00:04:10,650 --> 00:04:12,909
figure about what the user is

87
00:04:12,909 --> 00:04:15,970
experiencing so will be about the zero

88
00:04:15,970 --> 00:04:18,970
time out so there's no such thing as a

89
00:04:18,970 --> 00:04:19,600
zero

90
00:04:19,600 --> 00:04:21,880
right when you say time out of 0 you're

91
00:04:21,880 --> 00:04:23,920
actually saying executed as soon as

92
00:04:23,920 --> 00:04:29,530
possible and this figure can be

93
00:04:29,530 --> 00:04:31,420
different in across different browsers

94
00:04:31,420 --> 00:04:34,450
and for example zero time out is about

95
00:04:34,450 --> 00:04:38,710
15 milliseconds in IM so that's that's

96
00:04:38,710 --> 00:04:42,270
also kind of important to to have

97
00:04:42,270 --> 00:04:45,430
whatever your benchmarking to be long

98
00:04:45,430 --> 00:04:47,320
enough take much more than 15

99
00:04:47,320 --> 00:04:48,910
milliseconds because if you do a test

100
00:04:48,910 --> 00:04:50,830
and say all this one took 15

101
00:04:50,830 --> 00:04:52,360
milliseconds the other one took 16

102
00:04:52,360 --> 00:04:54,400
milliseconds then it's probably it'd

103
00:04:54,400 --> 00:04:56,920
just be ice clock is not picking up

104
00:04:56,920 --> 00:04:59,770
quickly so you're actually you have no

105
00:04:59,770 --> 00:05:02,440
idea which one was better and it's

106
00:05:02,440 --> 00:05:05,050
always good idea to do enough tests it's

107
00:05:05,050 --> 00:05:07,930
usually 200 rounds of the same test to

108
00:05:07,930 --> 00:05:09,970
get the statistically significant result

109
00:05:09,970 --> 00:05:13,300
and then it's also important to filter

110
00:05:13,300 --> 00:05:16,720
any outliers will you have some too big

111
00:05:16,720 --> 00:05:20,920
figures or too small so there's several

112
00:05:20,920 --> 00:05:23,730
ways once you have run a whole bunch of

113
00:05:23,730 --> 00:05:28,270
runs in a test to consider what you're

114
00:05:28,270 --> 00:05:29,830
going to do with the results and the

115
00:05:29,830 --> 00:05:33,160
most common the thing that people do is

116
00:05:33,160 --> 00:05:35,880
taking the average which is not really

117
00:05:35,880 --> 00:05:38,920
descriptive of anything because it's a

118
00:05:38,920 --> 00:05:40,540
made-up number right it's an average of

119
00:05:40,540 --> 00:05:43,510
a phone number of runs so it's the

120
00:05:43,510 --> 00:05:45,190
easiest thing is to do to take the

121
00:05:45,190 --> 00:05:48,130
medium basically just sort the array of

122
00:05:48,130 --> 00:05:50,290
all the results and pick the value in

123
00:05:50,290 --> 00:05:52,750
the middle because it's it's actually a

124
00:05:52,750 --> 00:05:56,560
real test and or if you're going to take

125
00:05:56,560 --> 00:05:58,510
the average it's a good idea to filter

126
00:05:58,510 --> 00:06:00,820
the outliers basically sort all the

127
00:06:00,820 --> 00:06:03,220
results remove the first quarter in the

128
00:06:03,220 --> 00:06:06,700
last quarter so something like this

129
00:06:06,700 --> 00:06:08,980
right when you're going to sort all the

130
00:06:08,980 --> 00:06:10,840
results in your total weight of the

131
00:06:10,840 --> 00:06:12,400
beginning in the end because these are

132
00:06:12,400 --> 00:06:17,350
kind of outliers so if somewhere have

133
00:06:17,350 --> 00:06:18,720
been

134
00:06:18,720 --> 00:06:23,410
in doing this test for for Firefox right

135
00:06:23,410 --> 00:06:25,540
how long it's just nothing just a time

136
00:06:25,540 --> 00:06:29,020
out of 0 to see how much it takes so the

137
00:06:29,020 --> 00:06:31,180
median value is exactly 10 seconds then

138
00:06:31,180 --> 00:06:34,600
the average is kind of different in the

139
00:06:34,600 --> 00:06:36,790
average after filtering the outliers and

140
00:06:36,790 --> 00:06:39,520
so you can see that sometimes because I

141
00:06:39,520 --> 00:06:42,160
was maybe is crawling or opening far

142
00:06:42,160 --> 00:06:44,920
above something that took the a little

143
00:06:44,920 --> 00:06:47,950
bit more time than usual so if you take

144
00:06:47,950 --> 00:06:50,020
the average without filtering those kind

145
00:06:50,020 --> 00:06:53,380
of values it's probably not getting a

146
00:06:53,380 --> 00:07:00,940
realistic value so about benchmark so

147
00:07:00,940 --> 00:07:03,370
well because we're developers right we

148
00:07:03,370 --> 00:07:06,160
build website so i don't think it's our

149
00:07:06,160 --> 00:07:09,010
duty to benchmark different browsers

150
00:07:09,010 --> 00:07:12,060
right we can leave the browser vendors

151
00:07:12,060 --> 00:07:16,660
compete with their benchmarks and just

152
00:07:16,660 --> 00:07:18,250
leave it to them because when your

153
00:07:18,250 --> 00:07:20,170
application around seen in one browser

154
00:07:20,170 --> 00:07:21,760
right that's the browser you have to

155
00:07:21,760 --> 00:07:23,710
make it as fast as possible in this

156
00:07:23,710 --> 00:07:25,570
specific browser you don't care that it

157
00:07:25,570 --> 00:07:28,420
might take much less time in some other

158
00:07:28,420 --> 00:07:31,720
browser in the actual time values are

159
00:07:31,720 --> 00:07:33,220
really not important you don't care if

160
00:07:33,220 --> 00:07:35,500
some something takes 50 milliseconds or

161
00:07:35,500 --> 00:07:38,110
a hundred it's usually the best idea

162
00:07:38,110 --> 00:07:41,530
that i found is that you have fun you

163
00:07:41,530 --> 00:07:43,690
have a problem and you can solve it in

164
00:07:43,690 --> 00:07:46,120
different ways let's say you can do a or

165
00:07:46,120 --> 00:07:48,820
you can do B and the question is which

166
00:07:48,820 --> 00:07:52,630
one of them is faster and is it really

167
00:07:52,630 --> 00:07:54,850
consistently faster across browsers and

168
00:07:54,850 --> 00:07:57,640
how how much faster it is is it just ten

169
00:07:57,640 --> 00:07:59,260
percent twenty percent or is it

170
00:07:59,260 --> 00:08:01,060
something that is you know five times

171
00:08:01,060 --> 00:08:03,600
faster or 100 times faster and I think

172
00:08:03,600 --> 00:08:06,430
for most applications unless of course

173
00:08:06,430 --> 00:08:08,830
you're doing some some games and stuff

174
00:08:08,830 --> 00:08:12,580
like this for most applications you only

175
00:08:12,580 --> 00:08:16,360
need to worry about big differences when

176
00:08:16,360 --> 00:08:18,070
something is taking really read a lot of

177
00:08:18,070 --> 00:08:20,200
time so I just wanted to give a shout

178
00:08:20,200 --> 00:08:23,320
out to Jas perf calm

179
00:08:23,320 --> 00:08:25,270
if you have seen this website it's

180
00:08:25,270 --> 00:08:28,180
really nice and just built with with

181
00:08:28,180 --> 00:08:31,330
that idea in mind that you have fun you

182
00:08:31,330 --> 00:08:33,070
can just test the different cases right

183
00:08:33,070 --> 00:08:35,950
so you can do a B or C D you can do a

184
00:08:35,950 --> 00:08:40,260
lot of tests and it's a community-driven

185
00:08:40,260 --> 00:08:44,530
project you can see you get a static URL

186
00:08:44,530 --> 00:08:47,380
then you can share people can clone the

187
00:08:47,380 --> 00:08:50,260
test and into something on top of it

188
00:08:50,260 --> 00:08:53,320
modify and so on and then at the end the

189
00:08:53,320 --> 00:08:55,480
results are sent to browser scope so you

190
00:08:55,480 --> 00:08:57,910
can ask your friends or whoever to to

191
00:08:57,910 --> 00:08:59,650
load it in people from the community

192
00:08:59,650 --> 00:09:01,810
that will load the site in different

193
00:09:01,810 --> 00:09:03,790
browsers then you get a nice statistic

194
00:09:03,790 --> 00:09:07,870
or how this thing behaves in across

195
00:09:07,870 --> 00:09:13,390
browsers so that's about benchmarking so

196
00:09:13,390 --> 00:09:18,370
how about the real life because

197
00:09:18,370 --> 00:09:21,310
benchmarks are already made up cases

198
00:09:21,310 --> 00:09:24,070
right and they're not real applications

199
00:09:24,070 --> 00:09:26,140
so there's always a risk that you'll be

200
00:09:26,140 --> 00:09:28,330
making benchmarking the wrong thing or

201
00:09:28,330 --> 00:09:31,720
if you decided is faster than B you have

202
00:09:31,720 --> 00:09:34,690
to see how relatively how important that

203
00:09:34,690 --> 00:09:38,380
is so the best way is to just profile

204
00:09:38,380 --> 00:09:42,220
writing in Firebug we have the profiler

205
00:09:42,220 --> 00:09:45,430
you can sort by how much time everything

206
00:09:45,430 --> 00:09:49,420
takes you have the functions so you know

207
00:09:49,420 --> 00:09:53,140
where your time is spent the same in web

208
00:09:53,140 --> 00:09:56,650
inspector and the cool thing here is

209
00:09:56,650 --> 00:09:59,560
that it in addition to that it also

210
00:09:59,560 --> 00:10:02,140
gives you the time that the time it

211
00:10:02,140 --> 00:10:04,830
takes for JavaScript to execute and

212
00:10:04,830 --> 00:10:07,420
gives you the rendering in painting time

213
00:10:07,420 --> 00:10:10,330
and also recalculating styles and that

214
00:10:10,330 --> 00:10:11,590
kind of stuff something that was missing

215
00:10:11,590 --> 00:10:14,410
probably year two years ago had no idea

216
00:10:14,410 --> 00:10:15,520
what's what's going on with the

217
00:10:15,520 --> 00:10:16,680
rendering can

218
00:10:16,680 --> 00:10:19,860
at the painting that's similar tool

219
00:10:19,860 --> 00:10:24,000
there is a speed tracer for for chrome

220
00:10:24,000 --> 00:10:29,339
Chrome extension and this is for I die

221
00:10:29,339 --> 00:10:33,149
no trace Ajax edition really cool it

222
00:10:33,149 --> 00:10:35,399
gives you the normal network waterfall

223
00:10:35,399 --> 00:10:38,459
but in addition it also tells you how

224
00:10:38,459 --> 00:10:42,630
much CPU you need how much time

225
00:10:42,630 --> 00:10:44,760
javascript takes and also ND in your

226
00:10:44,760 --> 00:10:47,190
rendering painting recalculating styles

227
00:10:47,190 --> 00:10:49,649
so the thing about it it's so detailed

228
00:10:49,649 --> 00:10:53,970
that it can be kind of hard to figure

229
00:10:53,970 --> 00:10:55,709
out at the beginning it just gives you

230
00:10:55,709 --> 00:11:00,120
so much data tool to work with so what

231
00:11:00,120 --> 00:11:03,600
I'm trying to say I guess is that we

232
00:11:03,600 --> 00:11:05,490
should be picking our battles right

233
00:11:05,490 --> 00:11:10,200
because there's this line of thought

234
00:11:10,200 --> 00:11:13,320
that says that anything you do sub

235
00:11:13,320 --> 00:11:15,950
optimally is a disservice to the users

236
00:11:15,950 --> 00:11:18,480
only love our users they're just guests

237
00:11:18,480 --> 00:11:20,970
to our pages so we have to treat them

238
00:11:20,970 --> 00:11:23,339
well and it's just a disservice to to

239
00:11:23,339 --> 00:11:26,250
send more bites they need it or or do

240
00:11:26,250 --> 00:11:29,730
something that is not optimal but this

241
00:11:29,730 --> 00:11:31,290
assumes that you have indefinite

242
00:11:31,290 --> 00:11:34,980
resources to work on that on speeding up

243
00:11:34,980 --> 00:11:36,930
and and also the results are diminishing

244
00:11:36,930 --> 00:11:39,870
with time so if you what kind of the

245
00:11:39,870 --> 00:11:42,089
time you spend optimizing and the effect

246
00:11:42,089 --> 00:11:43,290
that you get it's something like this

247
00:11:43,290 --> 00:11:45,570
with just a little bit of effort you get

248
00:11:45,570 --> 00:11:47,970
really beneficial results and then from

249
00:11:47,970 --> 00:11:50,250
there you put more effort than the

250
00:11:50,250 --> 00:11:55,380
results are relatively small so the

251
00:11:55,380 --> 00:11:57,930
other side to that is that you don't

252
00:11:57,930 --> 00:11:59,730
have indefinite resources right as you

253
00:11:59,730 --> 00:12:03,029
have a bunch of people for for working

254
00:12:03,029 --> 00:12:05,579
on this website so in a way if you spend

255
00:12:05,579 --> 00:12:08,610
too much time micro optimizing or and

256
00:12:08,610 --> 00:12:12,510
nano optimizing then this is also a

257
00:12:12,510 --> 00:12:14,490
disservice to the user because you could

258
00:12:14,490 --> 00:12:15,779
have done something else instead like

259
00:12:15,779 --> 00:12:18,450
make the site more accessible or user

260
00:12:18,450 --> 00:12:22,040
friendly implementing new features

261
00:12:22,040 --> 00:12:25,610
so let's talk quickly about how to speed

262
00:12:25,610 --> 00:12:29,240
up just just some pointers right so when

263
00:12:29,240 --> 00:12:31,100
you talk about speeding up JavaScript

264
00:12:31,100 --> 00:12:35,089
you you can think about two sides of it

265
00:12:35,089 --> 00:12:37,220
first is to load that JavaScript on the

266
00:12:37,220 --> 00:12:41,089
page and then once it's loaded to make

267
00:12:41,089 --> 00:12:45,370
sure that it runs as quickly as you can

268
00:12:45,370 --> 00:12:48,980
so the loading I'm pretty sure you're

269
00:12:48,980 --> 00:12:50,420
all familiar with the Yahoo best

270
00:12:50,420 --> 00:12:53,329
practices right but I just felt obliged

271
00:12:53,329 --> 00:12:55,519
to to just list them out right reducing

272
00:12:55,519 --> 00:12:57,139
the number of requests combining script

273
00:12:57,139 --> 00:12:59,750
g zipping minifying setting the far

274
00:12:59,750 --> 00:13:02,209
future expires header and if you have

275
00:13:02,209 --> 00:13:07,160
the budget use a CDN so this is most

276
00:13:07,160 --> 00:13:09,410
likely to give the biggest benefit right

277
00:13:09,410 --> 00:13:11,899
so once you you've done all those basics

278
00:13:11,899 --> 00:13:14,870
then you can move to other stuff for

279
00:13:14,870 --> 00:13:17,180
example to load the JavaScript

280
00:13:17,180 --> 00:13:18,740
asynchronously right because a

281
00:13:18,740 --> 00:13:22,190
synchronous is good the users are seeing

282
00:13:22,190 --> 00:13:25,250
some sort of progress they see something

283
00:13:25,250 --> 00:13:28,760
is render than JavaScript kick seen kind

284
00:13:28,760 --> 00:13:31,550
of enhances the page and they have the

285
00:13:31,550 --> 00:13:34,610
perception that something is is going on

286
00:13:34,610 --> 00:13:37,370
and the page is responsive and the

287
00:13:37,370 --> 00:13:41,839
application feels snap here so the

288
00:13:41,839 --> 00:13:43,160
problem with JavaScript of course

289
00:13:43,160 --> 00:13:45,800
especially in not the latest generation

290
00:13:45,800 --> 00:13:48,680
of browsers is that JavaScript blocks

291
00:13:48,680 --> 00:13:51,050
all the other downloads so if you have

292
00:13:51,050 --> 00:13:53,779
images and so on the browser will stop

293
00:13:53,779 --> 00:13:55,610
all the parts you know downloads until

294
00:13:55,610 --> 00:13:58,399
it finishes with JavaScript and the

295
00:13:58,399 --> 00:14:00,139
easiest thing is to just move the

296
00:14:00,139 --> 00:14:02,360
JavaScript way at the bottom where

297
00:14:02,360 --> 00:14:04,430
there's nothing left to block right and

298
00:14:04,430 --> 00:14:08,870
just allow images to load meanwhile so

299
00:14:08,870 --> 00:14:13,370
now you have to kind of newer attributes

300
00:14:13,370 --> 00:14:16,250
for script tags differ and acing so the

301
00:14:16,250 --> 00:14:18,500
first is been around since forever in IE

302
00:14:18,500 --> 00:14:21,680
it's an IE innovation so you basically

303
00:14:21,680 --> 00:14:24,009
when you when you say script before

304
00:14:24,009 --> 00:14:26,569
you're actually saying that it's okay

305
00:14:26,569 --> 00:14:29,509
not to load that script right away you

306
00:14:29,509 --> 00:14:30,019
don't

307
00:14:30,019 --> 00:14:33,709
needed it can it can proceed with the

308
00:14:33,709 --> 00:14:37,279
other downloads but you want the order

309
00:14:37,279 --> 00:14:38,720
of the different scripts to be

310
00:14:38,720 --> 00:14:43,309
maintained so the async is the new html5

311
00:14:43,309 --> 00:14:46,910
attribute where you just say you know I

312
00:14:46,910 --> 00:14:49,189
don't care when it's loaded loaded when

313
00:14:49,189 --> 00:14:51,920
you can and then you have a callback on

314
00:14:51,920 --> 00:14:55,879
low tool to execute whenever let script

315
00:14:55,879 --> 00:14:59,689
arise so in terms of timing the

316
00:14:59,689 --> 00:15:01,730
difference crypts I mean first they

317
00:15:01,730 --> 00:15:03,799
maintain the order and then they will be

318
00:15:03,799 --> 00:15:05,600
executed in order that they appear on

319
00:15:05,600 --> 00:15:07,670
the page before the dump content loaded

320
00:15:07,670 --> 00:15:11,480
event and all these synchronous scripts

321
00:15:11,480 --> 00:15:14,299
will probably not be in any particular

322
00:15:14,299 --> 00:15:17,540
order whatever arrives first will be

323
00:15:17,540 --> 00:15:22,069
executed but before the load event so

324
00:15:22,069 --> 00:15:24,290
meanwhile before all the browser start

325
00:15:24,290 --> 00:15:28,100
supporting the new tags you can you can

326
00:15:28,100 --> 00:15:29,959
load this influence JavaScript using a

327
00:15:29,959 --> 00:15:34,759
dynamic script at and in this way it

328
00:15:34,759 --> 00:15:37,749
doesn't block so another kind of related

329
00:15:37,749 --> 00:15:40,459
technique is to use the HTTP Chung

330
00:15:40,459 --> 00:15:43,490
encoding and kind of flush part of the

331
00:15:43,490 --> 00:15:47,240
page as soon as something is ready so

332
00:15:47,240 --> 00:15:49,399
that allows you to allow the browser to

333
00:15:49,399 --> 00:15:50,869
start downloading components before

334
00:15:50,869 --> 00:15:55,910
everything is is downloaded so it's

335
00:15:55,910 --> 00:15:58,639
really easy to do that in PHP in every

336
00:15:58,639 --> 00:16:00,230
every server sign language you have

337
00:16:00,230 --> 00:16:01,399
something like this where you can say

338
00:16:01,399 --> 00:16:05,119
okay this is the my partial content /

339
00:16:05,119 --> 00:16:08,269
whatever you have to the browser and how

340
00:16:08,269 --> 00:16:12,410
this is it's used across a lot of big

341
00:16:12,410 --> 00:16:14,419
sites but in my opinion it's not used

342
00:16:14,419 --> 00:16:18,379
enough so we should be using more so

343
00:16:18,379 --> 00:16:20,509
this is the google search page so as

344
00:16:20,509 --> 00:16:23,629
soon as you type something and hit enter

345
00:16:23,629 --> 00:16:26,629
they they're still not ready with the

346
00:16:26,629 --> 00:16:29,119
search results but they will just flash

347
00:16:29,119 --> 00:16:31,459
the header as soon as possible so that

348
00:16:31,459 --> 00:16:33,350
you have the feeling that oh it's

349
00:16:33,350 --> 00:16:35,269
responding right away right it something

350
00:16:35,269 --> 00:16:37,160
happened so you have

351
00:16:37,160 --> 00:16:40,160
this feeling of control and you you know

352
00:16:40,160 --> 00:16:41,690
what's going on on the page so meanwhile

353
00:16:41,690 --> 00:16:42,680
they're working on the search results

354
00:16:42,680 --> 00:16:45,829
and in the second chunk they're sending

355
00:16:45,829 --> 00:16:48,829
all the search results and in the last

356
00:16:48,829 --> 00:16:50,870
final chunk it's they just load the

357
00:16:50,870 --> 00:16:54,199
javascript which if you don't get the

358
00:16:54,199 --> 00:16:56,060
last chunk you still have a usable page

359
00:16:56,060 --> 00:16:58,100
you can click on it if you follow the

360
00:16:58,100 --> 00:17:00,620
links with if you have a slow Wi-Fi

361
00:17:00,620 --> 00:17:04,610
connection you can still use the page

362
00:17:04,610 --> 00:17:08,000
although it's not in in in the state

363
00:17:08,000 --> 00:17:10,510
that it's the most beautiful in usable

364
00:17:10,510 --> 00:17:13,610
so something like this happens where you

365
00:17:13,610 --> 00:17:17,630
have the first the first chunk is

366
00:17:17,630 --> 00:17:19,459
containing just the header and stuff

367
00:17:19,459 --> 00:17:21,439
then you have the full body of the page

368
00:17:21,439 --> 00:17:23,569
and then in the end either with the

369
00:17:23,569 --> 00:17:25,669
script tag or asynchronously you load

370
00:17:25,669 --> 00:17:30,020
the JavaScript so unfortunately I think

371
00:17:30,020 --> 00:17:32,000
we're kind of lacking the tools to

372
00:17:32,000 --> 00:17:34,070
figure that out so I can show you

373
00:17:34,070 --> 00:17:38,210
something it's really ugly and kind of

374
00:17:38,210 --> 00:17:41,120
buggy but there's this tool that I did

375
00:17:41,120 --> 00:17:43,549
chunked view right that allows you to

376
00:17:43,549 --> 00:17:49,400
hit a page and then then she see the

377
00:17:49,400 --> 00:17:52,940
different chunks in that page so you can

378
00:17:52,940 --> 00:17:54,740
see those this is the google search

379
00:17:54,740 --> 00:17:56,890
results page right so you can see in the

380
00:17:56,890 --> 00:18:00,200
the unzipped encoding at the end so you

381
00:18:00,200 --> 00:18:03,610
see how in the very last chunk you get

382
00:18:03,610 --> 00:18:06,049
you get the the external javascript

383
00:18:06,049 --> 00:18:08,299
being over there and it's mainly just

384
00:18:08,299 --> 00:18:09,950
JavaScript like all the content is

385
00:18:09,950 --> 00:18:11,830
loaded so this is kind of interesting

386
00:18:11,830 --> 00:18:16,360
you see all those data URI images right

387
00:18:16,360 --> 00:18:18,500
the baby your eyes is a good way to

388
00:18:18,500 --> 00:18:20,150
reduce the number of requests and its

389
00:18:20,150 --> 00:18:22,760
really really important so important in

390
00:18:22,760 --> 00:18:25,150
fact that

391
00:18:25,150 --> 00:18:28,250
it's kind of interesting what Google are

392
00:18:28,250 --> 00:18:31,789
doing so let me show you if you so if

393
00:18:31,789 --> 00:18:34,880
you load at page right there's no other

394
00:18:34,880 --> 00:18:36,620
than the spry there's no additional

395
00:18:36,620 --> 00:18:39,110
image requests right and the page has

396
00:18:39,110 --> 00:18:41,679
images right so they're all in line in

397
00:18:41,679 --> 00:18:44,990
India HTML response so there's no you

398
00:18:44,990 --> 00:18:47,720
don't benefit from the caching but it's

399
00:18:47,720 --> 00:18:49,130
so important to reduce the number of

400
00:18:49,130 --> 00:18:50,990
requests they are willing to send more

401
00:18:50,990 --> 00:18:53,929
bytes in the in the results just to have

402
00:18:53,929 --> 00:18:56,720
everything faster and something kind of

403
00:18:56,720 --> 00:18:58,130
interesting is that if you disable

404
00:18:58,130 --> 00:19:01,850
JavaScript you don't get any of those

405
00:19:01,850 --> 00:19:06,529
images right so the kind of crazy thing

406
00:19:06,529 --> 00:19:09,559
that you do here is when you load the

407
00:19:09,559 --> 00:19:12,010
page you have a placeholder for those

408
00:19:12,010 --> 00:19:16,850
images so this is a 1 by 1 gif included

409
00:19:16,850 --> 00:19:20,510
as a data URI and repeated even so only

410
00:19:20,510 --> 00:19:23,149
they don't make any other requests so

411
00:19:23,149 --> 00:19:25,190
it's repeated for every image here on

412
00:19:25,190 --> 00:19:27,380
the search results so you have this one

413
00:19:27,380 --> 00:19:30,230
by one gift which it at the very end

414
00:19:30,230 --> 00:19:33,200
right with the latest chunk whenever it

415
00:19:33,200 --> 00:19:36,470
arrives it contains the URL the data URI

416
00:19:36,470 --> 00:19:38,330
for the actual images so what they do is

417
00:19:38,330 --> 00:19:42,169
just get that and replace the one by one

418
00:19:42,169 --> 00:19:45,500
gift with with the real image I thought

419
00:19:45,500 --> 00:19:46,970
it was kind of interesting and really

420
00:19:46,970 --> 00:19:49,520
showing how how important it is to

421
00:19:49,520 --> 00:19:53,299
reduce requests so if you're if you're

422
00:19:53,299 --> 00:19:54,830
on a slow connection and you don't get

423
00:19:54,830 --> 00:19:57,549
any of the images that's fine really Oh

424
00:19:57,549 --> 00:20:02,870
mostly care about the results so there's

425
00:20:02,870 --> 00:20:06,169
different ways to go to inject script on

426
00:20:06,169 --> 00:20:08,059
the page the most common is probably

427
00:20:08,059 --> 00:20:11,299
appending to the head sometimes you

428
00:20:11,299 --> 00:20:13,490
might if you don't control this document

429
00:20:13,490 --> 00:20:14,990
let's see if you're creating a widget

430
00:20:14,990 --> 00:20:17,029
and you want to load in a third party

431
00:20:17,029 --> 00:20:18,409
website and you don't know what's going

432
00:20:18,409 --> 00:20:20,840
on there then you can access the

433
00:20:20,840 --> 00:20:22,700
document element and get its first child

434
00:20:22,700 --> 00:20:25,610
up in there then or you can use the body

435
00:20:25,610 --> 00:20:27,289
because document body is pretty much

436
00:20:27,289 --> 00:20:28,909
always defined even if you don't have a

437
00:20:28,909 --> 00:20:32,290
body talent or that's something that

438
00:20:32,290 --> 00:20:35,110
I think now we'll go on a little is

439
00:20:35,110 --> 00:20:38,440
doing they'll get the first script

440
00:20:38,440 --> 00:20:40,360
element on the page because in order for

441
00:20:40,360 --> 00:20:42,520
any script to execute there's got to be

442
00:20:42,520 --> 00:20:44,890
at least one script tag right so they

443
00:20:44,890 --> 00:20:48,670
they find that script tag and and use

444
00:20:48,670 --> 00:20:50,980
that as a hook so it's not completely

445
00:20:50,980 --> 00:20:53,010
foolproof right because you can have

446
00:20:53,010 --> 00:20:55,420
JavaScript without any script and if you

447
00:20:55,420 --> 00:20:57,730
have let's say body onload and then in

448
00:20:57,730 --> 00:21:00,040
line a bunch of scream but that's pretty

449
00:21:00,040 --> 00:21:04,300
much ridiculous so talking about HTTP

450
00:21:04,300 --> 00:21:06,490
chunking writer the flushing and so on I

451
00:21:06,490 --> 00:21:08,140
just wanted to make a point that it's

452
00:21:08,140 --> 00:21:10,930
not only for HTML so this is the google

453
00:21:10,930 --> 00:21:18,160
instant so what they do here is because

454
00:21:18,160 --> 00:21:21,010
when you're typing your you're probably

455
00:21:21,010 --> 00:21:22,630
not paying so much attention on the

456
00:21:22,630 --> 00:21:24,130
search results but you're looking at the

457
00:21:24,130 --> 00:21:27,160
search suggestions first and see if any

458
00:21:27,160 --> 00:21:28,750
of the suggestions will match what

459
00:21:28,750 --> 00:21:30,760
you're what you're searching for so they

460
00:21:30,760 --> 00:21:33,870
do two flushes they flush the

461
00:21:33,870 --> 00:21:36,250
suggestions first and then the whole

462
00:21:36,250 --> 00:21:38,520
body of all the results no it's owing in

463
00:21:38,520 --> 00:21:42,040
whatever request they make and because

464
00:21:42,040 --> 00:21:43,570
it's easier to just get the search

465
00:21:43,570 --> 00:21:44,830
suggestions as opposed to all the

466
00:21:44,830 --> 00:21:47,890
results so they do again to improve the

467
00:21:47,890 --> 00:21:50,200
perception of speed just load as soon as

468
00:21:50,200 --> 00:21:53,890
possible the suggestions so it's

469
00:21:53,890 --> 00:21:56,290
something like they have a bunch of when

470
00:21:56,290 --> 00:21:57,520
they maker because they have a bunch of

471
00:21:57,520 --> 00:22:00,250
did kind of delimited with a comment

472
00:22:00,250 --> 00:22:03,910
this sort of JSON objects delimited with

473
00:22:03,910 --> 00:22:05,860
comments like this it kind of resembles

474
00:22:05,860 --> 00:22:08,590
what big was they were talking about on

475
00:22:08,590 --> 00:22:10,420
their blog calling it multiple

476
00:22:10,420 --> 00:22:14,080
multi-part xhr requests all right way

477
00:22:14,080 --> 00:22:15,670
you don't need the whole response in

478
00:22:15,670 --> 00:22:17,740
order to to start working with with a

479
00:22:17,740 --> 00:22:20,800
partial response so yeah this is the URL

480
00:22:20,800 --> 00:22:23,410
to to my chunk view too if you want to

481
00:22:23,410 --> 00:22:25,720
experiment it's kind of horrendously

482
00:22:25,720 --> 00:22:29,260
slow but I guess until you get out into

483
00:22:29,260 --> 00:22:31,930
it into the different tools that's a

484
00:22:31,930 --> 00:22:33,910
nice way to peek and see what others are

485
00:22:33,910 --> 00:22:37,990
doing oh so some some more stuff coming

486
00:22:37,990 --> 00:22:41,590
in with html5 is the thing and the

487
00:22:41,590 --> 00:22:43,990
prefetch attributes so link prefetch has

488
00:22:43,990 --> 00:22:44,790
been around

489
00:22:44,790 --> 00:22:47,430
for quite a while in Firefox button loud

490
00:22:47,430 --> 00:22:49,590
like now it will be making its way to

491
00:22:49,590 --> 00:22:53,790
html5 so this is a way to improve the

492
00:22:53,790 --> 00:22:56,160
performance on the next page so while

493
00:22:56,160 --> 00:22:58,830
the user is reading an article or typing

494
00:22:58,830 --> 00:23:00,450
you know in a login screen or something

495
00:23:00,450 --> 00:23:02,460
then the browser can start prefetching

496
00:23:02,460 --> 00:23:04,080
resources that are needed on the next

497
00:23:04,080 --> 00:23:10,470
page so currently you can you can do

498
00:23:10,470 --> 00:23:11,970
this and we'll see just a pattern but

499
00:23:11,970 --> 00:23:13,890
that it is really nice and easy way to

500
00:23:13,890 --> 00:23:15,510
do it the other thing is the pink

501
00:23:15,510 --> 00:23:19,710
attribute that is added to href so

502
00:23:19,710 --> 00:23:22,050
because a lot of people want to track

503
00:23:22,050 --> 00:23:24,060
clicks all right so when you click on a

504
00:23:24,060 --> 00:23:26,460
link you want for advertising or

505
00:23:26,460 --> 00:23:29,010
statistics and so one you want you to

506
00:23:29,010 --> 00:23:31,820
know what what did the user click there

507
00:23:31,820 --> 00:23:35,400
so currently the the most foolproof way

508
00:23:35,400 --> 00:23:37,650
is to do a redirect so instead of the

509
00:23:37,650 --> 00:23:40,290
actual link you link to a page that logs

510
00:23:40,290 --> 00:23:41,970
and then redirects the user but that's

511
00:23:41,970 --> 00:23:43,980
kind of a bad experience because always

512
00:23:43,980 --> 00:23:47,370
redirect takes time so we did a study

513
00:23:47,370 --> 00:23:52,020
with area 1 on average that any any

514
00:23:52,020 --> 00:23:53,880
redirect on average will take at least

515
00:23:53,880 --> 00:23:56,010
100 milliseconds but it could be slower

516
00:23:56,010 --> 00:23:57,960
right some kind of thing may be

517
00:23:57,960 --> 00:24:01,020
happening or if your redirect fails then

518
00:24:01,020 --> 00:24:04,440
you actually don't see the page and also

519
00:24:04,440 --> 00:24:07,350
for the other ways when you when you

520
00:24:07,350 --> 00:24:08,910
click on a link is to send a beacon

521
00:24:08,910 --> 00:24:11,280
right new images are see to something

522
00:24:11,280 --> 00:24:13,560
but the thing is that there's a certain

523
00:24:13,560 --> 00:24:17,520
amount of loss of click loss which for

524
00:24:17,520 --> 00:24:19,710
for advertisers in for some statistics

525
00:24:19,710 --> 00:24:22,410
are unacceptable let's say five percent

526
00:24:22,410 --> 00:24:26,220
beacon loss so that's why they do some

527
00:24:26,220 --> 00:24:28,740
crazy stuff like they send the beacon

528
00:24:28,740 --> 00:24:31,290
and they will do a really big loop just

529
00:24:31,290 --> 00:24:33,360
to slow down the user slow down the

530
00:24:33,360 --> 00:24:35,130
browser to kind of increase the chances

531
00:24:35,130 --> 00:24:38,510
that this we can all be sent correctly

532
00:24:38,510 --> 00:24:41,370
so with a pink attribute that solves it

533
00:24:41,370 --> 00:24:44,160
really pretty easily the user clicks on

534
00:24:44,160 --> 00:24:46,170
the link and then the browser knows it

535
00:24:46,170 --> 00:24:49,080
has to send beacon to up this ping URL

536
00:24:49,080 --> 00:24:50,990
and it would take the time whenever is

537
00:24:50,990 --> 00:24:53,159
appropriate for the browser

538
00:24:53,159 --> 00:24:54,960
the beacon that you have confidence that

539
00:24:54,960 --> 00:24:58,529
it will be sent so this sort of pattern

540
00:24:58,529 --> 00:25:03,659
before when you preload stuff one

541
00:25:03,659 --> 00:25:05,700
problem with preloading for the next

542
00:25:05,700 --> 00:25:08,549
page is that whatever you pretty low

543
00:25:08,549 --> 00:25:11,669
it's still going to be parsed and it's

544
00:25:11,669 --> 00:25:13,409
going to be executed so if you pre

545
00:25:13,409 --> 00:25:15,269
loaded CSS it might even change the page

546
00:25:15,269 --> 00:25:19,019
or if you provide a JavaScript it's your

547
00:25:19,019 --> 00:25:21,029
place to be parsed and so on it might

548
00:25:21,029 --> 00:25:23,549
even the script that you preload might

549
00:25:23,549 --> 00:25:25,139
expect that it's running on the next

550
00:25:25,139 --> 00:25:26,700
page so it might throw an error so you

551
00:25:26,700 --> 00:25:28,590
have to make sure that your script works

552
00:25:28,590 --> 00:25:31,229
both ways but anyway it's it's a waste

553
00:25:31,229 --> 00:25:35,190
of time to be to be parsing and

554
00:25:35,190 --> 00:25:37,820
executing stuff that you don't need so

555
00:25:37,820 --> 00:25:40,470
one quite easy solution is to use a new

556
00:25:40,470 --> 00:25:43,679
image SRC and just request that but the

557
00:25:43,679 --> 00:25:45,599
thing is that in in fiber what kid

558
00:25:45,599 --> 00:25:48,509
images have different cache they are

559
00:25:48,509 --> 00:25:49,889
kept in different place than the scripts

560
00:25:49,889 --> 00:25:51,720
and styles so whatever you look if you

561
00:25:51,720 --> 00:25:54,599
load a script as an image then it's not

562
00:25:54,599 --> 00:25:56,460
going to be cash so for those you can

563
00:25:56,460 --> 00:26:00,330
use an object tag and set its width high

564
00:26:00,330 --> 00:26:03,450
20 in this way it's loaded and cash but

565
00:26:03,450 --> 00:26:07,619
but never execute it so once you're done

566
00:26:07,619 --> 00:26:10,739
loading that's where pretty much most of

567
00:26:10,739 --> 00:26:13,470
the most of the benefits of speeding up

568
00:26:13,470 --> 00:26:16,710
the application will come but then let's

569
00:26:16,710 --> 00:26:18,539
talk a bit about some some micro

570
00:26:18,539 --> 00:26:21,239
optimizations right so I think when you

571
00:26:21,239 --> 00:26:22,440
when you talk about the runtime

572
00:26:22,440 --> 00:26:25,320
performance kind of two ideas that you

573
00:26:25,320 --> 00:26:27,539
can keep in your mind is that if you

574
00:26:27,539 --> 00:26:29,970
work with local variables as well as

575
00:26:29,970 --> 00:26:31,739
possible that's a good thing and if you

576
00:26:31,739 --> 00:26:35,340
can avoid doing the same thing twice or

577
00:26:35,340 --> 00:26:37,259
more than that that's great so just a

578
00:26:37,259 --> 00:26:40,049
general guideline and let's see some of

579
00:26:40,049 --> 00:26:44,190
those so you know the global variables

580
00:26:44,190 --> 00:26:46,049
are evil we should go with you as far

581
00:26:46,049 --> 00:26:50,489
inside of the function so for example in

582
00:26:50,489 --> 00:26:52,259
this case when you have nested functions

583
00:26:52,259 --> 00:26:55,990
and then this Ward 3 right

584
00:26:55,990 --> 00:26:58,929
so if you don't have it then the engine

585
00:26:58,929 --> 00:27:01,090
will will look up the scope chain find

586
00:27:01,090 --> 00:27:03,850
this other a anything sound fine found

587
00:27:03,850 --> 00:27:08,980
it will go to the global so so if you

588
00:27:08,980 --> 00:27:11,559
can if you can avoid this going up the

589
00:27:11,559 --> 00:27:14,800
scope chain that's a good thing and it

590
00:27:14,800 --> 00:27:16,660
also helps minification because most of

591
00:27:16,660 --> 00:27:19,270
the terminus is out there will not

592
00:27:19,270 --> 00:27:22,000
rename any global variables because it's

593
00:27:22,000 --> 00:27:24,670
not safe to do so so when you use local

594
00:27:24,670 --> 00:27:27,190
variable it can be safely minified to a

595
00:27:27,190 --> 00:27:31,059
shorter name one kind of pattern here is

596
00:27:31,059 --> 00:27:33,460
when you if you use some sort of module

597
00:27:33,460 --> 00:27:37,200
pattern right and inside there you have

598
00:27:37,200 --> 00:27:40,270
you need to access the window object the

599
00:27:40,270 --> 00:27:42,670
document maybe some other module or

600
00:27:42,670 --> 00:27:45,240
something that I've seen people do is

601
00:27:45,240 --> 00:27:48,730
pass all those tough to your to your

602
00:27:48,730 --> 00:27:51,100
module at the beginning right when it's

603
00:27:51,100 --> 00:27:53,500
defined so here you have access to the

604
00:27:53,500 --> 00:27:55,540
go to the global object have a reference

605
00:27:55,540 --> 00:27:58,179
to the document and so on so the thing

606
00:27:58,179 --> 00:27:59,740
with that is that it can kind of quickly

607
00:27:59,740 --> 00:28:02,590
turn into an anti-pattern right if your

608
00:28:02,590 --> 00:28:04,980
module gross and you don't have nice

609
00:28:04,980 --> 00:28:08,110
cold folding and stuff you just end up

610
00:28:08,110 --> 00:28:09,700
scrolling up and down up and down to see

611
00:28:09,700 --> 00:28:15,190
okay what was that horrible and using

612
00:28:15,190 --> 00:28:16,990
local variables is especially true when

613
00:28:16,990 --> 00:28:18,880
you when you deal with Don and we'll

614
00:28:18,880 --> 00:28:21,870
talk a bit about that so we're using

615
00:28:21,870 --> 00:28:24,580
reusing stuff as much as possible so for

616
00:28:24,580 --> 00:28:27,820
example a common thing that that is

617
00:28:27,820 --> 00:28:31,960
needed in in applications is to sniff

618
00:28:31,960 --> 00:28:35,290
the browser features right so you don't

619
00:28:35,290 --> 00:28:37,210
have to do that every time so once once

620
00:28:37,210 --> 00:28:39,450
the script is loaded it's it's

621
00:28:39,450 --> 00:28:42,220
impossible that this the engine will

622
00:28:42,220 --> 00:28:43,870
change while your program is running

623
00:28:43,870 --> 00:28:46,240
right so once you've sniffed that you

624
00:28:46,240 --> 00:28:48,429
have support for our event listener is

625
00:28:48,429 --> 00:28:49,720
not going to change throughout the life

626
00:28:49,720 --> 00:28:52,030
of the application so it kind of makes

627
00:28:52,030 --> 00:28:55,120
sense to do this sort of branching when

628
00:28:55,120 --> 00:28:57,429
when the code is loaded or maybe the

629
00:28:57,429 --> 00:28:59,410
first time that it's cold right so you

630
00:28:59,410 --> 00:29:02,170
basically sniff whatever the browser

631
00:29:02,170 --> 00:29:03,960
supports and then

632
00:29:03,960 --> 00:29:06,809
define the function on the fly so this

633
00:29:06,809 --> 00:29:09,750
browser sniffing is done only once

634
00:29:09,750 --> 00:29:12,730
another thing is to use some sort of

635
00:29:12,730 --> 00:29:15,850
memorization when you have we have a

636
00:29:15,850 --> 00:29:18,279
chance that some some expensive task

637
00:29:18,279 --> 00:29:20,860
will be repeated again you the same

638
00:29:20,860 --> 00:29:21,970
function will be called with the same

639
00:29:21,970 --> 00:29:24,340
parameters it'd be easiest thing is to

640
00:29:24,340 --> 00:29:26,139
just because functions are objects right

641
00:29:26,139 --> 00:29:28,570
so you create a new cache property to

642
00:29:28,570 --> 00:29:30,850
your function and you know just use the

643
00:29:30,850 --> 00:29:33,250
parameter or maybe serialize the JSON

644
00:29:33,250 --> 00:29:35,980
the folder parameters and store that

645
00:29:35,980 --> 00:29:38,559
result for later so one problem with

646
00:29:38,559 --> 00:29:41,190
that is that your cash is kind of

647
00:29:41,190 --> 00:29:43,899
visible it's accessible so you might

648
00:29:43,899 --> 00:29:46,450
delete it or somebody else or if you

649
00:29:46,450 --> 00:29:48,100
redefine this function or something like

650
00:29:48,100 --> 00:29:51,429
that so other other approaches is to use

651
00:29:51,429 --> 00:29:54,700
a closure right to protect your cash and

652
00:29:54,700 --> 00:29:56,470
also an interesting approach would be to

653
00:29:56,470 --> 00:29:58,720
store that in in an offline calf right

654
00:29:58,720 --> 00:30:00,519
now they have session storage local

655
00:30:00,519 --> 00:30:02,769
storage you know that if especially if

656
00:30:02,769 --> 00:30:04,090
chances are that you're doing something

657
00:30:04,090 --> 00:30:05,710
expensive that it's not going to change

658
00:30:05,710 --> 00:30:07,720
for the next page or even for the next

659
00:30:07,720 --> 00:30:10,779
visit it might be a good idea to to

660
00:30:10,779 --> 00:30:12,220
store this thing in an offline cash

661
00:30:12,220 --> 00:30:16,960
precompute some stuff for later and I've

662
00:30:16,960 --> 00:30:20,470
seen people even do use offline caching

663
00:30:20,470 --> 00:30:24,580
to the store and their code like Jesus

664
00:30:24,580 --> 00:30:27,690
CSS and JavaScript in the cache because

665
00:30:27,690 --> 00:30:30,940
idea for the study was that about half

666
00:30:30,940 --> 00:30:32,980
of the users will always come with an

667
00:30:32,980 --> 00:30:36,370
empty cache so the cash is not that that

668
00:30:36,370 --> 00:30:38,470
relevant relate so if you can if you can

669
00:30:38,470 --> 00:30:41,039
store it offline it's a good idea even

670
00:30:41,039 --> 00:30:45,309
Google Gmail they they posted something

671
00:30:45,309 --> 00:30:46,899
about doing something like this and even

672
00:30:46,899 --> 00:30:48,730
when you have a new when they have a new

673
00:30:48,730 --> 00:30:51,429
release they will just send a patch a

674
00:30:51,429 --> 00:30:53,950
diff whatever change in the new release

675
00:30:53,950 --> 00:30:56,380
and they apply the patch locally and

676
00:30:56,380 --> 00:31:00,250
then update their offline cash so so

677
00:31:00,250 --> 00:31:01,720
writing to the offline cash of course

678
00:31:01,720 --> 00:31:04,539
has has the price of its own but it

679
00:31:04,539 --> 00:31:09,020
might be useful for some cases

680
00:31:09,030 --> 00:31:15,570
so an example of using the memorization

681
00:31:15,570 --> 00:31:21,180
in a in you know a closure right so

682
00:31:21,180 --> 00:31:23,670
there's many ways to do inheritance in

683
00:31:23,670 --> 00:31:25,230
JavaScript so this this is kind of a

684
00:31:25,230 --> 00:31:28,350
popular classical inheritance pattern

685
00:31:28,350 --> 00:31:32,340
with your child constructor inherits

686
00:31:32,340 --> 00:31:33,840
from the parent in the way to do that is

687
00:31:33,840 --> 00:31:36,090
to use a temporary function and set its

688
00:31:36,090 --> 00:31:38,670
prototype to the parents prototype so

689
00:31:38,670 --> 00:31:40,980
every time you call that function in

690
00:31:40,980 --> 00:31:43,020
actually creating the same function

691
00:31:43,020 --> 00:31:45,300
again so it kind of makes sense to put

692
00:31:45,300 --> 00:31:47,790
that outside and just create it once and

693
00:31:47,790 --> 00:31:50,870
then create a return a new function that

694
00:31:50,870 --> 00:31:54,900
uses that already created f then I have

695
00:31:54,900 --> 00:31:57,480
a test case again this is something like

696
00:31:57,480 --> 00:32:01,880
a nano optimization really because you

697
00:32:01,880 --> 00:32:04,350
rarely need to do all that inheritance

698
00:32:04,350 --> 00:32:06,600
tough but just an example of how you can

699
00:32:06,600 --> 00:32:11,160
use to closure to store to store your

700
00:32:11,160 --> 00:32:13,410
your whatever you want to cash right so

701
00:32:13,410 --> 00:32:16,470
it's a bit faster between anywhere

702
00:32:16,470 --> 00:32:18,210
between twenty and fifty percent across

703
00:32:18,210 --> 00:32:22,410
browsers it's not something insane on

704
00:32:22,410 --> 00:32:24,570
just an example same thing with when you

705
00:32:24,570 --> 00:32:26,640
when you have regular expression objects

706
00:32:26,640 --> 00:32:28,440
that you will end up creating over and

707
00:32:28,440 --> 00:32:31,080
over again not in a look like this but

708
00:32:31,080 --> 00:32:32,700
you know in several calls of the

709
00:32:32,700 --> 00:32:35,220
function kind of makes sense to put that

710
00:32:35,220 --> 00:32:38,790
regular expression outside of whatever

711
00:32:38,790 --> 00:32:40,860
is repeating right so if it's a module

712
00:32:40,860 --> 00:32:42,450
then you put it in a property of that

713
00:32:42,450 --> 00:32:45,270
module or your object so you don't you

714
00:32:45,270 --> 00:32:46,800
don't have to recreate that object every

715
00:32:46,800 --> 00:32:52,290
time again not a huge benefit but just a

716
00:32:52,290 --> 00:32:56,690
way to go and reuse as much as possible

717
00:32:56,690 --> 00:32:59,880
so another thing is to always cash the

718
00:32:59,880 --> 00:33:03,420
length in loops right so that's a common

719
00:33:03,420 --> 00:33:06,060
way to do loops which suffers from

720
00:33:06,060 --> 00:33:10,680
several problems so first if j is lint

721
00:33:10,680 --> 00:33:13,920
will complain about the use of IE + +

722
00:33:13,920 --> 00:33:14,899
right and then

723
00:33:14,899 --> 00:33:16,729
if you subscribe to the single bar

724
00:33:16,729 --> 00:33:18,739
pattern and then you define all your fun

725
00:33:18,739 --> 00:33:21,109
Oh your voice at the top you would

726
00:33:21,109 --> 00:33:22,219
probably change it to something like

727
00:33:22,219 --> 00:33:24,820
this and then the next step will be to

728
00:33:24,820 --> 00:33:28,159
to catch the length right in and take

729
00:33:28,159 --> 00:33:29,869
the length of that array that you're

730
00:33:29,869 --> 00:33:32,719
iterating and compared to it instead of

731
00:33:32,719 --> 00:33:33,950
checking the length every time

732
00:33:33,950 --> 00:33:37,999
especially true when you work with HTML

733
00:33:37,999 --> 00:33:43,099
collections right so yeah you have yet

734
00:33:43,099 --> 00:33:45,649
another way is to take the length and

735
00:33:45,649 --> 00:33:48,789
then count down to it right because

736
00:33:48,789 --> 00:33:52,279
comparing 20 / sorry but those are kind

737
00:33:52,279 --> 00:33:55,700
of valiant micro optimization so the

738
00:33:55,700 --> 00:33:57,289
probably the biggest thing that you have

739
00:33:57,289 --> 00:33:59,330
to focus on after making sure that the

740
00:33:59,330 --> 00:34:01,249
scripts are loaded as fast as possible

741
00:34:01,249 --> 00:34:03,589
the first start first place to start

742
00:34:03,589 --> 00:34:07,279
optimizing is the DOM and I just want to

743
00:34:07,279 --> 00:34:10,059
give an illustration how bad things are

744
00:34:10,059 --> 00:34:13,190
so if you do some some crazy long loop

745
00:34:13,190 --> 00:34:15,649
and then you update the innerhtml off of

746
00:34:15,649 --> 00:34:18,919
some element you get every time like in

747
00:34:18,919 --> 00:34:20,179
this case fifteen thousand repetitions

748
00:34:20,179 --> 00:34:22,730
you read the value once and right at

749
00:34:22,730 --> 00:34:25,909
once so a better ways to go loco right

750
00:34:25,909 --> 00:34:28,129
and use use a local variable and then

751
00:34:28,129 --> 00:34:29,839
once you're done with it just appended

752
00:34:29,839 --> 00:34:33,079
or update that that element wants so you

753
00:34:33,079 --> 00:34:36,679
have only accessing the dome twice so

754
00:34:36,679 --> 00:34:38,599
this is ridiculous example of course but

755
00:34:38,599 --> 00:34:42,470
the thing is that's what what I meant

756
00:34:42,470 --> 00:34:44,450
when when I want to talked about

757
00:34:44,450 --> 00:34:47,020
comparing a would be right just to see

758
00:34:47,020 --> 00:34:51,379
how bad it is so it's it's really bad

759
00:34:51,379 --> 00:34:53,270
across all the browsers right anywhere

760
00:34:53,270 --> 00:34:57,020
between it's it's not one hundred fifty

761
00:34:57,020 --> 00:35:00,980
percent it's 150 times slower in a so

762
00:35:00,980 --> 00:35:02,960
this is something that is worth

763
00:35:02,960 --> 00:35:05,089
considering right instead of trying to

764
00:35:05,089 --> 00:35:07,579
optimize twenty percent or something

765
00:35:07,579 --> 00:35:08,930
this is you know hundreds of times

766
00:35:08,930 --> 00:35:11,750
faster and it's it's kind of important

767
00:35:11,750 --> 00:35:13,970
to understand so this is my slide with a

768
00:35:13,970 --> 00:35:17,119
special effect to understand why why it

769
00:35:17,119 --> 00:35:18,770
is the problem with the dorm right

770
00:35:18,770 --> 00:35:21,440
because you have because the dome is

771
00:35:21,440 --> 00:35:22,940
implemented separately from the

772
00:35:22,940 --> 00:35:24,770
JavaScript engine and it makes sense

773
00:35:24,770 --> 00:35:25,850
right because you don't

774
00:35:25,850 --> 00:35:27,380
necessarily meet the dome to run

775
00:35:27,380 --> 00:35:30,500
JavaScript applications or in ice case

776
00:35:30,500 --> 00:35:33,290
you can use another language like did

777
00:35:33,290 --> 00:35:34,910
this crypto to work with the same dome

778
00:35:34,910 --> 00:35:38,240
right so if you think about going from

779
00:35:38,240 --> 00:35:39,950
JavaScript and accessing something on

780
00:35:39,950 --> 00:35:41,990
the Dom it's it's like a toll bridge

781
00:35:41,990 --> 00:35:44,690
that's a Microsoft really nice

782
00:35:44,690 --> 00:35:47,990
comparison so you're crossing the bridge

783
00:35:47,990 --> 00:35:49,400
and it's a toll bridge and you have to

784
00:35:49,400 --> 00:35:51,170
pay every time you cross it so this is

785
00:35:51,170 --> 00:35:54,170
the special factory and then you across

786
00:35:54,170 --> 00:35:56,000
the region and you pay the penalty so

787
00:35:56,000 --> 00:35:59,540
you do that every time so the important

788
00:35:59,540 --> 00:36:01,130
thing to remember is the dome is slowing

789
00:36:01,130 --> 00:36:03,080
if you want to start somewhere that's

790
00:36:03,080 --> 00:36:07,700
the place to start just one last thing

791
00:36:07,700 --> 00:36:10,580
because i had patterns in the title so i

792
00:36:10,580 --> 00:36:12,830
thought maybe people we some of you

793
00:36:12,830 --> 00:36:14,660
might be expecting to talk about design

794
00:36:14,660 --> 00:36:17,270
patterns so let's just quickly go over

795
00:36:17,270 --> 00:36:20,240
that proxy design pattern like from the

796
00:36:20,240 --> 00:36:22,670
book of four so on so Brendan I talked

797
00:36:22,670 --> 00:36:26,360
yesterday about proxies coming to do I

798
00:36:26,360 --> 00:36:30,110
comma script which is nice but we might

799
00:36:30,110 --> 00:36:31,790
meanwhile you can implement it yourself

800
00:36:31,790 --> 00:36:33,920
for certain tasks so what do what is the

801
00:36:33,920 --> 00:36:36,080
proxy pattern is that when you have one

802
00:36:36,080 --> 00:36:38,150
object that acts as an interface to

803
00:36:38,150 --> 00:36:40,340
another so instead of one of your

804
00:36:40,340 --> 00:36:42,050
calling the other one method it goes

805
00:36:42,050 --> 00:36:45,680
through a proxy so you have something

806
00:36:45,680 --> 00:36:48,530
like this where this is your the object

807
00:36:48,530 --> 00:36:50,480
that wants to consume the so-called real

808
00:36:50,480 --> 00:36:53,750
subject and but it doesn't access it

809
00:36:53,750 --> 00:36:55,610
directly but it goes through a proxy so

810
00:36:55,610 --> 00:36:58,160
that's nice when you have for example

811
00:36:58,160 --> 00:37:00,740
the client wants to initialize that real

812
00:37:00,740 --> 00:37:03,740
subject but it may never use it right so

813
00:37:03,740 --> 00:37:06,980
it says cause some sort of init method

814
00:37:06,980 --> 00:37:10,160
and the proxy says ok it's done but it's

815
00:37:10,160 --> 00:37:11,870
actually nothing was done yet because

816
00:37:11,870 --> 00:37:14,090
chances are that it might never be used

817
00:37:14,090 --> 00:37:16,360
so then when the client actually wants

818
00:37:16,360 --> 00:37:19,310
that we are subject to do something and

819
00:37:19,310 --> 00:37:21,860
then the proxy was saying okay I guess

820
00:37:21,860 --> 00:37:23,570
that's needed so it will talk or both of

821
00:37:23,570 --> 00:37:27,980
the methods like this so for example

822
00:37:27,980 --> 00:37:31,190
let's say you have a list of videos and

823
00:37:31,190 --> 00:37:33,200
you want to play each video and you have

824
00:37:33,200 --> 00:37:36,260
to make an HTTP request to get more

825
00:37:36,260 --> 00:37:38,210
information about that video

826
00:37:38,210 --> 00:37:40,490
and any chances are you might probably

827
00:37:40,490 --> 00:37:42,290
expand all of them or make several

828
00:37:42,290 --> 00:37:45,680
requests so it's a good idea the most

829
00:37:45,680 --> 00:37:47,119
important thing when optimizing web

830
00:37:47,119 --> 00:37:49,310
applications of course is to minimize

831
00:37:49,310 --> 00:37:53,450
the number of requests so instead of

832
00:37:53,450 --> 00:37:56,300
going every time through consuming that

833
00:37:56,300 --> 00:37:58,609
HTTP object that you have created

834
00:37:58,609 --> 00:38:01,609
somehow that's all the transport to the

835
00:38:01,609 --> 00:38:04,760
server all right you can introduce proxy

836
00:38:04,760 --> 00:38:06,740
in between and it might even something

837
00:38:06,740 --> 00:38:10,369
as simple as just a minimal 100

838
00:38:10,369 --> 00:38:13,099
milliseconds timeout something that the

839
00:38:13,099 --> 00:38:14,930
user will not feel but if chances are

840
00:38:14,930 --> 00:38:17,630
you have to make several requests in a

841
00:38:17,630 --> 00:38:20,210
in a quick sequence then it makes sense

842
00:38:20,210 --> 00:38:22,070
that the proxy will will combine all

843
00:38:22,070 --> 00:38:24,680
those requests send them once get all

844
00:38:24,680 --> 00:38:26,480
the data time which will be much faster

845
00:38:26,480 --> 00:38:29,589
than making the separate requests and

846
00:38:29,589 --> 00:38:32,720
you can even add some sort of caching

847
00:38:32,720 --> 00:38:37,250
right so if if you're your client wants

848
00:38:37,250 --> 00:38:39,500
to request the same video right the

849
00:38:39,500 --> 00:38:42,200
second time the proxy will serve it from

850
00:38:42,200 --> 00:38:48,640
the cache as a no that's my last slide

851
00:38:48,640 --> 00:38:52,160
just to kind of try to summarize is

852
00:38:52,160 --> 00:38:55,310
whenever you you try to approach a

853
00:38:55,310 --> 00:38:57,890
performance project or or you want to

854
00:38:57,890 --> 00:38:59,930
apply some best practices or advice out

855
00:38:59,930 --> 00:39:02,300
there you should always ask why is it is

856
00:39:02,300 --> 00:39:04,760
it true it's the relevant how is the

857
00:39:04,760 --> 00:39:09,080
experiment down I know just you know

858
00:39:09,080 --> 00:39:12,980
just question then the next thing is to

859
00:39:12,980 --> 00:39:15,140
make sure that the script is loaded is

860
00:39:15,140 --> 00:39:18,280
quickly and s asynchronously as possible

861
00:39:18,280 --> 00:39:21,190
remember to touch the dumb wisely and

862
00:39:21,190 --> 00:39:24,230
and for the micro nano optimizations

863
00:39:24,230 --> 00:39:26,839
kind of the tool that lines to to work

864
00:39:26,839 --> 00:39:28,760
with locals as much as possible

865
00:39:28,760 --> 00:39:31,130
especially in the dome and then reuse

866
00:39:31,130 --> 00:39:33,190
don't don't create the same objects or

867
00:39:33,190 --> 00:39:37,099
same properties twice so that's all

868
00:39:37,099 --> 00:39:38,930
ahead I'm hope I'm okay with the time

869
00:39:38,930 --> 00:39:42,640
right

