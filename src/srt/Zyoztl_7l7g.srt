1
00:00:00,000 --> 00:00:16,269

[Music]

2
00:00:16,279 --> 00:00:18,570
nativist modules this is what I'm gonna

3
00:00:18,570 --> 00:00:23,609
talk about but first first first make it

4
00:00:23,609 --> 00:00:26,430
work there we go

5
00:00:26,430 --> 00:00:32,610
so I'm I go way back to the 80s I tried

6
00:00:32,610 --> 00:00:34,680
the whole startup CTO thing didn't work

7
00:00:34,680 --> 00:00:40,360
out I'm probably gonna die developer

8
00:00:40,370 --> 00:00:43,920
coding till the last minute testing the

9
00:00:43,920 --> 00:00:46,620
code is a passion of had since like

10
00:00:46,620 --> 00:00:50,309
forever like 20 years I test everything

11
00:00:50,309 --> 00:00:52,230
I write how many people the right test

12
00:00:52,230 --> 00:00:55,530
for their code okay how many people

13
00:00:55,530 --> 00:00:59,640
write this for their CSS see if you want

14
00:00:59,640 --> 00:01:01,430
to learn about it come talk to me about

15
00:01:01,430 --> 00:01:03,809
applitools Apple it was all about visual

16
00:01:03,809 --> 00:01:06,930
testing we have a booth come over it'll

17
00:01:06,930 --> 00:01:09,840
be interesting but I'm not here to talk

18
00:01:09,840 --> 00:01:11,880
about visual testing I'm here to make

19
00:01:11,880 --> 00:01:15,990
things work okay I'll stick here but

20
00:01:15,990 --> 00:01:20,280
before that surprise that's me the

21
00:01:20,280 --> 00:01:23,670
little baby that's my dad and in the

22
00:01:23,670 --> 00:01:25,680
background do you know what what that is

23
00:01:25,680 --> 00:01:32,549
that's Singapore I was born here yeah 50

24
00:01:32,549 --> 00:01:39,060
years ago ooh my age so it's an amazing

25
00:01:39,060 --> 00:01:40,799
experience for me I got here yesterday

26
00:01:40,799 --> 00:01:42,869
and just you know walked around it oh my

27
00:01:42,869 --> 00:01:45,810
god this is this is this is home just

28
00:01:45,810 --> 00:01:48,119
the last one my mother and me and I

29
00:01:48,119 --> 00:01:49,439
don't know you probably recognize the

30
00:01:49,439 --> 00:01:52,020
pool it's probably very changed so yeah

31
00:01:52,020 --> 00:01:58,090
I'm home thank you for having me

32
00:01:58,100 --> 00:02:02,759
nativist modules just a reminder for

33
00:02:02,759 --> 00:02:06,090
those of us who haven't used es modules

34
00:02:06,090 --> 00:02:08,429
it's the export/import thing where if

35
00:02:08,429 --> 00:02:10,560
you're exporting you have a module a

36
00:02:10,560 --> 00:02:13,500
file and you export a function or X

37
00:02:13,500 --> 00:02:16,110
for the value or whatever and then in

38
00:02:16,110 --> 00:02:18,210
another module you import it using that

39
00:02:18,210 --> 00:02:20,550
syntax that is what I talk about when

40
00:02:20,550 --> 00:02:21,210
I'm saying

41
00:02:21,210 --> 00:02:24,090
es modules okay so everybody is on board

42
00:02:24,090 --> 00:02:26,940
most front-end developers know what that

43
00:02:26,940 --> 00:02:28,800
is because web packing and all those

44
00:02:28,800 --> 00:02:31,590
bundlers back in people lists

45
00:02:31,590 --> 00:02:35,430
okay what are native es modules right

46
00:02:35,430 --> 00:02:38,010
the way the way I define it as es code

47
00:02:38,010 --> 00:02:41,400
that you know just works without without

48
00:02:41,400 --> 00:02:43,950
any any problem and I'll explain that

49
00:02:43,950 --> 00:02:46,770
because back in 2015 I gave a talk it

50
00:02:46,770 --> 00:02:48,720
was called navigating the wild seas of

51
00:02:48,720 --> 00:02:51,360
es modules and I had to explain stuff

52
00:02:51,360 --> 00:02:54,959
like the syntax which isn't he doesn't

53
00:02:54,959 --> 00:02:56,640
need to be explained today default

54
00:02:56,640 --> 00:02:59,370
export translation the whole idea of

55
00:02:59,370 --> 00:03:02,700
Babel wasn't really used back then not

56
00:03:02,700 --> 00:03:04,470
to mention bundling the idea of taking

57
00:03:04,470 --> 00:03:06,690
all that JavaScript code and bundling it

58
00:03:06,690 --> 00:03:09,120
into one file this whole idea was very

59
00:03:09,120 --> 00:03:11,970
new I had to explain it and everything

60
00:03:11,970 --> 00:03:14,280
we take for granted today was needed to

61
00:03:14,280 --> 00:03:17,220
be explained and today you we all know

62
00:03:17,220 --> 00:03:18,780
the syntax well almost all of you

63
00:03:18,780 --> 00:03:20,730
translation is a given everybody who's

64
00:03:20,730 --> 00:03:23,160
barbel in the front end and bundling is

65
00:03:23,160 --> 00:03:26,340
like yeah right and and and we forgot

66
00:03:26,340 --> 00:03:30,450
something we forgot that between 2015

67
00:03:30,450 --> 00:03:32,670
and 2019 we had to go through the valley

68
00:03:32,670 --> 00:03:34,709
of JavaScript fatigue who remembers

69
00:03:34,709 --> 00:03:37,380
JavaScript fatigue there we go what's

70
00:03:37,380 --> 00:03:40,320
this whole you know the configurations

71
00:03:40,320 --> 00:03:42,930
and webpack people got confused so much

72
00:03:42,930 --> 00:03:45,060
about all that and for the right reasons

73
00:03:45,060 --> 00:03:47,400
it was difficult and still is difficult

74
00:03:47,400 --> 00:03:49,620
but today it's like you know we're back

75
00:03:49,620 --> 00:03:53,670
Bob L configuration hell nobody sees the

76
00:03:53,670 --> 00:03:57,390
problem anymore but it's there it's not

77
00:03:57,390 --> 00:04:01,739
easy and native modules is trying to go

78
00:04:01,739 --> 00:04:05,910
back to the simpler times yeah trying to

79
00:04:05,910 --> 00:04:07,739
go back to the simpler times when we can

80
00:04:07,739 --> 00:04:10,560
just refresh the webpage and that's it

81
00:04:10,560 --> 00:04:13,049
work no configuration no web pack no

82
00:04:13,049 --> 00:04:16,320
translation no nothing we want as much

83
00:04:16,320 --> 00:04:20,790
as to just work and we want them to work

84
00:04:20,790 --> 00:04:23,160
both in the browser and in no js' and

85
00:04:23,160 --> 00:04:24,840
this talk is exactly about that

86
00:04:24,840 --> 00:04:27,330
how the path is going to be it's not

87
00:04:27,330 --> 00:04:29,940
there yet and I will you will see it

88
00:04:29,940 --> 00:04:33,180
it's not there 2019 we're not there with

89
00:04:33,180 --> 00:04:35,370
s modules native ES modules but I

90
00:04:35,370 --> 00:04:37,620
believe somewhere in 2020 and definitely

91
00:04:37,620 --> 00:04:40,919
in 2021 we will all be using es modules

92
00:04:40,919 --> 00:04:45,750
natively so you know come I'll come back

93
00:04:45,750 --> 00:04:47,879
in two years hopefully and you will tell

94
00:04:47,879 --> 00:04:53,490
me remember you were wrong that's a plug

95
00:04:53,490 --> 00:04:56,430
in for my CFP in two years okay

96
00:04:56,430 --> 00:04:59,550
using these modules today we code with

97
00:04:59,550 --> 00:05:01,409
es modules we have lots of files they're

98
00:05:01,409 --> 00:05:03,150
all importing and exporting thing and

99
00:05:03,150 --> 00:05:05,159
we're basically creating a dependency

100
00:05:05,159 --> 00:05:08,789
graph of files and modules importing and

101
00:05:08,789 --> 00:05:10,830
exporting one another and we take that

102
00:05:10,830 --> 00:05:13,860
we use webpack or roll-up or any bundler

103
00:05:13,860 --> 00:05:16,349
of choice we create one big file which

104
00:05:16,349 --> 00:05:18,090
we just stripped source but that's what

105
00:05:18,090 --> 00:05:22,199
it is today no native but believe it or

106
00:05:22,199 --> 00:05:26,270
not today all modern browsers

107
00:05:26,270 --> 00:05:32,219
meaning not ie okay seriously who hates

108
00:05:32,219 --> 00:05:36,180
I I have to support it in my visual grid

109
00:05:36,180 --> 00:05:39,240
anyway all native is modules all old

110
00:05:39,240 --> 00:05:41,849
browsers all modern browsers use native

111
00:05:41,849 --> 00:05:44,669
modules you can just use them without

112
00:05:44,669 --> 00:05:47,699
transpiling and how do you do that first

113
00:05:47,699 --> 00:05:49,440
of all your scripture is just like any

114
00:05:49,440 --> 00:05:51,330
other but you don't scriptures a bundle

115
00:05:51,330 --> 00:05:53,310
your scriptures to the root of the

116
00:05:53,310 --> 00:05:55,710
application app J s or whatever but you

117
00:05:55,710 --> 00:05:58,169
add type equals module first of all was

118
00:05:58,169 --> 00:06:00,479
that what's that type equals module

119
00:06:00,479 --> 00:06:02,580
thing and the answer is it's a new

120
00:06:02,580 --> 00:06:04,259
concept it's actually not new it's from

121
00:06:04,259 --> 00:06:09,330
2015 from es6 es6 defined two kinds of

122
00:06:09,330 --> 00:06:12,090
codes or two kinds of interpretations of

123
00:06:12,090 --> 00:06:14,219
JavaScript code one is script that's the

124
00:06:14,219 --> 00:06:16,740
one we're used to and the others module

125
00:06:16,740 --> 00:06:18,740
that's the new one and I'll explain

126
00:06:18,740 --> 00:06:21,360
script is not allowed to use import or

127
00:06:21,360 --> 00:06:23,539
export that's the first thing easy and

128
00:06:23,539 --> 00:06:26,039
for there are little minor differences

129
00:06:26,039 --> 00:06:28,110
for example this the this and in the

130
00:06:28,110 --> 00:06:31,199
global scope is window or global or

131
00:06:31,199 --> 00:06:33,719
whatever global thing we have and it's

132
00:06:33,719 --> 00:06:35,669
non strict by default if you want it to

133
00:06:35,669 --> 00:06:39,210
be strict you add you strict module code

134
00:06:39,210 --> 00:06:40,710
is allowed to use import index

135
00:06:40,710 --> 00:06:43,169
obviously it's module code and this is

136
00:06:43,169 --> 00:06:46,410
undefined no idea why but this is true

137
00:06:46,410 --> 00:06:48,539
and it's always tricked by definition

138
00:06:48,539 --> 00:06:51,509
it's strict always so remember that

139
00:06:51,509 --> 00:06:54,780
script source app jeaious this is real

140
00:06:54,780 --> 00:06:56,460
this is from a front-end testing

141
00:06:56,460 --> 00:06:58,530
workshop I'm giving I'm using native es

142
00:06:58,530 --> 00:06:59,820
modules kids because it's the simplest

143
00:06:59,820 --> 00:07:03,330
and I'm doing import controller from dot

144
00:07:03,330 --> 00:07:06,180
slash control yes and this just works

145
00:07:06,180 --> 00:07:09,660
okay no bundling no nothing browsers

146
00:07:09,660 --> 00:07:12,360
understand that without web bank so

147
00:07:12,360 --> 00:07:14,789
let's let's talk about that first of all

148
00:07:14,789 --> 00:07:17,580
each import we have so we can see three

149
00:07:17,580 --> 00:07:19,320
imports here that's each of them is a

150
00:07:19,320 --> 00:07:21,509
separate HTTP GET they're basically

151
00:07:21,509 --> 00:07:25,830
getting the controller JS file and there

152
00:07:25,830 --> 00:07:27,900
are no bears specifiers you have to

153
00:07:27,900 --> 00:07:30,539
start everything either in absolute URL

154
00:07:30,539 --> 00:07:33,960
HTTP colon slash whatever or a relative

155
00:07:33,960 --> 00:07:36,240
URL dot slash whatever or dot slash

156
00:07:36,240 --> 00:07:38,880
folder slash folders left whatever dot J

157
00:07:38,880 --> 00:07:41,430
S and you have to specify the extension

158
00:07:41,430 --> 00:07:43,740
because that's how a web servers work

159
00:07:43,740 --> 00:07:46,139
you need to specify the extension okay

160
00:07:46,139 --> 00:07:47,659
that's the three things

161
00:07:47,659 --> 00:07:51,419
h/h import is an HTTP GET no bear

162
00:07:51,419 --> 00:07:53,820
specifiers like import load - or import

163
00:07:53,820 --> 00:07:56,250
whatever and you must specify the

164
00:07:56,250 --> 00:07:58,770
extension and the execution model is

165
00:07:58,770 --> 00:08:01,229
cool it's not like today it's

166
00:08:01,229 --> 00:08:03,750
asynchronous so all the loading and the

167
00:08:03,750 --> 00:08:06,360
parsing of modules is asynchronous it's

168
00:08:06,360 --> 00:08:08,400
happening in parallel so this is really

169
00:08:08,400 --> 00:08:10,979
really fast and the ink in the sync the

170
00:08:10,979 --> 00:08:13,139
execution once the loading and parsing

171
00:08:13,139 --> 00:08:14,909
is done you first load and parse

172
00:08:14,909 --> 00:08:16,800
everything asynchronously and then you

173
00:08:16,800 --> 00:08:18,479
start executing the modules that

174
00:08:18,479 --> 00:08:20,960
javascript and the modules bottom up

175
00:08:20,960 --> 00:08:23,880
today it's synchronous tomorrow once we

176
00:08:23,880 --> 00:08:26,159
have top-level await hopefully it will

177
00:08:26,159 --> 00:08:29,820
be also asynchronous but the million

178
00:08:29,820 --> 00:08:31,470
dollar question is the question on

179
00:08:31,470 --> 00:08:34,829
everyone's mind ok extensions and

180
00:08:34,829 --> 00:08:36,899
everything can we take our NPM waistcoat

181
00:08:36,899 --> 00:08:39,300
our web pack code which uses imports and

182
00:08:39,300 --> 00:08:43,050
just use it in the browser and the

183
00:08:43,050 --> 00:08:44,570
answer is nope

184
00:08:44,570 --> 00:08:48,360
not yet not yet remember 2021 when I'm

185
00:08:48,360 --> 00:08:50,400
back here

186
00:08:50,400 --> 00:08:55,270
hyejung extent why first of all do when

187
00:08:55,270 --> 00:08:57,370
we import a relative like imports

188
00:08:57,370 --> 00:09:00,340
something from dot /foo do we added rjs

189
00:09:00,340 --> 00:09:04,840
today no the the web pack or if we're

190
00:09:04,840 --> 00:09:07,300
using node as the dodgiest automatically

191
00:09:07,300 --> 00:09:10,060
but in in today's world in the browser

192
00:09:10,060 --> 00:09:12,760
world we need to add that no bare

193
00:09:12,760 --> 00:09:14,800
specifies I mean without bare specifies

194
00:09:14,800 --> 00:09:17,140
without importing packages like lodash

195
00:09:17,140 --> 00:09:19,780
and and and whatever we can't really

196
00:09:19,780 --> 00:09:22,060
work and the last thing is I have

197
00:09:22,060 --> 00:09:25,470
hundreds of es modules in my in my app

198
00:09:25,470 --> 00:09:28,060
HTTP getting each and every one of them

199
00:09:28,060 --> 00:09:30,520
that that's a killer we will talk about

200
00:09:30,520 --> 00:09:34,510
each one of these and how we will deal

201
00:09:34,510 --> 00:09:36,760
with them and part of how we will deal

202
00:09:36,760 --> 00:09:39,840
with them is looking to the nodejs part

203
00:09:39,840 --> 00:09:43,330
let's see how that works

204
00:09:43,330 --> 00:09:47,500
in in node Reyes native is modules in

205
00:09:47,500 --> 00:09:49,450
nodejs and then we'll combine everything

206
00:09:49,450 --> 00:09:52,420
in and you'll see the whole picture now

207
00:09:52,420 --> 00:09:55,600
no chest already has a really good

208
00:09:55,600 --> 00:09:57,850
module solution negative if you want

209
00:09:57,850 --> 00:10:00,490
it's called common areas and it looks

210
00:10:00,490 --> 00:10:02,260
like this for all you front-end

211
00:10:02,260 --> 00:10:03,940
developers that don't trust back-end

212
00:10:03,940 --> 00:10:07,210
developers I remember that don't don't

213
00:10:07,210 --> 00:10:11,530
go walking in alleys at night and I see

214
00:10:11,530 --> 00:10:17,760
her now I've been both by the way so

215
00:10:17,760 --> 00:10:21,160
okay so require it's it's required users

216
00:10:21,160 --> 00:10:22,810
require syntax it's not a syntax

217
00:10:22,810 --> 00:10:24,730
actually a function which imports net

218
00:10:24,730 --> 00:10:27,820
and DNS and node fetch and whatever very

219
00:10:27,820 --> 00:10:30,880
very similar the syntax is similar to es

220
00:10:30,880 --> 00:10:35,040
modules but it isn't okay it's it's

221
00:10:35,040 --> 00:10:37,030
specific to node.js and it's called

222
00:10:37,030 --> 00:10:41,320
common J's or CJ s in short and SM is es

223
00:10:41,320 --> 00:10:43,839
modules in short so yes I mean no js'

224
00:10:43,839 --> 00:10:48,839
has to take the existing system and

225
00:10:48,839 --> 00:10:52,360
slowly migrate to a totally new system

226
00:10:52,360 --> 00:10:55,839
which is similar but not exactly the

227
00:10:55,839 --> 00:10:59,050
same which is really really tough and

228
00:10:59,050 --> 00:11:02,940
it's a it's a it's a it's a

229
00:11:02,940 --> 00:11:05,280
a tug of war sorry it's a tug of war

230
00:11:05,280 --> 00:11:08,600
between two things between two goals

231
00:11:08,600 --> 00:11:12,240
first of all forward thinking I want es

232
00:11:12,240 --> 00:11:14,640
Eman no Jas we want es mi no J's to be

233
00:11:14,640 --> 00:11:17,250
compatible with tc39 with with

234
00:11:17,250 --> 00:11:20,340
JavaScript's specification it has to be

235
00:11:20,340 --> 00:11:22,440
compatible to the letter it can't just

236
00:11:22,440 --> 00:11:25,590
do its own thing and the other thing it

237
00:11:25,590 --> 00:11:28,890
needs to be compatible with browser is

238
00:11:28,890 --> 00:11:33,090
modules why because the the modules

239
00:11:33,090 --> 00:11:36,750
working group in node and wants the

240
00:11:36,750 --> 00:11:39,060
whole thing to work together once code

241
00:11:39,060 --> 00:11:41,400
that is universal that works both in the

242
00:11:41,400 --> 00:11:44,040
browser and in nodejs and works

243
00:11:44,040 --> 00:11:46,800
seamlessly together so that is one of

244
00:11:46,800 --> 00:11:48,930
the goals of nodejs work modules working

245
00:11:48,930 --> 00:11:51,630
group not ignore what is happening in

246
00:11:51,630 --> 00:11:55,710
the browser unfortunately we need to go

247
00:11:55,710 --> 00:11:57,900
the other way we want to work well with

248
00:11:57,900 --> 00:12:01,710
common GS okay and we want to be

249
00:12:01,710 --> 00:12:04,620
somewhat compatible with the web pack

250
00:12:04,620 --> 00:12:07,350
way of esm as we've seen web pack and

251
00:12:07,350 --> 00:12:10,590
browser ism are not the same we can't

252
00:12:10,590 --> 00:12:12,930
move from one to another but we want to

253
00:12:12,930 --> 00:12:15,570
be somewhat compatible with them so that

254
00:12:15,570 --> 00:12:17,700
the migration process works

255
00:12:17,700 --> 00:12:20,130
okay so we have forward thinking goals

256
00:12:20,130 --> 00:12:22,350
and backward compatibility goals and a

257
00:12:22,350 --> 00:12:24,090
lot of times there's a conflict between

258
00:12:24,090 --> 00:12:28,080
them and we have to choose and it's a

259
00:12:28,080 --> 00:12:31,590
discussion it's very very controversial

260
00:12:31,590 --> 00:12:34,920
but usually what is chosen is the

261
00:12:34,920 --> 00:12:37,560
forward thinking goes this will hamper

262
00:12:37,560 --> 00:12:40,560
migration probably but in the end it

263
00:12:40,560 --> 00:12:42,510
will I think it will benefit everybody

264
00:12:42,510 --> 00:12:44,460
so let's see what they came up with you

265
00:12:44,460 --> 00:12:49,080
know in no.12 first of all not like

266
00:12:49,080 --> 00:12:51,240
require required does the same thing as

267
00:12:51,240 --> 00:12:53,250
web pack you don't have to specify the

268
00:12:53,250 --> 00:12:56,100
extension so this won't work import

269
00:12:56,100 --> 00:12:58,710
something from somewhere won't work this

270
00:12:58,710 --> 00:13:00,960
is better you must specify the extension

271
00:13:00,960 --> 00:13:09,210
dot Jas but it's not yes it's MJS or as

272
00:13:09,210 --> 00:13:11,310
I like to call it the michael jackson

273
00:13:11,310 --> 00:13:14,430
script

274
00:13:14,440 --> 00:13:16,060
yeah

275
00:13:16,060 --> 00:13:19,880
so yeah it's actually module JavaScript

276
00:13:19,880 --> 00:13:22,700
or or whatever jsm was was already taken

277
00:13:22,700 --> 00:13:26,660
so MJS is the new thing first of all why

278
00:13:26,660 --> 00:13:30,440
extensions my extensions obviously

279
00:13:30,440 --> 00:13:32,390
browser compatibility remember the goal

280
00:13:32,390 --> 00:13:34,610
is browser compatibility if browsers say

281
00:13:34,610 --> 00:13:36,649
that we need an extension then we're

282
00:13:36,649 --> 00:13:40,550
going that way in node.js but why it dot

283
00:13:40,550 --> 00:13:43,730
MJS and not dodge yes because an ESM

284
00:13:43,730 --> 00:13:47,390
file is not a script it's a module and

285
00:13:47,390 --> 00:13:50,209
it has different way of thinking about

286
00:13:50,209 --> 00:13:52,610
the code in there and if an editor tool

287
00:13:52,610 --> 00:13:56,000
for example wants to yes let's say yes

288
00:13:56,000 --> 00:13:58,430
lint what's this lint the file it needs

289
00:13:58,430 --> 00:14:00,470
to know that this is a margin this is

290
00:14:00,470 --> 00:14:04,220
module code and not script code so they

291
00:14:04,220 --> 00:14:08,089
decided on a specific extension there

292
00:14:08,089 --> 00:14:10,760
are other reasons but in essence that is

293
00:14:10,760 --> 00:14:15,370
the point this was like they're idiots

294
00:14:15,370 --> 00:14:17,959
back there and in the modules working

295
00:14:17,959 --> 00:14:20,089
group this caused a huge uproar and we

296
00:14:20,089 --> 00:14:22,760
understand that developers love their

297
00:14:22,760 --> 00:14:25,579
JavaScript extension and I understand

298
00:14:25,579 --> 00:14:27,770
there's a there's you know it's just an

299
00:14:27,770 --> 00:14:29,600
extension but there's an emotion feeling

300
00:14:29,600 --> 00:14:35,079
to dot J s I really understand that and

301
00:14:35,079 --> 00:14:37,940
so they came up in no.12 with a solution

302
00:14:37,940 --> 00:14:40,670
which is type equals module so if you

303
00:14:40,670 --> 00:14:43,760
have a package.json with type module in

304
00:14:43,760 --> 00:14:47,270
it a field a property then all the ESM

305
00:14:47,270 --> 00:14:50,630
all that package the j s files will be

306
00:14:50,630 --> 00:14:53,240
ESM but then they will be only a same

307
00:14:53,240 --> 00:14:55,220
and not common J's so you can switch

308
00:14:55,220 --> 00:14:57,950
between the two you can say I want this

309
00:14:57,950 --> 00:15:01,610
to be a regular package common J s J's

310
00:15:01,610 --> 00:15:05,380
file is a common J's or I want it to be

311
00:15:05,380 --> 00:15:09,529
a SM in all J's or ASM so you have this

312
00:15:09,529 --> 00:15:12,980
dot MJS is always yeah yes M is always

313
00:15:12,980 --> 00:15:16,160
yes M code dot CJ s is always CJ s and

314
00:15:16,160 --> 00:15:20,029
that j s is by default common j s but if

315
00:15:20,029 --> 00:15:22,730
we have type module then it's es m weird

316
00:15:22,730 --> 00:15:26,480
but it's you know like compromise No

317
00:15:26,480 --> 00:15:30,800
but is really happy which is good we in

318
00:15:30,800 --> 00:15:33,800
in in in common jazz we can NN webpack

319
00:15:33,800 --> 00:15:35,149
we can do something like import

320
00:15:35,149 --> 00:15:38,029
something and specify a directory ok

321
00:15:38,029 --> 00:15:42,529
this doesn't work anymore well if this

322
00:15:42,529 --> 00:15:44,630
doesn't work anymore if we have dot

323
00:15:44,630 --> 00:15:47,899
index jsr index dot MJS that doesn't

324
00:15:47,899 --> 00:15:50,449
work anymore it works only if some deer

325
00:15:50,449 --> 00:15:53,209
has a package.json again browser

326
00:15:53,209 --> 00:15:56,959
compatibility and this is bear

327
00:15:56,959 --> 00:15:59,240
specifiers import something from low -

328
00:15:59,240 --> 00:16:02,360
or from whatever package it is obviously

329
00:16:02,360 --> 00:16:05,360
this works I mean if that didn't work

330
00:16:05,360 --> 00:16:09,110
no no js' program would work anywhere

331
00:16:09,110 --> 00:16:13,820
but you can't use the index J s thing in

332
00:16:13,820 --> 00:16:15,889
node module so package has to have a

333
00:16:15,889 --> 00:16:18,350
package.json with a main entry point and

334
00:16:18,350 --> 00:16:22,459
you can't rely on index dot Reyes but

335
00:16:22,459 --> 00:16:24,529
you're saying why do we need this whole

336
00:16:24,529 --> 00:16:28,790
thing because bear specifiers are anyway

337
00:16:28,790 --> 00:16:31,699
not backward-compatible it doesn't

338
00:16:31,699 --> 00:16:34,490
really matter whatever we choose in

339
00:16:34,490 --> 00:16:38,149
nodejs because there are no bear

340
00:16:38,149 --> 00:16:43,430
specifiers in in in the browser which

341
00:16:43,430 --> 00:16:45,649
brings us to yes they're not specified

342
00:16:45,649 --> 00:16:47,209
there yet they're currently illegal if

343
00:16:47,209 --> 00:16:49,160
you try to put a bear specifier in a

344
00:16:49,160 --> 00:16:51,589
browser code then it will blow up and

345
00:16:51,589 --> 00:16:55,639
give an error but and it works in nodejs

346
00:16:55,639 --> 00:17:00,800
but this was an opportunity finally for

347
00:17:00,800 --> 00:17:05,030
the node people to start influencing the

348
00:17:05,030 --> 00:17:08,059
browser people okay for note saying look

349
00:17:08,059 --> 00:17:10,939
we understand bear specifiers we know

350
00:17:10,939 --> 00:17:13,309
how that ecosystem works let's work with

351
00:17:13,309 --> 00:17:16,160
you people and define something that

352
00:17:16,160 --> 00:17:18,049
will make bear specifiers work in the

353
00:17:18,049 --> 00:17:20,630
browser and be node.js compatible and

354
00:17:20,630 --> 00:17:23,919
what they make what they came up with

355
00:17:23,919 --> 00:17:28,610
was import Maps import maps are needed

356
00:17:28,610 --> 00:17:31,640
only by the browser no js' doesn't need

357
00:17:31,640 --> 00:17:34,160
them yet but they're needed only brought

358
00:17:34,160 --> 00:17:36,740
by the browser no js' if it gets a bear

359
00:17:36,740 --> 00:17:38,990
specifier it knows to look in the node

360
00:17:38,990 --> 00:17:40,460
modules folder

361
00:17:40,460 --> 00:17:42,470
in the node modules directory but

362
00:17:42,470 --> 00:17:46,220
browsers don't so what you do is and

363
00:17:46,220 --> 00:17:48,830
let's look at the right side we have a

364
00:17:48,830 --> 00:17:50,600
script type equals module and it's

365
00:17:50,600 --> 00:17:52,820
importing lodash for example that's a

366
00:17:52,820 --> 00:17:56,330
bare specifier to for this to work we

367
00:17:56,330 --> 00:17:58,880
need another script type equals import

368
00:17:58,880 --> 00:18:03,230
map which specifies all the imports so

369
00:18:03,230 --> 00:18:05,060
for example you have import moment and

370
00:18:05,060 --> 00:18:07,610
import load - and the import load that

371
00:18:07,610 --> 00:18:10,480
says if we're importing a bear specifier

372
00:18:10,480 --> 00:18:14,180
then that bear specifier that will be

373
00:18:14,180 --> 00:18:17,510
the file for that bear specifier so the

374
00:18:17,510 --> 00:18:20,420
browser looks into that conversion map

375
00:18:20,420 --> 00:18:25,310
and knows where which HTTP GET to do to

376
00:18:25,310 --> 00:18:28,670
bring lodash in it's actually makes

377
00:18:28,670 --> 00:18:31,100
total sense and very easy there's a lot

378
00:18:31,100 --> 00:18:32,870
of details around it you can go and look

379
00:18:32,870 --> 00:18:35,000
import maps on the web it's really

380
00:18:35,000 --> 00:18:37,400
interesting and really cool it's

381
00:18:37,400 --> 00:18:39,350
starting to become implemented in Chrome

382
00:18:39,350 --> 00:18:41,780
hopefully other browsers will catch up

383
00:18:41,780 --> 00:18:44,090
and we will have a standard and it is a

384
00:18:44,090 --> 00:18:47,030
path to universal es modules modules

385
00:18:47,030 --> 00:18:49,940
that work without any change both in

386
00:18:49,940 --> 00:18:55,010
node and the browser and web pack and

387
00:18:55,010 --> 00:18:58,100
how will it work in node the idea is or

388
00:18:58,100 --> 00:19:00,530
or for browsers the idea is once you npm

389
00:19:00,530 --> 00:19:04,400
install or yarn add your module that npm

390
00:19:04,400 --> 00:19:06,980
install or yarn add will modify an

391
00:19:06,980 --> 00:19:09,530
import map in the root of your in the

392
00:19:09,530 --> 00:19:12,650
root in the root of your package it will

393
00:19:12,650 --> 00:19:14,930
modify the import map so that browsers

394
00:19:14,930 --> 00:19:16,910
if your script source to that import map

395
00:19:16,910 --> 00:19:19,940
will know exactly where things are so

396
00:19:19,940 --> 00:19:23,270
you will npm install your packages and

397
00:19:23,270 --> 00:19:26,570
then just import them there using native

398
00:19:26,570 --> 00:19:28,940
syntax and then know where pack is

399
00:19:28,940 --> 00:19:31,400
needed you will just refresh change the

400
00:19:31,400 --> 00:19:33,650
file refresh the page or do hot module

401
00:19:33,650 --> 00:19:37,340
reloading and boom everything works no

402
00:19:37,340 --> 00:19:40,130
we're back know bundlers whatsoever by

403
00:19:40,130 --> 00:19:41,810
the way the npm install things that

404
00:19:41,810 --> 00:19:43,220
updates the import map that's a

405
00:19:43,220 --> 00:19:49,220
speculation of mine so coffin here so as

406
00:19:49,220 --> 00:19:52,190
we've seen we get used universal native

407
00:19:52,190 --> 00:19:53,840
is modules mean

408
00:19:53,840 --> 00:19:55,429
knowledge eels that were both in the

409
00:19:55,429 --> 00:19:58,400
browser and in npm LAN nodejs etc

410
00:19:58,400 --> 00:20:02,150
without any change and this is the most

411
00:20:02,150 --> 00:20:04,400
important thing import Maps will allow

412
00:20:04,400 --> 00:20:05,960
no Jason browser J's browser

413
00:20:05,960 --> 00:20:08,360
compatibility with no translation or

414
00:20:08,360 --> 00:20:14,029
bundling so let's review what about the

415
00:20:14,029 --> 00:20:16,000
problem of extensions for module files

416
00:20:16,000 --> 00:20:18,980
node forces you to write extension so

417
00:20:18,980 --> 00:20:22,549
the everybody is basically saying when

418
00:20:22,549 --> 00:20:24,140
you're importing something or when

419
00:20:24,140 --> 00:20:26,570
you're requiring something start adding

420
00:20:26,570 --> 00:20:28,970
extensions to that thing because the

421
00:20:28,970 --> 00:20:31,010
world is migrating to having the

422
00:20:31,010 --> 00:20:33,350
extension in the import it may be a bit

423
00:20:33,350 --> 00:20:35,510
ugly but that is the reality

424
00:20:35,510 --> 00:20:37,610
what about bear specifiers bear

425
00:20:37,610 --> 00:20:39,860
specifiers which was a problem now we

426
00:20:39,860 --> 00:20:42,080
have we will have import maps in a year

427
00:20:42,080 --> 00:20:44,929
or two and we've solved that problem

428
00:20:44,929 --> 00:20:48,020
what about HTTP getting every one of my

429
00:20:48,020 --> 00:20:50,779
hundred modules is that solved nope and

430
00:20:50,779 --> 00:20:53,299
the answer here that I call it the black

431
00:20:53,299 --> 00:20:56,480
hole problem because I'm certain a lot

432
00:20:56,480 --> 00:20:58,760
of you have seen this the heaviest

433
00:20:58,760 --> 00:21:01,190
object in the universe and some of you

434
00:21:01,190 --> 00:21:06,350
haven't that's nice yeah node modules is

435
00:21:06,350 --> 00:21:11,270
huge lots of modules first of all it's

436
00:21:11,270 --> 00:21:14,480
not that big because we want the the not

437
00:21:14,480 --> 00:21:15,830
the dev dependency we want the

438
00:21:15,830 --> 00:21:17,809
production dependencies most of the

439
00:21:17,809 --> 00:21:19,909
hugeness in node modules is having

440
00:21:19,909 --> 00:21:21,980
typescript bubble web pack is lint and

441
00:21:21,980 --> 00:21:23,870
all those development tools inside node

442
00:21:23,870 --> 00:21:26,630
modules it's like in Java every project

443
00:21:26,630 --> 00:21:29,659
has a Java compiler and Eclipse and

444
00:21:29,659 --> 00:21:32,240
whatever development tools are inside

445
00:21:32,240 --> 00:21:34,370
this is the situation in in in

446
00:21:34,370 --> 00:21:36,740
JavaScript today so it's not that big

447
00:21:36,740 --> 00:21:38,870
but it's still too big for production

448
00:21:38,870 --> 00:21:41,270
it's still like tens of modules hundreds

449
00:21:41,270 --> 00:21:43,520
of more of modules too big for

450
00:21:43,520 --> 00:21:45,559
production if I need to HTTP get all of

451
00:21:45,559 --> 00:21:49,789
them that's a problem now I don't have a

452
00:21:49,789 --> 00:21:52,730
lot of time so I'm not gonna you know

453
00:21:52,730 --> 00:21:55,190
expand on this the solution people

454
00:21:55,190 --> 00:21:58,250
thought was gonna happen was HTTP 2

455
00:21:58,250 --> 00:22:00,500
which allows us to bring a lot of files

456
00:22:00,500 --> 00:22:03,260
at were at the same time and for the

457
00:22:03,260 --> 00:22:07,670
server to push all these files to the

458
00:22:07,670 --> 00:22:13,650
even before the browser requests them

459
00:22:13,660 --> 00:22:16,460
yeah that's better

460
00:22:16,460 --> 00:22:18,559
but it's not good enough there's an

461
00:22:18,559 --> 00:22:20,330
article on that I don't want to I don't

462
00:22:20,330 --> 00:22:21,920
want to talk about that

463
00:22:21,920 --> 00:22:24,290
it's it's it's like I do want to talk

464
00:22:24,290 --> 00:22:26,570
about that but I'm out of time and the

465
00:22:26,570 --> 00:22:29,000
other thing and I think the real answer

466
00:22:29,000 --> 00:22:31,840
is what is called the web packages

467
00:22:31,840 --> 00:22:35,510
solution the web packages is a upcoming

468
00:22:35,510 --> 00:22:37,280
standard which enables us to bundle

469
00:22:37,280 --> 00:22:40,610
files as they are as HTTP resources and

470
00:22:40,610 --> 00:22:42,280
give them to the browser in one time

471
00:22:42,280 --> 00:22:45,320
fascinating a subject again I don't have

472
00:22:45,320 --> 00:22:50,289
time so wrap up

473
00:22:50,299 --> 00:22:54,080
browsers support only relative paths and

474
00:22:54,080 --> 00:22:57,470
it's lunch I know I know

475
00:22:57,470 --> 00:22:59,780
node support for relative path is

476
00:22:59,780 --> 00:23:02,299
intentionally browser compatible so it

477
00:23:02,299 --> 00:23:05,720
uses extension it uses MJS but if you

478
00:23:05,720 --> 00:23:08,750
really love your Jas use type module in

479
00:23:08,750 --> 00:23:12,110
the package.json bear specifiers are

480
00:23:12,110 --> 00:23:15,049
there a node support for bear specifiers

481
00:23:15,049 --> 00:23:16,850
in browser will be coming hopefully

482
00:23:16,850 --> 00:23:19,549
using the import map proposal and the

483
00:23:19,549 --> 00:23:22,130
black hole problem is a problem now but

484
00:23:22,130 --> 00:23:23,929
it probably will be solved by technology

485
00:23:23,929 --> 00:23:26,660
sister HTTP 2 and web packages so the

486
00:23:26,660 --> 00:23:29,200
future is very bright for its modules

487
00:23:29,200 --> 00:23:31,480
node and browser interoperability

488
00:23:31,480 --> 00:23:34,280
without the need for bundlers and

489
00:23:34,280 --> 00:23:36,559
transpilers simpler times people are

490
00:23:36,559 --> 00:23:39,940
coming thank you very much

