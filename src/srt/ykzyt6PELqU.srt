1
00:00:10,470 --> 00:00:13,350

so now we're going to the Q&A with

2
00:00:13,350 --> 00:00:15,150
andreas and Brendan we have five

3
00:00:15,150 --> 00:00:17,400
questions selected from your tweets so

4
00:00:17,400 --> 00:00:24,180
please take a seat here

5
00:00:24,190 --> 00:00:26,890
this is so exciting I'm so close to him

6
00:00:26,890 --> 00:00:32,310
I have a phablet loaded with questions

7
00:00:32,310 --> 00:00:34,870
so the first one came from a tweet

8
00:00:34,870 --> 00:00:36,370
that's I think it's really really

9
00:00:36,370 --> 00:00:39,790
interesting so Brandon at what point did

10
00:00:39,790 --> 00:00:42,460
you start imagining that JavaScript

11
00:00:42,460 --> 00:00:45,580
could one day run and in control robots

12
00:00:45,580 --> 00:00:50,410
or games within games or zombies in

13
00:00:50,410 --> 00:00:55,300
WebGL compiled from C++ when I think

14
00:00:55,300 --> 00:00:57,930
around the time friends went off the air

15
00:00:57,930 --> 00:01:00,940
and I lost my gig there that's Chandler

16
00:01:00,940 --> 00:01:03,940
uh no III didn't foresee all that I I

17
00:01:03,940 --> 00:01:06,340
thought it was going to be a glue

18
00:01:06,340 --> 00:01:08,500
language or what some people call duct

19
00:01:08,500 --> 00:01:11,890
tape language which is really I think

20
00:01:11,890 --> 00:01:14,950
not not a meaningful phrase it was going

21
00:01:14,950 --> 00:01:16,990
to be the little you know brother or the

22
00:01:16,990 --> 00:01:19,270
sidekick to Java and Java will do all

23
00:01:19,270 --> 00:01:22,540
the applets and components and beans and

24
00:01:22,540 --> 00:01:23,830
those would be in your browser and

25
00:01:23,830 --> 00:01:25,900
JavaScript would just be how you glued

26
00:01:25,900 --> 00:01:27,610
them together sort of like visual basic

27
00:01:27,610 --> 00:01:30,610
was to C++ in Microsoft's Windows

28
00:01:30,610 --> 00:01:34,360
environment at the time but John never

29
00:01:34,360 --> 00:01:36,550
really got out of the applet cage it

30
00:01:36,550 --> 00:01:39,280
never loaded quickly it never learned

31
00:01:39,280 --> 00:01:41,680
about the Dom so I think that that was

32
00:01:41,680 --> 00:01:44,860
fatal awesome so basically jealousy was

33
00:01:44,860 --> 00:01:46,810
only going to be for embedding applets

34
00:01:46,810 --> 00:01:50,320
now it's for reinventing the JVM inside

35
00:01:50,320 --> 00:01:53,410
JavaScript it's pretty awesome so

36
00:01:53,410 --> 00:01:55,720
another thing that comes up a lot is

37
00:01:55,720 --> 00:01:58,840
JavaScript to some people has good parts

38
00:01:58,840 --> 00:02:02,830
and bad parts and now with old es mi

39
00:02:02,830 --> 00:02:04,750
administered six and seven innovations

40
00:02:04,750 --> 00:02:06,700
and additions it creates new

41
00:02:06,700 --> 00:02:09,069
opportunities for now narrowing down

42
00:02:09,069 --> 00:02:11,590
again do you foresee that we are going

43
00:02:11,590 --> 00:02:14,470
to be creating JavaScript a good parts

44
00:02:14,470 --> 00:02:16,390
again now that we get all these new

45
00:02:16,390 --> 00:02:18,610
features I think this is true of the web

46
00:02:18,610 --> 00:02:22,450
in general like HTML has bad parts CSS I

47
00:02:22,450 --> 00:02:26,560
think we all know has bad parts the

48
00:02:26,560 --> 00:02:28,269
funny thing is people think when you

49
00:02:28,269 --> 00:02:31,330
have an evolving system that if a new

50
00:02:31,330 --> 00:02:34,450
requirement comes into the system you

51
00:02:34,450 --> 00:02:36,850
have to evolve quickly that's not how it

52
00:02:36,850 --> 00:02:37,960
works in nature you are

53
00:02:37,960 --> 00:02:40,570
have to have had the genetic diversity

54
00:02:40,570 --> 00:02:43,390
and already have evolved to survive the

55
00:02:43,390 --> 00:02:45,970
new disease or the new predator so the

56
00:02:45,970 --> 00:02:48,100
same with javascript and HTML and CSS

57
00:02:48,100 --> 00:02:49,630
they're going to have too much in them

58
00:02:49,630 --> 00:02:50,860
they're going to have mistakes they're

59
00:02:50,860 --> 00:02:51,880
going to have things that you can't

60
00:02:51,880 --> 00:02:54,040
remove because they already are used by

61
00:02:54,040 --> 00:02:57,310
some pages their apps on the web but

62
00:02:57,310 --> 00:02:59,680
they can be deprecated and they can fade

63
00:02:59,680 --> 00:03:02,140
away and so I you know I just tweeted

64
00:03:02,140 --> 00:03:03,910
back earlier before coming on stage I

65
00:03:03,910 --> 00:03:06,340
don't agree with Crockford he's too

66
00:03:06,340 --> 00:03:09,580
prescriptive astir my taste he says you

67
00:03:09,580 --> 00:03:10,870
know they're the bad parts you must

68
00:03:10,870 --> 00:03:12,190
never use and there are these little

69
00:03:12,190 --> 00:03:14,140
good parts that I say you should use

70
00:03:14,140 --> 00:03:16,810
like the closure pattern against the

71
00:03:16,810 --> 00:03:19,180
prototypal pattern it's too it's too

72
00:03:19,180 --> 00:03:22,090
extreme and JavaScript needed to have

73
00:03:22,090 --> 00:03:24,820
more patterns or more strength to it in

74
00:03:24,820 --> 00:03:26,290
order to survive for unforeseen

75
00:03:26,290 --> 00:03:28,000
circumstances and needs to keep evolving

76
00:03:28,000 --> 00:03:31,570
as it has so I I think there will

77
00:03:31,570 --> 00:03:33,940
continue to be messy evolution with bad

78
00:03:33,940 --> 00:03:36,070
parts and we won't even know they're bad

79
00:03:36,070 --> 00:03:38,580
until later that's the that's the killer

80
00:03:38,580 --> 00:03:47,740
don't you wanted is it off here's no

81
00:03:47,740 --> 00:03:51,400
opinion can we hello yeah all right all

82
00:03:51,400 --> 00:03:53,350
right yeah I think it's especially the

83
00:03:53,350 --> 00:03:55,330
part around removing things being

84
00:03:55,330 --> 00:03:57,460
difficult is ray true um Brennan's

85
00:03:57,460 --> 00:04:00,520
explanation reminded me of a property I

86
00:04:00,520 --> 00:04:02,800
found in the Dom in missoula

87
00:04:02,800 --> 00:04:04,840
implementation a couple years ago it's

88
00:04:04,840 --> 00:04:06,960
called navigator enable taint and

89
00:04:06,960 --> 00:04:10,240
Brennan edited like 15 years ago and it

90
00:04:10,240 --> 00:04:11,920
always returns false because you never

91
00:04:11,920 --> 00:04:13,750
actually implemented attained

92
00:04:13,750 --> 00:04:17,530
propagation and I asked him kind of

93
00:04:17,530 --> 00:04:18,850
yelling across the desk like what the

94
00:04:18,850 --> 00:04:20,350
hell is this thing and what does it do

95
00:04:20,350 --> 00:04:23,560
and why is it here and in my moment of

96
00:04:23,560 --> 00:04:27,250
like attempted purity I submitted a

97
00:04:27,250 --> 00:04:28,960
patch to remove that property because

98
00:04:28,960 --> 00:04:31,270
clearly I guess this is nobody would use

99
00:04:31,270 --> 00:04:33,730
this it was added 14 years ago for a

100
00:04:33,730 --> 00:04:35,830
feature that never got implemented right

101
00:04:35,830 --> 00:04:39,460
and this this went for the ride a train

102
00:04:39,460 --> 00:04:42,520
in Firefox and I broke like half over

103
00:04:42,520 --> 00:04:44,830
because it turns out that jQuery uses

104
00:04:44,830 --> 00:04:45,510
that to

105
00:04:45,510 --> 00:04:46,920
fact that you're running on Firefox or

106
00:04:46,920 --> 00:04:55,620
not

107
00:04:55,630 --> 00:04:58,130
that's really great only a GS conf do

108
00:04:58,130 --> 00:04:59,930
get applause for breaking like half the

109
00:04:59,930 --> 00:05:02,060
web thank you very much I feel much

110
00:05:02,060 --> 00:05:03,890
better about it already so yeah this

111
00:05:03,890 --> 00:05:05,630
removing this kind of stuff is it's very

112
00:05:05,630 --> 00:05:07,670
hard it has to be very slow we have

113
00:05:07,670 --> 00:05:09,740
removed stuff in the past successfully

114
00:05:09,740 --> 00:05:12,410
right before X for example of also

115
00:05:12,410 --> 00:05:14,990
removed after some pain so it is

116
00:05:14,990 --> 00:05:16,450
possible it simply takes a lot of time

117
00:05:16,450 --> 00:05:18,860
there's a I think there's a biologist

118
00:05:18,860 --> 00:05:23,750
who wants to breed chickens to express

119
00:05:23,750 --> 00:05:26,600
what are called genetic atavism the

120
00:05:26,600 --> 00:05:28,640
chickens with teeth like dinosaurs

121
00:05:28,640 --> 00:05:31,910
because that that'll enable taint method

122
00:05:31,910 --> 00:05:33,140
is still down there in their DNA

123
00:05:33,140 --> 00:05:35,570
somewhere maybe they can get teeth maybe

124
00:05:35,570 --> 00:05:37,400
maybe an able taint will come back I

125
00:05:37,400 --> 00:05:41,240
don't know actually I have a very hard

126
00:05:41,240 --> 00:05:43,160
question for Angie as I think because he

127
00:05:43,160 --> 00:05:45,470
talks so much today about JavaScript

128
00:05:45,470 --> 00:05:48,050
being a great target for compilation so

129
00:05:48,050 --> 00:05:50,540
when should we use rust and when should

130
00:05:50,540 --> 00:05:54,230
we use JavaScript so rust was designed

131
00:05:54,230 --> 00:05:56,150
for a very specific purpose to rewrite

132
00:05:56,150 --> 00:05:59,810
system parts and there's actually no

133
00:05:59,810 --> 00:06:01,310
necessary heart distinction between

134
00:06:01,310 --> 00:06:03,590
these two languages I already talked to

135
00:06:03,590 --> 00:06:05,419
the team whether rust should be able to

136
00:06:05,419 --> 00:06:07,700
target JavaScript there might be some

137
00:06:07,700 --> 00:06:09,770
cases where it makes sense to use rust

138
00:06:09,770 --> 00:06:12,290
to implement something that runs on top

139
00:06:12,290 --> 00:06:14,570
of the web stack in JavaScript and there

140
00:06:14,570 --> 00:06:16,010
might be other cases where it makes

141
00:06:16,010 --> 00:06:17,600
sense to implement system parts as

142
00:06:17,600 --> 00:06:19,040
JavaScript so I don't think there's a

143
00:06:19,040 --> 00:06:21,560
necessary order there and I will be

144
00:06:21,560 --> 00:06:23,930
surprised if you don't have a rust to

145
00:06:23,930 --> 00:06:25,669
javis compiler at some point yeah I

146
00:06:25,669 --> 00:06:28,910
agree the rust main sweet spot is safety

147
00:06:28,910 --> 00:06:32,270
with the same memory controlled C++

148
00:06:32,270 --> 00:06:35,450
gives you all right and you mentioned

149
00:06:35,450 --> 00:06:38,270
types today and in the community we see

150
00:06:38,270 --> 00:06:39,800
a lot of different projects for tackling

151
00:06:39,800 --> 00:06:42,169
types in Java Script so we have at

152
00:06:42,169 --> 00:06:44,620
script and now coming out typescript

153
00:06:44,620 --> 00:06:49,610
flow dart just kidding so what do we do

154
00:06:49,610 --> 00:06:51,110
which one do we use what do you think

155
00:06:51,110 --> 00:06:53,690
about this project do you think once

156
00:06:53,690 --> 00:06:55,790
again that the better one will win and

157
00:06:55,790 --> 00:06:57,590
the rest will die out I think we're

158
00:06:57,590 --> 00:06:59,750
still in the early days there's just

159
00:06:59,750 --> 00:07:03,320
been some interest in equity c39 the

160
00:07:03,320 --> 00:07:05,020
standards body about standardizing

161
00:07:05,020 --> 00:07:07,330
something to do with types may be based

162
00:07:07,330 --> 00:07:10,300
on type script and flow both using the

163
00:07:10,300 --> 00:07:13,060
colon annotation like the ML languages

164
00:07:13,060 --> 00:07:16,409
do like Pascal's remember that does

165
00:07:16,409 --> 00:07:20,789
Algol languages some of them anyway that

166
00:07:20,789 --> 00:07:25,389
syntax VAR x colon t you can't just

167
00:07:25,389 --> 00:07:27,039
standardized it it has meaning if you

168
00:07:27,039 --> 00:07:28,750
define it it has something to say about

169
00:07:28,750 --> 00:07:30,580
the types system and the type

170
00:07:30,580 --> 00:07:32,590
expressions or type annotations so we're

171
00:07:32,590 --> 00:07:33,909
not going to rush to standardize that

172
00:07:33,909 --> 00:07:35,560
the only thing we're doing now is saying

173
00:07:35,560 --> 00:07:38,139
that no engine can go claim as an

174
00:07:38,139 --> 00:07:40,090
extension on its own that colon after

175
00:07:40,090 --> 00:07:42,819
the name in the declaration that that's

176
00:07:42,819 --> 00:07:44,650
reserved to the future standards that

177
00:07:44,650 --> 00:07:46,750
might standardize it I think typescript

178
00:07:46,750 --> 00:07:48,909
and then flow inspired by the much more

179
00:07:48,909 --> 00:07:52,030
powerful should keep going I think the

180
00:07:52,030 --> 00:07:53,560
best thing they can do is get adoption

181
00:07:53,560 --> 00:07:55,569
the worst thing you could do is make

182
00:07:55,569 --> 00:07:58,060
design by committee you know union of

183
00:07:58,060 --> 00:08:00,159
all the systems or intersection of all

184
00:08:00,159 --> 00:08:01,319
the systems or some committee

185
00:08:01,319 --> 00:08:03,159
frankenstein standards that would be

186
00:08:03,159 --> 00:08:05,800
terrible all right and the final

187
00:08:05,800 --> 00:08:08,710
question for you Brandon someone was

188
00:08:08,710 --> 00:08:10,840
wondering about what what are the

189
00:08:10,840 --> 00:08:13,630
biggest lessons are takeaways from tc39

190
00:08:13,630 --> 00:08:16,090
and in general the approach that has

191
00:08:16,090 --> 00:08:18,159
been taken towards improving JavaScript

192
00:08:18,159 --> 00:08:20,080
and where do you see that going in the

193
00:08:20,080 --> 00:08:22,210
future it's been a long road I think

194
00:08:22,210 --> 00:08:26,199
that my big takeaways in like 20 year

195
00:08:26,199 --> 00:08:28,270
terms are you need competition to drive

196
00:08:28,270 --> 00:08:29,979
the vendors to cooperate in the

197
00:08:29,979 --> 00:08:33,130
standards bodies then you need good

198
00:08:33,130 --> 00:08:34,659
social relations among the members of

199
00:08:34,659 --> 00:08:36,760
the committee even you know croc is

200
00:08:36,760 --> 00:08:39,969
welcome back any time in my book you you

201
00:08:39,969 --> 00:08:42,940
need to get on this rapid release

202
00:08:42,940 --> 00:08:45,070
footing we're trying to get on with es7

203
00:08:45,070 --> 00:08:47,260
you don't want to do big indefinite

204
00:08:47,260 --> 00:08:48,850
projects in software or in

205
00:08:48,850 --> 00:08:50,560
standardization because they always

206
00:08:50,560 --> 00:08:52,660
suffer scope creep and the world moves

207
00:08:52,660 --> 00:08:54,610
out from under them and they become

208
00:08:54,610 --> 00:08:58,180
irrelevant dinosaurs so some kind of

209
00:08:58,180 --> 00:09:00,430
rapid release footing with implementers

210
00:09:00,430 --> 00:09:04,360
constantly implementing w3c really

211
00:09:04,360 --> 00:09:06,370
originally the what WG tried to get

212
00:09:06,370 --> 00:09:08,740
browsers to do this with html5 and that

213
00:09:08,740 --> 00:09:10,779
became a big living document standard

214
00:09:10,779 --> 00:09:12,520
but I think now things are getting

215
00:09:12,520 --> 00:09:14,980
across the web space on to a faster

216
00:09:14,980 --> 00:09:16,540
cycle and that's that's one of the

217
00:09:16,540 --> 00:09:17,790
biggest lessons for me

