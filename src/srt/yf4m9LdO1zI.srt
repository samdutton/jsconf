1
00:00:01,640 --> 00:00:17,919
Thank you.

2
00:00:17,919 --> 00:00:20,669
Welcome to my talk, keeping secrets with Javascript.

3
00:00:20,669 --> 00:00:24,050
An introduction to the WebCrypto Api.

4
00:00:24,050 --> 00:00:32,540
I have been working for Mozilla Berlin since
2011.

5
00:00:32,540 --> 00:00:41,810
I discovered the Webcrypto Api a few months
ago and started writing patches.

6
00:00:41,810 --> 00:00:45,240
It has been improved.

7
00:00:45,240 --> 00:00:49,790
We support most of the algorithms.

8
00:00:49,790 --> 00:00:52,230
I would not call myself a cryptographer.

9
00:00:52,230 --> 00:00:57,960
There are experienced people helping me.

10
00:00:57,960 --> 00:01:07,090
You may ask, why do we need a crypto api?

11
00:01:07,090 --> 00:01:10,950
As the web platform is becoming mature, developers
are asking for it.

12
00:01:10,950 --> 00:01:12,950
You can provide an Api.

13
00:01:12,950 --> 00:01:16,549
Or what is written in Javascript.

14
00:01:16,549 --> 00:01:21,979
Plugins are not an option for applications.

15
00:01:21,979 --> 00:01:27,979
We can use Web crypto for the pin of the lock
stream.

16
00:01:27,979 --> 00:01:30,020
A web app.

17
00:01:30,020 --> 00:01:36,979
We can secure or encrypt anything in the device.

18
00:01:36,979 --> 00:01:40,860
Also websites can make use of the webcrypto
api.

19
00:01:40,860 --> 00:01:43,119
Before sending it to the server.

20
00:01:43,119 --> 00:01:47,409
To avoid any trace of sensitive data.

21
00:01:47,409 --> 00:01:51,659
There are more valid uses.

22
00:01:51,659 --> 00:01:55,409
We have a lot to cover today.

23
00:01:55,409 --> 00:02:00,460
I do want to build a notes app.

24
00:02:00,460 --> 00:02:02,700
It is a simple example.

25
00:02:02,700 --> 00:02:07,500
We don't have to talk about the UI anymore.

26
00:02:07,500 --> 00:02:10,150
Most of you have written one.

27
00:02:10,150 --> 00:02:11,530
Our app will be different.

28
00:02:11,530 --> 00:02:17,930
As we will be using cryptography.

29
00:02:17,930 --> 00:02:24,200
You should be familiar with arrays and how
to work with promises.

30
00:02:24,200 --> 00:02:26,980
You will know the basis of the webcrypto api.

31
00:02:26,980 --> 00:02:34,930
And with the storage with only a few lines
of code.

32
00:02:34,930 --> 00:02:40,069
It will work in Firefox and Chrome.

33
00:02:40,069 --> 00:02:45,690
As I said before, we don't care about the
Ui.

34
00:02:45,690 --> 00:02:48,019
Let's start by taking a closer look at the
storage.

35
00:02:48,019 --> 00:02:49,230
I picked localforage.

36
00:02:49,230 --> 00:02:53,680
Localforage is great.

37
00:02:53,680 --> 00:03:07,220
You can pass any data and automatically get
a promised based Api for free.

38
00:03:07,220 --> 00:03:09,489
This is how we would use the storage Api.

39
00:03:09,489 --> 00:03:16,450
It doesn't care about a particular format.

40
00:03:16,450 --> 00:03:22,000
But as maintainers of the Api, we start to
think of a few things that could go wrong

41
00:03:22,000 --> 00:03:23,130
here.

42
00:03:23,130 --> 00:03:26,159
Let's say we are about data corruption.

43
00:03:26,159 --> 00:03:34,790
Not particular about losing data but wrong
data.

44
00:03:34,790 --> 00:03:40,379
The first thing that comes to mind is add
some integrity checking.

45
00:03:40,379 --> 00:03:46,970
As it turns out, hash functions are excellent
for providing the integrity.

46
00:03:46,970 --> 00:03:54,599
You have seen it before when downloading.

47
00:03:54,599 --> 00:03:59,360
You would calculate the hash and compare it
to the hash digest.

48
00:03:59,360 --> 00:04:01,769
To check for corruptions.

49
00:04:01,769 --> 00:04:05,280
If it was corrupted you would throw it away
and redownload it.

50
00:04:05,280 --> 00:04:08,329
We use the Sha-256.

51
00:04:08,329 --> 00:04:14,599
A cryptographic hash function.

52
00:04:14,599 --> 00:04:19,200
Given the same input, hash functions return
the same output.

53
00:04:19,200 --> 00:04:28,030
If only 1 would change, it returns a different
result.

54
00:04:28,030 --> 00:04:30,830
32 bytes or 256 bits.

55
00:04:30,830 --> 00:04:37,480
For a good hash function it should be hard
to find 2 different inputs mapping to the

56
00:04:37,480 --> 00:04:40,330
same input.

57
00:04:40,330 --> 00:04:44,591
Hard to find a collision for the function.

58
00:04:44,591 --> 00:04:48,470
The webcrypto Api provides a different.

59
00:04:48,470 --> 00:04:53,560
It takes an array buffer.

60
00:04:53,560 --> 00:04:58,220
And also to an array buffer.

61
00:04:58,220 --> 00:05:04,060
Al cryptographic definitions are here.

62
00:05:04,060 --> 00:05:06,620
It can be quite expensive.

63
00:05:06,620 --> 00:05:10,490
All do the work asynchronously.

64
00:05:10,490 --> 00:05:15,140
It can do the heavy work.

65
00:05:15,140 --> 00:05:26,220
Subtle is supposed to reflect that many algorithms
need to be satisfied in order...

66
00:05:26,220 --> 00:05:34,780
Or slightly differently, they want you to
know what you are doing.

67
00:05:34,780 --> 00:05:39,490
We will see more Api examples later.

68
00:05:39,490 --> 00:05:45,770
Let's use digest functions for integrity.

69
00:05:45,770 --> 00:05:47,780
This is our basic storage api.

70
00:05:47,780 --> 00:05:52,420
We start by modifying the save function.

71
00:05:52,420 --> 00:05:59,970
Instead of only saving nodes we want to use
hash.

72
00:05:59,970 --> 00:06:03,100
To store the values nicer.

73
00:06:03,100 --> 00:06:15,810
Until all are resolved and lets the caller
know.

74
00:06:15,810 --> 00:06:18,430
Sha-256 as the hash function.

75
00:06:18,430 --> 00:06:22,460
And pass the notes.

76
00:06:22,460 --> 00:06:33,220
We should change the save function signature
to make it clear it takes array buffers now.

77
00:06:33,220 --> 00:06:37,340
So now that we stored everything we need to
know for integrity checking.

78
00:06:37,340 --> 00:06:38,780
Let's implement the check.

79
00:06:38,780 --> 00:06:43,030
And look at the load function.

80
00:06:43,030 --> 00:06:47,800
We will use promise.All to use.

81
00:06:47,800 --> 00:06:51,640
People want to compute a digest off the notes.

82
00:06:51,640 --> 00:07:00,080
We just read from disk.

83
00:07:00,080 --> 00:07:06,370
Compare is a simple function that takes 2
types arrays and compares them.

84
00:07:06,370 --> 00:07:09,680
We resolve that.

85
00:07:09,680 --> 00:07:15,130
Or resolve to undefined.

86
00:07:15,130 --> 00:07:18,530
Using a cryptographic hashfunction we solved
the problem.

87
00:07:18,530 --> 00:07:22,340
And can detect accidental corruption.

88
00:07:22,340 --> 00:07:27,370
We are not protected against deliberate functions.

89
00:07:27,370 --> 00:07:35,680
It is not really a challenge.

90
00:07:35,680 --> 00:07:39,460
It would be great to combine a secret with
the hash function.

91
00:07:39,460 --> 00:07:43,720
that we can prevent deliberate changes.

92
00:07:43,720 --> 00:07:47,150
What we are missing is authenticity.

93
00:07:47,150 --> 00:07:54,990
When reading data from disk, we want to make
sure it was from someone.

94
00:07:54,990 --> 00:07:58,680
Can convince it that the data on disk is genuine.

95
00:07:58,680 --> 00:08:10,170
Hmac or hash based message authentication
code are excellent for integrity and authenticity.

96
00:08:10,170 --> 00:08:13,640
In combination with a secret key.

97
00:08:13,640 --> 00:08:17,030
For any data you need to know the secret key.

98
00:08:17,030 --> 00:08:25,530
The hash function will be Sha-256 as we have
seen in the previous example.

99
00:08:25,530 --> 00:08:27,550
Hash functions take a single input.

100
00:08:27,550 --> 00:08:30,040
And return a digest.

101
00:08:30,040 --> 00:08:34,610
We need a secret key.

102
00:08:34,610 --> 00:08:39,550
Combining the data and key input, these functions
return a message authentication code.

103
00:08:39,550 --> 00:08:44,010
And use it later.

104
00:08:44,010 --> 00:08:52,310
Given the same data and same key, the hmac
function will return the same code.

105
00:08:52,310 --> 00:08:54,830
This looks similar to how we use digest before.

106
00:08:54,830 --> 00:08:57,210
This time the function.

107
00:08:57,210 --> 00:08:59,930
And a key argument.

108
00:08:59,930 --> 00:09:06,650
The promise returned for the given data under
the given key.

109
00:09:06,650 --> 00:09:12,680
And instead of comparing the digest manually,
we can use the function provided by the Api.

110
00:09:12,680 --> 00:09:16,470
We provide the key and data.

111
00:09:16,470 --> 00:09:28,800
And a boolean if it is valid of the data under
a key.

112
00:09:28,800 --> 00:09:33,160
We first replace the digest function with
the function.

113
00:09:33,160 --> 00:09:37,390
Algorithm and secret key.

114
00:09:37,390 --> 00:09:40,340
Both the notes and the mac are stored.

115
00:09:40,340 --> 00:09:44,970
The save function takes a key argument.

116
00:09:44,970 --> 00:09:50,780
To verify, let's upload the load function.

117
00:09:50,780 --> 00:09:54,260
We don't load a hash from disk anymore, but
a Mac.

118
00:09:54,260 --> 00:10:01,340
Instead of computing, we can use the function
to compute a mac and verify it at the same

119
00:10:01,340 --> 00:10:02,450
time.

120
00:10:02,450 --> 00:10:06,500
The promise return will resolve to a boolean.

121
00:10:06,500 --> 00:10:10,800
Whether the mac is valid.

122
00:10:10,800 --> 00:10:13,740
And if all goes well we resolve to the notes
or undefined.

123
00:10:13,740 --> 00:10:20,910
The load function takes a key argument.

124
00:10:20,910 --> 00:10:25,200
I hope you are wondering, where does the key
come from?

125
00:10:25,200 --> 00:10:32,310
Straightforward is to prompt for a password
and use that as a key.

126
00:10:32,310 --> 00:10:38,590
The problem is that passwords don't look random
at all.

127
00:10:38,590 --> 00:10:40,610
Think of how they are composed.

128
00:10:40,610 --> 00:10:42,150
Printable characters.

129
00:10:42,150 --> 00:10:45,560
And the same.

130
00:10:45,560 --> 00:10:49,330
You can't use passwords directly.

131
00:10:49,330 --> 00:10:51,640
But there is a way.

132
00:10:51,640 --> 00:10:56,361
That is what we call key derivation.

133
00:10:56,361 --> 00:11:04,130
It is the process of deriving a second key
from a given key.

134
00:11:04,130 --> 00:11:09,160
The webcrypto Api derives to the key method.

135
00:11:09,160 --> 00:11:15,610
To use the base key to derive from whether
the algorithm the key will be used for.

136
00:11:15,610 --> 00:11:17,290
Whether it is extractable.

137
00:11:17,290 --> 00:11:20,380
Exporting it to a different format.

138
00:11:20,380 --> 00:11:25,280
And what we plan to use it for.

139
00:11:25,280 --> 00:11:27,930
The promise returned.

140
00:11:27,930 --> 00:11:31,630
And that can be used for any operation.

141
00:11:31,630 --> 00:11:36,740
Given in the constraints of the last 3 parameters.

142
00:11:36,740 --> 00:11:42,300
In our example, we will specifically use the
Pbkdf2.

143
00:11:42,300 --> 00:11:48,140
It was specially designed.

144
00:11:48,140 --> 00:11:53,040
So, how does this work?

145
00:11:53,040 --> 00:12:03,360
Looking at the parameters, passwords as given
by the user, is a not secret random value.

146
00:12:03,360 --> 00:12:08,860
Tables with the passwords and the variations.

147
00:12:08,860 --> 00:12:14,970
You would have to precompute the table for
any value.

148
00:12:14,970 --> 00:12:23,810
For example, we need to recompute 2 to the
64.

149
00:12:23,810 --> 00:12:26,540
For most of the people it is too much data
to store.

150
00:12:26,540 --> 00:12:38,180
Now, in our case, an attacker could take the
salt value and take the dictionary attack.

151
00:12:38,180 --> 00:12:40,550
Until they find their secret key.

152
00:12:40,550 --> 00:12:45,870
To slow down this kind of attack, we specify
a number of iterations.

153
00:12:45,870 --> 00:12:55,520
High enough, instead of a million passwords,
an attacker could only try a few hundred per

154
00:12:55,520 --> 00:12:59,200
second.

155
00:12:59,200 --> 00:13:02,130
And slow down.

156
00:13:02,130 --> 00:13:06,890
And also the attack by 5000.

157
00:13:06,890 --> 00:13:10,080
It is important to note that this does not
protect from weak keys.

158
00:13:10,080 --> 00:13:19,640
As the user uses 1234, the attacker will find
it quickly.

159
00:13:19,640 --> 00:13:23,490
Using it for the notes out.

160
00:13:23,490 --> 00:13:24,529
We have a function.

161
00:13:24,529 --> 00:13:26,790
Pass the crypto key.

162
00:13:26,790 --> 00:13:29,230
And we pass the salt.

163
00:13:29,230 --> 00:13:33,090
The function takes the salt as argument instead
of generating it.

164
00:13:33,090 --> 00:13:36,800
We want to generate it once.

165
00:13:36,800 --> 00:13:41,830
We have to arrive at it later again.

166
00:13:41,830 --> 00:13:45,130
We will sign and save it.

167
00:13:45,130 --> 00:13:49,020
And verify when loading.

168
00:13:49,020 --> 00:13:53,610
For the arguments starting with the password
key.

169
00:13:53,610 --> 00:13:56,130
Creating a key is easy.

170
00:13:56,130 --> 00:14:02,260
We can call generate key as the algorithm.

171
00:14:02,260 --> 00:14:06,220
Usually generate random key.

172
00:14:06,220 --> 00:14:11,560
It would open a native dialogue, that is asking
the user to type a password.

173
00:14:11,560 --> 00:14:17,420
That is nice, the password will never come
to the java script.

174
00:14:17,420 --> 00:14:23,120
The Api will only return a key pointer back.

175
00:14:23,120 --> 00:14:26,779
Lastly, let's define the salt function.

176
00:14:26,779 --> 00:14:31,810
We want to generate it once and store it.

177
00:14:31,810 --> 00:14:36,560
We generate a few random bytes.

178
00:14:36,560 --> 00:14:40,720
Get random values is a pseudo generator.

179
00:14:40,720 --> 00:14:45,050
The only method that is not encrypted and
synchronous.

180
00:14:45,050 --> 00:14:52,670
It will be filled with pseudo random bytes.

181
00:14:52,670 --> 00:14:55,210
You pick a random byte.

182
00:14:55,210 --> 00:15:02,830
An attacker has to compute 2 to the 64 of
those huge tables.

183
00:15:02,830 --> 00:15:07,480
Putting it all together, we can use the 3
functions we defined.

184
00:15:07,480 --> 00:15:14,520
We first retrieve the user typed password
and the salt.

185
00:15:14,520 --> 00:15:21,680
Given the password and the salt we can derive
a key in Pbkdf2.

186
00:15:21,680 --> 00:15:24,800
And pass that to the save function.

187
00:15:24,800 --> 00:15:25,800
That will use it.

188
00:15:25,800 --> 00:15:31,290
To give it buffer.

189
00:15:31,290 --> 00:15:33,470
This is what the storage content looks like.

190
00:15:33,470 --> 00:15:39,570
We stored the salt using key derivation.

191
00:15:39,570 --> 00:15:46,680
We use the drive key.

192
00:15:46,680 --> 00:15:47,960
That is pretty cool so far.

193
00:15:47,960 --> 00:15:53,310
The only thing an attacker could do is modify
and make us discard it.

194
00:15:53,310 --> 00:15:57,100
We can have an online backup mechanism.

195
00:15:57,100 --> 00:16:00,270
It doesn't feel great.

196
00:16:00,270 --> 00:16:09,960
It is probably not great either, having access
exposes all the notes.

197
00:16:09,960 --> 00:16:15,220
What most of you think about cryptography.

198
00:16:15,220 --> 00:16:18,450
We want secrecy and we achieve it.

199
00:16:18,450 --> 00:16:23,890
At the same time provides integrity and authenticity.

200
00:16:23,890 --> 00:16:35,250
Surprisingly, we use the function.

201
00:16:35,250 --> 00:16:38,300
It returns a promise.

202
00:16:38,300 --> 00:16:40,779
Under the given key.

203
00:16:40,779 --> 00:16:42,770
Decrypt at the same key.

204
00:16:42,770 --> 00:16:46,330
Will give us the plain text again.

205
00:16:46,330 --> 00:16:52,210
Aes, the advanced encryption standard is popular.

206
00:16:52,210 --> 00:17:00,800
It provides secrecy, but not protection against
corruption.

207
00:17:00,800 --> 00:17:05,809
This will do that.

208
00:17:05,809 --> 00:17:10,350
Aes-Gcm also takes a nonce.

209
00:17:10,350 --> 00:17:16,270
A number only used once.

210
00:17:16,270 --> 00:17:19,300
The nonce is used to randomize encryption.

211
00:17:19,300 --> 00:17:28,600
If we use a new nonce, even the exact text
will always use a different text.

212
00:17:28,600 --> 00:17:34,580
Without changing anything, it will be different
every time.

213
00:17:34,580 --> 00:17:38,580
We don't want an attacker to know nothing
has changed.

214
00:17:38,580 --> 00:17:44,559
It will be in the bytes.

215
00:17:44,559 --> 00:17:48,550
That means, we don't need to separately store
the mac anymore.

216
00:17:48,550 --> 00:17:58,110
But like the salt, we now need to store the
nonce to decrypt later.

217
00:17:58,110 --> 00:18:01,000
We switch from using hmac.

218
00:18:01,000 --> 00:18:08,350
We have to update the key method.

219
00:18:08,350 --> 00:18:11,550
Here we change the algorithm that we plan
to use.

220
00:18:11,550 --> 00:18:12,640
From Hmac.

221
00:18:12,640 --> 00:18:15,960
To aes-Gcm.

222
00:18:15,960 --> 00:18:20,240
For encryption and decryption.

223
00:18:20,240 --> 00:18:23,350
Using it is simple.

224
00:18:23,350 --> 00:18:25,780
We generate random nonce.

225
00:18:25,780 --> 00:18:27,250
Get random values.

226
00:18:27,250 --> 00:18:30,840
It is important the nonce is long enough,
16 bytes.

227
00:18:30,840 --> 00:18:38,000
It is unlikely we generate the same twice
and use the same to encrypt.

228
00:18:38,000 --> 00:18:46,280
We switch to using the encrypt function.

229
00:18:46,280 --> 00:18:52,940
We then store the text and the nonce to decrypt
later.

230
00:18:52,940 --> 00:18:58,380
The next thing we have to do is, to decrypt
the load function.

231
00:18:58,380 --> 00:19:05,750
The load function has the cipher text and
the nonce from disk.

232
00:19:05,750 --> 00:19:08,050
If integrity and authenticity can be verified.

233
00:19:08,050 --> 00:19:14,590
It is failed, the promise will be rejected.

234
00:19:14,590 --> 00:19:19,600
And resolve to undefined again.

235
00:19:19,600 --> 00:19:21,110
That's pretty much it.

236
00:19:21,110 --> 00:19:26,270
We have safely encrypted data.

237
00:19:26,270 --> 00:19:32,730
We achieved all that without using Java script
libraries and only a few lines of codes.

238
00:19:32,730 --> 00:19:34,710
It works in Firefox.

239
00:19:34,710 --> 00:19:39,200
It is hidden behind preference.

240
00:19:39,200 --> 00:19:45,760
Chrome doesn't support the whole password
key derivation.

241
00:19:45,760 --> 00:19:48,730
To make sure everyone understand what we get
here.

242
00:19:48,730 --> 00:19:50,570
Let's do a recap.

243
00:19:50,570 --> 00:19:53,070
For those who didn't follow the code.

244
00:19:53,070 --> 00:19:58,090
A few diagrams will help better.

245
00:19:58,090 --> 00:20:04,610
The first step we took was to harden the storage.

246
00:20:04,610 --> 00:20:07,410
We didn't only store the notes.

247
00:20:07,410 --> 00:20:12,030
But to check for corruption.

248
00:20:12,030 --> 00:20:17,410
If not equal, we discarted the notes.

249
00:20:17,410 --> 00:20:22,980
Second was authenticity checking.

250
00:20:22,980 --> 00:20:24,040
Also deliberate changes.

251
00:20:24,040 --> 00:20:28,960
We stored the notes and the mac.

252
00:20:28,960 --> 00:20:34,800
And if the mac didn't verify under the given
key, you would discard the notes.

253
00:20:34,800 --> 00:20:37,929
We didn't have the key to use yet.

254
00:20:37,929 --> 00:20:41,290
The next step was to look at password based
key derivation.

255
00:20:41,290 --> 00:20:48,980
We prompted the user for the password and
used that for the key.

256
00:20:48,980 --> 00:20:54,080
In addition to the notes and the mac we also
have to store the salt so that we arrive at

257
00:20:54,080 --> 00:20:58,660
the same key every time when deriving.

258
00:20:58,660 --> 00:21:05,380
That doesn't work.

259
00:21:05,380 --> 00:21:09,421
And as the encryption to the notes.

260
00:21:09,421 --> 00:21:11,600
We stored the salt for key derivation.

261
00:21:11,600 --> 00:21:17,700
The nonce was the random value that changes
with every save operation.

262
00:21:17,700 --> 00:21:23,040
If the encrypted notes do not pass.

263
00:21:23,040 --> 00:21:28,530
We will just simply discard them again.

264
00:21:28,530 --> 00:21:31,140
You can find the code for all steps we talked
about.

265
00:21:31,140 --> 00:21:32,140
On Github.

266
00:21:32,140 --> 00:21:40,610
I didn't want to leave you with the reminder.

267
00:21:40,610 --> 00:21:42,840
Make sure the knowledge is sufficient.

268
00:21:42,840 --> 00:21:50,320
And ask for experienced peers.

269
00:21:50,320 --> 00:21:51,900
Cryptography is hard.

270
00:21:51,900 --> 00:21:53,510
I'm sure you heard that a lot already.

271
00:21:53,510 --> 00:21:56,270
We have seen it the last years.

272
00:21:56,270 --> 00:22:00,150
I want to encourage you to brush up your crypto
skills.

273
00:22:00,150 --> 00:22:03,330
Go out there and make the web a better place.

274
00:22:03,330 --> 00:22:07,410
These courses were helpful.

275
00:22:07,410 --> 00:22:17,110
Cryptography started a week ago.

276
00:22:17,110 --> 00:22:22,870
You can join it.

277
00:22:22,870 --> 00:22:27,130
I will post the slides later.

278
00:22:27,130 --> 00:22:31,500
They will have links to more information.

279
00:22:31,500 --> 00:22:38,100
If you want to talk about the crypto Api,
you can find me at the Mozilla lounge later.

