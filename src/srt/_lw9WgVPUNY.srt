1
00:00:08,590 --> 00:00:10,820

my name is Nick Campo

2
00:00:10,820 --> 00:00:13,910
as Chris said and I work for axiom

3
00:00:13,910 --> 00:00:18,109
software and my twitter handle is NC boy

4
00:00:18,109 --> 00:00:24,109
those are zeros today I'm gonna talk

5
00:00:24,109 --> 00:00:25,999
about Timmy I'm gonna tell you a story

6
00:00:25,999 --> 00:00:30,769
also any design work you see in here

7
00:00:30,769 --> 00:00:33,230
I'll freelance for you a wizard with

8
00:00:33,230 --> 00:00:37,640
Microsoft Paint so feel free Timmy's a

9
00:00:37,640 --> 00:00:41,120
developer and Timmy was told to write a

10
00:00:41,120 --> 00:00:44,960
web application Timmy has to create

11
00:00:44,960 --> 00:00:50,240
models in his database he found that his

12
00:00:50,240 --> 00:00:52,040
schema was rigid and stiff and it was

13
00:00:52,040 --> 00:00:55,780
hard to change and integrating search

14
00:00:55,780 --> 00:01:00,170
proved to be a challenge Plus Timmy was

15
00:01:00,170 --> 00:01:02,260
used to working with JavaScript and

16
00:01:02,260 --> 00:01:05,119
switching tracks was kind of a pain to

17
00:01:05,119 --> 00:01:08,719
him over time he became displeased with

18
00:01:08,719 --> 00:01:11,539
his templates and the fact that it was

19
00:01:11,539 --> 00:01:15,259
more just copy and paste he really

20
00:01:15,259 --> 00:01:17,600
couldn't get away from the tag soup that

21
00:01:17,600 --> 00:01:22,039
the current framework Slynt timmy was a

22
00:01:22,039 --> 00:01:29,109
sad panda so the current situation or

23
00:01:29,109 --> 00:01:34,490
the situation that was about when we

24
00:01:34,490 --> 00:01:37,329
started developing axiom stack was that

25
00:01:37,329 --> 00:01:42,439
you really had to know all of the

26
00:01:42,439 --> 00:01:46,280
database schemas the properties fields

27
00:01:46,280 --> 00:01:48,429
things like that that you wanted to

28
00:01:48,429 --> 00:01:53,229
actually expose to to a web application

29
00:01:53,229 --> 00:01:58,340
it became a challenge to modify those

30
00:01:58,340 --> 00:02:00,229
schemas when the application actually

31
00:02:00,229 --> 00:02:05,359
changed and when your requirements the

32
00:02:05,359 --> 00:02:08,629
specs of a web application changed for

33
00:02:08,629 --> 00:02:13,860
you know customer or client your own

34
00:02:13,870 --> 00:02:19,070
also search became an interesting

35
00:02:19,070 --> 00:02:22,340
challenge to integrate you know you had

36
00:02:22,340 --> 00:02:26,390
to you had to deal with full-text

37
00:02:26,390 --> 00:02:29,870
searching indexing correctly with

38
00:02:29,870 --> 00:02:32,780
relational database systems and then

39
00:02:32,780 --> 00:02:35,900
once you got there you had to also build

40
00:02:35,900 --> 00:02:38,720
in stemming stop words things like that

41
00:02:38,720 --> 00:02:41,750
that really give really give search

42
00:02:41,750 --> 00:02:50,240
engines some power plus existing systems

43
00:02:50,240 --> 00:02:53,390
required you to always context switch

44
00:02:53,390 --> 00:02:55,250
you always had to go from JavaScript

45
00:02:55,250 --> 00:02:59,360
which is interactive the web you know

46
00:02:59,360 --> 00:03:00,740
this is what we all associate with the

47
00:03:00,740 --> 00:03:08,630
web and then move to Ruby or Python you

48
00:03:08,630 --> 00:03:10,760
know one of the systems that I was

49
00:03:10,760 --> 00:03:15,160
working with was soap and so that

50
00:03:15,160 --> 00:03:18,100
provided unique and interesting

51
00:03:18,100 --> 00:03:21,440
situations when I was trying to switch

52
00:03:21,440 --> 00:03:23,780
back and forth between the Python and

53
00:03:23,780 --> 00:03:28,330
the interactive side which was the web

54
00:03:28,330 --> 00:03:34,910
and then you specifically was open and

55
00:03:34,910 --> 00:03:39,020
other frameworks that existed you got to

56
00:03:39,020 --> 00:03:40,190
deal with tag soup

57
00:03:40,190 --> 00:03:44,630
we're not the conventional thoughts of

58
00:03:44,630 --> 00:03:48,800
you know putting in invalid HTML into

59
00:03:48,800 --> 00:03:50,750
your template for the presentation layer

60
00:03:50,750 --> 00:03:53,230
so when a user actually saw your page

61
00:03:53,230 --> 00:03:58,400
the the page wasn't completely correct

62
00:03:58,400 --> 00:04:01,190
in terms of the w3c I'm talking more on

63
00:04:01,190 --> 00:04:05,270
the server side where you're putting in

64
00:04:05,270 --> 00:04:09,370
actual business logic to your templates

65
00:04:09,370 --> 00:04:12,170
you know this this doesn't lend itself

66
00:04:12,170 --> 00:04:16,100
to reuse and and the fact that they're

67
00:04:16,100 --> 00:04:19,130
so invasive makes it hard to maintain

68
00:04:19,130 --> 00:04:25,280
later on so let's go back to Timmy

69
00:04:25,280 --> 00:04:30,010
coworker Karin saw that Timmy was down

70
00:04:30,020 --> 00:04:33,720
Timmy told her what was wrong he wanted

71
00:04:33,720 --> 00:04:35,700
a web framework that could grow with the

72
00:04:35,700 --> 00:04:40,710
project Timmy didn't want to have to

73
00:04:40,710 --> 00:04:44,460
rebuild his databases every time he

74
00:04:44,460 --> 00:04:47,310
needed to change a schema every time a

75
00:04:47,310 --> 00:04:51,570
new field came up and he wished that

76
00:04:51,570 --> 00:04:54,090
search were easy not only on the site

77
00:04:54,090 --> 00:04:58,560
but also from within the code he wanted

78
00:04:58,560 --> 00:05:01,200
separation of layers to be able to write

79
00:05:01,200 --> 00:05:07,300
the code once and have less of it

80
00:05:07,310 --> 00:05:10,980
Timmy realized that you know his heart

81
00:05:10,980 --> 00:05:12,960
his code is hard enough to maintain and

82
00:05:12,960 --> 00:05:15,060
he didn't want to mix it into his

83
00:05:15,060 --> 00:05:22,020
templates so the current complications

84
00:05:22,020 --> 00:05:26,550
so this current meaning now write data

85
00:05:26,550 --> 00:05:31,760
sources the the current convention with

86
00:05:31,760 --> 00:05:34,650
systems like rails and the Django is

87
00:05:34,650 --> 00:05:37,860
when you change your schemas when you

88
00:05:37,860 --> 00:05:40,530
change the fields that you have you need

89
00:05:40,530 --> 00:05:43,020
to migrate your database and so then

90
00:05:43,020 --> 00:05:45,620
you're you are required to go out and

91
00:05:45,620 --> 00:05:48,990
run scripts to to fix up your database

92
00:05:48,990 --> 00:05:53,880
and that can be although it's relatively

93
00:05:53,880 --> 00:05:55,320
easy write their scripts that are done

94
00:05:55,320 --> 00:05:56,610
for you

95
00:05:56,610 --> 00:05:59,580
over time you lose a decent amount of

96
00:05:59,580 --> 00:06:02,400
time having to go back and update those

97
00:06:02,400 --> 00:06:04,470
the tables and the databases and run

98
00:06:04,470 --> 00:06:11,340
these scripts and you should be able to

99
00:06:11,340 --> 00:06:13,980
expect more from your data source you

100
00:06:13,980 --> 00:06:16,020
know you should you should be able to

101
00:06:16,020 --> 00:06:17,790
expect that you get high power search

102
00:06:17,790 --> 00:06:20,040
functionality out of the box with

103
00:06:20,040 --> 00:06:24,270
existing systems like like rails and

104
00:06:24,270 --> 00:06:28,530
Django they they tell you to use a peon

105
00:06:28,530 --> 00:06:31,800
or Sphinx to integrate search with your

106
00:06:31,800 --> 00:06:36,840
application and it

107
00:06:36,850 --> 00:06:39,520
in well at least in our opinion that

108
00:06:39,520 --> 00:06:42,060
should be a part of the application

109
00:06:42,060 --> 00:06:46,780
framework the framework that you're

110
00:06:46,780 --> 00:06:49,000
using should be simple and you should be

111
00:06:49,000 --> 00:06:51,550
able to use the same data structures and

112
00:06:51,550 --> 00:06:54,370
the same object structure that you're

113
00:06:54,370 --> 00:06:59,220
using in the interactive web with the

114
00:06:59,220 --> 00:07:03,520
with the backend right instead now

115
00:07:03,520 --> 00:07:06,070
you're required to bring in external

116
00:07:06,070 --> 00:07:11,380
libraries - for Python or PHP to

117
00:07:11,380 --> 00:07:18,520
actually expose the data externally and

118
00:07:18,520 --> 00:07:21,570
you should really be separating

119
00:07:21,570 --> 00:07:23,590
separating your business logic from your

120
00:07:23,590 --> 00:07:28,540
presentation layer the you basically

121
00:07:28,540 --> 00:07:30,970
want to leave your tag soup at the table

122
00:07:30,970 --> 00:07:35,020
right you don't want to bring the the

123
00:07:35,020 --> 00:07:38,850
business logic into your code because it

124
00:07:38,850 --> 00:07:42,220
as Timmy found out doesn't lend itself

125
00:07:42,220 --> 00:07:44,500
to reusability and the maintainability

126
00:07:44,500 --> 00:07:47,450
becomes a problem

127
00:07:47,460 --> 00:07:53,950
so Karen smiled she she said I have a I

128
00:07:53,950 --> 00:07:58,420
have a solution Karen showed Timmy axiom

129
00:07:58,420 --> 00:08:01,690
stack Karen explained that axiom stack

130
00:08:01,690 --> 00:08:04,300
is a web application framework for

131
00:08:04,300 --> 00:08:09,970
server-side javascript in axiom your

132
00:08:09,970 --> 00:08:11,740
models are called prototypes and your

133
00:08:11,740 --> 00:08:16,030
schema is dynamic as soon as the data is

134
00:08:16,030 --> 00:08:20,930
saved it's searchable within leucemia

135
00:08:20,940 --> 00:08:23,950
you can use the Search API to access

136
00:08:23,950 --> 00:08:26,380
your objects and because it uses the

137
00:08:26,380 --> 00:08:28,780
Rhino engine you can write JavaScript

138
00:08:28,780 --> 00:08:32,320
all the time and one of my co-workers

139
00:08:32,320 --> 00:08:35,530
said yesterday that this is probably the

140
00:08:35,530 --> 00:08:36,789
only conference that I would get away

141
00:08:36,789 --> 00:08:42,640
saying that Karen also showed Timmy that

142
00:08:42,640 --> 00:08:46,900
templates were a snap with only a few

143
00:08:46,900 --> 00:08:48,910
attributes you can keep the logic out of

144
00:08:48,910 --> 00:08:50,350
your templates

145
00:08:50,350 --> 00:08:52,870
and in the JavaScript functions where

146
00:08:52,870 --> 00:08:59,250
they belong so here's our resolution

147
00:08:59,250 --> 00:09:02,860
this is a thousand foot view of the

148
00:09:02,860 --> 00:09:07,090
axiom architecture right our web app web

149
00:09:07,090 --> 00:09:09,910
server technology is jetty and what we

150
00:09:09,910 --> 00:09:13,300
do is allow you to build prototypes the

151
00:09:13,300 --> 00:09:17,640
prototypes are made up of security

152
00:09:17,640 --> 00:09:24,570
functions templates and a schema and the

153
00:09:24,570 --> 00:09:28,690
backend technology by default is leucine

154
00:09:28,690 --> 00:09:32,400
but you know we know that there's

155
00:09:32,400 --> 00:09:35,680
necessity for having legacy systems

156
00:09:35,680 --> 00:09:38,710
right everybody has legacy data so if

157
00:09:38,710 --> 00:09:40,510
you already have data in a my sequel

158
00:09:40,510 --> 00:09:42,730
database you know Oracle that sort of

159
00:09:42,730 --> 00:09:45,820
thing then you have that accessible to

160
00:09:45,820 --> 00:09:49,810
you and we're also working with the

161
00:09:49,810 --> 00:09:52,570
folks at 10gen to integrate the MongoDB

162
00:09:52,570 --> 00:09:57,740
as well and I'll get to that in a second

163
00:09:57,750 --> 00:10:00,610
basically with leucine being our

164
00:10:00,610 --> 00:10:04,360
back-end data system we get a really

165
00:10:04,360 --> 00:10:09,550
high power search and all the features

166
00:10:09,550 --> 00:10:13,270
of their indexing system to create these

167
00:10:13,270 --> 00:10:15,010
dynamic schemas because they're a schema

168
00:10:15,010 --> 00:10:18,340
less document system much in the same

169
00:10:18,340 --> 00:10:21,100
way that the CouchDB system is although

170
00:10:21,100 --> 00:10:24,510
the feature sets are very different but

171
00:10:24,510 --> 00:10:30,490
but the premise is there and the the

172
00:10:30,490 --> 00:10:32,110
thing that's nice about that is that you

173
00:10:32,110 --> 00:10:35,200
get the ability to grow your application

174
00:10:35,200 --> 00:10:38,230
as the requirements change for that

175
00:10:38,230 --> 00:10:45,430
application with with the relational

176
00:10:45,430 --> 00:10:51,010
system you there's always a need for a

177
00:10:51,010 --> 00:10:53,680
relational database right right now

178
00:10:53,680 --> 00:10:57,580
you've got specific functionality such

179
00:10:57,580 --> 00:11:00,850
as accounting and the functions that

180
00:11:00,850 --> 00:11:02,380
exist within those

181
00:11:02,380 --> 00:11:06,670
databases that make accessing your

182
00:11:06,670 --> 00:11:10,720
information very fast and providing you

183
00:11:10,720 --> 00:11:13,269
with really fast analysis on the data

184
00:11:13,269 --> 00:11:17,440
itself so what we're looking at with

185
00:11:17,440 --> 00:11:20,230
Mongo is the fact that they try they're

186
00:11:20,230 --> 00:11:23,470
trying to take the features from the

187
00:11:23,470 --> 00:11:26,740
scenes such as the schema list documents

188
00:11:26,740 --> 00:11:31,300
and the features from the databases that

189
00:11:31,300 --> 00:11:34,389
are good and combine them together

190
00:11:34,389 --> 00:11:41,870
and so that's the purpose for Mongo

191
00:11:41,880 --> 00:11:45,430
Search I touched on this a little bit

192
00:11:45,430 --> 00:11:48,940
but the way that search works is that

193
00:11:48,940 --> 00:11:51,160
all the data is stored in Reverse index

194
00:11:51,160 --> 00:11:55,540
in Lucene and what we've done is

195
00:11:55,540 --> 00:11:59,560
basically exposed an API which we call

196
00:11:59,560 --> 00:12:03,630
the query API to get at your objects and

197
00:12:03,630 --> 00:12:08,079
by objects I mean the the documents

198
00:12:08,079 --> 00:12:09,970
based on the prototypes that you built

199
00:12:09,970 --> 00:12:14,769
before and this query API works both

200
00:12:14,769 --> 00:12:17,740
with the scene and the relational model

201
00:12:17,740 --> 00:12:22,720
and and so on but basically all you do

202
00:12:22,720 --> 00:12:25,560
is tell it you tell the query API which

203
00:12:25,560 --> 00:12:28,329
prototypes you want to get back and you

204
00:12:28,329 --> 00:12:32,380
pass in a JSON and detailing the field

205
00:12:32,380 --> 00:12:35,800
and the the actual terms you want to

206
00:12:35,800 --> 00:12:38,889
search for and you get your data back so

207
00:12:38,889 --> 00:12:41,500
you can then display things like

208
00:12:41,500 --> 00:12:45,100
navigation search results and all of

209
00:12:45,100 --> 00:12:49,569
that all you know in a single function

210
00:12:49,569 --> 00:12:55,720
all very fast and you can focus your

211
00:12:55,720 --> 00:13:03,100
efforts in JavaScript you can basically

212
00:13:03,100 --> 00:13:06,250
write JavaScript all day long you get

213
00:13:06,250 --> 00:13:09,820
access to the JVM through rhino and

214
00:13:09,820 --> 00:13:13,720
and then so if you've built if you've

215
00:13:13,720 --> 00:13:17,700
built jars or Java libraries that have

216
00:13:17,700 --> 00:13:20,050
that have specific functionality that

217
00:13:20,050 --> 00:13:23,890
are necessity necessities for you for

218
00:13:23,890 --> 00:13:26,920
instance we've were working on an

219
00:13:26,920 --> 00:13:29,339
application right now that uses the

220
00:13:29,339 --> 00:13:33,730
Amazon Web Services Flickr and a few

221
00:13:33,730 --> 00:13:36,550
other external services we can basically

222
00:13:36,550 --> 00:13:40,600
use the Java API with the same Java con

223
00:13:40,600 --> 00:13:45,850
or the Java Script constructs all from

224
00:13:45,850 --> 00:13:51,459
within the JavaScript functions and then

225
00:13:51,459 --> 00:13:54,930
the the templating system we use is a

226
00:13:54,930 --> 00:13:57,910
system that we came up with we weren't

227
00:13:57,910 --> 00:14:00,880
really happy with the DT ml that we were

228
00:14:00,880 --> 00:14:02,560
working with and if anyone's familiar

229
00:14:02,560 --> 00:14:05,399
with it would probably understand why

230
00:14:05,399 --> 00:14:10,390
it's completely intrusive it's not easy

231
00:14:10,390 --> 00:14:15,820
to read and so what we did is expanded

232
00:14:15,820 --> 00:14:19,899
upon the the new templating system the

233
00:14:19,899 --> 00:14:22,500
soap was coming up with called tail and

234
00:14:22,500 --> 00:14:25,930
called tip or they called it towel and

235
00:14:25,930 --> 00:14:28,060
we're calling it tail which is tau

236
00:14:28,060 --> 00:14:32,350
enhancements or extended basically and

237
00:14:32,350 --> 00:14:34,570
so what we do is with a few simple

238
00:14:34,570 --> 00:14:37,600
attributes two-year elements allow you

239
00:14:37,600 --> 00:14:40,870
to create all the functionality that you

240
00:14:40,870 --> 00:14:43,990
need to display anything in the

241
00:14:43,990 --> 00:14:45,459
presentation layer that you would need

242
00:14:45,459 --> 00:14:50,589
but not be intrusive to your code or not

243
00:14:50,589 --> 00:14:53,279
be overly intrusive to your code as the

244
00:14:53,279 --> 00:14:55,420
as the other systems that I've worked

245
00:14:55,420 --> 00:15:00,250
with are and the all the attributes that

246
00:15:00,250 --> 00:15:03,550
you add in are removed before it goes

247
00:15:03,550 --> 00:15:06,130
out to the user in the in the web page

248
00:15:06,130 --> 00:15:07,690
so if you're viewing source you wouldn't

249
00:15:07,690 --> 00:15:11,220
see any of these attributes and then

250
00:15:11,220 --> 00:15:14,230
these templates are reusable as well you

251
00:15:14,230 --> 00:15:18,370
can basically pull in pull in other

252
00:15:18,370 --> 00:15:20,840
templates through

253
00:15:20,840 --> 00:15:24,410
a system similar to including templates

254
00:15:24,410 --> 00:15:26,450
so that you can basically write your

255
00:15:26,450 --> 00:15:28,520
template once and reuse it in multiple

256
00:15:28,520 --> 00:15:38,060
places so back to Timmy Timmy began to

257
00:15:38,060 --> 00:15:41,020
smile when Karen enlightened him to this

258
00:15:41,020 --> 00:15:43,730
Timmy went on to do great things with

259
00:15:43,730 --> 00:15:49,540
axiom stack and Timmy was happy so I

260
00:15:49,540 --> 00:15:52,730
appreciate you coming out if you have

261
00:15:52,730 --> 00:15:55,220
any questions for me I can answer them

262
00:15:55,220 --> 00:16:00,050
now and I'm planning on doing a thing

263
00:16:00,050 --> 00:16:03,620
tomorrow in the track B portion on on

264
00:16:03,620 --> 00:16:05,840
server side Jess show you some code and

265
00:16:05,840 --> 00:16:08,960
that sort of thing so anyone have any

266
00:16:08,960 --> 00:16:17,680
questions

267
00:16:17,690 --> 00:16:20,390
instead of using what you are there's

268
00:16:20,390 --> 00:16:23,940
I'm actually not familiar with it but

269
00:16:23,940 --> 00:16:26,670
the reason we use the reason we went

270
00:16:26,670 --> 00:16:31,080
with Tao is because there when we were

271
00:16:31,080 --> 00:16:35,700
first coming up with the templates we

272
00:16:35,700 --> 00:16:38,280
were basically trying to create a system

273
00:16:38,280 --> 00:16:44,780
that fit our notion of HTML which was

274
00:16:44,780 --> 00:16:49,040
you know the stricter h missed XHTML and

275
00:16:49,040 --> 00:16:54,600
and then make it so that it was as

276
00:16:54,600 --> 00:17:00,150
simple as possible to to modify the the

277
00:17:00,150 --> 00:17:01,260
actual templates to get your

278
00:17:01,260 --> 00:17:04,520
functionality to happen but keep the

279
00:17:04,520 --> 00:17:07,939
keep the ability to go overboard out

280
00:17:07,939 --> 00:17:10,500
because that's that's generally what

281
00:17:10,500 --> 00:17:13,400
happens right now right with templates

282
00:17:13,400 --> 00:17:16,620
you you have the ability to go away

283
00:17:16,620 --> 00:17:20,970
above and beyond what what you may mean

284
00:17:20,970 --> 00:17:25,459
to when you are first creating them and

285
00:17:25,459 --> 00:17:30,200
and so we basically nailed down the

286
00:17:30,200 --> 00:17:32,630
necessary directives you know you can

287
00:17:32,630 --> 00:17:35,370
repeat over an array you can iterate

288
00:17:35,370 --> 00:17:39,420
over an array you can push content into

289
00:17:39,420 --> 00:17:42,060
an element so creating child text nodes

290
00:17:42,060 --> 00:17:46,110
and things like that but it really

291
00:17:46,110 --> 00:17:48,990
creates that separation of the business

292
00:17:48,990 --> 00:17:56,560
logic and the actual presentation layer

293
00:17:56,570 --> 00:17:58,220
we actually didn't do extensions to

294
00:17:58,220 --> 00:18:00,190
towel we rewrote the parser in

295
00:18:00,190 --> 00:18:06,830
JavaScript and then and initially we had

296
00:18:06,830 --> 00:18:11,470
the implementation called towel that we

297
00:18:11,470 --> 00:18:15,830
basically we weren't huge fans of it and

298
00:18:15,830 --> 00:18:19,900
moved to this enhanced version which

299
00:18:19,900 --> 00:18:23,600
which does the specific things that we

300
00:18:23,600 --> 00:18:27,230
need so by that I mean we can basically

301
00:18:27,230 --> 00:18:33,170
run JavaScript functions we can you know

302
00:18:33,170 --> 00:18:37,550
you can do API calls things like that

303
00:18:37,550 --> 00:18:41,770
from within the within the attributes

304
00:18:41,770 --> 00:18:44,870
and our original implementation didn't

305
00:18:44,870 --> 00:18:47,120
support that so it was basically

306
00:18:47,120 --> 00:18:48,950
anything that was passed in the scope

307
00:18:48,950 --> 00:18:52,790
was available to you now anything that

308
00:18:52,790 --> 00:18:55,220
isn't within the scope can still be

309
00:18:55,220 --> 00:18:57,620
accessible to you you just need to call

310
00:18:57,620 --> 00:19:06,150
the API is that you created

311
00:19:06,160 --> 00:19:10,420
not yet but yet it's a keyword

312
00:19:10,420 --> 00:19:13,240
I'd love to enhance this to basically

313
00:19:13,240 --> 00:19:16,660
get it going into into other areas that

314
00:19:16,660 --> 00:19:18,460
we haven't touched yet and you know

315
00:19:18,460 --> 00:19:21,460
benchmark them see how does the Rhino

316
00:19:21,460 --> 00:19:23,530
implementation perform against spider

317
00:19:23,530 --> 00:19:30,340
monkey and that sort of thing

318
00:19:30,350 --> 00:19:42,370
more easily

319
00:19:42,380 --> 00:19:46,679
it's the it's the same normal Ajax that

320
00:19:46,679 --> 00:19:49,590
you'd normally write I think you might

321
00:19:49,590 --> 00:19:52,289
be referring more to the way that jax-ur

322
00:19:52,289 --> 00:19:55,080
does it correct if I'm not mistaken

323
00:19:55,080 --> 00:19:59,100
that's similar to their model and the

324
00:19:59,100 --> 00:20:00,960
way that we're doing it is your

325
00:20:00,960 --> 00:20:03,360
functions are the actions

326
00:20:03,360 --> 00:20:06,090
so with those prototypes that I was

327
00:20:06,090 --> 00:20:08,100
talking about you would create your

328
00:20:08,100 --> 00:20:10,169
JavaScript functions inside of

329
00:20:10,169 --> 00:20:13,169
JavaScript files those JavaScript files

330
00:20:13,169 --> 00:20:15,360
then get loaded on to the prototypes and

331
00:20:15,360 --> 00:20:21,380
are available to to both use from the

332
00:20:21,380 --> 00:20:24,720
code side and then they become available

333
00:20:24,720 --> 00:20:27,570
as functions or actions that you can hit

334
00:20:27,570 --> 00:20:31,289
from a URL so for instance if I had a

335
00:20:31,289 --> 00:20:35,940
home page at slash and off of that home

336
00:20:35,940 --> 00:20:38,429
page I had a function called hello world

337
00:20:38,429 --> 00:20:43,039
I can access that function directly from

338
00:20:43,039 --> 00:20:46,169
from the web and so that's how you would

339
00:20:46,169 --> 00:20:50,309
do the Ajax as well basically if you

340
00:20:50,309 --> 00:20:53,909
wanted to return a JSON or XML and I'm

341
00:20:53,909 --> 00:20:55,080
actually going to talk about XML in a

342
00:20:55,080 --> 00:20:58,380
minute I kind of forgot that but if you

343
00:20:58,380 --> 00:21:00,210
wanted to do JSON then you just return a

344
00:21:00,210 --> 00:21:03,000
JSON and it would go into your

345
00:21:03,000 --> 00:21:05,780
JavaScript on the client side and

346
00:21:05,780 --> 00:21:08,159
assuming you set up the mime types and

347
00:21:08,159 --> 00:21:09,960
whatnot correctly with the library are

348
00:21:09,960 --> 00:21:14,480
using their it would parse correctly now

349
00:21:14,480 --> 00:21:18,299
getting back to XML one thing I sort of

350
00:21:18,299 --> 00:21:20,730
left out because it's not so much a

351
00:21:20,730 --> 00:21:25,620
feature of the of axiom but it's a

352
00:21:25,620 --> 00:21:29,130
feature of rhino is efore X and that's

353
00:21:29,130 --> 00:21:35,130
basically XML as a JavaScript object so

354
00:21:35,130 --> 00:21:37,770
what you get is the ability to drill

355
00:21:37,770 --> 00:21:45,210
down into XML objects using a it's it's

356
00:21:45,210 --> 00:21:48,320
sort of a cross between JavaScript and

357
00:21:48,320 --> 00:21:50,550
XPath syntax

358
00:21:50,550 --> 00:21:52,590
although you're not using slashes you're

359
00:21:52,590 --> 00:21:55,590
using dots and things like that but you

360
00:21:55,590 --> 00:21:58,880
basically get you get the ability to

361
00:21:58,880 --> 00:22:04,170
manipulate your XML from the server side

362
00:22:04,170 --> 00:22:06,270
and then return that and it'll be

363
00:22:06,270 --> 00:22:20,400
serialized as it goes back out thank you

