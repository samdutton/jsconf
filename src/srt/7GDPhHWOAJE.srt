1
00:00:12,080 --> 00:00:17,300

you

2
00:00:17,310 --> 00:00:20,250
my name is Reed Burke I'm on the Yui

3
00:00:20,250 --> 00:00:22,259
team at Yahoo I'm going to talk to you a

4
00:00:22,259 --> 00:00:23,430
little bit about a project I'm working

5
00:00:23,430 --> 00:00:26,070
on which involves using node.js for

6
00:00:26,070 --> 00:00:27,750
something where it isn't accessory to

7
00:00:27,750 --> 00:00:30,509
something and it's also not just nodejs

8
00:00:30,509 --> 00:00:32,460
and just server-side JavaScript what I'm

9
00:00:32,460 --> 00:00:34,830
working on is actually with the goal of

10
00:00:34,830 --> 00:00:36,870
making client-side JavaScript both

11
00:00:36,870 --> 00:00:38,730
easier to use for developers as well as

12
00:00:38,730 --> 00:00:41,699
just way more performant and there could

13
00:00:41,699 --> 00:00:43,440
be there could be a coexistence of these

14
00:00:43,440 --> 00:00:46,739
two things using Yui loader so basically

15
00:00:46,739 --> 00:00:49,110
we all agree that performance of web

16
00:00:49,110 --> 00:00:50,970
apps is really important right but it's

17
00:00:50,970 --> 00:00:53,909
way too hard it shouldn't be though so

18
00:00:53,909 --> 00:00:56,129
what something with Yui that we've had

19
00:00:56,129 --> 00:00:58,530
since the third version and made a part

20
00:00:58,530 --> 00:01:00,390
of its core is that everything you

21
00:01:00,390 --> 00:01:02,129
should only get what you need right you

22
00:01:02,129 --> 00:01:03,119
shouldn't have to load the entire

23
00:01:03,119 --> 00:01:04,439
library you shouldn't have to have all

24
00:01:04,439 --> 00:01:08,130
this complexity of having everything on

25
00:01:08,130 --> 00:01:10,080
your page and worrying about the

26
00:01:10,080 --> 00:01:12,119
additional cost of parsing all this

27
00:01:12,119 --> 00:01:13,619
stuff and downloading all this stuff and

28
00:01:13,619 --> 00:01:15,060
everything so you use only what you need

29
00:01:15,060 --> 00:01:19,229
with Yui and apps built with it can also

30
00:01:19,229 --> 00:01:21,299
leverage the same kind of thing and

31
00:01:21,299 --> 00:01:22,859
that's that's kind of the whole this

32
00:01:22,859 --> 00:01:26,100
whole thing that we've had with Yui but

33
00:01:26,100 --> 00:01:29,490
the problem with this and that it's it's

34
00:01:29,490 --> 00:01:31,350
really good for the developer but it's

35
00:01:31,350 --> 00:01:33,509
not so great for and we could probably

36
00:01:33,509 --> 00:01:34,890
work on making developer tools better

37
00:01:34,890 --> 00:01:36,840
for this and that I'll cover this in my

38
00:01:36,840 --> 00:01:39,270
talk but whenever you find this you also

39
00:01:39,270 --> 00:01:41,219
find dependency management so how do you

40
00:01:41,219 --> 00:01:43,740
do that well one way is with the

41
00:01:43,740 --> 00:01:45,899
configurator so what we had we've had

42
00:01:45,899 --> 00:01:47,009
this configurator for a really long time

43
00:01:47,009 --> 00:01:49,859
since Yui to back and why to how to

44
00:01:49,859 --> 00:01:51,929
loader and the idea is that you know if

45
00:01:51,929 --> 00:01:53,969
you want just certain parts you can put

46
00:01:53,969 --> 00:01:55,289
this in here and it tells you all the

47
00:01:55,289 --> 00:01:57,119
modules that you need and it gives you a

48
00:01:57,119 --> 00:01:59,189
combo URL which most people in the room

49
00:01:59,189 --> 00:02:00,479
would be familiar with it's basically

50
00:02:00,479 --> 00:02:04,770
just concatenated that are used by by

51
00:02:04,770 --> 00:02:06,090
what you what you need and then puts it

52
00:02:06,090 --> 00:02:08,789
in one URL and so one way or another

53
00:02:08,789 --> 00:02:10,830
you're doing this by either a build

54
00:02:10,830 --> 00:02:12,510
script that's doing this or you're using

55
00:02:12,510 --> 00:02:14,069
this service or you're hosting your own

56
00:02:14,069 --> 00:02:16,800
combo like service or something right I

57
00:02:16,800 --> 00:02:19,530
don't think this is the answer and so

58
00:02:19,530 --> 00:02:21,420
the reason for this is that manually

59
00:02:21,420 --> 00:02:23,069
updating a combo URL every time you

60
00:02:23,069 --> 00:02:25,470
change something isn't scalable why

61
00:02:25,470 --> 00:02:27,510
isn't it scalable well you think about

62
00:02:27,510 --> 00:02:29,970
it your application isn't usually just

63
00:02:29,970 --> 00:02:30,690
one page

64
00:02:30,690 --> 00:02:32,070
you have a lot of different parts of

65
00:02:32,070 --> 00:02:33,870
your website you know you may not have a

66
00:02:33,870 --> 00:02:35,490
need an autocomplete widget on every

67
00:02:35,490 --> 00:02:37,020
page you may not need to have a

68
00:02:37,020 --> 00:02:38,370
scrollview on every page you may not

69
00:02:38,370 --> 00:02:40,920
need your own component on every page

70
00:02:40,920 --> 00:02:43,020
and so you want to be able to have your

71
00:02:43,020 --> 00:02:44,780
templates or parts of your application

72
00:02:44,780 --> 00:02:47,660
to just include what they need right and

73
00:02:47,660 --> 00:02:50,640
that I don't think it's really easy and

74
00:02:50,640 --> 00:02:53,220
if it's easy if you can do it it's it's

75
00:02:53,220 --> 00:02:57,990
not that great for performance so this

76
00:02:57,990 --> 00:03:00,720
is the easy API that Yui 3 gives you and

77
00:03:00,720 --> 00:03:02,070
there's other I'm going to talk about

78
00:03:02,070 --> 00:03:04,200
there's more than just Yui is not the

79
00:03:04,200 --> 00:03:05,400
only library that does this there are

80
00:03:05,400 --> 00:03:06,930
other ways to do it and you should be

81
00:03:06,930 --> 00:03:08,940
using them and finding finding a way to

82
00:03:08,940 --> 00:03:12,720
make it work but it's baked in and it's

83
00:03:12,720 --> 00:03:15,420
it's scripts only have to tell the page

84
00:03:15,420 --> 00:03:16,800
when it needs and so if you're using

85
00:03:16,800 --> 00:03:18,570
something like this or making modules

86
00:03:18,570 --> 00:03:21,150
with Yui or with something like required

87
00:03:21,150 --> 00:03:24,210
at jas basically your your modules your

88
00:03:24,210 --> 00:03:26,130
little JavaScript files that that do

89
00:03:26,130 --> 00:03:27,990
implement specific bits of functionality

90
00:03:27,990 --> 00:03:31,530
that's what defines what what's needed

91
00:03:31,530 --> 00:03:33,030
on the page right so you could just

92
00:03:33,030 --> 00:03:34,680
throw in the modules you want and they

93
00:03:34,680 --> 00:03:36,030
can declare their own dependencies and

94
00:03:36,030 --> 00:03:37,739
so that's something that's a really

95
00:03:37,739 --> 00:03:40,110
great way to make an application and

96
00:03:40,110 --> 00:03:42,420
it's what you guys should aspire to do

97
00:03:42,420 --> 00:03:43,739
but it's not always perform it and

98
00:03:43,739 --> 00:03:45,600
that's why we have people who are going

99
00:03:45,600 --> 00:03:47,310
in and copy and pasting something out of

100
00:03:47,310 --> 00:03:49,980
here or going in and actually you know

101
00:03:49,980 --> 00:03:51,270
maybe you don't even have a nice tool

102
00:03:51,270 --> 00:03:54,030
like this and you're just figuring out

103
00:03:54,030 --> 00:03:56,280
how to combine this with shell scripts

104
00:03:56,280 --> 00:03:58,020
or whatever and that isn't something I

105
00:03:58,020 --> 00:03:59,430
think we should accept right we should

106
00:03:59,430 --> 00:04:01,680
have an API that's this simple whether

107
00:04:01,680 --> 00:04:03,720
it's Yui or not and it should be

108
00:04:03,720 --> 00:04:07,280
something that that's also performing

109
00:04:07,280 --> 00:04:10,680
and so again i want to i want to stress

110
00:04:10,680 --> 00:04:12,209
that they're the reason why we use

111
00:04:12,209 --> 00:04:13,950
modules and there's going to be two

112
00:04:13,950 --> 00:04:15,570
great talks after mine that are going to

113
00:04:15,570 --> 00:04:17,519
talk about javascript frameworks and

114
00:04:17,519 --> 00:04:19,049
modules and you notice this is really

115
00:04:19,049 --> 00:04:20,820
common the reason why we're doing this

116
00:04:20,820 --> 00:04:23,430
is because it's you're delivering less

117
00:04:23,430 --> 00:04:25,140
code it's only what your users need

118
00:04:25,140 --> 00:04:27,450
right you're it's going to increase

119
00:04:27,450 --> 00:04:29,040
performance because you're having less

120
00:04:29,040 --> 00:04:31,470
code that's you're delivering even with

121
00:04:31,470 --> 00:04:32,460
a fast connection you still need to

122
00:04:32,460 --> 00:04:34,350
parse it that's especially significant

123
00:04:34,350 --> 00:04:36,630
on mobile right even with fast

124
00:04:36,630 --> 00:04:38,010
JavaScript fitting you know there's a

125
00:04:38,010 --> 00:04:39,210
lot of competition with JavaScript

126
00:04:39,210 --> 00:04:42,300
engines in browsers and that's great and

127
00:04:42,300 --> 00:04:43,440
that is only going to continue but that

128
00:04:43,440 --> 00:04:44,080
is an excuse

129
00:04:44,080 --> 00:04:48,370
use the you know forgetting about

130
00:04:48,370 --> 00:04:50,139
performance right it also manages

131
00:04:50,139 --> 00:04:51,789
complexity so it makes things easier on

132
00:04:51,789 --> 00:04:55,090
you so the problem is that yeah there

133
00:04:55,090 --> 00:04:56,889
needs to be a way for things to be more

134
00:04:56,889 --> 00:04:59,800
performant that's because with Yui 3 you

135
00:04:59,800 --> 00:05:02,500
have the simple API but one running Yui

136
00:05:02,500 --> 00:05:04,599
loader on a client side isn't free right

137
00:05:04,599 --> 00:05:07,300
it actually takes it takes time it

138
00:05:07,300 --> 00:05:08,680
doesn't take that long but it takes time

139
00:05:08,680 --> 00:05:10,930
for these dependencies to be worked out

140
00:05:10,930 --> 00:05:12,639
you also have to transfer all the

141
00:05:12,639 --> 00:05:14,530
metadata about all the modules that

142
00:05:14,530 --> 00:05:16,569
you're using on the page to the client

143
00:05:16,569 --> 00:05:18,490
so that it knows about say when I asked

144
00:05:18,490 --> 00:05:20,379
for YQL it knows that it needs some

145
00:05:20,379 --> 00:05:22,479
module like Jason P it needs a module

146
00:05:22,479 --> 00:05:25,930
like my order needs its sub modules or

147
00:05:25,930 --> 00:05:28,509
what have you write as things that

148
00:05:28,509 --> 00:05:31,419
requires and doing all that is expensive

149
00:05:31,419 --> 00:05:33,969
even though you can cash we could we

150
00:05:33,969 --> 00:05:34,960
could send things with far future

151
00:05:34,960 --> 00:05:37,240
expires right like the for the module

152
00:05:37,240 --> 00:05:39,400
metadata download and the Yui seed file

153
00:05:39,400 --> 00:05:43,210
and all this parsing metadata and

154
00:05:43,210 --> 00:05:45,550
calculating from it isn't cash and it

155
00:05:45,550 --> 00:05:47,860
happens over and over one thing that

156
00:05:47,860 --> 00:05:49,509
incidentally wasn't think that we were

157
00:05:49,509 --> 00:05:50,889
trying to do to improve the performance

158
00:05:50,889 --> 00:05:53,800
of Yui loader is actually take all that

159
00:05:53,800 --> 00:05:56,379
metadata for say what the Yui library

160
00:05:56,379 --> 00:05:57,729
and put it into some kind of local

161
00:05:57,729 --> 00:06:00,039
storage mechanism and that didn't work

162
00:06:00,039 --> 00:06:02,080
as well as we hoped because it turns out

163
00:06:02,080 --> 00:06:03,969
that still taking it out of local

164
00:06:03,969 --> 00:06:06,190
storage and then parsing this huge JSON

165
00:06:06,190 --> 00:06:07,690
blob with everything that you would

166
00:06:07,690 --> 00:06:10,900
possibly use takes about just as much

167
00:06:10,900 --> 00:06:12,400
time as just doing the calculation with

168
00:06:12,400 --> 00:06:14,639
with stuff that the way that we used to

169
00:06:14,639 --> 00:06:17,919
and so basically we think we could do a

170
00:06:17,919 --> 00:06:19,270
little bit better with this we think we

171
00:06:19,270 --> 00:06:21,129
have an okay API and we could probably

172
00:06:21,129 --> 00:06:25,150
even make tools for for you know making

173
00:06:25,150 --> 00:06:27,430
modules that work with why I better as

174
00:06:27,430 --> 00:06:29,110
well but you know in order to get there

175
00:06:29,110 --> 00:06:31,029
we need to have a really good we don't

176
00:06:31,029 --> 00:06:32,650
want to just say this is this makes it

177
00:06:32,650 --> 00:06:34,389
easier on developers we want you guys to

178
00:06:34,389 --> 00:06:36,490
have a reason to use it you know a

179
00:06:36,490 --> 00:06:38,050
reason where it's not only just helps

180
00:06:38,050 --> 00:06:39,129
you guys but it makes your website

181
00:06:39,129 --> 00:06:41,110
faster and that's what I want to do with

182
00:06:41,110 --> 00:06:44,110
my project I've we put Yui loader as a

183
00:06:44,110 --> 00:06:47,319
web service and we call it why do I

184
00:06:47,319 --> 00:06:49,629
loader server or why LS and so the first

185
00:06:49,629 --> 00:06:51,009
thing this lets you do is you can you

186
00:06:51,009 --> 00:06:52,959
could just pass it modules to load like

187
00:06:52,959 --> 00:06:55,180
say if I want the drag drop module what

188
00:06:55,180 --> 00:06:56,430
this is done is

189
00:06:56,430 --> 00:06:58,770
I have this running locally and for Yui

190
00:06:58,770 --> 00:07:01,350
3 30 it's just loading the drag drop

191
00:07:01,350 --> 00:07:02,850
module and you can see at the it's

192
00:07:02,850 --> 00:07:04,410
loading all of its dependencies that it

193
00:07:04,410 --> 00:07:08,870
needs and drag drops at the very bottom

194
00:07:08,870 --> 00:07:11,010
you can pass other things to this as

195
00:07:11,010 --> 00:07:16,440
well so say I want to have the debug

196
00:07:16,440 --> 00:07:18,480
version of this and you get that it's

197
00:07:18,480 --> 00:07:19,830
just doing this on the fly this is

198
00:07:19,830 --> 00:07:22,110
running a course in nodejs using why I

199
00:07:22,110 --> 00:07:24,480
loader you could pass you know whatever

200
00:07:24,480 --> 00:07:27,630
you want in the end of this so if I want

201
00:07:27,630 --> 00:07:30,630
you could just passed a list right but

202
00:07:30,630 --> 00:07:32,280
this isn't really what I came to talk

203
00:07:32,280 --> 00:07:34,110
about this is kind of neat and that you

204
00:07:34,110 --> 00:07:36,180
no longer have to go through i'm trying

205
00:07:36,180 --> 00:07:37,620
to show the end of it but doesn't really

206
00:07:37,620 --> 00:07:41,490
matter like this is this is all neat and

207
00:07:41,490 --> 00:07:49,530
all let's see go back cool but there's a

208
00:07:49,530 --> 00:07:51,290
better way and that's just using Yui use

209
00:07:51,290 --> 00:07:54,150
okay so with with yls we kept the same

210
00:07:54,150 --> 00:07:57,180
API right but we added extreme

211
00:07:57,180 --> 00:07:59,460
performance to it but basically this

212
00:07:59,460 --> 00:08:00,870
this extreme performance is on par with

213
00:08:00,870 --> 00:08:02,100
something that where you'd have to go

214
00:08:02,100 --> 00:08:04,020
through the painful way of using or

215
00:08:04,020 --> 00:08:07,860
using your own build script or bye-bye

216
00:08:07,860 --> 00:08:10,230
configurator or whatever and said you

217
00:08:10,230 --> 00:08:11,520
could just have you know small

218
00:08:11,520 --> 00:08:14,130
JavaScript files that that implement

219
00:08:14,130 --> 00:08:16,470
pieces of functionality and actually

220
00:08:16,470 --> 00:08:17,700
have them to clear the dependencies and

221
00:08:17,700 --> 00:08:19,950
have it work just as well that's the

222
00:08:19,950 --> 00:08:22,110
goal just as well as if you were doing

223
00:08:22,110 --> 00:08:24,420
stuff the hard way and sort of sort of

224
00:08:24,420 --> 00:08:26,040
downloading parsing and calculating

225
00:08:26,040 --> 00:08:27,540
modded dependencies like we used to with

226
00:08:27,540 --> 00:08:30,150
Yui we now ask why LS for them and so a

227
00:08:30,150 --> 00:08:31,140
request would look something like this

228
00:08:31,140 --> 00:08:34,770
right we give information about what

229
00:08:34,770 --> 00:08:38,070
module you want yql what we have on the

230
00:08:38,070 --> 00:08:40,470
page that's env right here and what we

231
00:08:40,470 --> 00:08:43,320
have on the page is yui what version of

232
00:08:43,320 --> 00:08:45,480
Yui and tests and I'll get into test in

233
00:08:45,480 --> 00:08:47,130
a little bit but we think that feature

234
00:08:47,130 --> 00:08:49,260
testing is very important and so what

235
00:08:49,260 --> 00:08:50,310
we're doing is actually we're telling

236
00:08:50,310 --> 00:08:53,100
the we're transferring state about what

237
00:08:53,100 --> 00:08:55,500
tests have passed and failed on the

238
00:08:55,500 --> 00:08:56,640
browser and actually transferring that

239
00:08:56,640 --> 00:08:59,220
over to the server so it's very fast

240
00:08:59,220 --> 00:09:01,950
because we don't have we're running this

241
00:09:01,950 --> 00:09:04,590
calculation on the server and it's it's

242
00:09:04,590 --> 00:09:06,120
it always winds up being faster than

243
00:09:06,120 --> 00:09:07,530
what someone has especially if they're

244
00:09:07,530 --> 00:09:08,310
on a phone

245
00:09:08,310 --> 00:09:10,440
and you don't need to download and parse

246
00:09:10,440 --> 00:09:12,870
module metadata like you did before but

247
00:09:12,870 --> 00:09:15,840
the real win is the first one but this

248
00:09:15,840 --> 00:09:17,700
is that this is the huge win this is

249
00:09:17,700 --> 00:09:19,800
what's really exciting is that it's it's

250
00:09:19,800 --> 00:09:21,570
whenever you go to the next page the

251
00:09:21,570 --> 00:09:23,760
entire response has been cached so what

252
00:09:23,760 --> 00:09:25,380
this means is that the first time anyone

253
00:09:25,380 --> 00:09:29,370
visits some page on your website the

254
00:09:29,370 --> 00:09:31,290
this URL right this this you are at the

255
00:09:31,290 --> 00:09:33,270
bottom that's already been accessed if

256
00:09:33,270 --> 00:09:34,410
it's if it's someone of the same browser

257
00:09:34,410 --> 00:09:36,600
with the same test configuration it's

258
00:09:36,600 --> 00:09:38,570
been it's been access it's cached it's

259
00:09:38,570 --> 00:09:41,520
it's it's on a it's cached at least on

260
00:09:41,520 --> 00:09:43,470
on yahoo side right or on the person

261
00:09:43,470 --> 00:09:46,790
serving yls aside and so that means that

262
00:09:46,790 --> 00:09:49,260
your other users will take advantage of

263
00:09:49,260 --> 00:09:51,240
that and if it's if it's if it's the

264
00:09:51,240 --> 00:09:52,710
person has visited the page and they're

265
00:09:52,710 --> 00:09:55,589
getting that fast thing off of off of

266
00:09:55,589 --> 00:09:57,029
the server cache that we have but then

267
00:09:57,029 --> 00:09:59,370
it's in their browser cache no more

268
00:09:59,370 --> 00:10:00,720
dependency calculation has to happen on

269
00:10:00,720 --> 00:10:02,550
the client anymore and it never and

270
00:10:02,550 --> 00:10:04,110
never did but now it doesn't have that

271
00:10:04,110 --> 00:10:06,180
it's all local and you don't have to do

272
00:10:06,180 --> 00:10:08,070
to go through any hoops to determine all

273
00:10:08,070 --> 00:10:10,770
the modules here because that already

274
00:10:10,770 --> 00:10:12,150
happened by that by that request being

275
00:10:12,150 --> 00:10:14,760
available so right and the browser with

276
00:10:14,760 --> 00:10:16,080
fire feature expires and then in the

277
00:10:16,080 --> 00:10:18,960
server with its own caching layer that's

278
00:10:18,960 --> 00:10:20,430
baked into the server not just yahoo

279
00:10:20,430 --> 00:10:21,870
zone but the one that that's going to

280
00:10:21,870 --> 00:10:24,600
ship with the open-source bit of it this

281
00:10:24,600 --> 00:10:26,670
is personal so it's it's not just for

282
00:10:26,670 --> 00:10:28,920
Yui the goal of the architecture the

283
00:10:28,920 --> 00:10:31,230
system is that it can work with modules

284
00:10:31,230 --> 00:10:33,150
that are outside of Yui while I gallery

285
00:10:33,150 --> 00:10:35,880
two and three your own modules these all

286
00:10:35,880 --> 00:10:37,170
should work really well and you should

287
00:10:37,170 --> 00:10:38,610
be able to import them into this and use

288
00:10:38,610 --> 00:10:42,810
them just like we can for Yui itself so

289
00:10:42,810 --> 00:10:45,540
I want to give you a reason why I'm so

290
00:10:45,540 --> 00:10:47,400
excited about this and so I want to show

291
00:10:47,400 --> 00:10:49,530
you the speed difference right this is

292
00:10:49,530 --> 00:10:51,390
this is you know something we try to do

293
00:10:51,390 --> 00:10:52,709
by putting things in the local storage

294
00:10:52,709 --> 00:10:55,080
and then getting them out and wasn't it

295
00:10:55,080 --> 00:10:57,120
nearly as impressive so what I'm going

296
00:10:57,120 --> 00:10:59,790
to show you is basically again I want to

297
00:10:59,790 --> 00:11:01,500
reiterate that an initial page load is

298
00:11:01,500 --> 00:11:02,640
is going to always be a little bit

299
00:11:02,640 --> 00:11:04,500
faster since no metadata is download in

300
00:11:04,500 --> 00:11:06,180
the server side JavaScript accolades

301
00:11:06,180 --> 00:11:08,640
faster and everything but what I'm going

302
00:11:08,640 --> 00:11:10,350
to show you is when you when someone

303
00:11:10,350 --> 00:11:11,910
else's ran this once right when you

304
00:11:11,910 --> 00:11:15,000
visited a page already the cost of Yui

305
00:11:15,000 --> 00:11:16,740
loader right now continues to you

306
00:11:16,740 --> 00:11:18,390
continue to have to do it calculate

307
00:11:18,390 --> 00:11:21,740
dependencies even though

308
00:11:21,740 --> 00:11:25,589
the combo URL is already cashed in the

309
00:11:25,589 --> 00:11:27,330
browser so basically what I'm saying is

310
00:11:27,330 --> 00:11:29,310
that no matter even though we can cash

311
00:11:29,310 --> 00:11:31,019
responses coming back from the server

312
00:11:31,019 --> 00:11:33,390
the thing is we still have to run this

313
00:11:33,390 --> 00:11:35,430
JavaScript calculation as you navigate

314
00:11:35,430 --> 00:11:37,950
around the page or navigate this to the

315
00:11:37,950 --> 00:11:39,570
same page or if another visitor visits

316
00:11:39,570 --> 00:11:41,519
they can't take advantage of this

317
00:11:41,519 --> 00:11:43,380
calculation that already happened and so

318
00:11:43,380 --> 00:11:44,820
what we've done is we've taken all these

319
00:11:44,820 --> 00:11:46,769
instead of having you know 100 users

320
00:11:46,769 --> 00:11:48,779
calculate this themselves we can now

321
00:11:48,779 --> 00:11:51,300
have once you know one person do it and

322
00:11:51,300 --> 00:11:52,709
so it's no slower than than it was

323
00:11:52,709 --> 00:11:54,750
before right since it's the same thing

324
00:11:54,750 --> 00:11:56,310
but just happening in one place and then

325
00:11:56,310 --> 00:11:57,990
everyone takes advantage of it right and

326
00:11:57,990 --> 00:11:59,310
so that's what I'm going to show you is

327
00:11:59,310 --> 00:12:01,440
the difference between keeping it

328
00:12:01,440 --> 00:12:03,899
keeping it everyone doing it versus

329
00:12:03,899 --> 00:12:06,839
having it already done once and that's

330
00:12:06,839 --> 00:12:08,519
that's the whole purpose of this thing

331
00:12:08,519 --> 00:12:11,040
and so this is running on Chrome and

332
00:12:11,040 --> 00:12:13,230
we're showing loading different various

333
00:12:13,230 --> 00:12:15,329
combinations of stuff client side loader

334
00:12:15,329 --> 00:12:18,930
versus why LS and it can vary as well so

335
00:12:18,930 --> 00:12:20,640
this is just an example but it's always

336
00:12:20,640 --> 00:12:25,320
faster sometimes dramatically so so if I

337
00:12:25,320 --> 00:12:26,760
move this in a new actually a new

338
00:12:26,760 --> 00:12:28,020
renderer actually winds up being even

339
00:12:28,020 --> 00:12:30,000
faster this is actually even more

340
00:12:30,000 --> 00:12:32,130
profound on mobile devices even with the

341
00:12:32,130 --> 00:12:35,149
latest iOS we're seeing differences of

342
00:12:35,149 --> 00:12:37,589
of things cut in half like nine hundred

343
00:12:37,589 --> 00:12:39,510
milliseconds 150 milliseconds all the

344
00:12:39,510 --> 00:12:43,380
way down to 450 the Wi-Fi here is

345
00:12:43,380 --> 00:12:45,839
unfortunately I'm can't keep my phone on

346
00:12:45,839 --> 00:12:50,459
it right now so but let me let me run

347
00:12:50,459 --> 00:12:52,890
this in this again just to see how it

348
00:12:52,890 --> 00:12:55,560
can fluctuate so yeah that's a little

349
00:12:55,560 --> 00:12:56,760
bit faster and that's a lot faster this

350
00:12:56,760 --> 00:12:57,779
is what the i just opened a new tab

351
00:12:57,779 --> 00:12:59,820
that's only thing I did I've had the

352
00:12:59,820 --> 00:13:03,839
presentation open for about a day so so

353
00:13:03,839 --> 00:13:05,550
you can see it's this is what's really

354
00:13:05,550 --> 00:13:07,320
exciting which we're comparing is 106

355
00:13:07,320 --> 00:13:10,350
for this combination to 30 right 58 to

356
00:13:10,350 --> 00:13:14,040
1444 243 and even in a less than ideal

357
00:13:14,040 --> 00:13:16,079
situation that was still it was so odd

358
00:13:16,079 --> 00:13:18,899
of being faster and so that's that's

359
00:13:18,899 --> 00:13:21,390
pretty exciting and again with white

360
00:13:21,390 --> 00:13:22,860
with the next version of Yui they'll

361
00:13:22,860 --> 00:13:24,329
have this client side support in it

362
00:13:24,329 --> 00:13:26,550
you'll be able to host this yourself and

363
00:13:26,550 --> 00:13:28,199
hopefully even with your own modules

364
00:13:28,199 --> 00:13:29,970
right but that's you won't need to

365
00:13:29,970 --> 00:13:32,430
because we will provide this on our CDN

366
00:13:32,430 --> 00:13:33,930
and that we do this already we have a

367
00:13:33,930 --> 00:13:34,960
CDN combo

368
00:13:34,960 --> 00:13:36,070
endler when you looked at Yui

369
00:13:36,070 --> 00:13:37,870
configurator that's weird something we

370
00:13:37,870 --> 00:13:39,400
host we're going to provide this on our

371
00:13:39,400 --> 00:13:42,280
own CDN and it's just enabled with the

372
00:13:42,280 --> 00:13:43,810
simple configuration flag so you just

373
00:13:43,810 --> 00:13:44,980
tell say that you want to use this

374
00:13:44,980 --> 00:13:48,640
feature and you get it when we're

375
00:13:48,640 --> 00:13:50,320
building this this is some of the things

376
00:13:50,320 --> 00:13:51,610
that we've we wanted to keep and

377
00:13:51,610 --> 00:13:54,430
designing this kind of system I'm

378
00:13:54,430 --> 00:13:55,450
running out of time so I'm going to go

379
00:13:55,450 --> 00:13:56,490
through this really quick

380
00:13:56,490 --> 00:13:58,090
capability-based loadings really

381
00:13:58,090 --> 00:14:03,520
important so we have a excuse me a s we

382
00:14:03,520 --> 00:14:06,190
have we wanted to transfer state over to

383
00:14:06,190 --> 00:14:08,710
the to the server of all the things that

384
00:14:08,710 --> 00:14:09,910
are on there so we transfer all these

385
00:14:09,910 --> 00:14:11,200
tests and stuff that's already on the

386
00:14:11,200 --> 00:14:12,370
page is sent as well like you saw

387
00:14:12,370 --> 00:14:14,680
earlier and so this is kash friendly so

388
00:14:14,680 --> 00:14:16,810
we don't this isn't a unique URL it's if

389
00:14:16,810 --> 00:14:18,190
someone came with the same browser they

390
00:14:18,190 --> 00:14:20,230
would get the same response we're using

391
00:14:20,230 --> 00:14:22,900
this already in Yui library com we're

392
00:14:22,900 --> 00:14:25,090
working to bring this to everyone some

393
00:14:25,090 --> 00:14:27,340
other things to take away from this is

394
00:14:27,340 --> 00:14:29,440
server side yui is what what I'm using

395
00:14:29,440 --> 00:14:30,850
to do this it's already open source and

396
00:14:30,850 --> 00:14:32,830
out there it allows why you out easily

397
00:14:32,830 --> 00:14:35,590
run on node and really the loader part

398
00:14:35,590 --> 00:14:37,000
of this is actually already open source

399
00:14:37,000 --> 00:14:39,880
so what what's not is that is kind of

400
00:14:39,880 --> 00:14:41,200
the tools and everything around it that

401
00:14:41,200 --> 00:14:43,330
we're still working on scaling this

402
00:14:43,330 --> 00:14:44,500
though as something I really want to

403
00:14:44,500 --> 00:14:47,110
what want to show you guys is if you're

404
00:14:47,110 --> 00:14:48,130
if you're working with anything that

405
00:14:48,130 --> 00:14:49,420
involves an expensive javascript

406
00:14:49,420 --> 00:14:52,480
computation javascript single-threaded

407
00:14:52,480 --> 00:14:54,190
so when you're working with something

408
00:14:54,190 --> 00:14:56,740
that's that that's blocking in

409
00:14:56,740 --> 00:14:58,270
javascript that sort of requests will

410
00:14:58,270 --> 00:15:00,370
pile up it's important to make sure that

411
00:15:00,370 --> 00:15:01,750
you're doing the right thing so we did a

412
00:15:01,750 --> 00:15:03,190
simple test of this on a machine with

413
00:15:03,190 --> 00:15:04,360
two cores just to show you the

414
00:15:04,360 --> 00:15:06,640
difference between running Yui loader in

415
00:15:06,640 --> 00:15:09,580
the same instance of nodejs as a server

416
00:15:09,580 --> 00:15:11,890
versus just putting it out in a separate

417
00:15:11,890 --> 00:15:14,020
process than communicating with it over

418
00:15:14,020 --> 00:15:17,080
a socket and the difference is huge so

419
00:15:17,080 --> 00:15:18,520
what we're seeing is this is this is

420
00:15:18,520 --> 00:15:20,320
running with two workers and this is

421
00:15:20,320 --> 00:15:21,940
running with just everything in line but

422
00:15:21,940 --> 00:15:23,590
with separated out the traditional

423
00:15:23,590 --> 00:15:25,330
nodejs scaling way right which is just

424
00:15:25,330 --> 00:15:27,610
to use spark to or cluster or something

425
00:15:27,610 --> 00:15:29,680
like that for spawning different things

426
00:15:29,680 --> 00:15:31,840
and this is the big part right so this

427
00:15:31,840 --> 00:15:33,460
is performance we used to see taking up

428
00:15:33,460 --> 00:15:35,920
to 33 or almost 4 seconds and now

429
00:15:35,920 --> 00:15:37,990
everything is this nice low thing right

430
00:15:37,990 --> 00:15:41,230
down here that's really nice so you want

431
00:15:41,230 --> 00:15:42,640
to avoid blocking anything if you're

432
00:15:42,640 --> 00:15:43,870
doing image processing working with

433
00:15:43,870 --> 00:15:45,130
binary data stuff like this that can

434
00:15:45,130 --> 00:15:47,560
block even if it's just for 50

435
00:15:47,560 --> 00:15:48,579
milliseconds

436
00:15:48,579 --> 00:15:49,899
you want to be very careful because

437
00:15:49,899 --> 00:15:51,730
things will start queuing up outside of

438
00:15:51,730 --> 00:15:54,279
outside of the stuff and that actually

439
00:15:54,279 --> 00:15:57,699
causes memory to use it to explode like

440
00:15:57,699 --> 00:16:00,360
really really bad explode on nodejs so

441
00:16:00,360 --> 00:16:02,799
so we're using web workers by Peter

442
00:16:02,799 --> 00:16:05,279
Grice and that's awesome library to use

443
00:16:05,279 --> 00:16:07,089
again blowing through this stuff really

444
00:16:07,089 --> 00:16:09,610
quick this isn't as interesting but what

445
00:16:09,610 --> 00:16:11,470
I want to show you is this we this is

446
00:16:11,470 --> 00:16:13,029
interesting just because we test the

447
00:16:13,029 --> 00:16:14,230
different combinations and wasn't what

448
00:16:14,230 --> 00:16:16,089
we expected instead of running one

449
00:16:16,089 --> 00:16:19,149
master with 16 slaves we ran 16 Yui

450
00:16:19,149 --> 00:16:21,819
workers we actually ran one master with

451
00:16:21,819 --> 00:16:25,449
with a 16 masters with one Yui worker

452
00:16:25,449 --> 00:16:27,069
and that wind up being most performant

453
00:16:27,069 --> 00:16:28,209
because that's what you see down here in

454
00:16:28,209 --> 00:16:30,759
green where we have this nice even when

455
00:16:30,759 --> 00:16:32,559
we put it up to 400 requests per second

456
00:16:32,559 --> 00:16:35,499
we still get a nice nice flat line with

457
00:16:35,499 --> 00:16:36,730
this configuration right here that's

458
00:16:36,730 --> 00:16:38,980
great and this is the improvement we

459
00:16:38,980 --> 00:16:40,660
made from this is the in line when you

460
00:16:40,660 --> 00:16:42,879
in line things it takes 1.2 seconds on

461
00:16:42,879 --> 00:16:45,970
our production hardware to run to run a

462
00:16:45,970 --> 00:16:48,610
two-run just all of the different tests

463
00:16:48,610 --> 00:16:50,339
that we have with going all over

464
00:16:50,339 --> 00:16:52,569
different configurations of modules

465
00:16:52,569 --> 00:16:54,429
versus this green line which is running

466
00:16:54,429 --> 00:16:56,139
things with with one web worker so that

467
00:16:56,139 --> 00:16:57,369
makes a big difference so you want to

468
00:16:57,369 --> 00:16:58,899
make sure you're doing that what you

469
00:16:58,899 --> 00:17:00,279
don't see in this graph is memory to

470
00:17:00,279 --> 00:17:02,619
which explodes which is not good if

471
00:17:02,619 --> 00:17:03,939
you're using long if you're doing this

472
00:17:03,939 --> 00:17:05,829
for the long run which I encourage you

473
00:17:05,829 --> 00:17:07,299
to when you're writing node.js stuff

474
00:17:07,299 --> 00:17:10,449
that you go through and stress tests

475
00:17:10,449 --> 00:17:12,880
this stuff right you want to make sure

476
00:17:12,880 --> 00:17:14,169
that you're using something like HTTP

477
00:17:14,169 --> 00:17:16,510
proof and that's something that was

478
00:17:16,510 --> 00:17:18,309
written by HP it's very old there's

479
00:17:18,309 --> 00:17:20,019
papers written about it so you know that

480
00:17:20,019 --> 00:17:21,159
that's the kind of thing you should be

481
00:17:21,159 --> 00:17:23,679
using node the node load works really

482
00:17:23,679 --> 00:17:25,480
well for first stuff that's you know

483
00:17:25,480 --> 00:17:27,189
like I've used it for stuff that's 10 30

484
00:17:27,189 --> 00:17:29,200
minutes but what I've actually noticed

485
00:17:29,200 --> 00:17:31,240
is when I ran a 72-hour test with no

486
00:17:31,240 --> 00:17:33,519
load I saw that my server performance

487
00:17:33,519 --> 00:17:35,559
was just going through the floor and

488
00:17:35,559 --> 00:17:37,059
turns out it wasn't my server it was

489
00:17:37,059 --> 00:17:38,470
node load right so you want to make sure

490
00:17:38,470 --> 00:17:39,789
that you're not you're not you know

491
00:17:39,789 --> 00:17:41,710
giving yourself grief by by using tools

492
00:17:41,710 --> 00:17:44,139
like that are for something they're not

493
00:17:44,139 --> 00:17:45,760
meant for right note load works really

494
00:17:45,760 --> 00:17:47,919
really well for and gives you a lot of

495
00:17:47,919 --> 00:17:51,340
great data for small short test runs and

496
00:17:51,340 --> 00:17:52,539
so another thing I want to go over

497
00:17:52,539 --> 00:17:55,179
really quick is how what we're doing to

498
00:17:55,179 --> 00:17:57,070
test why do I use to make sure that this

499
00:17:57,070 --> 00:17:59,289
is really robust for the release that

500
00:17:59,289 --> 00:18:00,850
we're going to do later this year of 340

501
00:18:00,850 --> 00:18:02,470
is use

502
00:18:02,470 --> 00:18:04,570
box I frames for unit testing which is

503
00:18:04,570 --> 00:18:07,090
really useful for if you need to test

504
00:18:07,090 --> 00:18:09,700
things that require a clean browser

505
00:18:09,700 --> 00:18:11,260
environment feature on and this is on

506
00:18:11,260 --> 00:18:12,549
the Yui gallery so I encourage you to

507
00:18:12,549 --> 00:18:15,640
look more into that as well some things

508
00:18:15,640 --> 00:18:17,140
would connect you if you're curious

509
00:18:17,140 --> 00:18:18,880
about I'm almost out of time so if

510
00:18:18,880 --> 00:18:19,809
you're curious about this kind of stuff

511
00:18:19,809 --> 00:18:21,760
come and see me I would love to talk

512
00:18:21,760 --> 00:18:26,860
more about it and Jalen's really nice

513
00:18:26,860 --> 00:18:28,179
there's a node tool that I wrote for

514
00:18:28,179 --> 00:18:30,730
jslint that's really nice pact is

515
00:18:30,730 --> 00:18:31,720
something that I've used for testing

516
00:18:31,720 --> 00:18:35,320
HTTP servers and it you could do it in a

517
00:18:35,320 --> 00:18:36,669
really expressive way and I want to show

518
00:18:36,669 --> 00:18:40,570
that really quick here so actually this

519
00:18:40,570 --> 00:18:50,140
one no this one so let's see so this is

520
00:18:50,140 --> 00:18:51,520
really nice so I could just write tons

521
00:18:51,520 --> 00:18:53,440
of these things where I have with packed

522
00:18:53,440 --> 00:18:55,179
i can just have the URL in it and just

523
00:18:55,179 --> 00:18:56,650
have a topic thing as request this is

524
00:18:56,650 --> 00:18:59,860
using the vows h oj s test framework and

525
00:18:59,860 --> 00:19:01,720
it's really easy and this this kind of

526
00:19:01,720 --> 00:19:03,880
extends off the last talked just because

527
00:19:03,880 --> 00:19:05,470
you know i don't if i want to add a new

528
00:19:05,470 --> 00:19:06,789
test it's really easy for me to do it

529
00:19:06,789 --> 00:19:08,919
with packed and that's really helpful

530
00:19:08,919 --> 00:19:11,470
and then annotated code i had that but i

531
00:19:11,470 --> 00:19:14,770
didn't show it so right this is really

532
00:19:14,770 --> 00:19:15,909
hard on the client side which is why

533
00:19:15,909 --> 00:19:17,140
this isn't available yet but we're

534
00:19:17,140 --> 00:19:18,669
hoping the next how few months to have

535
00:19:18,669 --> 00:19:21,520
this out for you guys so something that

536
00:19:21,520 --> 00:19:22,809
i think would be really interesting and

537
00:19:22,809 --> 00:19:24,070
if any of you guys know people that work

538
00:19:24,070 --> 00:19:25,780
on like required ijs or if you're doing

539
00:19:25,780 --> 00:19:27,490
something like this yourself i would

540
00:19:27,490 --> 00:19:28,690
love to talk to them because i think

541
00:19:28,690 --> 00:19:30,130
this is a generic problem that we could

542
00:19:30,130 --> 00:19:33,490
we could really have you know this

543
00:19:33,490 --> 00:19:35,590
there's no reason why you'd have to use

544
00:19:35,590 --> 00:19:37,510
Yui on the client side use a technology

545
00:19:37,510 --> 00:19:39,250
like this right and so i would love to

546
00:19:39,250 --> 00:19:41,530
have this be the way that you know to to

547
00:19:41,530 --> 00:19:44,289
manage your applications javascript

548
00:19:44,289 --> 00:19:46,840
dependencies a lot of possibilities here

549
00:19:46,840 --> 00:19:49,059
so recap client-side module loading is

550
00:19:49,059 --> 00:19:51,220
hard this this system hopefully makes

551
00:19:51,220 --> 00:19:53,380
that easier and one size doesn't always

552
00:19:53,380 --> 00:19:55,270
fit all like the traditional nodejs

553
00:19:55,270 --> 00:19:56,710
scale and stuff didn't work for us so we

554
00:19:56,710 --> 00:19:58,630
wanted to test it and if you guys are

555
00:19:58,630 --> 00:20:00,159
more interested in that we've we are

556
00:20:00,159 --> 00:20:02,799
hoping to have this replace eventually

557
00:20:02,799 --> 00:20:05,409
place the ad the default way of using

558
00:20:05,409 --> 00:20:08,679
Yui be using the system so it needs to

559
00:20:08,679 --> 00:20:10,360
need to scale and so that's what that's

560
00:20:10,360 --> 00:20:11,789
something that we're working on at Yahoo

561
00:20:11,789 --> 00:20:13,840
so if you're interested in that please

562
00:20:13,840 --> 00:20:14,720
come talk to me

