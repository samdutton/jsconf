1
00:00:21,470 --> 00:00:30,700
>> I'm going to talk about three of my things,
Unicode, JavaScript and gangster rap. I work

2
00:00:30,700 --> 00:00:38,079
for software developer in software relations,
I like to collaborate on Open Source projects,

3
00:00:38,079 --> 00:00:45,871
and one example of such a project is Punycode,
it's part of node G S, it ships, if you can

4
00:00:45,871 --> 00:00:58,000
want to play around, just require it,you didn't
have to MPN install anything T puny\h‑‑

5
00:00:58,000 --> 00:01:07,140
internationalized domain name into pure ASCII
forms, so I want to write a JavaScript implementation

6
00:01:07,140 --> 00:01:13,150
of, that I thought it would be really simple
because the algorithm is well defined, I figured

7
00:01:13,150 --> 00:01:18,830
I would port that into JavaScript and that
would be it. But while I was working on this

8
00:01:18,830 --> 00:01:24,000
actual emme opinionation I ran into lots of
new things, things I didn't know about JavaScripts

9
00:01:24,000 --> 00:01:26,550
and that's what this talk will be about, basically.

10
00:01:26,550 --> 00:01:33,860
But, first, does anyone know who this guy
is? Of yeah, of course, everyone knows it's

11
00:01:33,860 --> 00:01:41,170
Jay Ze. He decided to write a JavaScript program
once and instead he ended up writing a song

12
00:01:41,170 --> 00:01:44,720
about his frustration with the language, it
you might have heard of it before, it's called

13
00:01:44,720 --> 00:01:54,370
99 problems, don't get me wrong I love JavaScript,
just like with any other programming language,

14
00:01:54,370 --> 00:02:00,070
if you don't know language by heart, and really
who does, you're going to be surprised, that's

15
00:02:00,070 --> 00:02:08,369
just what life as programmer is like, that's
why we have PHPWTF.org, list it is weird quirk

16
00:02:08,369 --> 00:02:17,470
in PHP and similarly WTF.com for JavaScriptful
everything on these web sides can be explained

17
00:02:17,470 --> 00:02:23,480
if you look at the specification, the PHP,
the documentation or implementationsh even

18
00:02:23,480 --> 00:02:28,250
then if particular behavior of language is
confusing to a lot of people, that is a bit

19
00:02:28,250 --> 00:02:34,840
of a problem, so I think the way JavaScript
handles Unicode is well, very surprising to

20
00:02:34,840 --> 00:02:39,650
say the least. But before we get into that,
let's talk about Unicode itself, just to make

21
00:02:39,650 --> 00:02:45,230
sure we're all on the same page. I'm going
to tell you the absolute minimum about Unicode

22
00:02:45,230 --> 00:02:50,650
in order to work with strings in JavaScript
correctly and nothing else. It's easiest to

23
00:02:50,650 --> 00:02:57,310
think of Unicode of a database that matches
any symbol you can think of to a unique number,

24
00:02:57,310 --> 00:03:03,780
the code points and a you cane unique con
noncal name, it's easy to refer to any specific

25
00:03:03,780 --> 00:03:09,390
symbol by using the unique name or code point,
you don't have to use the symbol itself to

26
00:03:09,390 --> 00:03:17,680
talk about the symbol. For example, Unicode
map it is Latin capital letter A to U + 0041,

27
00:03:17,680 --> 00:03:27,610
this is a hexadecimal number, usually four
code unit codes like this\h‑‑ now, another

28
00:03:27,610 --> 00:03:32,840
example is the letter\h‑‑ Latin small
letter A, a different letter all together,

29
00:03:32,840 --> 00:03:39,620
it gets it's own code point and it's own con
noncal name's a lot of stuff in Unicode, each

30
00:03:39,620 --> 00:03:44,750
symbol gets it's own code point's a lot of
weird stuff, there's a snow man symbol in

31
00:03:44,750 --> 00:03:49,739
Unicode, not sure why wow would you need it.

32
00:03:49,739 --> 00:03:54,459
There's everyone's favorite character the
pile of Poo, that's the con noncal name for

33
00:03:54,459 --> 00:04:04,069
the symbol. You can see it's U + 1F 4A 9,
you may be wondering at this point how many

34
00:04:04,069 --> 00:04:09,500
code points are there what's the highest possible
code point value in Unicode, well the possible

35
00:04:09,500 --> 00:04:18,739
code point value from 0 to 10FFFF that's over
one million possible symbols, to keep things

36
00:04:18,739 --> 00:04:24,310
organized Unicode devised this range of code
points into 17 planes that consist of about

37
00:04:24,310 --> 00:04:30,659
65,000 code points each. The first of these
plane s is called the BMP, the most important

38
00:04:30,659 --> 00:04:34,870
pine one because it contains all the most
commonly used symbols, most of the time you

39
00:04:34,870 --> 00:04:45,910
don't need codes outside of BMP to write a
text code with English, Spanish or German,

40
00:04:45,910 --> 00:04:51,199
just like any other plane it contains about
65000 symbols, there's a grouping for the

41
00:04:51,199 --> 00:04:57,540
other planes, they're called supple men tear
planes, totals up to about one million other

42
00:04:57,540 --> 00:05:03,790
code points, the vast majority of the Unicode
code points base, these are called astral

43
00:05:03,790 --> 00:05:13,800
planes or sup men tear plane,\h‑‑ supple
men tear planes. Now, astral code points

44
00:05:13,800 --> 00:05:18,240
are easy to recognize because when ever you
need more than four hexadecimal digits to

45
00:05:18,240 --> 00:05:24,870
represent that, it means it's an ascentral
code point. So, now that we have basic understanding

46
00:05:24,870 --> 00:05:35,080
of Unicode, let's see how it applies to JavaScript
springs, starts with back clear X two hexadecimal

47
00:05:35,080 --> 00:05:42,530
digit, grow know a bit about Unicode, you
know they refer oUnicode code points, another

48
00:05:42,530 --> 00:05:48,850
way to represent the string ABC in all caps,
this is the way to represent the stringabc

49
00:05:48,850 --> 00:05:54,380
in lower case, this is useful because you
have weird characters that are maybe hard

50
00:05:54,380 --> 00:05:58,430
to type on your keyboard or avoid encoding
issues, if you save the file with different

51
00:05:58,430 --> 00:06:05,490
encoding you can use escape sequences to represent
these characters, this is useful but we're

52
00:06:05,490 --> 00:06:14,650
still limited to two hexadecimal, which means
can only be used up toFF.

53
00:06:14,650 --> 00:06:20,550
There's a lot of other escapes, call Unicode,
starts with back slash followed by U and four

54
00:06:20,550 --> 00:06:30,650
hexadecimal digit, we can make the same exescapes
but for four\h‑‑ like 2661 which is the

55
00:06:30,650 --> 00:06:37,470
code for white heart symbol, this makes it
possible to escape all these code points all

56
00:06:37,470 --> 00:06:42,731
those in the BMP, actually. But, what about
all the other planes, what about those ascentral

57
00:06:42,731 --> 00:06:49,771
code points we need more than four hexadecimal
digitter for them how do we escape them. What

58
00:06:49,771 --> 00:06:56,449
about the pile ofpoo and other equally important
ascentral symbols of course. We can actually

59
00:06:56,449 --> 00:07:03,400
escape those, it's kind of sort of come plait.
I will, in fact be really easy because you

60
00:07:03,400 --> 00:07:09,860
have these things called Unicode code point
escapes, back clash you followed by braces

61
00:07:09,860 --> 00:07:17,729
you groups six hexadecimal digit, enough to
represent any Unicode. You can simply escape

62
00:07:17,729 --> 00:07:23,380
any Unicode symbol based on it's code point,
it couldn't be easier, if you need something

63
00:07:23,380 --> 00:07:31,120
that works to day in ESF, the unfortunate
solution is to use surrogate pairs, each escape

64
00:07:31,120 --> 00:07:37,110
represents the code point of a surrogate half,
only when that two halves combine together

65
00:07:37,110 --> 00:07:46,250
it form it is symbol. The surrogate code points
they don't look like anything like the original

66
00:07:46,250 --> 00:07:54,550
code point. Now there are formula that you
can use based on a given astral code point.

67
00:07:54,550 --> 00:08:00,900
Here's a JavaScript implementation, you don't
have to learn by heart, you know this exists

68
00:08:00,900 --> 00:08:07,350
if want to deal with string in javaScripts.
Any way the whole concept of using the escape

69
00:08:07,350 --> 00:08:14,650
to represent BMP and two separate escapes
is a bit confusing and has a lot of annoying

70
00:08:14,650 --> 00:08:20,380
consequences throughout the language. For
example say you want to count number of symbol

71
00:08:20,380 --> 00:08:27,289
in a string, my first thought would be to
use the strings length property. In these,

72
00:08:27,289 --> 00:08:34,779
indeed it reflects number of character in
the strick, if you escape the character in

73
00:08:34,779 --> 00:08:40,019
thestring and count the number of escape sequences
we see there's only one escape sequences in

74
00:08:40,019 --> 00:08:47,110
each of these strings, however, let's try
some other similar looking characters. This

75
00:08:47,110 --> 00:08:53,480
is the mathematical bold capital letter A,
and mathematical bold B, they're different

76
00:08:53,480 --> 00:08:58,470
code point, in this case they're ascentral
code points because of that they have a length

77
00:08:58,470 --> 00:09:03,329
of two in JavaScript rather than one even
though there's only a single symbol there.

78
00:09:03,329 --> 00:09:07,800
What JavaScript does it kind of exposes these
surrogate halves as if they were separate

79
00:09:07,800 --> 00:09:13,989
characters, and this is really confusing because
we as human beings we think in terms of Unicode

80
00:09:13,989 --> 00:09:24,619
characters or even Grapimeems, of and there's
a very obvious joke to be made here, instead

81
00:09:24,619 --> 00:09:29,119
I'm going to show you a real world example
where this can actually break things, this

82
00:09:29,119 --> 00:09:35,220
is Twitter while ago, it allows 140 characters
per tweet, their back end doesn't mind what

83
00:09:35,220 --> 00:09:41,610
symbol, ascentral symbols, they all count
as one. Now, at some point they had a bug

84
00:09:41,610 --> 00:09:46,610
in their front end and the JavaScript similarly
read out the string length without accounting

85
00:09:46,610 --> 00:09:54,670
for surrogate pairs, it would decrees by steps
of two with each astral, it wasn't possible

86
00:09:54,670 --> 00:10:04,490
to tweet more than 70 piles of Poo at a time,
it was absolutely terrible. Accountable.J,

87
00:10:04,490 --> 00:10:08,959
counts the number of words, letter, paragraphs
and displies the numbers elsewhere\h‑‑

88
00:10:08,959 --> 00:10:16,730
displays the numbers elsewhere on the page.
I entered a pile of Poo and counted it as

89
00:10:16,730 --> 00:10:21,600
two characters instead of one, these are just
some example, this is an honest mistake the

90
00:10:21,600 --> 00:10:28,459
make because it's surprising, if you're write
ago JavaScript library that involves strings

91
00:10:28,459 --> 00:10:33,559
whatsoever in JavaScript, you have to make
it work with all symbols not just those in

92
00:10:33,559 --> 00:10:38,570
the BMP, sooner or later one of your users
is going to enter one of those Emoji or other

93
00:10:38,570 --> 00:10:47,629
ascentral similar G. way to verify is to test
it with centrals symbols, throw some piles

94
00:10:47,629 --> 00:10:52,040
ofpoo in there and see what happens. This
is what it felt like to enter that pile of

95
00:10:52,040 --> 00:11:00,839
Poo,I just kind of new that something would
likely go wrong, you know. So\h‑‑ yeah.

96
00:11:00,839 --> 00:11:05,759
That's not good. Getting back to our question,
how can it be done, how can we accurately

97
00:11:05,759 --> 00:11:11,579
count number of symbols in the Java string
or number of code points. One thing you could

98
00:11:11,579 --> 00:11:22,110
use is a third party library like Punycoe.
The USC 2 decode method takes a string and

99
00:11:22,110 --> 00:11:28,680
returns an away of code points one for each
point, you then get the length of the resulting

100
00:11:28,680 --> 00:11:32,910
array rather thanstring directly this gives
a more accurate result.

101
00:11:32,910 --> 00:11:38,190
No mat whareyou're doing you is to account
for surrogate halfs in JavaScript when you're

102
00:11:38,190 --> 00:11:44,241
dealing with strings like that, you don't
have a choice, you have to do this. There's

103
00:11:44,241 --> 00:11:50,279
a cementlator solution for this, you can use
array.from pass in the string and that would

104
00:11:50,279 --> 00:11:55,430
return an array of string, one for each symbol
in an array of string, this would use the

105
00:11:55,430 --> 00:12:02,369
ES 6 string iter raptor, and the it aerator
deals with whole code points when ever possible,

106
00:12:02,369 --> 00:12:07,760
so you don't have to deal with the surrogates
yourself anymore. This is not the most efficient

107
00:12:07,760 --> 00:12:13,100
solution to this problem, you could use a
regular expression if you need to count the

108
00:12:13,100 --> 00:12:19,279
regular characters with\h‑‑ but we'll
get to that later. Now, I've made a tool that

109
00:12:19,279 --> 00:12:25,089
takes any string as input and shows the escape
e Wednesday within the string, so it's kind

110
00:12:25,089 --> 00:12:31,720
of like a Hexdom, which is sometimes more
useful. Now, with this tool, it's really easy

111
00:12:31,720 --> 00:12:36,459
to tell which Unicode characters the string
contains exactly, even if the symbols are

112
00:12:36,459 --> 00:12:45,769
non‑printable or just wide space. Now, depending
on your use case,it's not that simple, we

113
00:12:45,769 --> 00:12:49,850
know how to count code points correctly, but
if we're being really pen den tack counting

114
00:12:49,850 --> 00:12:58,239
the symbols in a string is different. Visually
there's no way to tell that it's different.

115
00:12:58,239 --> 00:13:03,850
What's going on, I took two strings and copied
them into the tool I just showed you this

116
00:13:03,850 --> 00:13:08,989
is what I got. The first string using the
string F 1 for the end character with the\h‑‑

117
00:13:08,989 --> 00:13:17,859
N character with theTilde, and the second
one used U 0303 the code for combining Tilde,

118
00:13:17,859 --> 00:13:25,329
they just get applied to previous symbol,
we don't care about that, if want to count

119
00:13:25,329 --> 00:13:33,279
the number of symbol in the string we expect
six, so how can we make that happen. The answer

120
00:13:33,279 --> 00:13:39,139
S. we can use Unicode normallytion, another
new feature in ES 6 it ships to day in home

121
00:13:39,139 --> 00:13:49,040
and Opera, if you want to use it in other
browsers, use a poly fill called Unorm. Before

122
00:13:49,040 --> 00:13:54,439
you account for these ascentral symbols you
called normalize on the stream, pass in the

123
00:13:54,439 --> 00:14:00,339
normallytion form you would like to use, this
effectively gets rid of the look alike symbols.

124
00:14:00,339 --> 00:14:06,499
Now, is this solution perfect, well, it kind
of depends, if you need to support stuff like

125
00:14:06,499 --> 00:14:13,669
that, if which case I count nine different
symbols, this is basically a string with lots

126
00:14:13,669 --> 00:14:18,009
of combining marks that get applied to the
previous character what's why it looks weird.

127
00:14:18,009 --> 00:14:29,569
I count ninety, but our Pendanticl count is
16, if you need to support\h‑‑ it beast

128
00:14:29,569 --> 00:14:36,470
to use a regular expression that removes the
combining marks and then gets lengths just

129
00:14:36,470 --> 00:14:43,399
like question before. We'll get to that later.
Another example is reversing a string? JavaScript,

130
00:14:43,399 --> 00:14:48,029
it seems very simple, if you Google for it
you'll end up a solution that looks like this,

131
00:14:48,029 --> 00:14:55,449
take the string, split it into an array, refers
to array and put it back together into a string.

132
00:14:55,449 --> 00:15:08,559
And indeed this reverses the string Abc correctly,
let's try Manana, here we're reversing again,

133
00:15:08,559 --> 00:15:14,549
reverse function seems to work as expected,
if we try to other Mana where the N and Tilde

134
00:15:14,549 --> 00:15:22,459
are two separate characters we see it gets
applied to letter "A" ande instead of "N,"

135
00:15:22,459 --> 00:15:30,119
also if we try it on an ascentral symbol like
the pile ofpoo we know they consist of two

136
00:15:30,119 --> 00:15:35,819
surrogate halves, the first result is completely
unusable the surrogate halves are not in order

137
00:15:35,819 --> 00:15:42,959
this is data loss. Reversing a string becomes
really strictly if you need full Unicode support

138
00:15:42,959 --> 00:15:49,269
in JavaScript. Lucky for us a brilliant computer
scientist calledMissy Elliott came up with

139
00:15:49,269 --> 00:15:58,670
a brilliant algorithm that accounts for this
issue. It goes, I put my Thng down flip it,

140
00:15:58,670 --> 00:16:05,629
and reverse it. Indeed swiping the position
with the symbol they belong to, as well as

141
00:16:05,629 --> 00:16:10,110
reversing any surrogate pairs before further
processing these strings all the issues are

142
00:16:10,110 --> 00:16:13,989
avoided successfully, thank you Missy.

143
00:16:13,989 --> 00:16:21,019
Here's a JavaScript\h‑‑ S reverse, if
you need trovers a string in JavaScript, feel

144
00:16:21,019 --> 00:16:27,551
free to use it. These were some examples and
this behavior really affects all the string

145
00:16:27,551 --> 00:16:36,379
methods too. It's everywhere. For example,string.fromcharcode
allows you to use a string based on a Unicode,

146
00:16:36,379 --> 00:16:42,699
but it only works for BMP range, if you use
it with an ascentral code, you'll get a different

147
00:16:42,699 --> 00:16:57,110
result (Astral) you have to implement those
former lists that I showed you earlier, you

148
00:16:57,110 --> 00:17:02,699
could use a third‑party library, this is
introducing dependency to create a string

149
00:17:02,699 --> 00:17:08,799
out of a number which really shouldn't happen.
Luckily in ES 6 there's a solution for this

150
00:17:08,799 --> 00:17:21,130
in the form of a new method, Storm.fromCodePoin,
this works properly including from Austria

151
00:17:21,130 --> 00:17:28,470
symbols. Similar\h‑‑ if you use characterat
to reSteve the first symbol in the string

152
00:17:28,470 --> 00:17:32,110
containing the pile of Poo character you'll
only get the first surrogate half instead

153
00:17:32,110 --> 00:17:37,889
of the whole symbol
is no solution for this inES 6 there, is a

154
00:17:37,889 --> 00:17:44,330
proposal to add string.prototype.add which
would do the same thing as character add it

155
00:17:44,330 --> 00:17:52,930
would deal with full symbols instead of surrogate
halves when ever possible. If you use character

156
00:17:52,930 --> 00:17:56,899
code at to restreet the first code point or
the first symbol in the string you'll get

157
00:17:56,899 --> 00:18:02,820
the first symbol of the surrogate half rather
than whole pile of Poo character, now, in

158
00:18:02,820 --> 00:18:14,850
ES 6 there's a new method called string.pointAT,
it deal was surrogate halfs when ever possible.

159
00:18:14,850 --> 00:18:19,370
The links at the bottom they point to poly
fills you start using today it works in every

160
00:18:19,370 --> 00:18:25,429
browser that way. Now another example is you
want to loop over every symbol in a string

161
00:18:25,429 --> 00:18:31,549
and do something with each symbol you'd have
to write a lot of boilerplate code just to

162
00:18:31,549 --> 00:18:38,500
account for surrogate pairs to consider them
as a single character. Now, in ES 6 this will

163
00:18:38,500 --> 00:18:45,019
be much, much easier because you can just
use for of this will use the new string iter

164
00:18:45,019 --> 00:18:50,220
raptor, and this will deal with whole symbols
instead of surrogate pairs automatically.

165
00:18:50,220 --> 00:18:55,110
Now, this behavior affects pretty much all
string methods so be really careful when you're

166
00:18:55,110 --> 00:19:02,090
using them, really unfortunate, as 2PAC would
say, that's just the way it is, some things

167
00:19:02,090 --> 00:19:05,880
will never change.

168
00:19:05,880 --> 00:19:12,440
Another similar problem lies with regular
problems, so the dot operator in regular expressions

169
00:19:12,440 --> 00:19:17,889
only matches a single character, because because
JavaScript exposes surrogate halfs as separate

170
00:19:17,889 --> 00:19:23,259
characters it won't ever match an Astral symbol,
I would expect an answer of true here but

171
00:19:23,259 --> 00:19:31,370
it's actually false. What regular expression
can we use to much any Unicode symbol, any

172
00:19:31,370 --> 00:19:37,210
ideas? Well, we can't use the.operator, as
weave demonstrated that wouldn't match line

173
00:19:37,210 --> 00:19:43,250
Riggs, we can fix that by doing something
like, this match any character but wouldn't

174
00:19:43,250 --> 00:19:46,490
match Stral symbol\h‑‑ Astral symbols,
because as far as JavaScript concerned that

175
00:19:46,490 --> 00:20:00,269
is two characters, what is the regular expression
to match any Unicode point, like, this apparently.

176
00:20:00,269 --> 00:20:05,480
Yeah ... so the first part of this regular
expression matches any BMP symbol that does

177
00:20:05,480 --> 00:20:10,490
not store a surrogate pair the second half
matches a surrogate pair, in other words,

178
00:20:10,490 --> 00:20:15,940
an astral symbol, this is not the type of
regular expression you would enjoy writing

179
00:20:15,940 --> 00:20:21,929
by hand, let alone maintaining it, I use JavaScript
library to generate these for me, it's called

180
00:20:21,929 --> 00:20:29,399
regenerate. Here I create a new instance,
I add the range of all Unicode, then I call

181
00:20:29,399 --> 00:20:36,250
two string that produces a string that can
be used a expression literal I's supposed

182
00:20:36,250 --> 00:20:41,980
to be used as part of a build script. Here
east another example, a bit more advance.

183
00:20:41,980 --> 00:20:47,600
Start with all Unicode points, remove a range
of symbols based on their string values, then

184
00:20:47,600 --> 00:20:54,950
remove a single symbol, then we call two string
on that to turn that set into a regular expression.

185
00:20:54,950 --> 00:20:59,970
And apparently that looks like this. So, once
again, this is not a regular expression, you

186
00:20:59,970 --> 00:21:05,321
would enjoy writing by hand or that you want
to maintain, imagine having to adjust one

187
00:21:05,321 --> 00:21:08,980
code point to that set and rewriting that
whole thing, it would probably take a very

188
00:21:08,980 --> 00:21:14,700
long time, it's much easier to change the
five lines of code, write above the regular

189
00:21:14,700 --> 00:21:19,370
expression, store that in a build script and
run the build scrip again after you modify

190
00:21:19,370 --> 00:21:25,030
et. Another example, say you need another
expression that matches all Greek symbols

191
00:21:25,030 --> 00:21:31,110
in the Unicode standard
are BMP models that contain for each category,

192
00:21:31,110 --> 00:21:37,250
script, block or property. If you combine
these with regenerate it's easy to build complex

193
00:21:37,250 --> 00:21:39,980
Unicode aware Unicode expression.

194
00:21:39,980 --> 00:21:47,200
So I'm just requiring all the Greek symbol
in Unicode 6.3.0 as an array than padsing

195
00:21:47,200 --> 00:21:54,000
that to regenerate and turning that into a
regular expression. You may have noticed I'm

196
00:21:54,000 --> 00:22:00,410
using the data for Unicode 36‑point\h.0,
justify weeks ago Unicode 7 was released so

197
00:22:00,410 --> 00:22:12,049
this is out of date. I just need to change
a single line of code. Changing that regular

198
00:22:12,049 --> 00:22:16,251
expression, manually would have taken a very
long time, now all I have to do is change

199
00:22:16,251 --> 00:22:21,509
the Unicode version number, run the script
again, just like that an up to date regular

200
00:22:21,509 --> 00:22:28,720
expression comes out. Getting back to the
dot operator, well ES 6 introduces a new flag

201
00:22:28,720 --> 00:22:36,490
for regular expression, the U flag, it stands
for Unicode, it matches\h‑‑ so it kind

202
00:22:36,490 --> 00:22:41,260
of makes regular expressions work the way
you think they would work. Here's another

203
00:22:41,260 --> 00:22:46,890
example, in character classes, it's possible
to use ranges, as I'm sure you know, probably

204
00:22:46,890 --> 00:22:59,440
expect A,\h‑‑ C to match A\h‑‑ C and
C, so similarly, you might expect this regular

205
00:22:59,440 --> 00:23:04,370
expression to match the pile of Poo, the flexed
buy accepts and the busy symbol, right, that

206
00:23:04,370 --> 00:23:09,980
just makes sense, because that's the order
of the code point, it doesn't work that way.

207
00:23:09,980 --> 00:23:15,019
If you run this code it will throw an error
on the very first line it will say the regular

208
00:23:15,019 --> 00:23:19,940
expression is invalid, the range is out of
order. So what's going on there? Well, as

209
00:23:19,940 --> 00:23:24,840
far as JavaScript is concerned, this is what
that regular expression looks like, so, it's

210
00:23:24,840 --> 00:23:29,220
not trying to create a range between the two
Emoji, it's trying to create range between

211
00:23:29,220 --> 00:23:33,379
the one surrogate and the other surrogate
for the other character, which is not the

212
00:23:33,379 --> 00:23:40,850
right range, and because the range is not
in the right order, it throws an error. This

213
00:23:40,850 --> 00:23:46,950
is really easy to fix, you can add the U flag
and that magically makes it work as you would

214
00:23:46,950 --> 00:23:53,669
expect. If you need something that works today
in ES 5, you're stuck with using a tool like

215
00:23:53,669 --> 00:23:59,040
regenerate to build the regular expressions
for you. But nowadays there's a better solution,

216
00:23:59,040 --> 00:24:06,720
I just released this,it's called Regexpu,
Compiler for regular expressions that use

217
00:24:06,720 --> 00:24:13,289
the U flag, it will look through your code
for regular expressions and rewrite them so

218
00:24:13,289 --> 00:24:20,789
they're equivalent so they still work in Es
5. Hire's a demo of that.

219
00:24:20,789 --> 00:24:25,549
This is live translation in the browser, you
can use it in node I've submitted a patch

220
00:24:25,549 --> 00:24:34,070
through intersure, you can start using this
today. Write regular expressions theE is 6

221
00:24:34,070 --> 00:24:41,370
way and compiling down to code that works
to day without worrying about it. So in summary,

222
00:24:41,370 --> 00:24:45,200
I think it's fair to say that JavaScript has
a Unicode problem, rather than complaining

223
00:24:45,200 --> 00:24:52,629
about it like JayZ did, we should probably
be doing this instead. We should just deal

224
00:24:52,629 --> 00:24:58,179
with it and work around these issues because
it's honestly not that hard, and, you know,all

225
00:24:58,179 --> 00:25:02,779
you have to do is add some pile of Poo to
your unit test, there's a lot of talented

226
00:25:02,779 --> 00:25:11,309
JavaScript programmers here\h‑‑ developers
here, if we would add a Poo request for any

227
00:25:11,309 --> 00:25:17,299
library that you're using or you've written,
I think we can collectively discover lots

228
00:25:17,299 --> 00:25:23,529
of bugs and help get them fixed. It's not
that developers don't want the fix these issues,

229
00:25:23,529 --> 00:25:28,659
I think problem is they don't know about it
because it's such surprising behavior. Thank

