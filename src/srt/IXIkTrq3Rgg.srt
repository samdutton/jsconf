1
00:00:21,470 --> 00:00:24,220

so I am going to talk about

2
00:00:24,220 --> 00:00:26,870
responsibilities I have a lot of Mozilla

3
00:00:26,870 --> 00:00:30,920
these days I'm CTO I'm also senior vice

4
00:00:30,920 --> 00:00:34,280
president and engineering and I'm

5
00:00:34,280 --> 00:00:35,750
running around the world with things

6
00:00:35,750 --> 00:00:38,390
like Firefox OS launching but javascript

7
00:00:38,390 --> 00:00:40,190
is still a big responsibility for me

8
00:00:40,190 --> 00:00:42,050
after all these years it's like an 18

9
00:00:42,050 --> 00:00:45,050
year old late bloomer still living at

10
00:00:45,050 --> 00:00:49,010
home over the garage still not cleaning

11
00:00:49,010 --> 00:00:53,420
up after itself so let's let's recap

12
00:00:53,420 --> 00:00:57,100
quickly there's some things to do with

13
00:00:57,100 --> 00:01:00,350
responsibility and I'll stand in line

14
00:01:00,350 --> 00:01:03,080
first for all the blame Crockford tries

15
00:01:03,080 --> 00:01:04,250
to take credit I think he can take

16
00:01:04,250 --> 00:01:06,920
credit for his book but he was years

17
00:01:06,920 --> 00:01:10,670
late I think I met him in 2002 and he

18
00:01:10,670 --> 00:01:12,380
tried to tell me to fix things and at

19
00:01:12,380 --> 00:01:14,360
that point we had no market share at

20
00:01:14,360 --> 00:01:15,800
Netscape we've been crushed by Microsoft

21
00:01:15,800 --> 00:01:17,030
so I said how am I going to fix things

22
00:01:17,030 --> 00:01:19,340
took a while to restart browser

23
00:01:19,340 --> 00:01:21,680
competition and restart standardization

24
00:01:21,680 --> 00:01:24,860
we finally did it who has the power now

25
00:01:24,860 --> 00:01:27,440
it's you might say the standards body

26
00:01:27,440 --> 00:01:29,290
but not really because that's made up of

27
00:01:29,290 --> 00:01:33,380
browser vendors and by the way they

28
00:01:33,380 --> 00:01:36,140
compete for developers I would say the

29
00:01:36,140 --> 00:01:37,190
developers have the power especially

30
00:01:37,190 --> 00:01:39,650
with pretty balanced browser market

31
00:01:39,650 --> 00:01:42,260
structure right now it's really up to

32
00:01:42,260 --> 00:01:45,920
the developers to insist on better

33
00:01:45,920 --> 00:01:48,050
browsers over time which I think people

34
00:01:48,050 --> 00:01:50,270
are working on good faith but I'm still

35
00:01:50,270 --> 00:01:52,160
responsible for JavaScript I'm sort of

36
00:01:52,160 --> 00:01:56,300
the Rainmaker and deal maker and group

37
00:01:56,300 --> 00:01:59,270
hug arranger of the tc39 committee it's

38
00:01:59,270 --> 00:02:01,670
it's kind of a like a family that's been

39
00:02:01,670 --> 00:02:03,230
through a lot of crises somebody

40
00:02:03,230 --> 00:02:04,670
actually said that spontaneously I said

41
00:02:04,670 --> 00:02:07,730
that's so true and there are there more

42
00:02:07,730 --> 00:02:08,959
things to do so let's talk about what to

43
00:02:08,959 --> 00:02:11,480
do one of the things that's happening is

44
00:02:11,480 --> 00:02:17,610
and this is thanks to Raph Weinstein and

45
00:02:17,620 --> 00:02:19,190
other Googlers

46
00:02:19,190 --> 00:02:21,290
who are excited about the rapid release

47
00:02:21,290 --> 00:02:23,810
process of Chrome which Firefox has

48
00:02:23,810 --> 00:02:25,459
adopted of course for several years now

49
00:02:25,459 --> 00:02:27,500
we can't quite do it with standards they

50
00:02:27,500 --> 00:02:29,840
take too long to to check and implement

51
00:02:29,840 --> 00:02:31,700
and look for cross-cutting but

52
00:02:31,700 --> 00:02:33,950
but we can go faster and we think we can

53
00:02:33,950 --> 00:02:38,000
start to paralyse es7 and get maybe an

54
00:02:38,000 --> 00:02:40,610
annual edition of the standardout we'll

55
00:02:40,610 --> 00:02:42,140
see how it goes we're gonna try so I'm

56
00:02:42,140 --> 00:02:43,550
gonna go over s6 quickly you've probably

57
00:02:43,550 --> 00:02:48,080
seen this so don't let me carry with

58
00:02:48,080 --> 00:02:50,630
class syntax but it works for existing

59
00:02:50,630 --> 00:02:52,760
functions including built-in ones like

60
00:02:52,760 --> 00:02:55,010
note list or array you can mix and match

61
00:02:55,010 --> 00:02:56,600
with function constructors there's only

62
00:02:56,600 --> 00:02:58,459
a little bit of extra kernel semantics

63
00:02:58,459 --> 00:03:00,050
it's mostly sugar for functions and

64
00:03:00,050 --> 00:03:03,080
prototypes we have Const and you also

65
00:03:03,080 --> 00:03:05,390
see arrow functions those that bind this

66
00:03:05,390 --> 00:03:07,310
to the outer this there's something that

67
00:03:07,310 --> 00:03:09,170
squares its argument here's another

68
00:03:09,170 --> 00:03:11,269
arrow function this one also shows the

69
00:03:11,269 --> 00:03:13,970
dot dot dot the ellipsis before the T

70
00:03:13,970 --> 00:03:15,530
parameter that means that's a rest

71
00:03:15,530 --> 00:03:18,590
parameter Common Lisp it captures all

72
00:03:18,590 --> 00:03:20,569
the trailing arguments after the first

73
00:03:20,569 --> 00:03:22,640
one which is bound to H and then it

74
00:03:22,640 --> 00:03:26,180
returns an array that's rotated them we

75
00:03:26,180 --> 00:03:29,000
have let better var block structure we

76
00:03:29,000 --> 00:03:30,950
have destructuring I tried to put too

77
00:03:30,950 --> 00:03:32,150
many things together here because I

78
00:03:32,150 --> 00:03:33,350
don't really want to spend more than the

79
00:03:33,350 --> 00:03:35,180
slide on this stuff you boys need it the

80
00:03:35,180 --> 00:03:37,310
structure he's really cool and if I were

81
00:03:37,310 --> 00:03:38,359
really using the Dom it would probably

82
00:03:38,359 --> 00:03:40,010
be something awful like get client

83
00:03:40,010 --> 00:03:41,810
bounding wreck but it never room for it

84
00:03:41,810 --> 00:03:44,510
so there it is and with that object

85
00:03:44,510 --> 00:03:46,220
shorthand you can pluck out the top and

86
00:03:46,220 --> 00:03:48,230
left properties of the returned object a

87
00:03:48,230 --> 00:03:50,329
smart jet could even boil away the

88
00:03:50,329 --> 00:03:52,150
object and just get the top and left

89
00:03:52,150 --> 00:03:53,890
coordinates

90
00:03:53,890 --> 00:03:57,049
here's a default parameter default

91
00:03:57,049 --> 00:03:59,390
argument and this is very handy you can

92
00:03:59,390 --> 00:04:02,570
even refer to prior arguments to assign

93
00:04:02,570 --> 00:04:05,090
later ones you can pass undefined as a

94
00:04:05,090 --> 00:04:07,100
sentinel value to trigger defaulting

95
00:04:07,100 --> 00:04:08,420
which is important when you're

96
00:04:08,420 --> 00:04:10,700
delegating or composing functions you

97
00:04:10,700 --> 00:04:11,900
don't want to have to know all the

98
00:04:11,900 --> 00:04:14,269
combinations of defaults so you can

99
00:04:14,269 --> 00:04:15,380
trigger them by passing undefined

100
00:04:15,380 --> 00:04:19,120
modules are going in in a very

101
00:04:19,120 --> 00:04:21,890
simplified way even from what's been

102
00:04:21,890 --> 00:04:23,210
discussed in the past and it's going to

103
00:04:23,210 --> 00:04:25,640
be very much like I would say like

104
00:04:25,640 --> 00:04:26,270
nodejs

105
00:04:26,270 --> 00:04:29,570
but with the first class syntax so we

106
00:04:29,570 --> 00:04:32,840
can preload things and here's an example

107
00:04:32,840 --> 00:04:34,460
where we're getting the keys and entries

108
00:04:34,460 --> 00:04:35,720
functions from the built in iteration

109
00:04:35,720 --> 00:04:38,000
module you can then use those for things

110
00:04:38,000 --> 00:04:39,650
like the four of luth we couldn't make

111
00:04:39,650 --> 00:04:40,970
four in do this it wasn't backwards

112
00:04:40,970 --> 00:04:43,430
compatible so we have four of kind of

113
00:04:43,430 --> 00:04:44,520
like CoffeeScript

114
00:04:44,520 --> 00:04:46,680
different and there's a key in value

115
00:04:46,680 --> 00:04:48,870
iterator called entries we also have

116
00:04:48,870 --> 00:04:51,569
generators people on the committee

117
00:04:51,569 --> 00:04:53,159
wanted the star in front after the

118
00:04:53,159 --> 00:04:54,539
function to tell you this is a generator

119
00:04:54,539 --> 00:04:56,819
it also allows us to contextually

120
00:04:56,819 --> 00:04:59,099
reserve yield which is not a reserved

121
00:04:59,099 --> 00:05:03,509
word in standards up until es5 strict so

122
00:05:03,509 --> 00:05:06,900
code uses yield a freely for function

123
00:05:06,900 --> 00:05:08,190
names and parameter names so it's very

124
00:05:08,190 --> 00:05:10,590
hard to reserve unconditionally but the

125
00:05:10,590 --> 00:05:12,990
star lets us do it inside the body and

126
00:05:12,990 --> 00:05:14,550
that's the easiest way to implement

127
00:05:14,550 --> 00:05:16,050
iterator by the way there's a lot of

128
00:05:16,050 --> 00:05:19,349
stuff to show here if you guys have seen

129
00:05:19,349 --> 00:05:20,759
this you can go to tank access

130
00:05:20,759 --> 00:05:22,919
compatibility table to see he has a lot

131
00:05:22,919 --> 00:05:25,789
of red but the green is coming in on

132
00:05:25,789 --> 00:05:29,190
spider monkey on v8 some JavaScript core

133
00:05:29,190 --> 00:05:29,819
work lately

134
00:05:29,819 --> 00:05:32,370
Andy Wingo is mentioned by Andrew Hoff

135
00:05:32,370 --> 00:05:35,190
rocky has been doing some great work es6

136
00:05:35,190 --> 00:05:37,199
is happening so i'm gonna talk about new

137
00:05:37,199 --> 00:05:38,940
stuff that's es 7 or if we do this

138
00:05:38,940 --> 00:05:41,180
annual maybe it's es 8 the idea with the

139
00:05:41,180 --> 00:05:43,590
rap edition release for standards is

140
00:05:43,590 --> 00:05:47,550
that we will not necessarily push things

141
00:05:47,550 --> 00:05:49,080
out until they're ready so there's

142
00:05:49,080 --> 00:05:51,780
always a train leaving every year kind

143
00:05:51,780 --> 00:05:53,039
of slow train schedule but it gets

144
00:05:53,039 --> 00:05:54,990
things out when they're ready instead of

145
00:05:54,990 --> 00:05:56,940
trying to hold things up or rush them

146
00:05:56,940 --> 00:06:00,569
through there's something called object

147
00:06:00,569 --> 00:06:01,740
that observed some people are excited

148
00:06:01,740 --> 00:06:03,900
about and it's it's coming along it

149
00:06:03,900 --> 00:06:05,900
needs more work because it ties into

150
00:06:05,900 --> 00:06:09,090
details of the event loop which are

151
00:06:09,090 --> 00:06:11,580
still being hammered out between equity

152
00:06:11,580 --> 00:06:14,520
c 39 and various w3c groups or what WG

153
00:06:14,520 --> 00:06:19,080
folks so I'm going to skip it but I'm

154
00:06:19,080 --> 00:06:20,430
going to talk about low-level JavaScript

155
00:06:20,430 --> 00:06:21,750
because this is important for a couple

156
00:06:21,750 --> 00:06:23,669
of reasons one is the compiler is like

157
00:06:23,669 --> 00:06:25,169
in script and mandrill and really a lot

158
00:06:25,169 --> 00:06:27,779
of other language front ends it's my

159
00:06:27,779 --> 00:06:29,370
contention javascript is evolving to

160
00:06:29,370 --> 00:06:32,039
become a multi language VM and probably

161
00:06:32,039 --> 00:06:33,210
the most successful one because it's the

162
00:06:33,210 --> 00:06:36,900
most widely deployed and it has despite

163
00:06:36,900 --> 00:06:38,969
of having a place of pride for

164
00:06:38,969 --> 00:06:40,440
JavaScript the source language it has a

165
00:06:40,440 --> 00:06:43,440
lot of low-level parts that can serve

166
00:06:43,440 --> 00:06:45,150
other language as well and where it

167
00:06:45,150 --> 00:06:46,949
doesn't we can add them more easily than

168
00:06:46,949 --> 00:06:48,840
you could ever add a new VM in all the

169
00:06:48,840 --> 00:06:52,110
browsers and standardize it so we're

170
00:06:52,110 --> 00:06:53,669
actually using them scripting and this

171
00:06:53,669 --> 00:06:56,070
Asmodeus subset of JavaScript too

172
00:06:56,070 --> 00:06:58,590
show Unreal Engine off and I'll talk

173
00:06:58,590 --> 00:06:59,430
about that

174
00:06:59,430 --> 00:07:03,750
I will Frank's and BOTS but they're also

175
00:07:03,750 --> 00:07:05,670
people hand coding low-level JavaScript

176
00:07:05,670 --> 00:07:08,190
whether they are actually in the azzam

177
00:07:08,190 --> 00:07:09,690
subset or not into doing awesome things

178
00:07:09,690 --> 00:07:11,670
like downloadable video codecs that

179
00:07:11,670 --> 00:07:14,040
compete with the ones in Hardware almost

180
00:07:14,040 --> 00:07:15,990
which is a really cool idea because they

181
00:07:15,990 --> 00:07:17,700
get us away from having to burn things

182
00:07:17,700 --> 00:07:20,130
into hardware that are patented and it

183
00:07:20,130 --> 00:07:22,800
become obsolete sooner than the hardware

184
00:07:22,800 --> 00:07:26,760
dies one of the low-level affordances

185
00:07:26,760 --> 00:07:29,580
that JavaScript really needs is what

186
00:07:29,580 --> 00:07:30,960
we're calling value objects you could

187
00:07:30,960 --> 00:07:33,090
think of these as different numeric

188
00:07:33,090 --> 00:07:35,190
types JavaScript because I was in a rush

189
00:07:35,190 --> 00:07:38,130
and Java had double I'm a double the

190
00:07:38,130 --> 00:07:39,870
number type double precision I Triple E

191
00:07:39,870 --> 00:07:43,490
754 53 bits of mantissa 64 bits total

192
00:07:43,490 --> 00:07:45,870
kind of ugly you know everyone knows

193
00:07:45,870 --> 00:07:47,550
zero point one plus zero point two

194
00:07:47,550 --> 00:07:49,380
equals zero point three zero zero zero

195
00:07:49,380 --> 00:07:52,820
zero zero zero zero zero zero four and

196
00:07:52,820 --> 00:07:55,350
that's blamed on me or blamed on

197
00:07:55,350 --> 00:07:56,550
JavaScript it's actually in all the

198
00:07:56,550 --> 00:07:59,220
languages C Java except those languages

199
00:07:59,220 --> 00:08:01,980
like Python dart and they're taking it

200
00:08:01,980 --> 00:08:03,710
out of dark they have big numbers are

201
00:08:03,710 --> 00:08:06,600
arbitrary precision integers value

202
00:08:06,600 --> 00:08:08,670
objects we want to be an extensible

203
00:08:08,670 --> 00:08:11,820
system for adding all sorts of primitive

204
00:08:11,820 --> 00:08:12,960
types there shouldn't just be these

205
00:08:12,960 --> 00:08:14,940
hard-coded number bullying and string

206
00:08:14,940 --> 00:08:17,730
primitives and no undefined in

207
00:08:17,730 --> 00:08:19,590
JavaScript we want to allow other things

208
00:08:19,590 --> 00:08:21,630
like symbol which is coming in es6 which

209
00:08:21,630 --> 00:08:24,900
is a way of making an identifier for a

210
00:08:24,900 --> 00:08:26,490
property in an object that cannot be

211
00:08:26,490 --> 00:08:28,620
spelled by any string cannot collide

212
00:08:28,620 --> 00:08:32,099
with any string it is like an intern

213
00:08:32,099 --> 00:08:35,580
symbol and Lisp in 64 and you and 64 you

214
00:08:35,580 --> 00:08:37,290
need them no js' people need them for

215
00:08:37,290 --> 00:08:40,229
low-level io interfaces where you know

216
00:08:40,229 --> 00:08:42,419
big memory machines have more than 32

217
00:08:42,419 --> 00:08:44,730
bits of dress space I have a prototype

218
00:08:44,730 --> 00:08:46,260
patch it's a little bit rough that I

219
00:08:46,260 --> 00:08:48,240
need to dust it off for SpiderMonkey

220
00:08:48,240 --> 00:08:50,850
implementing these and I'm going to

221
00:08:50,850 --> 00:08:52,950
carry that through and I think these are

222
00:08:52,950 --> 00:08:54,770
important to get into the standard

223
00:08:54,770 --> 00:08:58,770
there's also sim d-types the sort of

224
00:08:58,770 --> 00:09:01,280
short vectors that you see in in the

225
00:09:01,280 --> 00:09:04,140
various vector units in CPUs or in

226
00:09:04,140 --> 00:09:07,410
chipsets these days in 32 times four and

227
00:09:07,410 --> 00:09:09,300
thirty times eight

228
00:09:09,300 --> 00:09:10,740
coming we're gonna start with four and

229
00:09:10,740 --> 00:09:13,860
float32 times 4 we'll get to eight

230
00:09:13,860 --> 00:09:16,140
float32 itself is interesting it's very

231
00:09:16,140 --> 00:09:20,190
important for graphics and WebGL and GPU

232
00:09:20,190 --> 00:09:22,920
it turns out you can use float32 arrays

233
00:09:22,920 --> 00:09:25,860
typed arrays today and depending on the

234
00:09:25,860 --> 00:09:28,230
operations because certain operations

235
00:09:28,230 --> 00:09:31,920
preserve equivalence between 32-bit and

236
00:09:31,920 --> 00:09:34,529
64-bit floating-point in I Triple E you

237
00:09:34,529 --> 00:09:37,620
can project values back into 64 bits and

238
00:09:37,620 --> 00:09:40,230
not have anything go wrong jets can make

239
00:09:40,230 --> 00:09:42,000
some optimizations already but we would

240
00:09:42,000 --> 00:09:44,250
like to have flow 32 in the language as

241
00:09:44,250 --> 00:09:46,800
a bonafide type and that's another use

242
00:09:46,800 --> 00:09:48,779
case for value objects then there's big

243
00:09:48,779 --> 00:09:50,100
now I mentioned arbitrary precision

244
00:09:50,100 --> 00:09:51,180
integers

245
00:09:51,180 --> 00:09:53,370
there's decimal which IBM loves they

246
00:09:53,370 --> 00:09:56,010
almost want decimal it's actually an I

247
00:09:56,010 --> 00:09:59,160
Triple E standard 754 are rational you

248
00:09:59,160 --> 00:10:00,660
should talk to schemers and they say oh

249
00:10:00,660 --> 00:10:02,310
I don't have a lot of use for rational

250
00:10:02,310 --> 00:10:04,050
it's kind of attractive for some things

251
00:10:04,050 --> 00:10:06,000
but it's rarely used complex numbers are

252
00:10:06,000 --> 00:10:07,680
important for scientific computing so

253
00:10:07,680 --> 00:10:09,839
when you talk about value objects you

254
00:10:09,839 --> 00:10:11,790
have to think about operators because it

255
00:10:11,790 --> 00:10:13,770
would be terribly painful and I'll show

256
00:10:13,770 --> 00:10:16,079
why a little bit not have operators and

257
00:10:16,079 --> 00:10:17,880
the operators that can be overloaded in

258
00:10:17,880 --> 00:10:20,190
the proposal I'm working on are those

259
00:10:20,190 --> 00:10:22,620
lovely bitwise operators thank goodness

260
00:10:22,620 --> 00:10:24,120
they're there for asthma Jess I added

261
00:10:24,120 --> 00:10:25,860
those because they were in C and Java

262
00:10:25,860 --> 00:10:28,560
really cuz they're and C double equals

263
00:10:28,560 --> 00:10:30,600
has to be overloaded bullets not an

264
00:10:30,600 --> 00:10:32,130
equivalence relation it does some funky

265
00:10:32,130 --> 00:10:33,600
stuff you want to make it do the right

266
00:10:33,600 --> 00:10:35,910
thing for certain certain types if you

267
00:10:35,910 --> 00:10:37,110
have a bunch of number types you want

268
00:10:37,110 --> 00:10:38,670
their zeros probably be double equal I

269
00:10:38,670 --> 00:10:40,649
would say less than and less than or

270
00:10:40,649 --> 00:10:42,750
equal to the shift operator is including

271
00:10:42,750 --> 00:10:44,310
triple right shift the unsigned right

272
00:10:44,310 --> 00:10:45,149
shift in Java

273
00:10:45,149 --> 00:10:49,110
rest of its from C the unary operators

274
00:10:49,110 --> 00:10:50,399
are down at the bottom the plus and

275
00:10:50,399 --> 00:10:52,050
minus the binary captives and the

276
00:10:52,050 --> 00:10:53,720
multiplication division operators

277
00:10:53,720 --> 00:10:56,459
boolean test and complement these are

278
00:10:56,459 --> 00:10:57,899
actually important than add some Jas and

279
00:10:57,899 --> 00:11:00,779
I'll talk about why we're not allowing

280
00:11:00,779 --> 00:11:02,610
other operators to be overloaded not

281
00:11:02,610 --> 00:11:07,079
equals and bang kind of important for

282
00:11:07,079 --> 00:11:08,579
certain identities we don't want any

283
00:11:08,579 --> 00:11:10,350
value object to be able to produce

284
00:11:10,350 --> 00:11:12,649
nonsense contradictions

285
00:11:12,649 --> 00:11:16,350
then there's the DeMorgan laws

286
00:11:16,350 --> 00:11:17,790
point though I'm getting too nerdcore

287
00:11:17,790 --> 00:11:19,350
tell me about I figure you want you want

288
00:11:19,350 --> 00:11:22,740
the hardcore stuff right and just simple

289
00:11:22,740 --> 00:11:24,330
stuff like this you want not equals to

290
00:11:24,330 --> 00:11:26,100
be the same as not it double equals

291
00:11:26,100 --> 00:11:30,390
so can't overload those they're also

292
00:11:30,390 --> 00:11:32,790
obviously problems with relational is if

293
00:11:32,790 --> 00:11:34,890
you allow all the combinations so only

294
00:11:34,890 --> 00:11:36,060
greater than and greater than or equal

295
00:11:36,060 --> 00:11:40,170
to and you handle the West then sorry

296
00:11:40,170 --> 00:11:41,580
only less than less or equal to you

297
00:11:41,580 --> 00:11:43,080
handle the other ones by transposing the

298
00:11:43,080 --> 00:11:46,410
terms that's easy but why do we need

299
00:11:46,410 --> 00:11:48,150
less than or equal to as well as less

300
00:11:48,150 --> 00:11:50,610
than well it turns out nan is neither

301
00:11:50,610 --> 00:11:52,920
greater than nor less than itself

302
00:11:52,920 --> 00:11:55,380
it's unordered again I get blamed for

303
00:11:55,380 --> 00:11:58,140
this it's I Triple E 754 it's an ancient

304
00:11:58,140 --> 00:12:00,300
standard that made its way into hardware

305
00:12:00,300 --> 00:12:02,850
in the seventies I think and we're stuck

306
00:12:02,850 --> 00:12:06,030
with it so and by the way nan stands for

307
00:12:06,030 --> 00:12:08,400
not a number if you say type of number

308
00:12:08,400 --> 00:12:14,460
nan you get number so go figure strict

309
00:12:14,460 --> 00:12:17,430
equality operators are the ones the

310
00:12:17,430 --> 00:12:18,600
Crocker tells you you should only ever

311
00:12:18,600 --> 00:12:20,760
use I personally don't subscribe to that

312
00:12:20,760 --> 00:12:23,060
I could talk about why a little bit and

313
00:12:23,060 --> 00:12:27,120
those do need to be preserved strictly

314
00:12:27,120 --> 00:12:29,670
so what they're doing with value objects

315
00:12:29,670 --> 00:12:31,260
is just looking at sort of looking at

316
00:12:31,260 --> 00:12:32,670
the bits at least four simple integer

317
00:12:32,670 --> 00:12:33,930
types when you get again with

318
00:12:33,930 --> 00:12:34,890
floating-point types you have to worry

319
00:12:34,890 --> 00:12:37,410
about nan and then it's irreflexive it's

320
00:12:37,410 --> 00:12:39,900
not equal to itself that's really crazy

321
00:12:39,900 --> 00:12:42,090
and you can optimize these strict

322
00:12:42,090 --> 00:12:43,590
operators but they are not overloaded

323
00:12:43,590 --> 00:12:47,460
they are kind of primitive those are you

324
00:12:47,460 --> 00:12:49,470
know Python might wonder how to

325
00:12:49,470 --> 00:12:50,940
implement this why not use methods when

326
00:12:50,940 --> 00:12:53,070
you have binary operators a plus B you

327
00:12:53,070 --> 00:12:54,780
can sometimes implement them with a pair

328
00:12:54,780 --> 00:12:56,220
of methods and you chain a certain way

329
00:12:56,220 --> 00:12:58,500
it has some drawbacks one of them is if

330
00:12:58,500 --> 00:13:00,150
you're adding a value object and a

331
00:13:00,150 --> 00:13:01,830
number if the value objects on the left

332
00:13:01,830 --> 00:13:03,540
then you call the add method but if it's

333
00:13:03,540 --> 00:13:04,680
on the right you have to call the

334
00:13:04,680 --> 00:13:06,150
reverse add method or something

335
00:13:06,150 --> 00:13:08,220
equivalent and however you do it it ends

336
00:13:08,220 --> 00:13:11,460
up making more code and it gets ugly it

337
00:13:11,460 --> 00:13:14,430
also requires all your methods in this

338
00:13:14,430 --> 00:13:16,140
double dispatch system for the binary

339
00:13:16,140 --> 00:13:18,330
operators to know about all the possible

340
00:13:18,330 --> 00:13:20,310
type combinations which is just not

341
00:13:20,310 --> 00:13:22,470
modular you end up writing case analysis

342
00:13:22,470 --> 00:13:23,730
inside the methods as you go and you

343
00:13:23,730 --> 00:13:27,150
cannot extend somebody else's method you

344
00:13:27,150 --> 00:13:29,570
have to wrap and delegate you have to

345
00:13:29,570 --> 00:13:32,120
do your own compositional rapping which

346
00:13:32,120 --> 00:13:35,000
is kind of pain say you have complex and

347
00:13:35,000 --> 00:13:36,500
rational types and you want to make a

348
00:13:36,500 --> 00:13:39,410
complex number whose real and imaginary

349
00:13:39,410 --> 00:13:40,880
parts instead of being doubles or

350
00:13:40,880 --> 00:13:42,650
irrational you should make a rat Plex

351
00:13:42,650 --> 00:13:44,390
but you can't if you use double dispatch

352
00:13:44,390 --> 00:13:46,580
without wrapping extra allocations so

353
00:13:46,580 --> 00:13:49,160
the slide you can long time ago from

354
00:13:49,160 --> 00:13:51,320
somebody used to work on v8 I think he

355
00:13:51,320 --> 00:13:53,900
stole Google never met him smart guy

356
00:13:53,900 --> 00:13:55,400
interacted with him ah yes discussed

357
00:13:55,400 --> 00:13:57,920
which is very productive though

358
00:13:57,920 --> 00:14:00,020
sometimes noisy lists we run for

359
00:14:00,020 --> 00:14:03,290
JavaScript standards work and he

360
00:14:03,290 --> 00:14:05,120
basically was reviving I'm not sure if

361
00:14:05,120 --> 00:14:08,740
he intended it a whole theory of

362
00:14:08,740 --> 00:14:11,660
operators called or generalized

363
00:14:11,660 --> 00:14:13,940
functions called multi methods that can

364
00:14:13,940 --> 00:14:16,280
be dispatched on the types of all their

365
00:14:16,280 --> 00:14:19,010
arguments this goes back to Common Lisp

366
00:14:19,010 --> 00:14:22,330
and got cleaned up and Dylan and

367
00:14:22,330 --> 00:14:24,920
language called Cecil by Craig chambers

368
00:14:24,920 --> 00:14:27,140
which inspired me here so one of the

369
00:14:27,140 --> 00:14:29,150
ideas with multi methods is you don't

370
00:14:29,150 --> 00:14:31,430
have to have this double dispatch where

371
00:14:31,430 --> 00:14:33,410
each method knows about the type of its

372
00:14:33,410 --> 00:14:34,910
other argument or can't handle it

373
00:14:34,910 --> 00:14:36,950
instead you kind of have a negotiation

374
00:14:36,950 --> 00:14:39,440
where the two operands handshake and

375
00:14:39,440 --> 00:14:42,170
find the right method and this is a

376
00:14:42,170 --> 00:14:44,030
little bit hairy to nerdcore but the

377
00:14:44,030 --> 00:14:46,010
idea is that you look in the left

378
00:14:46,010 --> 00:14:48,020
operand V and the right operand you and

379
00:14:48,020 --> 00:14:50,810
you see if they each have the right part

380
00:14:50,810 --> 00:14:52,310
of the handshake one will be the symbol

381
00:14:52,310 --> 00:14:53,810
name double added by the way when you

382
00:14:53,810 --> 00:14:55,190
see the double add that's used in the

383
00:14:55,190 --> 00:14:57,680
yes expect that means it's a internal

384
00:14:57,680 --> 00:14:59,960
symbol may not be available to the

385
00:14:59,960 --> 00:15:02,000
implementation and when you're looking

386
00:15:02,000 --> 00:15:03,890
at you you look for double add underbar

387
00:15:03,890 --> 00:15:05,210
RI just call it that it has to be a

388
00:15:05,210 --> 00:15:06,410
different symbol has to be for the

389
00:15:06,410 --> 00:15:10,010
right-hand operand and if you find sets

390
00:15:10,010 --> 00:15:11,990
of functions you then intersect them if

391
00:15:11,990 --> 00:15:14,870
you find one function you've got your

392
00:15:14,870 --> 00:15:16,610
answer that's the function you call with

393
00:15:16,610 --> 00:15:19,430
two arguments if you find zero there's

394
00:15:19,430 --> 00:15:21,440
no such method multi method and if you

395
00:15:21,440 --> 00:15:22,880
find more than one you have an ambiguous

396
00:15:22,880 --> 00:15:27,680
call so this ends up letting you write

397
00:15:27,680 --> 00:15:29,570
very clean implementations of the

398
00:15:29,570 --> 00:15:31,000
combinations instead of doing the case

399
00:15:31,000 --> 00:15:34,510
analysis inside the methods you can

400
00:15:34,510 --> 00:15:37,010
write a function for each combination

401
00:15:37,010 --> 00:15:39,230
that's short it's inlinable it's fast

402
00:15:39,230 --> 00:15:41,720
and you can sort of overload them you

403
00:15:41,720 --> 00:15:42,910
can add them and this is the

404
00:15:42,910 --> 00:15:44,560
functional API that Christian pleasure

405
00:15:44,560 --> 00:15:46,900
Hansen proposed at the time now I don't

406
00:15:46,900 --> 00:15:48,760
think we want an API so I'm going to

407
00:15:48,760 --> 00:15:52,390
talk about syntax people must have

408
00:15:52,390 --> 00:15:53,950
syntax it's just an obvious user

409
00:15:53,950 --> 00:15:55,000
interface affordance

410
00:15:55,000 --> 00:15:57,700
so after c-sharp I've already got in my

411
00:15:57,700 --> 00:15:59,230
prototype spider monkey patch is zero

412
00:15:59,230 --> 00:16:04,150
capital L for you know zero 64-bit value

413
00:16:04,150 --> 00:16:08,890
and one L and so on ul for unsilent 64

414
00:16:08,890 --> 00:16:13,240
bits unsigned long full of 32 OB F big

415
00:16:13,240 --> 00:16:16,480
num f-sharp used capital I but some

416
00:16:16,480 --> 00:16:18,010
people object to that something like

417
00:16:18,010 --> 00:16:20,110
that complex numbers imaginary parts so

418
00:16:20,110 --> 00:16:23,110
n m for money is what you used for

419
00:16:23,110 --> 00:16:24,850
decimal apparently this is sort of

420
00:16:24,850 --> 00:16:28,780
standard and we need a syntax mechanism

421
00:16:28,780 --> 00:16:30,160
for these things these these literals

422
00:16:30,160 --> 00:16:33,190
are evaluated like a regular expression

423
00:16:33,190 --> 00:16:35,170
literal is then you have to have some

424
00:16:35,170 --> 00:16:36,820
kind of way of plugging into the syntax

425
00:16:36,820 --> 00:16:39,850
and generating a implicit function call

426
00:16:39,850 --> 00:16:42,220
to construct these things so that means

427
00:16:42,220 --> 00:16:45,340
something like this and this I'm gonna

428
00:16:45,340 --> 00:16:48,600
put before tc39 next week at this time

429
00:16:48,600 --> 00:16:51,010
this looks fairly attractive it's based

430
00:16:51,010 --> 00:16:52,750
on the class syntax in es6 there's a

431
00:16:52,750 --> 00:16:54,820
value P textual keyword in front of

432
00:16:54,820 --> 00:16:57,100
class to tell you this is a value class

433
00:16:57,100 --> 00:16:59,800
declaration not a class declaration by

434
00:16:59,800 --> 00:17:02,020
default the name of the class would also

435
00:17:02,020 --> 00:17:04,210
give you the type of type we think both

436
00:17:04,210 --> 00:17:07,060
for convenience people really want type

437
00:17:07,060 --> 00:17:09,520
of 0 lb in 64 they don't want it to be

438
00:17:09,520 --> 00:17:12,280
like object or number and in fact type

439
00:17:12,280 --> 00:17:14,740
of has this this interesting

440
00:17:14,740 --> 00:17:16,180
relationship with double equal and

441
00:17:16,180 --> 00:17:17,590
triple equal if you know two things are

442
00:17:17,590 --> 00:17:19,630
the same type of type and they're double

443
00:17:19,630 --> 00:17:21,670
equal then you know they're triple equal

444
00:17:21,670 --> 00:17:23,950
and also if you know two things are

445
00:17:23,950 --> 00:17:25,780
triple equal then you know they're type

446
00:17:25,780 --> 00:17:27,370
of types are the same and they're double

447
00:17:27,370 --> 00:17:30,040
the code implies both ways that is not

448
00:17:30,040 --> 00:17:32,080
just a coincidence that's something we

449
00:17:32,080 --> 00:17:34,840
made sure of in the early days yes one

450
00:17:34,840 --> 00:17:36,700
and it's something to keep this going

451
00:17:36,700 --> 00:17:38,350
off the rails in subtle ways so we're

452
00:17:38,350 --> 00:17:40,030
trying to preserve that that's another

453
00:17:40,030 --> 00:17:42,610
reason to have a type of be different

454
00:17:42,610 --> 00:17:44,710
for these new value objects and you can

455
00:17:44,710 --> 00:17:46,420
see a constructor here what would be

456
00:17:46,420 --> 00:17:48,040
different about the value class versus

457
00:17:48,040 --> 00:17:49,330
the es6 classes that you would get an

458
00:17:49,330 --> 00:17:51,780
implicit freeze of the return value

459
00:17:51,780 --> 00:17:53,860
might be a deep freeze depends on how

460
00:17:53,860 --> 00:17:55,680
other things work out in

461
00:17:55,680 --> 00:17:57,900
the implementation and then I have this

462
00:17:57,900 --> 00:18:00,270
new syntax for inspired by crate

463
00:18:00,270 --> 00:18:01,980
chambers Cecil language for the various

464
00:18:01,980 --> 00:18:04,050
multi method combinations point 2d plus

465
00:18:04,050 --> 00:18:05,640
number and number holes point 2d point

466
00:18:05,640 --> 00:18:07,830
2d plus point 2d again you get the short

467
00:18:07,830 --> 00:18:10,170
inlinable fairly simple methods you

468
00:18:10,170 --> 00:18:12,150
don't have to do switches or if else

469
00:18:12,150 --> 00:18:14,310
trees to analyze the case combinations

470
00:18:14,310 --> 00:18:17,520
of the other operand so this is looking

471
00:18:17,520 --> 00:18:20,010
attractive and I'm going to carry it

472
00:18:20,010 --> 00:18:23,610
forward next topic up in these low-level

473
00:18:23,610 --> 00:18:25,440
affordances is kind of related to value

474
00:18:25,440 --> 00:18:27,780
objects and this is something some of

475
00:18:27,780 --> 00:18:29,640
you know about called sim D stands for

476
00:18:29,640 --> 00:18:33,390
single instruction multiple data in your

477
00:18:33,390 --> 00:18:36,300
modern multi-core super CPUs and your

478
00:18:36,300 --> 00:18:38,640
system-on-a-chip phone CPUs you have

479
00:18:38,640 --> 00:18:40,740
these little short vector units that are

480
00:18:40,740 --> 00:18:42,810
pretty close to the CPU has to get to

481
00:18:42,810 --> 00:18:45,090
and then they can do instead of for ads

482
00:18:45,090 --> 00:18:47,850
and in a row they can do the ads in

483
00:18:47,850 --> 00:18:49,680
parallel and they produce a vector and

484
00:18:49,680 --> 00:18:51,090
they consume vectors these vectors are

485
00:18:51,090 --> 00:18:54,180
fixed length it's kind of cool too

486
00:18:54,180 --> 00:18:56,130
because there's actually been progress

487
00:18:56,130 --> 00:18:57,450
here we know what these are wanted by

488
00:18:57,450 --> 00:18:59,280
low-level hackers game hackers DSP

489
00:18:59,280 --> 00:19:01,140
hackers it turns out John mcCutchan

490
00:19:01,140 --> 00:19:03,660
spoke earlier has added them to dart VM

491
00:19:03,660 --> 00:19:07,650
and that's not a problem because dart2js

492
00:19:07,650 --> 00:19:10,620
needs them in j s so j s has to keep up

493
00:19:10,620 --> 00:19:12,300
with dart and the incentives on

494
00:19:12,300 --> 00:19:13,950
everyone's side to make that happen so

495
00:19:13,950 --> 00:19:15,150
we're actually working on this together

496
00:19:15,150 --> 00:19:17,880
it's a joint production of Google and

497
00:19:17,880 --> 00:19:19,880
tell Mozilla right now with tc39

498
00:19:19,880 --> 00:19:22,260
following along and keeping consensus

499
00:19:22,260 --> 00:19:25,260
and we expect this could pop out in

500
00:19:25,260 --> 00:19:28,410
engines pretty soon john already has a

501
00:19:28,410 --> 00:19:32,340
poly fillable sim D API on github you

502
00:19:32,340 --> 00:19:34,230
can use it it uses typed arrays for

503
00:19:34,230 --> 00:19:36,150
storage it does not of course paralyze

504
00:19:36,150 --> 00:19:37,620
into those vector units I mentioned

505
00:19:37,620 --> 00:19:39,900
those hardware units but the jets could

506
00:19:39,900 --> 00:19:40,950
do this pretty quickly and it's going to

507
00:19:40,950 --> 00:19:42,330
be pretty sweet when it gets optimized

508
00:19:42,330 --> 00:19:45,150
and it's it's fairly functional API

509
00:19:45,150 --> 00:19:46,650
which means it'll line up with that

510
00:19:46,650 --> 00:19:49,500
multi-method function based double

511
00:19:49,500 --> 00:19:51,690
dispatch system I showed earlier and I

512
00:19:51,690 --> 00:19:53,340
think you want that operator syntax you

513
00:19:53,340 --> 00:19:54,720
might say well why not just use sim do

514
00:19:54,720 --> 00:19:56,730
not add why not just call functions you

515
00:19:56,730 --> 00:19:59,310
know will live there's some experience

516
00:19:59,310 --> 00:20:01,230
to the contrary this is from Cameron

517
00:20:01,230 --> 00:20:02,850
Purdy's blog awhile ago it's still good

518
00:20:02,850 --> 00:20:06,300
funny read first he mocks son for

519
00:20:06,300 --> 00:20:07,500
leaving out

520
00:20:07,500 --> 00:20:09,930
real syntactic affordances for big

521
00:20:09,930 --> 00:20:11,820
integer and big decimal and then the

522
00:20:11,820 --> 00:20:13,740
first comment from Bob McWhorter talks

523
00:20:13,740 --> 00:20:16,230
about some Wall Street code review where

524
00:20:16,230 --> 00:20:17,700
they were looking at Java code and

525
00:20:17,700 --> 00:20:20,250
people were using big decimal but they

526
00:20:20,250 --> 00:20:21,150
kind of got tired of not having

527
00:20:21,150 --> 00:20:23,040
operators so they extracted the double

528
00:20:23,040 --> 00:20:27,450
values which are imprecise binary

529
00:20:27,450 --> 00:20:29,460
floating-point representations of the

530
00:20:29,460 --> 00:20:31,440
big decimals and then they just used

531
00:20:31,440 --> 00:20:34,020
plus and there went the profit margin or

532
00:20:34,020 --> 00:20:37,740
the national debt down the drain so you

533
00:20:37,740 --> 00:20:39,930
know without operators without literals

534
00:20:39,930 --> 00:20:41,340
people just don't use this stuff they

535
00:20:41,340 --> 00:20:42,780
fall back on the convenience stuff and

536
00:20:42,780 --> 00:20:45,660
it's just a hazard another low level

537
00:20:45,660 --> 00:20:46,650
affordance I'm going to talk about

538
00:20:46,650 --> 00:20:50,190
quickly is threads I think I said

539
00:20:50,190 --> 00:20:52,200
threads suck once and I had a blog post

540
00:20:52,200 --> 00:20:54,510
you can read about that but when you're

541
00:20:54,510 --> 00:20:56,730
compiling these c or c++ game engines

542
00:20:56,730 --> 00:21:00,180
they don't care right grandma don't care

543
00:21:00,180 --> 00:21:02,070
it's it's data racist you know we're

544
00:21:02,070 --> 00:21:04,410
fine we use new taxes or whatever the

545
00:21:04,410 --> 00:21:07,740
trick is to keep this racy shared memory

546
00:21:07,740 --> 00:21:09,300
buffer that might be only for the c or

547
00:21:09,300 --> 00:21:10,830
c++ that's been compiled to JavaScript

548
00:21:10,830 --> 00:21:14,100
from leaking out into the rest of the

549
00:21:14,100 --> 00:21:16,530
JavaScript language or javascript vm's

550
00:21:16,530 --> 00:21:18,090
like v8 and all the rest room they're

551
00:21:18,090 --> 00:21:19,320
they're not multi-threaded they don't

552
00:21:19,320 --> 00:21:21,600
want to take blocks on objects we think

553
00:21:21,600 --> 00:21:22,590
we have a way to do this but I have

554
00:21:22,590 --> 00:21:24,420
little to say about that I'm just going

555
00:21:24,420 --> 00:21:26,430
to plow right ahead to an update on

556
00:21:26,430 --> 00:21:31,350
Azzam J s as I'm Jas you know people are

557
00:21:31,350 --> 00:21:32,940
kind of skeptical they think oh it's

558
00:21:32,940 --> 00:21:38,690
only this Firefox thing it's not true

559
00:21:38,700 --> 00:21:42,659
on the other hand speed on the web

560
00:21:42,659 --> 00:21:44,489
consists of many things Network layer

561
00:21:44,489 --> 00:21:46,049
it's a big one

562
00:21:46,049 --> 00:21:49,499
Daum graphics and JavaScript but this is

563
00:21:49,499 --> 00:21:50,879
Jay s con so I'm gonna talk about Jay s

564
00:21:50,879 --> 00:21:52,820
speed I don't care about the other stuff

565
00:21:52,820 --> 00:21:55,830
how fast is yes one measure that we're

566
00:21:55,830 --> 00:21:57,659
using is for something big code base

567
00:21:57,659 --> 00:21:59,759
like the epic Unreal Engine based

568
00:21:59,759 --> 00:22:01,889
Citadel demo which is on Lion it's a

569
00:22:01,889 --> 00:22:05,669
million lines c++ opengl to WebGL all

570
00:22:05,669 --> 00:22:07,710
standardized Web Audio based they had an

571
00:22:07,710 --> 00:22:11,609
open al layer doesn't just run in

572
00:22:11,609 --> 00:22:13,710
Firefox well it runs in Chrome well now

573
00:22:13,710 --> 00:22:16,289
and it should run in Safari and ie

574
00:22:16,289 --> 00:22:18,600
they're working in Safari on LVM based

575
00:22:18,600 --> 00:22:22,200
high performance optimizations and the

576
00:22:22,200 --> 00:22:25,019
the chakra leads were on Microsoft's

577
00:22:25,019 --> 00:22:26,340
channel I and the other months saying

578
00:22:26,340 --> 00:22:28,950
that they are bullish on Asmodeus so

579
00:22:28,950 --> 00:22:30,809
stuffs happening we're already within

580
00:22:30,809 --> 00:22:32,340
spitting distance of native code speed

581
00:22:32,340 --> 00:22:33,929
you can see some of the macro benchmarks

582
00:22:33,929 --> 00:22:35,580
below the - like box 2d we're actually

583
00:22:35,580 --> 00:22:39,389
1.2 times slower than native less than 2

584
00:22:39,389 --> 00:22:40,440
times slower less than one-and-a-half

585
00:22:40,440 --> 00:22:41,609
times slower and we're gonna keep

586
00:22:41,609 --> 00:22:44,940
closing those gaps we're using this

587
00:22:44,940 --> 00:22:46,889
stuff too because we have to Firefox OS

588
00:22:46,889 --> 00:22:48,539
doesn't have a native developer kit

589
00:22:48,539 --> 00:22:52,409
we're using in scripting to get C and

590
00:22:52,409 --> 00:22:56,129
C++ cross-compiled automatically so I'm

591
00:22:56,129 --> 00:22:59,039
gonna show first of all where's my water

592
00:22:59,039 --> 00:23:01,889
I hope the volume is gonna work yeah the

593
00:23:01,889 --> 00:23:06,359
short demo this is Firefox OS on a nexus

594
00:23:06,359 --> 00:23:09,830
4 refusing for development this is the

595
00:23:09,830 --> 00:23:13,460
Disney hit game of the new ones out but

596
00:23:13,460 --> 00:23:16,049
it's running well and it didn't require

597
00:23:16,049 --> 00:23:20,029
any rewriting it is cross-compiled

598
00:23:20,029 --> 00:23:22,019
there's still some tuning to do it's

599
00:23:22,019 --> 00:23:23,940
kind of alpha stage we're not happy with

600
00:23:23,940 --> 00:23:24,899
code loading but I think that's

601
00:23:24,899 --> 00:23:29,220
improving even as I speak and my my

602
00:23:29,220 --> 00:23:32,340
lovely demo assistant here manages to

603
00:23:32,340 --> 00:23:33,840
not get a single rubber session they'll

604
00:23:33,840 --> 00:23:36,260
cut a demo so you'll have to excuse that

605
00:23:36,260 --> 00:23:41,059
if you play this game you didn't get the

606
00:23:41,059 --> 00:23:43,130
dirt up top so now the Ducks room Wow

607
00:23:43,130 --> 00:23:45,980
okay but at least he got his water you

608
00:23:45,980 --> 00:23:47,330
can see the the fluid simulations

609
00:23:47,330 --> 00:23:49,250
working this is all running high frame

610
00:23:49,250 --> 00:23:55,910
rate WebGL uploading from the CPU this

611
00:23:55,910 --> 00:23:57,700
is how we intend to port

612
00:23:57,700 --> 00:23:59,570
high-performance games and other apps

613
00:23:59,570 --> 00:24:01,669
that are written in C or C++ to Firefox

614
00:24:01,669 --> 00:24:03,020
OS hub it should they should work across

615
00:24:03,020 --> 00:24:04,760
the web there's no reason people to

616
00:24:04,760 --> 00:24:06,799
regret coming there's huge catalogues of

617
00:24:06,799 --> 00:24:08,260
games out there that can work this way

618
00:24:08,260 --> 00:24:10,340
nobody should rewrite them we shouldn't

619
00:24:10,340 --> 00:24:12,740
force anybody to write a bunch of HTML

620
00:24:12,740 --> 00:24:15,110
Javascript canvas put pixel pushing it

621
00:24:15,110 --> 00:24:17,600
should be done through the existing code

622
00:24:17,600 --> 00:24:19,340
paths that have been GPU optimized three

623
00:24:19,340 --> 00:24:24,860
years based on OpenGL and got one duck

624
00:24:24,860 --> 00:24:26,929
Wow okay I'm gonna have to get a better

625
00:24:26,929 --> 00:24:30,799
demo assistant so now I'm gonna take my

626
00:24:30,799 --> 00:24:33,260
life in my own hands as I usually do and

627
00:24:33,260 --> 00:24:37,000
show you a couple of real demos which

628
00:24:37,000 --> 00:24:41,840
include this Kang access chart here's

629
00:24:41,840 --> 00:24:49,010
the oh sorry yeah I lost it thanks now I

630
00:24:49,010 --> 00:24:52,370
have to mirror huh forgive me I'll go

631
00:24:52,370 --> 00:24:52,790
fast

632
00:24:52,790 --> 00:24:58,200
oh yeah it's faster that way isn't it

633
00:24:58,210 --> 00:25:04,870
okay so this is Unreal Engine 3

634
00:25:04,870 --> 00:25:08,870
Unreal Tournament the the sanctuary

635
00:25:08,870 --> 00:25:15,440
level and it's a little bit slow code

636
00:25:15,440 --> 00:25:16,280
loading you're still working at it

637
00:25:16,280 --> 00:25:17,809
that's that's going to require us to do

638
00:25:17,809 --> 00:25:20,570
worker paralyzed code compilation which

639
00:25:20,570 --> 00:25:23,030
we can do with function futures if you

640
00:25:23,030 --> 00:25:26,090
can't imagine what those are but it's

641
00:25:26,090 --> 00:25:27,290
pretty straightforward to do that and

642
00:25:27,290 --> 00:25:29,000
once we do that I think we're in good

643
00:25:29,000 --> 00:25:36,500
shape on gameplay we have gamepad

644
00:25:36,500 --> 00:25:38,630
somebody spoke about that earlier we

645
00:25:38,630 --> 00:25:40,010
have other input affordances that are

646
00:25:40,010 --> 00:25:41,240
part of the web platform now they're

647
00:25:41,240 --> 00:25:45,650
coming along and no it's not going well

648
00:25:45,650 --> 00:25:48,350
I think it's my first demo fail at this

649
00:25:48,350 --> 00:25:48,980
No

650
00:25:48,980 --> 00:25:54,500
there it is all right skip the fly

651
00:25:54,500 --> 00:26:01,169
through and go straight to the game I

652
00:26:01,179 --> 00:26:03,830
have to allow it to be full screen and

653
00:26:03,830 --> 00:26:07,440
now you see my mad skills

654
00:26:07,450 --> 00:26:15,130
well it's laggy it's not so fast hmm I

655
00:26:15,130 --> 00:26:17,240
think I lost my athletes they asked

656
00:26:17,240 --> 00:26:18,559
optimizations when I still loaded the

657
00:26:18,559 --> 00:26:28,130
latest Firefox nightly painful okay let

658
00:26:28,130 --> 00:26:29,540
me try something else see if this is

659
00:26:29,540 --> 00:26:31,309
truly something I can blame on the

660
00:26:31,309 --> 00:26:34,340
nightly build this is I will try and

661
00:26:34,340 --> 00:26:36,290
hold that before I try and cram I'll try

662
00:26:36,290 --> 00:26:40,429
it in Firefox Aurora when it works it's

663
00:26:40,429 --> 00:26:41,510
faster than chrome stole but they're

664
00:26:41,510 --> 00:26:43,040
catching up and we actually have people

665
00:26:43,040 --> 00:26:45,950
working on making making sure that you

666
00:26:45,950 --> 00:26:47,660
don't need to use azzam to get the

667
00:26:47,660 --> 00:26:49,820
optimizations now here I'm gonna play

668
00:26:49,820 --> 00:26:51,080
banana bread and I'm gonna make sure I

669
00:26:51,080 --> 00:26:52,610
don't have BOTS because they're just

670
00:26:52,610 --> 00:26:54,980
gonna kill me I suck at this game but

671
00:26:54,980 --> 00:26:58,309
what's cool about this game is WASD

672
00:26:58,309 --> 00:27:00,860
drives me around and then if you look

673
00:27:00,860 --> 00:27:05,360
over here that is dude running in a

674
00:27:05,360 --> 00:27:10,120
worker

675
00:27:10,130 --> 00:27:12,630
running at a worker rendering to a

676
00:27:12,630 --> 00:27:14,429
canvas so it's a game within a game it's

677
00:27:14,429 --> 00:27:16,289
not a conception and the weird thing is

678
00:27:16,289 --> 00:27:19,049
I can then switch to that game if I hit

679
00:27:19,049 --> 00:27:22,860
a vertical bar how about I'm gonna do a

680
00:27:22,860 --> 00:27:24,840
new game now you tell me what's to

681
00:27:24,840 --> 00:27:26,340
choose so you know this doesn't canned

682
00:27:26,340 --> 00:27:29,250
second third what I'm gonna I'm gonna

683
00:27:29,250 --> 00:27:34,830
die I'm gonna do will this hurt okay now

684
00:27:34,830 --> 00:27:36,299
who remembers doom now I'm gonna have to

685
00:27:36,299 --> 00:27:42,029
use the arrow keys in here and ctrl + to

686
00:27:42,029 --> 00:27:44,519
shoot I think yeah and if I if I use

687
00:27:44,519 --> 00:27:46,679
WASD I'm in the outer game not that it

688
00:27:46,679 --> 00:27:52,019
doesn't any good it's gonna be some

689
00:27:52,019 --> 00:27:55,380
awful like taco demon killing me

690
00:27:55,380 --> 00:27:58,580
oh let's see can I make it a switch go

691
00:27:58,580 --> 00:28:00,600
where's the bad guys they're around here

692
00:28:00,600 --> 00:28:01,019
somewhere

693
00:28:01,019 --> 00:28:05,460
Oh teleport nothing's happening that's

694
00:28:05,460 --> 00:28:08,970
good cuz I want to live all right that

695
00:28:08,970 --> 00:28:10,470
seems to work in it seems to be full

696
00:28:10,470 --> 00:28:12,330
speed either ice also so I'm gonna go

697
00:28:12,330 --> 00:28:15,419
back here and with your indulgence to do

698
00:28:15,419 --> 00:28:18,539
this one more time it is a little hairy

699
00:28:18,539 --> 00:28:21,110
running nightly build because sometimes

700
00:28:21,110 --> 00:28:23,639
something in the Azzam type checker

701
00:28:23,639 --> 00:28:25,860
doesn't like previously compiled in

702
00:28:25,860 --> 00:28:27,600
script encode blob which is just a bunch

703
00:28:27,600 --> 00:28:29,850
of JavaScript it's minified and this

704
00:28:29,850 --> 00:28:31,320
long load time makes me think that might

705
00:28:31,320 --> 00:28:33,720
be implicated all right maybe I should

706
00:28:33,720 --> 00:28:37,440
try Chrome what do you think I could try

707
00:28:37,440 --> 00:28:39,389
Firefox or aura that's play a better

708
00:28:39,389 --> 00:28:58,210
idea let's try that so Row 2

709
00:28:58,220 --> 00:29:02,700
this one okay at least you know I'm

710
00:29:02,700 --> 00:29:05,870
doing the real deal here epic demos

711
00:29:05,870 --> 00:29:13,830
sanctuary crap I think I have two things

712
00:29:13,830 --> 00:29:16,440
running let's write anyway here we go

713
00:29:16,440 --> 00:29:18,240
this is this is probably gonna verify

714
00:29:18,240 --> 00:29:20,550
better let's see how fast it loads to be

715
00:29:20,550 --> 00:29:21,240
faster

716
00:29:21,240 --> 00:29:26,100
preparing javascript and down yeah this

717
00:29:26,100 --> 00:29:27,920
is it this is the real deal I think

718
00:29:27,920 --> 00:29:30,720
let's hope it's Aurora it's not nightly

719
00:29:30,720 --> 00:29:36,250
so it can't change on me that fast

720
00:29:36,260 --> 00:29:48,440
fly through full speed oh wow okay

721
00:29:48,440 --> 00:29:51,120
where's my rockets yeah they are

722
00:29:51,120 --> 00:29:56,160
keep those BOTS there down there I think

723
00:29:56,160 --> 00:29:57,720
crap to have mad skills also I'm

724
00:29:57,720 --> 00:30:14,240
invincible

725
00:30:14,250 --> 00:30:19,800
I'm overtime I apologize and get back to

726
00:30:19,800 --> 00:30:26,980
this all right so I talked at Jay's

727
00:30:26,980 --> 00:30:29,500
coffee us about the two JavaScript's the

728
00:30:29,500 --> 00:30:32,170
hand-coded lovely JavaScript most to you

729
00:30:32,170 --> 00:30:34,660
right and the compiler produced Azzam or

730
00:30:34,660 --> 00:30:37,420
similar that compilers produced I had a

731
00:30:37,420 --> 00:30:39,340
metaphor John Henry and the steam hammer

732
00:30:39,340 --> 00:30:42,130
and though you knew John Henry's are

733
00:30:42,130 --> 00:30:43,840
heroic and mighty you might after

734
00:30:43,840 --> 00:30:44,980
beating the steam number one see my

735
00:30:44,980 --> 00:30:46,840
classroom broken heart and I didn't want

736
00:30:46,840 --> 00:30:48,070
that to happen I was really worried

737
00:30:48,070 --> 00:30:49,510
about it I felt responsible

738
00:30:49,510 --> 00:30:52,990
again just turned that watchword and you

739
00:30:52,990 --> 00:30:56,140
know there's a scene some of you may

740
00:30:56,140 --> 00:30:59,050
know from Breaking Bad I think I can

741
00:30:59,050 --> 00:31:17,040
show that if I'm allowed to it in digits

742
00:31:17,040 --> 00:31:21,010
okay we got two java scripts to worry

743
00:31:21,010 --> 00:31:22,810
about it bothers me and we have the hand

744
00:31:22,810 --> 00:31:24,460
coded one and we have the compiler

745
00:31:24,460 --> 00:31:28,470
generated one but it's not so bad

746
00:31:28,470 --> 00:31:32,500
true that the yin and the yang the cool

747
00:31:32,500 --> 00:31:34,030
Yin of hand coded JavaScript for the hot

748
00:31:34,030 --> 00:31:35,500
yang of compiler generated JavaScript

749
00:31:35,500 --> 00:31:38,980
which is making my laptop melt and and

750
00:31:38,980 --> 00:31:40,630
yet I don't have to worry too much

751
00:31:40,630 --> 00:31:42,460
because I think we're on an inevitable

752
00:31:42,460 --> 00:31:44,560
evolutionary path toward JavaScript

753
00:31:44,560 --> 00:31:45,970
being the universal runtime and I think

754
00:31:45,970 --> 00:31:47,620
Java scripts going to prevail also as a

755
00:31:47,620 --> 00:31:49,090
source language that you all love to use

756
00:31:49,090 --> 00:31:50,500
I think there will be JavaScript

757
00:31:50,500 --> 00:31:52,060
conferences in the future maybe in the

758
00:31:52,060 --> 00:31:54,070
far future and if I'm right

759
00:31:54,070 --> 00:31:56,020
even this lovely Pelican which in some

760
00:31:56,020 --> 00:31:58,060
ways is a happy creature despite

761
00:31:58,060 --> 00:32:00,480
evolution making it look like a urinal

762
00:32:00,480 --> 00:32:02,860
you know javascript has some of that

763
00:32:02,860 --> 00:32:05,740
characteristic to a 210 days in May but

764
00:32:05,740 --> 00:32:09,779
always bet on Jas thank you

765
00:32:09,789 --> 00:32:20,320
you

