1
00:00:03,429 --> 00:00:05,529
Maureen McElaney - Go Offline First to Save
The World

2
00:00:31,750 --> 00:00:34,770
MAUREEN: Thank you so much to JSConf for having
me here.

3
00:00:34,770 --> 00:00:35,770
I'm so excited.

4
00:00:35,770 --> 00:00:38,480
This is my first time to Europe at all.

5
00:00:38,480 --> 00:00:40,630
I'm having a great time in Berlin.

6
00:00:40,630 --> 00:00:45,450
Thank to Ben Schwarz before my talk because
you said a lot of things I didn't have time

7
00:00:45,450 --> 00:00:48,090
to say.

8
00:00:48,090 --> 00:00:52,600
Anyone who stayed for that talk and stayed
for mine, you have good context what you're

9
00:00:52,600 --> 00:00:56,420
going to talk about today.

10
00:00:56,420 --> 00:01:00,239
This talk was inspired by Offline Camp.

11
00:01:00,239 --> 00:01:02,289
It happened last weekend.

12
00:01:02,289 --> 00:01:10,460
I got to attend that one but I attended two
more before that, and in the offline first

13
00:01:10,460 --> 00:01:15,080
space, and I learned a lot about really amazing
projects that are impacting people's lives,

14
00:01:15,080 --> 00:01:18,470
so that is what this talk is about.

15
00:01:18,470 --> 00:01:22,880
But first I wanted to give an overview of
what offline first is.

16
00:01:22,880 --> 00:01:29,071
Really the main tenet of this is that Offline
should not be treated as - this is a state

17
00:01:29,071 --> 00:01:38,100
that you should be planning for and expecting
from your users, not an errant condition.

18
00:01:38,100 --> 00:01:42,810
We moved from designing applications from
the desktop for mobile first because we wand

19
00:01:42,810 --> 00:01:45,710
to design for the most constrained environment.

20
00:01:45,710 --> 00:01:48,430
That is the thought behind offline first.

21
00:01:48,430 --> 00:01:52,450
We want to treat the offline state as the
most constrained environment, start there,

22
00:01:52,450 --> 00:01:58,070
and move from that to progressively enhance
the application as you get connectivity.

23
00:01:58,070 --> 00:02:06,170
The thing about bad offline states, some bad
examples: this is it what you see, you're

24
00:02:06,170 --> 00:02:13,651
on your app, you loose connectivity, a window
pops up, blocks you don't know if what you

25
00:02:13,651 --> 00:02:16,010
were doing is lost, you don't know if you
lost content.

26
00:02:16,010 --> 00:02:19,150
You have no idea if you can continue what
you were doing in the middle of what you doing

27
00:02:19,150 --> 00:02:20,810
when you lost connectivity.

28
00:02:20,810 --> 00:02:30,590
This is a really bad experience for 
the user.

29
00:02:30,590 --> 00:02:36,550
When this site loses connectivity, it is clear
you can see where you are on in the site,

30
00:02:36,550 --> 00:02:54,340
the site turns grey 3 - that's a pretty good
experience.

31
00:02:54,340 --> 00:03:13,459
Items, and you can do things with your cart.

32
00:03:13,459 --> 00:03:17,709
That's pretty cool.

33
00:03:17,709 --> 00:03:25,060
Housing.com is a real estate site in India.

34
00:03:25,060 --> 00:03:33,599
When you lose connectivity with that, you
- nick that has been cached anything that's

35
00:03:33,599 --> 00:03:39,180
been done before, if you navigate to your
favourites, you didn't lose any of the listings

36
00:03:39,180 --> 00:03:42,819
that you favourited in that session.

37
00:03:42,819 --> 00:03:44,529
That's a really good experience.

38
00:03:44,529 --> 00:03:48,479
It greys out, obvious that you can't do a
whole lot, but it lets you know you weren't

39
00:03:48,479 --> 00:03:51,239
in the middle of doing anything you were in
the middle of doing.

40
00:03:51,239 --> 00:04:01,199
When I tell you more about how Off line First
is changing lives and maybe even saving them.

41
00:04:01,199 --> 00:04:07,189
You, the JavaScript community, are doing amazing
things in this space, so you should pat yourselves

42
00:04:07,189 --> 00:04:11,400
on the back because you're offline first and
you don't know it.

43
00:04:11,400 --> 00:04:12,889
These projects are really cool.

44
00:04:12,889 --> 00:04:25,580
Why we would use technology for Los Angeles
and London when we live in New Delhi?

45
00:04:25,580 --> 00:04:27,199
Out of adversity can come innovation.

46
00:04:27,199 --> 00:04:30,610
Imagine that you live in a refugee camp.

47
00:04:30,610 --> 00:04:32,000
You have small children.

48
00:04:32,000 --> 00:04:37,300
You want to be able to teach your children
and have full daily lives as you figure out

49
00:04:37,300 --> 00:04:39,960
what your next step is going to be.

50
00:04:39,960 --> 00:04:44,770
Brick allows to you continue I do run your
classrooms, you have a curriculum that is

51
00:04:44,770 --> 00:04:51,850
managed remotely, and your teachers are allowed
to make changes to this curriculum, changes

52
00:04:51,850 --> 00:04:57,729
are remotely brought down from educators around
the world that contribute.

53
00:04:57,729 --> 00:04:59,759
And Brick makes this possible.

54
00:04:59,759 --> 00:05:04,169
It is a local microserver that stores the
curriculum locally and as I said, it is remotely

55
00:05:04,169 --> 00:05:05,169
managed.

56
00:05:05,169 --> 00:05:15,740
It is dust proof, rugged, solar powered, and
it is a built-in Wi-Fi hot spot, and I can

57
00:05:15,740 --> 00:05:20,890
sink your content using the cloud, and then
enjoy your classes working seamlessly in low

58
00:05:20,890 --> 00:05:26,620
latency or no connectivity at all.

59
00:05:26,620 --> 00:05:32,500
In Haiti, there was a horrible earthquake
in 2010.

60
00:05:32,500 --> 00:05:36,949
In 2014, a lot of country still didn't have
electricity.

61
00:05:36,949 --> 00:05:43,361
This is a huge problem, obviously, but the
country relied heavily on agriculture, and

62
00:05:43,361 --> 00:05:49,630
the farmers were not able to make the same
profits off their crops because they couldn't

63
00:05:49,630 --> 00:05:56,180
get the electricity to process the vegetables
and get that ready for shipment to leave.

64
00:05:56,180 --> 00:06:03,090
So they lost millions of dollars and their
economy was devastated.

65
00:06:03,090 --> 00:06:08,349
But not only that, just normal families couldn't
access electricity to take care of their children.

66
00:06:08,349 --> 00:06:13,749
So, with access to the right technology, they
could rebuild those microgrids within their

67
00:06:13,749 --> 00:06:17,590
communities and get electric goods back running.

68
00:06:17,590 --> 00:06:25,740
Sparkmetre did this, found in 2013, and they
offer low-cost metering solutions from rural

69
00:06:25,740 --> 00:06:33,270
microgrids out in small villages to existing
urban central grid utilities.

70
00:06:33,270 --> 00:06:38,379
Now they support grids in 15 countries adding
more every day.

71
00:06:38,379 --> 00:06:44,319
So they've a JavaScript front-end and they
use symmetric DS to handle syncing when the

72
00:06:44,319 --> 00:06:54,189
app is online, and then MQ and - for asynchronous
gain, for energy metering, media processing,

73
00:06:54,189 --> 00:06:57,620
and payments.

74
00:06:57,620 --> 00:06:59,910
This brings me to one of the first challenges.

75
00:06:59,910 --> 00:07:02,210
I'm going to talk about three in these talks.

76
00:07:02,210 --> 00:07:06,469
Offline First is a developing context and
there are a lot of problems that need to be

77
00:07:06,469 --> 00:07:07,770
solved.

78
00:07:07,770 --> 00:07:11,050
The first one I want to talk about is syncing.

79
00:07:11,050 --> 00:07:13,449
Sink conflicts are hard.

80
00:07:13,449 --> 00:07:21,780
When we think about Brick's syncing capabilities
or Supporting Metre selling bills out to your

81
00:07:21,780 --> 00:07:27,659
families in Ural parse of Haiti, you want
to make sure you've got it right not overwriting

82
00:07:27,659 --> 00:07:30,039
or processing wrong data for people.

83
00:07:30,039 --> 00:07:33,889
There are a few days that you can take care
of this.

84
00:07:33,889 --> 00:07:44,479
One solution is a JavaScript database with
its ability to sync with anything that - it

85
00:07:44,479 --> 00:07:49,650
allows to you read and write Day directly
on to the device and sync this data when you're

86
00:07:49,650 --> 00:07:52,409
back in connectivity.

87
00:07:52,409 --> 00:08:00,169
This includes IBM cloud amp that is based
on cache.db and another thing you can utilise

88
00:08:00,169 --> 00:08:05,509
for syncing.

89
00:08:05,509 --> 00:08:06,509
Back to Kenya.

90
00:08:06,509 --> 00:08:12,180
This picture is a bunch of doctors who are
loading patient records on to a bus to drive

91
00:08:12,180 --> 00:08:13,520
out to a village.

92
00:08:13,520 --> 00:08:16,900
Prepare the far away from the honestly.

93
00:08:16,900 --> 00:08:23,110
This is how they were handling all their patient
records.

94
00:08:23,110 --> 00:08:28,039
Hundreds of pounds of paper that is very vulnerable
to the elements, and this is not a sustainable

95
00:08:28,039 --> 00:08:34,110
way to make sure you're saving lives of people
that really, really need your help.

96
00:08:34,110 --> 00:08:39,830
Before the honestly run came along, they were
relying on this process.

97
00:08:39,830 --> 00:08:41,729
So this application came along.

98
00:08:41,729 --> 00:08:47,120
The Honestly Run did a lot of research and
found out that 20 per cent of health care

99
00:08:47,120 --> 00:08:53,410
professionals' time is spent just on administrative
tasks, and a lot of that time is spent by

100
00:08:53,410 --> 00:08:55,320
the software they were using.

101
00:08:55,320 --> 00:09:00,470
They were taking these papers out to a village,
making these changes to the patient records

102
00:09:00,470 --> 00:09:04,660
and history, and then they had to go back
and manually international of the data into

103
00:09:04,660 --> 00:09:09,060
the software, and their software was crappy
to deal with.

104
00:09:09,060 --> 00:09:18,399
Honestly Run let them take it out to a patient
on a tablet or mobile phone, meaning they

105
00:09:18,399 --> 00:09:23,940
could make changes offline or in the village,
and the changes would sync when they got back

106
00:09:23,940 --> 00:09:30,209
to Wi-Fi available when they were back at
the honestly.

107
00:09:30,209 --> 00:09:40,449
Couch TV on the front end and Node and couch
TV on the backend �works when there is no

108
00:09:40,449 --> 00:09:43,550
internet and syncs when there is.

109
00:09:43,550 --> 00:09:51,510
Now, in the Yuko of Alaska, health care workers
wanted a better way to be able to take care

110
00:09:51,510 --> 00:09:59,060
of pregnant mothers and their newborn baby,
because these people were rural poor, lived

111
00:09:59,060 --> 00:10:01,760
far from the honestly, and depending on the
time of year, it might have been impossible

112
00:10:01,760 --> 00:10:05,250
to get there if an emergency happened.

113
00:10:05,250 --> 00:10:10,370
And Yukon doesn't have great mobile coverage,
and because these people had to think about

114
00:10:10,370 --> 00:10:14,970
keeping their costs low, making sure that
an application was lightweight and didn't

115
00:10:14,970 --> 00:10:19,100
drive up a lot of mobile data usage was really
important.

116
00:10:19,100 --> 00:10:25,810
So Yukon Baby is built which gets its information
out to new mothers, built with angular.

117
00:10:25,810 --> 00:10:39,430
Just and Node it syncs date when a connection
is stability.

118
00:10:39,430 --> 00:10:44,269
It only updates when there is new information
to be had, so it keeps mobile bills low too

119
00:10:44,269 --> 00:10:48,360
for these people, which is awesome.

120
00:10:48,360 --> 00:10:54,589
This brings me to the next real problem with
Offline First which still needs some attention.

121
00:10:54,589 --> 00:11:00,350
When an application caches data locally to
a device, you have to think about the privacy

122
00:11:00,350 --> 00:11:06,009
concerns around the data that you are saving,
so you need to think about how this is handled

123
00:11:06,009 --> 00:11:11,089
and whether when you're thinking about honestly
information, medical history, all that kind

124
00:11:11,089 --> 00:11:16,570
of stuff, someone who is pregnant, you want
to make sure that that information is not

125
00:11:16,570 --> 00:11:18,589
being shared when it needs to be private.

126
00:11:18,589 --> 00:11:23,870
When you're thinking about security with offline
applications, you have to think about data

127
00:11:23,870 --> 00:11:31,269
validation, offering the ability to lock out
so, if you're sharing a device - log out that

128
00:11:31,269 --> 00:11:35,500
you can - and for apps that require really
high security, you might want to consider

129
00:11:35,500 --> 00:11:39,390
end-to-end encryption for your app.

130
00:11:39,390 --> 00:11:43,279
So writing secure apps is hard and even harder
in the browser.

131
00:11:43,279 --> 00:11:51,690
Calvin is here today who wrote a cool post
about security from a session session that

132
00:11:51,690 --> 00:11:52,690
we had.

133
00:11:52,690 --> 00:11:58,459
I encourage you out to check that Medium account
and read that because it has a lot of good

134
00:11:58,459 --> 00:12:00,050
information.

135
00:12:00,050 --> 00:12:01,580
You might be thinking, "What about me?

136
00:12:01,580 --> 00:12:06,570
I'm talking about people who live in rural
areas or developing countries, you might not

137
00:12:06,570 --> 00:12:11,949
be designing apps for these kind of users.

138
00:12:11,949 --> 00:12:16,899
What kind of things are more relatable to
what I deal with on a daily basis?

139
00:12:16,899 --> 00:12:24,699
I'm from the US, and I am concerned about
my current president and the administration

140
00:12:24,699 --> 00:12:33,020
there, and that project came along and they
wrote a really simple application that makes

141
00:12:33,020 --> 00:12:38,329
it easier for governments and researchers
to share their data sets with software helps

142
00:12:38,329 --> 00:12:44,490
to do really using things, so the grant funded,
and it's decentralised, a sharing version

143
00:12:44,490 --> 00:12:52,540
tool for sinking these big data sets, and
it can be used to version the data locally

144
00:12:52,540 --> 00:12:56,329
and share and sync it over the internet.

145
00:12:56,329 --> 00:12:59,949
And it's open-source, so you can check it
out and see what they're doing.

146
00:12:59,949 --> 00:13:01,970
It is built with no JS.

147
00:13:01,970 --> 00:13:08,500
By taking an online first approach to the
digital preservation, this allows users to

148
00:13:08,500 --> 00:13:16,529
share the data sets in a lightweight way,
and, before this, they were doing it manually.

149
00:13:16,529 --> 00:13:22,199
Spending a lot of money on Dropbox, or doing
really manual here's a giant flash line of

150
00:13:22,199 --> 00:13:25,709
information, please don't drop it in water
kind of thing.

151
00:13:25,709 --> 00:13:30,170
That makes it really simple for these people
to share data across the globe.

152
00:13:30,170 --> 00:13:31,180
That's really pivotal.

153
00:13:31,180 --> 00:13:38,910
Like I said in the US, we had an issue where,
in January, the whitehouse.gov deleted the

154
00:13:38,910 --> 00:13:40,829
data sets that were available.

155
00:13:40,829 --> 00:13:51,470
It was Tweeted, "I already grabbed it, so
you can come and get it," which was awesome

156
00:13:51,470 --> 00:13:53,509
because thought it was lost for every.

157
00:13:53,509 --> 00:13:58,740
The next thing under threat is the environmental
protection agency.

158
00:13:58,740 --> 00:14:03,089
We want to make sure this information is proved
for future generations to prove these, are

159
00:14:03,089 --> 00:14:04,339
true because it is important.

160
00:14:04,339 --> 00:14:12,540
He can go to the website and see a lot of
the data sets they have available and accessible

161
00:14:12,540 --> 00:14:18,430
for you to build anything you want, build
all kinds of applications using it.

162
00:14:18,430 --> 00:14:23,790
So how do you convince your boss and your
company, and your team, to invest in the extra

163
00:14:23,790 --> 00:14:25,769
time to make the app offline first?

164
00:14:25,769 --> 00:14:31,500
There are fining reasons, and Ben pointed
out a lot of them in regard to performance.

165
00:14:31,500 --> 00:14:37,470
So, when we look at LT capacity, the capacity
has remained in the same in the US in the

166
00:14:37,470 --> 00:14:38,770
last 12 months.

167
00:14:38,770 --> 00:14:44,600
The amount of users and bandwidth per user
has increased things dramatically because

168
00:14:44,600 --> 00:14:50,279
of things like video streaming, entertainment,
video conferencing, that sort of stuff.

169
00:14:50,279 --> 00:14:57,970
So this has all resulted in the past we are
from to year, a 50 per cent slowing of the

170
00:14:57,970 --> 00:15:03,170
speeds overall, and the US is 20 per cent
slower than Europe, actually.

171
00:15:03,170 --> 00:15:07,819
This is something if your users are predominantly
in the US or Europe, you have to think about

172
00:15:07,819 --> 00:15:11,550
how the performance of your app is.

173
00:15:11,550 --> 00:15:20,529
Not only that, but 60 per cent of the world
is on a 2G network and in the developing world,

174
00:15:20,529 --> 00:15:23,690
two thirds are on a 2G network.

175
00:15:23,690 --> 00:15:29,639
If you're building your application to work
in a best-case scenario, these people won't

176
00:15:29,639 --> 00:15:33,430
be able to access this.

177
00:15:33,430 --> 00:15:39,850
A 4G user is also not a 4G user most of the
time.

178
00:15:39,850 --> 00:15:41,459
People live in variable connectivity.

179
00:15:41,459 --> 00:15:47,629
They take the subway to work, take buses,
they walk between skyscrapers and loose connectivity.

180
00:15:47,629 --> 00:15:54,560
You don't want them to access your app and
11 loose them because you use 40 per cent

181
00:15:54,560 --> 00:15:59,110
of your users if it takes more tan three seconds
for your app to load.

182
00:15:59,110 --> 00:16:05,209
Aside from that, radio cell towers preserve
birdie between transitioning between high

183
00:16:05,209 --> 00:16:06,589
and low states.

184
00:16:06,589 --> 00:16:14,639
If they might access your app, they might
be accessing it during the low period of power-gridding

185
00:16:14,639 --> 00:16:18,839
and you lose them because the app took too
long to load.

186
00:16:18,839 --> 00:16:25,810
So, by designing for low latency first, you're
making substantial improvements in performance.

187
00:16:25,810 --> 00:16:29,750
It is really imperative that sue design your
app for - that you design your app for performance,

188
00:16:29,750 --> 00:16:38,379
and getting a baseline in spite of low connectivity
is really, really important.

189
00:16:38,379 --> 00:16:39,509
Let's go back to Flip cart.

190
00:16:39,509 --> 00:16:44,560
This is an example I mentioned earlier.

191
00:16:44,560 --> 00:16:48,279
They did a few things really to increase the
speed of their collection.

192
00:16:48,279 --> 00:16:53,240
They added a splash screen, they stitched
to using service worker so they could handle

193
00:16:53,240 --> 00:16:55,100
negotiations.

194
00:16:55,100 --> 00:16:59,960
They sort of added smoother animations to
their site.

195
00:16:59,960 --> 00:17:04,449
Because of that, they had three times less
data usage overall, they had a 40 per cent

196
00:17:04,449 --> 00:17:09,690
higher engagement rate, increased their conversion
by 70 per cent, and all in all, users spent

197
00:17:09,690 --> 00:17:17,760
more time on their platform.

198
00:17:17,760 --> 00:17:22,180
So this brings me to one more challenge I
want to talk about.

199
00:17:22,180 --> 00:17:28,810
In regard to Offline First, design patterns
are still being invented there isn't one way

200
00:17:28,810 --> 00:17:32,930
that the user can see the offline state.

201
00:17:32,930 --> 00:17:34,560
There's no standard for this.

202
00:17:34,560 --> 00:17:39,260
This is still something that needs to be developed
by the community.

203
00:17:39,260 --> 00:17:46,270
Steve Travathon, one of the organisers of
offline camp and is the founder of Makingmodel

204
00:17:46,270 --> 00:17:47,270
Co.

205
00:17:47,270 --> 00:17:53,690
He wrote a really amazing post for design
patterns for offline states with three tenets

206
00:17:53,690 --> 00:17:58,360
that he talked about: freshness, reach, and
assurance.

207
00:17:58,360 --> 00:18:02,210
When we talk about freshness, we're thinking
about how fresh is the data?

208
00:18:02,210 --> 00:18:05,790
How are you communicating the freshness of
data to your users?

209
00:18:05,790 --> 00:18:11,400
You could communicate this in a lot of different
way, and you can say here's a timestamp, the

210
00:18:11,400 --> 00:18:18,200
last time it was viewed on this day, there's
an update available, so refresh your app,

211
00:18:18,200 --> 00:18:19,210
that kind of.

212
00:18:19,210 --> 00:18:23,390
When we are looking at Reach, we want to know
is it the data reachable or not?

213
00:18:23,390 --> 00:18:25,970
That should be clearly communicated.

214
00:18:25,970 --> 00:18:29,720
So, is it clear that I can perform an action
right now?

215
00:18:29,720 --> 00:18:33,700
Or is it really obvious that I need to wait
until I'm in connectivity to be able to do

216
00:18:33,700 --> 00:18:39,320
this, so checking out your cart of items you
want to buy, that kind of thing.

217
00:18:39,320 --> 00:18:47,060
An assurance when we're talking about how
much is my responsibility as a user to save

218
00:18:47,060 --> 00:18:48,320
the data that I have?

219
00:18:48,320 --> 00:18:56,590
Is to, when I lose - so, when I lose connectivity
do I have the experience to stave the writing,

220
00:18:56,590 --> 00:19:04,840
and we've experienced where we write a long
paragraph, click send, and we have to start

221
00:19:04,840 --> 00:19:05,970
over.

222
00:19:05,970 --> 00:19:08,420
We don't want to do that to our users.

223
00:19:08,420 --> 00:19:14,220
You want to think how are we going to communicate
this in the browser.

224
00:19:14,220 --> 00:19:15,220
Is there a save button?

225
00:19:15,220 --> 00:19:16,560
Still still saving.

226
00:19:16,560 --> 00:19:17,870
Is it in the middle of syncing?

227
00:19:17,870 --> 00:19:21,700
Should I wait?

228
00:19:21,700 --> 00:19:25,690
It's going to happen at some point.

229
00:19:25,690 --> 00:19:30,280
So this is really still a problem that we
need your help to solve and this is what the

230
00:19:30,280 --> 00:19:37,140
JavaScript community, this is, there are many
opportunities for you still to contribute.

231
00:19:37,140 --> 00:19:42,490
This this is where you can connect with the
community, there's a Slack organisation which

232
00:19:42,490 --> 00:19:48,490
is active and you can talk to all of the people
who are involved with all the projects that

233
00:19:48,490 --> 00:19:55,320
I discussed, and offline camp is a real cool,
a fun un-conference way to contribute to the

234
00:19:55,320 --> 00:19:58,930
community, talk about the things that you're
doing because the community wants to hear

235
00:19:58,930 --> 00:20:04,490
what you're doing and contributing already
and how these problems might be solved out

236
00:20:04,490 --> 00:20:05,530
there.

237
00:20:05,530 --> 00:20:09,140
So, yes, we really want to hear what you're
doing.

238
00:20:09,140 --> 00:20:10,820
Please connect with us.

239
00:20:10,820 --> 00:20:11,990
Thanks to Patricia Garc�a.

240
00:20:11,990 --> 00:20:23,790
If you attended JSConf last we are, you may
have heard her talk, "Good tech for hard places"

241
00:20:23,790 --> 00:20:27,910
another offline first project that you should
look into.

242
00:20:27,910 --> 00:20:32,540
I've also included a plethora of really nifty
tools that you can do if you want to research

243
00:20:32,540 --> 00:20:40,530
Offline First, including a lot of further
reading for the articles that I read in preparation

244
00:20:40,530 --> 00:20:45,400
for this talk, and you can also access them
on my slides.

245
00:20:45,400 --> 00:20:48,500
They should be Tweeted right now.

246
00:20:48,500 --> 00:20:50,900
You can get them through this link here.

247
00:20:50,900 --> 00:20:51,900
Thank you so much.

248
00:20:51,900 --> 00:20:52,900
That's all I have today.

249
00:20:52,900 --> 00:20:53,900
[Applause].

250
00:20:53,900 --> 00:20:54,900
>> Thank you, that was awesome.

251
00:20:54,900 --> 00:20:55,900
What an awesome book of talks.

252
00:20:55,900 --> 00:20:56,900
I hope that everyone here in this room who
was watching carefully are really passionate

253
00:20:56,900 --> 00:20:57,900
about working on some performance bottlenecks
and improvements after they leave JSConf.

254
00:20:57,900 --> 00:20:58,900
There are two things that you have to know
about the upcoming coffee break: first, obviously,

255
00:20:58,900 --> 00:20:59,900
there is a coffee break.

256
00:20:59,900 --> 00:21:00,900
Secondly, there is a TC39 panel happening
after the break, and, for those of you like

257
00:21:00,900 --> 00:21:01,900
myself who don't have any idea what that means,
if you are curious how JavaScript is actually

258
00:21:01,900 --> 00:21:02,900
maintained as a language, what gets standardised,
and how all of those decisions are being made,

259
00:21:02,900 --> 00:21:03,900
and, if you want to contribute or have influence
on that, you should really be in this room

260
00:21:03,900 --> 00:21:04,900
at 4.30.

261
00:21:04,900 --> 00:21:05,900
Fake news, second, third point, go to the
community area, find folks from Live.js who

262
00:21:05,900 --> 00:21:06,900
are having a presentation -- \{ live : JS \}. If
you haven't teen it, go there.

263
00:21:06,900 --> 00:21:07,900
Go and see it for the second time!

264
00:21:07,900 --> 00:21:08,900
See you after the break.

