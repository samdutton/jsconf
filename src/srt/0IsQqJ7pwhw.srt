1
00:00:00,000 --> 00:00:03,720

about how browsers work I always had the

2
00:00:03,720 --> 00:00:05,730
passion to understand the underlying

3
00:00:05,730 --> 00:00:08,730
principles of how things actually work

4
00:00:08,730 --> 00:00:11,400
and by understanding those underlying

5
00:00:11,400 --> 00:00:14,400
principles it helped me to develop

6
00:00:14,400 --> 00:00:18,779
things on top of it so recently I've

7
00:00:18,779 --> 00:00:21,600
decided that I don't really know how

8
00:00:21,600 --> 00:00:24,390
browsers work and I wanted to learn more

9
00:00:24,390 --> 00:00:29,519
about it so beforehand I had to have a

10
00:00:29,519 --> 00:00:33,719
very big disclaimer I'm not a browser

11
00:00:33,719 --> 00:00:38,390
engineer I'm not my work is not

12
00:00:38,390 --> 00:00:41,190
developing browsers but they still wants

13
00:00:41,190 --> 00:00:44,670
to explore what browsers are all about

14
00:00:44,670 --> 00:00:49,079
and how they do their magic this is just

15
00:00:49,079 --> 00:00:52,770
me being humble that in any there might

16
00:00:52,770 --> 00:00:55,140
be questions from the audience that I

17
00:00:55,140 --> 00:01:01,530
might not be able to answer so let's

18
00:01:01,530 --> 00:01:03,830
start with the browser components a

19
00:01:03,830 --> 00:01:07,020
browser consists of user interface layer

20
00:01:07,020 --> 00:01:10,130
a browser engine a rendering engine

21
00:01:10,130 --> 00:01:13,590
networking JavaScript interpreter UI

22
00:01:13,590 --> 00:01:17,250
beckoned and data persistence user

23
00:01:17,250 --> 00:01:21,390
interface I would define as everything

24
00:01:21,390 --> 00:01:24,799
which you see but you can't manipulate

25
00:01:24,799 --> 00:01:28,740
so the address bar the settings of your

26
00:01:28,740 --> 00:01:31,020
browser's you can't really manipulate it

27
00:01:31,020 --> 00:01:34,890
and that is a user interface user

28
00:01:34,890 --> 00:01:37,470
interface is working together with the

29
00:01:37,470 --> 00:01:42,119
UI back end and this UI back end is the

30
00:01:42,119 --> 00:01:47,399
design to develop basic widgets browser

31
00:01:47,399 --> 00:01:50,430
engine works as a mediator between user

32
00:01:50,430 --> 00:01:55,170
interface and the rendering engine so if

33
00:01:55,170 --> 00:01:58,920
you are to press refresh on your browser

34
00:01:58,920 --> 00:02:02,759
then the browser engine would take that

35
00:02:02,759 --> 00:02:08,000
command and execute it for you and

36
00:02:08,000 --> 00:02:13,840
refresh the webpage so rendering engine

37
00:02:13,840 --> 00:02:18,099
the part which parses the HTML CSS in

38
00:02:18,099 --> 00:02:21,879
JavaScript and based on the results of

39
00:02:21,879 --> 00:02:24,730
that which is being parsed it's going to

40
00:02:24,730 --> 00:02:29,980
display the page so networking it's like

41
00:02:29,980 --> 00:02:33,280
just when you have an HTTPS or an HTTP

42
00:02:33,280 --> 00:02:36,849
request networking layer is going to

43
00:02:36,849 --> 00:02:39,340
make sure that the resources are loaded

44
00:02:39,340 --> 00:02:42,010
JavaScript interpreter is going to

45
00:02:42,010 --> 00:02:44,379
interpret the JavaScript and the data

46
00:02:44,379 --> 00:02:47,769
persistence so here we are talking about

47
00:02:47,769 --> 00:02:51,299
cookies local storage index DB

48
00:02:51,299 --> 00:02:56,470
filesystem etc so as you can see browser

49
00:02:56,470 --> 00:03:00,069
consists of lots of layers and it it

50
00:03:00,069 --> 00:03:02,170
would be very challenging to cover every

51
00:03:02,170 --> 00:03:05,950
single one of them in one talk and since

52
00:03:05,950 --> 00:03:08,650
this is a front-end conference I'm going

53
00:03:08,650 --> 00:03:14,500
to focus on the rendering engine so

54
00:03:14,500 --> 00:03:17,319
first of all let's take a look at the

55
00:03:17,319 --> 00:03:20,200
basic rendering engine flow so what

56
00:03:20,200 --> 00:03:22,660
happens first time when you open the

57
00:03:22,660 --> 00:03:25,690
website and the rendering engine is

58
00:03:25,690 --> 00:03:30,299
being started first is being parsed then

59
00:03:30,299 --> 00:03:33,910
after the parsing step the tree is

60
00:03:33,910 --> 00:03:36,970
rendered then after that tree is

61
00:03:36,970 --> 00:03:39,880
rendered then something called layout is

62
00:03:39,880 --> 00:03:43,540
executed and depending on the browser it

63
00:03:43,540 --> 00:03:47,799
may be called layout or reflow and after

64
00:03:47,799 --> 00:03:50,500
that step comes the final step called

65
00:03:50,500 --> 00:03:53,139
paint which just goes out the objects

66
00:03:53,139 --> 00:04:00,250
with colors so right now I'm going to

67
00:04:00,250 --> 00:04:02,260
focus on each of those steps in detail

68
00:04:02,260 --> 00:04:07,180
starting first with the parsing if you

69
00:04:07,180 --> 00:04:09,790
were to develop the parser you would

70
00:04:09,790 --> 00:04:11,650
soon see that there are two types of

71
00:04:11,650 --> 00:04:13,870
parsers there could be a conventional

72
00:04:13,870 --> 00:04:18,840
parser and unconventional parser for

73
00:04:18,840 --> 00:04:21,820
conventional parsers you can use them to

74
00:04:21,820 --> 00:04:24,849
parse CSS and JavaScript but for the

75
00:04:24,849 --> 00:04:27,050
unconventional parsers you are

76
00:04:27,050 --> 00:04:29,090
of unconventional parts you are going to

77
00:04:29,090 --> 00:04:31,819
need to use for HTML I'm going to

78
00:04:31,819 --> 00:04:34,099
explain first the conventional parsers

79
00:04:34,099 --> 00:04:37,190
and then I'm going to explain why

80
00:04:37,190 --> 00:04:40,129
HTML requires an unconventional parser

81
00:04:40,129 --> 00:04:47,180
and how it uses it so this is parsing

82
00:04:47,180 --> 00:04:51,250
one on one if you were to go to

83
00:04:51,250 --> 00:04:53,960
Wikipedia you would soon find that

84
00:04:53,960 --> 00:04:56,930
parsing can be defined as translating a

85
00:04:56,930 --> 00:04:58,909
document into a structure that code can

86
00:04:58,909 --> 00:05:02,710
use so let's now focus what that means

87
00:05:02,710 --> 00:05:06,169
you see this picture over here it

88
00:05:06,169 --> 00:05:09,940
consists of a mathematical equation and

89
00:05:09,940 --> 00:05:13,419
we need to parse somehow parse this

90
00:05:13,419 --> 00:05:16,129
equation to a certain tree which our

91
00:05:16,129 --> 00:05:22,210
code can later on use so the parsing

92
00:05:22,210 --> 00:05:27,949
actually consists of a tooth like

93
00:05:27,949 --> 00:05:31,900
parsing consists of grammar and grammar

94
00:05:31,900 --> 00:05:35,889
entails vocabulary and syntax rules

95
00:05:35,889 --> 00:05:39,680
vocabulary is like in our language we

96
00:05:39,680 --> 00:05:43,400
have ABCD or more specifically we have

97
00:05:43,400 --> 00:05:48,139
words and here you have instead of the

98
00:05:48,139 --> 00:05:50,000
words you have numbers for this

99
00:05:50,000 --> 00:05:53,110
particular case and you have these

100
00:05:53,110 --> 00:05:55,940
mathematical symbols like plus and the

101
00:05:55,940 --> 00:06:00,379
multiplication sign so those those

102
00:06:00,379 --> 00:06:03,379
numbers and those symbols are going to

103
00:06:03,379 --> 00:06:07,090
be our vocabulary syntax rules is

104
00:06:07,090 --> 00:06:10,699
basically how those integers so

105
00:06:10,699 --> 00:06:13,759
basically how vocabulary interacts so

106
00:06:13,759 --> 00:06:18,289
you know that the multiplication sign

107
00:06:18,289 --> 00:06:21,289
can be only be between two integers

108
00:06:21,289 --> 00:06:23,900
floats or whatever but in this specific

109
00:06:23,900 --> 00:06:25,400
case let's focus on it being just

110
00:06:25,400 --> 00:06:29,629
integers and plus can be before an

111
00:06:29,629 --> 00:06:32,120
integer or an author an integer or

112
00:06:32,120 --> 00:06:36,919
between two injured integers and once we

113
00:06:36,919 --> 00:06:39,710
take a look and how that's being parsed

114
00:06:39,710 --> 00:06:40,500
we can see

115
00:06:40,500 --> 00:06:45,510
that that plus is that Gaza is at the

116
00:06:45,510 --> 00:06:48,600
top at left side of the three you can

117
00:06:48,600 --> 00:06:51,140
see one on the right side you see

118
00:06:51,140 --> 00:06:53,340
multiplication sign together with

119
00:06:53,340 --> 00:06:58,200
numbers two and three and you can feed

120
00:06:58,200 --> 00:07:00,630
this to a certain code which is going to

121
00:07:00,630 --> 00:07:02,850
take advantage of it and generate some

122
00:07:02,850 --> 00:07:08,640
kind of result so let's go a little bit

123
00:07:08,640 --> 00:07:12,380
deeper into it so parsing contains

124
00:07:12,380 --> 00:07:15,680
lexical analysis and syntax analysis

125
00:07:15,680 --> 00:07:19,410
lexical analysis is usually being also

126
00:07:19,410 --> 00:07:23,930
called lectures or tokenizer z' it is

127
00:07:23,930 --> 00:07:27,960
the that part of parser is basically

128
00:07:27,960 --> 00:07:31,470
creating the tokens and tokens are the

129
00:07:31,470 --> 00:07:35,400
smallest elements that a parser can use

130
00:07:35,400 --> 00:07:41,150
if here and the second thing is parsers

131
00:07:41,150 --> 00:07:44,580
parses apply the syntax rules here we

132
00:07:44,580 --> 00:07:48,630
can see a diagram where we have a lexer

133
00:07:48,630 --> 00:07:51,870
and parser parser is going to constantly

134
00:07:51,870 --> 00:07:55,460
request tokens from the lecture and

135
00:07:55,460 --> 00:07:58,380
lecture is going to reply with with

136
00:07:58,380 --> 00:08:02,310
sending the tokens parser is always

137
00:08:02,310 --> 00:08:05,550
going to try to use the token based on

138
00:08:05,550 --> 00:08:07,770
the syntax rules but if that is not

139
00:08:07,770 --> 00:08:10,380
possible it is going to store the token

140
00:08:10,380 --> 00:08:13,860
and at later time is going to see if

141
00:08:13,860 --> 00:08:18,460
that token can be matched to something

142
00:08:18,470 --> 00:08:22,229
so you could go the route of developing

143
00:08:22,229 --> 00:08:25,800
your own parsers and that might be a

144
00:08:25,800 --> 00:08:29,490
good thing to do but usually there are

145
00:08:29,490 --> 00:08:32,280
ready available parsers like flex legs

146
00:08:32,280 --> 00:08:36,120
yak and BISM and for these parsers you

147
00:08:36,120 --> 00:08:38,099
had to just feed it with your grammar

148
00:08:38,099 --> 00:08:42,320
and they are going to work using it and

149
00:08:42,320 --> 00:08:45,540
the funny thing is even WebKit is using

150
00:08:45,540 --> 00:08:48,930
two of these parsers WebKit is using a

151
00:08:48,930 --> 00:08:52,800
flex four lecture as lecture and bison

152
00:08:52,800 --> 00:08:56,560
as a

153
00:08:56,570 --> 00:09:00,120
so right now let's move to the

154
00:09:00,120 --> 00:09:04,710
unconventional parsers I said that for

155
00:09:04,710 --> 00:09:07,520
the conventional parses you could use

156
00:09:07,520 --> 00:09:12,120
them for parsing CSS and JavaScript but

157
00:09:12,120 --> 00:09:16,410
for but for HTML that doesn't work and

158
00:09:16,410 --> 00:09:19,440
it doesn't work because hTML is not

159
00:09:19,440 --> 00:09:23,970
context-free grammar to be to put it in

160
00:09:23,970 --> 00:09:29,160
layman's terms that means that as you

161
00:09:29,160 --> 00:09:32,840
are trying as you're parsing the code

162
00:09:32,840 --> 00:09:37,290
the HTML the h the browser is going to

163
00:09:37,290 --> 00:09:39,930
try to immediately recover from any

164
00:09:39,930 --> 00:09:41,060
[Music]

165
00:09:41,060 --> 00:09:43,710
errors that might occur on the way and

166
00:09:43,710 --> 00:09:47,820
here we can see two images one image is

167
00:09:47,820 --> 00:09:50,160
displaying a perfectly valid html5

168
00:09:50,160 --> 00:09:53,640
document and the other one is not

169
00:09:53,640 --> 00:09:56,580
displaying a no-bail html5 document you

170
00:09:56,580 --> 00:09:59,430
can see that on the right picture the

171
00:09:59,430 --> 00:10:01,860
closing text for paragraphs and div tag

172
00:10:01,860 --> 00:10:05,310
is missing but even because those two

173
00:10:05,310 --> 00:10:07,380
tags are missing those cool two closing

174
00:10:07,380 --> 00:10:09,600
tags are missing the browser is still

175
00:10:09,600 --> 00:10:13,590
going to render the render it correctly

176
00:10:13,590 --> 00:10:17,300
how it's going to do that exactly it is

177
00:10:17,300 --> 00:10:20,460
automatically going to add closing tags

178
00:10:20,460 --> 00:10:23,850
for the paragraphs and the closing tag

179
00:10:23,850 --> 00:10:26,220
for the DES and then you're going to get

180
00:10:26,220 --> 00:10:29,130
your page rendered because of that you

181
00:10:29,130 --> 00:10:33,170
can't use regular conventional parsers

182
00:10:33,170 --> 00:10:37,890
so for there's still even though you're

183
00:10:37,890 --> 00:10:39,720
not using conventional parsers they

184
00:10:39,720 --> 00:10:42,020
still have to be some kind of rules and

185
00:10:42,020 --> 00:10:44,940
those rules are defined by the HTML

186
00:10:44,940 --> 00:10:48,140
document type definition defined by the

187
00:10:48,140 --> 00:10:54,360
World Wide Web Consortium this is one

188
00:10:54,360 --> 00:10:57,780
more rule or one more example where you

189
00:10:57,780 --> 00:11:01,320
might go so this example is obviously

190
00:11:01,320 --> 00:11:05,340
going to work but if you try to have

191
00:11:05,340 --> 00:11:06,340
maximum

192
00:11:06,340 --> 00:11:08,770
of month of text at some point browser

193
00:11:08,770 --> 00:11:11,710
is just going to ignore them there is

194
00:11:11,710 --> 00:11:14,830
one website which has approximately 1000

195
00:11:14,830 --> 00:11:18,840
and 500 texts going one after each other

196
00:11:18,840 --> 00:11:22,390
which are all of the same kind and even

197
00:11:22,390 --> 00:11:24,910
though that website has so many text it

198
00:11:24,910 --> 00:11:30,790
is displaying perfectly normally so how

199
00:11:30,790 --> 00:11:35,320
do you parse the HTML document is fairly

200
00:11:35,320 --> 00:11:39,460
simple you have you have your valid

201
00:11:39,460 --> 00:11:42,220
html5 document and if you remember the

202
00:11:42,220 --> 00:11:44,920
principle from the conventional parsers

203
00:11:44,920 --> 00:11:48,850
the same thing can be applied here so

204
00:11:48,850 --> 00:11:50,860
here the only difference would be that

205
00:11:50,860 --> 00:11:52,779
your first look going to try to look for

206
00:11:52,779 --> 00:11:55,779
the opening tag and then you are going

207
00:11:55,779 --> 00:11:57,640
to try to match that tag with the

208
00:11:57,640 --> 00:11:59,860
closing tag then that's how you're going

209
00:11:59,860 --> 00:12:03,190
to slowly and incrementally build your

210
00:12:03,190 --> 00:12:06,940
three which you later can use to render

211
00:12:06,940 --> 00:12:13,210
things so right now let's move on to the

212
00:12:13,210 --> 00:12:16,710
next step which is called render tree

213
00:12:16,710 --> 00:12:19,510
render tree is generated while the Dom

214
00:12:19,510 --> 00:12:22,240
tree is constructed so on one side you

215
00:12:22,240 --> 00:12:24,520
have done 3 which is being constructed

216
00:12:24,520 --> 00:12:26,770
and at the same time rendering of the

217
00:12:26,770 --> 00:12:29,200
render tree of render 3 is being

218
00:12:29,200 --> 00:12:31,750
constructed so render tree is basically

219
00:12:31,750 --> 00:12:35,170
visual elements and in in which order

220
00:12:35,170 --> 00:12:39,370
they need to be displayed again based on

221
00:12:39,370 --> 00:12:42,010
the browser you might have the

222
00:12:42,010 --> 00:12:44,050
terminology might be different for

223
00:12:44,050 --> 00:12:46,060
example it might be called the renderer

224
00:12:46,060 --> 00:12:48,610
or it might be called render objects

225
00:12:48,610 --> 00:12:50,800
those are the small elements which this

226
00:12:50,800 --> 00:12:54,610
3 consists of and one important thing to

227
00:12:54,610 --> 00:12:56,920
note is that those render objects those

228
00:12:56,920 --> 00:12:58,630
smallest elements are basically

229
00:12:58,630 --> 00:13:03,570
rectangles now when you go and try to

230
00:13:03,570 --> 00:13:07,180
render it down and you try to

231
00:13:07,180 --> 00:13:09,160
investigate hope codes how it works

232
00:13:09,160 --> 00:13:11,440
at some point you are going to stumble

233
00:13:11,440 --> 00:13:15,310
upon a switch case which based on the

234
00:13:15,310 --> 00:13:19,790
whether it is whether it is render not

235
00:13:19,790 --> 00:13:22,459
based on the definition of Dom element

236
00:13:22,459 --> 00:13:24,679
it's going to render it as render non

237
00:13:24,679 --> 00:13:27,529
render a line rendered block inline

238
00:13:27,529 --> 00:13:31,759
block or list item now let's move on to

239
00:13:31,759 --> 00:13:36,410
the layout so layout or also called

240
00:13:36,410 --> 00:13:40,669
reflow in Mozilla browsers calculates

241
00:13:40,669 --> 00:13:44,089
position and the size so most of the

242
00:13:44,089 --> 00:13:46,279
times it is possibly to calculate every

243
00:13:46,279 --> 00:13:48,709
single thing in one path but in the off

244
00:13:48,709 --> 00:13:50,629
chance that it is not possible then it

245
00:13:50,629 --> 00:13:53,480
is going to do multiple times and try to

246
00:13:53,480 --> 00:13:57,169
calculate the size and position of each

247
00:13:57,169 --> 00:13:59,959
and every element it is a recursive

248
00:13:59,959 --> 00:14:02,809
process and usually it begins as the

249
00:14:02,809 --> 00:14:08,419
root object which is in HTML tag now it

250
00:14:08,419 --> 00:14:10,910
also has something called dirty bed

251
00:14:10,910 --> 00:14:15,290
system this system make sure that you

252
00:14:15,290 --> 00:14:19,119
don't have to run to lay out on each

253
00:14:19,119 --> 00:14:22,040
browser interaction so let's say you

254
00:14:22,040 --> 00:14:29,149
just you just modify - no - nodes - Dom

255
00:14:29,149 --> 00:14:32,509
elements a way inside of the tree there

256
00:14:32,509 --> 00:14:34,699
is no need to re render the whole tree

257
00:14:34,699 --> 00:14:38,299
you could just rear-entry layout those

258
00:14:38,299 --> 00:14:44,179
two and not worry about the rest but it

259
00:14:44,179 --> 00:14:47,059
is so there is also this global and

260
00:14:47,059 --> 00:14:51,289
incremental layout global layout is when

261
00:14:51,289 --> 00:14:56,029
you're doing a resize of your browser or

262
00:14:56,029 --> 00:15:00,079
you apply new font then the whole layout

263
00:15:00,079 --> 00:15:02,600
is going to be executed through the

264
00:15:02,600 --> 00:15:06,259
whole page and the incremental layout is

265
00:15:06,259 --> 00:15:09,379
basically using the dirty bit system to

266
00:15:09,379 --> 00:15:10,939
render some of the things but not

267
00:15:10,939 --> 00:15:17,139
everything so here I have a video about

268
00:15:17,139 --> 00:15:21,739
get quarry flow so as you can notice in

269
00:15:21,739 --> 00:15:28,220
Mozilla it's called reflow this is this

270
00:15:28,220 --> 00:15:30,049
is just showing you how to layout

271
00:15:30,049 --> 00:15:32,839
process happens if you see those

272
00:15:32,839 --> 00:15:34,040
rectangles

273
00:15:34,040 --> 00:15:36,710
and if you paid attention those render

274
00:15:36,710 --> 00:15:40,790
objects are these rectangles and layout

275
00:15:40,790 --> 00:15:42,980
process just calculates where each step

276
00:15:42,980 --> 00:15:45,020
where each rectangle needs to be

277
00:15:45,020 --> 00:15:49,820
positioned this was done by some

278
00:15:49,820 --> 00:15:53,110
Japanese hackers or something like that

279
00:15:53,110 --> 00:16:00,440
and afterwards afterwards they share

280
00:16:00,440 --> 00:16:02,600
this and it was very beneficial in

281
00:16:02,600 --> 00:16:08,910
understanding how browsers actually work

282
00:16:08,920 --> 00:16:12,920
the final step is painting so you saw

283
00:16:12,920 --> 00:16:14,870
those rectangles you just now need to

284
00:16:14,870 --> 00:16:17,390
fill them with the color and that's what

285
00:16:17,390 --> 00:16:20,840
the paint layer is doing paint is going

286
00:16:20,840 --> 00:16:23,740
through the render tree and basically

287
00:16:23,740 --> 00:16:27,140
executing recursively the paint method

288
00:16:27,140 --> 00:16:32,210
which displays things on the page again

289
00:16:32,210 --> 00:16:36,170
like with the layout there is a global

290
00:16:36,170 --> 00:16:40,340
and incremental painting global if it

291
00:16:40,340 --> 00:16:42,350
good there is global painting needed

292
00:16:42,350 --> 00:16:44,390
then the whole page is going to be

293
00:16:44,390 --> 00:16:46,700
repainted and incremental painting is

294
00:16:46,700 --> 00:16:49,250
using the same dirty bit system so only

295
00:16:49,250 --> 00:16:51,680
some crucial parts are being repainted

296
00:16:51,680 --> 00:16:56,270
while other are being as it is the

297
00:16:56,270 --> 00:16:58,550
painting order II is usually background

298
00:16:58,550 --> 00:17:00,800
color than background image and bored a

299
00:17:00,800 --> 00:17:03,830
border and children and finally outline

300
00:17:03,830 --> 00:17:07,130
if you ever had a div which has a

301
00:17:07,130 --> 00:17:08,959
background color and then they cross

302
00:17:08,959 --> 00:17:11,450
image and let's say the background image

303
00:17:11,450 --> 00:17:14,480
was particularly big you might have seen

304
00:17:14,480 --> 00:17:18,200
that the first thing is going to be the

305
00:17:18,200 --> 00:17:19,820
background color and other words you're

306
00:17:19,820 --> 00:17:26,270
going to get your image now I know that

307
00:17:26,270 --> 00:17:29,870
this thought was very basic but I I

308
00:17:29,870 --> 00:17:33,590
wanted to do it basic and understand the

309
00:17:33,590 --> 00:17:36,170
principles behind of the web browsers

310
00:17:36,170 --> 00:17:39,470
and I would like to impart few words of

311
00:17:39,470 --> 00:17:42,170
wisdom which is I hear and I forget I

312
00:17:42,170 --> 00:17:45,280
see and I remember I do and I understand

313
00:17:45,280 --> 00:17:47,120
what it was

314
00:17:47,120 --> 00:17:50,330
by Confucius and it basically means you

315
00:17:50,330 --> 00:17:52,760
really understand something when you try

316
00:17:52,760 --> 00:17:56,950
to build something so I would try to

317
00:17:56,950 --> 00:18:01,130
invite you if you have the time the

318
00:18:01,130 --> 00:18:03,919
resolve and the interest develop your

319
00:18:03,919 --> 00:18:06,620
own browser rendering engine because

320
00:18:06,620 --> 00:18:08,929
only then you're going to truly

321
00:18:08,929 --> 00:18:10,970
understand right now you saw this

322
00:18:10,970 --> 00:18:13,460
presentation and you might remember it

323
00:18:13,460 --> 00:18:17,029
but until you get dirty get your hands

324
00:18:17,029 --> 00:18:19,789
dirty you're not going to understand the

325
00:18:19,789 --> 00:18:23,260
peculiar intricacies of the browser if

326
00:18:23,260 --> 00:18:26,840
you were to go that step and you want to

327
00:18:26,840 --> 00:18:29,029
build your own browser rendering engine

328
00:18:29,029 --> 00:18:31,399
account two very interesting links that

329
00:18:31,399 --> 00:18:33,950
I decided to share the first one is how

330
00:18:33,950 --> 00:18:39,440
browsers work it is it is basically what

331
00:18:39,440 --> 00:18:43,429
this talk is about Barry have a woman

332
00:18:43,429 --> 00:18:47,090
who decides to do the very same thing as

333
00:18:47,090 --> 00:18:51,890
I did but way before me and she took the

334
00:18:51,890 --> 00:18:54,460
source code of Chrome and tried to see

335
00:18:54,460 --> 00:18:56,289
how chrome works

336
00:18:56,289 --> 00:18:59,090
this presentation was based on her work

337
00:18:59,090 --> 00:19:02,299
and later on I stumbled upon about let's

338
00:19:02,299 --> 00:19:06,100
build a browser engine a person from

339
00:19:06,100 --> 00:19:10,010
Mozilla team decided that just working

340
00:19:10,010 --> 00:19:12,950
on on a browser as a part of the big

341
00:19:12,950 --> 00:19:16,149
unit is not enough and he decides

342
00:19:16,149 --> 00:19:19,429
through the small seven part series to

343
00:19:19,429 --> 00:19:21,409
develop a toy rendering engine

344
00:19:21,409 --> 00:19:23,539
particularly because he wanted to see

345
00:19:23,539 --> 00:19:26,840
how it is to develop it on your own he

346
00:19:26,840 --> 00:19:30,950
managed to in approximately thousand

347
00:19:30,950 --> 00:19:32,720
lines of code to develop the rendering

348
00:19:32,720 --> 00:19:35,659
engine which is able to display basic

349
00:19:35,659 --> 00:19:42,350
stuff yeah I mean this is the the end of

350
00:19:42,350 --> 00:19:43,970
the presentation if you want to follow

351
00:19:43,970 --> 00:19:48,830
me on Twitter - my username is here and

352
00:19:48,830 --> 00:19:56,380
that's

