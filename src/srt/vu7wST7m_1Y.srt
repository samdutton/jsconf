1
00:00:08,770 --> 00:00:11,000

those the first question we have for

2
00:00:11,000 --> 00:00:13,040
everybody is who here has heard of

3
00:00:13,040 --> 00:00:16,160
couchdb there's not very long ago those

4
00:00:16,160 --> 00:00:17,900
hands wouldn't be going up so what you

5
00:00:17,900 --> 00:00:21,740
guys Rock just for that yeah and so

6
00:00:21,740 --> 00:00:25,150
who's used it a little bit who likes it

7
00:00:25,150 --> 00:00:29,150
it's good more hands cool we came to the

8
00:00:29,150 --> 00:00:31,970
right place so I'm Chris Anderson I'm

9
00:00:31,970 --> 00:00:34,640
one of the couch TV committers I'm kind

10
00:00:34,640 --> 00:00:36,470
of interested in the HTTP like restful

11
00:00:36,470 --> 00:00:39,649
side of it and we're really nice guys so

12
00:00:39,649 --> 00:00:40,820
we can't get to everything in the stock

13
00:00:40,820 --> 00:00:42,170
would come find us later and we'll talk

14
00:00:42,170 --> 00:00:43,940
all about CouchDB yeah my name is young

15
00:00:43,940 --> 00:00:45,770
Nina I work also and catch TBN I'm more

16
00:00:45,770 --> 00:00:47,989
into the I used to do mysql was a big

17
00:00:47,989 --> 00:00:49,489
pain now I've got this other cool thing

18
00:00:49,489 --> 00:00:52,010
working so that's my background and

19
00:00:52,010 --> 00:00:53,840
we'll talk about cool things you can do

20
00:00:53,840 --> 00:00:57,710
with card should be so so rather than

21
00:00:57,710 --> 00:00:58,879
you know because we could give an

22
00:00:58,879 --> 00:01:02,300
introductory talk and talk all about you

23
00:01:02,300 --> 00:01:04,430
know like the basics of couchdb but you

24
00:01:04,430 --> 00:01:05,840
already know that so we're going to talk

25
00:01:05,840 --> 00:01:07,909
a little bit about what happens once

26
00:01:07,909 --> 00:01:09,470
you're already using couchdb wow you

27
00:01:09,470 --> 00:01:11,090
have to think differently writing

28
00:01:11,090 --> 00:01:13,250
applications or how your how you can

29
00:01:13,250 --> 00:01:16,490
think differently if you want so yeah

30
00:01:16,490 --> 00:01:18,460
we're going to focus on programming

31
00:01:18,460 --> 00:01:20,950
applications that live at the edge

32
00:01:20,950 --> 00:01:23,390
there's two features a couch TV that

33
00:01:23,390 --> 00:01:25,390
make this possible one of them is that

34
00:01:25,390 --> 00:01:27,320
applications can be documents and the

35
00:01:27,320 --> 00:01:29,240
other one is that replication is awesome

36
00:01:29,240 --> 00:01:31,040
and when you combine those two you can

37
00:01:31,040 --> 00:01:33,140
get applications that live at the edge

38
00:01:33,140 --> 00:01:35,119
of the network okay we'll talk all about

39
00:01:35,119 --> 00:01:38,090
that good oh yeah go ahead but before we

40
00:01:38,090 --> 00:01:39,710
do that a little bit of CouchDB and

41
00:01:39,710 --> 00:01:43,220
yalls an expert's so this is this is our

42
00:01:43,220 --> 00:01:45,110
bullet points this the agenda that like

43
00:01:45,110 --> 00:01:46,939
the things we talked about on KGB so

44
00:01:46,939 --> 00:01:48,770
catchy beats a document based database

45
00:01:48,770 --> 00:01:50,630
which is not a relational database so

46
00:01:50,630 --> 00:01:52,329
you don't have any tables any schemer

47
00:01:52,329 --> 00:01:54,710
but you have this thing called documents

48
00:01:54,710 --> 00:01:56,810
which you know cases json documents so

49
00:01:56,810 --> 00:01:58,630
you all know Jason off of course and

50
00:01:58,630 --> 00:02:01,100
what you can do instead of figuring out

51
00:02:01,100 --> 00:02:03,229
how to like take your data probe that

52
00:02:03,229 --> 00:02:04,850
you get data objects that you use in

53
00:02:04,850 --> 00:02:06,710
your language might be JavaScript might

54
00:02:06,710 --> 00:02:08,779
be something else you don't figure out

55
00:02:08,779 --> 00:02:10,159
how to split that up in tables and rose

56
00:02:10,159 --> 00:02:12,469
but instead you just saw that object to

57
00:02:12,469 --> 00:02:14,090
get back a key if you want that object

58
00:02:14,090 --> 00:02:14,540
back a gift

59
00:02:14,540 --> 00:02:15,650
actually be the key and get back your

60
00:02:15,650 --> 00:02:17,420
object it's a very simple very simple

61
00:02:17,420 --> 00:02:20,900
concept we've got sort of revision

62
00:02:20,900 --> 00:02:24,260
control which is not not not what

63
00:02:24,260 --> 00:02:25,700
subversion is that's not real version

64
00:02:25,700 --> 00:02:27,980
control but we use it as a means to

65
00:02:27,980 --> 00:02:29,750
expose multi version concurrency control

66
00:02:29,750 --> 00:02:32,390
to the user so that whoever saves first

67
00:02:32,390 --> 00:02:33,650
wins you're never going to save over

68
00:02:33,650 --> 00:02:35,030
somebody else's work when you're using

69
00:02:35,030 --> 00:02:37,939
couch TV right the the trade-off we're

70
00:02:37,939 --> 00:02:40,459
making is that we don't want any locking

71
00:02:40,459 --> 00:02:42,079
and catch TB so we said want to support

72
00:02:42,079 --> 00:02:43,519
high levels of concurrency in a locking

73
00:02:43,519 --> 00:02:45,260
system will at some point be busy trying

74
00:02:45,260 --> 00:02:46,370
to figure out who's allowed to do what

75
00:02:46,370 --> 00:02:48,379
and in catch me we just don't have any

76
00:02:48,379 --> 00:02:49,760
locks but you need to be the first one

77
00:02:49,760 --> 00:02:51,470
to safe and if you come late you can't

78
00:02:51,470 --> 00:02:54,079
save and need to reroute and so on Wow

79
00:02:54,079 --> 00:02:56,810
the next thing Oh HTTP right so you

80
00:02:56,810 --> 00:02:59,209
already know that the API to catch TV is

81
00:02:59,209 --> 00:03:01,340
HTTP but there's some cool things about

82
00:03:01,340 --> 00:03:03,200
that one of them is it all the HTTP like

83
00:03:03,200 --> 00:03:05,750
middleware and caches and you know load

84
00:03:05,750 --> 00:03:07,250
balancers all that just works so if

85
00:03:07,250 --> 00:03:09,349
you've deployed things you know into a

86
00:03:09,349 --> 00:03:11,870
cluster of HTTP app servers you can you

87
00:03:11,870 --> 00:03:13,840
can also deploy a large-scale CouchDB

88
00:03:13,840 --> 00:03:16,099
installation okay if you've got

89
00:03:16,099 --> 00:03:17,209
operations people running your

90
00:03:17,209 --> 00:03:18,349
applications they'll be really happy

91
00:03:18,349 --> 00:03:19,639
because they already know how to scale

92
00:03:19,639 --> 00:03:21,979
Apache and they know cannot take all the

93
00:03:21,979 --> 00:03:23,120
infrastructure they have to scale your

94
00:03:23,120 --> 00:03:24,799
web front and put it in front of the

95
00:03:24,799 --> 00:03:25,970
database they don't need any like

96
00:03:25,970 --> 00:03:27,819
special hardware software to do that and

97
00:03:27,819 --> 00:03:29,810
and we'll talk to that one of these

98
00:03:29,810 --> 00:03:31,340
bullet points is replication but we'll

99
00:03:31,340 --> 00:03:34,010
go into detail on that so right so at

100
00:03:34,010 --> 00:03:36,319
this point we've got a oh sorry yeah we

101
00:03:36,319 --> 00:03:37,519
can go on and on and this is all

102
00:03:37,519 --> 00:03:39,979
technical and whatever but hopefully you

103
00:03:39,979 --> 00:03:42,769
know the big point is that couchdb is

104
00:03:42,769 --> 00:03:44,870
simple you know like that there's just

105
00:03:44,870 --> 00:03:46,459
documents or not relations there's not

106
00:03:46,459 --> 00:03:47,930
like you know updating parts of

107
00:03:47,930 --> 00:03:49,159
documents and hoping that you know it

108
00:03:49,159 --> 00:03:53,269
worked out it's just it's simple so yeah

109
00:03:53,269 --> 00:03:55,250
this capable thing is like scalings like

110
00:03:55,250 --> 00:03:57,199
the buzzword of 2008 and I hated one

111
00:03:57,199 --> 00:03:59,479
started and still hate it so what what

112
00:03:59,479 --> 00:04:00,530
kind should be enforces here's the

113
00:04:00,530 --> 00:04:02,329
application developer is to make your

114
00:04:02,329 --> 00:04:04,729
application in a way that cash we will

115
00:04:04,729 --> 00:04:06,560
be able to run it or not just a single

116
00:04:06,560 --> 00:04:08,810
instance but on multiple instances so

117
00:04:08,810 --> 00:04:11,000
you can scale up the the computing usage

118
00:04:11,000 --> 00:04:12,259
of your application whatever that is

119
00:04:12,259 --> 00:04:14,659
like maybe disk might be memory might be

120
00:04:14,659 --> 00:04:17,239
might be a CPU but we can just put in

121
00:04:17,239 --> 00:04:18,259
more couch just to make your application

122
00:04:18,259 --> 00:04:21,500
faster and better the downside is you

123
00:04:21,500 --> 00:04:22,909
cannot do everything and catch to me so

124
00:04:22,909 --> 00:04:24,740
we put you in a sort of a straitjacket

125
00:04:24,740 --> 00:04:25,830
that you cannot do things

126
00:04:25,830 --> 00:04:28,439
don't scale which is still most of the

127
00:04:28,439 --> 00:04:29,639
things because we've got big sites

128
00:04:29,639 --> 00:04:31,319
that's do scale and other systems and

129
00:04:31,319 --> 00:04:33,090
they do use the same straightjacket so

130
00:04:33,090 --> 00:04:34,949
and we just use these like in core

131
00:04:34,949 --> 00:04:37,139
couchdb and make okay give you a nice

132
00:04:37,139 --> 00:04:40,770
like a comfortable place to do scalable

133
00:04:40,770 --> 00:04:42,689
applicant on relational database for

134
00:04:42,689 --> 00:04:43,830
more reasons than just because we're

135
00:04:43,830 --> 00:04:45,659
honoring like really think there's good

136
00:04:45,659 --> 00:04:47,879
reasons to leave that stuff out of your

137
00:04:47,879 --> 00:04:51,090
you know your one share tier and your in

138
00:04:51,090 --> 00:04:53,909
your application so distributed that's

139
00:04:53,909 --> 00:04:55,139
the fun part that's what we're really

140
00:04:55,139 --> 00:04:57,960
going to get into so couchdb you know it

141
00:04:57,960 --> 00:04:59,729
uses like 10 megs of ram when it's under

142
00:04:59,729 --> 00:05:01,919
heavy load it's not it's not a big thing

143
00:05:01,919 --> 00:05:03,629
to install so you can run it on your

144
00:05:03,629 --> 00:05:05,069
smartphone or what I mean you know

145
00:05:05,069 --> 00:05:09,449
that's our that's our hope and it'll run

146
00:05:09,449 --> 00:05:12,030
on the client side like you know next to

147
00:05:12,030 --> 00:05:14,250
the browser so you can have applications

148
00:05:14,250 --> 00:05:15,840
that come all the way down to the client

149
00:05:15,840 --> 00:05:19,560
it actually does ronald g one yeah see

150
00:05:19,560 --> 00:05:21,449
have we got it running or someone who

151
00:05:21,449 --> 00:05:24,090
what they these crazy guys crazy guys

152
00:05:24,090 --> 00:05:27,150
got it on as you want all right so if

153
00:05:27,150 --> 00:05:28,710
you don't believe us some people you

154
00:05:28,710 --> 00:05:30,000
know have already stepped up to the

155
00:05:30,000 --> 00:05:32,550
plate we will name any names but there

156
00:05:32,550 --> 00:05:34,080
are people using couchdb and production

157
00:05:34,080 --> 00:05:36,060
even though it's still alpha software so

158
00:05:36,060 --> 00:05:37,770
they're putting real money behind you I

159
00:05:37,770 --> 00:05:40,289
know it like I know if a handful of

160
00:05:40,289 --> 00:05:42,300
startups that are based around the

161
00:05:42,300 --> 00:05:43,889
contact and some project that has

162
00:05:43,889 --> 00:05:45,690
casually be in its core so there's real

163
00:05:45,690 --> 00:05:47,159
money going into guys should be already

164
00:05:47,159 --> 00:05:49,229
even though like we're kind of not there

165
00:05:49,229 --> 00:05:52,050
yet but it's because yeah the you know

166
00:05:52,050 --> 00:05:53,430
engineers the top these organizations

167
00:05:53,430 --> 00:05:56,330
recognize that our design is simple and

168
00:05:56,330 --> 00:05:58,500
I'm not to complicate it but that's not

169
00:05:58,500 --> 00:05:59,250
what we're here to talk to you about

170
00:05:59,250 --> 00:06:01,469
we're here to talk to you about pure

171
00:06:01,469 --> 00:06:02,909
JavaScript applications because we all

172
00:06:02,909 --> 00:06:08,279
love JavaScript yeah and there's you

173
00:06:08,279 --> 00:06:09,629
know we're going to will go through this

174
00:06:09,629 --> 00:06:12,750
in sort of a you know crazy order just

175
00:06:12,750 --> 00:06:13,889
because I want to get the big picture

176
00:06:13,889 --> 00:06:15,979
costs before we get too technical but

177
00:06:15,979 --> 00:06:19,020
what matters about you know you could

178
00:06:19,020 --> 00:06:20,610
write a JavaScript application and host

179
00:06:20,610 --> 00:06:23,909
it you know inside of a titanium or on

180
00:06:23,909 --> 00:06:25,379
your server or you know any number of

181
00:06:25,379 --> 00:06:28,589
ways but the cool thing about couch TV

182
00:06:28,589 --> 00:06:30,180
being sort of you know it's agnostic as

183
00:06:30,180 --> 00:06:32,339
to where it's running is that you get

184
00:06:32,339 --> 00:06:34,649
these applications and add the data as

185
00:06:34,649 --> 00:06:37,729
well that you can ship around too

186
00:06:37,729 --> 00:06:41,909
yeah it's a I've got a lot to say about

187
00:06:41,909 --> 00:06:43,199
this but i kinda want spread out through

188
00:06:43,199 --> 00:06:47,759
the course of the talk the important

189
00:06:47,759 --> 00:06:49,830
thing being that the source code travels

190
00:06:49,830 --> 00:06:51,389
with the with the data with the

191
00:06:51,389 --> 00:06:53,639
application so that means that you know

192
00:06:53,639 --> 00:06:55,349
think if I'd in a way that like

193
00:06:55,349 --> 00:06:57,810
functional programming makes code being

194
00:06:57,810 --> 00:07:00,419
data to make like code more expressive

195
00:07:00,419 --> 00:07:02,460
catch to be max applications being data

196
00:07:02,460 --> 00:07:04,710
to make applications more shareable more

197
00:07:04,710 --> 00:07:07,529
independent and more more fun so yeah so

198
00:07:07,529 --> 00:07:09,120
we hope that you know we end up making

199
00:07:09,120 --> 00:07:10,289
it easier for people to hack on the

200
00:07:10,289 --> 00:07:13,400
programs they use on a daily basis but

201
00:07:13,400 --> 00:07:16,110
in order to understand how to build

202
00:07:16,110 --> 00:07:17,849
applications in couch TV will dive a

203
00:07:17,849 --> 00:07:20,729
little bit into document modeling so

204
00:07:20,729 --> 00:07:22,860
yeah I think I mean a basic document is

205
00:07:22,860 --> 00:07:24,810
just like a you know it's a JavaScript

206
00:07:24,810 --> 00:07:27,749
object so JSON uh you know with curly

207
00:07:27,749 --> 00:07:29,610
braces and that lets you put pretty much

208
00:07:29,610 --> 00:07:32,279
anything you want into it the we catch

209
00:07:32,279 --> 00:07:33,839
be reserved reserves the underscore

210
00:07:33,839 --> 00:07:35,490
namespace everything every attribute to

211
00:07:35,490 --> 00:07:36,960
start with an underscore is special to

212
00:07:36,960 --> 00:07:38,699
catch TV and everything else you want to

213
00:07:38,699 --> 00:07:41,159
put in there can be whatever like you

214
00:07:41,159 --> 00:07:42,629
should be familiar with putting whatever

215
00:07:42,629 --> 00:07:44,789
into something but that's kind if you

216
00:07:44,789 --> 00:07:47,669
come from the relation later okay I'm

217
00:07:47,669 --> 00:07:49,319
not a native speaker might say stupid

218
00:07:49,319 --> 00:07:55,080
things so I had one talk I said like

219
00:07:55,080 --> 00:07:56,879
Coach like culture replication goes both

220
00:07:56,879 --> 00:07:58,770
ways and I'm like what did I say no

221
00:07:58,770 --> 00:08:00,509
nobody was snickering I'm like I didn't

222
00:08:00,509 --> 00:08:05,339
get it anyway so in relational databases

223
00:08:05,339 --> 00:08:07,229
yeah you have that fixed schema thing

224
00:08:07,229 --> 00:08:08,909
that's totally annoying if you want to

225
00:08:08,909 --> 00:08:10,919
just add one field you run alter table

226
00:08:10,919 --> 00:08:12,899
statement on like 16 gigabytes of code

227
00:08:12,899 --> 00:08:14,069
and you're waiting a week until it's

228
00:08:14,069 --> 00:08:16,409
done but in cash to me you use just your

229
00:08:16,409 --> 00:08:18,060
not you need to start storing that you

230
00:08:18,060 --> 00:08:21,149
know the Darth Vader has a sombrero so

231
00:08:21,149 --> 00:08:22,560
you just add the sombrero field to his

232
00:08:22,560 --> 00:08:26,669
document it's a and and then you know

233
00:08:26,669 --> 00:08:29,009
you've got to do you've got to do some

234
00:08:29,009 --> 00:08:30,930
duck typing in your application so that

235
00:08:30,930 --> 00:08:33,240
your view will check for that but you

236
00:08:33,240 --> 00:08:34,529
know you're already writing if if

237
00:08:34,529 --> 00:08:36,000
statements hopefully when your display

238
00:08:36,000 --> 00:08:38,519
and things anyway so that's okay leave

239
00:08:38,519 --> 00:08:43,919
the dock yeah we've got like jason has

240
00:08:43,919 --> 00:08:47,069
no type and if you want to program your

241
00:08:47,069 --> 00:08:49,740
object of some sort of type and you

242
00:08:49,740 --> 00:08:51,660
you want to like be able to like find

243
00:08:51,660 --> 00:08:53,160
out what object is doing what or what

244
00:08:53,160 --> 00:08:55,649
documents doing what so you're quite

245
00:08:55,649 --> 00:08:57,540
flexible Minh and applying just tags to

246
00:08:57,540 --> 00:08:59,370
documents and then read just these tags

247
00:08:59,370 --> 00:09:01,290
and that's all very flexible you don't

248
00:09:01,290 --> 00:09:02,850
have like again not a fixed schema thing

249
00:09:02,850 --> 00:09:04,680
I keep raving about that because I

250
00:09:04,680 --> 00:09:07,890
really hated not having a schema makes

251
00:09:07,890 --> 00:09:09,510
it easy to evolve your application over

252
00:09:09,510 --> 00:09:10,800
tell you what yeah we should we should

253
00:09:10,800 --> 00:09:12,570
say that like having no schema doesn't

254
00:09:12,570 --> 00:09:15,180
make migrations go away so if your data

255
00:09:15,180 --> 00:09:16,980
changes that you need to deal with it

256
00:09:16,980 --> 00:09:18,209
but you don't have to deal with it up

257
00:09:18,209 --> 00:09:19,589
front but you can be a little bit lazy

258
00:09:19,589 --> 00:09:24,149
or agile with it so switching gears a

259
00:09:24,149 --> 00:09:25,830
little bit about you know from from

260
00:09:25,830 --> 00:09:27,200
another point of view about the

261
00:09:27,200 --> 00:09:29,790
technical aspect of CouchDB because of

262
00:09:29,790 --> 00:09:32,220
the Erlang implementation language it's

263
00:09:32,220 --> 00:09:34,500
it's designed for super high concurrency

264
00:09:34,500 --> 00:09:38,370
so show fans who he knows la that's so

265
00:09:38,370 --> 00:09:41,700
Jake you're not paying attention that's

266
00:09:41,700 --> 00:09:44,550
good so Owen was was built for for telco

267
00:09:44,550 --> 00:09:46,950
industries and that was designed 20

268
00:09:46,950 --> 00:09:48,660
years ago and they had a couple of

269
00:09:48,660 --> 00:09:50,610
interesting problems they had these big

270
00:09:50,610 --> 00:09:52,260
service that could never be offline they

271
00:09:52,260 --> 00:09:54,329
had these like thousands of calls going

272
00:09:54,329 --> 00:09:55,560
on at the same time and if there were a

273
00:09:55,560 --> 00:09:56,970
problem with one of these calls none of

274
00:09:56,970 --> 00:09:58,470
the other could be reflected it's not

275
00:09:58,470 --> 00:09:59,820
like you can drop calls if there's the

276
00:09:59,820 --> 00:10:01,290
ZEC fold and one of the calls for

277
00:10:01,290 --> 00:10:03,660
whatever reason and a couple of other

278
00:10:03,660 --> 00:10:05,940
things and they solve that with our line

279
00:10:05,940 --> 00:10:08,370
and turns out like today in the web we

280
00:10:08,370 --> 00:10:09,870
have similar problems we don't have we

281
00:10:09,870 --> 00:10:10,890
have customers all over the world

282
00:10:10,890 --> 00:10:12,839
there's no like downtime window at night

283
00:10:12,839 --> 00:10:15,540
where we can do maintenance there is no

284
00:10:15,540 --> 00:10:17,220
there's so many things going on at the

285
00:10:17,220 --> 00:10:18,990
same time so the same it's basically the

286
00:10:18,990 --> 00:10:20,310
same problem in all things just the

287
00:10:20,310 --> 00:10:21,600
perfect solution for these kinds of

288
00:10:21,600 --> 00:10:23,610
problems so it's a good fit for CouchDB

289
00:10:23,610 --> 00:10:26,220
so what we get is specifically in our

290
00:10:26,220 --> 00:10:29,490
own time with it is we get the ability

291
00:10:29,490 --> 00:10:32,250
to handle like huge numbers of client

292
00:10:32,250 --> 00:10:34,260
socket requests HTTP requests at the

293
00:10:34,260 --> 00:10:36,720
same time and you know as the load goes

294
00:10:36,720 --> 00:10:38,160
up you know the latency will go up a

295
00:10:38,160 --> 00:10:39,450
little bit but the server doesn't just

296
00:10:39,450 --> 00:10:40,950
fall over you know your networks akal

297
00:10:40,950 --> 00:10:44,910
fall over before CouchDB does and there

298
00:10:44,910 --> 00:10:47,399
was this this benchmark in a patchy to

299
00:10:47,399 --> 00:10:49,230
against y'all's which is an all on clone

300
00:10:49,230 --> 00:10:52,290
of Apache too and they like they

301
00:10:52,290 --> 00:10:53,550
couldn't get a patchy to accept more

302
00:10:53,550 --> 00:10:54,779
than two or three thousand concurrent

303
00:10:54,779 --> 00:10:56,130
connections before it fell over and they

304
00:10:56,130 --> 00:10:58,020
just stopped the benchmark at 85,000 for

305
00:10:58,020 --> 00:11:00,089
yours it's not that it's there some

306
00:11:00,089 --> 00:11:01,589
magic so that it will take longer that's

307
00:11:01,589 --> 00:11:01,939
not

308
00:11:01,939 --> 00:11:03,769
it's a finite computing power but if you

309
00:11:03,769 --> 00:11:05,779
have a like huge spike on request the

310
00:11:05,779 --> 00:11:07,069
handle will have airline will handle

311
00:11:07,069 --> 00:11:08,959
that gracefully where's other system

312
00:11:08,959 --> 00:11:12,079
very hard getting that right so that's

313
00:11:12,079 --> 00:11:13,279
all stuff you don't have to worry about

314
00:11:13,279 --> 00:11:14,720
if you're using CouchDB but it stuff

315
00:11:14,720 --> 00:11:16,159
that makes it fun for us to make a kind

316
00:11:16,159 --> 00:11:18,439
of CB right and another thing that you

317
00:11:18,439 --> 00:11:19,609
don't have to worry about when you're

318
00:11:19,609 --> 00:11:22,129
using couchdb is how it does this but

319
00:11:22,129 --> 00:11:25,069
its replication is really resilient you

320
00:11:25,069 --> 00:11:27,319
have data set on this machine a data set

321
00:11:27,319 --> 00:11:29,359
on that machine you can make you can

322
00:11:29,359 --> 00:11:31,459
bring them in sync with a single HTTP

323
00:11:31,459 --> 00:11:33,289
request so say you have an address book

324
00:11:33,289 --> 00:11:34,609
on your phone on your home computer on

325
00:11:34,609 --> 00:11:36,259
your laptop on New York work computer

326
00:11:36,259 --> 00:11:37,849
and you like make changes to one one

327
00:11:37,849 --> 00:11:39,649
instance and you want this change to pop

328
00:11:39,649 --> 00:11:41,389
up everywhere else and a couple of

329
00:11:41,389 --> 00:11:43,579
products to do that mobileme is one that

330
00:11:43,579 --> 00:11:45,439
works pretty well and other ones that

331
00:11:45,439 --> 00:11:48,199
are sort of that that come up in that

332
00:11:48,199 --> 00:11:50,659
space but they always required to

333
00:11:50,659 --> 00:11:53,389
require you to go through some kind of

334
00:11:53,389 --> 00:11:56,239
vendors through the cloud and we think

335
00:11:56,239 --> 00:11:57,619
it's kind of cool if you could just like

336
00:11:57,619 --> 00:11:59,209
my phone's just in the same way for that

337
00:11:59,209 --> 00:12:00,889
my laptop I can I just not talk about

338
00:12:00,889 --> 00:12:03,739
without talking to Apple that would be

339
00:12:03,739 --> 00:12:04,789
kind of nice and contributed let's

340
00:12:04,789 --> 00:12:06,879
allows you to do just that doing like

341
00:12:06,879 --> 00:12:09,529
multi-node synchronization that works

342
00:12:09,529 --> 00:12:11,989
solo flawlessly without going through

343
00:12:11,989 --> 00:12:14,329
any cloud vendor yeah so Oh ops people

344
00:12:14,329 --> 00:12:16,789
really like this because it simplifies a

345
00:12:16,789 --> 00:12:20,179
lot of deployment scenarios like one you

346
00:12:20,179 --> 00:12:22,579
know so you just have one couch that

347
00:12:22,579 --> 00:12:25,339
you've deployed and you know the local

348
00:12:25,339 --> 00:12:26,899
starts to get kind of high so okay if

349
00:12:26,899 --> 00:12:28,549
you if you like actually be because code

350
00:12:28,549 --> 00:12:30,019
should be itself is pretty cool you like

351
00:12:30,019 --> 00:12:31,639
in make an application that runs on cash

352
00:12:31,639 --> 00:12:33,169
to be and runs on one machine and you

353
00:12:33,169 --> 00:12:34,549
know that there will be problems like

354
00:12:34,549 --> 00:12:37,069
things break it's just a fact so in that

355
00:12:37,069 --> 00:12:38,269
case you just want to have a second

356
00:12:38,269 --> 00:12:40,189
couch that it's just there in case that

357
00:12:40,189 --> 00:12:41,779
can take over from the other couch so

358
00:12:41,779 --> 00:12:43,220
this is just a heart failed over let's

359
00:12:43,220 --> 00:12:45,409
just a whole file over or master slave

360
00:12:45,409 --> 00:12:47,599
thingy that you can set up with MySQL

361
00:12:47,599 --> 00:12:50,659
for example pretty easily and if you're

362
00:12:50,659 --> 00:12:52,519
the traditional web thing you have a lot

363
00:12:52,519 --> 00:12:54,169
more right reads than rides that's where

364
00:12:54,169 --> 00:12:56,599
the next slide comes in you just make

365
00:12:56,599 --> 00:12:59,329
your this read cluster that just

366
00:12:59,329 --> 00:13:00,499
everybody reads from in this single

367
00:13:00,499 --> 00:13:01,819
master thing either replicates with the

368
00:13:01,819 --> 00:13:03,139
other ones and that's official be

369
00:13:03,139 --> 00:13:04,549
familiar with that so you just throw

370
00:13:04,549 --> 00:13:06,229
your engine text or whatever in front of

371
00:13:06,229 --> 00:13:07,669
that to load balance there if this one

372
00:13:07,669 --> 00:13:09,349
falls out of the cluster no big deal

373
00:13:09,349 --> 00:13:11,029
because the web browser will block the

374
00:13:11,029 --> 00:13:12,859
requests and but but that's let's no

375
00:13:12,859 --> 00:13:14,100
different than mysql replica

376
00:13:14,100 --> 00:13:15,660
that's exactly the use case my school

377
00:13:15,660 --> 00:13:18,029
that replication was designed for it's

378
00:13:18,029 --> 00:13:19,620
important to note that these arrows are

379
00:13:19,620 --> 00:13:22,560
triggered replication so what that means

380
00:13:22,560 --> 00:13:23,970
is the replicates once and gets

381
00:13:23,970 --> 00:13:25,170
everything up to date for each trigger

382
00:13:25,170 --> 00:13:26,430
but you could put the trigger on a cron

383
00:13:26,430 --> 00:13:28,290
job the idea is we're giving you really

384
00:13:28,290 --> 00:13:29,910
simple primitives for moving you know

385
00:13:29,910 --> 00:13:31,350
for keeping the data in sync right it's

386
00:13:31,350 --> 00:13:32,850
not that you just set up like a magic

387
00:13:32,850 --> 00:13:34,079
synchronization thing they also

388
00:13:34,079 --> 00:13:36,389
unidirectional so you move one from for

389
00:13:36,389 --> 00:13:38,130
one couch to the other and not backwards

390
00:13:38,130 --> 00:13:40,110
and if you want to do that you just swap

391
00:13:40,110 --> 00:13:41,519
the arguments to the replication call

392
00:13:41,519 --> 00:13:43,889
from the source and the target database

393
00:13:43,889 --> 00:13:45,600
of this is where this comes in coach to

394
00:13:45,600 --> 00:13:47,399
be replication unlike the mysql master

395
00:13:47,399 --> 00:13:49,440
slave replication is designed to be an

396
00:13:49,440 --> 00:13:51,779
master a multi-master replication so any

397
00:13:51,779 --> 00:13:53,850
node that runs the couch TV is a master

398
00:13:53,850 --> 00:13:55,319
database as far as contribute

399
00:13:55,319 --> 00:13:58,440
replication is concerned and even kind

400
00:13:58,440 --> 00:13:59,730
of three masters like you can talk to

401
00:13:59,730 --> 00:14:01,470
the MySQL guys and their game yeah just

402
00:14:01,470 --> 00:14:03,540
do two to master setups like yeah I've

403
00:14:03,540 --> 00:14:05,130
got too much of a right load I like to

404
00:14:05,130 --> 00:14:06,769
do like three masters and I can know

405
00:14:06,769 --> 00:14:09,180
that I don't go there and like in catch

406
00:14:09,180 --> 00:14:11,579
to be you can like it the way it's

407
00:14:11,579 --> 00:14:12,750
designed the way you design your

408
00:14:12,750 --> 00:14:14,790
application around replication will make

409
00:14:14,790 --> 00:14:16,829
sure it will it will work that way yeah

410
00:14:16,829 --> 00:14:18,089
I mean there's you know we'll get to

411
00:14:18,089 --> 00:14:19,019
some of the things you have to think

412
00:14:19,019 --> 00:14:21,420
about especially in terms of like

413
00:14:21,420 --> 00:14:24,149
identity and having you know the same

414
00:14:24,149 --> 00:14:25,800
same document on all three nodes you

415
00:14:25,800 --> 00:14:27,509
gotta avoid update collisions and

416
00:14:27,509 --> 00:14:29,490
whatnot but that's application level at

417
00:14:29,490 --> 00:14:31,649
the couch to be level it just you know

418
00:14:31,649 --> 00:14:33,420
handles that for you so you can have the

419
00:14:33,420 --> 00:14:35,850
same data on all three nodes you know

420
00:14:35,850 --> 00:14:39,060
pretty easily and you can get even

421
00:14:39,060 --> 00:14:40,800
crazier like there's no reason not to

422
00:14:40,800 --> 00:14:42,149
just have everybody replicating with

423
00:14:42,149 --> 00:14:44,160
everybody all the time this is the world

424
00:14:44,160 --> 00:14:45,720
that I'm talking about building

425
00:14:45,720 --> 00:14:48,509
JavaScript applications for and that's

426
00:14:48,509 --> 00:14:52,740
so you know this is your computer and

427
00:14:52,740 --> 00:14:54,420
that's my computer and you send me a

428
00:14:54,420 --> 00:14:56,130
message you know you put something in an

429
00:14:56,130 --> 00:14:57,959
envelope for me and maybe bounces around

430
00:14:57,959 --> 00:14:59,370
a little bit and maybe it gets to me I

431
00:14:59,370 --> 00:15:00,329
mean it's not the way you want to write

432
00:15:00,329 --> 00:15:01,649
everything but it's kind of fun that you

433
00:15:01,649 --> 00:15:04,199
can do that without a centralized you

434
00:15:04,199 --> 00:15:07,170
know control point so to the user to

435
00:15:07,170 --> 00:15:09,029
somebody who is actually you know using

436
00:15:09,029 --> 00:15:10,230
your application it just sort of looks

437
00:15:10,230 --> 00:15:12,689
like they drop their message you know

438
00:15:12,689 --> 00:15:13,980
into the pond and the ripples are going

439
00:15:13,980 --> 00:15:16,649
out yeah I think we didn't mention

440
00:15:16,649 --> 00:15:18,209
peer-to-peer but that is that like a

441
00:15:18,209 --> 00:15:19,709
true pit to pay set up that you can set

442
00:15:19,709 --> 00:15:21,180
up with catch to be just send stuff

443
00:15:21,180 --> 00:15:23,250
along and it eventually arrives where it

444
00:15:23,250 --> 00:15:24,959
belongs just as long as the two nodes

445
00:15:24,959 --> 00:15:25,620
can

446
00:15:25,620 --> 00:15:29,700
touch via HTTP so yeah maybe maybe one

447
00:15:29,700 --> 00:15:31,410
day I'll be like a scientist and figure

448
00:15:31,410 --> 00:15:32,640
out how to get HTTP to go through all

449
00:15:32,640 --> 00:15:34,500
the firewalls I would just we just by

450
00:15:34,500 --> 00:15:38,730
skype and they so we mentioned document

451
00:15:38,730 --> 00:15:41,060
modeling but it comes up again because

452
00:15:41,060 --> 00:15:46,440
applications are documents so if all the

453
00:15:46,440 --> 00:15:48,480
things that apply to documents apply to

454
00:15:48,480 --> 00:15:50,040
applique should we should mention one

455
00:15:50,040 --> 00:15:51,510
more feature of documents so JS

456
00:15:51,510 --> 00:15:54,360
documents are just Jason blobs or Jason

457
00:15:54,360 --> 00:15:56,550
documents of objects and but they also

458
00:15:56,550 --> 00:15:58,320
can have attachments just like email can

459
00:15:58,320 --> 00:16:00,240
have attachment so you can just assign

460
00:16:00,240 --> 00:16:02,430
well attach arbitrary binary stuff to a

461
00:16:02,430 --> 00:16:04,440
document as much as you want and so you

462
00:16:04,440 --> 00:16:05,880
can just put piles and then files could

463
00:16:05,880 --> 00:16:08,760
be for example HTTP for HTML files CSS

464
00:16:08,760 --> 00:16:10,620
file JavaScript files and they all get

465
00:16:10,620 --> 00:16:12,870
there on your eye so you can point a

466
00:16:12,870 --> 00:16:14,670
browser to catch to be inserted HTML

467
00:16:14,670 --> 00:16:16,260
file from couch to be into your browser

468
00:16:16,260 --> 00:16:17,490
and your browser will render it because

469
00:16:17,490 --> 00:16:19,170
coach people know the correct content

470
00:16:19,170 --> 00:16:20,880
type to send yeah you can even take like

471
00:16:20,880 --> 00:16:22,529
a Holden set of nested directories like

472
00:16:22,529 --> 00:16:23,790
if you're building static web pages and

473
00:16:23,790 --> 00:16:24,960
just shove it up into a couch TV

474
00:16:24,960 --> 00:16:26,910
document and the you know everything

475
00:16:26,910 --> 00:16:28,770
will work out the HTML file then will

476
00:16:28,770 --> 00:16:30,510
reference like the JavaScript and CSS

477
00:16:30,510 --> 00:16:32,100
resources that then get pulled from

478
00:16:32,100 --> 00:16:34,560
couch to be again so you get full full

479
00:16:34,560 --> 00:16:36,690
JavaScript enabled application serving

480
00:16:36,690 --> 00:16:38,010
right out of catch keeping without any

481
00:16:38,010 --> 00:16:39,930
sort of middleware layer so yeah so when

482
00:16:39,930 --> 00:16:41,940
you're doing when you're doing document

483
00:16:41,940 --> 00:16:43,890
based applications you want documents to

484
00:16:43,890 --> 00:16:46,650
stand alone you want them to sort of

485
00:16:46,650 --> 00:16:47,880
contain their own context where it's

486
00:16:47,880 --> 00:16:49,470
like in a relational system what you

487
00:16:49,470 --> 00:16:51,270
have is you know one table that pulls

488
00:16:51,270 --> 00:16:52,770
out from a million other tables to get

489
00:16:52,770 --> 00:16:54,630
the to get the data that you need in

490
00:16:54,630 --> 00:16:56,520
order to answer your queries but with

491
00:16:56,520 --> 00:16:58,080
cow should be like you want that to be

492
00:16:58,080 --> 00:16:59,400
one request you know maybe a couple

493
00:16:59,400 --> 00:17:01,290
other requests but the context is in the

494
00:17:01,290 --> 00:17:04,309
document and so that feeds into having

495
00:17:04,309 --> 00:17:06,870
applications be documents because then

496
00:17:06,870 --> 00:17:07,920
you've got the duck you've got this

497
00:17:07,920 --> 00:17:09,660
document that is just the whole

498
00:17:09,660 --> 00:17:11,699
application right there and that means

499
00:17:11,699 --> 00:17:13,410
that if you if you replicate it the

500
00:17:13,410 --> 00:17:14,760
application replicates just like a

501
00:17:14,760 --> 00:17:16,380
document would so practical use case for

502
00:17:16,380 --> 00:17:18,089
that that's kind of fun chris has a blog

503
00:17:18,089 --> 00:17:19,500
that's the couch app running on Jake

504
00:17:19,500 --> 00:17:21,179
trace aid on that that you can just hit

505
00:17:21,179 --> 00:17:25,050
right now if Wi-Fi still working I can

506
00:17:25,050 --> 00:17:26,730
just replicate from Christmas blog to my

507
00:17:26,730 --> 00:17:28,679
couch to be instance and I have chris's

508
00:17:28,679 --> 00:17:30,420
blog software running running on my

509
00:17:30,420 --> 00:17:32,820
computer and I really like Christmas

510
00:17:32,820 --> 00:17:34,440
blog but I don't like the green color of

511
00:17:34,440 --> 00:17:35,940
the header bar so I change that to blue

512
00:17:35,940 --> 00:17:38,250
on my couch to be instance and then I

513
00:17:38,250 --> 00:17:38,970
have my own

514
00:17:38,970 --> 00:17:40,679
put my own content and it put publish it

515
00:17:40,679 --> 00:17:43,620
to my like cash to be public server and

516
00:17:43,620 --> 00:17:45,030
everybody can read my blog that's I

517
00:17:45,030 --> 00:17:47,130
actually Chris blog but my content and

518
00:17:47,130 --> 00:17:49,260
my colors and I got a blog for free

519
00:17:49,260 --> 00:17:51,000
which is kind of nice and then Chris

520
00:17:51,000 --> 00:17:52,559
sees okay my colors are better or did

521
00:17:52,559 --> 00:17:53,850
better topography or whatever and you

522
00:17:53,850 --> 00:17:55,679
can pull out changes back to his couch

523
00:17:55,679 --> 00:17:57,900
and go all crazy and if you all like to

524
00:17:57,900 --> 00:17:59,549
get model off of open source development

525
00:17:59,549 --> 00:18:02,159
that's a lot like it yeah i mean i would

526
00:18:02,159 --> 00:18:04,500
actually do my development sharing and

527
00:18:04,500 --> 00:18:06,360
get still but for data sharing like

528
00:18:06,360 --> 00:18:08,580
especially public data sets the ability

529
00:18:08,580 --> 00:18:10,140
to replicate it around and then you know

530
00:18:10,140 --> 00:18:12,240
so you have an application that can you

531
00:18:12,240 --> 00:18:14,159
know graph the number of traffic tickets

532
00:18:14,159 --> 00:18:15,990
by you know square mile radius from your

533
00:18:15,990 --> 00:18:18,120
house or whatever and at someone else

534
00:18:18,120 --> 00:18:19,679
says well like you know that's kind of

535
00:18:19,679 --> 00:18:21,179
cool that square mile radius thing but i

536
00:18:21,179 --> 00:18:23,070
want to see you know like some other

537
00:18:23,070 --> 00:18:25,169
crime statistic or you know where are

538
00:18:25,169 --> 00:18:27,120
they putting in new parks so you can

539
00:18:27,120 --> 00:18:28,500
take the applications on the data and

540
00:18:28,500 --> 00:18:29,789
remix them really freely because

541
00:18:29,789 --> 00:18:31,590
everybody's got all the you know

542
00:18:31,590 --> 00:18:33,929
everything it takes to budge the data as

543
00:18:33,929 --> 00:18:37,350
well as to handle the you know display

544
00:18:37,350 --> 00:18:41,190
in it so this is my metal icon for an

545
00:18:41,190 --> 00:18:43,500
application so your document goes into

546
00:18:43,500 --> 00:18:46,380
CouchDB and then it gets unfurled into a

547
00:18:46,380 --> 00:18:49,500
beautiful flower of functionality so

548
00:18:49,500 --> 00:18:50,909
look out for that if you see it again

549
00:18:50,909 --> 00:18:53,820
it's an application but how what like

550
00:18:53,820 --> 00:18:57,510
it's a database so how does it run this

551
00:18:57,510 --> 00:19:00,179
application and and that's what we're

552
00:19:00,179 --> 00:19:01,409
going to get into for the next little

553
00:19:01,409 --> 00:19:04,169
section here so there's a special kind

554
00:19:04,169 --> 00:19:05,669
of document all the only thing special

555
00:19:05,669 --> 00:19:07,679
about it is it lives in this namespace

556
00:19:07,679 --> 00:19:11,100
and couch to be looks in there for the

557
00:19:11,100 --> 00:19:14,970
application alright so the design

558
00:19:14,970 --> 00:19:16,590
document we call these design documents

559
00:19:16,590 --> 00:19:18,360
is just like a regular document the only

560
00:19:18,360 --> 00:19:20,039
special thing is let's start the idea of

561
00:19:20,039 --> 00:19:21,600
that or the key of the document stars

562
00:19:21,600 --> 00:19:25,409
with underscore ID / design / and the

563
00:19:25,409 --> 00:19:26,970
other thing is that catch will look for

564
00:19:26,970 --> 00:19:28,679
fields in that document so if it has a

565
00:19:28,679 --> 00:19:31,799
field views and other than what we got

566
00:19:31,799 --> 00:19:35,039
there so views validations and like my

567
00:19:35,039 --> 00:19:38,760
thing one off so so a couch TV it has

568
00:19:38,760 --> 00:19:40,320
MapReduce that's like a nice buzz word

569
00:19:40,320 --> 00:19:41,730
that we have but it actually turns out

570
00:19:41,730 --> 00:19:43,289
to be great for Trent you know for

571
00:19:43,289 --> 00:19:45,020
transforming inquiry and json documents

572
00:19:45,020 --> 00:19:47,250
the definitions for the MapReduce

573
00:19:47,250 --> 00:19:49,799
queries live in the design documents

574
00:19:49,799 --> 00:19:50,450
that was the first

575
00:19:50,450 --> 00:19:52,790
got stored in there and then as we've

576
00:19:52,790 --> 00:19:54,620
been adding features there's document

577
00:19:54,620 --> 00:19:56,870
validations which are run against

578
00:19:56,870 --> 00:19:58,670
updates as user saved them to make you

579
00:19:58,670 --> 00:20:00,140
know make sure they're valid so no

580
00:20:00,140 --> 00:20:02,000
schema is pretty cool but at some point

581
00:20:02,000 --> 00:20:03,290
you really want to make sure like if

582
00:20:03,290 --> 00:20:04,460
you're storing a blog post it should

583
00:20:04,460 --> 00:20:07,010
have an office feel a title and and some

584
00:20:07,010 --> 00:20:09,080
text body and the validation functions

585
00:20:09,080 --> 00:20:10,760
can like they inspect every right

586
00:20:10,760 --> 00:20:12,500
document that comes in on the right and

587
00:20:12,500 --> 00:20:14,030
then can say okay I like I like a

588
00:20:14,030 --> 00:20:15,350
document and I Sebadoh like you don't

589
00:20:15,350 --> 00:20:17,540
know you forget to like put in the title

590
00:20:17,540 --> 00:20:19,520
or something oh I forgot to mention I

591
00:20:19,520 --> 00:20:20,780
mean we should just say this although

592
00:20:20,780 --> 00:20:21,800
maybe it's obvious this is all

593
00:20:21,800 --> 00:20:24,200
JavaScript code right here the mapreduce

594
00:20:24,200 --> 00:20:25,550
is written in JavaScript the validations

595
00:20:25,550 --> 00:20:27,500
are written in JavaScript most of the

596
00:20:27,500 --> 00:20:28,760
functions that you end up seeing people

597
00:20:28,760 --> 00:20:30,080
write are less than like five or ten

598
00:20:30,080 --> 00:20:31,430
lines long it's really simple you know

599
00:20:31,430 --> 00:20:32,990
you're just checking for a property on a

600
00:20:32,990 --> 00:20:37,040
JSON object so the API is so simple you

601
00:20:37,040 --> 00:20:39,230
know we can we can show you api examples

602
00:20:39,230 --> 00:20:40,730
maybe tomorrow at a track be or

603
00:20:40,730 --> 00:20:43,820
something and then rendering HTML is one

604
00:20:43,820 --> 00:20:45,500
of the new features because just having

605
00:20:45,500 --> 00:20:47,090
Jace on showing up from an API isn't

606
00:20:47,090 --> 00:20:49,220
restful like that's not enough for a web

607
00:20:49,220 --> 00:20:51,980
spider to crawl your site or anything so

608
00:20:51,980 --> 00:20:54,830
we're adding the ability to render HTML

609
00:20:54,830 --> 00:20:57,170
and we'll get into details of like some

610
00:20:57,170 --> 00:20:58,670
of the philosophy behind how we do it ok

611
00:20:58,670 --> 00:21:00,320
for the first two are the first and the

612
00:21:00,320 --> 00:21:01,790
third thing the render in the MapReduce

613
00:21:01,790 --> 00:21:03,290
like if if you have a design document

614
00:21:03,290 --> 00:21:05,330
and you put in these functions and their

615
00:21:05,330 --> 00:21:07,370
character will recognize new your eyes

616
00:21:07,370 --> 00:21:08,990
so everything in casually B is a

617
00:21:08,990 --> 00:21:11,090
resource and this render things and the

618
00:21:11,090 --> 00:21:12,470
map and reduce our resources and catch

619
00:21:12,470 --> 00:21:15,080
to be and if you define a MapReduce view

620
00:21:15,080 --> 00:21:16,550
cut you will recognize that there's a

621
00:21:16,550 --> 00:21:19,550
new you or I that's like / design your

622
00:21:19,550 --> 00:21:21,800
document ID your view name and then you

623
00:21:21,800 --> 00:21:23,870
can query that view or have that stuff

624
00:21:23,870 --> 00:21:26,390
rendered through HTML through HTTP again

625
00:21:26,390 --> 00:21:29,690
so that's all the same interface there's

626
00:21:29,690 --> 00:21:30,770
you know there's some other stuff that

627
00:21:30,770 --> 00:21:32,570
doesn't quite go into the design

628
00:21:32,570 --> 00:21:35,360
document but it's still pretty handy

629
00:21:35,360 --> 00:21:37,940
like installed with every copy of

630
00:21:37,940 --> 00:21:41,060
CouchDB is jquery and then a jquery cash

631
00:21:41,060 --> 00:21:42,740
to be plug-in which makes it really easy

632
00:21:42,740 --> 00:21:44,390
to load documents and save documents and

633
00:21:44,390 --> 00:21:46,640
run queries and whatnot like thanks John

634
00:21:46,640 --> 00:21:48,860
for jQuery yeah it turns out to be

635
00:21:48,860 --> 00:21:53,420
pretty handy so then we you know of

636
00:21:53,420 --> 00:21:55,610
course is HTTP API so even just with a

637
00:21:55,610 --> 00:21:57,740
static HTML file and a jquery plugin you

638
00:21:57,740 --> 00:21:58,730
can do you know

639
00:21:58,730 --> 00:22:00,410
you can write a full kyuubi application

640
00:22:00,410 --> 00:22:03,080
the example is futon which is our you

641
00:22:03,080 --> 00:22:05,120
know our built-in admin client which is

642
00:22:05,120 --> 00:22:07,340
all just HTML and Ajax right we

643
00:22:07,340 --> 00:22:08,960
shouldn't mention the age thing so just

644
00:22:08,960 --> 00:22:11,240
pushing our JavaScript and HTML and

645
00:22:11,240 --> 00:22:13,250
JavaScript it's not like that fancy so

646
00:22:13,250 --> 00:22:16,130
we're just pushing static content but so

647
00:22:16,130 --> 00:22:18,080
this is like why reinvent the wheel but

648
00:22:18,080 --> 00:22:20,750
in this case you have your data stores

649
00:22:20,750 --> 00:22:22,730
actually a database so you can use Ajax

650
00:22:22,730 --> 00:22:23,929
to talk to coach to be into all the

651
00:22:23,929 --> 00:22:25,640
document modeling things and query the

652
00:22:25,640 --> 00:22:27,110
views and do the validations on all that

653
00:22:27,110 --> 00:22:30,340
from your static HTML Javascript

654
00:22:30,340 --> 00:22:33,410
applications it's pretty neat I think so

655
00:22:33,410 --> 00:22:35,120
the kind of applications that like like

656
00:22:35,120 --> 00:22:36,559
I wrote a little Twitter client which

657
00:22:36,559 --> 00:22:40,640
uses their JSON PAP I I love Jason P so

658
00:22:40,640 --> 00:22:42,020
you know get the data into the browser

659
00:22:42,020 --> 00:22:43,580
and then you sort in the couch TV and

660
00:22:43,580 --> 00:22:45,559
then you can do like if you can do a

661
00:22:45,559 --> 00:22:47,179
little tag cloud and see what words your

662
00:22:47,179 --> 00:22:49,700
friends use too much and stuff based on

663
00:22:49,700 --> 00:22:52,940
queries against couch TV so yeah so

664
00:22:52,940 --> 00:22:54,530
application like can live in a document

665
00:22:54,530 --> 00:22:56,270
and then we end up with a new kind of

666
00:22:56,270 --> 00:22:57,559
replication which is the same old

667
00:22:57,559 --> 00:22:59,390
replication but it replicates these

668
00:22:59,390 --> 00:23:01,929
magic applications instead of just data

669
00:23:01,929 --> 00:23:05,960
so yeah that's what I mean that's what

670
00:23:05,960 --> 00:23:07,520
I'm passionate about with CouchDB

671
00:23:07,520 --> 00:23:10,370
because I don't know here's another

672
00:23:10,370 --> 00:23:12,140
survey question who here in this room

673
00:23:12,140 --> 00:23:14,210
got started by hitting view source on an

674
00:23:14,210 --> 00:23:17,299
HTML window and then you know like oh

675
00:23:17,299 --> 00:23:20,660
yeah it's not that hard so this is a

676
00:23:20,660 --> 00:23:22,820
view source for applications I mean you

677
00:23:22,820 --> 00:23:25,190
know it comes down your computer you can

678
00:23:25,190 --> 00:23:26,660
if you can use it you can get to the

679
00:23:26,660 --> 00:23:28,549
source you can change it make it better

680
00:23:28,549 --> 00:23:30,080
deploy it to your own couchdb which

681
00:23:30,080 --> 00:23:31,160
isn't any different from the place where

682
00:23:31,160 --> 00:23:35,150
you got it and you know generally let

683
00:23:35,150 --> 00:23:37,370
the application develop according to

684
00:23:37,370 --> 00:23:38,900
what the users want not to get too

685
00:23:38,900 --> 00:23:41,150
philosophical but this is like the the

686
00:23:41,150 --> 00:23:44,240
Wikipedia idea put on steroids instead

687
00:23:44,240 --> 00:23:45,590
of just editing content that's available

688
00:23:45,590 --> 00:23:47,630
for everybody on the central place you

689
00:23:47,630 --> 00:23:49,460
can edit the application that's showing

690
00:23:49,460 --> 00:23:51,169
that content in every place you want it

691
00:23:51,169 --> 00:23:54,169
to be so you not only like be able to

692
00:23:54,169 --> 00:23:55,730
update like you're not only in control

693
00:23:55,730 --> 00:23:57,020
of history because you come into the

694
00:23:57,020 --> 00:23:58,910
Wikipedia but you can also like change

695
00:23:58,910 --> 00:24:00,650
the display of how that history is being

696
00:24:00,650 --> 00:24:04,010
shown to you or others yeah so so the

697
00:24:04,010 --> 00:24:05,510
next thing we've got to talk about is

698
00:24:05,510 --> 00:24:07,520
just a little bit of the mechanics of

699
00:24:07,520 --> 00:24:08,840
how you would write one of these

700
00:24:08,840 --> 00:24:10,340
applications because you know we've been

701
00:24:10,340 --> 00:24:11,990
kind of high level so far

702
00:24:11,990 --> 00:24:15,230
there's a there's a little script and

703
00:24:15,230 --> 00:24:19,170
stuff that I involved in its called

704
00:24:19,170 --> 00:24:21,300
couch app and all it does is take some

705
00:24:21,300 --> 00:24:22,650
junk off your file system is sticking

706
00:24:22,650 --> 00:24:24,720
into couchdb in a design document so

707
00:24:24,720 --> 00:24:26,310
what we all we mentioned is that you

708
00:24:26,310 --> 00:24:28,500
write JavaScript put it into the JSON

709
00:24:28,500 --> 00:24:30,120
document and catch we can figure out how

710
00:24:30,120 --> 00:24:32,870
to do views and all this validation crap

711
00:24:32,870 --> 00:24:35,400
you can use futon to look at your

712
00:24:35,400 --> 00:24:37,290
documents and you get a text area that

713
00:24:37,290 --> 00:24:39,420
that shows the JSON or the JavaScript

714
00:24:39,420 --> 00:24:41,550
that is in defines your view turns out

715
00:24:41,550 --> 00:24:43,890
editing javascript in text area feels

716
00:24:43,890 --> 00:24:45,150
another thing we want to do especially

717
00:24:45,150 --> 00:24:46,860
because it's like triple escape to json

718
00:24:46,860 --> 00:24:49,170
but a few screen you really don't want

719
00:24:49,170 --> 00:24:50,820
to do that and yet you want to like it's

720
00:24:50,820 --> 00:24:52,080
code you want to put code in version

721
00:24:52,080 --> 00:24:54,840
control so what we did is we made a way

722
00:24:54,840 --> 00:24:57,150
to push filesystem hierarchy into a

723
00:24:57,150 --> 00:24:58,620
design document so you have native

724
00:24:58,620 --> 00:25:00,840
JavaScript files let you deal with your

725
00:25:00,840 --> 00:25:02,670
you can use your editor roi de get

726
00:25:02,670 --> 00:25:04,260
syntax highlighting context your help

727
00:25:04,260 --> 00:25:06,120
and whatever other tools you set up in

728
00:25:06,120 --> 00:25:10,470
textmate or whatever you use and then

729
00:25:10,470 --> 00:25:12,210
just take all that and push that into a

730
00:25:12,210 --> 00:25:14,190
format that cash to me then understands

731
00:25:14,190 --> 00:25:16,440
put in it took in to catch up so so yeah

732
00:25:16,440 --> 00:25:17,970
so the way this is you know usage

733
00:25:17,970 --> 00:25:20,970
example it's a couch app clone and then

734
00:25:20,970 --> 00:25:23,640
a URL and the URL is the URL of the

735
00:25:23,640 --> 00:25:25,110
running application that you may be

736
00:25:25,110 --> 00:25:26,250
playing with and you could just kind of

737
00:25:26,250 --> 00:25:27,660
tell by looking at the URL or maybe you

738
00:25:27,660 --> 00:25:28,800
know otherwise that's running on couch

739
00:25:28,800 --> 00:25:30,540
so you're on couch up clone against that

740
00:25:30,540 --> 00:25:33,030
application and it pulls it down to your

741
00:25:33,030 --> 00:25:36,300
local file system and you can play with

742
00:25:36,300 --> 00:25:37,380
it you can change it you can just look

743
00:25:37,380 --> 00:25:40,170
and see how they did it and you know

744
00:25:40,170 --> 00:25:42,060
well that's that's use case I talked

745
00:25:42,060 --> 00:25:43,740
about like I see chris's blog and i

746
00:25:43,740 --> 00:25:46,200
canna just like pull it'll climb the

747
00:25:46,200 --> 00:25:47,610
entire block to my file system and see

748
00:25:47,610 --> 00:25:49,110
how it works that's like the view source

749
00:25:49,110 --> 00:25:51,270
off yeah so catch up on phone poles the

750
00:25:51,270 --> 00:25:53,370
just it just pulls the the code it

751
00:25:53,370 --> 00:25:54,480
doesn't pull the data like my other

752
00:25:54,480 --> 00:25:56,490
documents so it's a good way to share

753
00:25:56,490 --> 00:25:58,350
applications around and then once you

754
00:25:58,350 --> 00:25:59,430
have that file structure and you've

755
00:25:59,430 --> 00:26:01,590
edited it a little bit it's pretty

756
00:26:01,590 --> 00:26:04,110
simple to push you just run a couch a

757
00:26:04,110 --> 00:26:06,300
push and type in the name of your local

758
00:26:06,300 --> 00:26:08,010
database that you want to see that

759
00:26:08,010 --> 00:26:10,800
application running in and you'll get

760
00:26:10,800 --> 00:26:13,710
the application right there after couch

761
00:26:13,710 --> 00:26:15,240
app gets the files uploaded to the

762
00:26:15,240 --> 00:26:17,340
design document it'll print the URL for

763
00:26:17,340 --> 00:26:20,040
you to visit so you can go see what you

764
00:26:20,040 --> 00:26:22,410
know see if it's running or not and you

765
00:26:22,410 --> 00:26:24,210
know this is just a file system mapping

766
00:26:24,210 --> 00:26:25,890
we're hoping to maybe get hooked up to

767
00:26:25,890 --> 00:26:28,500
the fuse adapter and like otherwise find

768
00:26:28,500 --> 00:26:30,780
a really you know simple ways to make it

769
00:26:30,780 --> 00:26:32,880
seamless that you're using this file

770
00:26:32,880 --> 00:26:35,940
system mapping so that's the mechanics

771
00:26:35,940 --> 00:26:40,100
now we want to talk a little bit about

772
00:26:40,100 --> 00:26:42,900
what what it means now that now you can

773
00:26:42,900 --> 00:26:43,860
run these applications and they're

774
00:26:43,860 --> 00:26:47,460
bouncing around the edge and hopefully

775
00:26:47,460 --> 00:26:49,020
if you're lucky they're running on lots

776
00:26:49,020 --> 00:26:51,480
of little smartphones and laptops and

777
00:26:51,480 --> 00:26:54,840
who knows what but that's the that's the

778
00:26:54,840 --> 00:26:56,220
end goal there's a lot of intermediate

779
00:26:56,220 --> 00:26:59,070
steps to get there so there's a few

780
00:26:59,070 --> 00:27:00,600
different there's a few different

781
00:27:00,600 --> 00:27:04,590
deployment models and how distributed

782
00:27:04,590 --> 00:27:06,450
they are so the first one is a normal

783
00:27:06,450 --> 00:27:07,860
server like you didn't know like it's a

784
00:27:07,860 --> 00:27:09,690
server and has URL and you go to it and

785
00:27:09,690 --> 00:27:11,970
the application is there you can put it

786
00:27:11,970 --> 00:27:14,370
on your you know your bumper sticker

787
00:27:14,370 --> 00:27:15,870
this is most like what all of you are

788
00:27:15,870 --> 00:27:18,900
doing yeah so this is this is the thing

789
00:27:18,900 --> 00:27:22,050
that we you know I got the familiar with

790
00:27:22,050 --> 00:27:23,430
through PHP and rails and there's lots

791
00:27:23,430 --> 00:27:25,980
of other ways to do it but couch up will

792
00:27:25,980 --> 00:27:27,900
serve that I mean a couch TV design

793
00:27:27,900 --> 00:27:29,640
document can be served at a particular

794
00:27:29,640 --> 00:27:32,400
location you can even put some proxy

795
00:27:32,400 --> 00:27:34,620
stuff in there so that if you didn't

796
00:27:34,620 --> 00:27:35,970
want people to clone down the source

797
00:27:35,970 --> 00:27:37,710
code it's you know not that hard to

798
00:27:37,710 --> 00:27:41,880
change then and you can also do URL

799
00:27:41,880 --> 00:27:43,710
right rewriting and whatnot in that

800
00:27:43,710 --> 00:27:46,680
deployment but the downside that we've

801
00:27:46,680 --> 00:27:48,600
all probably experienced if our site has

802
00:27:48,600 --> 00:27:50,400
had any kind of heavy traffic with being

803
00:27:50,400 --> 00:27:53,340
a like a normal server is that you are

804
00:27:53,340 --> 00:27:55,200
at the middle of it all else on your

805
00:27:55,200 --> 00:27:56,730
popular and everyone's coming to you and

806
00:27:56,730 --> 00:27:57,660
they want their data and they want it

807
00:27:57,660 --> 00:28:00,300
now and so latency gets really important

808
00:28:00,300 --> 00:28:01,410
and when you have lots of people trying

809
00:28:01,410 --> 00:28:02,670
to pull from you the latency just goes

810
00:28:02,670 --> 00:28:04,770
up and up and up and eventually your

811
00:28:04,770 --> 00:28:07,640
site falls over if it's really bad and

812
00:28:07,640 --> 00:28:10,290
that's it's not good to be unavailable

813
00:28:10,290 --> 00:28:12,780
and it's not good to be slow when

814
00:28:12,780 --> 00:28:14,010
especially at the moments when you're

815
00:28:14,010 --> 00:28:16,950
getting most popular so if we take so

816
00:28:16,950 --> 00:28:18,480
that's centralized model we can get a

817
00:28:18,480 --> 00:28:20,880
little bit distributed with offline mode

818
00:28:20,880 --> 00:28:23,220
so I mean you're probably familiar a

819
00:28:23,220 --> 00:28:24,750
little bit with offline mode but maybe

820
00:28:24,750 --> 00:28:27,150
you I think if you run oh if you create

821
00:28:27,150 --> 00:28:28,290
a couch to be application you get the

822
00:28:28,290 --> 00:28:29,700
offline mode for free there's no like

823
00:28:29,700 --> 00:28:31,560
things you need to install no gears

824
00:28:31,560 --> 00:28:33,680
programming no SQL in HTML

825
00:28:33,680 --> 00:28:36,550
that some people seem to be happy about

826
00:28:36,550 --> 00:28:41,840
sir so what do you like what you can do

827
00:28:41,840 --> 00:28:44,060
you just run your run a local copy of

828
00:28:44,060 --> 00:28:45,170
your couch if you say it like the block

829
00:28:45,170 --> 00:28:47,420
example again so you're riding home from

830
00:28:47,420 --> 00:28:49,100
jas console you want you want to say

831
00:28:49,100 --> 00:28:50,510
that the catch to me talk was the most

832
00:28:50,510 --> 00:28:52,550
awesome stalk you've ever seen and you

833
00:28:52,550 --> 00:28:54,380
cannot wait so you fire up your blog on

834
00:28:54,380 --> 00:28:56,120
your on your laptop on in-flight and you

835
00:28:56,120 --> 00:28:57,800
just type that blog post post it to your

836
00:28:57,800 --> 00:29:01,040
blog on your local your local times to

837
00:29:01,040 --> 00:29:02,480
be when you get home you just replicate

838
00:29:02,480 --> 00:29:03,980
that blog post to your life blog and

839
00:29:03,980 --> 00:29:07,010
it's published so you could like life

840
00:29:07,010 --> 00:29:08,960
interact with your blogging software but

841
00:29:08,960 --> 00:29:10,340
on your local machine and then whenever

842
00:29:10,340 --> 00:29:14,330
you you are available again you can can

843
00:29:14,330 --> 00:29:15,560
make it available for everybody else

844
00:29:15,560 --> 00:29:17,750
well so the other another example like

845
00:29:17,750 --> 00:29:19,700
like Gmail right it's a great service to

846
00:29:19,700 --> 00:29:21,350
makes it so not to worry about setting

847
00:29:21,350 --> 00:29:23,900
up smtp stuff but everybody's hitting it

848
00:29:23,900 --> 00:29:25,880
all at once then Google's load is going

849
00:29:25,880 --> 00:29:27,830
to spike whereas if they were using

850
00:29:27,830 --> 00:29:29,810
CouchDB to provide an offline mode you

851
00:29:29,810 --> 00:29:31,940
know email client then they don't need

852
00:29:31,940 --> 00:29:33,860
to worry about latency because if you

853
00:29:33,860 --> 00:29:35,060
when you go to hit your replication

854
00:29:35,060 --> 00:29:36,800
requests to bring yourself up to the

855
00:29:36,800 --> 00:29:39,260
remote or to push to the remote it's not

856
00:29:39,260 --> 00:29:40,730
a big deal if it takes five seconds for

857
00:29:40,730 --> 00:29:42,920
that replication flow to start and so

858
00:29:42,920 --> 00:29:44,630
when you're optimizing for throughput

859
00:29:44,630 --> 00:29:46,730
and not latency on operations side you

860
00:29:46,730 --> 00:29:49,250
can get a lot more throughput so offline

861
00:29:49,250 --> 00:29:51,470
mode can give your users a really snappy

862
00:29:51,470 --> 00:29:53,270
experience but with more predictable

863
00:29:53,270 --> 00:29:56,360
lower load on your servers so yeah

864
00:29:56,360 --> 00:29:58,490
hopefully we'll see this happening a lot

865
00:29:58,490 --> 00:30:01,370
I mean we already are but in the in the

866
00:30:01,370 --> 00:30:02,570
future people will understand that

867
00:30:02,570 --> 00:30:04,520
there's more benefits than just remote

868
00:30:04,520 --> 00:30:06,770
availability for offline mode the

869
00:30:06,770 --> 00:30:08,750
biggest thing about cloud computing is

870
00:30:08,750 --> 00:30:10,910
that it it kind of pretends that the

871
00:30:10,910 --> 00:30:12,800
network is always available and like

872
00:30:12,800 --> 00:30:14,810
Wi-Fi here it's pretty good like big

873
00:30:14,810 --> 00:30:18,140
props to the Ops guys but when you're

874
00:30:18,140 --> 00:30:19,970
really really really really an internet

875
00:30:19,970 --> 00:30:21,710
connection it won't be there I won't be

876
00:30:21,710 --> 00:30:23,540
too expensive that you like like worry

877
00:30:23,540 --> 00:30:25,190
about like paying 50 bucks for ten

878
00:30:25,190 --> 00:30:27,350
minutes of internet or like I don't know

879
00:30:27,350 --> 00:30:30,110
3g or GSM just goes away and like you

880
00:30:30,110 --> 00:30:31,250
have some other sort of issues so to

881
00:30:31,250 --> 00:30:32,840
have stuff locally that you can work

882
00:30:32,840 --> 00:30:35,990
with and sing like the replication is

883
00:30:35,990 --> 00:30:39,800
pretty resilient again like against like

884
00:30:39,800 --> 00:30:42,530
networking problems so if it if it

885
00:30:42,530 --> 00:30:44,300
breaks you can just restart it when

886
00:30:44,300 --> 00:30:44,999
networks

887
00:30:44,999 --> 00:30:46,889
back we've definitely replicated like

888
00:30:46,889 --> 00:30:49,679
from Portland Maryland via his iphone

889
00:30:49,679 --> 00:30:51,689
how that was like my Wi-Fi in my office

890
00:30:51,689 --> 00:30:54,239
went down so I attended my like 2g

891
00:30:54,239 --> 00:30:58,019
iphone through my VPN and then I

892
00:30:58,019 --> 00:31:00,719
replicated catch at Damian's catch to be

893
00:31:00,719 --> 00:31:02,969
blog to my machine through that 2g

894
00:31:02,969 --> 00:31:05,549
iphone and across the world that was

895
00:31:05,549 --> 00:31:08,909
pretty pretty amazing so then yeah

896
00:31:08,909 --> 00:31:10,949
offline mode is like replication is good

897
00:31:10,949 --> 00:31:13,199
for this but what we're really here for

898
00:31:13,199 --> 00:31:16,379
is the peer-to-peer web we want we want

899
00:31:16,379 --> 00:31:18,239
the applications to live there soon as

900
00:31:18,239 --> 00:31:20,669
the kids could hack them because like

901
00:31:20,669 --> 00:31:23,489
you know I want kids to get in trouble

902
00:31:23,489 --> 00:31:24,779
for programming too much because they

903
00:31:24,779 --> 00:31:26,099
took apart their I implant and put it

904
00:31:26,099 --> 00:31:27,239
back together and the way they like it

905
00:31:27,239 --> 00:31:31,589
and so you know it's the same thing the

906
00:31:31,589 --> 00:31:33,479
only challenge here is is trying to find

907
00:31:33,479 --> 00:31:36,329
you know a way to tunnel the HTTP

908
00:31:36,329 --> 00:31:38,969
between them but you can right tools to

909
00:31:38,969 --> 00:31:40,829
get around that or at the worst case you

910
00:31:40,829 --> 00:31:43,859
know have an ad hoc you know public

911
00:31:43,859 --> 00:31:45,539
server that you both replicate via then

912
00:31:45,539 --> 00:31:48,839
that can change over time so yeah in

913
00:31:48,839 --> 00:31:50,639
this case when you're the application

914
00:31:50,639 --> 00:31:52,499
developer like it's like developing for

915
00:31:52,499 --> 00:31:54,449
the desktop you're not running anything

916
00:31:54,449 --> 00:31:56,579
except for maybe you know a github

917
00:31:56,579 --> 00:31:58,019
repository people can pull down from

918
00:31:58,019 --> 00:32:00,059
there or from your you know your starter

919
00:32:00,059 --> 00:32:03,299
CouchDB they can replicate in and then

920
00:32:03,299 --> 00:32:05,159
the application from there is out of

921
00:32:05,159 --> 00:32:06,479
your hands and it will bounce around you

922
00:32:06,479 --> 00:32:08,129
could drop new changes into the pool and

923
00:32:08,129 --> 00:32:09,419
you know maybe they'll get picked up or

924
00:32:09,419 --> 00:32:11,129
maybe they won't depending on what your

925
00:32:11,129 --> 00:32:13,799
user base is like but I think that the

926
00:32:13,799 --> 00:32:16,099
idea of building web applications in

927
00:32:16,099 --> 00:32:18,929
JavaScript and HTML and having them be

928
00:32:18,929 --> 00:32:21,659
able to go anywhere and you know be

929
00:32:21,659 --> 00:32:24,599
hacked on by anyone this is this is what

930
00:32:24,599 --> 00:32:26,489
excites me is what got me a new couch to

931
00:32:26,489 --> 00:32:28,469
be in the second place I got into it the

932
00:32:28,469 --> 00:32:29,579
first place for some other stuff but

933
00:32:29,579 --> 00:32:31,019
then I got really fired up when I

934
00:32:31,019 --> 00:32:34,799
realized that you could do this so yeah

935
00:32:34,799 --> 00:32:36,089
that's that's a little bit about

936
00:32:36,089 --> 00:32:37,919
programming at the edge there's still

937
00:32:37,919 --> 00:32:39,449
still some other topics we want to cover

938
00:32:39,449 --> 00:32:42,569
but first I want to just quote from the

939
00:32:42,569 --> 00:32:44,369
a GPL which is not a license that I

940
00:32:44,369 --> 00:32:47,489
necessarily think we need it sucks but I

941
00:32:47,489 --> 00:32:50,959
do think that it describes it describes

942
00:32:50,959 --> 00:32:53,039
what happens when you write applications

943
00:32:53,039 --> 00:32:54,779
in this manner it's a public use of a

944
00:32:54,779 --> 00:32:56,099
modified version on a publicly

945
00:32:56,099 --> 00:32:57,509
accessible server gives the public a

946
00:32:57,509 --> 00:32:58,169
success

947
00:32:58,169 --> 00:32:59,999
the source code what I say is we don't

948
00:32:59,999 --> 00:33:01,289
need a license to make that happen

949
00:33:01,289 --> 00:33:03,299
because that's just what happens when

950
00:33:03,299 --> 00:33:05,850
your code runs in this in this kind of

951
00:33:05,850 --> 00:33:10,009
couch app public manner so yeah that's a

952
00:33:10,009 --> 00:33:14,850
just you know make the future so now

953
00:33:14,850 --> 00:33:17,100
back to the application the document

954
00:33:17,100 --> 00:33:21,330
programming model context is expensive

955
00:33:21,330 --> 00:33:23,220
that's what happens you know when these

956
00:33:23,220 --> 00:33:25,259
big applications fall down it's because

957
00:33:25,259 --> 00:33:26,609
they're trying to load up like 50

958
00:33:26,609 --> 00:33:29,039
documents in compare mall in one request

959
00:33:29,039 --> 00:33:30,629
response cycle and that's just not where

960
00:33:30,629 --> 00:33:36,090
that belongs there's you gotta decide

961
00:33:36,090 --> 00:33:38,429
what goes in the request response cycle

962
00:33:38,429 --> 00:33:40,169
and what doesn't and how we should be

963
00:33:40,169 --> 00:33:41,820
very conservative about what it lets you

964
00:33:41,820 --> 00:33:43,529
put into that cycle because we're a

965
00:33:43,529 --> 00:33:44,669
database and we're not going to let you

966
00:33:44,669 --> 00:33:46,320
put something into that cycle that's so

967
00:33:46,320 --> 00:33:49,649
that you could you know do s yourself so

968
00:33:49,649 --> 00:33:52,529
yeah the context stuff has to come

969
00:33:52,529 --> 00:33:53,940
outside but there's a lot you can do

970
00:33:53,940 --> 00:33:57,960
without too much context how you go in

971
00:33:57,960 --> 00:34:02,159
all right well so rendering documents is

972
00:34:02,159 --> 00:34:05,070
HTML is accomplished by a JavaScript

973
00:34:05,070 --> 00:34:07,590
function that gets the JSON document as

974
00:34:07,590 --> 00:34:09,809
an argument as well as some of the

975
00:34:09,809 --> 00:34:11,940
headers information so you can switch on

976
00:34:11,940 --> 00:34:14,700
the accept header to return HTML or XML

977
00:34:14,700 --> 00:34:19,619
or whatever the test suite returns a PNG

978
00:34:19,619 --> 00:34:21,359
file from one of these functions just to

979
00:34:21,359 --> 00:34:25,319
make sure that it works and it's it's

980
00:34:25,319 --> 00:34:27,750
really simple you doubt put whatever

981
00:34:27,750 --> 00:34:28,980
string you want and that's what goes to

982
00:34:28,980 --> 00:34:31,619
the browser so the nice thing is that go

983
00:34:31,619 --> 00:34:35,369
back one slide you right this one's for

984
00:34:35,369 --> 00:34:37,530
for your application that when a browser

985
00:34:37,530 --> 00:34:40,679
hits it you serve with HTML if I can API

986
00:34:40,679 --> 00:34:42,569
consumer client hits it with the

987
00:34:42,569 --> 00:34:45,299
application JSON accept header it will

988
00:34:45,299 --> 00:34:47,010
get JSON if feed reader hits that you

989
00:34:47,010 --> 00:34:48,990
get the XML all from the same source so

990
00:34:48,990 --> 00:34:50,669
you get all that for free from just

991
00:34:50,669 --> 00:34:53,369
using the standard HTTP API so there's

992
00:34:53,369 --> 00:34:55,349
no nothing else you will need to provide

993
00:34:55,349 --> 00:34:57,480
a feed for full foil blog for anything

994
00:34:57,480 --> 00:35:00,150
else I don't let the I also it's fun

995
00:35:00,150 --> 00:35:01,710
because you can make applications like

996
00:35:01,710 --> 00:35:02,819
we've been talking about but it's also

997
00:35:02,819 --> 00:35:04,319
really useful for a couch tb's core

998
00:35:04,319 --> 00:35:06,510
mission as a database because you can

999
00:35:06,510 --> 00:35:08,309
make it so that you know you have some

1000
00:35:08,309 --> 00:35:09,660
legacy API that you need to

1001
00:35:09,660 --> 00:35:11,760
but you don't really care about and you

1002
00:35:11,760 --> 00:35:12,750
don't have to maintain a whole other

1003
00:35:12,750 --> 00:35:14,039
infrastructure for translating your

1004
00:35:14,039 --> 00:35:17,849
couchdb install into this legacy API so

1005
00:35:17,849 --> 00:35:19,740
if you implement it in JavaScript then

1006
00:35:19,740 --> 00:35:21,000
you can put it up on the couch and it'll

1007
00:35:21,000 --> 00:35:22,319
just live there forever and you never

1008
00:35:22,319 --> 00:35:24,150
have to deal with it again like for

1009
00:35:24,150 --> 00:35:25,920
example back in the day coach to be used

1010
00:35:25,920 --> 00:35:28,349
used to use XML because of JSON and I we

1011
00:35:28,349 --> 00:35:30,109
switch to Jason everybody will say yay

1012
00:35:30,109 --> 00:35:32,880
because only some people said like well

1013
00:35:32,880 --> 00:35:34,980
we like XML we got to still go to use

1014
00:35:34,980 --> 00:35:36,900
XML and that's where we will give them

1015
00:35:36,900 --> 00:35:38,549
this they can like transform the JSON

1016
00:35:38,549 --> 00:35:40,020
transparently into XML they can still

1017
00:35:40,020 --> 00:35:41,970
use that with whatever technology they

1018
00:35:41,970 --> 00:35:44,039
happen to use yeah our spider monkey

1019
00:35:44,039 --> 00:35:45,960
interpreter includes the e 4x bindings

1020
00:35:45,960 --> 00:35:47,630
so you can you can do native XML

1021
00:35:47,630 --> 00:35:52,559
processing as well whereas I said like

1022
00:35:52,559 --> 00:35:53,970
our core mission of being a database we

1023
00:35:53,970 --> 00:35:56,130
do this a part of the straitjacket we

1024
00:35:56,130 --> 00:35:58,559
put you in is that you show one document

1025
00:35:58,559 --> 00:36:00,119
you don't like you don't load up a

1026
00:36:00,119 --> 00:36:01,440
document load up three other documents

1027
00:36:01,440 --> 00:36:03,390
because of it and then change one of

1028
00:36:03,390 --> 00:36:05,549
them and you know do something different

1029
00:36:05,549 --> 00:36:09,920
because of you know like who the user is

1030
00:36:09,920 --> 00:36:14,250
what you do is you yeah you just render

1031
00:36:14,250 --> 00:36:15,900
the the HTML or whatever from the

1032
00:36:15,900 --> 00:36:17,190
document and that means that there's no

1033
00:36:17,190 --> 00:36:20,520
side effects so you can't go you know

1034
00:36:20,520 --> 00:36:23,339
like having a get request so that screws

1035
00:36:23,339 --> 00:36:25,380
up your database over time I that that

1036
00:36:25,380 --> 00:36:27,119
that in turn and hidden from the

1037
00:36:27,119 --> 00:36:28,859
application Mike's like three other get

1038
00:36:28,859 --> 00:36:30,990
requests and five posts and whatnot that

1039
00:36:30,990 --> 00:36:33,480
will totally not be able to like sustain

1040
00:36:33,480 --> 00:36:35,910
a lot bigger load and because there's no

1041
00:36:35,910 --> 00:36:37,920
side effects it's cacheable so that

1042
00:36:37,920 --> 00:36:39,720
means that you throw like a varnish or

1043
00:36:39,720 --> 00:36:41,910
whatever in front of couch db's you know

1044
00:36:41,910 --> 00:36:45,779
an HTTP cache there and now things are

1045
00:36:45,779 --> 00:36:47,700
it automatically sets up the e tags for

1046
00:36:47,700 --> 00:36:50,609
you so when things are the second

1047
00:36:50,609 --> 00:36:51,930
request it just comes out of the cash

1048
00:36:51,930 --> 00:36:56,609
rather than out of cash to be so yeah

1049
00:36:56,609 --> 00:37:00,029
showing a doc simple related what you

1050
00:37:00,029 --> 00:37:02,640
can list views so a view and CouchDB you

1051
00:37:02,640 --> 00:37:05,480
know gives you a sorted list of you know

1052
00:37:05,480 --> 00:37:08,369
documents or parts of documents based on

1053
00:37:08,369 --> 00:37:10,260
whatever key you choose so it's great

1054
00:37:10,260 --> 00:37:11,730
for making like a list of all the blog

1055
00:37:11,730 --> 00:37:14,819
post by date but that's in JSON so if

1056
00:37:14,819 --> 00:37:16,049
you need that to be an HTML you can't

1057
00:37:16,049 --> 00:37:17,640
very well load that whole list up into a

1058
00:37:17,640 --> 00:37:19,020
JavaScript function and process it

1059
00:37:19,020 --> 00:37:20,160
because it could be millions of items

1060
00:37:20,160 --> 00:37:22,370
long so what we

1061
00:37:22,370 --> 00:37:24,290
have is one by you know one row at a

1062
00:37:24,290 --> 00:37:26,810
time processing so you run once to set

1063
00:37:26,810 --> 00:37:27,800
up the head of your document and then

1064
00:37:27,800 --> 00:37:29,540
after that your javascript function gets

1065
00:37:29,540 --> 00:37:31,700
called once for each row and garbage

1066
00:37:31,700 --> 00:37:33,860
collected afterwards so you're never

1067
00:37:33,860 --> 00:37:35,600
gonna all that run some constant space

1068
00:37:35,600 --> 00:37:37,610
you can kind of blob memory for just

1069
00:37:37,610 --> 00:37:39,620
pretty producing an atom feed out of

1070
00:37:39,620 --> 00:37:41,180
your blog posts yeah you can make an

1071
00:37:41,180 --> 00:37:43,250
atom feed you know hundreds of gigabytes

1072
00:37:43,250 --> 00:37:45,320
in size and couchdb would never hit more

1073
00:37:45,320 --> 00:37:48,020
than one row at a time so yeah then

1074
00:37:48,020 --> 00:37:49,450
you're up your clients parts did I guess

1075
00:37:49,450 --> 00:37:51,710
so yeah that's that's the point of that

1076
00:37:51,710 --> 00:37:53,450
you know it's another straightjacket you

1077
00:37:53,450 --> 00:37:56,960
list one row at a time but at in return

1078
00:37:56,960 --> 00:37:59,300
couch TV says well you do well just do

1079
00:37:59,300 --> 00:38:00,230
this all you want you're never going to

1080
00:38:00,230 --> 00:38:03,350
take down your couch note from it so

1081
00:38:03,350 --> 00:38:04,550
sort of the same story with the

1082
00:38:04,550 --> 00:38:06,920
validations they're just an update so

1083
00:38:06,920 --> 00:38:08,690
it's not update is you know the new

1084
00:38:08,690 --> 00:38:10,070
version of a document the old version of

1085
00:38:10,070 --> 00:38:12,260
the document if it exists and the user

1086
00:38:12,260 --> 00:38:14,930
who's making the update and when you

1087
00:38:14,930 --> 00:38:16,550
have that information you know your

1088
00:38:16,550 --> 00:38:18,140
JavaScript function either throws an

1089
00:38:18,140 --> 00:38:20,480
error it doesn't and if but it doesn't

1090
00:38:20,480 --> 00:38:21,890
go loading up a bunch of other stuff it

1091
00:38:21,890 --> 00:38:23,240
doesn't it doesn't pull in context to

1092
00:38:23,240 --> 00:38:27,770
make those decisions right you're doing

1093
00:38:27,770 --> 00:38:30,620
the slides so oh alright yeah so what do

1094
00:38:30,620 --> 00:38:32,050
you do what do you do when you need to

1095
00:38:32,050 --> 00:38:34,550
when you need to make those when you

1096
00:38:34,550 --> 00:38:37,100
need to make those updates you know when

1097
00:38:37,100 --> 00:38:38,270
you need business logic when you need

1098
00:38:38,270 --> 00:38:40,880
stuff that actually needs to look at

1099
00:38:40,880 --> 00:38:42,860
lots of documents you've got to do it in

1100
00:38:42,860 --> 00:38:45,020
you know sort of outside of the request

1101
00:38:45,020 --> 00:38:47,600
response cycle couchdb has lots of ways

1102
00:38:47,600 --> 00:38:49,550
that make it easy to subscribe to

1103
00:38:49,550 --> 00:38:51,200
updates to the database you can write a

1104
00:38:51,200 --> 00:38:53,510
an OS process just like a ruby scripter

1105
00:38:53,510 --> 00:38:54,560
what everything gets pinged every time

1106
00:38:54,560 --> 00:38:56,450
someone does something you can react to

1107
00:38:56,450 --> 00:38:58,730
that we're adding comet hooks so if you

1108
00:38:58,730 --> 00:39:00,800
know that eventually at some point

1109
00:39:00,800 --> 00:39:02,480
someone today is going to is going to

1110
00:39:02,480 --> 00:39:05,300
post a document of this URL you can just

1111
00:39:05,300 --> 00:39:08,450
hang there on a get request and you know

1112
00:39:08,450 --> 00:39:10,280
only when that change comes through then

1113
00:39:10,280 --> 00:39:11,480
the response comes back to your browser

1114
00:39:11,480 --> 00:39:14,230
so you can do instant notifications and

1115
00:39:14,230 --> 00:39:16,280
you know you could also use that from

1116
00:39:16,280 --> 00:39:17,900
background scripts if you want to start

1117
00:39:17,900 --> 00:39:21,890
an asynchronous process based on it so

1118
00:39:21,890 --> 00:39:24,530
if you think back I'll do what will

1119
00:39:24,530 --> 00:39:26,330
Chris said the the taking everything

1120
00:39:26,330 --> 00:39:28,760
that would hurt your application front

1121
00:39:28,760 --> 00:39:30,800
and is getting taken out of the request

1122
00:39:30,800 --> 00:39:33,260
response cycle if you get to like the

1123
00:39:33,260 --> 00:39:35,630
big ones yahoo facebook flickr

1124
00:39:35,630 --> 00:39:37,280
they tried that a lot that they just

1125
00:39:37,280 --> 00:39:39,080
have to serve static content and

1126
00:39:39,080 --> 00:39:40,430
everything is preprocessed or this

1127
00:39:40,430 --> 00:39:42,980
process as synchronously that's the way

1128
00:39:42,980 --> 00:39:45,290
to run big sides and that's like again

1129
00:39:45,290 --> 00:39:47,450
we only put things in that you can run

1130
00:39:47,450 --> 00:39:49,640
big sites but we own also make it that's

1131
00:39:49,640 --> 00:39:51,770
totally easy to do that it makes sense

1132
00:39:51,770 --> 00:39:54,940
to run it on a single like small side so

1133
00:39:54,940 --> 00:39:58,100
the sort of the last point and this is

1134
00:39:58,100 --> 00:40:01,910
more something to think about is how do

1135
00:40:01,910 --> 00:40:03,890
you manage user identity in a system

1136
00:40:03,890 --> 00:40:04,880
like this in the in the peer-to-peer

1137
00:40:04,880 --> 00:40:06,710
system because you can't ask the server

1138
00:40:06,710 --> 00:40:08,600
to validate that you know that they are

1139
00:40:08,600 --> 00:40:10,550
who they say they are because you don't

1140
00:40:10,550 --> 00:40:12,230
know what was the server when that

1141
00:40:12,230 --> 00:40:15,940
validation was made so you've got to

1142
00:40:15,940 --> 00:40:17,900
thought about this for a while and then

1143
00:40:17,900 --> 00:40:19,040
I thought I was crazy because the only

1144
00:40:19,040 --> 00:40:20,540
answer I could come up with was by using

1145
00:40:20,540 --> 00:40:23,330
you know sort of the gpg yeah the web of

1146
00:40:23,330 --> 00:40:28,010
trust gpg style signed documents and and

1147
00:40:28,010 --> 00:40:29,750
we know hold that oh well that works

1148
00:40:29,750 --> 00:40:31,730
yeah well then the users I mean it just

1149
00:40:31,730 --> 00:40:33,800
hasn't caught on and that's not that's

1150
00:40:33,800 --> 00:40:35,750
not like an indictment of the technology

1151
00:40:35,750 --> 00:40:37,130
but it's really hard to make the

1152
00:40:37,130 --> 00:40:38,930
metaphor easy for people so i'm working

1153
00:40:38,930 --> 00:40:40,430
on that end but while I was sitting

1154
00:40:40,430 --> 00:40:41,750
around thinking I was crazy i talked to

1155
00:40:41,750 --> 00:40:43,850
some people who know lotus notes really

1156
00:40:43,850 --> 00:40:45,410
well and that's what Lotus does so I

1157
00:40:45,410 --> 00:40:47,510
guess it's not that crazy sort of

1158
00:40:47,510 --> 00:40:50,480
similar the deployment and it might not

1159
00:40:50,480 --> 00:40:52,010
be like trip to gap cryptographically

1160
00:40:52,010 --> 00:40:55,010
like super secure so if you like if you

1161
00:40:55,010 --> 00:40:56,690
run your corporation get a bunch of

1162
00:40:56,690 --> 00:40:58,310
messages that is signed with the key and

1163
00:40:58,310 --> 00:41:00,860
you know okay that guy's jack and jack

1164
00:41:00,860 --> 00:41:02,960
like send me send me these messages and

1165
00:41:02,960 --> 00:41:04,460
I know they all these other measures

1166
00:41:04,460 --> 00:41:06,020
messages that I'm now getting our sign

1167
00:41:06,020 --> 00:41:07,670
with the same key I'm pretty sure the

1168
00:41:07,670 --> 00:41:09,050
same person centered that send the

1169
00:41:09,050 --> 00:41:10,430
earlier messages and if I know the

1170
00:41:10,430 --> 00:41:12,290
earlier messages we're coming from Jack

1171
00:41:12,290 --> 00:41:14,030
I know the new messages that are also

1172
00:41:14,030 --> 00:41:16,970
from jag so this is like there's the web

1173
00:41:16,970 --> 00:41:18,470
of trust thing is something we take out

1174
00:41:18,470 --> 00:41:19,910
of there that's not implicit in the

1175
00:41:19,910 --> 00:41:21,410
technology which makes it a lot simpler

1176
00:41:21,410 --> 00:41:24,050
so if you like really need to be like

1177
00:41:24,050 --> 00:41:27,020
cryptographically sure that that there's

1178
00:41:27,020 --> 00:41:30,800
no identity behind a message you might

1179
00:41:30,800 --> 00:41:32,480
need to like introduce a little more

1180
00:41:32,480 --> 00:41:34,400
more headache for the user but for the

1181
00:41:34,400 --> 00:41:35,690
general user it might look like Jack

1182
00:41:35,690 --> 00:41:38,420
that's Jack it's all right yeah so I've

1183
00:41:38,420 --> 00:41:40,610
been kind of like diving in researching

1184
00:41:40,610 --> 00:41:42,200
like loading up all the old crypto

1185
00:41:42,200 --> 00:41:44,060
libraries and JavaScript and like

1186
00:41:44,060 --> 00:41:45,830
nothing really was quite done there's

1187
00:41:45,830 --> 00:41:46,940
some good implementations of the

1188
00:41:46,940 --> 00:41:47,850
algorithms but

1189
00:41:47,850 --> 00:41:50,310
like of the of a ski armored versions of

1190
00:41:50,310 --> 00:41:51,930
the key pairs and whatnot so if anybody

1191
00:41:51,930 --> 00:41:54,060
here knows JavaScript crypto better than

1192
00:41:54,060 --> 00:41:56,100
I do which is probably not I don't know

1193
00:41:56,100 --> 00:41:57,180
it that well but I did some research

1194
00:41:57,180 --> 00:41:58,620
like let's talk because I want to make

1195
00:41:58,620 --> 00:42:00,300
this happen and I spent like two weeks

1196
00:42:00,300 --> 00:42:04,380
researching it I think that I mean it's

1197
00:42:04,380 --> 00:42:05,670
just right there it's low-hanging fruit

1198
00:42:05,670 --> 00:42:06,570
and once we have that then that

1199
00:42:06,570 --> 00:42:07,920
peer-to-peer apps thing is going to be

1200
00:42:07,920 --> 00:42:12,120
totally ready to go so yeah we didn't

1201
00:42:12,120 --> 00:42:14,400
get to do much in the way of actual

1202
00:42:14,400 --> 00:42:16,440
putting color on the screen and because

1203
00:42:16,440 --> 00:42:18,060
we wanted to like give you the feel for

1204
00:42:18,060 --> 00:42:21,330
a CouchDB and what it can do but I think

1205
00:42:21,330 --> 00:42:23,160
we're going to do a track be thing

1206
00:42:23,160 --> 00:42:24,930
tomorrow hopefully so if you want to

1207
00:42:24,930 --> 00:42:27,750
come c code will you know put that up on

1208
00:42:27,750 --> 00:42:29,730
the screen and mess up our code examples

1209
00:42:29,730 --> 00:42:34,380
a lot probably but yeah that's oh and

1210
00:42:34,380 --> 00:42:37,110
one last thing we're giving out free

1211
00:42:37,110 --> 00:42:40,350
hosting for CouchDB we have were you

1212
00:42:40,350 --> 00:42:42,600
know maybe I don't know if we've got

1213
00:42:42,600 --> 00:42:44,430
this this this project where we try to

1214
00:42:44,430 --> 00:42:45,930
like sell couchdb for people who are

1215
00:42:45,930 --> 00:42:48,360
interested in it and we sort of just set

1216
00:42:48,360 --> 00:42:49,710
it up so we're not charging for it and

1217
00:42:49,710 --> 00:42:51,420
we like need people to break it so

1218
00:42:51,420 --> 00:42:54,720
please like sign up and break it yeah so

1219
00:42:54,720 --> 00:42:57,150
yeah so hosting couch i oh and invite

1220
00:42:57,150 --> 00:43:01,590
code for today is stone dash horse so

1221
00:43:01,590 --> 00:43:04,140
you know just think of the statue and

1222
00:43:04,140 --> 00:43:05,880
find us on Twitter and find us in the

1223
00:43:05,880 --> 00:43:09,960
hallways and yeah thanks for listening

1224
00:43:09,960 --> 00:43:16,650
thanks oh well it's a good question is

1225
00:43:16,650 --> 00:43:20,550
kind of two parts so the question is how

1226
00:43:20,550 --> 00:43:23,220
do you get you know with MapReduce you

1227
00:43:23,220 --> 00:43:27,210
can build up context but um or how can

1228
00:43:27,210 --> 00:43:28,290
you build up contacts the other one is

1229
00:43:28,290 --> 00:43:29,730
can use that context and validation

1230
00:43:29,730 --> 00:43:32,820
function so you can't use the context in

1231
00:43:32,820 --> 00:43:34,140
a validation function it's just one

1232
00:43:34,140 --> 00:43:35,970
document just one update the old version

1233
00:43:35,970 --> 00:43:38,340
of the new version so you're basically

1234
00:43:38,340 --> 00:43:41,040
validating for well-formed pneus with a

1235
00:43:41,040 --> 00:43:42,330
little bit of the user context there to

1236
00:43:42,330 --> 00:43:43,320
make sure that they're not lying about

1237
00:43:43,320 --> 00:43:46,080
being the author if you decide to do

1238
00:43:46,080 --> 00:43:48,150
that in your function but you can do

1239
00:43:48,150 --> 00:43:51,060
join like queries in MapReduce by

1240
00:43:51,060 --> 00:43:53,760
collating rose that you want to have

1241
00:43:53,760 --> 00:43:55,410
next to each other you can just give

1242
00:43:55,410 --> 00:43:57,320
them similar keys to little collate

1243
00:43:57,320 --> 00:44:01,050
contiguously so you can you can pull out

1244
00:44:01,050 --> 00:44:01,710
for instance up

1245
00:44:01,710 --> 00:44:03,300
blog post in all of its comments and a

1246
00:44:03,300 --> 00:44:05,339
single query by setting up your indexes

1247
00:44:05,339 --> 00:44:12,600
correctly

1248
00:44:12,610 --> 00:44:15,190
oh well it just wouldn't that's like an

1249
00:44:15,190 --> 00:44:17,170
application concerned as far as couchdb

1250
00:44:17,170 --> 00:44:19,930
looks at it so yeah you can have you are

1251
00:44:19,930 --> 00:44:22,240
eyes as parts of year so this is quote

1252
00:44:22,240 --> 00:44:23,950
from Jacob kaplan miles from the django

1253
00:44:23,950 --> 00:44:26,740
team and he said like django made a SP

1254
00:44:26,740 --> 00:44:28,300
look out of date because django was made

1255
00:44:28,300 --> 00:44:30,580
for the web and like asp was pretending

1256
00:44:30,580 --> 00:44:32,860
the web didn't exist and he also said

1257
00:44:32,860 --> 00:44:35,260
like HP makes makes Jango looks outdated

1258
00:44:35,260 --> 00:44:36,940
because cash to me is not made for the

1259
00:44:36,940 --> 00:44:38,710
web it's made off the web and the web

1260
00:44:38,710 --> 00:44:40,960
doesn't have like there's no integra

1261
00:44:40,960 --> 00:44:43,030
france there's just links so catch me

1262
00:44:43,030 --> 00:44:44,830
has jostling sketch is made of what all

1263
00:44:44,830 --> 00:44:50,769
the web gives us

1264
00:44:50,779 --> 00:44:54,769
yeah if you have secret data you know if

1265
00:44:54,769 --> 00:44:56,059
you file your doubt is public then you

1266
00:44:56,059 --> 00:44:57,529
can just use your validation function

1267
00:44:57,529 --> 00:44:59,150
put cow should be right there on port 80

1268
00:44:59,150 --> 00:45:01,459
and say only let you know only let

1269
00:45:01,459 --> 00:45:03,529
admins update or whatever but if you

1270
00:45:03,529 --> 00:45:04,969
have secret data then you need to use a

1271
00:45:04,969 --> 00:45:13,830
proxy

1272
00:45:13,840 --> 00:45:15,640
what I grade he did that there's a

1273
00:45:15,640 --> 00:45:16,790
patient zero that we

1274
00:45:16,790 --> 00:45:18,860
neither chance to look at yet but like

1275
00:45:18,860 --> 00:45:21,020
he did it in a weekend afternoon or

1276
00:45:21,020 --> 00:45:22,520
something that was really really quick

1277
00:45:22,520 --> 00:45:24,320
that he width of his own authentication

1278
00:45:24,320 --> 00:45:26,000
scheme soaked actually be the code base

1279
00:45:26,000 --> 00:45:27,920
it's a very very modular you can like if

1280
00:45:27,920 --> 00:45:29,120
you happen like you all like the

1281
00:45:29,120 --> 00:45:30,740
JavaScript but if you happened to not

1282
00:45:30,740 --> 00:45:31,910
like the JavaScript you could all that

1283
00:45:31,910 --> 00:45:33,500
although that in Python or Ruby or PHP

1284
00:45:33,500 --> 00:45:35,780
or whatever yeah I wouldn't see why but

1285
00:45:35,780 --> 00:45:37,910
you can very easily swap things out you

1286
00:45:37,910 --> 00:45:40,340
can write your own URL extensions you

1287
00:45:40,340 --> 00:45:41,900
can write external a nexus we've got a

1288
00:45:41,900 --> 00:45:43,940
project that integrates with leucine so

1289
00:45:43,940 --> 00:45:46,310
you get full-text search all that is

1290
00:45:46,310 --> 00:45:48,110
very very simple to understand we should

1291
00:45:48,110 --> 00:45:49,520
mention too that the code base the couch

1292
00:45:49,520 --> 00:45:51,230
TV airline code base is a great way to

1293
00:45:51,230 --> 00:45:52,970
learn erling because CouchDB has a

1294
00:45:52,970 --> 00:45:55,370
well-defined HTTP API as soon as you're

1295
00:45:55,370 --> 00:45:56,990
comfortable with that API you look at

1296
00:45:56,990 --> 00:45:57,740
the code base and you'll start seeing

1297
00:45:57,740 --> 00:45:59,150
things that you are understanding

1298
00:45:59,150 --> 00:46:05,360
recognize

1299
00:46:05,370 --> 00:46:08,290
there's multiple ways to do backup one

1300
00:46:08,290 --> 00:46:10,000
is just having a second node to

1301
00:46:10,000 --> 00:46:13,330
replicate to to do real like a host

1302
00:46:13,330 --> 00:46:18,550
setup or host backup you can from a live

1303
00:46:18,550 --> 00:46:20,050
cow should be instance you can just run

1304
00:46:20,050 --> 00:46:22,510
our shrink or CP on the database file on

1305
00:46:22,510 --> 00:46:24,970
disk to your e to your backup target

1306
00:46:24,970 --> 00:46:27,570
location and then reload that into a

1307
00:46:27,570 --> 00:46:30,490
running so over again so couch tb's file

1308
00:46:30,490 --> 00:46:32,890
structure or the file is append only so

1309
00:46:32,890 --> 00:46:35,200
your art if you are sync it you'll never

1310
00:46:35,200 --> 00:46:36,970
theirs will never get an inconsistent

1311
00:46:36,970 --> 00:46:38,500
file we don't ever we don't ever touch

1312
00:46:38,500 --> 00:46:40,450
anything we've already written as

1313
00:46:40,450 --> 00:46:42,010
there's no complex tools we need to

1314
00:46:42,010 --> 00:46:43,210
write you can just use the file system

1315
00:46:43,210 --> 00:46:46,150
tools such a backup so yeah and then

1316
00:46:46,150 --> 00:46:47,680
once you are synced over then you'd use

1317
00:46:47,680 --> 00:46:49,750
replication to bring up to it bring it

1318
00:46:49,750 --> 00:46:51,490
up to date with any updates that came in

1319
00:46:51,490 --> 00:46:58,609
while the rsync was running

1320
00:46:58,619 --> 00:47:00,869
it takes about six months like the first

1321
00:47:00,869 --> 00:47:02,819
few months I was like Damian cats as the

1322
00:47:02,819 --> 00:47:04,079
guy behind couch TV was talking like

1323
00:47:04,079 --> 00:47:05,609
what kind should be sucks it can't even

1324
00:47:05,609 --> 00:47:07,859
do this and he's like I think about what

1325
00:47:07,859 --> 00:47:08,999
you what are you trying to do here like

1326
00:47:08,999 --> 00:47:10,230
okay I'm trying to do this and this is

1327
00:47:10,230 --> 00:47:11,519
how it works and i will start doing

1328
00:47:11,519 --> 00:47:15,150
nested sets and mysql and it can't work

1329
00:47:15,150 --> 00:47:16,410
I can't walk it out how to do it in a

1330
00:47:16,410 --> 00:47:18,359
MapReduce view and I get pic take a step

1331
00:47:18,359 --> 00:47:20,460
back do it like this and then use the

1332
00:47:20,460 --> 00:47:22,289
view like that like yeah that's solely

1333
00:47:22,289 --> 00:47:23,940
up is a super works and that's not

1334
00:47:23,940 --> 00:47:25,499
nearly as complex that's what I've been

1335
00:47:25,499 --> 00:47:27,569
trying to do with the mysql database so

1336
00:47:27,569 --> 00:47:29,400
you need to unlearn a lot of things that

1337
00:47:29,400 --> 00:47:31,019
you're familiar with from a relational

1338
00:47:31,019 --> 00:47:33,630
database it turns out the document me

1339
00:47:33,630 --> 00:47:35,130
tougher comes from the real world so

1340
00:47:35,130 --> 00:47:36,539
everything that we have like on paper

1341
00:47:36,539 --> 00:47:38,819
receipts dog all these are documents and

1342
00:47:38,819 --> 00:47:40,319
they have the same properties that car

1343
00:47:40,319 --> 00:47:41,549
should be documents have they are

1344
00:47:41,549 --> 00:47:43,289
self-contained like my business card is

1345
00:47:43,289 --> 00:47:45,450
a document that has that it doesn't say

1346
00:47:45,450 --> 00:47:47,190
if x equals model I just don't have a

1347
00:47:47,190 --> 00:47:49,259
fax machine I don't make that explicit

1348
00:47:49,259 --> 00:47:53,279
so specifically how I was able to start

1349
00:47:53,279 --> 00:47:55,619
playing with it is i had a rails app and

1350
00:47:55,619 --> 00:47:56,999
what I did is I had my main model you

1351
00:47:56,999 --> 00:47:59,549
know like my user model and I just load

1352
00:47:59,549 --> 00:48:01,200
them all and loop through one at a time

1353
00:48:01,200 --> 00:48:03,119
and you know I was already kind of

1354
00:48:03,119 --> 00:48:04,739
halfway converting them to JSON for

1355
00:48:04,739 --> 00:48:06,089
other reasons of my API so then I just

1356
00:48:06,089 --> 00:48:07,470
started dumping that JSON and CouchDB

1357
00:48:07,470 --> 00:48:08,849
and that gave me enough of a grip to

1358
00:48:08,849 --> 00:48:09,779
where I could start playing with it

1359
00:48:09,779 --> 00:48:11,249
because that user models going to pull

1360
00:48:11,249 --> 00:48:12,539
up stuff from other tables if it needs

1361
00:48:12,539 --> 00:48:15,180
to to make your JSON so yeah so just

1362
00:48:15,180 --> 00:48:17,460
denormalize in your old code and push

1363
00:48:17,460 --> 00:48:19,739
the push the documents or rather normal

1364
00:48:19,739 --> 00:48:22,170
i yeah pull it all together and then

1365
00:48:22,170 --> 00:48:31,259
push the documents in the CouchDB

1366
00:48:31,269 --> 00:48:35,619
oh yeah each database is one file so

1367
00:48:35,619 --> 00:48:36,939
there's a couple of things you can do so

1368
00:48:36,939 --> 00:48:38,979
if you have like a user application

1369
00:48:38,979 --> 00:48:40,390
where you don't need cross-reference

1370
00:48:40,390 --> 00:48:43,299
user data such as an email each user get

1371
00:48:43,299 --> 00:48:45,640
to sell its own database so you've got a

1372
00:48:45,640 --> 00:48:47,019
bunch of files and like a tree was

1373
00:48:47,019 --> 00:48:48,130
tested with over a million data

1374
00:48:48,130 --> 00:48:49,899
databases in a single server so that's

1375
00:48:49,899 --> 00:48:53,229
not a problem and even very big

1376
00:48:53,229 --> 00:48:54,999
databases we've got there's one project

1377
00:48:54,999 --> 00:48:57,459
what Chris was doing 19 million

1378
00:48:57,459 --> 00:48:59,079
documents like we got a thousand

1379
00:48:59,079 --> 00:49:01,019
documents a second and then we add zup

1380
00:49:01,019 --> 00:49:04,329
for day and the insert rate after after

1381
00:49:04,329 --> 00:49:06,640
a day of inserting a total of like 86

1382
00:49:06,640 --> 00:49:09,249
million documents then degrade so well

1383
00:49:09,249 --> 00:49:11,589
integrated but like was not hardly at

1384
00:49:11,589 --> 00:49:13,569
all I mean you know it's order log in

1385
00:49:13,569 --> 00:49:17,919
for inserts so so yeah and we've got

1386
00:49:17,919 --> 00:49:19,419
installation that I have like around 200

1387
00:49:19,419 --> 00:49:21,339
gigabytes of data and single database

1388
00:49:21,339 --> 00:49:23,619
and they work just snappy the only it's

1389
00:49:23,619 --> 00:49:25,269
a bit of a pain to like copy all that

1390
00:49:25,269 --> 00:49:26,649
data back and forth and you might not be

1391
00:49:26,649 --> 00:49:28,299
comfortable with that but it works and

1392
00:49:28,299 --> 00:49:30,219
there's compaction so the file is depend

1393
00:49:30,219 --> 00:49:31,779
only but occasionally you know when it

1394
00:49:31,779 --> 00:49:33,130
starts to fill up your disk you need to

1395
00:49:33,130 --> 00:49:35,259
start compaction which which copy is

1396
00:49:35,259 --> 00:49:37,149
only the live data out of the old file

1397
00:49:37,149 --> 00:49:39,249
into a new file sort of like vacuum and

1398
00:49:39,249 --> 00:49:40,589
in postgres or see polite or

1399
00:49:40,589 --> 00:49:46,340
generational garbage collection right

1400
00:49:46,350 --> 00:49:48,360
so the catch to be API is so simple that

1401
00:49:48,360 --> 00:49:50,430
some guy the guy said meebo.com like the

1402
00:49:50,430 --> 00:49:53,310
web IM client folks they took courage to

1403
00:49:53,310 --> 00:49:54,960
be until we need sharting like we really

1404
00:49:54,960 --> 00:49:56,430
need it and they just build it in an

1405
00:49:56,430 --> 00:49:58,290
engine X module and a twisted Python

1406
00:49:58,290 --> 00:50:00,900
client to merge views and I'm like well

1407
00:50:00,900 --> 00:50:02,190
we've got the shouting thing and we're

1408
00:50:02,190 --> 00:50:03,540
like that's pretty cool can we see some

1409
00:50:03,540 --> 00:50:05,010
source and I got we got to talk to our

1410
00:50:05,010 --> 00:50:07,590
lawyers about that I can't do and a week

1411
00:50:07,590 --> 00:50:08,640
later or two week later they came back

1412
00:50:08,640 --> 00:50:10,020
okay we pull it up a google code on the

1413
00:50:10,020 --> 00:50:11,850
apache to license so everybody cutting

1414
00:50:11,850 --> 00:50:13,950
now use that like in production stuff

1415
00:50:13,950 --> 00:50:16,800
and it was really really simple to do

1416
00:50:16,800 --> 00:50:26,589
just because of our like HTTP API

1417
00:50:26,599 --> 00:50:29,410
you

1418
00:50:29,420 --> 00:50:31,640
so you have people people will teach you

1419
00:50:31,640 --> 00:50:32,630
not to put

1420
00:50:32,630 --> 00:50:34,070
falls into your database because it's

1421
00:50:34,070 --> 00:50:36,590
bad idea and the way you'll be using

1422
00:50:36,590 --> 00:50:38,630
relational database is like going

1423
00:50:38,630 --> 00:50:40,670
through a middleware layer like swapping

1424
00:50:40,670 --> 00:50:42,200
from Colonel n to use the land for three

1425
00:50:42,200 --> 00:50:44,240
times before it hits the HTTP socket

1426
00:50:44,240 --> 00:50:45,650
against sent to the client that's a

1427
00:50:45,650 --> 00:50:48,620
really bad idea unless you like a very

1428
00:50:48,620 --> 00:50:50,120
lightweight binary stuff that can like

1429
00:50:50,120 --> 00:50:51,860
that you need the management for button

1430
00:50:51,860 --> 00:50:53,600
couchdb it gets streamed from this

1431
00:50:53,600 --> 00:50:55,730
directly to the user so it's not a bad

1432
00:50:55,730 --> 00:50:57,410
idea to put binary stuff in to catch to

1433
00:50:57,410 --> 00:50:59,930
be and when I did the de binary

1434
00:50:59,930 --> 00:51:01,910
attachment API that stand alone I

1435
00:51:01,910 --> 00:51:04,610
stopped benchmark testing it with the

1436
00:51:04,610 --> 00:51:06,350
eight gigabyte movie father just put in

1437
00:51:06,350 --> 00:51:08,780
and out there were no problems i went

1438
00:51:08,780 --> 00:51:09,950
through i'm at grambler hunting lately

1439
00:51:09,950 --> 00:51:11,660
and i was able to make the files a

1440
00:51:11,660 --> 00:51:13,460
little you know it does some bookkeeping

1441
00:51:13,460 --> 00:51:14,870
in the file and i was able to pull some

1442
00:51:14,870 --> 00:51:17,030
of the sparseness out so he had the the

1443
00:51:17,030 --> 00:51:18,350
programming is about trade-offs and the

1444
00:51:18,350 --> 00:51:19,910
trade-off that catch me makes is it

1445
00:51:19,910 --> 00:51:22,370
trades reliability speed and whatever

1446
00:51:22,370 --> 00:51:23,900
else is in care should be for disk space

1447
00:51:23,900 --> 00:51:26,900
because disk is cheap so you need like

1448
00:51:26,900 --> 00:51:29,330
if you're in a very like tight disc

1449
00:51:29,330 --> 00:51:30,980
environment casual you might not be the

1450
00:51:30,980 --> 00:51:33,410
best choice well yeah that's our gambit

1451
00:51:33,410 --> 00:51:43,280
because this cuz disc is getting free so

1452
00:51:43,290 --> 00:51:46,420
you

1453
00:51:46,430 --> 00:51:49,440
no that's not

1454
00:51:49,440 --> 00:51:50,910
the concern of cash to be but the fun

1455
00:51:50,910 --> 00:51:52,530
line file system yeah but it's also it's

1456
00:51:52,530 --> 00:51:54,810
pretty resilient in terms of you know as

1457
00:51:54,810 --> 00:51:56,730
long as you don't get hit by a cosmic

1458
00:51:56,730 --> 00:51:59,849
array right in a b-tree index and you

1459
00:51:59,849 --> 00:52:01,440
don't try you know a lot of the lot of

1460
00:52:01,440 --> 00:52:02,910
the data in the file if there's

1461
00:52:02,910 --> 00:52:04,230
specially if there's a high update rate

1462
00:52:04,230 --> 00:52:05,819
and not just new documents well that

1463
00:52:05,819 --> 00:52:07,470
data is you know redundant at a certain

1464
00:52:07,470 --> 00:52:15,540
point

1465
00:52:15,550 --> 00:52:23,270
you

1466
00:52:23,280 --> 00:52:25,500
the one thing that you need to keep in

1467
00:52:25,500 --> 00:52:26,210
mind with college

1468
00:52:26,210 --> 00:52:28,400
that's true for all other applications

1469
00:52:28,400 --> 00:52:30,200
they are not optimized for single

1470
00:52:30,200 --> 00:52:32,270
maximum speed but for concurrency so

1471
00:52:32,270 --> 00:52:33,859
we'll be able to hurt like you get the

1472
00:52:33,859 --> 00:52:35,540
same throughput but you can host a lot

1473
00:52:35,540 --> 00:52:39,740
more concurrent users so the problem

1474
00:52:39,740 --> 00:52:42,950
with lady is that's it's single core so

1475
00:52:42,950 --> 00:52:44,119
you need to run a lot of ladies on the

1476
00:52:44,119 --> 00:52:45,740
multi-core line is pretty good on the

1477
00:52:45,740 --> 00:52:49,280
multi-core what we did what I did

1478
00:52:49,280 --> 00:52:51,020
benchmarking for a client is put in a

1479
00:52:51,020 --> 00:52:53,510
varnish in front of couchdb and because

1480
00:52:53,510 --> 00:52:55,400
varnish is a lot faster htp handling and

1481
00:52:55,400 --> 00:52:57,020
also does a little bit of caching I got

1482
00:52:57,020 --> 00:52:58,609
like twenty percent more read read and

1483
00:52:58,609 --> 00:52:59,990
write out of just guide should be would

1484
00:52:59,990 --> 00:53:01,609
launch on the same node so their

1485
00:53:01,609 --> 00:53:03,200
advantages of complaint combining these

1486
00:53:03,200 --> 00:53:05,390
if you just want to use engine X to

1487
00:53:05,390 --> 00:53:07,220
serve static content and you don't have

1488
00:53:07,220 --> 00:53:09,920
a database in the back end so so if you

1489
00:53:09,920 --> 00:53:11,420
lead the data management part of that

1490
00:53:11,420 --> 00:53:13,400
which is pretty neat then you just use

1491
00:53:13,400 --> 00:53:14,480
casually but you can also use a

1492
00:53:14,480 --> 00:53:15,890
combination to make it like lightning

1493
00:53:15,890 --> 00:53:18,050
fast or the replication so you have done

1494
00:53:18,050 --> 00:53:27,240
it set of data

1495
00:53:27,250 --> 00:53:29,240
that we've got you tags on all our

1496
00:53:29,240 --> 00:53:33,440
attachments also the yeah I mean there's

1497
00:53:33,440 --> 00:53:35,750
no there's no real reason not to I mean

1498
00:53:35,750 --> 00:53:36,950
we are the little cost should be

1499
00:53:36,950 --> 00:53:38,150
architecture is set up to be

1500
00:53:38,150 --> 00:53:39,980
stream-based so we don't reckon a buffer

1501
00:53:39,980 --> 00:53:41,840
your 40 goodbye detachment in RAM and

1502
00:53:41,840 --> 00:53:43,850
then and then send it out to the client

1503
00:53:43,850 --> 00:53:46,760
so yeah we may not be as lightning quick

1504
00:53:46,760 --> 00:53:48,560
as some of those other ones because

1505
00:53:48,560 --> 00:53:49,850
we're not optimizing for a single

1506
00:53:49,850 --> 00:53:51,860
request latency but we should be able to

1507
00:53:51,860 --> 00:53:54,170
you know not slow the disk down too much

1508
00:53:54,170 --> 00:53:56,000
well it's it's still fast enough for

1509
00:53:56,000 --> 00:53:57,770
like the average user so instead of like

1510
00:53:57,770 --> 00:53:59,150
10 millisecond would take a whole 100

1511
00:53:59,150 --> 00:54:00,740
milliseconds but it's still faster than

1512
00:54:00,740 --> 00:54:02,240
you I can see it because it's you know

1513
00:54:02,240 --> 00:54:03,530
trying to get a lot of 10 milliseconds

1514
00:54:03,530 --> 00:54:05,150
in a row because you can have 50 100

1515
00:54:05,150 --> 00:54:06,500
millisecond ones at the same time you're

1516
00:54:06,500 --> 00:54:07,640
like you need to take these numbers with

1517
00:54:07,640 --> 00:54:08,930
a grain of salt or couch be might be

1518
00:54:08,930 --> 00:54:10,280
like this is just pulled out of the air

1519
00:54:10,280 --> 00:54:11,870
so catchy we might be 10 100 times

1520
00:54:11,870 --> 00:54:14,180
slower but that just like it makes no

1521
00:54:14,180 --> 00:54:15,500
difference for the user and you have

1522
00:54:15,500 --> 00:54:17,060
kinda have a lot more users and you have

1523
00:54:17,060 --> 00:54:18,920
the same data throughput so yeah I'm

1524
00:54:18,920 --> 00:54:21,800
come out tomorrow will be across the

1525
00:54:21,800 --> 00:54:23,990
hall I hope and will show you will show

1526
00:54:23,990 --> 00:54:25,970
you JavaScript and will be around all

1527
00:54:25,970 --> 00:54:38,920
today just grab us great thanks

