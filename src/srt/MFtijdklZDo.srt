1
00:00:16,440 --> 00:00:19,900

hi there so before I start I have a bit

2
00:00:19,900 --> 00:00:23,560
of a stutter so if that makes it hard to

3
00:00:23,560 --> 00:00:25,660
understand then I apologize hopefully it

4
00:00:25,660 --> 00:00:26,800
won't be too bad

5
00:00:26,800 --> 00:00:34,600
so I sent a tweet out a few days ago I

6
00:00:34,600 --> 00:00:39,340
loved the Java scoop with the statement

7
00:00:39,340 --> 00:00:45,720
so much and I got a replay from how

8
00:00:45,720 --> 00:00:48,460
Yankee I think you say his name

9
00:00:48,460 --> 00:00:50,440
I love the JavaScript with same so much

10
00:00:50,440 --> 00:00:53,890
with sarcasm tags surround it he thought

11
00:00:53,890 --> 00:00:55,950
I was being sarcastic

12
00:00:55,950 --> 00:00:59,820
actually he forgot the opening tag so

13
00:00:59,820 --> 00:01:02,080
maybe he was saying everything that I've

14
00:01:02,080 --> 00:01:06,759
ever tweeted is like sarcastic however I

15
00:01:06,759 --> 00:01:08,920
guess from this point on I can't be

16
00:01:08,920 --> 00:01:10,780
sarcastic because he just like closed

17
00:01:10,780 --> 00:01:13,060
the sarcasm tag on me so there we go

18
00:01:13,060 --> 00:01:20,660
anyway oh and then I got this one

19
00:01:20,670 --> 00:01:25,630
alright so by way of introduction how

20
00:01:25,630 --> 00:01:30,790
you work at Twitter Twitter

21
00:01:30,790 --> 00:01:34,930
we love javascript we love the front-end

22
00:01:34,930 --> 00:01:36,760
we take the time to understand

23
00:01:36,760 --> 00:01:41,560
everything understand all the parts so

24
00:01:41,560 --> 00:01:44,400
that we have the widest toolkit at our

25
00:01:44,400 --> 00:01:46,890
disposal we don't believe in just

26
00:01:46,890 --> 00:01:50,380
restricting the language to the so

27
00:01:50,380 --> 00:01:52,570
called safe parts or you know the bits

28
00:01:52,570 --> 00:01:54,700
you should be able and I think we get a

29
00:01:54,700 --> 00:01:56,920
lot of strength from that and we do

30
00:01:56,920 --> 00:01:58,840
everything in strict mode just in case

31
00:01:58,840 --> 00:02:01,570
you thought we were not very careful or

32
00:02:01,570 --> 00:02:06,340
something like that so why am i making

33
00:02:06,340 --> 00:02:08,049
this tool why did I write it there were

34
00:02:08,049 --> 00:02:12,040
two motivations for this talk the first

35
00:02:12,040 --> 00:02:14,230
one is kind of represent of this quote

36
00:02:14,230 --> 00:02:21,250
by Douglas Douglas Crockford he says the

37
00:02:21,250 --> 00:02:23,349
subset he carved out is vastly superior

38
00:02:23,349 --> 00:02:25,080
to the

39
00:02:25,080 --> 00:02:28,750
language as a whole now much as I love

40
00:02:28,750 --> 00:02:30,519
the good parts I think it's a great book

41
00:02:30,519 --> 00:02:32,140
and I think every JavaScript developer

42
00:02:32,140 --> 00:02:38,170
should heed it I think the other parts

43
00:02:38,170 --> 00:02:39,700
are really great as well the parts he

44
00:02:39,700 --> 00:02:41,620
leaves out if you take the time to

45
00:02:41,620 --> 00:02:43,360
understand them they are great and

46
00:02:43,360 --> 00:02:44,980
they're really useful and they add a lot

47
00:02:44,980 --> 00:02:47,500
to the language and it saddens me that

48
00:02:47,500 --> 00:02:49,269
not enough people are actually looking

49
00:02:49,269 --> 00:02:52,049
into them so that was one of the

50
00:02:52,049 --> 00:02:57,459
motivations the other one is this I see

51
00:02:57,459 --> 00:02:59,590
this all the time and it drives me crazy

52
00:02:59,590 --> 00:03:03,790
it's like Stack Overflow you you're

53
00:03:03,790 --> 00:03:05,819
reading a fairly interesting thread and

54
00:03:05,819 --> 00:03:08,470
inevitably someone comes along and says

55
00:03:08,470 --> 00:03:11,709
that and it's like you're not telling me

56
00:03:11,709 --> 00:03:13,480
you're not explaining it you're not

57
00:03:13,480 --> 00:03:16,900
saying why I shouldn't use it you just

58
00:03:16,900 --> 00:03:19,629
telling me not to use it like why are

59
00:03:19,629 --> 00:03:21,549
you telling me this because someone told

60
00:03:21,549 --> 00:03:24,879
you you know we can't be good developers

61
00:03:24,879 --> 00:03:27,310
unless we take the time to understand it

62
00:03:27,310 --> 00:03:30,099
and we should not preach things to other

63
00:03:30,099 --> 00:03:32,440
people that we can't explain or we're

64
00:03:32,440 --> 00:03:35,980
not willing to convince others of that's

65
00:03:35,980 --> 00:03:44,459
very important to me so why do we have

66
00:03:44,459 --> 00:03:59,530
well that's the theory whose rules are

67
00:03:59,530 --> 00:04:03,609
we actually following here and I think

68
00:04:03,609 --> 00:04:06,310
right and rules apply to everything not

69
00:04:06,310 --> 00:04:10,209
just a software they apply to life

70
00:04:10,209 --> 00:04:14,470
they even apply to soup hears right as

71
00:04:14,470 --> 00:04:19,930
it applies to soup so let me ask you

72
00:04:19,930 --> 00:04:20,500
something

73
00:04:20,500 --> 00:04:26,390
what is it an authentic minestrone soup

74
00:04:26,400 --> 00:04:32,710
does anyone know well I tell you what we

75
00:04:32,710 --> 00:04:35,900
can do research

76
00:04:35,900 --> 00:04:38,600
Google Images will have the answer let's

77
00:04:38,600 --> 00:04:41,030
key an authentic minestrone soup and see

78
00:04:41,030 --> 00:04:41,840
what we get

79
00:04:41,840 --> 00:04:46,820
oh turns out there is no such thing

80
00:04:46,820 --> 00:04:49,040
there is no all authentic minestrone

81
00:04:49,040 --> 00:04:51,950
soup it's whatever you want it to be and

82
00:04:51,950 --> 00:04:55,240
actually the technical answer is it's a

83
00:04:55,240 --> 00:04:57,440
regional soup and different parts of

84
00:04:57,440 --> 00:05:01,010
Italy make the soup in a different way

85
00:05:01,010 --> 00:05:03,380
but the point is we can't tell other

86
00:05:03,380 --> 00:05:07,060
people how to make ministry only soup

87
00:05:07,060 --> 00:05:09,260
and I guess that was meant to come next

88
00:05:09,260 --> 00:05:12,650
and the bigger point is correctness is

89
00:05:12,650 --> 00:05:15,650
sub is subjective there is no one

90
00:05:15,650 --> 00:05:17,720
correctness that we all share

91
00:05:17,720 --> 00:05:19,820
we cannot listen to one personal story

92
00:05:19,820 --> 00:05:21,980
of what correctness is and apply it to

93
00:05:21,980 --> 00:05:30,040
our to our development each of us is

94
00:05:30,040 --> 00:05:33,980
unique and individual each of us we all

95
00:05:33,980 --> 00:05:36,220
have our own opinion on what we consider

96
00:05:36,220 --> 00:05:42,980
harmful these are all actual be copied

97
00:05:42,980 --> 00:05:45,530
pasted from actual articles and you can

98
00:05:45,530 --> 00:05:48,170
see everything in JavaScript has ever

99
00:05:48,170 --> 00:05:49,820
done has been considered harmful by

100
00:05:49,820 --> 00:05:51,860
someone like if consider how primitive

101
00:05:51,860 --> 00:05:54,950
types arguments JavaScript is so

102
00:05:54,950 --> 00:05:55,580
powerful

103
00:05:55,580 --> 00:06:00,320
and so you know oh and look there we are

104
00:06:00,320 --> 00:06:03,770
and just to really focus in the work

105
00:06:03,770 --> 00:06:05,360
somebody actually read now it's got eval

106
00:06:05,360 --> 00:06:10,180
considered useful so clearly harmful is

107
00:06:10,180 --> 00:06:12,560
subjective - otherwise we wouldn't be

108
00:06:12,560 --> 00:06:19,070
writing any code at all I really like

109
00:06:19,070 --> 00:06:21,250
this quote from Swiss Swiss author

110
00:06:21,250 --> 00:06:23,900
Jemaine - steel I think I'm saying that

111
00:06:23,900 --> 00:06:29,810
right rules are only barriers to prevent

112
00:06:29,810 --> 00:06:32,000
children from falling we should should

113
00:06:32,000 --> 00:06:33,440
keep that in mind that's really

114
00:06:33,440 --> 00:06:36,290
important so when you start out when you

115
00:06:36,290 --> 00:06:39,200
learn a language you know rules are

116
00:06:39,200 --> 00:06:41,180
really important they stop you falling

117
00:06:41,180 --> 00:06:43,820
off the edge stop you're doing something

118
00:06:43,820 --> 00:06:47,030
really stupid but you know we're not

119
00:06:47,030 --> 00:06:48,990
children anymore right

120
00:06:48,990 --> 00:06:51,569
we're adults we jump we like most of us

121
00:06:51,569 --> 00:06:52,800
in this room probably consider ourselves

122
00:06:52,800 --> 00:06:55,110
fairly good JavaScript developers we'd

123
00:06:55,110 --> 00:07:00,730
want to code the way an adult codes and

124
00:07:00,740 --> 00:07:04,949
we once we understand the rules we

125
00:07:04,949 --> 00:07:08,160
should be able to break them find out

126
00:07:08,160 --> 00:07:09,660
the exceptions find out when the rules

127
00:07:09,660 --> 00:07:11,130
don't apply to what we're actually

128
00:07:11,130 --> 00:07:16,669
trying to do it's just almost here

129
00:07:16,669 --> 00:07:21,710
anybody else Thomas I apologize for this

130
00:07:21,710 --> 00:07:24,229
singapore everything runs smoothly

131
00:07:24,229 --> 00:07:27,509
everything's clean everything's nice but

132
00:07:27,509 --> 00:07:29,070
there's a bit of a cost for that

133
00:07:29,070 --> 00:07:31,320
it's the expense of personal freedom not

134
00:07:31,320 --> 00:07:33,750
everyone has the liberty to do

135
00:07:33,750 --> 00:07:36,780
everything they want to do and I think

136
00:07:36,780 --> 00:07:46,460
Java was Singapore actually I actually I

137
00:07:46,460 --> 00:07:48,419
didn't come up with this I stole this

138
00:07:48,419 --> 00:07:50,460
from Andrew DuPont who said it had a

139
00:07:50,460 --> 00:07:58,740
great J's can talk so ask yourself how

140
00:07:58,740 --> 00:08:03,320
Singapore do you want javascript to be

141
00:08:03,320 --> 00:08:09,240
that's pretty important this is a great

142
00:08:09,240 --> 00:08:11,039
quote I really love this quote this is

143
00:08:11,039 --> 00:08:13,169
video now this is from 11 years ago I

144
00:08:13,169 --> 00:08:16,620
think it's still Wikipedia policy and

145
00:08:16,620 --> 00:08:19,289
it's one of their great strengths they

146
00:08:19,289 --> 00:08:23,370
have guidelines they have rules but

147
00:08:23,370 --> 00:08:26,340
they're very quick to point out if it

148
00:08:26,340 --> 00:08:28,380
holds you back if it prevents you

149
00:08:28,380 --> 00:08:30,150
creating the site the page you want to

150
00:08:30,150 --> 00:08:35,070
create then ignore it again I think we

151
00:08:35,070 --> 00:08:36,719
should be adult enough to do the same

152
00:08:36,719 --> 00:08:41,130
thing okay so we talked about breaking

153
00:08:41,130 --> 00:08:46,079
rules how to break them let's start with

154
00:08:46,079 --> 00:08:53,430
my own favor the with statement so to be

155
00:08:53,430 --> 00:08:56,399
sure there's a lot to be careful about

156
00:08:56,399 --> 00:08:58,050
when using the with statement you

157
00:08:58,050 --> 00:09:00,860
shouldn't just use it

158
00:09:00,860 --> 00:09:03,380
in just criminally here are a few

159
00:09:03,380 --> 00:09:06,240
reasons not to use it

160
00:09:06,250 --> 00:09:09,110
accidental clobbering an implicit global

161
00:09:09,110 --> 00:09:11,900
creation is very easy to do here's an

162
00:09:11,900 --> 00:09:14,120
example looks pretty cool on the face of

163
00:09:14,120 --> 00:09:17,000
it okay we have an object literal we're

164
00:09:17,000 --> 00:09:18,890
using a width to make another object

165
00:09:18,890 --> 00:09:23,060
literal like statement two so there we

166
00:09:23,060 --> 00:09:26,690
go to update the dragger that we just

167
00:09:26,690 --> 00:09:28,220
created you wouldn't really get these

168
00:09:28,220 --> 00:09:30,590
two lines next to each other but one of

169
00:09:30,590 --> 00:09:33,440
them on the same side but look I

170
00:09:33,440 --> 00:09:35,930
accidentally missed named increment as

171
00:09:35,930 --> 00:09:38,420
as interval an easy mistake to make

172
00:09:38,420 --> 00:09:41,780
and all hell broke loose I've now

173
00:09:41,780 --> 00:09:44,420
created a global called interval it's

174
00:09:44,420 --> 00:09:46,130
pretty easy to do should be careful

175
00:09:46,130 --> 00:09:50,990
about them oh the obligatory ironic

176
00:09:50,990 --> 00:09:55,160
footnote is with es5 strict mode they

177
00:09:55,160 --> 00:09:56,630
protects against implicit global

178
00:09:56,630 --> 00:10:00,140
equations so the biggest egregious fault

179
00:10:00,140 --> 00:10:01,280
with the with statement would have

180
00:10:01,280 --> 00:10:04,390
actually gone away with es5

181
00:10:04,390 --> 00:10:08,200
unfortunately yes five dozen support the

182
00:10:08,200 --> 00:10:12,790
statement it's kind of sad to be fair

183
00:10:12,790 --> 00:10:15,050
the compiler cost might have been

184
00:10:15,050 --> 00:10:16,880
prohibitive because trying to figure out

185
00:10:16,880 --> 00:10:18,920
with a with statement whether Global's

186
00:10:18,920 --> 00:10:21,740
were being clobbered a lot of browser

187
00:10:21,740 --> 00:10:23,120
vendors would have complained that was

188
00:10:23,120 --> 00:10:24,680
actually prohibitively expensive so that

189
00:10:24,680 --> 00:10:26,450
might be the real reason there isn't a

190
00:10:26,450 --> 00:10:32,300
with statement in es5 mode okay carrying

191
00:10:32,300 --> 00:10:33,710
on with reasons not to use the with

192
00:10:33,710 --> 00:10:36,230
statement it costs of scope closure

193
00:10:36,230 --> 00:10:38,540
scope resolution so with adds an extra

194
00:10:38,540 --> 00:10:41,450
scope so as you're going up the closure

195
00:10:41,450 --> 00:10:43,190
chain looking for the trying to resolve

196
00:10:43,190 --> 00:10:46,370
there's an extra that's an extra step to

197
00:10:46,370 --> 00:10:49,280
go up in practice I think the way modern

198
00:10:49,280 --> 00:10:51,710
browsers work it's an exaggerated

199
00:10:51,710 --> 00:10:53,450
concern I don't think it's those

200
00:10:53,450 --> 00:10:58,340
browsers down that much and the cost of

201
00:10:58,340 --> 00:11:01,850
lake compilation we need to resolve the

202
00:11:01,850 --> 00:11:04,520
affective property access and

203
00:11:04,520 --> 00:11:06,860
assignments we can't do that at one time

204
00:11:06,860 --> 00:11:09,250
so it's no extra compiles compile step

205
00:11:09,250 --> 00:11:12,790
again not sure how much that costs

206
00:11:12,790 --> 00:11:14,600
maybe sometimes

207
00:11:14,600 --> 00:11:18,709
is significant cost turning to the

208
00:11:18,709 --> 00:11:24,380
positive why is it useful well you

209
00:11:24,380 --> 00:11:26,660
probably know it powers your developer

210
00:11:26,660 --> 00:11:29,480
tools that's if you use Chrome or Safari

211
00:11:29,480 --> 00:11:36,880
or Firebug here's an example taken from

212
00:11:36,880 --> 00:11:40,040
Chrome source code a chrome developer

213
00:11:40,040 --> 00:11:42,769
tools source code and actually this is

214
00:11:42,769 --> 00:11:45,410
very slightly old they've changes but it

215
00:11:45,410 --> 00:11:47,750
was this particular excerpt was a very

216
00:11:47,750 --> 00:11:50,600
good illustration of what happens so you

217
00:11:50,600 --> 00:11:55,009
may know that the kick console has this

218
00:11:55,009 --> 00:11:59,120
command line API which makes available

219
00:11:59,120 --> 00:12:01,370
extra functions such as the inspect

220
00:12:01,370 --> 00:12:03,290
function things things things like that

221
00:12:03,290 --> 00:12:06,380
which you can just use on the console

222
00:12:06,380 --> 00:12:09,019
they're all within this object window

223
00:12:09,019 --> 00:12:13,009
dot inspector command line API but what

224
00:12:13,009 --> 00:12:15,709
if you wanted in the console to override

225
00:12:15,709 --> 00:12:18,230
those functions we wanted with the user

226
00:12:18,230 --> 00:12:19,970
of the console should be able to clobber

227
00:12:19,970 --> 00:12:22,310
those functions this is a very neat and

228
00:12:22,310 --> 00:12:24,439
incidentally very safe way to do that

229
00:12:24,439 --> 00:12:27,680
you have a with windows statement nested

230
00:12:27,680 --> 00:12:30,110
inside a with window inspector command

231
00:12:30,110 --> 00:12:32,839
line so absolute priority will be given

232
00:12:32,839 --> 00:12:36,250
to the global object and so if you

233
00:12:36,250 --> 00:12:38,839
redefine it inspect it'll get to that

234
00:12:38,839 --> 00:12:40,579
one first then it'll get to the

235
00:12:40,579 --> 00:12:44,120
inspector command line API why is it

236
00:12:44,120 --> 00:12:46,990
safe nothing could ever slip through the

237
00:12:46,990 --> 00:12:49,600
global object because you're actually

238
00:12:49,600 --> 00:12:56,180
including it there another reason it's

239
00:12:56,180 --> 00:12:59,509
useful a lot of people like block scope

240
00:12:59,509 --> 00:13:01,189
so es6 is going to be introducing

241
00:13:01,189 --> 00:13:04,850
support for block scope with statement

242
00:13:04,850 --> 00:13:07,339
is a pretty neat and fairly safe way to

243
00:13:07,339 --> 00:13:12,560
replicate block scope let me show you by

244
00:13:12,560 --> 00:13:16,399
illustration so you've all seen this one

245
00:13:16,399 --> 00:13:19,550
right this is like a cautionary tale of

246
00:13:19,550 --> 00:13:21,610
how closures don't always work so

247
00:13:21,610 --> 00:13:24,260
because there's only one scope here the

248
00:13:24,260 --> 00:13:26,180
variable I is being shared through each

249
00:13:26,180 --> 00:13:28,460
iteration which means the

250
00:13:28,460 --> 00:13:30,770
statement ends up pointing to know that

251
00:13:30,770 --> 00:13:34,640
banks every single alert alerts knows

252
00:13:34,640 --> 00:13:40,190
length length at the end the traditional

253
00:13:40,190 --> 00:13:44,029
way to solve that is with a function

254
00:13:44,029 --> 00:13:46,970
closure right you've all seen this I'm

255
00:13:46,970 --> 00:13:49,459
sure so now we're introducing a scope

256
00:13:49,459 --> 00:13:53,000
inside a scope so I is unique each eye

257
00:13:53,000 --> 00:13:54,860
is unique within the function scope

258
00:13:54,860 --> 00:13:56,390
there we go it has then everything works

259
00:13:56,390 --> 00:14:02,390
great it's a little bit clunky it's not

260
00:14:02,390 --> 00:14:04,850
very intuitive and people coming from

261
00:14:04,850 --> 00:14:08,899
other languages don't really think it's

262
00:14:08,899 --> 00:14:12,380
a bit over the top to do this so you

263
00:14:12,380 --> 00:14:14,420
could have a with statement and here's

264
00:14:14,420 --> 00:14:17,209
the key another key to using within a

265
00:14:17,209 --> 00:14:20,540
safe way is don't as available where

266
00:14:20,540 --> 00:14:22,070
available we don't know what's in there

267
00:14:22,070 --> 00:14:24,170
person explicit hash so you know what's

268
00:14:24,170 --> 00:14:29,800
there plus I as a hash then you can only

269
00:14:29,800 --> 00:14:33,500
own it so there's no danger of a same of

270
00:14:33,500 --> 00:14:35,390
a sane person trying to set anything

271
00:14:35,390 --> 00:14:37,160
else in this with loop other than I

272
00:14:37,160 --> 00:14:38,480
because it's clear that's all that's

273
00:14:38,480 --> 00:14:41,089
actually there so nothing will be

274
00:14:41,089 --> 00:14:44,360
accidentally clobbered and it's kind of

275
00:14:44,360 --> 00:14:45,589
like wait I think compared to the

276
00:14:45,589 --> 00:14:48,800
function thing and actually to be honest

277
00:14:48,800 --> 00:14:51,589
it's slightly slower but so it depends

278
00:14:51,589 --> 00:14:54,470
if performances are concerned to you but

279
00:14:54,470 --> 00:14:59,140
I think it's a very neat illustration

280
00:14:59,140 --> 00:15:02,390
and oh by the way there was a let

281
00:15:02,390 --> 00:15:04,850
statement coming in es6 but like we know

282
00:15:04,850 --> 00:15:06,080
that's not going to be there on all

283
00:15:06,080 --> 00:15:08,390
browsers for quite a long time so this

284
00:15:08,390 --> 00:15:12,290
is a kind of standby I guess the eval

285
00:15:12,290 --> 00:15:15,290
statement everyone's other favorite

286
00:15:15,290 --> 00:15:19,610
thing you should never do why shouldn't

287
00:15:19,610 --> 00:15:21,620
you do it well we all know about code

288
00:15:21,620 --> 00:15:24,079
ejection loophole if a user gets or if

289
00:15:24,079 --> 00:15:25,880
some party gets their hands on the

290
00:15:25,880 --> 00:15:27,380
argument the eval argument they can

291
00:15:27,380 --> 00:15:31,990
invoke any code they want to also

292
00:15:31,990 --> 00:15:35,060
prevents closure optimization because a

293
00:15:35,060 --> 00:15:36,709
lot of modern browsers all modern

294
00:15:36,709 --> 00:15:39,189
browsers I think

295
00:15:39,189 --> 00:15:42,139
that they they will only persist those

296
00:15:42,139 --> 00:15:44,029
variables on the outer scope that have

297
00:15:44,029 --> 00:15:45,919
to be persisted so they'll look what's

298
00:15:45,919 --> 00:15:47,600
reference in the end the innocent the

299
00:15:47,600 --> 00:15:49,579
inner scope with a value don't really

300
00:15:49,579 --> 00:15:50,959
know what you're going to be referencing

301
00:15:50,959 --> 00:15:56,209
there so it inhibits optimization I'm

302
00:15:56,209 --> 00:15:59,449
not sure with chrome and the latest

303
00:15:59,449 --> 00:16:01,269
Firefox how much of a problem that is

304
00:16:01,269 --> 00:16:04,819
but anyway that's something you don't

305
00:16:04,819 --> 00:16:08,660
get if you have an eval statement and

306
00:16:08,660 --> 00:16:11,089
again as with the with statement the

307
00:16:11,089 --> 00:16:15,589
cost of lake compilation so you have to

308
00:16:15,589 --> 00:16:20,149
compile at one time basically why is it

309
00:16:20,149 --> 00:16:22,699
useful most obvious one is when there's

310
00:16:22,699 --> 00:16:27,579
no JSON path so like ie7 for example

311
00:16:27,579 --> 00:16:32,209
there's no ability to have a native JSON

312
00:16:32,209 --> 00:16:38,089
pass in the browser these are a couple

313
00:16:38,089 --> 00:16:43,299
of accepted answers from Stack Overflow

314
00:16:43,299 --> 00:16:46,220
basically saying the same thing so the

315
00:16:46,220 --> 00:16:48,199
effect that you should never use avowal

316
00:16:48,199 --> 00:16:51,139
it's really unsafe used JSON or gets

317
00:16:51,139 --> 00:16:53,449
much much safer okay

318
00:16:53,449 --> 00:16:56,119
let's have a look at json dot org well

319
00:16:56,119 --> 00:16:58,160
if your browser didn't actually support

320
00:16:58,160 --> 00:17:06,159
the about JSON pass it uses eval so

321
00:17:06,159 --> 00:17:08,359
this is why you should watch Stack

322
00:17:08,359 --> 00:17:10,879
Overflow because often accepted answers

323
00:17:10,879 --> 00:17:17,059
are just completely wrong why else is it

324
00:17:17,059 --> 00:17:19,789
useful it's how your console works the

325
00:17:19,789 --> 00:17:21,169
same as the with statements so you can

326
00:17:21,169 --> 00:17:29,149
try this now go to it's been been or to

327
00:17:29,149 --> 00:17:31,809
any WebKit console run this code

328
00:17:31,809 --> 00:17:35,299
anything that you evaluate the eval

329
00:17:35,299 --> 00:17:36,979
segment is what actually caused it this

330
00:17:36,979 --> 00:17:38,960
is this is just saying what is the color

331
00:17:38,960 --> 00:17:41,960
of the function the eval same because

332
00:17:41,960 --> 00:17:43,220
they use the eval statement for

333
00:17:43,220 --> 00:17:44,899
everything it's used every time you run

334
00:17:44,899 --> 00:17:49,309
something here's a quote I really like

335
00:17:49,309 --> 00:17:54,039
from John Woo I think of a query time

336
00:17:54,039 --> 00:17:57,559
it's like the sensible antidote to the

337
00:17:57,559 --> 00:18:01,129
Crockford ism it's like basically he

338
00:18:01,129 --> 00:18:04,099
says he's island where the trivialized

339
00:18:04,099 --> 00:18:05,989
misuse and outright condemned by most

340
00:18:05,989 --> 00:18:07,729
JavaScript programmers but when used

341
00:18:07,729 --> 00:18:09,019
appropriately they allow for the

342
00:18:09,019 --> 00:18:10,729
creation of some fantastic pieces of

343
00:18:10,729 --> 00:18:16,549
code that wouldn't be possible otherwise

344
00:18:16,549 --> 00:18:20,599
I think that's really cool and I wish

345
00:18:20,599 --> 00:18:24,139
more people would pay attention to this

346
00:18:24,139 --> 00:18:28,460
kind of thing this is the the cousin of

347
00:18:28,460 --> 00:18:31,879
the avowal statement slightly nicer

348
00:18:31,879 --> 00:18:34,340
cousin in most people's view although

349
00:18:34,340 --> 00:18:35,629
I've heard it said it's only nicer

350
00:18:35,629 --> 00:18:37,519
because it isn't an eval statement

351
00:18:37,519 --> 00:18:40,099
therefore you can say you're not using

352
00:18:40,099 --> 00:18:41,989
eval but you actually yeah that's not

353
00:18:41,989 --> 00:18:43,129
really true

354
00:18:43,129 --> 00:18:45,440
it's not just an avowal in disguise it's

355
00:18:45,440 --> 00:18:48,440
much more besides that in particular it

356
00:18:48,440 --> 00:18:51,109
always evaluates code in the child of

357
00:18:51,109 --> 00:18:53,389
the global scope so it creates a brand

358
00:18:53,389 --> 00:18:56,509
new scope every time to execute in which

359
00:18:56,509 --> 00:18:58,820
is one down from the global global scope

360
00:18:58,820 --> 00:19:00,889
which means it only has closure

361
00:19:00,889 --> 00:19:03,080
reference to the global scope and to

362
00:19:03,080 --> 00:19:06,470
nothing else and we'll see in a second

363
00:19:06,470 --> 00:19:09,499
why that's a good thing or can be a good

364
00:19:09,499 --> 00:19:12,679
thing in the right context this look a

365
00:19:12,679 --> 00:19:15,789
couple of cases ways you saw actually

366
00:19:15,789 --> 00:19:18,669
talking about what I just said

367
00:19:18,669 --> 00:19:21,009
you know you're evaluated code will

368
00:19:21,009 --> 00:19:22,720
always run in the same scope or not the

369
00:19:22,720 --> 00:19:24,970
same scope but an equivalent scope every

370
00:19:24,970 --> 00:19:30,970
time now it's pretty bad anyway if the

371
00:19:30,970 --> 00:19:33,309
party gets hold of your a valid argument

372
00:19:33,309 --> 00:19:36,340
but at least with function you function

373
00:19:36,340 --> 00:19:38,320
only the Global's are exposed they can't

374
00:19:38,320 --> 00:19:40,840
get deep down into the local code

375
00:19:40,840 --> 00:19:42,340
because they'll never be available in

376
00:19:42,340 --> 00:19:46,600
the in the scope chain and finally

377
00:19:46,600 --> 00:19:48,429
there's no closure optimization concerns

378
00:19:48,429 --> 00:19:52,720
because the only variables that in the

379
00:19:52,720 --> 00:19:54,129
scope chain are the global variables

380
00:19:54,129 --> 00:19:55,869
which are there the whole time persists

381
00:19:55,869 --> 00:19:57,879
they're always persisted so there's no

382
00:19:57,879 --> 00:20:02,710
issues there it's used in J Curry's past

383
00:20:02,710 --> 00:20:05,350
past Jason which is a kind of variation

384
00:20:05,350 --> 00:20:11,230
on Jason orgs version it uses the eval

385
00:20:11,230 --> 00:20:14,009
it substitutes the eval for function

386
00:20:14,009 --> 00:20:16,029
constructor as we can see here otherwise

387
00:20:16,029 --> 00:20:18,970
it's pretty much the same and this is

388
00:20:18,970 --> 00:20:21,009
again presumably to restrict access to

389
00:20:21,009 --> 00:20:23,830
local variables and because at least in

390
00:20:23,830 --> 00:20:26,700
theory less scope chaining means

391
00:20:26,700 --> 00:20:37,960
performance where else is it used

392
00:20:37,960 --> 00:20:40,330
underscore.js has a pretty pretty nifty

393
00:20:40,330 --> 00:20:48,399
string interpolation method and it uses

394
00:20:48,399 --> 00:20:51,879
our favorite with statement first what

395
00:20:51,879 --> 00:20:56,470
this interpretation lets you do is you

396
00:20:56,470 --> 00:20:59,139
can optionally give a context in which

397
00:20:59,139 --> 00:21:00,970
you want the string to be interpolated

398
00:21:00,970 --> 00:21:04,929
it to be evaluated in if you don't give

399
00:21:04,929 --> 00:21:07,210
a context it'll just create an object

400
00:21:07,210 --> 00:21:09,249
hash here so like the run it in the

401
00:21:09,249 --> 00:21:10,779
given context or just create an object

402
00:21:10,779 --> 00:21:13,989
hash in the latter case with an object

403
00:21:13,989 --> 00:21:19,269
hash it will then use it in the new

404
00:21:19,269 --> 00:21:21,309
function constructor so the default hash

405
00:21:21,309 --> 00:21:24,249
doesn't run in your local scope it runs

406
00:21:24,249 --> 00:21:26,169
in the new function scope which makes a

407
00:21:26,169 --> 00:21:27,700
lot of sense because since you clear the

408
00:21:27,700 --> 00:21:29,259
stage you don't care what scope it runs

409
00:21:29,259 --> 00:21:31,900
in okay I'm going to run it in

410
00:21:31,900 --> 00:21:35,020
quickest and safest possible go so I

411
00:21:35,020 --> 00:21:36,460
think that's I think that's cool and

412
00:21:36,460 --> 00:21:38,950
that's a good example of where with and

413
00:21:38,950 --> 00:21:40,900
the new function the function

414
00:21:40,900 --> 00:21:49,030
constructor work quite nicely running a

415
00:21:49,030 --> 00:21:50,710
bit short on time so I'm going to speed

416
00:21:50,710 --> 00:21:54,310
up a bit now equals equals how many

417
00:21:54,310 --> 00:21:59,500
people use it okay that's pretty good

418
00:21:59,500 --> 00:22:03,130
not as good as I hoped but pretty good

419
00:22:03,130 --> 00:22:04,630
way not meant to use it

420
00:22:04,630 --> 00:22:07,540
coerces operands to the same type so if

421
00:22:07,540 --> 00:22:09,460
you have a string and an end number

422
00:22:09,460 --> 00:22:13,000
it'll it'll curse then what other way oh

423
00:22:13,000 --> 00:22:14,650
that's it actually

424
00:22:14,650 --> 00:22:18,970
that's the only reason so why is it

425
00:22:18,970 --> 00:22:21,130
useful oh because it coerces operands at

426
00:22:21,130 --> 00:22:25,210
the same time like sometimes you really

427
00:22:25,210 --> 00:22:26,920
don't care if the user was input a

428
00:22:26,920 --> 00:22:30,310
string or and number if it's quote - or

429
00:22:30,310 --> 00:22:33,550
- or - you don't care does it is it

430
00:22:33,550 --> 00:22:38,020
gonna evaluate - - it's it's useful if

431
00:22:38,020 --> 00:22:39,220
you are doing that you should put a

432
00:22:39,220 --> 00:22:42,070
comment no to let people know that's why

433
00:22:42,070 --> 00:22:43,750
you're using equals equals because

434
00:22:43,750 --> 00:22:48,520
otherwise it might confuse them and then

435
00:22:48,520 --> 00:22:50,950
there's this thing undefined is equal to

436
00:22:50,950 --> 00:22:54,720
know which is pretty handy because

437
00:22:54,720 --> 00:22:58,120
JavaScript has to know things it has

438
00:22:58,120 --> 00:23:01,270
null and undefined and some people do FX

439
00:23:01,270 --> 00:23:03,370
triple equals null or X triple equals

440
00:23:03,370 --> 00:23:07,630
undefined but that's a mouthful and is

441
00:23:07,630 --> 00:23:09,700
logically identify it logically

442
00:23:09,700 --> 00:23:12,730
identical to X equals equal so now and

443
00:23:12,730 --> 00:23:14,770
you see a lot of libraries like jQuery

444
00:23:14,770 --> 00:23:17,020
use the x equals equals no you know and

445
00:23:17,020 --> 00:23:19,330
they use that the whole time just makes

446
00:23:19,330 --> 00:23:21,430
a lot more sense it does exactly the

447
00:23:21,430 --> 00:23:27,400
same thing and also if it's obvious why

448
00:23:27,400 --> 00:23:29,590
the hell are you using triple equal like

449
00:23:29,590 --> 00:23:32,400
type of is always a string type of

450
00:23:32,400 --> 00:23:34,720
result of type of can never be anything

451
00:23:34,720 --> 00:23:39,280
other than a string so type of something

452
00:23:39,280 --> 00:23:41,440
equals equals function well like yeah

453
00:23:41,440 --> 00:23:44,269
you know might as well do too

454
00:23:44,269 --> 00:23:46,549
to an equals equals similar length and

455
00:23:46,549 --> 00:23:51,559
indexable all plays a number and I

456
00:23:51,559 --> 00:23:52,999
actually I mean this is a matter of

457
00:23:52,999 --> 00:23:55,940
style but I actually prefer equals

458
00:23:55,940 --> 00:23:57,499
equals in the sense because it's more

459
00:23:57,499 --> 00:23:59,599
declarative I'm being very transparent

460
00:23:59,599 --> 00:24:01,489
and saying to the read of my code I

461
00:24:01,489 --> 00:24:04,039
actually know these are the same things

462
00:24:04,039 --> 00:24:06,589
that's why I'm using using an equals

463
00:24:06,589 --> 00:24:12,619
equals comparator or writer if I put

464
00:24:12,619 --> 00:24:14,239
triple equals it suggests I don't

465
00:24:14,239 --> 00:24:17,109
actually know it's the same type

466
00:24:17,109 --> 00:24:18,739
personal preference

467
00:24:18,739 --> 00:24:23,029
that's how I like to do it oh and in his

468
00:24:23,029 --> 00:24:26,059
number two in our obligatory ironic

469
00:24:26,059 --> 00:24:28,339
footnote series a lot of the people who

470
00:24:28,339 --> 00:24:31,070
avoid equals equals with impunity they

471
00:24:31,070 --> 00:24:33,019
use if something the whole time

472
00:24:33,019 --> 00:24:35,839
well that's coercion too so it's like

473
00:24:35,839 --> 00:24:38,089
why is one type of coercion okay and the

474
00:24:38,089 --> 00:24:41,059
other time not and it's not even the

475
00:24:41,059 --> 00:24:41,839
same coercion

476
00:24:41,839 --> 00:24:45,109
so either they've understood the if

477
00:24:45,109 --> 00:24:47,239
coercion but not the equals equals one

478
00:24:47,239 --> 00:24:49,099
not sure why you would want to take the

479
00:24:49,099 --> 00:24:51,139
time to understand one and not the other

480
00:24:51,139 --> 00:24:53,899
or they don't understand any of coercion

481
00:24:53,899 --> 00:24:56,059
but because Crockford said it's okay

482
00:24:56,059 --> 00:24:58,039
they're just basically going ahead and

483
00:24:58,039 --> 00:25:00,649
using it and here's an example of why

484
00:25:00,649 --> 00:25:02,239
they're two coercion types are not the

485
00:25:02,239 --> 00:25:07,159
same so you know if potato evaluates the

486
00:25:07,159 --> 00:25:08,959
true but actually potato is not equal

487
00:25:08,959 --> 00:25:12,799
equals true so there we go

488
00:25:12,799 --> 00:25:16,279
array constructor so right you're not

489
00:25:16,279 --> 00:25:18,469
supposed to create arrays this is not

490
00:25:18,469 --> 00:25:23,869
how he's supposed to write but what

491
00:25:23,869 --> 00:25:25,940
about this this is this is the most

492
00:25:25,940 --> 00:25:27,589
beautiful thing and you need the array

493
00:25:27,589 --> 00:25:31,249
constructor to do this you probably seen

494
00:25:31,249 --> 00:25:33,409
this this is from prototype J s and it's

495
00:25:33,409 --> 00:25:35,299
a way to repeat a string X number of

496
00:25:35,299 --> 00:25:39,169
times and it basically creates an empty

497
00:25:39,169 --> 00:25:43,190
array of x plus 1 x and uses as your

498
00:25:43,190 --> 00:25:45,079
glue as the glue the string that you

499
00:25:45,079 --> 00:25:49,849
that you provided to it I think it's

500
00:25:49,849 --> 00:25:52,669
ultra cool and it makes me really sad

501
00:25:52,669 --> 00:25:54,859
that some people will never use this or

502
00:25:54,859 --> 00:25:57,360
we never want to see this in their code

503
00:25:57,360 --> 00:25:59,070
because they filed a rule that somebody

504
00:25:59,070 --> 00:26:01,050
once said and they never really took the

505
00:26:01,050 --> 00:26:03,720
time to understand it so there we go

506
00:26:03,720 --> 00:26:07,250
Oh wrong direction

507
00:26:07,250 --> 00:26:10,740
so people that both these rules also

508
00:26:10,740 --> 00:26:14,400
like to break these rules and I'm

509
00:26:14,400 --> 00:26:15,930
running out of times way too many rules

510
00:26:15,930 --> 00:26:17,040
so I'm going to be really really quick

511
00:26:17,040 --> 00:26:18,810
but I just want to make it clear these

512
00:26:18,810 --> 00:26:21,300
aren't the only rules so again Andrew

513
00:26:21,300 --> 00:26:23,640
DuPont two years ago J's conf gave the

514
00:26:23,640 --> 00:26:25,980
best talk about extending extending

515
00:26:25,980 --> 00:26:28,020
Native prototypes just to quickly say

516
00:26:28,020 --> 00:26:30,300
sometimes it's sensible I think es5

517
00:26:30,300 --> 00:26:32,300
shims are one case worth sensitive

518
00:26:32,300 --> 00:26:35,730
sensible has earned poverty on for in

519
00:26:35,730 --> 00:26:37,950
well you know if you create at the house

520
00:26:37,950 --> 00:26:39,900
your self and you didn't instant extend

521
00:26:39,900 --> 00:26:41,820
it and you didn't extend object

522
00:26:41,820 --> 00:26:44,010
prototype there's no way you could be

523
00:26:44,010 --> 00:26:45,840
bringing anything else into your to your

524
00:26:45,840 --> 00:26:48,780
to your iteration and I bet you nine

525
00:26:48,780 --> 00:26:50,220
times out of ten when you do a foreign

526
00:26:50,220 --> 00:26:52,470
iteration that is exactly the case the

527
00:26:52,470 --> 00:26:55,470
other thing is what's so bad about photo

528
00:26:55,470 --> 00:26:55,950
types

529
00:26:55,950 --> 00:26:58,400
sometimes we want the prototype I've

530
00:26:58,400 --> 00:27:02,180
I've done four in loops where I want

531
00:27:02,180 --> 00:27:04,920
prototype objects to leak into my

532
00:27:04,920 --> 00:27:08,580
foreign it for in iteration two so it's

533
00:27:08,580 --> 00:27:10,050
all a question of what you actually want

534
00:27:10,050 --> 00:27:12,510
in the iteration put all of our

535
00:27:12,510 --> 00:27:14,310
statements at the top well good advice

536
00:27:14,310 --> 00:27:15,990
most the time but in for loops it's

537
00:27:15,990 --> 00:27:17,460
frankly unintuitive because you're

538
00:27:17,460 --> 00:27:19,170
looking for where it was defined uh but

539
00:27:19,170 --> 00:27:20,820
there's no reason to ever define it up

540
00:27:20,820 --> 00:27:24,630
at the top in a for loop don't declare a

541
00:27:24,630 --> 00:27:25,650
function after you use it this is

542
00:27:25,650 --> 00:27:27,840
basically the hoisting thing like

543
00:27:27,840 --> 00:27:29,940
function declarations to function

544
00:27:29,940 --> 00:27:32,100
hoisting I start let's find it really

545
00:27:32,100 --> 00:27:33,660
useful to hide the implementation

546
00:27:33,660 --> 00:27:35,340
details further down the page where the

547
00:27:35,340 --> 00:27:37,080
person looking at my code might not care

548
00:27:37,080 --> 00:27:38,490
what the implementation is but they like

549
00:27:38,490 --> 00:27:40,220
see where is it

550
00:27:40,220 --> 00:27:43,560
use how's the function and I find that

551
00:27:43,560 --> 00:27:47,910
actually pretty good comma operator as

552
00:27:47,910 --> 00:27:51,810
chairs so I basically both the essay on

553
00:27:51,810 --> 00:27:54,090
this one I could give you a hundred

554
00:27:54,090 --> 00:27:55,980
reasons to use it but I'll just give you

555
00:27:55,980 --> 00:27:58,590
one if you want to use multiple

556
00:27:58,590 --> 00:28:00,330
expressions where the syntax the only

557
00:28:00,330 --> 00:28:02,190
expects a single one like second or

558
00:28:02,190 --> 00:28:05,220
third arguments of a whole loop really

559
00:28:05,220 --> 00:28:08,700
good examples of that and the one I hate

560
00:28:08,700 --> 00:28:10,230
is always pass

561
00:28:10,230 --> 00:28:12,240
10 to pass in I mean unless you're

562
00:28:12,240 --> 00:28:13,980
starting with zero or NX there's no

563
00:28:13,980 --> 00:28:18,120
reason to have to pass 10 to a person so

564
00:28:18,120 --> 00:28:21,480
in some way it's okay to break a rule if

565
00:28:21,480 --> 00:28:25,020
you understand why the rule exists in

566
00:28:25,020 --> 00:28:26,160
the first place

567
00:28:26,160 --> 00:28:29,130
you can mitigate or safely ignore in

568
00:28:29,130 --> 00:28:32,340
other words the concerns don't apply to

569
00:28:32,340 --> 00:28:35,120
what you're trying to use it for and

570
00:28:35,120 --> 00:28:38,010
maybe most importantly it adds something

571
00:28:38,010 --> 00:28:40,950
like there's a reason to break the rule

572
00:28:40,950 --> 00:28:43,200
and here I might mention semicolons I

573
00:28:43,200 --> 00:28:47,520
think semicolons contrary to what you

574
00:28:47,520 --> 00:28:48,690
might read they're pretty easy to

575
00:28:48,690 --> 00:28:51,720
understand why and why and how automatic

576
00:28:51,720 --> 00:28:55,080
semicolon insertion works I'm fine with

577
00:28:55,080 --> 00:28:57,600
people not using them I personally don't

578
00:28:57,600 --> 00:28:58,980
leave them out because it doesn't add

579
00:28:58,980 --> 00:29:00,630
anything either it's very easy to put a

580
00:29:00,630 --> 00:29:02,610
semicolon in this case sticking to the

581
00:29:02,610 --> 00:29:04,049
convention doesn't really cost me any

582
00:29:04,049 --> 00:29:06,600
anything leaving out is not really gonna

583
00:29:06,600 --> 00:29:09,500
add anything to the code so there we go

584
00:29:09,500 --> 00:29:12,000
this is a quote from an author I don't

585
00:29:12,000 --> 00:29:12,990
know anything about the author but I

586
00:29:12,990 --> 00:29:16,740
really like the quote and I think it

587
00:29:16,740 --> 00:29:18,240
really sums up pretty nicely what I'm

588
00:29:18,240 --> 00:29:21,000
trying to say which is become an expert

589
00:29:21,000 --> 00:29:22,620
at the rules then break them with

590
00:29:22,620 --> 00:29:28,110
creativity and style and like the TLDR

591
00:29:28,110 --> 00:29:30,809
take away from this if you didn't listen

592
00:29:30,809 --> 00:29:35,860
to anything else just listen to this is

593
00:29:35,870 --> 00:29:38,990
pretty good and if you can't be good be

594
00:29:38,990 --> 00:30:01,970
careful

595
00:30:01,980 --> 00:30:04,669
so we're only a little bit over time

596
00:30:04,669 --> 00:30:08,010
there is ten minutes till next break or

597
00:30:08,010 --> 00:30:09,840
do we have maybe I would think this is

598
00:30:09,840 --> 00:30:10,950
such a great opportunity to have this

599
00:30:10,950 --> 00:30:13,049
guy speaking to answer questions and I

600
00:30:13,049 --> 00:30:14,250
know there's something there I mean

601
00:30:14,250 --> 00:30:16,200
personally I would have questions that

602
00:30:16,200 --> 00:30:17,130
I'd want to ask him about stuff like

603
00:30:17,130 --> 00:30:20,549
this but do we have questions if you

604
00:30:20,549 --> 00:30:22,620
want to leave not rude at all go out and

605
00:30:22,620 --> 00:30:25,139
you can you know have a beverage but if

606
00:30:25,139 --> 00:30:26,610
we have questions maybe entertain one or

607
00:30:26,610 --> 00:30:27,720
two while we have them here is that cool

608
00:30:27,720 --> 00:30:42,899
I see one in the back great talk I agree

609
00:30:42,899 --> 00:30:45,059
with you on a lot of this I think most

610
00:30:45,059 --> 00:30:47,190
of these rules exists for teams where

611
00:30:47,190 --> 00:30:48,539
the team is fairly large and not

612
00:30:48,539 --> 00:30:50,250
everybody's a JavaScript programmer

613
00:30:50,250 --> 00:30:53,130
don't you think that as well yes I was

614
00:30:53,130 --> 00:30:54,600
gonna add a slide about that I did

615
00:30:54,600 --> 00:30:56,100
actually have a slide about that and I

616
00:30:56,100 --> 00:30:56,909
took it out

617
00:30:56,909 --> 00:31:00,419
I think teamwork is a good idea to have

618
00:31:00,419 --> 00:31:03,720
some conventions that the whole team

619
00:31:03,720 --> 00:31:05,639
should follow and I guess all I'm saying

620
00:31:05,639 --> 00:31:08,340
is yeah sure have those conventions but

621
00:31:08,340 --> 00:31:10,049
decide amongst yourselves what those

622
00:31:10,049 --> 00:31:12,179
conventions should be don't listen to

623
00:31:12,179 --> 00:31:13,980
what other people say understand the

624
00:31:13,980 --> 00:31:16,080
rules as a team understand how you want

625
00:31:16,080 --> 00:31:21,179
to employ them anyone else all right

626
00:31:21,179 --> 00:31:26,560
cool thank you so much

