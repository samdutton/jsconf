1
00:00:09,460 --> 00:00:14,960
Thank you very much, Rachel, and welcome to
my talk, JavaScript engines, the good parts.

2
00:00:14,960 --> 00:00:21,560
Initially, I was going to give this talk together
with Bryan Tilson from Microsoft — you know,

3
00:00:21,560 --> 00:00:27,010
nice guy, blond hair, working on a JavaScript
VM.

4
00:00:27,010 --> 00:00:33,600
Then life happened, and now I'm standing here
alone.

5
00:00:33,600 --> 00:00:39,250
>> What are you talking about?

6
00:00:39,250 --> 00:00:44,739
I'm right here, man!

7
00:00:44,739 --> 00:00:46,109
[Applause].

8
00:00:46,109 --> 00:00:47,489
[Laughter].

9
00:00:47,489 --> 00:00:48,489
>> This is weird.

10
00:00:48,489 --> 00:00:50,399
BENEDIKT: Now we have two Bryan lookalikes.

11
00:00:50,399 --> 00:00:54,590
I can't do a talk with both of you.

12
00:00:54,590 --> 00:00:58,469
>> Thank you for the cameo.

13
00:00:58,469 --> 00:01:00,950
>> Thank you.

14
00:01:00,950 --> 00:01:02,199
[Laughter].

15
00:01:02,199 --> 00:01:05,930
>> Applause for Peter!

16
00:01:05,930 --> 00:01:07,180
[Applause].

17
00:01:07,180 --> 00:01:09,990
With that out of the way, let's get started
with the actual presentation.

18
00:01:09,990 --> 00:01:12,590
JavaScript engines, the good parts.

19
00:01:12,590 --> 00:01:17,829
Nowadays, JavaScript runs not only in web
browsers but also in Node.js, in react Native,

20
00:01:17,829 --> 00:01:25,579
in Electron, and on IoT devices, and I've
even been told it runs in space.

21
00:01:25,579 --> 00:01:28,340
It is everywhere nowadays.

22
00:01:28,340 --> 00:01:33,600
As a developer, learning JavaScript, or improving
your JavaScript skills, is an excellent time

23
00:01:33,600 --> 00:01:39,830
investment, so, let's take a look today behind
the scenes of how JavaScript engines work.

24
00:01:39,830 --> 00:01:40,830
This is V8.

25
00:01:40,830 --> 00:01:45,360
It is the JavaScript engine used in Google
Carol, Node.js, and Electron, for example.

26
00:01:45,360 --> 00:01:51,010
Recently, we've been speaking about how V8
works behind the scenes.

27
00:01:51,010 --> 00:01:55,040
However, it's not just V8 out there, there
are more out there.

28
00:01:55,040 --> 00:01:57,799
We are going to do a little bit different
today.

29
00:01:57,799 --> 00:02:02,200
>> Yes, actually, we are going to look at
some of the fundamentals that are common to

30
00:02:02,200 --> 00:02:04,700
all the JavaScript engines out there.

31
00:02:04,700 --> 00:02:10,080
These fundamentals make it possible to write
these amazing applications we see today and

32
00:02:10,080 --> 00:02:12,760
of which we've heard a lot at this conference
already.

33
00:02:12,760 --> 00:02:19,870
Starring with that, it's not just V8, there
is an engine called SpiderMonkey which powers

34
00:02:19,870 --> 00:02:29,750
Firefox, and fun fact: there is even a node
fork using SpiderMonkey called SpiderNode.

35
00:02:29,750 --> 00:02:37,910
>> Then there is Microsoft's in Edge called
Chakra and the main part is open source.

36
00:02:37,910 --> 00:02:44,740
There is a node chakra core project powered
by that rather than V8.

37
00:02:44,740 --> 00:02:51,880
>> There is also JSC, or JavaScript core,
which is the engine that was originally built

38
00:02:51,880 --> 00:02:58,840
for webkit, and is nowadays powering Safari
but React Native applications.

39
00:02:58,840 --> 00:03:01,250
These are the major JavaScript applications
out there.

40
00:03:01,250 --> 00:03:05,440
If you want to play around with any of these
engines directly, which is without going through

41
00:03:05,440 --> 00:03:13,490
an embedder or Node.js, then you can use — you
install it globally, you follow the readme

42
00:03:13,490 --> 00:03:20,750
instructions before after that, you can run
V8 SpiderMonkey, Chakra, straight from the

43
00:03:20,750 --> 00:03:21,750
command line.

44
00:03:21,750 --> 00:03:26,330
The JavaScript you run in there will run directly
in the engine itself.

45
00:03:26,330 --> 00:03:29,970
Now that you have these JavaScript engines
installed on your system, let's look what

46
00:03:29,970 --> 00:03:31,570
they have in common.

47
00:03:31,570 --> 00:03:35,730
It starts with the JavaScript code that you
write.

48
00:03:35,730 --> 00:03:47,260
The engine parses it into a source, the AST,
into the interpreter which can do its thing.

49
00:03:47,260 --> 00:03:49,860
At this point, the engine is running your
JavaScript code.

50
00:03:49,860 --> 00:03:54,760
However, to make it run more smoothly and
efficiently, there is also an optimiser compiler

51
00:03:54,760 --> 00:04:00,700
pipeline, so the byte code gets fed into the
optimiser compiler, alongside profiling data

52
00:04:00,700 --> 00:04:05,260
that we collect while the code is running,
and that way, the optimiser compiler can make

53
00:04:05,260 --> 00:04:09,680
some assumptions based on the profiling data
and generate highly optimised machine code

54
00:04:09,680 --> 00:04:11,700
that runs more efficiently.

55
00:04:11,700 --> 00:04:15,040
If one of those assumptions turns out to be
incorrect later, it's no big deal because

56
00:04:15,040 --> 00:04:20,479
we can de-optimise and fall back through the
byte code through the interpreter.

57
00:04:20,479 --> 00:04:24,650
So let's focus on the important part here,
which is the part where the code actually

58
00:04:24,650 --> 00:04:26,840
gets run.

59
00:04:26,840 --> 00:04:33,030
Each JavaScript engine has some kind of pipeline
with an interpreter and an optimiser compiler

60
00:04:33,030 --> 00:04:34,040
pipeline.

61
00:04:34,040 --> 00:04:37,740
The interpreter generates byte code and the
optimising compiler generates highly optimised

62
00:04:37,740 --> 00:04:38,779
machine code.

63
00:04:38,779 --> 00:04:40,830
>> You just stole my punch line.

64
00:04:40,830 --> 00:04:42,800
This was the V8 slide.

65
00:04:42,800 --> 00:04:45,180
So, actually, that's exactly how V8 works.

66
00:04:45,180 --> 00:04:50,169
Our interpreter is named Ignition, and the
interpreter is responsible for generating

67
00:04:50,169 --> 00:04:51,750
and executing the byte code.

68
00:04:51,750 --> 00:04:57,569
And, as it is executing the byte code, it
collects profiling data, and, when a function

69
00:04:57,569 --> 00:05:02,889
gets hot — so let's say you call it a couple
of times, then we feed it to our optimising

70
00:05:02,889 --> 00:05:07,830
compiler, and that using the profiling data
to generate highly optimising machine code.

71
00:05:07,830 --> 00:05:10,430
>> I love hot functions.

72
00:05:10,430 --> 00:05:12,189
SpiderMonkey does it differently.

73
00:05:12,189 --> 00:05:17,490
They have two optimising compilers, so the
interpreter optimises into the baseline compiler

74
00:05:17,490 --> 00:05:20,470
which produced at a somewhat optimised code.

75
00:05:20,470 --> 00:05:27,479
While that is running it gets run through
the iron monkey optimising compiler which

76
00:05:27,479 --> 00:05:29,729
produces even more highly optimised machine
code.

77
00:05:29,729 --> 00:05:31,840
>> You did it again.

78
00:05:31,840 --> 00:05:34,819
This is exactly Chakra core, except they have
different names.

79
00:05:34,819 --> 00:05:43,710
In Chakra core, the first optimising compiler
is a just-in-time compiler and generates somewhat

80
00:05:43,710 --> 00:05:44,840
optimised code.

81
00:05:44,840 --> 00:05:54,759
When a function gets really hot, then it feeds
it to fulgit and this generates awesome code.

82
00:05:54,759 --> 00:05:59,509
>> Then JSC uses three optimising compilers.

83
00:05:59,509 --> 00:06:04,699
It starts with LLint, the low-level interpreter
which produces the byte code, and, from there,

84
00:06:04,699 --> 00:06:09,539
they can optimise into the baseline compiler
which produces somewhat optimised code.

85
00:06:09,539 --> 00:06:13,870
From this baseline compiler, based on some
heuristics they can optimise into the DFG

86
00:06:13,870 --> 00:06:17,169
compiler or the FDL compiler.

87
00:06:17,169 --> 00:06:22,319
So, based, let's look at all what else all
these JavaScript engines have in common by

88
00:06:22,319 --> 00:06:27,569
zooming in on some aspects and how they implement
in common, because, besides these difference

89
00:06:27,569 --> 00:06:31,460
that is we just discussed at a very high level,
all engines follow the same architecture,

90
00:06:31,460 --> 00:06:38,729
they have some kind of parser, and an interpreter
compiler pipeline.

91
00:06:38,729 --> 00:06:42,430
For example, how do JavaScript engines implement
the JavaScript object model?

92
00:06:42,430 --> 00:06:46,569
And which tricks do they use to speed up accessing
properties and objects?

93
00:06:46,569 --> 00:06:49,699
As it turns out, all major engines implement
this more or less similarly.

94
00:06:49,699 --> 00:06:55,379
>> But, wait, isn't it the case that all objects
in JavaScript are just dictionaries?

95
00:06:55,379 --> 00:06:56,630
>> That is true.

96
00:06:56,630 --> 00:07:02,900
If you look at the JavaScript pack, objects
are dictionaries with string keys, and the

97
00:07:02,900 --> 00:07:07,879
string keys map to not just the value but
to something the spec calls property attributes.

98
00:07:07,879 --> 00:07:14,469
In this example, the X and the Y are string
keys in a dictionary, according to the spec.

99
00:07:14,469 --> 00:07:19,550
The five and six values are just values within
the property attributes for.property.

100
00:07:19,550 --> 00:07:25,340
Other than the value, attributes can store
whether the property is writable, numerable,

101
00:07:25,340 --> 00:07:26,719
or configurable.

102
00:07:26,719 --> 00:07:31,410
This is not something that JavaScript make
up but part of the spec.

103
00:07:31,410 --> 00:07:35,460
Writable determines whether the property can
be reassigned to, innumerable, means that

104
00:07:35,460 --> 00:07:41,370
the property can show up in loops, and configurable
means it is a deletable property.

105
00:07:41,370 --> 00:07:45,550
You can get to this property attribute in
JavaScript for any object and any property

106
00:07:45,550 --> 00:07:49,360
by using the object.getonlyproperty descriptor
API.

107
00:07:49,360 --> 00:07:50,360
Interesting.

108
00:07:50,360 --> 00:07:53,080
>> That's how JavaScript sees objects.

109
00:07:53,080 --> 00:07:54,869
What if we take arrays?

110
00:07:54,869 --> 00:08:01,819
>> You can think of them as special objects
with one difference: they have special handling

111
00:08:01,819 --> 00:08:03,369
for array indices.

112
00:08:03,369 --> 00:08:05,689
>> What is an array index?

113
00:08:05,689 --> 00:08:07,729
>> It's a spec architectural.

114
00:08:07,729 --> 00:08:13,069
They are limited to the two to the power of
32 minus one item, so that is the maximum

115
00:08:13,069 --> 00:08:14,430
array length you can have.

116
00:08:14,430 --> 00:08:21,740
An array ending is any valid integer within
that range to the power of two to the 32,

117
00:08:21,740 --> 00:08:22,740
minus two.

118
00:08:22,740 --> 00:08:26,259
>> Not every integer is a valid area index?

119
00:08:26,259 --> 00:08:27,259
>> Exactly.

120
00:08:27,259 --> 00:08:28,819
>> You mentioned more differences?

121
00:08:28,819 --> 00:08:32,659
>> Another difference is the imaginal length
property that arrays have.

122
00:08:32,659 --> 00:08:33,659
>> Magic?

123
00:08:33,659 --> 00:08:35,039
>> It is pure magic.

124
00:08:35,039 --> 00:08:38,060
If you look at this example, the array has
a length of two in the beginning.

125
00:08:38,060 --> 00:08:42,390
Then we add another item to the array, and
automatically, the line property is updated.

126
00:08:42,390 --> 00:08:47,040
JavaScript's spec defines how this engines
have to do this automatically in the background.

127
00:08:47,040 --> 00:08:51,350
As a JavaScript developer, you have to manually
update it.

128
00:08:51,350 --> 00:08:53,850
So let's take a look at how JavaScript defines
arrays.

129
00:08:53,850 --> 00:08:56,130
This is stored similarly to objects.

130
00:08:56,130 --> 00:09:11,830
For example, all the keys, including the array
indexes are strings, so the first [sound feed

131
00:09:11,830 --> 00:09:16,730
distorted].

132
00:09:16,730 --> 00:09:25,750
>> Okay, that looks really spectacular to
the object.

133
00:09:25,750 --> 00:09:31,750
[Sound feed distorted].

134
00:09:31,750 --> 00:09:39,670
Most common operation in these problems is
the property ... I guess we had better make

135
00:09:39,670 --> 00:09:40,850
that fast.

136
00:09:40,850 --> 00:09:47,620
And, in fact, what we see in the wild is that
most objects in the same programme tend to

137
00:09:47,620 --> 00:09:52,571
have the same property keys, at least there
is a set of objects that have the same, so

138
00:09:52,571 --> 00:09:55,530
you could say that all of them have the same
shape.

139
00:09:55,530 --> 00:09:56,530
>> Right.

140
00:09:56,530 --> 00:09:57,530
That makes sense.

141
00:09:57,530 --> 00:10:01,450
It is also very common to access the same
property on different objects that have the

142
00:10:01,450 --> 00:10:02,450
same shape.

143
00:10:02,450 --> 00:10:06,740
So, with that in mind, JavaScript engines
can optimise object property access based

144
00:10:06,740 --> 00:10:07,960
on these shapes.

145
00:10:07,960 --> 00:10:10,400
So let's take a look at how that works.

146
00:10:10,400 --> 00:10:16,910
>> Okay, let's assume we have this one object
here which has properties X and Y.

147
00:10:16,910 --> 00:10:20,560
It's represented using this dictionary data
structure that we saw before.

148
00:10:20,560 --> 00:10:26,190
So be the X and Y are stored as strings in
the dictionary, and point to the property

149
00:10:26,190 --> 00:10:29,340
attributes for these individual properties.

150
00:10:29,340 --> 00:10:33,530
If you then write something like object.y
in your programme, the engine has to reach

151
00:10:33,530 --> 00:10:40,390
out to the JS object, find the key inside
of it, reach out to the property attributes,

152
00:10:40,390 --> 00:10:42,200
and eventually, load the value from it.

153
00:10:42,200 --> 00:10:45,011
>> Okay, so where are these property attributes
stored?

154
00:10:45,011 --> 00:10:48,840
Stored them as part of the JS object data
structure itself?

155
00:10:48,840 --> 00:10:51,100
That seems wasteful.

156
00:10:51,100 --> 00:10:57,240
If we expect more objects to have the same
shape, you would end up duplicating that information

157
00:10:57,240 --> 00:10:58,660
for every single object.

158
00:10:58,660 --> 00:10:59,690
That seems wasteful memory-wise.

159
00:10:59,690 --> 00:11:02,180
>> That's a good observation.

160
00:11:02,180 --> 00:11:05,970
I think some people made this observation
already.

161
00:11:05,970 --> 00:11:10,870
At least this is kind of how we represent
it in JavaScript engines nowadays.

162
00:11:10,870 --> 00:11:17,240
What we do is that the engine stores the shape
separately from the value of the attributes.

163
00:11:17,240 --> 00:11:24,970
In this case, the shape describes which properties
you have, and which property attributes you

164
00:11:24,970 --> 00:11:27,390
have on this, except for the value.

165
00:11:27,390 --> 00:11:33,520
So, instead, the property information contains
the offset where you find the value inside

166
00:11:33,520 --> 00:11:37,480
of the JS object, the offset where you find
the value.

167
00:11:37,480 --> 00:11:42,680
It totally makes sense when you start to look
at multiple objects that have the same shape.

168
00:11:42,680 --> 00:11:48,220
Now you only need one instance of this shape,
and the object only contained the information

169
00:11:48,220 --> 00:11:54,060
that is unique to this object, so you don't
repeat this information that is common anyway.

170
00:11:54,060 --> 00:11:57,841
>> So even if we have a million objects, there
will only be one shape as they all have the

171
00:11:57,841 --> 00:12:00,550
same shame and point to the same one?

172
00:12:00,550 --> 00:12:01,550
>> That's true.

173
00:12:01,550 --> 00:12:02,980
>> It seems like it would save a lot of memorial.

174
00:12:02,980 --> 00:12:06,090
>> I hope so, yes.

175
00:12:06,090 --> 00:12:09,660
This is not even something that JavaScript
engines made up, this happened before.

176
00:12:09,660 --> 00:12:12,730
So, like, there's been a lot of research on
this.

177
00:12:12,730 --> 00:12:18,200
If you look at academic papers, they're not
called shapes but hidden classes.

178
00:12:18,200 --> 00:12:23,420
>> That would be a confusing name in a JavaScript
engine because they're already a name in JavaScript.

179
00:12:23,420 --> 00:12:25,810
>> V8 calls them maps.

180
00:12:25,810 --> 00:12:27,160
>> It is the same problem.

181
00:12:27,160 --> 00:12:28,520
It is a terrible name!

182
00:12:28,520 --> 00:12:31,120
>> How about times for Chakra core.

183
00:12:31,120 --> 00:12:32,420
>> That's not confusing at all.

184
00:12:32,420 --> 00:12:34,860
>> I can offer structure for JSC.

185
00:12:34,860 --> 00:12:37,420
>> I like the name "structure", with , that
is what makes sense.

186
00:12:37,420 --> 00:12:40,300
I will keep calling them shapes because that
is what SpiderMonkey.

187
00:12:40,300 --> 00:12:43,200
I like the nail.

188
00:12:43,200 --> 00:12:48,670
It seems like a common thing if you have an
object to add a property to it.

189
00:12:48,670 --> 00:12:52,790
So what if you have an object with a certain
shape, you add a property to it, how does

190
00:12:52,790 --> 00:12:55,020
the JavaScript engine find the new shape?

191
00:12:55,020 --> 00:12:59,760
>> So, what JavaScript engines do is that
that the shapes inside of the engine form

192
00:12:59,760 --> 00:13:02,540
so-called transition chains.

193
00:13:02,540 --> 00:13:05,220
Let me run you through the example quickly.

194
00:13:05,220 --> 00:13:07,870
Let's assume we start with the empty object.

195
00:13:07,870 --> 00:13:13,100
This object initially points to the empty
shape that doesn't have any property on this.

196
00:13:13,100 --> 00:13:17,250
Now you start adding a property to it, like
in our case, we add X.

197
00:13:17,250 --> 00:13:23,270
It means we transition to a new shape that
has the property X on it, with the property

198
00:13:23,270 --> 00:13:28,880
information, and away append the value for
this property to the object, and then we record

199
00:13:28,880 --> 00:13:33,110
inside of the shape, inside of the property
information that this value can be found at

200
00:13:33,110 --> 00:13:34,930
offset zero now.

201
00:13:34,930 --> 00:13:39,230
So let's say we add yet another property to
it, like this case, Y.

202
00:13:39,230 --> 00:13:43,300
Then we do the same as before, we introduce
a new shape that contains this new property,

203
00:13:43,300 --> 00:13:49,540
in addition to the X property, and we append
the value to the object, and we record to

204
00:13:49,540 --> 00:13:52,110
the value can be found at offset 1.

205
00:13:52,110 --> 00:13:57,840
However, if we do this, then we might waste
a lot of space, because we repeat the fall

206
00:13:57,840 --> 00:14:01,600
table all the tile.

207
00:14:01,600 --> 00:14:04,630
>> Repeating X like all the information for
X is duplicated.

208
00:14:04,630 --> 00:14:07,630
>> All the information for X is duplicated.

209
00:14:07,630 --> 00:14:09,630
That's not really what engines do.

210
00:14:09,630 --> 00:14:15,430
Instead, what you do is you just remember
the information about the new property that

211
00:14:15,430 --> 00:14:16,550
was added.

212
00:14:16,550 --> 00:14:17,550
>> Right.

213
00:14:17,550 --> 00:14:20,400
>> We don't have to repeat the information
for X because we can just find it earlier

214
00:14:20,400 --> 00:14:21,449
in the chain.

215
00:14:21,449 --> 00:14:26,330
>> That's the trick, so, we introduce a back
link to the previous shape so you can walk

216
00:14:26,330 --> 00:14:30,830
the transition chain backwards until you find
the shape that changes the property and then

217
00:14:30,830 --> 00:14:36,380
you know where to look into the object.

218
00:14:36,380 --> 00:14:40,820
Just looking at this example, if you now need
to find X on it, you would start at the last

219
00:14:40,820 --> 00:14:44,880
shape, and you see okay, this is not the one
I'm looking for because it introduces Y.

220
00:14:44,880 --> 00:14:47,860
You walk back once, and there is X. Awesome.

221
00:14:47,860 --> 00:14:49,620
I know where to find it.

222
00:14:49,620 --> 00:14:55,090
>> That's what happened when you type o.x
in JavaScript.

223
00:14:55,090 --> 00:14:57,560
What if you have two objects with the same
shape.

224
00:14:57,560 --> 00:15:00,110
You have two properties to each of them.

225
00:15:00,110 --> 00:15:05,170
There is no way to chain the shapes?

226
00:15:05,170 --> 00:15:13,730
>> We have instead transition trees, and we
branch off in various ways from shapes.

227
00:15:13,730 --> 00:15:15,570
Let's look at this example.

228
00:15:15,570 --> 00:15:17,350
This is what we learned before already.

229
00:15:17,350 --> 00:15:18,610
We have the MP object.

230
00:15:18,610 --> 00:15:24,980
We introduce X on it which means we introduce
two shapes from a single chain to the shape

231
00:15:24,980 --> 00:15:26,910
that contains X.

232
00:15:26,910 --> 00:15:32,730
If we ran the second line of code, if we start
again with an empty object, and we add a property

233
00:15:32,730 --> 00:15:38,490
Y to it, we branch off the empty shape with
the property Y, and we end up with a tree

234
00:15:38,490 --> 00:15:42,500
that ends up with a total of three shapes
in two chains.

235
00:15:42,500 --> 00:15:43,500
>> Right.

236
00:15:43,500 --> 00:15:48,690
So does that mean if we walk up the shape
tree, we always end up at the empty shape?

237
00:15:48,690 --> 00:15:50,010
>> No.

238
00:15:50,010 --> 00:15:51,010
Not necessarily.

239
00:15:51,010 --> 00:15:53,700
There is always an exception to the rule.

240
00:15:53,700 --> 00:15:59,360
And the reason is that JavaScript engines
have special treatment for object literals

241
00:15:59,360 --> 00:16:02,940
that already introduce properties from the
get-go.

242
00:16:02,940 --> 00:16:07,740
Like in this case, the first thing is what
we saw before, we start with the empty object

243
00:16:07,740 --> 00:16:13,480
and then add X to it, and the second line
is we start with an object that contains an

244
00:16:13,480 --> 00:16:14,480
X.

245
00:16:14,480 --> 00:16:19,590
And you can imagine that it might be a bit
faster just to construct objects with the

246
00:16:19,590 --> 00:16:21,310
property on it already.

247
00:16:21,310 --> 00:16:28,050
So, what we end up, for example, in V8, and
in SpiderMonkey, is this is the first case

248
00:16:28,050 --> 00:16:34,310
that we know, so, here we start from the empty
object, and we add X to it later.

249
00:16:34,310 --> 00:16:37,470
That is exactly what we had before.

250
00:16:37,470 --> 00:16:42,380
But now, the second example we start with
an object that already contains X from the

251
00:16:42,380 --> 00:16:47,370
beginning, so we introduce a new root shape
that already contains this X.

252
00:16:47,370 --> 00:16:50,040
And we don't branch it off the empty shape.

253
00:16:50,040 --> 00:16:52,850
>> We can skip over that empty shape altogether
in this case.

254
00:16:52,850 --> 00:16:54,130
>> That's true.

255
00:16:54,130 --> 00:16:59,290
The reason why we do this is to keep the transition
chains short, because otherwise, it is a lot

256
00:16:59,290 --> 00:17:03,960
of metadata that we waste, and also because
it is more efficient to construct objects

257
00:17:03,960 --> 00:17:04,989
this way.

258
00:17:04,989 --> 00:17:06,370
>> It sounds super familiar.

259
00:17:06,370 --> 00:17:09,169
Didn't you write a blog post about this?

260
00:17:09,169 --> 00:17:12,169
>> Shameless plug — yes, I did!

261
00:17:12,169 --> 00:17:16,880
I actually published a blog post last year
about this where I tried to highlight how

262
00:17:16,880 --> 00:17:21,459
these subtleties with the shapes can have
effects on real-world performance, especially

263
00:17:21,459 --> 00:17:24,110
to be — for common applications.

264
00:17:24,110 --> 00:17:26,559
>> I read that blog post.

265
00:17:26,559 --> 00:17:29,259
It talks about these things called ICs.

266
00:17:29,259 --> 00:17:30,259
What are those?

267
00:17:30,259 --> 00:17:32,879
>> That is actually the magic inside of the
engine.

268
00:17:32,879 --> 00:17:34,220
No, it's the not!

269
00:17:34,220 --> 00:17:35,570
It is more magic.

270
00:17:35,570 --> 00:17:41,559
It stands for "inline cache" which are the
key ingredients which is necessary to make

271
00:17:41,559 --> 00:17:46,029
JavaScript run fast, and also the main motivation
for actually having shapes.

272
00:17:46,029 --> 00:17:49,330
>> So how do these ICs work exactly?

273
00:17:49,330 --> 00:17:55,460
>> So JavaScript engines use ICs to memorise
information where to find properties on objects,

274
00:17:55,460 --> 00:18:00,210
so that we don't need to repeat expensive
property look-up on each property access.

275
00:18:00,210 --> 00:18:02,419
>> Okay, so how does that work?

276
00:18:02,419 --> 00:18:08,320
>> Okay, let me run you through this example
we have a function get.x which takes an object

277
00:18:08,320 --> 00:18:12,070
o and logs the property x from it.

278
00:18:12,070 --> 00:18:14,700
>> That seems a common thing to do, get a
property somewhere?

279
00:18:14,700 --> 00:18:17,759
>> Yes, I think I've seen it in the wild.

280
00:18:17,759 --> 00:18:22,809
If we feed this to a JavaScript core, then
it generates the following byte code which

281
00:18:22,809 --> 00:18:30,120
contains two instructions: the get by ID instruction
which has the property ID look-up, loads X

282
00:18:30,120 --> 00:18:35,830
from arc one, first argument, which is 0,
and stores the result into lock zero, and

283
00:18:35,830 --> 00:18:39,959
the next instruction just returns whatever
is in lock zero.

284
00:18:39,959 --> 00:18:44,600
>> This makes sense but how do ICs come into
play here?

285
00:18:44,600 --> 00:18:46,020
>> It's not just that.

286
00:18:46,020 --> 00:18:51,919
JC introduces an inline cache into the byte
code, so, in this case by the get by ID instructions.

287
00:18:51,919 --> 00:18:57,930
This IC contains two un initialised slots
initially.

288
00:18:57,930 --> 00:19:06,679
When we call this function, let's say we call
it with an object, X:a.

289
00:19:06,679 --> 00:19:14,179
In this case, the property value for X is
founded opposite zero.

290
00:19:14,179 --> 00:19:16,499
Now we invoke the function with this.

291
00:19:16,499 --> 00:19:21,900
We need to reach out to the shape of this
object, search for X inside, load the property

292
00:19:21,900 --> 00:19:26,159
information from it, determine the offset,
then go back to the object, and load whatever

293
00:19:26,159 --> 00:19:27,859
is set at offset zero.

294
00:19:27,859 --> 00:19:29,700
>> That sounds like a lot of work.

295
00:19:29,700 --> 00:19:30,700
>> It is.

296
00:19:30,700 --> 00:19:34,730
Since the engine already did this work, it
makes a lot of sense to memorise the information

297
00:19:34,730 --> 00:19:37,169
we can reuse on the next call for this function.

298
00:19:37,169 --> 00:19:42,139
Let's say we call it — it makes a lot of
sense to recall the information for the next

299
00:19:42,139 --> 00:19:43,139
call.

300
00:19:43,139 --> 00:19:47,490
What we do is we memorise the shape that we
have seen, and also the offset at which we

301
00:19:47,490 --> 00:19:50,740
found X inside of this shape.

302
00:19:50,740 --> 00:19:56,210
When we then call this function again with
an object that has the same shape, we only

303
00:19:56,210 --> 00:19:58,039
need to check, "Oh, it's the same shape.

304
00:19:58,039 --> 00:20:00,730
No, it is already offset zero."

305
00:20:00,730 --> 00:20:03,580
I don't need to reach out to the property
information at all.

306
00:20:03,580 --> 00:20:04,580
>> Wow.

307
00:20:04,580 --> 00:20:06,470
We can get rid of that expensive loop altogether.

308
00:20:06,470 --> 00:20:07,700
It sound great.

309
00:20:07,700 --> 00:20:10,289
>> Yes, and it's significantly faster now.

310
00:20:10,289 --> 00:20:15,730
>> How would this work for arrays where you
can expect most elements to be array indices,

311
00:20:15,730 --> 00:20:17,230
most properties.

312
00:20:17,230 --> 00:20:24,100
You wouldn't want to store property attributes
for each and every array index in your codebase.

313
00:20:24,100 --> 00:20:26,820
You know they're going to be rewritable, configurable.

314
00:20:26,820 --> 00:20:32,540
>> Totally, that would be a total waste of
space.

315
00:20:32,540 --> 00:20:33,940
>> What happens instead?

316
00:20:33,940 --> 00:20:40,429
>> All engines make use of the fact that all
array properties are writable, configurable,

317
00:20:40,429 --> 00:20:43,120
innumerable data properties.

318
00:20:43,120 --> 00:20:44,790
Let's look at this array.

319
00:20:44,790 --> 00:20:49,740
The array has a property lang, which this
— length.

320
00:20:49,740 --> 00:20:53,650
Let's say the length is stored stored inside
the array.

321
00:20:53,650 --> 00:21:00,610
For all the elements that in the array indexed
by array, we store them in a separate elements

322
00:21:00,610 --> 00:21:06,779
packing store, and it only stores the values,
and it has this implicit tag attached to it

323
00:21:06,779 --> 00:21:10,829
which says whatever you find in here is rewritable,
innumerable, and configureable.

324
00:21:10,829 --> 00:21:15,900
>> Away don't have to store property attributes
for array elements because they match the

325
00:21:15,900 --> 00:21:16,900
default.

326
00:21:16,900 --> 00:21:19,100
>> They're default values anyway.

327
00:21:19,100 --> 00:21:22,059
>> What if someone overrides the attributes?

328
00:21:22,059 --> 00:21:23,059
This is JavaScript.

329
00:21:23,059 --> 00:21:24,059
JavaScript is wild.

330
00:21:24,059 --> 00:21:25,859
>> I know you're wild.

331
00:21:25,859 --> 00:21:27,659
>> You can totally do this, though.

332
00:21:27,659 --> 00:21:33,879
What if I use object or define property on
an array element, and I set one of its attributes

333
00:21:33,879 --> 00:21:38,029
to the non-default value of false?

334
00:21:38,029 --> 00:21:42,210
>> You know, Mathias, whenever you do something
like this, you kill a kitten!

335
00:21:42,210 --> 00:21:44,589
So, like, just look at this one.

336
00:21:44,589 --> 00:21:45,589
>> Awp.

337
00:21:45,589 --> 00:21:47,380
>> You cannot kill it.

338
00:21:47,380 --> 00:21:49,190
You want to kill this one?

339
00:21:49,190 --> 00:21:51,599
>> So cute!

340
00:21:51,599 --> 00:21:54,009
>> Come on.

341
00:21:54,009 --> 00:21:55,309
>> My heart melts!

342
00:21:55,309 --> 00:21:57,709
A whole bunch of them.

343
00:21:57,709 --> 00:21:59,039
>> It's a family of kittens.

344
00:21:59,039 --> 00:22:01,119
Remember, don't do this!

345
00:22:01,119 --> 00:22:07,740
Kittens aside, for these edge cases, the engine
represents the entire backing store for the

346
00:22:07,740 --> 00:22:14,450
elements as a dictionary which map from indices
to full-fledged property attributes like in

347
00:22:14,450 --> 00:22:16,440
the JavaScript specification.

348
00:22:16,440 --> 00:22:22,539
>> If I use this define property on one array
index, the whole array gets stored like this?

349
00:22:22,539 --> 00:22:27,590
>> Yes, because the basic assumption of the
engine is that you don't do this.

350
00:22:27,590 --> 00:22:29,259
Also, remember the kittens.

351
00:22:29,259 --> 00:22:30,259
Come on!

352
00:22:30,259 --> 00:22:31,259
>> Got it.

353
00:22:31,259 --> 00:22:34,350
I think you're saying I should avoid using
object define property and array indexes which

354
00:22:34,350 --> 00:22:36,539
is a weird thing to do anyway?

355
00:22:36,539 --> 00:22:37,539
>> Yes.

356
00:22:37,539 --> 00:22:38,539
>> Okay.

357
00:22:38,539 --> 00:22:40,379
I won't do that again.

358
00:22:40,379 --> 00:22:44,309
We've learned a lot about JavaScript engine
internals today and we got coding advice out

359
00:22:44,309 --> 00:22:45,559
of it as well.

360
00:22:45,559 --> 00:22:48,259
Let's recap the main takeaways.

361
00:22:48,259 --> 00:22:52,990
Always initialise your object in exactly the
same way so they don't end up having different

362
00:22:52,990 --> 00:22:54,220
shapes.

363
00:22:54,220 --> 00:22:58,679
And second don't mess with property attributes
of array elements so that they can be stored

364
00:22:58,679 --> 00:23:00,539
and operated on efficiently.

365
00:23:00,539 --> 00:23:02,940
Think of the kittens!

366
00:23:02,940 --> 00:23:03,940
That's it.

367
00:23:03,940 --> 00:23:04,940
Thanks for listening.

