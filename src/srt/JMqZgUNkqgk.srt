1
00:00:00,359 --> 00:00:03,240

hi everyone today we're gonna talk about

2
00:00:03,240 --> 00:00:07,440
tools but first let me tell you about my

3
00:00:07,440 --> 00:00:11,070
dad my dad was a tool maker and what

4
00:00:11,070 --> 00:00:13,530
that meant in his context was he worked

5
00:00:13,530 --> 00:00:16,680
in a machine shop and he went to school

6
00:00:16,680 --> 00:00:18,660
for an extra year to learn some advanced

7
00:00:18,660 --> 00:00:21,140
techniques so that he could make tools

8
00:00:21,140 --> 00:00:24,510
the tools he made were used to make

9
00:00:24,510 --> 00:00:26,760
parts or make it easier to make parts

10
00:00:26,760 --> 00:00:30,470
that any other machinist could make and

11
00:00:30,470 --> 00:00:33,510
there was two reasons why he was called

12
00:00:33,510 --> 00:00:34,829
a tool maker as opposed to just a

13
00:00:34,829 --> 00:00:37,200
machinist first was that he just went to

14
00:00:37,200 --> 00:00:38,550
school for an extra year and learned

15
00:00:38,550 --> 00:00:39,149
some things

16
00:00:39,149 --> 00:00:41,489
the second was those tools well they

17
00:00:41,489 --> 00:00:43,320
were very important to the manufacturing

18
00:00:43,320 --> 00:00:44,820
process it was they're also very

19
00:00:44,820 --> 00:00:48,030
important to saving time making some of

20
00:00:48,030 --> 00:00:50,489
these parts so I want to think about

21
00:00:50,489 --> 00:00:52,860
that a little bit today is there

22
00:00:52,860 --> 00:00:54,719
anything that we do as developers that

23
00:00:54,719 --> 00:00:57,449
we could save time that could be easier

24
00:00:57,449 --> 00:01:00,980
that we could be more effective at and

25
00:01:00,980 --> 00:01:04,470
to do that let's first discuss how

26
00:01:04,470 --> 00:01:06,420
linters compilers and other cool things

27
00:01:06,420 --> 00:01:09,360
work I'm will Klein I'm from Longmont

28
00:01:09,360 --> 00:01:09,990
Colorado

29
00:01:09,990 --> 00:01:12,720
I work in Boulder as an engineer at

30
00:01:12,720 --> 00:01:15,840
workday and today we're going to talk

31
00:01:15,840 --> 00:01:19,350
about four things first what are our

32
00:01:19,350 --> 00:01:21,330
problems what are the things that we

33
00:01:21,330 --> 00:01:24,290
might be able to think about and improve

34
00:01:24,290 --> 00:01:26,520
second I'm going to talk about compilers

35
00:01:26,520 --> 00:01:29,610
because compilers are just really

36
00:01:29,610 --> 00:01:31,200
awesome and typically you'll only learn

37
00:01:31,200 --> 00:01:32,970
about that and peer science at a

38
00:01:32,970 --> 00:01:34,860
university but I think there's some

39
00:01:34,860 --> 00:01:36,900
really essential things that we can all

40
00:01:36,900 --> 00:01:40,170
gather very quickly today and there's a

41
00:01:40,170 --> 00:01:43,049
key piece of compilers that we're gonna

42
00:01:43,049 --> 00:01:46,259
really dive into and make our best

43
00:01:46,259 --> 00:01:48,180
friend and then we're going to look at

44
00:01:48,180 --> 00:01:50,280
how that key piece can be applied to

45
00:01:50,280 --> 00:01:52,020
those problems and hopefully come up

46
00:01:52,020 --> 00:01:55,259
with some solutions so the first problem

47
00:01:55,259 --> 00:01:57,450
that I run into a lot is with code

48
00:01:57,450 --> 00:01:58,560
review and I don't have a problem code

49
00:01:58,560 --> 00:02:00,509
of you I love code review I've worked in

50
00:02:00,509 --> 00:02:03,000
a really lovely code review rich culture

51
00:02:03,000 --> 00:02:07,500
for the past five years but but there's

52
00:02:07,500 --> 00:02:09,739
some things I see in code review that

53
00:02:09,739 --> 00:02:11,670
could be better

54
00:02:11,670 --> 00:02:13,600
I love getting feedback I love giving

55
00:02:13,600 --> 00:02:15,190
feedback I love asking questions and

56
00:02:15,190 --> 00:02:16,420
learning about code just to the code

57
00:02:16,420 --> 00:02:18,730
review but when something comes up that

58
00:02:18,730 --> 00:02:22,030
is I'll just say tribal knowledge I'll

59
00:02:22,030 --> 00:02:24,010
submit my first PR to a project and

60
00:02:24,010 --> 00:02:26,140
they'll say oh yeah that's great but

61
00:02:26,140 --> 00:02:27,340
when you work in this part of the

62
00:02:27,340 --> 00:02:28,870
codebase there's these other things you

63
00:02:28,870 --> 00:02:31,140
can use that you didn't know about and

64
00:02:31,140 --> 00:02:33,730
here's where they are so there's all

65
00:02:33,730 --> 00:02:35,530
these things that we can only learn from

66
00:02:35,530 --> 00:02:37,060
code review or from pairing with another

67
00:02:37,060 --> 00:02:39,580
developer that I kind of wonder is there

68
00:02:39,580 --> 00:02:41,590
a better way than waiting until we get

69
00:02:41,590 --> 00:02:43,330
to code review to find out about those

70
00:02:43,330 --> 00:02:44,380
things and then going back to the

71
00:02:44,380 --> 00:02:46,240
drawing board or re rewriting our code

72
00:02:46,240 --> 00:02:50,680
and the second thing that is actually

73
00:02:50,680 --> 00:02:52,780
really awesome are changing language

74
00:02:52,780 --> 00:02:56,290
features we have since es6 we have had

75
00:02:56,290 --> 00:02:58,090
so many iterations in the language all

76
00:02:58,090 --> 00:02:59,590
these awesome new features that have

77
00:02:59,590 --> 00:03:02,320
come about but I wonder is there an

78
00:03:02,320 --> 00:03:04,240
easier way to apply those to our

79
00:03:04,240 --> 00:03:07,420
existing code to bring these new awesome

80
00:03:07,420 --> 00:03:09,820
things into our code bases and take

81
00:03:09,820 --> 00:03:11,230
advantage of them without having to

82
00:03:11,230 --> 00:03:14,320
change everything manually and the last

83
00:03:14,320 --> 00:03:17,290
piece is very relate to that API changes

84
00:03:17,290 --> 00:03:19,030
or even changing libraries and

85
00:03:19,030 --> 00:03:22,000
frameworks we've seen plenty of change

86
00:03:22,000 --> 00:03:24,550
and I've largely embraced it and enjoyed

87
00:03:24,550 --> 00:03:26,920
it but when I need to switch from one

88
00:03:26,920 --> 00:03:28,840
library to another and change all the

89
00:03:28,840 --> 00:03:31,300
syntax so potentially hundreds of

90
00:03:31,300 --> 00:03:32,980
changes in the code base and it's just a

91
00:03:32,980 --> 00:03:35,260
lot of tedium and I wonder can we also

92
00:03:35,260 --> 00:03:40,780
improve that cool so to do that we're

93
00:03:40,780 --> 00:03:42,790
gonna take a step over to compiler land

94
00:03:42,790 --> 00:03:45,360
and talk about compilers really briefly

95
00:03:45,360 --> 00:03:48,460
so how do we turn this into something

96
00:03:48,460 --> 00:03:50,140
that the machine can understand how we

97
00:03:50,140 --> 00:03:52,870
turn a variable declaration into ones

98
00:03:52,870 --> 00:03:54,550
and zeros that can be put through the

99
00:03:54,550 --> 00:03:57,040
CPU and have awesome things happen in

100
00:03:57,040 --> 00:04:00,850
our browsers there's a little bit of

101
00:04:00,850 --> 00:04:03,280
magic but hopefully less less of that

102
00:04:03,280 --> 00:04:07,980
after today Babel gives us an awesome

103
00:04:07,980 --> 00:04:10,780
reference point Babel is a type of

104
00:04:10,780 --> 00:04:13,690
compiler that takes in source does some

105
00:04:13,690 --> 00:04:15,790
stuff with it and then spits back out

106
00:04:15,790 --> 00:04:18,910
JavaScript source a transpiler

107
00:04:18,910 --> 00:04:21,040
technically is what type of compiler it

108
00:04:21,040 --> 00:04:23,470
is and it actually has everything we

109
00:04:23,470 --> 00:04:24,470
need to

110
00:04:24,470 --> 00:04:28,340
you to understand compilers and there's

111
00:04:28,340 --> 00:04:30,410
this really awesome definition of a

112
00:04:30,410 --> 00:04:32,720
compiler that I'm going to borrow Jamie

113
00:04:32,720 --> 00:04:35,060
builds on Twitter and github writes this

114
00:04:35,060 --> 00:04:37,550
in the super tiny compiler most

115
00:04:37,550 --> 00:04:40,010
compilers break down into three primary

116
00:04:40,010 --> 00:04:43,790
stages parsing transformation and

117
00:04:43,790 --> 00:04:47,080
cogeneration okay let's dive in each one

118
00:04:47,080 --> 00:04:50,090
parsing is taking raw code turning it

119
00:04:50,090 --> 00:04:52,460
into a more abstract representation of

120
00:04:52,460 --> 00:04:54,890
the code okay it's taking that

121
00:04:54,890 --> 00:04:56,660
JavaScript code and turning into

122
00:04:56,660 --> 00:05:00,620
something else that's more abstract the

123
00:05:00,620 --> 00:05:02,990
second part is transformation that's

124
00:05:02,990 --> 00:05:04,820
taking the abstract representation and

125
00:05:04,820 --> 00:05:06,500
and changing it to do whatever the

126
00:05:06,500 --> 00:05:07,730
compiler wants it to do

127
00:05:07,730 --> 00:05:10,460
so in the case of babel it wants to take

128
00:05:10,460 --> 00:05:13,160
potentially a javascript with es2016

129
00:05:13,160 --> 00:05:16,970
2017-2018 features and so on and do

130
00:05:16,970 --> 00:05:18,470
something with that trees so that when

131
00:05:18,470 --> 00:05:20,960
it spits it back out it's going to be in

132
00:05:20,960 --> 00:05:23,810
something like closer to es 5 that more

133
00:05:23,810 --> 00:05:26,200
browsers can support out of the box and

134
00:05:26,200 --> 00:05:28,490
that's the cogeneration is spitting that

135
00:05:28,490 --> 00:05:30,890
code back out and other compilers might

136
00:05:30,890 --> 00:05:32,690
spit out something else but Babel just

137
00:05:32,690 --> 00:05:36,830
it's JavaScript back out cool so we're

138
00:05:36,830 --> 00:05:39,110
going to focus on one piece of this the

139
00:05:39,110 --> 00:05:41,240
abstract representation because this is

140
00:05:41,240 --> 00:05:43,370
where all the magic that we really care

141
00:05:43,370 --> 00:05:46,610
about happens so going back to our code

142
00:05:46,610 --> 00:05:50,030
example the first thing with parsing

143
00:05:50,030 --> 00:05:52,160
that we mentioned is breaking this down

144
00:05:52,160 --> 00:05:54,290
into tokens and there's just what are

145
00:05:54,290 --> 00:05:56,240
those discrete pieces of code in this

146
00:05:56,240 --> 00:05:58,669
line that stand on their own the atoms

147
00:05:58,669 --> 00:06:01,940
in the molecule and this is just a array

148
00:06:01,940 --> 00:06:04,190
of these tokens but from here we need to

149
00:06:04,190 --> 00:06:06,860
figure out how to relate these tokens to

150
00:06:06,860 --> 00:06:08,750
each other how does the VAR and the

151
00:06:08,750 --> 00:06:10,610
answer bond to each other what are the

152
00:06:10,610 --> 00:06:13,100
what is their connection and the 6 and

153
00:06:13,100 --> 00:06:14,780
the x and the 7 what how are they

154
00:06:14,780 --> 00:06:16,400
related and how does that tie back to

155
00:06:16,400 --> 00:06:20,210
the variable it's being declared so to

156
00:06:20,210 --> 00:06:21,800
do that we need some type of

157
00:06:21,800 --> 00:06:23,780
representation that representation is

158
00:06:23,780 --> 00:06:24,229
called

159
00:06:24,229 --> 00:06:27,200
the ast and ast does not stand for

160
00:06:27,200 --> 00:06:29,120
whatever Marcy said it is actually an

161
00:06:29,120 --> 00:06:31,729
arc abstract syntax tree and that sounds

162
00:06:31,729 --> 00:06:34,039
very a computer science e and or D but

163
00:06:34,039 --> 00:06:36,979
it's just a tree we don't talk about

164
00:06:36,979 --> 00:06:37,520
trees

165
00:06:37,520 --> 00:06:41,550
but we actually work with them a ton the

166
00:06:41,550 --> 00:06:43,680
Dom is probably the best example we have

167
00:06:43,680 --> 00:06:45,810
our HTML document and that has a head

168
00:06:45,810 --> 00:06:48,180
and a body the head has a title and meta

169
00:06:48,180 --> 00:06:50,580
tags and the body has divs and those

170
00:06:50,580 --> 00:06:51,840
divs have their own divs

171
00:06:51,840 --> 00:06:54,240
so what a tree is essentially is just a

172
00:06:54,240 --> 00:06:55,290
node at the top

173
00:06:55,290 --> 00:06:57,390
it's weird trees are like upside down in

174
00:06:57,390 --> 00:06:59,850
computer science world because just the

175
00:06:59,850 --> 00:07:01,830
node of the top there's a root and then

176
00:07:01,830 --> 00:07:03,450
it can have any number of children and

177
00:07:03,450 --> 00:07:06,030
then they can in turn have children and

178
00:07:06,030 --> 00:07:07,860
they can also have properties on them

179
00:07:07,860 --> 00:07:11,100
that describe them so we're gonna look

180
00:07:11,100 --> 00:07:12,870
at this in a just another view in a

181
00:07:12,870 --> 00:07:16,200
moment let me show you something called

182
00:07:16,200 --> 00:07:19,170
ast explore so this is a really awesome

183
00:07:19,170 --> 00:07:22,640
tool that's up at h to explore dotnet

184
00:07:22,640 --> 00:07:25,200
check it out we're gonna play with it

185
00:07:25,200 --> 00:07:28,800
today and show you how it works it's a

186
00:07:28,800 --> 00:07:31,050
little bit tricky to present with though

187
00:07:31,050 --> 00:07:32,940
there's a lot of options and it doesn't

188
00:07:32,940 --> 00:07:36,360
quite scale very well so I made a

189
00:07:36,360 --> 00:07:41,400
special version a Cascadia jason cool so

190
00:07:41,400 --> 00:07:43,980
right here we just have an empty program

191
00:07:43,980 --> 00:07:46,530
file that's the same thing and there's

192
00:07:46,530 --> 00:07:48,420
nothing here but already we have a tree

193
00:07:48,420 --> 00:07:51,480
and right off we can see that it has a

194
00:07:51,480 --> 00:07:53,310
program node this is the root node in

195
00:07:53,310 --> 00:07:56,400
every program every file that's that's

196
00:07:56,400 --> 00:07:58,710
parsed and it has three types of

197
00:07:58,710 --> 00:07:59,760
properties that we're going to talk

198
00:07:59,760 --> 00:08:02,190
about the first is its type and every

199
00:08:02,190 --> 00:08:04,590
every node always has a type and this

200
00:08:04,590 --> 00:08:06,900
will differ program at the top here and

201
00:08:06,900 --> 00:08:09,480
the second type of property is where the

202
00:08:09,480 --> 00:08:11,700
children live in this case there's a

203
00:08:11,700 --> 00:08:13,920
body there's nothing there yet but there

204
00:08:13,920 --> 00:08:15,810
will be and the third type is a

205
00:08:15,810 --> 00:08:18,390
descriptive property describing that

206
00:08:18,390 --> 00:08:20,640
node itself in this case it's describing

207
00:08:20,640 --> 00:08:24,180
it as a source type of module alright

208
00:08:24,180 --> 00:08:26,870
let's look at another example

209
00:08:26,870 --> 00:08:29,850
let's look at those variables again so

210
00:08:29,850 --> 00:08:32,160
now we can see that the program has two

211
00:08:32,160 --> 00:08:35,099
children it has two elements here if we

212
00:08:35,099 --> 00:08:37,320
expand that they are our two variable

213
00:08:37,320 --> 00:08:39,289
declarations asu's are awesome and

214
00:08:39,289 --> 00:08:42,870
Cascadia Jess is love so the first

215
00:08:42,870 --> 00:08:44,010
available declaration there's a little

216
00:08:44,010 --> 00:08:45,480
bit of a hint here say in the grey

217
00:08:45,480 --> 00:08:47,150
saying hey as a typist

218
00:08:47,150 --> 00:08:50,750
and as kind so the type we're familiar

219
00:08:50,750 --> 00:08:53,330
with the declarations this is what the

220
00:08:53,330 --> 00:08:54,980
children look like on a variable

221
00:08:54,980 --> 00:08:56,300
declaration there could be more than

222
00:08:56,300 --> 00:08:59,270
once there's just one here it also has a

223
00:08:59,270 --> 00:09:01,520
kind and the kind is kind of cool

224
00:09:01,520 --> 00:09:03,080
because it's describing whether it's a

225
00:09:03,080 --> 00:09:09,170
Const or a let which the VAR that looks

226
00:09:09,170 --> 00:09:12,140
pretty familiar let's dive deeper down

227
00:09:12,140 --> 00:09:14,120
the rabbit hole for a moment looking at

228
00:09:14,120 --> 00:09:16,580
the variable declared er this has two

229
00:09:16,580 --> 00:09:18,170
properties besides the type it has an ID

230
00:09:18,170 --> 00:09:19,760
and an it doesn't have any descriptive

231
00:09:19,760 --> 00:09:21,740
properties but it's got two places where

232
00:09:21,740 --> 00:09:24,140
children live it's good it has its

233
00:09:24,140 --> 00:09:26,779
identifier for a STS and then it

234
00:09:26,779 --> 00:09:28,640
initializes that to this string little

235
00:09:28,640 --> 00:09:32,990
for awesome so every node in the ast for

236
00:09:32,990 --> 00:09:35,900
JavaScript looks like this the node type

237
00:09:35,900 --> 00:09:36,860
might be a little bit different its

238
00:09:36,860 --> 00:09:38,180
children might live in a different place

239
00:09:38,180 --> 00:09:39,890
or it might not have children and I

240
00:09:39,890 --> 00:09:40,820
might have different descriptive

241
00:09:40,820 --> 00:09:43,010
properties but every node in JavaScript

242
00:09:43,010 --> 00:09:46,790
and the ast can be related to this

243
00:09:46,790 --> 00:09:49,940
example let's take it one step further

244
00:09:49,940 --> 00:09:52,610
so I was talking about automating code

245
00:09:52,610 --> 00:09:54,920
reviews before who here has seen code

246
00:09:54,920 --> 00:09:59,510
like this who has seen code like this on

247
00:09:59,510 --> 00:10:06,050
one line yeah that's a lot of hands yeah

248
00:10:06,050 --> 00:10:08,000
so tools like es line are great for this

249
00:10:08,000 --> 00:10:11,270
to look for patterns and language and

250
00:10:11,270 --> 00:10:14,540
help us help us warn us when we're doing

251
00:10:14,540 --> 00:10:17,959
things we probably shouldn't we're gonna

252
00:10:17,959 --> 00:10:20,510
write insolent role for this so I'm

253
00:10:20,510 --> 00:10:22,100
gonna go over to transform on ESP

254
00:10:22,100 --> 00:10:24,410
explorer and pull up the latest version

255
00:10:24,410 --> 00:10:27,560
of Uslan and let me explain this for a

256
00:10:27,560 --> 00:10:29,750
moment so every is lint roll is

257
00:10:29,750 --> 00:10:31,610
essentially a function this function

258
00:10:31,610 --> 00:10:35,180
returns an object this object is where

259
00:10:35,180 --> 00:10:37,430
you can say hey whenever there's a note

260
00:10:37,430 --> 00:10:39,860
of a given type I care about that and

261
00:10:39,860 --> 00:10:42,020
whenever you find it yes lint passed

262
00:10:42,020 --> 00:10:45,490
that into my function here so this

263
00:10:45,490 --> 00:10:48,230
example is looking for temple literals

264
00:10:48,230 --> 00:10:50,900
we don't have any what do we care about

265
00:10:50,900 --> 00:10:54,410
here let me go back to the Explorer if I

266
00:10:54,410 --> 00:10:57,500
click here cool so I see conditional

267
00:10:57,500 --> 00:10:59,089
expression a bunch of times

268
00:10:59,089 --> 00:11:00,620
pretty sure that's what turn Aries are

269
00:11:00,620 --> 00:11:02,540
called so that's the type so let's grab

270
00:11:02,540 --> 00:11:07,370
that and let's yell if anyone uses a

271
00:11:07,370 --> 00:11:12,079
ternary cool so over on this bottom

272
00:11:12,079 --> 00:11:14,120
right we see that it's hade you have a

273
00:11:14,120 --> 00:11:15,439
turn right here you have turnout here

274
00:11:15,439 --> 00:11:17,449
there's three turn Aries awesome

275
00:11:17,449 --> 00:11:19,579
cool I don't need Turner's that much I

276
00:11:19,579 --> 00:11:20,959
think they're great when they're

277
00:11:20,959 --> 00:11:22,579
appropriate and they're just a single

278
00:11:22,579 --> 00:11:25,059
one so let's narrow this down and

279
00:11:25,059 --> 00:11:27,170
everyone will do this they'll say hey I

280
00:11:27,170 --> 00:11:28,579
care about this note type but I'm gonna

281
00:11:28,579 --> 00:11:31,309
look for a pattern and so what do we

282
00:11:31,309 --> 00:11:34,730
need to look for so we talked about

283
00:11:34,730 --> 00:11:36,769
being nested and that's where the the

284
00:11:36,769 --> 00:11:39,139
node is the node of the same type is on

285
00:11:39,139 --> 00:11:42,230
the on the child and there's three

286
00:11:42,230 --> 00:11:43,459
things on this node there's the test

287
00:11:43,459 --> 00:11:46,249
this is the condition it executes and if

288
00:11:46,249 --> 00:11:48,290
that conditions truthy it returns the

289
00:11:48,290 --> 00:11:50,329
consequent if it's false it returns the

290
00:11:50,329 --> 00:11:52,279
alternate these consequence and these

291
00:11:52,279 --> 00:11:53,629
alternates these are the children we

292
00:11:53,629 --> 00:11:55,309
care about and these are the ones that

293
00:11:55,309 --> 00:11:58,699
have that nested type so oh lord what

294
00:11:58,699 --> 00:11:59,899
happened to the bottom there it is okay

295
00:11:59,899 --> 00:12:04,399
so let's grab that we need to write a

296
00:12:04,399 --> 00:12:07,100
check just a little bit logic here so we

297
00:12:07,100 --> 00:12:08,720
need to look at the node and look at its

298
00:12:08,720 --> 00:12:13,490
consequent and check its type and if it

299
00:12:13,490 --> 00:12:18,860
equals a conditional expression or if we

300
00:12:18,860 --> 00:12:22,429
copy this if that alternate is a

301
00:12:22,429 --> 00:12:27,680
conditional expression

302
00:12:27,690 --> 00:12:31,080
that's a little bit smaller Oh Lord

303
00:12:31,080 --> 00:12:35,390
don't don't no no don't leave five codes

304
00:12:35,390 --> 00:12:37,680
it's fine I'll just give a quick reload

305
00:12:37,680 --> 00:12:41,100
it is crashing hard cool we make this

306
00:12:41,100 --> 00:12:45,000
bigger again cool so I just have to fix

307
00:12:45,000 --> 00:12:51,030
a little bit of code here my cursor is

308
00:12:51,030 --> 00:12:54,900
like not where I think it is it's not

309
00:12:54,900 --> 00:12:58,560
prettier there it goes oh yeah this is

310
00:12:58,560 --> 00:13:00,570
not because of ASC xplornet this is cuz

311
00:13:00,570 --> 00:13:02,040
I hacked this like in the past week

312
00:13:02,040 --> 00:13:04,440
instead of working on my presentation at

313
00:13:04,440 --> 00:13:07,530
like the wrong hours of the day cool so

314
00:13:07,530 --> 00:13:09,720
so now we're looking for a conditional

315
00:13:09,720 --> 00:13:12,030
expression on either of the children and

316
00:13:12,030 --> 00:13:13,800
now it's only warning us about one thing

317
00:13:13,800 --> 00:13:15,660
and this is actually in fact the

318
00:13:15,660 --> 00:13:17,600
insolent rule for nested turn Aries

319
00:13:17,600 --> 00:13:21,510
let's look at one more example let's

320
00:13:21,510 --> 00:13:24,810
look at transforms so focus up here for

321
00:13:24,810 --> 00:13:29,040
a minute and we have two objects they're

322
00:13:29,040 --> 00:13:31,230
essentially the same when you have the

323
00:13:31,230 --> 00:13:33,660
key and the value is the the same thing

324
00:13:33,660 --> 00:13:35,700
in this case X they can be represented

325
00:13:35,700 --> 00:13:38,130
as X : X or in a shorthand version

326
00:13:38,130 --> 00:13:42,810
that's just X super convenient what I

327
00:13:42,810 --> 00:13:46,470
would like to do is try to implement the

328
00:13:46,470 --> 00:13:49,710
Babel transform that would make this

329
00:13:49,710 --> 00:13:51,630
first one with the shorthand output the

330
00:13:51,630 --> 00:13:53,700
same so we want to change this part in

331
00:13:53,700 --> 00:13:56,340
the bottom right if we look at a Babel

332
00:13:56,340 --> 00:13:59,010
transform the boilerplate is a little

333
00:13:59,010 --> 00:14:01,050
bit different there's a function that

334
00:14:01,050 --> 00:14:03,900
returns an object again but that object

335
00:14:03,900 --> 00:14:06,570
has a name and a visitor this visitor is

336
00:14:06,570 --> 00:14:08,280
actually the same as that object in the

337
00:14:08,280 --> 00:14:10,460
eslint so we're going to dive into that

338
00:14:10,460 --> 00:14:12,510
it cares about an identifier right now

339
00:14:12,510 --> 00:14:14,040
in the boilerplate it's reversing the

340
00:14:14,040 --> 00:14:16,500
the identifiers making them backwards

341
00:14:16,500 --> 00:14:20,880
that's funny so let's change that to be

342
00:14:20,880 --> 00:14:25,690
what do we need to be so if we look at X

343
00:14:25,700 --> 00:14:28,000
try this again

344
00:14:28,000 --> 00:14:30,610
well we got this and never seen this

345
00:14:30,610 --> 00:14:33,220
happen of course it's live so if I look

346
00:14:33,220 --> 00:14:35,259
at this we've got an object expression

347
00:14:35,259 --> 00:14:36,370
this is the object itself

348
00:14:36,370 --> 00:14:40,110
it's got properties okay the properties

349
00:14:40,110 --> 00:14:42,910
the object property has a short head

350
00:14:42,910 --> 00:14:45,129
value this is the descriptive property

351
00:14:45,129 --> 00:14:46,899
that we care about and it's false right

352
00:14:46,899 --> 00:14:49,540
now so what do we need to do we first

353
00:14:49,540 --> 00:14:53,600
need to care about object properties

354
00:14:53,610 --> 00:14:56,980
it's not prettier we first need to care

355
00:14:56,980 --> 00:14:59,139
about object properties and then when we

356
00:14:59,139 --> 00:15:01,870
run into them we need to do something

357
00:15:01,870 --> 00:15:05,350
with that node so that node has the

358
00:15:05,350 --> 00:15:08,259
shorthand value and we can just set it

359
00:15:08,259 --> 00:15:13,269
to be false so is it was true before on

360
00:15:13,269 --> 00:15:14,740
the other one and now we're changing it

361
00:15:14,740 --> 00:15:17,769
to false now the output matches there's

362
00:15:17,769 --> 00:15:19,269
one more thing we don't want to do this

363
00:15:19,269 --> 00:15:23,250
for my lord we don't want to do this for

364
00:15:23,250 --> 00:15:25,750
for every node so what we normally do is

365
00:15:25,750 --> 00:15:28,540
to student if check and check the path

366
00:15:28,540 --> 00:15:30,250
no touch for him if it's true thee only

367
00:15:30,250 --> 00:15:36,639
then mutate the tree cool all right so

368
00:15:36,639 --> 00:15:38,649
that is actually the all there is to the

369
00:15:38,649 --> 00:15:40,540
object property or the object shorthand

370
00:15:40,540 --> 00:15:42,610
property transform in Babel and this is

371
00:15:42,610 --> 00:15:44,920
a plug-in in the insolent not the

372
00:15:44,920 --> 00:15:46,899
insolent the babble plug in the source

373
00:15:46,899 --> 00:15:51,009
code stop here for a moment because this

374
00:15:51,009 --> 00:15:53,439
concept of transforming the tree and

375
00:15:53,439 --> 00:15:55,329
outputting something else also applies

376
00:15:55,329 --> 00:15:57,610
to another tool called code mods with

377
00:15:57,610 --> 00:16:01,029
code mods are is taking in some syntax

378
00:16:01,029 --> 00:16:02,980
and changing it to some updated syntax

379
00:16:02,980 --> 00:16:05,589
so we talked about new a new features in

380
00:16:05,589 --> 00:16:07,269
JavaScript and we talked about API

381
00:16:07,269 --> 00:16:08,829
changes and changing libraries and

382
00:16:08,829 --> 00:16:11,589
frameworks we could do transforms like

383
00:16:11,589 --> 00:16:13,899
this to take old syntax that we want to

384
00:16:13,899 --> 00:16:16,209
update and automate the conversion

385
00:16:16,209 --> 00:16:21,049
across our code base to the newer syntax

386
00:16:21,059 --> 00:16:23,519
there's one more thing I'll point you to

387
00:16:23,519 --> 00:16:26,079
this is website that just put up

388
00:16:26,079 --> 00:16:29,410
yesterday called a STS are awesome comm

389
00:16:29,410 --> 00:16:32,410
and it has full background of everything

390
00:16:32,410 --> 00:16:34,660
we've been talking about with links to

391
00:16:34,660 --> 00:16:37,240
examples super setting the compilers in

392
00:16:37,240 --> 00:16:39,670
there and some other things so check it

393
00:16:39,670 --> 00:16:40,760
out after this

394
00:16:40,760 --> 00:16:46,140
for more information cool

395
00:16:46,150 --> 00:16:48,890
so I know we all heard neo say and the

396
00:16:48,890 --> 00:16:50,660
matrix I know kung fu

397
00:16:50,660 --> 00:16:53,180
but if Neil is a programmer and the

398
00:16:53,180 --> 00:16:55,280
matrix is essentially made of code and

399
00:16:55,280 --> 00:16:57,830
he's bending the matrix to as well what

400
00:16:57,830 --> 00:16:59,270
I think he really meant to say is I know

401
00:16:59,270 --> 00:17:04,610
some really sick ast transforms try it

402
00:17:04,610 --> 00:17:07,550
pull up ast xplornet and start typing

403
00:17:07,550 --> 00:17:10,459
code paste stuff from from your project

404
00:17:10,459 --> 00:17:12,220
and see what it looks like

405
00:17:12,220 --> 00:17:14,420
and the next time you're in code review

406
00:17:14,420 --> 00:17:16,970
and you see something like oh I need to

407
00:17:16,970 --> 00:17:18,380
tell you about this thing that you

408
00:17:18,380 --> 00:17:21,230
couldn't otherwise know about think

409
00:17:21,230 --> 00:17:23,510
about whether that was that can be

410
00:17:23,510 --> 00:17:26,089
discerned filtered down into a pattern

411
00:17:26,089 --> 00:17:28,280
that you can automate that you can write

412
00:17:28,280 --> 00:17:31,760
in the estimate rule for here's actually

413
00:17:31,760 --> 00:17:33,920
the first es lint rule I wrote was for

414
00:17:33,920 --> 00:17:36,610
this code we had this API request

415
00:17:36,610 --> 00:17:39,710
function that would get data from the

416
00:17:39,710 --> 00:17:43,730
server and it had a way of saying how

417
00:17:43,730 --> 00:17:45,890
many records it wanted to retrieve you

418
00:17:45,890 --> 00:17:47,960
know maybe like 50 or 100 something

419
00:17:47,960 --> 00:17:50,510
reasonable but we had cases in our code

420
00:17:50,510 --> 00:17:52,970
base that looked passed in the count of

421
00:17:52,970 --> 00:17:56,600
infinity which would get all the records

422
00:17:56,600 --> 00:17:59,750
and that sounds okay right

423
00:17:59,750 --> 00:18:01,910
except users with lots of data you know

424
00:18:01,910 --> 00:18:03,680
our big customers that love us so much

425
00:18:03,680 --> 00:18:07,670
they would make this request on in the

426
00:18:07,670 --> 00:18:09,620
browser and it would take forever and

427
00:18:09,620 --> 00:18:11,300
after three seconds in a timeout and

428
00:18:11,300 --> 00:18:13,190
they would just get a really bad screen

429
00:18:13,190 --> 00:18:15,290
that didn't help them at all

430
00:18:15,290 --> 00:18:17,930
so we we need to fix this but we had

431
00:18:17,930 --> 00:18:20,000
something like sixty plus developers in

432
00:18:20,000 --> 00:18:22,010
the front end code across all the teams

433
00:18:22,010 --> 00:18:24,680
and this was like a it's kept popping up

434
00:18:24,680 --> 00:18:26,570
here and there and we could tell

435
00:18:26,570 --> 00:18:28,760
everyone but like how do you just like

436
00:18:28,760 --> 00:18:30,230
tell everyone and then tell the new

437
00:18:30,230 --> 00:18:32,450
person all that so we automated this so

438
00:18:32,450 --> 00:18:33,920
we wrote an excellent rule that looked

439
00:18:33,920 --> 00:18:36,020
for any invocations the API dot request

440
00:18:36,020 --> 00:18:38,660
and looked at the parameters passed in

441
00:18:38,660 --> 00:18:40,730
and then looked at that that

442
00:18:40,730 --> 00:18:42,170
configuration object and looked at the

443
00:18:42,170 --> 00:18:43,820
count and made sure it was something

444
00:18:43,820 --> 00:18:45,500
reasonable and if it was something crazy

445
00:18:45,500 --> 00:18:48,230
like infinity we would warn them nicely

446
00:18:48,230 --> 00:18:50,970
before code review

447
00:18:50,970 --> 00:18:53,320
let's talk about API changes can we

448
00:18:53,320 --> 00:18:56,650
automate those we had been using

449
00:18:56,650 --> 00:18:58,750
glamorous in a project time on now and

450
00:18:58,750 --> 00:19:01,300
this is basically styled components CSS

451
00:19:01,300 --> 00:19:03,120
and Jas actually is great great lately

452
00:19:03,120 --> 00:19:05,590
and Kent C Dodds he we talked about him

453
00:19:05,590 --> 00:19:07,179
yesterday he worked on this and he was

454
00:19:07,179 --> 00:19:09,100
the first to say hey everyone

455
00:19:09,100 --> 00:19:11,620
glamorous this glamorous is great but

456
00:19:11,620 --> 00:19:13,360
emotions even better we should just

457
00:19:13,360 --> 00:19:16,420
deprecated and move to that so we have

458
00:19:16,420 --> 00:19:19,540
lots of CSS lots of components we've got

459
00:19:19,540 --> 00:19:21,090
to change everything in our code base

460
00:19:21,090 --> 00:19:24,580
and it looks something like this this is

461
00:19:24,580 --> 00:19:27,550
just glamorous takes in some some CSS

462
00:19:27,550 --> 00:19:30,610
and generates an element with that style

463
00:19:30,610 --> 00:19:33,010
applied we need to change the syntax

464
00:19:33,010 --> 00:19:36,690
from using glamorous to using styled and

465
00:19:36,690 --> 00:19:38,980
instead of taking an object and it

466
00:19:38,980 --> 00:19:40,420
needed to be passed a string literal

467
00:19:40,420 --> 00:19:41,800
which is great because then you just

468
00:19:41,800 --> 00:19:43,840
write real CSS and not like JavaScript

469
00:19:43,840 --> 00:19:46,240
to fly it turned out there was a

470
00:19:46,240 --> 00:19:50,050
community effort to transform all the

471
00:19:50,050 --> 00:19:52,000
instances of glamorous to emotion we

472
00:19:52,000 --> 00:19:54,040
applied this in our code base and change

473
00:19:54,040 --> 00:19:57,130
hundreds of wines and just a click of a

474
00:19:57,130 --> 00:20:04,240
button and it was fantastic cool let me

475
00:20:04,240 --> 00:20:04,960
tell you one more story

476
00:20:04,960 --> 00:20:08,679
I was at a Jess coffe in Florida just

477
00:20:08,679 --> 00:20:10,450
conf u.s. 2015 and there was a young

478
00:20:10,450 --> 00:20:11,800
developer they got on stage and he was

479
00:20:11,800 --> 00:20:13,480
telling his story and we're something

480
00:20:13,480 --> 00:20:15,429
like this there was this new thing

481
00:20:15,429 --> 00:20:18,700
called es6 there was a large gap of my

482
00:20:18,700 --> 00:20:20,800
knowledge on parsers compilers and

483
00:20:20,800 --> 00:20:22,679
generally the intricacies of JavaScript

484
00:20:22,679 --> 00:20:25,330
so I decided to make an es6 transpiler

485
00:20:25,330 --> 00:20:29,200
to learn it called six-to-five this was

486
00:20:29,200 --> 00:20:31,929
Sebastian McKenzie and 65 is now known

487
00:20:31,929 --> 00:20:35,740
as Babel now I am not encouraging you

488
00:20:35,740 --> 00:20:37,720
all to go out write your own compiler we

489
00:20:37,720 --> 00:20:40,900
don't need to but given Babel given is

490
00:20:40,900 --> 00:20:43,480
lint given some libraries for code mods

491
00:20:43,480 --> 00:20:46,090
and given equivalents and typescript we

492
00:20:46,090 --> 00:20:48,550
don't have to we can build plug-ins for

493
00:20:48,550 --> 00:20:50,500
these tools we can write our own

494
00:20:50,500 --> 00:20:52,630
limiting plugins that look like what I

495
00:20:52,630 --> 00:20:55,150
showed you we can write transforms that

496
00:20:55,150 --> 00:20:59,169
can update our code we can harness the

497
00:20:59,169 --> 00:21:03,200
ast and I encourage everyone here this

498
00:21:03,200 --> 00:21:06,500
is something for you to try I'm here to

499
00:21:06,500 --> 00:21:08,149
answer questions on the internet or

500
00:21:08,149 --> 00:21:11,690
after this I encourage you all to build

501
00:21:11,690 --> 00:21:14,450
your own tools to help you and help

502
00:21:14,450 --> 00:21:16,490
everyone else the right JavaScript be

503
00:21:16,490 --> 00:21:19,549
more effective JavaScript developers my

504
00:21:19,549 --> 00:21:21,289
name is will Klein I'm on twitter at

