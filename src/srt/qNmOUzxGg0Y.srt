1
00:00:04,330 --> 00:00:09,820

sorry I don't mean to okay sorry about

2
00:00:09,820 --> 00:00:16,480
that um so yeah this is who I am and so

3
00:00:16,480 --> 00:00:18,279
we're going to be talking about security

4
00:00:18,279 --> 00:00:20,320
best practices today and they say that

5
00:00:20,320 --> 00:00:23,199
you know in defensive security you have

6
00:00:23,199 --> 00:00:24,400
to like prevent against a lot of

7
00:00:24,400 --> 00:00:26,320
security vulnerabilities and I find that

8
00:00:26,320 --> 00:00:28,560
the easiest way to really prevent

9
00:00:28,560 --> 00:00:31,240
against your you know security

10
00:00:31,240 --> 00:00:32,920
vulnerabilities on your application is

11
00:00:32,920 --> 00:00:34,300
to have a really good understanding of

12
00:00:34,300 --> 00:00:36,370
the offensive perspective so we're going

13
00:00:36,370 --> 00:00:37,570
to take a little bit of an offensive

14
00:00:37,570 --> 00:00:40,000
stance today as we go and go ahead and

15
00:00:40,000 --> 00:00:43,059
break the web so just a quick raise of

16
00:00:43,059 --> 00:00:45,070
hands how many of you guys are are

17
00:00:45,070 --> 00:00:47,559
hackers how many of you have worked with

18
00:00:47,559 --> 00:00:49,360
security either developing secure

19
00:00:49,360 --> 00:00:52,440
software or just loosely like using

20
00:00:52,440 --> 00:00:55,089
using some kind of security concept just

21
00:00:55,089 --> 00:00:58,390
raise your hand awesome and that's that

22
00:00:58,390 --> 00:00:59,589
that's good i'd like to see a lot of

23
00:00:59,589 --> 00:01:00,940
people doing that because i mean that

24
00:01:00,940 --> 00:01:03,040
we're developing secure content which is

25
00:01:03,040 --> 00:01:07,360
good for me as a user to know but yep so

26
00:01:07,360 --> 00:01:08,770
I'd like to take you on a story that was

27
00:01:08,770 --> 00:01:12,100
kind of the motivation for this this

28
00:01:12,100 --> 00:01:13,720
talk really and it starts with this

29
00:01:13,720 --> 00:01:14,980
vulnerability called cross-site

30
00:01:14,980 --> 00:01:17,560
scripting these cross-site scripting is

31
00:01:17,560 --> 00:01:20,320
a vulnerability that it's it's basically

32
00:01:20,320 --> 00:01:23,020
you know people make a very big deal out

33
00:01:23,020 --> 00:01:24,040
of it it's considered to be one of the

34
00:01:24,040 --> 00:01:25,360
most critical vulnerabilities and it's a

35
00:01:25,360 --> 00:01:28,890
very serious vulnerability as well and

36
00:01:28,890 --> 00:01:32,470
it it's a it's a vulnerability that

37
00:01:32,470 --> 00:01:34,090
attacks users you can think of it as a

38
00:01:34,090 --> 00:01:36,040
client side JavaScript eject injection

39
00:01:36,040 --> 00:01:38,440
attack so basically if somebody is a

40
00:01:38,440 --> 00:01:41,409
user I can inject my arbitrary script

41
00:01:41,409 --> 00:01:42,790
into their browser and have their

42
00:01:42,790 --> 00:01:44,200
browser run whatever I want it you're on

43
00:01:44,200 --> 00:01:47,229
if an application is vulnerable now I

44
00:01:47,229 --> 00:01:50,260
would not do anything malicious

45
00:01:50,260 --> 00:01:52,150
personally but I know that there are

46
00:01:52,150 --> 00:01:53,979
many people out there who if given that

47
00:01:53,979 --> 00:01:56,590
ability would use it for no good so we

48
00:01:56,590 --> 00:01:58,030
want to prevent our applications from

49
00:01:58,030 --> 00:02:01,180
these kind of attacks so how does it

50
00:02:01,180 --> 00:02:02,920
work well it starts with a really evil

51
00:02:02,920 --> 00:02:05,950
guy and this guy sends a malicious

52
00:02:05,950 --> 00:02:09,909
request to an innocent victim the victim

53
00:02:09,909 --> 00:02:12,190
will then click on the link or whatever

54
00:02:12,190 --> 00:02:13,480
it might be maybe it's stored in the

55
00:02:13,480 --> 00:02:14,050
payload

56
00:02:14,050 --> 00:02:16,660
hidden the DOM and the content has done

57
00:02:16,660 --> 00:02:18,550
served the user and the script executes

58
00:02:18,550 --> 00:02:20,350
and this is a typical scenario that we

59
00:02:20,350 --> 00:02:28,570
see for cross-site scripting so coming

60
00:02:28,570 --> 00:02:30,370
into the application security space I

61
00:02:30,370 --> 00:02:31,660
was very excited by these kind of

62
00:02:31,660 --> 00:02:33,310
vulnerabilities I would you know before

63
00:02:33,310 --> 00:02:35,080
I had any real formal training and

64
00:02:35,080 --> 00:02:36,700
application security i would i would

65
00:02:36,700 --> 00:02:38,680
read up about these vulnerabilities and

66
00:02:38,680 --> 00:02:41,170
feel very very elite and a hacker like

67
00:02:41,170 --> 00:02:43,390
because i was able to inject JavaScript

68
00:02:43,390 --> 00:02:46,600
into my friends pages and just be in the

69
00:02:46,600 --> 00:02:49,690
elite hacker so when I when I one of a a

70
00:02:49,690 --> 00:02:51,780
client assessment that I was working on

71
00:02:51,780 --> 00:02:55,840
I came into a very interesting scenario

72
00:02:55,840 --> 00:02:58,630
and you know it would be fun for me to

73
00:02:58,630 --> 00:03:00,610
tell you about it but it would be even

74
00:03:00,610 --> 00:03:02,200
more exciting for me to show you so I'd

75
00:03:02,200 --> 00:03:06,130
like to start hacking and quick shout

76
00:03:06,130 --> 00:03:08,590
out to my colleagues Ken Toller and

77
00:03:08,590 --> 00:03:12,270
jelly Bedoya for creating a open-source

78
00:03:12,270 --> 00:03:15,460
vulnerable node.js application so you

79
00:03:15,460 --> 00:03:18,370
guys can this github link is the is the

80
00:03:18,370 --> 00:03:20,770
repo and you guys can use this for your

81
00:03:20,770 --> 00:03:22,060
own hacking pleasure it's it's

82
00:03:22,060 --> 00:03:23,709
completely intentionally vulnerable so

83
00:03:23,709 --> 00:03:27,140
you can practice all your skills on it

84
00:03:27,150 --> 00:03:30,550
okay so i think i have this thing

85
00:03:30,550 --> 00:03:37,690
started on my localhost 3000 okay and

86
00:03:37,690 --> 00:03:39,280
this is the application and what i'm

87
00:03:39,280 --> 00:03:41,500
going to be doing is I'm going to be

88
00:03:41,500 --> 00:03:45,760
using a intercepting proxy called burp

89
00:03:45,760 --> 00:03:47,440
suite and what burp suite is is

90
00:03:47,440 --> 00:03:49,510
basically every time I submit a request

91
00:03:49,510 --> 00:03:51,820
to the server from the client rather

92
00:03:51,820 --> 00:03:54,190
than actually authenticating it's going

93
00:03:54,190 --> 00:03:56,800
to sorry rather than actually sending it

94
00:03:56,800 --> 00:03:57,940
directly to the server it's going to

95
00:03:57,940 --> 00:03:59,500
it's going to go through my proxy and

96
00:03:59,500 --> 00:04:00,850
then my proxy will send the request to

97
00:04:00,850 --> 00:04:11,470
the server so let me try logging in okay

98
00:04:11,470 --> 00:04:13,780
and there you see my password but this

99
00:04:13,780 --> 00:04:16,360
is the this is the login request to the

100
00:04:16,360 --> 00:04:18,160
server and so we can interest let the

101
00:04:18,160 --> 00:04:20,260
intercept go through and we're testing

102
00:04:20,260 --> 00:04:22,780
the application and it's basically like

103
00:04:22,780 --> 00:04:25,330
it's a fork of the wine cellar backbone

104
00:04:25,330 --> 00:04:29,080
tutorial app written in node but it's

105
00:04:29,080 --> 00:04:30,880
got some added features because it's

106
00:04:30,880 --> 00:04:33,250
vulnerable and you know we're just kind

107
00:04:33,250 --> 00:04:34,900
of when you're starting to test the

108
00:04:34,900 --> 00:04:36,700
application we're just kind of looking

109
00:04:36,700 --> 00:04:38,260
around to see get it getting a feel for

110
00:04:38,260 --> 00:04:40,420
things and we see like okay like we can

111
00:04:40,420 --> 00:04:43,300
edit these fields and so okay well why

112
00:04:43,300 --> 00:04:46,750
don't I do like just type something in

113
00:04:46,750 --> 00:04:48,580
for fun and see see what happens I'll

114
00:04:48,580 --> 00:04:53,310
turn my interceptor on and I'll save and

115
00:04:53,310 --> 00:04:55,540
my request comes through and it looks

116
00:04:55,540 --> 00:04:57,310
like it's a JSON request that's sitting

117
00:04:57,310 --> 00:05:01,060
up put to my server in back okay this is

118
00:05:01,060 --> 00:05:03,190
this is the expected behavior now let's

119
00:05:03,190 --> 00:05:06,300
try to do something malicious and

120
00:05:06,300 --> 00:05:08,590
JavaScript starts with a script i

121
00:05:08,590 --> 00:05:12,190
believe and we'll put a pop-up notifying

122
00:05:12,190 --> 00:05:17,840
our users that they have been hacked

123
00:05:17,850 --> 00:05:22,240
i'll hit save okay nothing looks like it

124
00:05:22,240 --> 00:05:25,860
really happened not super exciting oh

125
00:05:25,860 --> 00:05:31,210
look our pop-up just fired so this this

126
00:05:31,210 --> 00:05:33,490
is a clearly vulnerable to cross-site

127
00:05:33,490 --> 00:05:35,680
scripting now we've injected a malicious

128
00:05:35,680 --> 00:05:39,669
about malicious URL into or script into

129
00:05:39,669 --> 00:05:41,919
our page moreover every time we load

130
00:05:41,919 --> 00:05:45,430
this page again it's going to come back

131
00:05:45,430 --> 00:05:49,090
again this is a stored cross-site

132
00:05:49,090 --> 00:05:55,820
scripting attack and so I'm sitting here

133
00:05:55,830 --> 00:05:58,090
and I'm really excited now because I'm

134
00:05:58,090 --> 00:06:00,729
able to go to my client and tell them oh

135
00:06:00,729 --> 00:06:03,280
my gosh like we found stored cross-site

136
00:06:03,280 --> 00:06:04,930
scripting on your application this is a

137
00:06:04,930 --> 00:06:07,300
really serious deal this is I mean this

138
00:06:07,300 --> 00:06:09,130
is like their bug bounty programs that

139
00:06:09,130 --> 00:06:11,140
pay upwards of ten thousand dollars for

140
00:06:11,140 --> 00:06:12,669
finding you know flaws like this on

141
00:06:12,669 --> 00:06:15,430
their application so I am extremely

142
00:06:15,430 --> 00:06:17,229
excited and I tell my client this and

143
00:06:17,229 --> 00:06:18,880
I'm expecting them to be you know

144
00:06:18,880 --> 00:06:20,830
writing me a million-dollar check and

145
00:06:20,830 --> 00:06:21,449
getting

146
00:06:21,449 --> 00:06:24,419
no a public news article about how I

147
00:06:24,419 --> 00:06:26,550
saved their infrastructure and I'm just

148
00:06:26,550 --> 00:06:29,580
really excited about this unfortunately

149
00:06:29,580 --> 00:06:32,069
the customer is not really impressed and

150
00:06:32,069 --> 00:06:34,949
I'm wondering why is it that you know

151
00:06:34,949 --> 00:06:36,900
you might not be impressed by this

152
00:06:36,900 --> 00:06:38,819
vulnerability I mean this is a really

153
00:06:38,819 --> 00:06:40,469
critical vulnerability and I was able to

154
00:06:40,469 --> 00:06:43,529
easily demonstrate it so I'm like no

155
00:06:43,529 --> 00:06:44,639
this is actually a really serious

156
00:06:44,639 --> 00:06:46,080
problem you should you should take a

157
00:06:46,080 --> 00:06:49,379
look at it and they they're like no and

158
00:06:49,379 --> 00:06:51,449
there's two reasons why they don't care

159
00:06:51,449 --> 00:06:55,020
about it the first reason is that fur

160
00:06:55,020 --> 00:06:58,469
starters the the request that I've

161
00:06:58,469 --> 00:07:01,650
demonstrated happens in a you know in a

162
00:07:01,650 --> 00:07:04,499
put request and so there's a vulnerable

163
00:07:04,499 --> 00:07:07,439
parameter in the put request and the

164
00:07:07,439 --> 00:07:10,430
only way for me to actually attack the

165
00:07:10,430 --> 00:07:13,020
application is if I were was able to

166
00:07:13,020 --> 00:07:15,389
intercept the put request and inject my

167
00:07:15,389 --> 00:07:16,710
malicious content and send it to the

168
00:07:16,710 --> 00:07:19,770
server right now this process is really

169
00:07:19,770 --> 00:07:21,120
difficult to do unless you're just

170
00:07:21,120 --> 00:07:23,370
attacking yourself this is the clients

171
00:07:23,370 --> 00:07:24,899
logic as well I mean there's there's no

172
00:07:24,899 --> 00:07:28,379
way that a user who we trust to use our

173
00:07:28,379 --> 00:07:30,749
server would would do this to themselves

174
00:07:30,749 --> 00:07:32,610
so I don't really think that this is a

175
00:07:32,610 --> 00:07:34,740
big deal I don't really see any huge

176
00:07:34,740 --> 00:07:36,629
need to fix from this so unless you can

177
00:07:36,629 --> 00:07:37,949
show us something else I think you

178
00:07:37,949 --> 00:07:41,039
should just try harder secondly the

179
00:07:41,039 --> 00:07:42,749
application is not even exposed to the

180
00:07:42,749 --> 00:07:45,300
public internet it's a private server so

181
00:07:45,300 --> 00:07:48,089
you know I can't even go to their

182
00:07:48,089 --> 00:07:49,770
application and test it i have to go

183
00:07:49,770 --> 00:07:51,539
through some kind of VPN that only they

184
00:07:51,539 --> 00:07:57,419
have access to so i'm a little dejected

185
00:07:57,419 --> 00:07:59,159
by this because i put a lot of effort

186
00:07:59,159 --> 00:08:02,009
into this vulnerability and it didn't

187
00:08:02,009 --> 00:08:04,229
really make much of an impact and in

188
00:08:04,229 --> 00:08:05,999
fact they're they're thinking about

189
00:08:05,999 --> 00:08:08,310
letting this vulnerability just go and

190
00:08:08,310 --> 00:08:09,930
slide without really demonstrating any

191
00:08:09,930 --> 00:08:13,499
real impact from it and so I feel a

192
00:08:13,499 --> 00:08:17,550
little dejected off by that but I sit

193
00:08:17,550 --> 00:08:19,439
back and I ask myself two very important

194
00:08:19,439 --> 00:08:22,469
questions one how do we exploit

195
00:08:22,469 --> 00:08:24,870
vulnerabilities that require victims to

196
00:08:24,870 --> 00:08:27,599
attack themselves so to speak secondly

197
00:08:27,599 --> 00:08:29,310
how do we attack web applications on a

198
00:08:29,310 --> 00:08:30,990
private network like that we can't even

199
00:08:30,990 --> 00:08:34,169
access I mean is application security

200
00:08:34,169 --> 00:08:35,080
limited to just

201
00:08:35,080 --> 00:08:37,840
public things so after doing a little

202
00:08:37,840 --> 00:08:40,260
bit of googling and research and study I

203
00:08:40,260 --> 00:08:43,690
came across this class of a text called

204
00:08:43,690 --> 00:08:47,020
to surf attacks on Caesar for tax are

205
00:08:47,020 --> 00:08:49,990
kind of the vulnerability that many

206
00:08:49,990 --> 00:08:52,150
people might not have heard about but

207
00:08:52,150 --> 00:08:54,190
can actually be used in very crucial

208
00:08:54,190 --> 00:08:56,140
situations to really deliver some very

209
00:08:56,140 --> 00:09:01,600
cool cool results so Caesar stands for

210
00:09:01,600 --> 00:09:04,780
cross-site request forgery so what this

211
00:09:04,780 --> 00:09:06,160
basically means is if we look at how

212
00:09:06,160 --> 00:09:08,020
this works is if we have you know our

213
00:09:08,020 --> 00:09:11,170
attacker mallory and our victim bob and

214
00:09:11,170 --> 00:09:12,550
let's say that bob is on the internal

215
00:09:12,550 --> 00:09:15,760
network or maybe has access to a server

216
00:09:15,760 --> 00:09:20,080
and we want to make bob do something to

217
00:09:20,080 --> 00:09:23,920
attack himself essentially or send off a

218
00:09:23,920 --> 00:09:26,110
request as though we were Bob what we

219
00:09:26,110 --> 00:09:28,260
could do is Mallory can set up a

220
00:09:28,260 --> 00:09:30,970
malicious URL from a third-party domain

221
00:09:30,970 --> 00:09:33,910
and because both people have access to

222
00:09:33,910 --> 00:09:36,250
the public Internet when Bob goes to

223
00:09:36,250 --> 00:09:38,830
this domain and interacts with it that

224
00:09:38,830 --> 00:09:41,410
page will then submit a state changing

225
00:09:41,410 --> 00:09:43,960
request to the third part to the

226
00:09:43,960 --> 00:09:45,610
original domain that we never had access

227
00:09:45,610 --> 00:09:47,920
to so this is the same kind of logic

228
00:09:47,920 --> 00:09:50,530
that we use if you go to facebook com or

229
00:09:50,530 --> 00:09:53,110
gmail com in one browser and then you

230
00:09:53,110 --> 00:09:55,600
open up another tab and then you you go

231
00:09:55,600 --> 00:09:57,220
to facebook com you don't have to keep

232
00:09:57,220 --> 00:09:58,840
real authentic eating because the

233
00:09:58,840 --> 00:10:00,430
cookies are stored in your browser and

234
00:10:00,430 --> 00:10:02,290
every time you send a request to that

235
00:10:02,290 --> 00:10:04,030
domain the cookies are sent with that

236
00:10:04,030 --> 00:10:05,860
request even if you're not necessarily

237
00:10:05,860 --> 00:10:09,880
your origin isn't that that domain and

238
00:10:09,880 --> 00:10:11,740
so we're basically leveraging this

239
00:10:11,740 --> 00:10:13,510
fundamental flaw that was you know the

240
00:10:13,510 --> 00:10:15,880
internet was developed with to attack

241
00:10:15,880 --> 00:10:19,630
users who we can't really access you

242
00:10:19,630 --> 00:10:23,800
know privately so let's let's see how

243
00:10:23,800 --> 00:10:33,550
this works okay well I have here on a

244
00:10:33,550 --> 00:10:44,910
public server a

245
00:10:44,920 --> 00:10:48,800
there we go so here is a public page you

246
00:10:48,800 --> 00:10:50,029
might have gotten a pop-up like this

247
00:10:50,029 --> 00:10:51,440
before when you were casually browsing

248
00:10:51,440 --> 00:10:57,670
the web and this is a just you know a

249
00:10:57,670 --> 00:10:59,899
third-party domain it's completely not

250
00:10:59,899 --> 00:11:02,810
associated with our med seller

251
00:11:02,810 --> 00:11:09,820
application but it is very convincing I

252
00:11:09,820 --> 00:11:13,600
would like to get 1 million dollars and

253
00:11:13,600 --> 00:11:15,949
it's on the internet so it can't be a

254
00:11:15,949 --> 00:11:20,149
lie so so I'll turn my interceptor on

255
00:11:20,149 --> 00:11:21,410
cuz I'm a little cautious I want to see

256
00:11:21,410 --> 00:11:22,730
what's actually happening behind the

257
00:11:22,730 --> 00:11:28,190
scenes I'll submit this request if you

258
00:11:28,190 --> 00:11:29,750
take a look here what's happening is

259
00:11:29,750 --> 00:11:31,910
we're sending a post request to register

260
00:11:31,910 --> 00:11:35,980
an admin user by the name of lolcatz

261
00:11:35,980 --> 00:11:40,579
until let's just see if this works and

262
00:11:40,579 --> 00:11:42,680
we're actually redirected to the Maine

263
00:11:42,680 --> 00:11:46,069
med seller page so let's try logging in

264
00:11:46,069 --> 00:11:54,800
with our new user LOLOL and of course

265
00:11:54,800 --> 00:11:57,380
we're hacked but now as you can see we

266
00:11:57,380 --> 00:11:59,449
are we're logged in as an administrative

267
00:11:59,449 --> 00:12:03,350
user because we've exploited the Caesar

268
00:12:03,350 --> 00:12:06,110
phoner ability on this application now

269
00:12:06,110 --> 00:12:08,600
one thing to note is that the way that

270
00:12:08,600 --> 00:12:10,060
this application works is that there are

271
00:12:10,060 --> 00:12:12,560
admin users and normal roles and so

272
00:12:12,560 --> 00:12:14,389
we've actually created an admin account

273
00:12:14,389 --> 00:12:16,040
which is why we're able to see all of

274
00:12:16,040 --> 00:12:18,740
the medicines even the prescription

275
00:12:18,740 --> 00:12:21,579
medicines in this case and so this is a

276
00:12:21,579 --> 00:12:24,829
you know we've just kind of exploited

277
00:12:24,829 --> 00:12:28,699
this vulnerability using a boner ability

278
00:12:28,699 --> 00:12:34,220
that we didn't think was possible before

279
00:12:34,220 --> 00:12:36,800
and so we're really happy and we go back

280
00:12:36,800 --> 00:12:38,779
to the clients and we tell them you know

281
00:12:38,779 --> 00:12:40,730
we've used to surf and now we are able

282
00:12:40,730 --> 00:12:43,430
to attack your application even if

283
00:12:43,430 --> 00:12:45,949
you're not publicly accessible so we're

284
00:12:45,949 --> 00:12:49,459
making progress they come back to us and

285
00:12:49,459 --> 00:12:51,699
they say you know that's cool but we use

286
00:12:51,699 --> 00:12:53,169
web services and everything is handled

287
00:12:53,169 --> 00:12:55,629
by a JSON request and so the whole logic

288
00:12:55,629 --> 00:12:57,220
behind your attack is that you're

289
00:12:57,220 --> 00:13:00,129
forging an HTML reform to be submitted

290
00:13:00,129 --> 00:13:03,850
to my server and because we can't forge

291
00:13:03,850 --> 00:13:06,790
an HTML form to send json requests this

292
00:13:06,790 --> 00:13:09,660
is really not an issue for us either so

293
00:13:09,660 --> 00:13:16,660
try harder and so it's a little bit of a

294
00:13:16,660 --> 00:13:18,459
setback now because even though we found

295
00:13:18,459 --> 00:13:20,529
we've made progress we're still not able

296
00:13:20,529 --> 00:13:23,889
to you know completely convince them

297
00:13:23,889 --> 00:13:25,869
that we can chain exploits together and

298
00:13:25,869 --> 00:13:31,419
make danger happen but then we start

299
00:13:31,419 --> 00:13:33,129
thinking about things and the way that

300
00:13:33,129 --> 00:13:35,139
the JavaScript works and JavaScript

301
00:13:35,139 --> 00:13:39,609
servers handle requests and we realize

302
00:13:39,609 --> 00:13:42,069
that you know JSON posts are not

303
00:13:42,069 --> 00:13:44,339
completely safe if you think about how

304
00:13:44,339 --> 00:13:48,100
you know the server handles request

305
00:13:48,100 --> 00:13:49,929
server-side you'llyou'll most of you

306
00:13:49,929 --> 00:13:51,220
have probably written if you've written

307
00:13:51,220 --> 00:13:52,449
server-side code you've probably written

308
00:13:52,449 --> 00:13:54,579
a function similar to this we have fun

309
00:13:54,579 --> 00:13:55,929
can request response and then you're

310
00:13:55,929 --> 00:13:57,939
setting some body parameter from your

311
00:13:57,939 --> 00:14:02,709
post under request body and request body

312
00:14:02,709 --> 00:14:06,879
is actually a JSON so what what's

313
00:14:06,879 --> 00:14:11,399
interesting here is that well you know

314
00:14:11,399 --> 00:14:13,959
even though the application is expecting

315
00:14:13,959 --> 00:14:15,279
something that looks like this which

316
00:14:15,279 --> 00:14:17,739
with encoding type JSON if you don't

317
00:14:17,739 --> 00:14:22,419
specifically say that I'm only going to

318
00:14:22,419 --> 00:14:24,459
accept JSON objects and I'm not going to

319
00:14:24,459 --> 00:14:26,709
accept anything else if you send a

320
00:14:26,709 --> 00:14:28,539
request that looks like this of text

321
00:14:28,539 --> 00:14:33,309
type plane it'll still come as a request

322
00:14:33,309 --> 00:14:35,259
object and you know and the server side

323
00:14:35,259 --> 00:14:37,239
it handles it as a JSON so we can

324
00:14:37,239 --> 00:14:42,850
theoretically you know use use our

325
00:14:42,850 --> 00:14:45,339
exploit to you know forge an HTML

326
00:14:45,339 --> 00:14:47,470
request as though we're in HTML form and

327
00:14:47,470 --> 00:14:52,569
and exploit the server but this time

328
00:14:52,569 --> 00:14:53,769
let's have some fun because we've

329
00:14:53,769 --> 00:14:54,759
already discovered that there's a

330
00:14:54,759 --> 00:14:56,259
cross-site scripting vulnerability and

331
00:14:56,259 --> 00:14:57,999
that's really what we're after how to

332
00:14:57,999 --> 00:14:59,529
exploit that and I'll site scripting is

333
00:14:59,529 --> 00:15:01,929
a very serious problem and in order to

334
00:15:01,929 --> 00:15:03,819
help us facilitate the exploitation of

335
00:15:03,819 --> 00:15:04,499
cross

336
00:15:04,499 --> 00:15:06,629
scripting we have what's called browser

337
00:15:06,629 --> 00:15:08,849
exploitation framework which if you guys

338
00:15:08,849 --> 00:15:10,619
haven't heard of this before is really

339
00:15:10,619 --> 00:15:12,389
really cool it basically makes

340
00:15:12,389 --> 00:15:14,399
exploiting cross-site scripting almost

341
00:15:14,399 --> 00:15:16,799
like a point-and-click kind of thing and

342
00:15:16,799 --> 00:15:21,629
so we're going to use this now and we

343
00:15:21,629 --> 00:15:35,730
have here very conveniently we have

344
00:15:35,740 --> 00:15:38,820
okay so this is another seesaw request

345
00:15:38,820 --> 00:15:45,550
and this is a even more convincing

346
00:15:45,550 --> 00:15:47,770
argument in the last because we didn't

347
00:15:47,770 --> 00:15:49,720
win anything last time but telling us

348
00:15:49,720 --> 00:15:53,260
this time we will actually win let's

349
00:15:53,260 --> 00:15:54,790
take a look at what this is actually

350
00:15:54,790 --> 00:15:58,120
doing flips view the page source and if

351
00:15:58,120 --> 00:15:59,890
you can see over here we have you know

352
00:15:59,890 --> 00:16:03,030
we're constructing our form but inside

353
00:16:03,030 --> 00:16:06,370
the name parameter we actually have a

354
00:16:06,370 --> 00:16:08,520
cross-site scripting payload which is

355
00:16:08,520 --> 00:16:12,310
injecting this seemingly harmless script

356
00:16:12,310 --> 00:16:16,690
into our page so let's see what happens

357
00:16:16,690 --> 00:16:20,370
when we do that we are going to submit a

358
00:16:20,370 --> 00:16:23,520
JSON request now while our request by

359
00:16:23,520 --> 00:16:27,970
HTML form and we get a JSON response

360
00:16:27,970 --> 00:16:29,410
back because that's what happens when

361
00:16:29,410 --> 00:16:31,060
you send a JSON request and you know if

362
00:16:31,060 --> 00:16:32,530
I was just a user and had no idea what I

363
00:16:32,530 --> 00:16:34,000
clicked on I'm just really bummed that I

364
00:16:34,000 --> 00:16:35,500
didn't win a million bucks right now for

365
00:16:35,500 --> 00:16:38,170
the second time thought I'd learned the

366
00:16:38,170 --> 00:16:41,080
lesson the first time but if you look at

367
00:16:41,080 --> 00:16:46,780
our browsed meds we see this interesting

368
00:16:46,780 --> 00:16:53,020
guy here and this is a this is we've

369
00:16:53,020 --> 00:16:56,830
just created a new medicine and we see

370
00:16:56,830 --> 00:16:59,890
that this script is here and I mean

371
00:16:59,890 --> 00:17:02,170
there's no pop up there's no there's no

372
00:17:02,170 --> 00:17:03,700
real indication that we've been hacked

373
00:17:03,700 --> 00:17:05,260
if I didn't really look at this page I

374
00:17:05,260 --> 00:17:07,360
wouldn't know what's happening but as it

375
00:17:07,360 --> 00:17:11,830
turns out secretly enough I have a

376
00:17:11,830 --> 00:17:15,750
server here that is running Kali Linux

377
00:17:15,750 --> 00:17:19,180
which is an offensive security linux

378
00:17:19,180 --> 00:17:20,650
distribution and by the way if you ever

379
00:17:20,650 --> 00:17:22,420
walk into a coffee shop and you see

380
00:17:22,420 --> 00:17:24,520
somebody using kali linux disconnect

381
00:17:24,520 --> 00:17:26,290
from the internet and run away because

382
00:17:26,290 --> 00:17:28,780
there is no reason for somebody to use

383
00:17:28,780 --> 00:17:30,730
this unless they are professional

384
00:17:30,730 --> 00:17:33,580
penetration tester or like doing

385
00:17:33,580 --> 00:17:39,430
something that's not you know good so we

386
00:17:39,430 --> 00:17:41,770
will check out what's going on in the

387
00:17:41,770 --> 00:17:52,750
world of beef

388
00:17:52,760 --> 00:17:55,470
okay and now we see that our IP address

389
00:17:55,470 --> 00:17:57,419
is online and we actually have remote

390
00:17:57,419 --> 00:17:59,880
access our to our browser and we see all

391
00:17:59,880 --> 00:18:01,350
of our browser information here we see

392
00:18:01,350 --> 00:18:03,529
that it is a you know Mozilla Firefox

393
00:18:03,529 --> 00:18:06,570
little LA and so this stuff is pretty

394
00:18:06,570 --> 00:18:08,010
cool but what's really interesting is

395
00:18:08,010 --> 00:18:09,269
that we have some commands that we can

396
00:18:09,269 --> 00:18:20,159
kick off and let's see so there are some

397
00:18:20,159 --> 00:18:22,380
very interesting exploits here you can

398
00:18:22,380 --> 00:18:24,179
find the session cookie for the users

399
00:18:24,179 --> 00:18:26,070
you can install a keylogger you can do a

400
00:18:26,070 --> 00:18:28,409
lot of really cool stuff but you know I

401
00:18:28,409 --> 00:18:29,580
never really get a chance to demonstrate

402
00:18:29,580 --> 00:18:31,590
any of the more fun ones and because

403
00:18:31,590 --> 00:18:33,630
we're at JS conf we can kind of have

404
00:18:33,630 --> 00:18:35,850
some fun with this so let's try to play

405
00:18:35,850 --> 00:18:38,880
a sound so I can try to stream my

406
00:18:38,880 --> 00:18:42,570
content through another person's browser

407
00:18:42,570 --> 00:18:44,370
so I'm going to kick off this this audio

408
00:18:44,370 --> 00:18:49,649
file and if all works well let's put the

409
00:18:49,649 --> 00:19:00,430
button and we're just casually browsing

410
00:19:00,440 --> 00:19:06,600
so we've just demonstrated that I mean

411
00:19:06,600 --> 00:19:08,250
we're now doing this all remote as well

412
00:19:08,250 --> 00:19:10,620
so we're able to kick off our own audio

413
00:19:10,620 --> 00:19:12,450
stream on to the clients browser and

414
00:19:12,450 --> 00:19:13,769
this is just one of the many instances

415
00:19:13,769 --> 00:19:16,049
we can control their webcam we can

416
00:19:16,049 --> 00:19:19,200
control you know do a key key logger get

417
00:19:19,200 --> 00:19:21,389
their session we can do quite a bit with

418
00:19:21,389 --> 00:19:23,399
with cross-site scripting and caesar

419
00:19:23,399 --> 00:19:24,720
combined together it's a very dangerous

420
00:19:24,720 --> 00:19:27,769
combination

421
00:19:27,779 --> 00:19:33,220
so so how do we fix this because I mean

422
00:19:33,220 --> 00:19:35,499
if we're getting to a point where I can

423
00:19:35,499 --> 00:19:37,899
play my music on your computer they're

424
00:19:37,899 --> 00:19:39,669
using your web application during work

425
00:19:39,669 --> 00:19:41,769
hours I'm sure many companies wouldn't

426
00:19:41,769 --> 00:19:44,049
be very happy about that so we want to

427
00:19:44,049 --> 00:19:45,669
work on fixing this vulnerability so

428
00:19:45,669 --> 00:19:49,659
that we don't have to worry about you

429
00:19:49,659 --> 00:19:51,850
know these kind of attacks in the future

430
00:19:51,850 --> 00:19:53,799
and the way to do it is really what's

431
00:19:53,799 --> 00:19:55,450
called a sea surface oken which is a

432
00:19:55,450 --> 00:19:57,370
cryptographically secure synchronizer

433
00:19:57,370 --> 00:20:00,519
token pattern so what what this means is

434
00:20:00,519 --> 00:20:02,110
that when the browser sends a get

435
00:20:02,110 --> 00:20:04,389
request to the to the web server ideally

436
00:20:04,389 --> 00:20:05,950
you'd want to create some kind of token

437
00:20:05,950 --> 00:20:09,009
as either a cookie or a hidden field or

438
00:20:09,009 --> 00:20:10,720
a header or something that just

439
00:20:10,720 --> 00:20:12,399
basically authenticates the browser to

440
00:20:12,399 --> 00:20:13,690
the server and says hey this is the

441
00:20:13,690 --> 00:20:15,369
right browser this is the browser that's

442
00:20:15,369 --> 00:20:19,419
intending to make this request if if not

443
00:20:19,419 --> 00:20:20,919
then you want to completely disregard

444
00:20:20,919 --> 00:20:22,960
the request so when we submit post

445
00:20:22,960 --> 00:20:25,960
requests or stain changing operations we

446
00:20:25,960 --> 00:20:27,909
want to see that see surf token along

447
00:20:27,909 --> 00:20:30,990
with the request otherwise we would

448
00:20:30,990 --> 00:20:35,220
reject the request a secondary defense

449
00:20:35,220 --> 00:20:36,850
mitigation that you could potentially

450
00:20:36,850 --> 00:20:38,350
have and when we're talking about

451
00:20:38,350 --> 00:20:39,850
security vulnerability is there's really

452
00:20:39,850 --> 00:20:41,769
no silver bullet there's just a lot of

453
00:20:41,769 --> 00:20:43,389
barriers you could potentially bypass

454
00:20:43,389 --> 00:20:45,460
one so it's a good idea to have multiple

455
00:20:45,460 --> 00:20:48,700
defense mechanisms in place and so a

456
00:20:48,700 --> 00:20:50,860
secondary defense a quick band-aid if

457
00:20:50,860 --> 00:20:52,059
you discovered this in your application

458
00:20:52,059 --> 00:20:54,279
is by setting the origin header so if

459
00:20:54,279 --> 00:20:55,960
you do then you're pretty much ensuring

460
00:20:55,960 --> 00:20:58,210
that only if you validate for the origin

461
00:20:58,210 --> 00:20:59,889
header which basically says that you

462
00:20:59,889 --> 00:21:03,100
know only accept requests from the

463
00:21:03,100 --> 00:21:06,249
origin so you know then you don't have

464
00:21:06,249 --> 00:21:08,070
to worry about third-party attacks and

465
00:21:08,070 --> 00:21:10,629
finally we have CSP which is another

466
00:21:10,629 --> 00:21:12,669
potential secondary measure CST is a

467
00:21:12,669 --> 00:21:14,139
very big topic content security policy

468
00:21:14,139 --> 00:21:15,820
these are basically headers that you can

469
00:21:15,820 --> 00:21:17,649
set in your browser to prevent you know

470
00:21:17,649 --> 00:21:18,879
malicious scripts from being injected

471
00:21:18,879 --> 00:21:20,139
it's very good for cross-site scripting

472
00:21:20,139 --> 00:21:22,450
mitigation and you know other injection

473
00:21:22,450 --> 00:21:25,299
attacks it's a fairly complicated

474
00:21:25,299 --> 00:21:27,129
process which marathon talk on its own

475
00:21:27,129 --> 00:21:28,480
so if you want to learn more about this

476
00:21:28,480 --> 00:21:30,789
please do either tweet at me or hit me

477
00:21:30,789 --> 00:21:36,269
up at lunch or anytime you see me and

478
00:21:36,269 --> 00:21:38,440
before we leave I want to make three

479
00:21:38,440 --> 00:21:40,240
points regarding Caesar

480
00:21:40,240 --> 00:21:42,850
one is that random is not the same thing

481
00:21:42,850 --> 00:21:44,980
as cryptographically secure and so

482
00:21:44,980 --> 00:21:46,870
cryptographically secure mean i mean

483
00:21:46,870 --> 00:21:48,130
when you talk about computers there's

484
00:21:48,130 --> 00:21:49,929
really no such thing as real randomness

485
00:21:49,929 --> 00:21:52,690
everything a pseudo-random and so if you

486
00:21:52,690 --> 00:21:55,270
have you know master andum is generating

487
00:21:55,270 --> 00:21:57,370
32 numbers which you then uses your sis

488
00:21:57,370 --> 00:21:59,559
your token that might seem very

489
00:21:59,559 --> 00:22:01,600
uncrackable but the problem is is that

490
00:22:01,600 --> 00:22:05,470
when you're dealing with very large or

491
00:22:05,470 --> 00:22:08,230
very large computational devices they

492
00:22:08,230 --> 00:22:10,240
can use you know the NSA would have the

493
00:22:10,240 --> 00:22:11,559
computational power to crack that

494
00:22:11,559 --> 00:22:13,150
because it's not cryptographically

495
00:22:13,150 --> 00:22:15,340
secure there's a pattern behind it so as

496
00:22:15,340 --> 00:22:17,200
much as possible if you have to develop

497
00:22:17,200 --> 00:22:20,020
your own custom Susur which I don't

498
00:22:20,020 --> 00:22:21,820
recommend but if you have to use

499
00:22:21,820 --> 00:22:24,540
whatever's cryptographically secure

500
00:22:24,540 --> 00:22:28,230
secondly implementation of a good C surf

501
00:22:28,230 --> 00:22:30,370
mitigation is really difficult because

502
00:22:30,370 --> 00:22:31,679
there's a lot of things to worry about

503
00:22:31,679 --> 00:22:33,730
method interchange is when you're able

504
00:22:33,730 --> 00:22:35,740
to submit post requests as get requests

505
00:22:35,740 --> 00:22:37,360
and if you're able to submit post

506
00:22:37,360 --> 00:22:38,800
requests get requests well guess what

507
00:22:38,800 --> 00:22:41,530
typically a lot of your state changing

508
00:22:41,530 --> 00:22:43,720
operations are just post but if you're

509
00:22:43,720 --> 00:22:45,610
doing it as yet then there's no real

510
00:22:45,610 --> 00:22:47,110
protection that some frameworks can

511
00:22:47,110 --> 00:22:48,340
offer against that attack so you can

512
00:22:48,340 --> 00:22:51,429
bypass your mitigation just almost by

513
00:22:51,429 --> 00:22:53,440
switching the verb you could also have

514
00:22:53,440 --> 00:22:57,160
see sort of token replays in where the

515
00:22:57,160 --> 00:23:01,059
token will you know if one token can be

516
00:23:01,059 --> 00:23:03,309
reused multiple times and so if you

517
00:23:03,309 --> 00:23:05,230
generate a large number of tokens and

518
00:23:05,230 --> 00:23:06,820
then just you know send them out you can

519
00:23:06,820 --> 00:23:08,530
potentially have you know the same token

520
00:23:08,530 --> 00:23:09,730
being used multiple times it's not a

521
00:23:09,730 --> 00:23:12,970
very robust approach to securing your

522
00:23:12,970 --> 00:23:15,670
application the token must be tied to

523
00:23:15,670 --> 00:23:17,890
the user session on the server so if you

524
00:23:17,890 --> 00:23:19,809
could imagine like if Facebook allowed

525
00:23:19,809 --> 00:23:22,390
for you know you need to find my C surf

526
00:23:22,390 --> 00:23:24,370
token and then construct a CSF request

527
00:23:24,370 --> 00:23:27,429
for your account I could post statuses

528
00:23:27,429 --> 00:23:29,050
on your behalf by forging a request

529
00:23:29,050 --> 00:23:30,790
because I could just use my token so

530
00:23:30,790 --> 00:23:31,540
that wouldn't be a very effective

531
00:23:31,540 --> 00:23:33,850
measure so we want to make sure that the

532
00:23:33,850 --> 00:23:35,650
token must be tied to the user session

533
00:23:35,650 --> 00:23:37,690
you know so only you can use your token

534
00:23:37,690 --> 00:23:40,929
and if you are using CS or tokens

535
00:23:40,929 --> 00:23:44,950
exposed in your get parameter as a get

536
00:23:44,950 --> 00:23:46,210
parameter then the problem that you run

537
00:23:46,210 --> 00:23:50,280
into is that you could potentially have

538
00:23:50,280 --> 00:23:53,620
you know logs or some other network

539
00:23:53,620 --> 00:23:55,720
traffic's see the SI sirve token in the

540
00:23:55,720 --> 00:23:57,760
network traffic itself and intercept it

541
00:23:57,760 --> 00:24:01,240
that way and so even though it's you

542
00:24:01,240 --> 00:24:03,970
know still something you could it's just

543
00:24:03,970 --> 00:24:05,980
kind of a decoration on top of what the

544
00:24:05,980 --> 00:24:08,190
what the attacker really has to do to

545
00:24:08,190 --> 00:24:10,540
exploit so implementation for this is

546
00:24:10,540 --> 00:24:15,010
quite difficult and finally the cross

547
00:24:15,010 --> 00:24:17,440
origin recut resource sharing so this

548
00:24:17,440 --> 00:24:18,520
header is something that's very

549
00:24:18,520 --> 00:24:19,960
interesting I see this very frequently

550
00:24:19,960 --> 00:24:21,309
with some of the applications that are

551
00:24:21,309 --> 00:24:23,950
very enterprise level so what you

552
00:24:23,950 --> 00:24:26,350
usually see is this header the access

553
00:24:26,350 --> 00:24:28,929
control allow origin this allows your

554
00:24:28,929 --> 00:24:30,400
application to be accessible by

555
00:24:30,400 --> 00:24:33,340
third-party resources and so what this

556
00:24:33,340 --> 00:24:34,720
means is you can essentially send xhr

557
00:24:34,720 --> 00:24:36,640
requests from a third-party domain to

558
00:24:36,640 --> 00:24:38,530
your application if you've set this

559
00:24:38,530 --> 00:24:41,470
header to allow for that now if you do a

560
00:24:41,470 --> 00:24:44,350
wild-card approach and you allow for you

561
00:24:44,350 --> 00:24:46,660
know any origin whatsoever the problem

562
00:24:46,660 --> 00:24:48,250
that you run into is that you could

563
00:24:48,250 --> 00:24:50,800
potentially have a situation where you

564
00:24:50,800 --> 00:24:53,530
have you know an attacker submitting an

565
00:24:53,530 --> 00:24:55,750
xhr request and forging a request from

566
00:24:55,750 --> 00:25:00,040
you know from the third-party browser or

567
00:25:00,040 --> 00:25:01,960
third-party application to your ear

568
00:25:01,960 --> 00:25:03,700
application but because you're allowed

569
00:25:03,700 --> 00:25:05,380
to use JavaScript in this case you can

570
00:25:05,380 --> 00:25:07,480
get a call back to so whereas

571
00:25:07,480 --> 00:25:10,929
traditional CSF is just for data our

572
00:25:10,929 --> 00:25:13,120
state changing operations if you enable

573
00:25:13,120 --> 00:25:14,679
cross-origin resource sharing you could

574
00:25:14,679 --> 00:25:16,000
potentially even get data exfiltration

575
00:25:16,000 --> 00:25:18,550
so you get requests become vulnerable at

576
00:25:18,550 --> 00:25:20,380
that point so make sure that like this

577
00:25:20,380 --> 00:25:23,920
this wildcard header it's not a good

578
00:25:23,920 --> 00:25:25,330
thing you should always try to make sure

579
00:25:25,330 --> 00:25:28,510
that you're able to allow only the

580
00:25:28,510 --> 00:25:29,950
domains that you need to access your

581
00:25:29,950 --> 00:25:32,980
application that you trust so here are

582
00:25:32,980 --> 00:25:35,800
some resources for different JavaScript

583
00:25:35,800 --> 00:25:38,500
based servers that you can use a

584
00:25:38,500 --> 00:25:39,910
middleware that you could just plug and

585
00:25:39,910 --> 00:25:41,050
chug into your application that makes

586
00:25:41,050 --> 00:25:45,130
this whole ceremony very very easy to

587
00:25:45,130 --> 00:25:48,070
fix you have like see surf khoa happy

588
00:25:48,070 --> 00:25:50,440
express you surf I use these all the

589
00:25:50,440 --> 00:25:53,970
time and you know javascript is very

590
00:25:53,970 --> 00:25:56,559
lucky in the sense that you can you know

591
00:25:56,559 --> 00:25:58,780
middleware is very easy so if you were

592
00:25:58,780 --> 00:26:00,070
doing this in other languages it might

593
00:26:00,070 --> 00:26:01,390
be more difficult and more of an

594
00:26:01,390 --> 00:26:03,340
architectural shift in your application

595
00:26:03,340 --> 00:26:05,460
but you can do this very simply

596
00:26:05,460 --> 00:26:07,770
and it has a very tremendous security

597
00:26:07,770 --> 00:26:11,190
impact if you do that so a major

598
00:26:11,190 --> 00:26:12,809
takeaways that I'd like to deliver here

599
00:26:12,809 --> 00:26:14,309
are that application security

600
00:26:14,309 --> 00:26:15,390
vulnerabilities can be used in

601
00:26:15,390 --> 00:26:17,789
combination so as we saw even though we

602
00:26:17,789 --> 00:26:19,440
had like a low severity cross-site

603
00:26:19,440 --> 00:26:21,270
scripting if we were able to combine

604
00:26:21,270 --> 00:26:22,860
that with a cross-site request forgery

605
00:26:22,860 --> 00:26:25,140
attack then those two vulnerability is

606
00:26:25,140 --> 00:26:27,210
combined could then deliver a very

607
00:26:27,210 --> 00:26:29,250
dangerous attack vector and so just

608
00:26:29,250 --> 00:26:30,750
because something might seem like it's

609
00:26:30,750 --> 00:26:32,340
not a very big threat I think the

610
00:26:32,340 --> 00:26:33,799
important thing to take away from

611
00:26:33,799 --> 00:26:36,480
application to application security is

612
00:26:36,480 --> 00:26:38,159
that the context really matters and so

613
00:26:38,159 --> 00:26:39,750
it really depends on what else is

614
00:26:39,750 --> 00:26:42,600
President the application no state

615
00:26:42,600 --> 00:26:43,830
changing operation should be get

616
00:26:43,830 --> 00:26:45,510
requests if you're doing state changing

617
00:26:45,510 --> 00:26:47,970
operations as get requests in your web

618
00:26:47,970 --> 00:26:49,799
application then you're kind of

619
00:26:49,799 --> 00:26:51,390
complicating the security of your

620
00:26:51,390 --> 00:26:53,070
application because you have to protect

621
00:26:53,070 --> 00:26:55,350
see surf on get requests which is never

622
00:26:55,350 --> 00:26:57,809
easy so as much as possible try to avoid

623
00:26:57,809 --> 00:27:00,510
this make sure that the csr token is

624
00:27:00,510 --> 00:27:02,789
cryptographically secure even if you're

625
00:27:02,789 --> 00:27:06,090
using a trusted like trusted middleware

626
00:27:06,090 --> 00:27:08,960
provider evil you know krypter krypter

627
00:27:08,960 --> 00:27:11,220
graffiti evolving and so what might be

628
00:27:11,220 --> 00:27:12,990
secure now might not be secure 10 years

629
00:27:12,990 --> 00:27:15,270
from now so if you're seeing a browser

630
00:27:15,270 --> 00:27:18,029
or a paper from 1999 telling you to use

631
00:27:18,029 --> 00:27:20,159
a certain algorithm you might want to

632
00:27:20,159 --> 00:27:22,039
double check that for today's standard

633
00:27:22,039 --> 00:27:24,840
and finally see search middleware saves

634
00:27:24,840 --> 00:27:28,070
lives so please do you know fixed

635
00:27:28,070 --> 00:27:30,659
implement as much as you can mitigations

636
00:27:30,659 --> 00:27:34,080
for this vulnerability so thank you so

637
00:27:34,080 --> 00:27:35,610
much if you have any questions you can

638
00:27:35,610 --> 00:27:38,399
always tweet at me or hit me up at any

639
00:27:38,399 --> 00:27:42,940
time outside thank

