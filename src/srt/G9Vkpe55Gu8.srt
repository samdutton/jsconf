1
00:00:00,180 --> 00:00:14,230

[Music]

2
00:00:14,240 --> 00:00:18,480
so my not process don't fire yes this

3
00:00:18,480 --> 00:00:20,070
talk is about what to do when your note

4
00:00:20,070 --> 00:00:22,730
application is it's not behaving okay

5
00:00:22,730 --> 00:00:25,619
I'm not talking about literally burning

6
00:00:25,619 --> 00:00:28,289
IOT devices no I've done that doing that

7
00:00:28,289 --> 00:00:32,070
I'm not doing that anymore stay so I

8
00:00:32,070 --> 00:00:34,170
don't know how many of you I mean how

9
00:00:34,170 --> 00:00:36,180
much I don't know how many times

10
00:00:36,180 --> 00:00:38,550
happened to all of you to be woken up by

11
00:00:38,550 --> 00:00:42,270
an alarm on Sunday morning because your

12
00:00:42,270 --> 00:00:43,770
application you spend so much time

13
00:00:43,770 --> 00:00:45,930
developing was not behaving correctly

14
00:00:45,930 --> 00:00:49,500
and user were disappointed so while it

15
00:00:49,500 --> 00:00:52,949
happened to me several times in fact so

16
00:00:52,949 --> 00:00:55,230
what you do well typically you login

17
00:00:55,230 --> 00:00:58,530
into your cloud servers cloud provider

18
00:00:58,530 --> 00:01:00,420
accounts whatever look at what's going

19
00:01:00,420 --> 00:01:02,940
on and you know you have a bunch number

20
00:01:02,940 --> 00:01:04,799
maximum number of servers in your auto

21
00:01:04,799 --> 00:01:06,360
scaling group which you should use all

22
00:01:06,360 --> 00:01:10,320
the time and applications still not

23
00:01:10,320 --> 00:01:13,260
behaving so you log in ESS H in the Box

24
00:01:13,260 --> 00:01:15,380
I don't know you tweak some stuff and

25
00:01:15,380 --> 00:01:17,970
after a while everything gets back to

26
00:01:17,970 --> 00:01:21,689
normal and you need a hotfix as as we

27
00:01:21,689 --> 00:01:25,979
call it now this type of performance

28
00:01:25,979 --> 00:01:28,560
problem are are very important to solve

29
00:01:28,560 --> 00:01:31,320
and to prevent so whenever you have you

30
00:01:31,320 --> 00:01:33,030
have a performance issue or a production

31
00:01:33,030 --> 00:01:35,250
issue you should really do run a

32
00:01:35,250 --> 00:01:38,939
post-mortem so after the morning on

33
00:01:38,939 --> 00:01:40,970
Monday morning you come back to work and

34
00:01:40,970 --> 00:01:45,810
you you check oh well what happened okay

35
00:01:45,810 --> 00:01:47,670
and this is the question you ask what

36
00:01:47,670 --> 00:01:50,520
happen but more importantly you should

37
00:01:50,520 --> 00:01:53,369
check you should ask yourself how to fix

38
00:01:53,369 --> 00:01:55,500
this so this is the road to fix things

39
00:01:55,500 --> 00:01:57,570
in production is first of all gather

40
00:01:57,570 --> 00:02:01,439
Diagnostics data and evidence so again

41
00:02:01,439 --> 00:02:03,479
if you have set up some some logging

42
00:02:03,479 --> 00:02:07,560
infrastructure some monitoring cloud

43
00:02:07,560 --> 00:02:09,300
watch one of those whatever you want to

44
00:02:09,300 --> 00:02:11,459
use a lot of services in there at the

45
00:02:11,459 --> 00:02:12,780
APM area

46
00:02:12,780 --> 00:02:15,000
and with this diagnostic you need to be

47
00:02:15,000 --> 00:02:18,290
able to reproduce the problem in a

48
00:02:18,290 --> 00:02:20,700
non-production live environment so you

49
00:02:20,700 --> 00:02:22,470
can really produce the problem yes and

50
00:02:22,470 --> 00:02:24,270
after you can reproduce it as it is

51
00:02:24,270 --> 00:02:26,370
still on a cloud environment and after

52
00:02:26,370 --> 00:02:28,440
you are able to do that then you can try

53
00:02:28,440 --> 00:02:30,090
and reproduce in the problem on you on

54
00:02:30,090 --> 00:02:31,470
your box now where pollution is the

55
00:02:31,470 --> 00:02:33,060
problem on your box is important because

56
00:02:33,060 --> 00:02:34,860
it means it's very easy then to work on

57
00:02:34,860 --> 00:02:38,310
this stuff on there and gather some more

58
00:02:38,310 --> 00:02:39,989
diagnostic and evidence the type of

59
00:02:39,989 --> 00:02:41,730
diagnostics and evidence you can gather

60
00:02:41,730 --> 00:02:44,250
from your box are way more detailed than

61
00:02:44,250 --> 00:02:46,260
what you can get on the cloud because

62
00:02:46,260 --> 00:02:47,880
you are not limited by the hover head of

63
00:02:47,880 --> 00:02:51,019
fire off of the tools you want to use so

64
00:02:51,019 --> 00:02:53,730
then you try to fix the problem several

65
00:02:53,730 --> 00:02:57,350
times several times several times and

66
00:02:57,350 --> 00:02:59,730
you if it's not fixed and you go back

67
00:02:59,730 --> 00:03:04,230
and you try again and more Diagnostics

68
00:03:04,230 --> 00:03:07,489
fix it whatever so how do we fix things

69
00:03:07,489 --> 00:03:10,739
the most important bit it's establishing

70
00:03:10,739 --> 00:03:12,750
a measurable goal and I will get back to

71
00:03:12,750 --> 00:03:16,860
this later on and then you measure so

72
00:03:16,860 --> 00:03:19,500
how you get good measurements and then

73
00:03:19,500 --> 00:03:20,790
we find what we call the bottleneck

74
00:03:20,790 --> 00:03:22,260
which is what is lowing down your

75
00:03:22,260 --> 00:03:24,209
application and then we fix the

76
00:03:24,209 --> 00:03:26,579
bottleneck we remove that bottleneck and

77
00:03:26,579 --> 00:03:28,440
ideally that will show another

78
00:03:28,440 --> 00:03:32,130
bottleneck and and so on and we measure

79
00:03:32,130 --> 00:03:35,310
again and if it's not fixed we go back

80
00:03:35,310 --> 00:03:39,570
and find a new bottleneck optimize

81
00:03:39,570 --> 00:03:42,390
measure all over again up until our

82
00:03:42,390 --> 00:03:44,760
measurable goal is solved now how do we

83
00:03:44,760 --> 00:03:46,739
establish a measurable goal well

84
00:03:46,739 --> 00:03:48,780
typically you can talk to your boss and

85
00:03:48,780 --> 00:03:50,870
get something like this from him

86
00:03:50,870 --> 00:03:54,060
whatever this means what's something

87
00:03:54,060 --> 00:03:55,829
that's valuable for your application

88
00:03:55,829 --> 00:03:57,750
okay how many concurrent user per

89
00:03:57,750 --> 00:03:59,130
servers you want to achieve you want to

90
00:03:59,130 --> 00:04:01,140
reach what's the maximum latency you

91
00:04:01,140 --> 00:04:04,230
need to have those are very important

92
00:04:04,230 --> 00:04:06,359
numbers whatever it is this is very

93
00:04:06,359 --> 00:04:09,480
generic things that you can pick take

94
00:04:09,480 --> 00:04:11,970
and use it okay but every application

95
00:04:11,970 --> 00:04:15,239
has its own business requirements when

96
00:04:15,239 --> 00:04:17,130
developing nodejs application you need

97
00:04:17,130 --> 00:04:18,539
to remember that latency and throughput

98
00:04:18,539 --> 00:04:22,109
are connected to each other and because

99
00:04:22,109 --> 00:04:25,320
node is single threaded however

100
00:04:25,320 --> 00:04:27,780
and this means that multiple ru action

101
00:04:27,780 --> 00:04:29,280
running parallel but one single

102
00:04:29,280 --> 00:04:33,090
JavaScript function it can execute and

103
00:04:33,090 --> 00:04:34,860
when multiple are you are in parallel

104
00:04:34,860 --> 00:04:36,210
like for example multiple database

105
00:04:36,210 --> 00:04:38,670
connections you know you have an

106
00:04:38,670 --> 00:04:41,520
increased concurrency and if the latency

107
00:04:41,520 --> 00:04:44,520
of those u action gets higher because

108
00:04:44,520 --> 00:04:46,110
you might have a database problem for

109
00:04:46,110 --> 00:04:48,870
example you having typically the

110
00:04:48,870 --> 00:04:51,300
concurrency increases but that when that

111
00:04:51,300 --> 00:04:55,560
happened memory usage spikes and when

112
00:04:55,560 --> 00:04:57,990
memory uses spikes this increased the

113
00:04:57,990 --> 00:05:00,630
garbage collection activity so when all

114
00:05:00,630 --> 00:05:03,450
of these are connected it means that the

115
00:05:03,450 --> 00:05:04,830
garbage collection activity impact your

116
00:05:04,830 --> 00:05:07,170
CPU cycles and the execution of your

117
00:05:07,170 --> 00:05:09,120
JavaScript functions so all of these

118
00:05:09,120 --> 00:05:11,880
things are all interconnected 2000 imita

119
00:05:11,880 --> 00:05:14,310
resources that your CPU has your your

120
00:05:14,310 --> 00:05:19,530
processes so in order to establish a

121
00:05:19,530 --> 00:05:21,750
good measure we can use this to call out

122
00:05:21,750 --> 00:05:24,870
to cannon is an HTTP load tester runs on

123
00:05:24,870 --> 00:05:26,580
Mac Windows Linux very trivial

124
00:05:26,580 --> 00:05:28,380
installation you don't have to compile

125
00:05:28,380 --> 00:05:30,090
anything it just comes out it you have

126
00:05:30,090 --> 00:05:31,920
it will compile something but we are

127
00:05:31,920 --> 00:05:33,690
getting rid of that Italy sooner rather

128
00:05:33,690 --> 00:05:36,480
than later how do you use it you start

129
00:05:36,480 --> 00:05:38,130
your node server then you start out ok

130
00:05:38,130 --> 00:05:39,600
now specifying the number of connections

131
00:05:39,600 --> 00:05:41,580
the duration some other parameters and

132
00:05:41,580 --> 00:05:43,710
it gets you some statistics including

133
00:05:43,710 --> 00:05:46,920
the latency so how do we find the

134
00:05:46,920 --> 00:05:50,160
bottleneck well you need to gather some

135
00:05:50,160 --> 00:05:50,970
more Diagnostics

136
00:05:50,970 --> 00:05:52,710
now we have a Mac we have measure we

137
00:05:52,710 --> 00:05:55,320
know our standard goal we can compute a

138
00:05:55,320 --> 00:05:57,870
gap between the two and we need to

139
00:05:57,870 --> 00:06:00,060
gather some more some more Diagnostics

140
00:06:00,060 --> 00:06:01,980
we can use this new tool that we have

141
00:06:01,980 --> 00:06:03,870
just released called node clinic

142
00:06:03,870 --> 00:06:05,760
you can NPM install clinic if you want

143
00:06:05,760 --> 00:06:09,630
to and what you need this tool has two

144
00:06:09,630 --> 00:06:11,550
comments inside one is called dr. and

145
00:06:11,550 --> 00:06:12,840
one is called flame and then we show

146
00:06:12,840 --> 00:06:13,590
them in a moment

147
00:06:13,590 --> 00:06:16,140
the first one is doctor it's nice logo I

148
00:06:16,140 --> 00:06:17,400
don't know if you like it but I hope so

149
00:06:17,400 --> 00:06:21,450
a friendly doctor and you can literally

150
00:06:21,450 --> 00:06:22,320
type

151
00:06:22,320 --> 00:06:24,900
clinic doctor note server these stalls a

152
00:06:24,900 --> 00:06:27,030
bunch of things probes ensure your not

153
00:06:27,030 --> 00:06:29,820
server into your server and it can

154
00:06:29,820 --> 00:06:31,650
generate some some useful statistics out

155
00:06:31,650 --> 00:06:34,470
of it let's do that so here it is

156
00:06:34,470 --> 00:06:37,919
OOP this went up can use OPI hopefully

157
00:06:37,919 --> 00:06:39,150
you can see this okay

158
00:06:39,150 --> 00:06:44,010
so what you do you do clinic doctor - -

159
00:06:44,010 --> 00:06:47,490
no demons is my demo code so as you see

160
00:06:47,490 --> 00:06:51,720
is spinning up the it's using its using

161
00:06:51,720 --> 00:06:54,389
trace events to gather together some

162
00:06:54,389 --> 00:06:56,100
most advanced statistics this is still

163
00:06:56,100 --> 00:06:58,949
an experimental feature in no date so we

164
00:06:58,949 --> 00:07:01,620
run the stuff and after turn with

165
00:07:01,620 --> 00:07:02,940
control C on the server

166
00:07:02,940 --> 00:07:05,820
and you generate this type of diagram so

167
00:07:05,820 --> 00:07:07,199
in this diagram it can tell you some

168
00:07:07,199 --> 00:07:09,300
some very nice things for example you

169
00:07:09,300 --> 00:07:10,710
can tell you that we have detected the

170
00:07:10,710 --> 00:07:13,020
potential event loop issue and how we

171
00:07:13,020 --> 00:07:14,580
can do that well you can see here that

172
00:07:14,580 --> 00:07:17,699
you can that this process the event loop

173
00:07:17,699 --> 00:07:20,460
delay it keeps growing okay up to almost

174
00:07:20,460 --> 00:07:21,090
three seconds

175
00:07:21,090 --> 00:07:22,949
well it's buggy okay it's a demo of some

176
00:07:22,949 --> 00:07:25,710
code you should never write and we can

177
00:07:25,710 --> 00:07:28,410
also track a memory usage but the very

178
00:07:28,410 --> 00:07:30,300
nice thing about this tool it's it has a

179
00:07:30,300 --> 00:07:32,100
recommendation panel which it tells you

180
00:07:32,100 --> 00:07:33,300
what to do when you have this type of

181
00:07:33,300 --> 00:07:36,180
issues so in this thing you can press

182
00:07:36,180 --> 00:07:38,729
ample implement HTTP 503 event loop

183
00:07:38,729 --> 00:07:40,919
protection it's a very important thing

184
00:07:40,919 --> 00:07:42,300
you should have in your application but

185
00:07:42,300 --> 00:07:43,590
you can also recommend you to use a tool

186
00:07:43,590 --> 00:07:46,169
called clinic flame to discover the CPU

187
00:07:46,169 --> 00:07:48,900
intensive functions and there's a lot of

188
00:07:48,900 --> 00:07:50,550
explanation of all of this so stuff to

189
00:07:50,550 --> 00:07:52,740
follow we also have brought other

190
00:07:52,740 --> 00:07:55,260
undetected issues so you can also read

191
00:07:55,260 --> 00:07:57,180
the guide for example on how to solve

192
00:07:57,180 --> 00:07:59,039
your problems or garbage collection

193
00:07:59,039 --> 00:08:00,930
problems which are not memory leaks are

194
00:08:00,930 --> 00:08:02,160
more problems where the garbage

195
00:08:02,160 --> 00:08:03,599
collection is interacting with your

196
00:08:03,599 --> 00:08:08,630
application in and not so nice way so

197
00:08:08,630 --> 00:08:11,460
this is it this was my fault back then

198
00:08:11,460 --> 00:08:13,050
the other tool is called clinic flame

199
00:08:13,050 --> 00:08:15,150
and this is based on another thing

200
00:08:15,150 --> 00:08:16,380
called zero acts it's using it

201
00:08:16,380 --> 00:08:17,880
internally that we've developed before

202
00:08:17,880 --> 00:08:21,150
and how to use it again similar pattern

203
00:08:21,150 --> 00:08:24,389
clinic flame - - note server so what we

204
00:08:24,389 --> 00:08:28,199
do is we run it this way clinic flame -

205
00:08:28,199 --> 00:08:32,729
- no demo and this requires your root

206
00:08:32,729 --> 00:08:34,380
password because it needs to use some

207
00:08:34,380 --> 00:08:37,140
low level

208
00:08:37,140 --> 00:08:39,589
Institute to use some low level

209
00:08:39,589 --> 00:08:43,229
diagnostic tools called D traced on mac

210
00:08:43,229 --> 00:08:46,950
and prof on linux okay now we have run

211
00:08:46,950 --> 00:08:50,040
this then we eat ctrl C and all of these

212
00:08:50,040 --> 00:08:52,080
crunching stuff of course takes

213
00:08:52,080 --> 00:08:54,240
time all of these arguments are very

214
00:08:54,240 --> 00:08:57,000
complicated now let me zoom in because

215
00:08:57,000 --> 00:08:59,580
of course what you can see it generates

216
00:08:59,580 --> 00:09:01,770
this type of diagram where this a very

217
00:09:01,770 --> 00:09:04,560
odd function called sleep now I hope all

218
00:09:04,560 --> 00:09:06,390
of you guess what the type of code that

219
00:09:06,390 --> 00:09:08,490
I have written for this demo which is

220
00:09:08,490 --> 00:09:11,130
very simple which is this thing it has a

221
00:09:11,130 --> 00:09:13,650
slip function that just actively wait

222
00:09:13,650 --> 00:09:16,020
for something to happen very trivial

223
00:09:16,020 --> 00:09:17,490
okay you should never write this type of

224
00:09:17,490 --> 00:09:19,700
simple function in your code base okay

225
00:09:19,700 --> 00:09:22,770
but you can detect some very complicated

226
00:09:22,770 --> 00:09:27,420
code in there as well for example so I

227
00:09:27,420 --> 00:09:29,280
want to go through I want to just say

228
00:09:29,280 --> 00:09:33,980
that tomorrow and then I am I'm doing a

229
00:09:33,980 --> 00:09:37,770
performance worship with my colleague

230
00:09:37,770 --> 00:09:42,840
Josh and in which we will get lost in

231
00:09:42,840 --> 00:09:46,290
the rabbit hole of performance so in

232
00:09:46,290 --> 00:09:49,710
this in this workshop we will go through

233
00:09:49,710 --> 00:09:51,150
how to diagnose a performance problem

234
00:09:51,150 --> 00:09:53,990
using clinic but also using other things

235
00:09:53,990 --> 00:09:55,980
for example how to use the node

236
00:09:55,980 --> 00:09:59,370
inspector and other stuff like that we

237
00:09:59,370 --> 00:10:01,410
will also use frame graphs to know where

238
00:10:01,410 --> 00:10:03,300
is the problem okay as I showed there

239
00:10:03,300 --> 00:10:06,750
that was very simple and trivial but the

240
00:10:06,750 --> 00:10:08,640
probe what we will see what we'll see

241
00:10:08,640 --> 00:10:09,060
tomorrow

242
00:10:09,060 --> 00:10:10,770
it's way more complicated and way more

243
00:10:10,770 --> 00:10:15,660
deep and then we will dig deep into v8

244
00:10:15,660 --> 00:10:19,650
flags to understand what is happening if

245
00:10:19,650 --> 00:10:22,710
you'd go into we have been talked with

246
00:10:22,710 --> 00:10:25,710
fluckey before that there is a thing

247
00:10:25,710 --> 00:10:28,800
called inlining okay and we will dig

248
00:10:28,800 --> 00:10:30,690
deep into the wall optimization cycle

249
00:10:30,690 --> 00:10:32,250
and the optimization and the

250
00:10:32,250 --> 00:10:35,060
optimization cycle art of v8 and

251
00:10:35,060 --> 00:10:39,300
turbofan and and we what we use to do

252
00:10:39,300 --> 00:10:42,630
this is as low is this low rest API so

253
00:10:42,630 --> 00:10:45,510
as low what we mean is I provide you a

254
00:10:45,510 --> 00:10:50,430
nice application and you can do that you

255
00:10:50,430 --> 00:10:52,740
should so this wall talk was about

256
00:10:52,740 --> 00:10:54,660
performance optimization but I want to

257
00:10:54,660 --> 00:10:57,840
spend 30 seconds saying that you don't

258
00:10:57,840 --> 00:11:01,200
need to over optimize your code so the

259
00:11:01,200 --> 00:11:03,180
important part about optimizing ojs

260
00:11:03,180 --> 00:11:06,290
applications is only about

261
00:11:06,290 --> 00:11:10,679
doing this when it's needed okay and and

262
00:11:10,679 --> 00:11:14,009
to meet your business goals so over

263
00:11:14,009 --> 00:11:15,809
optimizing the code is most most of the

264
00:11:15,809 --> 00:11:17,419
time not a good idea

265
00:11:17,419 --> 00:11:21,720
please remember this and do not do not

266
00:11:21,720 --> 00:11:25,019
fall in the trap okay I want to thank

267
00:11:25,019 --> 00:11:27,720
near front while building this tool it's

268
00:11:27,720 --> 00:11:29,369
open source so you can download it now

269
00:11:29,369 --> 00:11:31,379
this is a couple of block big blog post

270
00:11:31,379 --> 00:11:34,739
coming out in about this I would also

271
00:11:34,739 --> 00:11:36,480
want to thank the team that helped

272
00:11:36,480 --> 00:11:40,850
building this tool and Reyes joy corner

273
00:11:40,850 --> 00:11:44,579
matheus Allen and Camille this

274
00:11:44,579 --> 00:11:45,929
presentation is available a couple of

275
00:11:45,929 --> 00:11:48,029
places these and this it's you can take

276
00:11:48,029 --> 00:11:49,980
a picture if you want that's the best

277
00:11:49,980 --> 00:11:54,389
way to get this content and I am on time

278
00:11:54,389 --> 00:11:57,059
so even a little bit early but that's

279
00:11:57,059 --> 00:12:02,429
fine so this is me hi I am a police Jeep

280
00:12:02,429 --> 00:12:04,679
allocated at near four and I'm also a

281
00:12:04,679 --> 00:12:06,089
member of the technical steering

282
00:12:06,089 --> 00:12:09,119
committee of the of nodejs so I help

283
00:12:09,119 --> 00:12:13,559
maintain the nodes AES runtime so if you

284
00:12:13,559 --> 00:12:15,329
have any questions about not a yes come

285
00:12:15,329 --> 00:12:18,089
and ask me okay I also write a lot of

286
00:12:18,089 --> 00:12:23,730
code as you can see and thank you folks

