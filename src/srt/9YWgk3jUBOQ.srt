1
00:00:20,039 --> 00:00:22,470

I'm talking about preprocessor

2
00:00:22,470 --> 00:00:26,609
preprocessor a STS harder to say than I

3
00:00:26,609 --> 00:00:28,189
thought

4
00:00:28,189 --> 00:00:31,259
STS stands for abstract syntax tree I'll

5
00:00:31,259 --> 00:00:33,780
go into that more if you're you're not

6
00:00:33,780 --> 00:00:35,430
familiar with it but I just thought I'd

7
00:00:35,430 --> 00:00:38,699
get that other way up front I work at

8
00:00:38,699 --> 00:00:39,780
strike now

9
00:00:39,780 --> 00:00:43,649
so that's outdated I think I have one

10
00:00:43,649 --> 00:00:45,960
more bulleted list but my style is a

11
00:00:45,960 --> 00:00:48,720
little different and it's actually not

12
00:00:48,720 --> 00:00:49,469
different at all

13
00:00:49,469 --> 00:00:51,059
from the way I used to do presentations

14
00:00:51,059 --> 00:00:52,920
so it's completely useless information

15
00:00:52,920 --> 00:00:57,269
for you anyways abusing and hacking is

16
00:00:57,269 --> 00:00:59,400
is a term I'm using in this presentation

17
00:00:59,400 --> 00:01:02,250
to mean using something for a reason

18
00:01:02,250 --> 00:01:06,170
outside of its intended purpose oh

19
00:01:06,170 --> 00:01:09,840
that's their correct size how about this

20
00:01:09,840 --> 00:01:14,250
HTML slides for the win so this is I

21
00:01:14,250 --> 00:01:17,310
think some sass or s CSS specifically

22
00:01:17,310 --> 00:01:21,049
and it's kind of like a fairly

23
00:01:21,049 --> 00:01:23,820
declarative syntax so what is there to

24
00:01:23,820 --> 00:01:26,520
hack what is there to abuse with just

25
00:01:26,520 --> 00:01:29,010
some text that turns into CSS right so

26
00:01:29,010 --> 00:01:31,170
it's not necessarily an obvious place

27
00:01:31,170 --> 00:01:32,430
when you're talking code you can say

28
00:01:32,430 --> 00:01:34,710
like oh I can inject this here or inject

29
00:01:34,710 --> 00:01:36,870
that there but you're limited by syntax

30
00:01:36,870 --> 00:01:38,490
here and it's not necessarily even like

31
00:01:38,490 --> 00:01:40,580
I guess it is turing-complete

32
00:01:40,580 --> 00:01:42,510
especially with like checked and stuff

33
00:01:42,510 --> 00:01:45,540
any Ryan's got to talk about that so so

34
00:01:45,540 --> 00:01:47,040
the place that we're gonna try and

35
00:01:47,040 --> 00:01:49,500
inject ourselves is in the compilation

36
00:01:49,500 --> 00:01:53,670
step so how does this sass so it's just

37
00:01:53,670 --> 00:01:57,180
a smaller part of this same thing turn

38
00:01:57,180 --> 00:01:59,760
into actual CSS right so how do we take

39
00:01:59,760 --> 00:02:01,950
that variable pull it out and then put

40
00:02:01,950 --> 00:02:04,500
it in the right place to output actually

41
00:02:04,500 --> 00:02:09,780
decent CSS parsing and compiling so how

42
00:02:09,780 --> 00:02:11,760
does parsing work so let's narrow it

43
00:02:11,760 --> 00:02:13,739
down even further we just have a single

44
00:02:13,739 --> 00:02:17,370
variable declaration in sass and

45
00:02:17,370 --> 00:02:21,720
naturally sass is Ruby and I don't

46
00:02:21,720 --> 00:02:23,760
really program Ruby so most of my will

47
00:02:23,760 --> 00:02:26,599
be in JavaScript so sorry your Ruby fan

48
00:02:26,599 --> 00:02:30,689
so parsing I can I can talk about it on

49
00:02:30,689 --> 00:02:32,579
a high level here and that's just like

50
00:02:32,579 --> 00:02:33,280
no

51
00:02:33,280 --> 00:02:35,620
the syntax rules of the language and go

52
00:02:35,620 --> 00:02:38,110
through and assign what everything is

53
00:02:38,110 --> 00:02:40,569
this is a variable declaration or this

54
00:02:40,569 --> 00:02:43,390
is a even more specifically a string or

55
00:02:43,390 --> 00:02:46,540
a value or a semicolon right figure out

56
00:02:46,540 --> 00:02:49,540
all those different parts so inside this

57
00:02:49,540 --> 00:02:51,370
little little guy we have the the

58
00:02:51,370 --> 00:02:52,780
variable prefix we can look for the

59
00:02:52,780 --> 00:02:55,209
dollar sign and we know that hey this is

60
00:02:55,209 --> 00:02:57,069
about to be a variable we know it's

61
00:02:57,069 --> 00:02:58,630
gonna be a variable until we hit like

62
00:02:58,630 --> 00:03:00,970
white space or a semicolon and in this

63
00:03:00,970 --> 00:03:02,830
case we get the variable name it's blue

64
00:03:02,830 --> 00:03:04,900
and then we get a semicolon then we can

65
00:03:04,900 --> 00:03:07,180
have as much white space as we want and

66
00:03:07,180 --> 00:03:08,800
then we get some random string and

67
00:03:08,800 --> 00:03:11,500
that's gonna be the value most of the

68
00:03:11,500 --> 00:03:13,959
time CSS will let you put anything in

69
00:03:13,959 --> 00:03:16,300
there as long as it's not like the

70
00:03:16,300 --> 00:03:18,100
semicolon or another colon or something

71
00:03:18,100 --> 00:03:21,280
like that so any non invalid character

72
00:03:21,280 --> 00:03:23,200
there it's going to be the value so it

73
00:03:23,200 --> 00:03:24,610
might not actually be anything to the

74
00:03:24,610 --> 00:03:27,750
browser but it would be valid and then

75
00:03:27,750 --> 00:03:31,600
obviously the the rule delimiter so this

76
00:03:31,600 --> 00:03:34,060
is how this would parse down whenever

77
00:03:34,060 --> 00:03:38,140
sass was was pulling this in more

78
00:03:38,140 --> 00:03:40,150
specifically it does that

79
00:03:40,150 --> 00:03:41,860
programmatically so it's going to go

80
00:03:41,860 --> 00:03:44,350
through and check every possibility of

81
00:03:44,350 --> 00:03:47,019
each thing of each character that it

82
00:03:47,019 --> 00:03:49,480
gets to and so this is the the most

83
00:03:49,480 --> 00:03:51,400
simple parser that I could write on a

84
00:03:51,400 --> 00:03:55,540
single slide you have a result array and

85
00:03:55,540 --> 00:03:58,239
you just want to push each token on to

86
00:03:58,239 --> 00:04:01,630
the array so you say I hit a semicolon

87
00:04:01,630 --> 00:04:03,880
push the semicolon token which in this

88
00:04:03,880 --> 00:04:05,739
case is the string semicolon probably

89
00:04:05,739 --> 00:04:09,160
would not work out well but you go

90
00:04:09,160 --> 00:04:11,049
through and then you you end up with a

91
00:04:11,049 --> 00:04:13,030
list of each of the tokens so rather

92
00:04:13,030 --> 00:04:15,220
than having just random text strings you

93
00:04:15,220 --> 00:04:17,470
know like hey this is a variable this is

94
00:04:17,470 --> 00:04:19,959
a rule delimiter this is a value and

95
00:04:19,959 --> 00:04:24,550
this is a rule ending statement more

96
00:04:24,550 --> 00:04:26,169
realistically most people are going to

97
00:04:26,169 --> 00:04:29,860
write a parser expression generator a

98
00:04:29,860 --> 00:04:33,160
peg a parser expression generator is is

99
00:04:33,160 --> 00:04:34,660
what this is and you don't have to know

100
00:04:34,660 --> 00:04:35,919
anything about this I just wanted to

101
00:04:35,919 --> 00:04:39,100
make sure I was being realistic you kind

102
00:04:39,100 --> 00:04:40,870
of define that like hey a class is a dot

103
00:04:40,870 --> 00:04:43,150
followed by an identifier and then

104
00:04:43,150 --> 00:04:44,860
whenever I get this just give me this

105
00:04:44,860 --> 00:04:46,000
object back and then

106
00:04:46,000 --> 00:04:48,190
a computer will generate a parser for

107
00:04:48,190 --> 00:04:49,510
you so you don't have to write all those

108
00:04:49,510 --> 00:04:51,820
like reverse while loops and do a look

109
00:04:51,820 --> 00:04:53,050
ahead and all that stuff

110
00:04:53,050 --> 00:04:56,380
so if you are looking into writing your

111
00:04:56,380 --> 00:04:58,540
own parser I probably suggest starting

112
00:04:58,540 --> 00:05:00,550
at a parser expression generator so you

113
00:05:00,550 --> 00:05:04,480
just write the grammar and it generates

114
00:05:04,480 --> 00:05:08,260
the parser much more simple so when

115
00:05:08,260 --> 00:05:09,460
you're done you need to represent the

116
00:05:09,460 --> 00:05:11,830
code as data instead of pure text so now

117
00:05:11,830 --> 00:05:13,450
we have somewhere in between there we

118
00:05:13,450 --> 00:05:15,490
have like here what all of our symbols

119
00:05:15,490 --> 00:05:19,750
are we have tokens if you will so so

120
00:05:19,750 --> 00:05:22,090
this first becomes this so we have the

121
00:05:22,090 --> 00:05:23,740
the variable start which is that dollar

122
00:05:23,740 --> 00:05:26,130
sign we have a string which is blue

123
00:05:26,130 --> 00:05:28,450
that's technically like the variable

124
00:05:28,450 --> 00:05:30,130
name and then we have like the equals

125
00:05:30,130 --> 00:05:35,280
operator which in CSS is the colon the

126
00:05:35,280 --> 00:05:37,960
string is is the value that we have

127
00:05:37,960 --> 00:05:41,020
there and then we have a rule end a rule

128
00:05:41,020 --> 00:05:43,560
ender Enders game coming up soon a

129
00:05:43,560 --> 00:05:49,930
sponsor but we add structure so if you

130
00:05:49,930 --> 00:05:53,440
go back here you can see that it's it's

131
00:05:53,440 --> 00:05:55,479
a very small CSS file it actually would

132
00:05:55,479 --> 00:05:59,620
output nothing on on the other end but

133
00:05:59,620 --> 00:06:00,970
we have that and we turn it into this we

134
00:06:00,970 --> 00:06:03,790
say this is a single node and inside of

135
00:06:03,790 --> 00:06:06,520
it has two nodes inside of it and that

136
00:06:06,520 --> 00:06:10,300
is of our name and a value and so now we

137
00:06:10,300 --> 00:06:13,479
have this this idea of this is a single

138
00:06:13,479 --> 00:06:15,479
node and inside of our two smaller nodes

139
00:06:15,479 --> 00:06:18,400
and the way the entire CSS file is going

140
00:06:18,400 --> 00:06:20,710
to parse out is into these leaf nodes or

141
00:06:20,710 --> 00:06:21,940
write like this so you'll always have

142
00:06:21,940 --> 00:06:24,880
like a variable name or a CSS value or a

143
00:06:24,880 --> 00:06:28,180
CSS property and you can go deep into

144
00:06:28,180 --> 00:06:30,550
your your tree which we'll talk about in

145
00:06:30,550 --> 00:06:33,160
a second and everything reduces down

146
00:06:33,160 --> 00:06:36,070
into these very simple things they're

147
00:06:36,070 --> 00:06:39,400
just put all in a list together or in a

148
00:06:39,400 --> 00:06:41,229
tree together depending on how deep you

149
00:06:41,229 --> 00:06:44,620
go CSS is actually not very deep sass

150
00:06:44,620 --> 00:06:47,050
and compass and all that stuff they

151
00:06:47,050 --> 00:06:48,460
actually allow you to nest a lot further

152
00:06:48,460 --> 00:06:50,070
and so when you're parsing

153
00:06:50,070 --> 00:06:52,510
pre-processors you you actually do see

154
00:06:52,510 --> 00:06:54,729
like larger nesting and so you have a

155
00:06:54,729 --> 00:06:57,669
CSS syntax tree inside of a CSS syntax

156
00:06:57,669 --> 00:06:58,930
tree instead of a CSS

157
00:06:58,930 --> 00:07:05,039
in texture so this is more realistic for

158
00:07:05,039 --> 00:07:07,270
another very small but it actually would

159
00:07:07,270 --> 00:07:10,060
output something we say like our our

160
00:07:10,060 --> 00:07:14,050
outer object is a stylesheet and inside

161
00:07:14,050 --> 00:07:15,789
of it it has some declarations right so

162
00:07:15,789 --> 00:07:18,789
style sheets have declarations first

163
00:07:18,789 --> 00:07:21,940
thing we do is we do that we set blue

164
00:07:21,940 --> 00:07:24,160
before so I've omitted that section so

165
00:07:24,160 --> 00:07:27,810
this fits on mostly a slide pretty close

166
00:07:27,810 --> 00:07:30,880
and so we've set that variable and then

167
00:07:30,880 --> 00:07:32,680
we set the the left and right and so we

168
00:07:32,680 --> 00:07:34,780
know what the the name is and we know

169
00:07:34,780 --> 00:07:36,370
what the value is and then we have a

170
00:07:36,370 --> 00:07:38,080
declaration and we say the selector is

171
00:07:38,080 --> 00:07:41,889
here RP and dot stuff and so that would

172
00:07:41,889 --> 00:07:43,360
whenever you compile that that would be

173
00:07:43,360 --> 00:07:45,849
P comma dot stuff and then there would

174
00:07:45,849 --> 00:07:47,410
be the brackets and inside that are the

175
00:07:47,410 --> 00:07:49,509
rules and the rules you have a list of

176
00:07:49,509 --> 00:07:50,860
rules and so this is just going to be a

177
00:07:50,860 --> 00:07:54,340
list of rule nodes and so in this case

178
00:07:54,340 --> 00:07:59,320
it's color and value so this would just

179
00:07:59,320 --> 00:08:01,750
have a single value if we wanted more

180
00:08:01,750 --> 00:08:03,570
rules we could have you know background

181
00:08:03,570 --> 00:08:06,580
and then have have that whole set of

182
00:08:06,580 --> 00:08:07,930
rules for background and things like

183
00:08:07,930 --> 00:08:10,960
that visually this is what you might

184
00:08:10,960 --> 00:08:16,419
write in SAS or stylus or less I think

185
00:08:16,419 --> 00:08:18,760
the and syntax works in all of them

186
00:08:18,760 --> 00:08:21,250
maybe someone probably knows but in this

187
00:08:21,250 --> 00:08:23,409
case we're just saying we want to modify

188
00:08:23,409 --> 00:08:26,199
the hover pseudo-class of the outer

189
00:08:26,199 --> 00:08:28,870
class so this is not valid CSS at this

190
00:08:28,870 --> 00:08:31,389
point but it is valid SAS and we're just

191
00:08:31,389 --> 00:08:34,120
saying I want the original style of a

192
00:08:34,120 --> 00:08:36,750
but I just want to change the hover case

193
00:08:36,750 --> 00:08:40,270
for to be underlined in this case I'm

194
00:08:40,270 --> 00:08:41,589
trying to simplify so that would

195
00:08:41,589 --> 00:08:43,900
actually be kind of silly because you're

196
00:08:43,900 --> 00:08:46,180
not sharing anything in the long run but

197
00:08:46,180 --> 00:08:52,020
simple so this becomes this so this is

198
00:08:52,020 --> 00:08:55,540
our object at the bottom is a stylesheet

199
00:08:55,540 --> 00:08:57,310
we have a body node and we have an a

200
00:08:57,310 --> 00:08:59,079
node and inside of that we have rules

201
00:08:59,079 --> 00:09:01,329
the color is black one is text

202
00:09:01,329 --> 00:09:04,000
decoration and the hover is a new level

203
00:09:04,000 --> 00:09:06,820
more nested so if you go back here you

204
00:09:06,820 --> 00:09:08,620
can see even in the code the brackets

205
00:09:08,620 --> 00:09:12,329
kind of represent that nesting

206
00:09:12,329 --> 00:09:16,250
and that is an abstract syntax tree so

207
00:09:16,250 --> 00:09:19,829
it's not an ast is a kind of a scary

208
00:09:19,829 --> 00:09:22,079
word and everyone kind of blank stare at

209
00:09:22,079 --> 00:09:24,240
you unless they've worked with them

210
00:09:24,240 --> 00:09:29,069
before but it's actually an easily break

211
00:09:29,069 --> 00:09:31,490
down a bowl word that's totally also

212
00:09:31,490 --> 00:09:35,730
hard to break down word but abstract

213
00:09:35,730 --> 00:09:37,829
means that there's no rules you can make

214
00:09:37,829 --> 00:09:40,350
them however you want it really should

215
00:09:40,350 --> 00:09:42,660
just be like arbitrary syntax tree

216
00:09:42,660 --> 00:09:45,540
because it's it's just like whatever you

217
00:09:45,540 --> 00:09:47,880
want to do is cool as long as it's a

218
00:09:47,880 --> 00:09:51,060
tree syntax implies that it's about

219
00:09:51,060 --> 00:09:53,550
syntax so if you're parsing code then

220
00:09:53,550 --> 00:09:55,920
it's a syntax tree and tree just means

221
00:09:55,920 --> 00:09:58,500
that like there are objects with an

222
00:09:58,500 --> 00:10:00,899
object so it's like a very very vague

223
00:10:00,899 --> 00:10:03,029
term and it almost means nothing other

224
00:10:03,029 --> 00:10:05,009
than it represents some sort of

225
00:10:05,009 --> 00:10:08,250
structure for code but these are

226
00:10:08,250 --> 00:10:11,310
generated by every preprocessor or at

227
00:10:11,310 --> 00:10:14,339
least most so what can we do with this

228
00:10:14,339 --> 00:10:16,949
section so we no longer are reading text

229
00:10:16,949 --> 00:10:20,880
and we don't even have valid CSS yet so

230
00:10:20,880 --> 00:10:24,589
we have this object that represents our

231
00:10:24,589 --> 00:10:28,560
preprocessor data and data is really

232
00:10:28,560 --> 00:10:32,010
important there we can change the data

233
00:10:32,010 --> 00:10:34,560
we can read the data we can add to it we

234
00:10:34,560 --> 00:10:37,139
can do anything we want at that point as

235
00:10:37,139 --> 00:10:39,630
data it's it's much harder to regex in

236
00:10:39,630 --> 00:10:42,180
extra rules and regex

237
00:10:42,180 --> 00:10:45,029
out rules that you don't want than it is

238
00:10:45,029 --> 00:10:47,550
to just say like hey change the rule of

239
00:10:47,550 --> 00:10:50,459
the third node to this new thing or add

240
00:10:50,459 --> 00:10:53,610
another rule it's a declarative way in

241
00:10:53,610 --> 00:10:56,579
code to add things in rather than regex

242
00:10:56,579 --> 00:10:59,600
and and string position and stuff so

243
00:10:59,600 --> 00:11:02,790
there's a compilation phase after this

244
00:11:02,790 --> 00:11:07,130
so what we'll do first is reduce your

245
00:11:07,130 --> 00:11:11,730
preprocessor ast into a CSS ast so you

246
00:11:11,730 --> 00:11:14,730
have this ast this is the data you have

247
00:11:14,730 --> 00:11:17,250
two nodes here the first one is you're

248
00:11:17,250 --> 00:11:19,709
setting a variable blue to this blue

249
00:11:19,709 --> 00:11:22,290
color that we've been using and then we

250
00:11:22,290 --> 00:11:24,449
have a rule somewhere later that

251
00:11:24,449 --> 00:11:24,870
wouldn't

252
00:11:24,870 --> 00:11:26,220
actually be that well I guess you can

253
00:11:26,220 --> 00:11:28,260
set a variable inside of a declaration

254
00:11:28,260 --> 00:11:32,040
you have a rule and it sets the color to

255
00:11:32,040 --> 00:11:34,260
that variable named blue and so this is

256
00:11:34,260 --> 00:11:38,070
not this is not a valid CSS node because

257
00:11:38,070 --> 00:11:42,020
there are no variables and CSS yet and

258
00:11:42,020 --> 00:11:44,850
so we couldn't compile this into CSS but

259
00:11:44,850 --> 00:11:47,910
what the compiler does first is reduces

260
00:11:47,910 --> 00:11:51,390
the ast from the preprocessor into one

261
00:11:51,390 --> 00:11:53,490
that is valid in CSS so it would take

262
00:11:53,490 --> 00:11:57,300
this store that blue was the variable

263
00:11:57,300 --> 00:12:00,330
and then reduce it to just say hey this

264
00:12:00,330 --> 00:12:03,120
node is the color of that color and so

265
00:12:03,120 --> 00:12:05,190
you no longer have the invalid variable

266
00:12:05,190 --> 00:12:07,020
node and now you have a totally valid

267
00:12:07,020 --> 00:12:10,230
CSS node so you could compile that to :

268
00:12:10,230 --> 00:12:12,810
or color : that blue color and that

269
00:12:12,810 --> 00:12:15,080
would be totally valid so it does this

270
00:12:15,080 --> 00:12:21,510
recursively until you get back to a

271
00:12:21,510 --> 00:12:24,600
valid CSS ast and then you compile that

272
00:12:24,600 --> 00:12:28,440
to text so reduction goes from this to

273
00:12:28,440 --> 00:12:32,370
this and it goes leaves the trunk and I

274
00:12:32,370 --> 00:12:35,160
call that up the tree but that's kind of

275
00:12:35,160 --> 00:12:37,350
a weird leaves too trunk would be down

276
00:12:37,350 --> 00:12:39,390
the tree I don't really know I think

277
00:12:39,390 --> 00:12:40,830
there are people who disagree with me

278
00:12:40,830 --> 00:12:48,839
especially really angrily on Twitter so

279
00:12:48,839 --> 00:12:52,230
the recap of how that compilation step

280
00:12:52,230 --> 00:12:54,630
works is first it takes this block and

281
00:12:54,630 --> 00:12:56,940
it changes it into something like this

282
00:12:56,940 --> 00:12:58,620
and I know that's ugly you don't have to

283
00:12:58,620 --> 00:13:00,029
actually be able to read that this is a

284
00:13:00,029 --> 00:13:02,730
declaration it's got color in it and

285
00:13:02,730 --> 00:13:07,650
then there's declaration don't that's a

286
00:13:07,650 --> 00:13:10,620
special type of CSS node you know it's

287
00:13:10,620 --> 00:13:15,540
too advanced but so so you have

288
00:13:15,540 --> 00:13:17,670
essentially a declaration inside of a

289
00:13:17,670 --> 00:13:19,680
declaration here and that's invalid in

290
00:13:19,680 --> 00:13:22,050
CSS it's valid in sass and so what you

291
00:13:22,050 --> 00:13:24,630
do is you first reduce that to three

292
00:13:24,630 --> 00:13:27,570
separate declarations and you'll notice

293
00:13:27,570 --> 00:13:30,420
the a and a:hover are now mixed in the

294
00:13:30,420 --> 00:13:32,520
second declaration and a hover has its

295
00:13:32,520 --> 00:13:35,010
own third declaration with the extra two

296
00:13:35,010 --> 00:13:36,120
characters of whitespace

297
00:13:36,120 --> 00:13:39,129
that are bugging me

298
00:13:39,129 --> 00:13:42,259
so and then you convert that to text and

299
00:13:42,259 --> 00:13:44,689
since CSS knows how to take that ast and

300
00:13:44,689 --> 00:13:47,470
turn it into text that's a very simple

301
00:13:47,470 --> 00:13:50,929
compilation step and so this is what

302
00:13:50,929 --> 00:13:54,619
this text from before this was our

303
00:13:54,619 --> 00:13:56,720
original stuff we have the extra inside

304
00:13:56,720 --> 00:13:58,339
declaration and we do those few things

305
00:13:58,339 --> 00:14:00,290
and now we have two separate

306
00:14:00,290 --> 00:14:03,649
declarations that make sense in CSS so

307
00:14:03,649 --> 00:14:07,059
in words it takes one type of text

308
00:14:07,059 --> 00:14:09,649
converts it into a known but arbitrary

309
00:14:09,649 --> 00:14:12,619
data format then it converts that data

310
00:14:12,619 --> 00:14:15,410
into a different but arbitrary unknown

311
00:14:15,410 --> 00:14:17,809
data format and then it converts that

312
00:14:17,809 --> 00:14:20,350
back into text and that's the entire

313
00:14:20,350 --> 00:14:24,470
preprocessor world and nutshell and so

314
00:14:24,470 --> 00:14:25,730
all of you should be able to just write

315
00:14:25,730 --> 00:14:28,129
pre-processors now and that's the end of

316
00:14:28,129 --> 00:14:32,959
my talk so this is these are the faces

317
00:14:32,959 --> 00:14:34,759
you could probably break each one of

318
00:14:34,759 --> 00:14:36,259
these down into to a lot of smaller

319
00:14:36,259 --> 00:14:38,809
parts but really the only hard part is

320
00:14:38,809 --> 00:14:41,149
that the rest is kind of like solved

321
00:14:41,149 --> 00:14:42,589
computer science II stuff right it's

322
00:14:42,589 --> 00:14:43,939
easy to write parts for expression

323
00:14:43,939 --> 00:14:46,519
grammars and like compilers we've got a

324
00:14:46,519 --> 00:14:48,949
lot of them we can we can do better I'm

325
00:14:48,949 --> 00:14:51,199
sure but there are tools that you can

326
00:14:51,199 --> 00:14:53,269
kind of just use off-the-shelf to do

327
00:14:53,269 --> 00:14:56,449
text to data and data to text you have

328
00:14:56,449 --> 00:14:58,639
to kind of write the the bindings but

329
00:14:58,639 --> 00:15:00,489
that's about it so the only thing that

330
00:15:00,489 --> 00:15:04,309
like in sass or in stylus that that

331
00:15:04,309 --> 00:15:06,799
people are doing really is focusing on

332
00:15:06,799 --> 00:15:09,169
data ones data to what data can I take

333
00:15:09,169 --> 00:15:12,829
in to convert to this regular CSS data

334
00:15:12,829 --> 00:15:16,459
that we know about so the hacking part

335
00:15:16,459 --> 00:15:18,109
of this is is the fun part

336
00:15:18,109 --> 00:15:21,589
so what can we do data one is very

337
00:15:21,589 --> 00:15:23,509
interesting because you usually have the

338
00:15:23,509 --> 00:15:25,579
most amount of data usually reducing

339
00:15:25,579 --> 00:15:27,739
data into data to data to could be

340
00:15:27,739 --> 00:15:29,959
interesting as well if you need to know

341
00:15:29,959 --> 00:15:32,299
something about the CSS structure and

342
00:15:32,299 --> 00:15:34,009
I'll use it a little bit in in a demo

343
00:15:34,009 --> 00:15:37,399
but data one has the most amount the

344
00:15:37,399 --> 00:15:39,350
most dense information that you that you

345
00:15:39,350 --> 00:15:43,399
can have so just my my other bulleted

346
00:15:43,399 --> 00:15:45,980
list here is some things you can do with

347
00:15:45,980 --> 00:15:47,480
data one that I thought I'm off the top

348
00:15:47,480 --> 00:15:48,279
of my head that I won't necessarily

349
00:15:48,279 --> 00:15:50,629
actually show you how but you can go

350
00:15:50,629 --> 00:15:51,480
through those leaf

351
00:15:51,480 --> 00:15:53,549
and you say like oh I used that variable

352
00:15:53,549 --> 00:15:55,470
let me just count up all the times that

353
00:15:55,470 --> 00:15:57,600
that shows up you can say like it turns

354
00:15:57,600 --> 00:16:00,149
out I never use these ten variables that

355
00:16:00,149 --> 00:16:02,129
I declared at the top of my file and

356
00:16:02,129 --> 00:16:03,899
that can be interesting

357
00:16:03,899 --> 00:16:05,459
you can change variables in real time

358
00:16:05,459 --> 00:16:07,859
you say well I know I set this as this

359
00:16:07,859 --> 00:16:09,660
but I'm gonna go change half of them to

360
00:16:09,660 --> 00:16:13,319
a new value just by replacing the dot

361
00:16:13,319 --> 00:16:15,569
value of that node and then when it

362
00:16:15,569 --> 00:16:17,189
compiles it doesn't know that you

363
00:16:17,189 --> 00:16:19,499
changed something you can reduce

364
00:16:19,499 --> 00:16:22,009
duplicate code you can go look for

365
00:16:22,009 --> 00:16:25,139
duplicate selectors and and rules and

366
00:16:25,139 --> 00:16:27,089
say like well let's get rid of these you

367
00:16:27,089 --> 00:16:31,220
could write a linter I think Nicole

368
00:16:31,220 --> 00:16:35,939
wrote one of those and you can output

369
00:16:35,939 --> 00:16:37,829
statistics and do all sorts of fun stuff

370
00:16:37,829 --> 00:16:41,639
so I'll show you some some fun stuff so

371
00:16:41,639 --> 00:16:43,350
as long as data one is valid when you're

372
00:16:43,350 --> 00:16:44,879
done it doesn't matter what you did to

373
00:16:44,879 --> 00:16:46,980
it so you could completely replace it

374
00:16:46,980 --> 00:16:50,100
with a new ast and then compile it and

375
00:16:50,100 --> 00:16:52,559
would just compile to your new ast I'd

376
00:16:52,559 --> 00:16:55,139
probably be ill-advised so here's my

377
00:16:55,139 --> 00:17:01,049
first example the important eyes ast

378
00:17:01,049 --> 00:17:04,889
modifier so you take in data which is an

379
00:17:04,889 --> 00:17:07,980
ast and usually have a type on

380
00:17:07,980 --> 00:17:09,299
everything because that's how you know

381
00:17:09,299 --> 00:17:11,130
what to do with it so we check to see if

382
00:17:11,130 --> 00:17:13,319
it's a rule if it's a rule we change its

383
00:17:13,319 --> 00:17:18,000
value to have important at the end is

384
00:17:18,000 --> 00:17:21,600
that this is the Bango there is it on

385
00:17:21,600 --> 00:17:26,519
the other side oh it really is that man

386
00:17:26,519 --> 00:17:31,350
I'm I'm sick so I'll play that now it

387
00:17:31,350 --> 00:17:33,360
goes on that side right someone tell me

388
00:17:33,360 --> 00:17:35,399
no it doesn't all right man

389
00:17:35,399 --> 00:17:40,799
CSS not a fan

390
00:17:40,809 --> 00:17:46,190
anyways so you'll go through this rule

391
00:17:46,190 --> 00:17:48,380
and you'll say if this is a rule well

392
00:17:48,380 --> 00:17:50,240
which it is because we're going through

393
00:17:50,240 --> 00:17:52,429
this rule you'll add important to the

394
00:17:52,429 --> 00:17:53,840
value and then whenever it gets printed

395
00:17:53,840 --> 00:17:55,549
out that'll have important at the end so

396
00:17:55,549 --> 00:17:57,169
if it already had important you're kind

397
00:17:57,169 --> 00:17:58,940
of screwed we didn't check and then

398
00:17:58,940 --> 00:18:01,580
we'll say everything is recursive in a

399
00:18:01,580 --> 00:18:04,120
tree right so you'll say my children

400
00:18:04,120 --> 00:18:07,730
might be rules too if I'm not a rule and

401
00:18:07,730 --> 00:18:10,400
then so go through each node recursively

402
00:18:10,400 --> 00:18:12,320
down the tree and if it's a rule change

403
00:18:12,320 --> 00:18:14,210
the value to have important at the end

404
00:18:14,210 --> 00:18:17,780
of it and really in recursive functions

405
00:18:17,780 --> 00:18:19,100
you should like return it and stuff like

406
00:18:19,100 --> 00:18:20,929
that but in JavaScript we're passing on

407
00:18:20,929 --> 00:18:22,640
the same object and it'll just work

408
00:18:22,640 --> 00:18:26,990
sorry yes that's the whole one here's

409
00:18:26,990 --> 00:18:32,440
the opposite the undo in turn work AST

410
00:18:32,440 --> 00:18:34,580
so we're going to go straight into the

411
00:18:34,580 --> 00:18:37,940
children of the ASD and we're gonna see

412
00:18:37,940 --> 00:18:42,590
if the child is a rule and it matches on

413
00:18:42,590 --> 00:18:46,429
the string important at all then just

414
00:18:46,429 --> 00:18:49,730
return null and essentially delete that

415
00:18:49,730 --> 00:18:52,309
node so if if a rule has important in it

416
00:18:52,309 --> 00:18:55,880
no longer put it in the set of rules

417
00:18:55,880 --> 00:18:58,000
that we're gonna send to the compiler

418
00:18:58,000 --> 00:19:01,549
otherwise return the child and then do

419
00:19:01,549 --> 00:19:04,100
that recursively and then we'll take out

420
00:19:04,100 --> 00:19:06,590
all those null rules at the end with the

421
00:19:06,590 --> 00:19:10,520
compact which is a non-standard array

422
00:19:10,520 --> 00:19:12,860
function that I'm allowing you to trust

423
00:19:12,860 --> 00:19:17,090
me on and those rules if there were ten

424
00:19:17,090 --> 00:19:19,520
rules before and six of them had

425
00:19:19,520 --> 00:19:21,320
important in them now you have four

426
00:19:21,320 --> 00:19:22,669
rules and when they get compiled just

427
00:19:22,669 --> 00:19:25,159
the four rules come out so you have both

428
00:19:25,159 --> 00:19:29,150
ways to turn on globally importance or

429
00:19:29,150 --> 00:19:30,919
to remove any rule with an important you

430
00:19:30,919 --> 00:19:33,440
could also just remove the important tag

431
00:19:33,440 --> 00:19:35,419
which would probably may be reasonable

432
00:19:35,419 --> 00:19:38,840
but just write them don't write them to

433
00:19:38,840 --> 00:19:41,299
begin with so this is every preprocessor

434
00:19:41,299 --> 00:19:44,659
every preprocessor has this face this is

435
00:19:44,659 --> 00:19:46,429
not unique to stylist or SAS or anything

436
00:19:46,429 --> 00:19:51,950
that we're doing up here it is varying

437
00:19:51,950 --> 00:19:53,120
levels of difficult

438
00:19:53,120 --> 00:19:56,840
to actually get into this phase though

439
00:19:56,840 --> 00:19:59,600
in different preprocessors rework is a

440
00:19:59,600 --> 00:20:00,890
pretty new one

441
00:20:00,890 --> 00:20:07,270
by TJ Holloway J Chuck it's close enough

442
00:20:07,270 --> 00:20:10,790
Vision Media and he'd he brought stylus

443
00:20:10,790 --> 00:20:13,250
originally and rework was kind of like

444
00:20:13,250 --> 00:20:14,840
based on what he learned from that he

445
00:20:14,840 --> 00:20:17,800
wrote this and it is essentially just

446
00:20:17,800 --> 00:20:22,400
like exposing the ast layer as soon as I

447
00:20:22,400 --> 00:20:23,900
submitted this talk maybe like two days

448
00:20:23,900 --> 00:20:25,220
later he put this out and I was kind of

449
00:20:25,220 --> 00:20:27,470
bummed but it actually made the demo way

450
00:20:27,470 --> 00:20:31,370
easier so I was no longer bummed as a

451
00:20:31,370 --> 00:20:36,590
kerning nightmare or what so let's go a

452
00:20:36,590 --> 00:20:39,530
little more real-world so compilation of

453
00:20:39,530 --> 00:20:41,510
styles is pretty fast right like I can

454
00:20:41,510 --> 00:20:45,170
compile like that tan line CSS or sass

455
00:20:45,170 --> 00:20:47,600
file and like milliseconds right that's

456
00:20:47,600 --> 00:20:50,090
pretty cool but it's not fast if you

457
00:20:50,090 --> 00:20:52,490
want like a slider that changes a

458
00:20:52,490 --> 00:20:54,500
variable right you can never hook this

459
00:20:54,500 --> 00:20:56,930
on to an unchanged event and have things

460
00:20:56,930 --> 00:20:58,610
update on the page you get a send a

461
00:20:58,610 --> 00:21:00,410
request back to the server have it

462
00:21:00,410 --> 00:21:02,840
compile send the file back up re-inject

463
00:21:02,840 --> 00:21:04,640
recalculate styles that would never work

464
00:21:04,640 --> 00:21:06,230
you'd have to have it unlike a second

465
00:21:06,230 --> 00:21:10,220
you know max of minimum delay on the

466
00:21:10,220 --> 00:21:13,250
change events so if you're building a

467
00:21:13,250 --> 00:21:16,640
theme builder which say what you will

468
00:21:16,640 --> 00:21:17,960
about the real world goodness of that

469
00:21:17,960 --> 00:21:20,840
but I had to do it you want a color

470
00:21:20,840 --> 00:21:22,370
picker and you want a size slider for

471
00:21:22,370 --> 00:21:23,390
some of your variables you don't

472
00:21:23,390 --> 00:21:24,650
necessarily want to say like make this

473
00:21:24,650 --> 00:21:26,510
thing bigger you want to say like make

474
00:21:26,510 --> 00:21:29,150
my base color different right you wanted

475
00:21:29,150 --> 00:21:30,710
to change all the places you're using

476
00:21:30,710 --> 00:21:33,100
base color in your code and that's

477
00:21:33,100 --> 00:21:36,200
signified by variables in your CSS files

478
00:21:36,200 --> 00:21:38,510
and you want to do it in real time and

479
00:21:38,510 --> 00:21:40,100
the only way to do that is to avoid

480
00:21:40,100 --> 00:21:43,430
recompiling because a compile step is

481
00:21:43,430 --> 00:21:47,600
just going to take too long so we'll go

482
00:21:47,600 --> 00:21:52,520
to my demo so we have this fun page

483
00:21:52,520 --> 00:21:57,170
conventionally 75 it all right so we're

484
00:21:57,170 --> 00:21:59,240
running this this is a page with a

485
00:21:59,240 --> 00:22:01,910
little bit of CSS I can show you my

486
00:22:01,910 --> 00:22:06,789
example CSS file this is the my CSS

487
00:22:06,789 --> 00:22:10,480
if I literally adapt my CSS it is my own

488
00:22:10,480 --> 00:22:15,159
rework CSS preprocessor which has one

489
00:22:15,159 --> 00:22:16,720
feature which is variable so I've turned

490
00:22:16,720 --> 00:22:19,690
on variables so I'm using BG color for

491
00:22:19,690 --> 00:22:21,789
this background border-radius big border

492
00:22:21,789 --> 00:22:25,149
radius that type of stuff and then in my

493
00:22:25,149 --> 00:22:28,360
index.html file I have a header and a

494
00:22:28,360 --> 00:22:30,340
sub header and then I style that with

495
00:22:30,340 --> 00:22:33,179
with those things and then somewhere

496
00:22:33,179 --> 00:22:35,980
that isn't open I pass the data for what

497
00:22:35,980 --> 00:22:37,450
those variables should be and I won't

498
00:22:37,450 --> 00:22:40,179
try and open that right now so we have

499
00:22:40,179 --> 00:22:42,669
values for this and this comes out as

500
00:22:42,669 --> 00:22:44,499
CSS on the other end so now you can see

501
00:22:44,499 --> 00:22:47,350
the values so this is example that's the

502
00:22:47,350 --> 00:22:49,389
SS it comes out the other end

503
00:22:49,389 --> 00:22:51,429
precompiled actually pre-compile onload

504
00:22:51,429 --> 00:22:54,039
so each time it'll do that and you can

505
00:22:54,039 --> 00:22:56,019
see you have a background color here we

506
00:22:56,019 --> 00:22:58,990
have more background colors and so those

507
00:22:58,990 --> 00:23:01,330
are getting set what I also add it was

508
00:23:01,330 --> 00:23:04,179
an endpoint to add dot JSON to the end

509
00:23:04,179 --> 00:23:09,249
of every single CSS file what that'll do

510
00:23:09,249 --> 00:23:13,360
is it'll take the ast go find every

511
00:23:13,360 --> 00:23:16,929
variable and then reduce essentially

512
00:23:16,929 --> 00:23:18,970
flipped the file on its head so what we

513
00:23:18,970 --> 00:23:21,129
have here is data that says this is the

514
00:23:21,129 --> 00:23:23,049
BG color variable this is the app width

515
00:23:23,049 --> 00:23:24,909
variable this is the border color and in

516
00:23:24,909 --> 00:23:27,190
here we have a list of selectors that

517
00:23:27,190 --> 00:23:30,249
end up using this variable and then the

518
00:23:30,249 --> 00:23:32,590
rules that they use it on so we know

519
00:23:32,590 --> 00:23:34,539
that dot container contains a border

520
00:23:34,539 --> 00:23:36,759
radius where the value is big border

521
00:23:36,759 --> 00:23:39,309
radius and that seems cool like we now

522
00:23:39,309 --> 00:23:41,289
have a list of all our variables so that

523
00:23:41,289 --> 00:23:44,409
was pretty easy to get based on on just

524
00:23:44,409 --> 00:23:46,269
going through the nodes and saying is

525
00:23:46,269 --> 00:23:48,730
this a variable node and if it is add it

526
00:23:48,730 --> 00:23:50,619
to this list and then you kind of have

527
00:23:50,619 --> 00:23:52,779
to do some hacky stuff in order to get

528
00:23:52,779 --> 00:23:54,249
the selectors back out

529
00:23:54,249 --> 00:23:57,279
depending on your preprocessor but we

530
00:23:57,279 --> 00:23:59,980
can pull in that data here and it got

531
00:23:59,980 --> 00:24:02,559
way bigger we can pull in that data here

532
00:24:02,559 --> 00:24:04,899
and we have this thing I've injected on

533
00:24:04,899 --> 00:24:06,730
the top and I have all the code for this

534
00:24:06,730 --> 00:24:08,289
for you that I'm not going to walk

535
00:24:08,289 --> 00:24:12,179
through because that's a fun demo but

536
00:24:12,179 --> 00:24:14,259
essentially what we're doing here is we

537
00:24:14,259 --> 00:24:16,210
go through those variables we list them

538
00:24:16,210 --> 00:24:18,429
out here and then based on with they say

539
00:24:18,429 --> 00:24:19,900
width or color I'll give

540
00:24:19,900 --> 00:24:21,940
the correct picker forum and also tell

541
00:24:21,940 --> 00:24:23,740
you how many times they they were used

542
00:24:23,740 --> 00:24:27,010
and so bgcolor is used twice and we know

543
00:24:27,010 --> 00:24:28,840
the selector and we know the rule so

544
00:24:28,840 --> 00:24:30,340
I'll use the selector real fast to show

545
00:24:30,340 --> 00:24:34,330
you the three pages on the three places

546
00:24:34,330 --> 00:24:37,230
on the page that bgcolor actually gets

547
00:24:37,230 --> 00:24:39,910
used or at least which elements so this

548
00:24:39,910 --> 00:24:42,310
is being used on the HTML element the

549
00:24:42,310 --> 00:24:44,260
body element which I guess starts at the

550
00:24:44,260 --> 00:24:46,750
top of this thing since I have a margin

551
00:24:46,750 --> 00:24:50,380
on it and then also bgcolor is used as

552
00:24:50,380 --> 00:24:53,890
the text color for leaf them alone which

553
00:24:53,890 --> 00:24:56,290
is more hilarious than you guys gave it

554
00:24:56,290 --> 00:24:57,840
credit for

555
00:24:57,840 --> 00:25:01,720
and so we're using a single variable it

556
00:25:01,720 --> 00:25:03,580
shows up in two selectors and it's on

557
00:25:03,580 --> 00:25:05,020
three elements and this is data that you

558
00:25:05,020 --> 00:25:06,760
can never see like where are my

559
00:25:06,760 --> 00:25:09,550
variables being used in my page that's

560
00:25:09,550 --> 00:25:11,770
pretty cool you see like app width is

561
00:25:11,770 --> 00:25:14,320
used on this you see border color border

562
00:25:14,320 --> 00:25:16,000
radius all that stuff so that's pretty

563
00:25:16,000 --> 00:25:19,480
cool but also we can we can inject new

564
00:25:19,480 --> 00:25:21,700
styles we know the selector we know the

565
00:25:21,700 --> 00:25:23,650
rule and we know our new value that we

566
00:25:23,650 --> 00:25:25,510
want to try out so we can pop up a color

567
00:25:25,510 --> 00:25:28,090
picker and say this is BG color and just

568
00:25:28,090 --> 00:25:30,310
inject a totally new style like so we're

569
00:25:30,310 --> 00:25:31,780
not recompiling we're injecting a new

570
00:25:31,780 --> 00:25:34,570
style like a style element and we'll put

571
00:25:34,570 --> 00:25:38,140
the selector bracket rule :

572
00:25:38,140 --> 00:25:39,640
and then whatever we're picking from

573
00:25:39,640 --> 00:25:41,530
this color selector on a change event so

574
00:25:41,530 --> 00:25:44,160
we can do this straight off of our

575
00:25:44,160 --> 00:25:46,200
variables so this is completely

576
00:25:46,200 --> 00:25:50,170
generated from the data inside of your

577
00:25:50,170 --> 00:25:51,910
ast you don't have to program this

578
00:25:51,910 --> 00:25:53,470
somewhere else we can add a new variable

579
00:25:53,470 --> 00:25:55,750
to our file it will automatically show

580
00:25:55,750 --> 00:25:57,880
up in this list so we can come in and

581
00:25:57,880 --> 00:26:00,670
change the app with to something that's

582
00:26:00,670 --> 00:26:05,010
more CSS friendly change the border to

583
00:26:05,010 --> 00:26:07,030
invariably if you give someone complete

584
00:26:07,030 --> 00:26:08,980
control it looks like this every time

585
00:26:08,980 --> 00:26:11,170
right this is my favorite doesn't like

586
00:26:11,170 --> 00:26:14,150
that trips me out man

587
00:26:14,150 --> 00:26:16,830
I'm I like nyquil right now but that's

588
00:26:16,830 --> 00:26:20,460
that's good anyways and then we can get

589
00:26:20,460 --> 00:26:22,440
a bitter header color in there and so

590
00:26:22,440 --> 00:26:25,770
that's that's my one example of some

591
00:26:25,770 --> 00:26:29,010
crazy stuff that you can do I have this

592
00:26:29,010 --> 00:26:34,289
available at this URL talk slash abusing

593
00:26:34,289 --> 00:26:36,840
- preprocessor - STS and you can see

594
00:26:36,840 --> 00:26:38,970
that you had to run an Express app in

595
00:26:38,970 --> 00:26:41,370
order to do that compilation step but

596
00:26:41,370 --> 00:26:42,360
you can kind of see it's all well

597
00:26:42,360 --> 00:26:46,200
commented on on how that works but thank

