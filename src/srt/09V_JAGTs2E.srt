1
00:00:05,520 --> 00:00:09,179

all right so yes I'm here to talk to you

2
00:00:09,179 --> 00:00:11,670
about tamagotchis and generators

3
00:00:11,670 --> 00:00:14,070
excited that crystal went before me cuz

4
00:00:14,070 --> 00:00:15,450
she already explained some concepts that

5
00:00:15,450 --> 00:00:17,480
I'm gonna go into in this talk as well

6
00:00:17,480 --> 00:00:21,630
so again hello I'm Jen software engineer

7
00:00:21,630 --> 00:00:23,730
based in New York if you want to reach

8
00:00:23,730 --> 00:00:25,500
out to me on twitter my handle is girl

9
00:00:25,500 --> 00:00:27,630
code you know definitely tweet at me I

10
00:00:27,630 --> 00:00:29,220
post like a lot of cat pictures and

11
00:00:29,220 --> 00:00:31,080
stuff but there's also some JavaScript

12
00:00:31,080 --> 00:00:34,320
usage all right how many of you had a

13
00:00:34,320 --> 00:00:37,830
tamagotchi growing up oh yeah I see a

14
00:00:37,830 --> 00:00:41,670
lot of hands sweet okay so if you aren't

15
00:00:41,670 --> 00:00:44,070
familiar with them Tamagotchis were

16
00:00:44,070 --> 00:00:46,949
really popular digital pets in the 1990s

17
00:00:46,949 --> 00:00:49,650
so they looked like this and when the

18
00:00:49,650 --> 00:00:52,110
game would start an egg would appear and

19
00:00:52,110 --> 00:00:54,870
then hatch and out would come your

20
00:00:54,870 --> 00:00:57,360
Tamagotchi as a baby and you want to

21
00:00:57,360 --> 00:01:00,030
raise it from a baby to an adult so you

22
00:01:00,030 --> 00:01:01,979
would clean up after it you would play

23
00:01:01,979 --> 00:01:03,989
with it you would feed it it would be

24
00:01:03,989 --> 00:01:05,940
Pat you would it needed things it could

25
00:01:05,940 --> 00:01:08,580
get sick as well and then you didn't

26
00:01:08,580 --> 00:01:11,220
actually know what type of Tamagotchi it

27
00:01:11,220 --> 00:01:14,040
was gonna grow up to be as an adult so

28
00:01:14,040 --> 00:01:15,990
that was the fun like surprise of the

29
00:01:15,990 --> 00:01:18,840
game now when I was growing up i

30
00:01:18,840 --> 00:01:20,549
nurtured a lot of Tamagotchis to

31
00:01:20,549 --> 00:01:24,509
adulthood some didn't make it that's

32
00:01:24,509 --> 00:01:27,600
okay but I really loved this game and I

33
00:01:27,600 --> 00:01:29,700
just want to build my own like web-based

34
00:01:29,700 --> 00:01:32,969
version of it so my version of a

35
00:01:32,969 --> 00:01:36,420
Tamagotchi includes an SVG shell the

36
00:01:36,420 --> 00:01:39,049
controls which are just HTML divs to

37
00:01:39,049 --> 00:01:40,829
actually interact with the Tamagotchi

38
00:01:40,829 --> 00:01:43,679
and then the game screen is actually

39
00:01:43,679 --> 00:01:46,439
built in canvas so if you aren't

40
00:01:46,439 --> 00:01:49,229
familiar with canvas to use it we're

41
00:01:49,229 --> 00:01:51,210
going to query the Dom for a canvas

42
00:01:51,210 --> 00:01:53,999
we're going to ask for the context so in

43
00:01:53,999 --> 00:01:57,210
this case we want to D to draw on the

44
00:01:57,210 --> 00:01:59,219
canvas we're going to use context draw

45
00:01:59,219 --> 00:02:00,990
image and we're going to pass it the

46
00:02:00,990 --> 00:02:03,509
image to draw as well as some XY

47
00:02:03,509 --> 00:02:05,280
coordinates that I'm not gonna get into

48
00:02:05,280 --> 00:02:07,170
right now but that's gonna draw the

49
00:02:07,170 --> 00:02:08,490
image to the screen so at the bottom you

50
00:02:08,490 --> 00:02:10,410
can see our Tamagotchi has been drawn to

51
00:02:10,410 --> 00:02:14,400
the screen now for all the animations in

52
00:02:14,400 --> 00:02:17,460
this game I used a sprite sheet so below

53
00:02:17,460 --> 00:02:20,239
is the sprite to bounce the Tamagotchi

54
00:02:20,239 --> 00:02:23,970
so if each frame of the sprite is at 200

55
00:02:23,970 --> 00:02:25,140
pixels

56
00:02:25,140 --> 00:02:27,140
then I need to draw the image at zero

57
00:02:27,140 --> 00:02:31,620
then 200 and then 400 pixels so that's

58
00:02:31,620 --> 00:02:33,120
going to bounce the Tamagotchi up and

59
00:02:33,120 --> 00:02:35,460
then I'd go back down to bounce Tamaki

60
00:02:35,460 --> 00:02:38,310
down now you'll notice that I'm doing

61
00:02:38,310 --> 00:02:39,990
contexts that clear between these

62
00:02:39,990 --> 00:02:41,850
drawings and that's to avoid this

63
00:02:41,850 --> 00:02:44,370
situation so if you don't clear the

64
00:02:44,370 --> 00:02:46,230
context between drawings all the frames

65
00:02:46,230 --> 00:02:49,020
just draw on top of each other all right

66
00:02:49,020 --> 00:02:52,800
so as it's written now this isn't going

67
00:02:52,800 --> 00:02:55,590
to work it's actually drawing and

68
00:02:55,590 --> 00:02:57,810
clearing so quickly that you're only

69
00:02:57,810 --> 00:03:01,440
seeing the last frame of this so that's

70
00:03:01,440 --> 00:03:05,010
not going to work but I can delay the

71
00:03:05,010 --> 00:03:07,410
animation with that timeout so I'm

72
00:03:07,410 --> 00:03:09,170
looking for this really old-school

73
00:03:09,170 --> 00:03:12,480
choppy Pixley animation like the

74
00:03:12,480 --> 00:03:14,340
original game and I'm not going to build

75
00:03:14,340 --> 00:03:16,110
out a sprite sheet that is actually 60

76
00:03:16,110 --> 00:03:19,590
frames right so I'm gonna animate from

77
00:03:19,590 --> 00:03:21,600
frame 1 through 3 and then back to 2 and

78
00:03:21,600 --> 00:03:24,600
1 for a full bounce using set timeout to

79
00:03:24,600 --> 00:03:28,320
do this to delay the frame drawings so

80
00:03:28,320 --> 00:03:32,700
this is going to work now ah bouncing

81
00:03:32,700 --> 00:03:37,140
tamagotchi but I've created a problem

82
00:03:37,140 --> 00:03:37,560
here

83
00:03:37,560 --> 00:03:42,209
because now my animations are async so

84
00:03:42,209 --> 00:03:45,510
how do I know when this animation is

85
00:03:45,510 --> 00:03:47,220
done like I have to know the actual

86
00:03:47,220 --> 00:03:48,540
amount of time that this is going to

87
00:03:48,540 --> 00:03:50,400
take and that's in order to kick off

88
00:03:50,400 --> 00:03:52,920
another animation after this or to not

89
00:03:52,920 --> 00:03:55,200
you know overwrite another animation or

90
00:03:55,200 --> 00:03:58,100
have a weird long delay between them and

91
00:03:58,100 --> 00:04:00,780
you know this just isn't sustainable for

92
00:04:00,780 --> 00:04:04,470
a game that's full of animations what I

93
00:04:04,470 --> 00:04:08,040
want is to resolve an animation and then

94
00:04:08,040 --> 00:04:11,459
handle another animation and this sounds

95
00:04:11,459 --> 00:04:13,680
a lot like a promise now crystal REI

96
00:04:13,680 --> 00:04:15,930
talked about promises but you know they

97
00:04:15,930 --> 00:04:18,239
represent an adventure all value so

98
00:04:18,239 --> 00:04:20,609
inside a promise I can run the animation

99
00:04:20,609 --> 00:04:22,919
code and then when it's done I can

100
00:04:22,919 --> 00:04:26,430
resolve the promise and since I can do a

101
00:04:26,430 --> 00:04:28,590
dot then on the promise I can use that

102
00:04:28,590 --> 00:04:31,910
to run an animation after it's complete

103
00:04:31,910 --> 00:04:34,680
so for the first version of this game

104
00:04:34,680 --> 00:04:37,979
that's what I did I used promises for

105
00:04:37,979 --> 00:04:38,370
all

106
00:04:38,370 --> 00:04:40,850
animations I made a general-purpose

107
00:04:40,850 --> 00:04:43,590
animate function that takes in a draw

108
00:04:43,590 --> 00:04:45,449
function and the milliseconds for the

109
00:04:45,449 --> 00:04:48,690
delay animate always returns a new

110
00:04:48,690 --> 00:04:51,840
promise and inside that promise an inner

111
00:04:51,840 --> 00:04:53,639
function is going to run the draw

112
00:04:53,639 --> 00:04:56,669
function and we delegate resolving the

113
00:04:56,669 --> 00:04:59,190
promise to the draw function if drawl

114
00:04:59,190 --> 00:05:01,050
resolves the promise and returns true

115
00:05:01,050 --> 00:05:04,800
we're done otherwise set timeout is

116
00:05:04,800 --> 00:05:06,479
called with the inner function and

117
00:05:06,479 --> 00:05:11,550
another loop of this function occurs so

118
00:05:11,550 --> 00:05:12,750
here we're going to actually use the

119
00:05:12,750 --> 00:05:14,520
animate function to create a bounce up

120
00:05:14,520 --> 00:05:17,280
animation we're gonna pass a function

121
00:05:17,280 --> 00:05:19,919
that draws the correct frame clears the

122
00:05:19,919 --> 00:05:22,289
context and increments the current frame

123
00:05:22,289 --> 00:05:25,229
count when the current frame is greater

124
00:05:25,229 --> 00:05:27,210
than the frame count the promise is

125
00:05:27,210 --> 00:05:30,090
resolved and we return true so this

126
00:05:30,090 --> 00:05:31,979
would stop the function from setting

127
00:05:31,979 --> 00:05:36,570
another loop via set timeout and so now

128
00:05:36,570 --> 00:05:38,430
we can create a simple bounce function

129
00:05:38,430 --> 00:05:40,830
using our bounce up animation and it

130
00:05:40,830 --> 00:05:43,080
bounced down animation using the same

131
00:05:43,080 --> 00:05:45,419
animate function and as you can see our

132
00:05:45,419 --> 00:05:48,240
Tamagotchi is bouncing wonderful

133
00:05:48,240 --> 00:05:51,120
beautiful and so now that that's working

134
00:05:51,120 --> 00:05:54,180
we can move on to creating the main game

135
00:05:54,180 --> 00:05:57,360
loop so when you're not interacting with

136
00:05:57,360 --> 00:05:59,190
the Tamagotchi it's going to show this

137
00:05:59,190 --> 00:06:01,950
idle animation so it's going to bounce

138
00:06:01,950 --> 00:06:03,840
it's going to move to the right move to

139
00:06:03,840 --> 00:06:06,060
the left keeps bouncing it's so on and

140
00:06:06,060 --> 00:06:08,669
so forth and to set up the main loop

141
00:06:08,669 --> 00:06:10,490
we're going to create a loop function

142
00:06:10,490 --> 00:06:13,590
will call the idle animation and when

143
00:06:13,590 --> 00:06:15,120
that's complete we call the loop

144
00:06:15,120 --> 00:06:16,860
function again so just continuously

145
00:06:16,860 --> 00:06:21,449
loops there okay but I've created some

146
00:06:21,449 --> 00:06:23,940
more problems here there's two main

147
00:06:23,940 --> 00:06:26,250
issues I noticed when using promises to

148
00:06:26,250 --> 00:06:27,410
build the animations

149
00:06:27,410 --> 00:06:32,970
the first one is venable health so once

150
00:06:32,970 --> 00:06:35,669
upon time we used callbacks to handle

151
00:06:35,669 --> 00:06:37,889
async calls and you know this created

152
00:06:37,889 --> 00:06:39,900
the dreaded triangle of doom okay

153
00:06:39,900 --> 00:06:42,840
callback health and one of the issues I

154
00:06:42,840 --> 00:06:44,550
noticed when making this game was that

155
00:06:44,550 --> 00:06:46,620
promises really didn't alleviate

156
00:06:46,620 --> 00:06:49,349
callback hell like you're still in hell

157
00:06:49,349 --> 00:06:50,630
it's just

158
00:06:50,630 --> 00:06:55,430
looking how so the left side is a more

159
00:06:55,430 --> 00:06:57,290
realistic version of how these

160
00:06:57,290 --> 00:07:00,230
animations might work so I might need to

161
00:07:00,230 --> 00:07:02,420
pass in information to functions or

162
00:07:02,420 --> 00:07:04,970
check information to make a decision and

163
00:07:04,970 --> 00:07:08,090
this all gets just as unwieldy and as

164
00:07:08,090 --> 00:07:11,810
unmanageable as callback hell and you

165
00:07:11,810 --> 00:07:13,220
know don't mistake me for hating

166
00:07:13,220 --> 00:07:15,830
promises they're really great but when

167
00:07:15,830 --> 00:07:18,080
you're doing like more large-scale async

168
00:07:18,080 --> 00:07:21,170
work the ease of promises really breaks

169
00:07:21,170 --> 00:07:24,980
down and I noticed another larger issue

170
00:07:24,980 --> 00:07:29,150
with using promises for animations so

171
00:07:29,150 --> 00:07:32,180
the point of the Tamagotchi is that the

172
00:07:32,180 --> 00:07:35,270
user can interact with it I mean the

173
00:07:35,270 --> 00:07:37,640
whole game is about interacting with the

174
00:07:37,640 --> 00:07:41,360
Tamagotchi so at some point I need to

175
00:07:41,360 --> 00:07:44,510
suspend the idle animation in favor of a

176
00:07:44,510 --> 00:07:47,570
user-generated event so like feeding the

177
00:07:47,570 --> 00:07:48,640
Tamagotchi

178
00:07:48,640 --> 00:07:51,470
so here I've added an array to hold

179
00:07:51,470 --> 00:07:54,860
pending events the loop function checks

180
00:07:54,860 --> 00:07:56,900
if there are any pending events and if

181
00:07:56,900 --> 00:07:59,060
there are the handle event function is

182
00:07:59,060 --> 00:08:03,770
run and the loop is terminated so handle

183
00:08:03,770 --> 00:08:05,900
event is going to take the first event

184
00:08:05,900 --> 00:08:07,850
off the queue of events and run it and

185
00:08:07,850 --> 00:08:09,680
when it's complete we're gonna restart

186
00:08:09,680 --> 00:08:12,110
the loop if there's another event in the

187
00:08:12,110 --> 00:08:14,140
queue handle event will get called again

188
00:08:14,140 --> 00:08:17,180
otherwise we continue the loop until the

189
00:08:17,180 --> 00:08:22,340
next event and so this didn't work you

190
00:08:22,340 --> 00:08:24,050
can see I'm requesting to feed the

191
00:08:24,050 --> 00:08:26,150
Tamagotchi

192
00:08:26,150 --> 00:08:28,220
but the feed animation is delayed until

193
00:08:28,220 --> 00:08:30,890
the idle animation completes its current

194
00:08:30,890 --> 00:08:33,740
loop and that can be upwards of seven to

195
00:08:33,740 --> 00:08:36,440
eight seconds so that's not going to

196
00:08:36,440 --> 00:08:39,020
work what I need is to actually cancel

197
00:08:39,020 --> 00:08:42,340
the promise that runs the idle animation

198
00:08:42,340 --> 00:08:47,270
except you can't cancel a promise think

199
00:08:47,270 --> 00:08:51,949
of promises as unbreakable valves

200
00:08:51,959 --> 00:08:56,949
rest in peace snake so you can throw

201
00:08:56,949 --> 00:08:59,290
errors and promises and you can catch

202
00:08:59,290 --> 00:09:01,839
those errors but you can't actually

203
00:09:01,839 --> 00:09:04,629
cancel a promise all of the attached

204
00:09:04,629 --> 00:09:08,199
debt functions are going to fire what I

205
00:09:08,199 --> 00:09:10,749
actually want is to pause an animation

206
00:09:10,749 --> 00:09:13,809
and yield to an event and that sounds a

207
00:09:13,809 --> 00:09:16,809
lot like a generator so generators are

208
00:09:16,809 --> 00:09:18,579
amazing because their code that can be

209
00:09:18,579 --> 00:09:21,759
paused so most of the code that you

210
00:09:21,759 --> 00:09:24,069
write is run to completion once it

211
00:09:24,069 --> 00:09:26,199
starts there's no actually stopping it

212
00:09:26,199 --> 00:09:28,660
even if you're doing async work you're

213
00:09:28,660 --> 00:09:30,579
throwing it onto the event loop and it's

214
00:09:30,579 --> 00:09:32,470
going to come back around you can't tell

215
00:09:32,470 --> 00:09:34,839
it like to cancel itself and stop can't

216
00:09:34,839 --> 00:09:37,300
pause it both generators you can pause

217
00:09:37,300 --> 00:09:40,629
and resume code so let's take a look at

218
00:09:40,629 --> 00:09:44,740
them so this is a generator and I know

219
00:09:44,740 --> 00:09:46,420
it's a generator because of the asterisk

220
00:09:46,420 --> 00:09:48,279
next to the function keyword that's

221
00:09:48,279 --> 00:09:49,749
actually all you need to do to turn a

222
00:09:49,749 --> 00:09:51,429
regular function into a generator

223
00:09:51,429 --> 00:09:53,829
function and then inside you'll notice

224
00:09:53,829 --> 00:09:56,350
the yield statement so yield is a

225
00:09:56,350 --> 00:09:57,790
special keyword and generators that

226
00:09:57,790 --> 00:10:02,800
means pause to use the generator we're

227
00:10:02,800 --> 00:10:04,600
going to call it and that's going to

228
00:10:04,600 --> 00:10:08,019
return to us the generator object now on

229
00:10:08,019 --> 00:10:10,120
the generator object is a method called

230
00:10:10,120 --> 00:10:12,309
next and that actually tells the

231
00:10:12,309 --> 00:10:14,499
generator to run until it encounters a

232
00:10:14,499 --> 00:10:17,829
yield statement when that happens it's

233
00:10:17,829 --> 00:10:20,019
going to return to you an object with a

234
00:10:20,019 --> 00:10:23,470
value key and a done key so if there's a

235
00:10:23,470 --> 00:10:25,120
value to the right of the yield

236
00:10:25,120 --> 00:10:25,809
statement

237
00:10:25,809 --> 00:10:28,149
it'll be passed via the value key and

238
00:10:28,149 --> 00:10:30,519
then done provides the status of the

239
00:10:30,519 --> 00:10:33,790
generator is it done true or false so in

240
00:10:33,790 --> 00:10:35,410
this case this generator is not done so

241
00:10:35,410 --> 00:10:39,100
we're getting false now you don't need

242
00:10:39,100 --> 00:10:42,459
to yield values yield is just a key word

243
00:10:42,459 --> 00:10:44,829
that means pause so you don't need to

244
00:10:44,829 --> 00:10:47,189
return a value with it so in that case

245
00:10:47,189 --> 00:10:49,299
yielding no value is going to return

246
00:10:49,299 --> 00:10:51,160
undefined and as you can see were still

247
00:10:51,160 --> 00:10:54,639
not done done false so now we're calling

248
00:10:54,639 --> 00:10:57,790
next again reading 3 so the value is 3

249
00:10:57,790 --> 00:11:00,040
and done is false but done is still

250
00:11:00,040 --> 00:11:01,360
false right like we haven't actually

251
00:11:01,360 --> 00:11:04,329
finished yet it's on the next call

252
00:11:04,329 --> 00:11:10,209
but now we're actually truly done you

253
00:11:10,209 --> 00:11:12,579
can also pass values into the generators

254
00:11:12,579 --> 00:11:15,339
next function and so here we're passing

255
00:11:15,339 --> 00:11:18,279
two into the second next function and

256
00:11:18,279 --> 00:11:20,559
this seems a little odd at first like

257
00:11:20,559 --> 00:11:22,179
why aren't we doing this on the first

258
00:11:22,179 --> 00:11:26,290
call to next but when you call next what

259
00:11:26,290 --> 00:11:29,379
you're saying is hey generator do

260
00:11:29,379 --> 00:11:31,660
whatever you need to do until you

261
00:11:31,660 --> 00:11:35,170
encounter a yield statement so in this

262
00:11:35,170 --> 00:11:36,610
case there's actually nothing for the

263
00:11:36,610 --> 00:11:38,829
generator to do before the first yield

264
00:11:38,829 --> 00:11:41,829
statement so when next is called it sees

265
00:11:41,829 --> 00:11:43,420
that yield statement it's going to pause

266
00:11:43,420 --> 00:11:46,179
there and the yield statement has no

267
00:11:46,179 --> 00:11:48,730
value associated with it so the value is

268
00:11:48,730 --> 00:11:53,079
undefined on the second next call we

269
00:11:53,079 --> 00:11:55,660
pass in a value and that value is going

270
00:11:55,660 --> 00:11:58,540
to take the place of yield and now

271
00:11:58,540 --> 00:12:00,699
because we've called next and we've said

272
00:12:00,699 --> 00:12:03,309
hey do whatever you need to do until you

273
00:12:03,309 --> 00:12:05,860
see a yield statement the value is now

274
00:12:05,860 --> 00:12:09,009
being assigned to the variable num the

275
00:12:09,009 --> 00:12:11,019
generator runs until the next statement

276
00:12:11,019 --> 00:12:14,230
and this time we do have a value yielded

277
00:12:14,230 --> 00:12:18,399
back to plus Nam or four on the next

278
00:12:18,399 --> 00:12:20,350
call the generator yields four plus num

279
00:12:20,350 --> 00:12:24,129
or six then it's done no more yield

280
00:12:24,129 --> 00:12:27,879
statements you can also create an

281
00:12:27,879 --> 00:12:32,139
infinite generator so how many of you

282
00:12:32,139 --> 00:12:36,759
use while loops yeah just just a handful

283
00:12:36,759 --> 00:12:40,480
of you like in production it very few

284
00:12:40,480 --> 00:12:43,989
okay generally we don't I mean when I

285
00:12:43,989 --> 00:12:45,399
was learning while loops obviously what

286
00:12:45,399 --> 00:12:48,699
I did was crash my browser I think we

287
00:12:48,699 --> 00:12:52,119
all did so in this example like first

288
00:12:52,119 --> 00:12:53,470
we're gonna pass in an initial value

289
00:12:53,470 --> 00:12:56,019
into the generator function and this is

290
00:12:56,019 --> 00:12:58,299
going to avoid relying on next to set

291
00:12:58,299 --> 00:13:01,299
the initial value of num and then you're

292
00:13:01,299 --> 00:13:02,949
gonna see the while loop right we're

293
00:13:02,949 --> 00:13:07,209
doing wild true so this should crash my

294
00:13:07,209 --> 00:13:09,129
computer like this is an infinite loop

295
00:13:09,129 --> 00:13:11,350
and should crash my browser and I'll be

296
00:13:11,350 --> 00:13:14,799
annoyed with myself but actually because

297
00:13:14,799 --> 00:13:17,559
generators can pause it's actually

298
00:13:17,559 --> 00:13:18,259
pausing

299
00:13:18,259 --> 00:13:22,100
while loop so it's not gonna cause a

300
00:13:22,100 --> 00:13:24,169
crash the yield statements going to

301
00:13:24,169 --> 00:13:26,089
pause it for us and it's only gonna

302
00:13:26,089 --> 00:13:29,209
resume again when we call next and so as

303
00:13:29,209 --> 00:13:31,609
long as you keep calling next this is

304
00:13:31,609 --> 00:13:33,019
going to keep running

305
00:13:33,019 --> 00:13:34,160
so this couldn't be an infinite

306
00:13:34,160 --> 00:13:35,720
generator but you don't have to worry

307
00:13:35,720 --> 00:13:37,459
about overloading the event loop with

308
00:13:37,459 --> 00:13:39,649
the while loop because generators can

309
00:13:39,649 --> 00:13:44,089
pause now you can also run a generator

310
00:13:44,089 --> 00:13:47,419
from inside of another generator and to

311
00:13:47,419 --> 00:13:48,709
do that you're going to use the yield

312
00:13:48,709 --> 00:13:50,509
asterisk expression I'm gonna call it

313
00:13:50,509 --> 00:13:51,499
yield star because it's just a little

314
00:13:51,499 --> 00:13:55,009
bit easier to say but to illustrate this

315
00:13:55,009 --> 00:13:57,139
I have a generator function called

316
00:13:57,139 --> 00:14:00,169
powder and a generator function called

317
00:14:00,169 --> 00:14:03,859
inner and you'll notice that outer is

318
00:14:03,859 --> 00:14:05,720
calling inner with the yield star

319
00:14:05,720 --> 00:14:10,850
expression so same as before we're going

320
00:14:10,850 --> 00:14:12,470
to call outer and that's gonna return to

321
00:14:12,470 --> 00:14:15,829
us the generator object so the first

322
00:14:15,829 --> 00:14:18,019
time we call next what we expect to

323
00:14:18,019 --> 00:14:21,649
happen happens the January runs until it

324
00:14:21,649 --> 00:14:23,720
encounters a yield statement so this

325
00:14:23,720 --> 00:14:26,119
runs encounters yield and the value to

326
00:14:26,119 --> 00:14:28,759
the right one is passed back as the

327
00:14:28,759 --> 00:14:33,649
value but when we call next again the

328
00:14:33,649 --> 00:14:35,539
generator isn't going to pause at the

329
00:14:35,539 --> 00:14:38,089
yield star you can see it's pausing at

330
00:14:38,089 --> 00:14:39,589
the first yield statement in the inner

331
00:14:39,589 --> 00:14:42,470
generator and the value being returned

332
00:14:42,470 --> 00:14:45,019
isn't the generator itself but the value

333
00:14:45,019 --> 00:14:48,049
a from the inner generator so yield star

334
00:14:48,049 --> 00:14:50,839
is a delegate so when you call next and

335
00:14:50,839 --> 00:14:52,759
it encounters a yield star expression it

336
00:14:52,759 --> 00:14:55,220
delegates the generator to the right of

337
00:14:55,220 --> 00:14:58,910
that expression and it will continue to

338
00:14:58,910 --> 00:15:01,850
do so as you call next until that

339
00:15:01,850 --> 00:15:04,339
generator is complete so when we call

340
00:15:04,339 --> 00:15:06,409
next again the inner generator isn't

341
00:15:06,409 --> 00:15:10,850
done yet so now the value is B now the

342
00:15:10,850 --> 00:15:13,129
inner generator is complete and so we

343
00:15:13,129 --> 00:15:14,720
move on to the next yield statement in

344
00:15:14,720 --> 00:15:19,279
the outer function and in addition to

345
00:15:19,279 --> 00:15:21,769
being paused generators can be cancelled

346
00:15:21,769 --> 00:15:24,159
and you can do this one of two ways so

347
00:15:24,159 --> 00:15:26,689
the first is with the return statement

348
00:15:26,689 --> 00:15:29,089
so this generator because it's using a

349
00:15:29,089 --> 00:15:31,639
while true it should run for as long as

350
00:15:31,639 --> 00:15:32,160
I call

351
00:15:32,160 --> 00:15:35,610
the next method but instead when this

352
00:15:35,610 --> 00:15:37,199
generator encounters the return

353
00:15:37,199 --> 00:15:40,350
statement it's going to cancel itself so

354
00:15:40,350 --> 00:15:43,889
you can see that done is now true and it

355
00:15:43,889 --> 00:15:45,690
doesn't matter how many times I call

356
00:15:45,690 --> 00:15:50,939
next this generator is done and you can

357
00:15:50,939 --> 00:15:53,189
also cancel a generator from outside of

358
00:15:53,189 --> 00:15:55,829
itself so here again the generator

359
00:15:55,829 --> 00:15:59,189
should be infinite but when I call the

360
00:15:59,189 --> 00:16:01,920
return method on it it cancels the

361
00:16:01,920 --> 00:16:05,189
generator and this is really interesting

362
00:16:05,189 --> 00:16:06,959
that you can cancel a generator from

363
00:16:06,959 --> 00:16:10,350
within or outside because you can only

364
00:16:10,350 --> 00:16:13,259
resume the generator from outside of it

365
00:16:13,259 --> 00:16:16,769
so generators are paused via yield and

366
00:16:16,769 --> 00:16:20,100
restarted via next but a generator

367
00:16:20,100 --> 00:16:23,819
cannot call next on itself if I never

368
00:16:23,819 --> 00:16:25,500
call next on this generator it will

369
00:16:25,500 --> 00:16:29,490
never yield to it stays paused and this

370
00:16:29,490 --> 00:16:31,019
is the thing I really struggled with

371
00:16:31,019 --> 00:16:33,480
when I was converting the game from

372
00:16:33,480 --> 00:16:36,870
promises to generators because who runs

373
00:16:36,870 --> 00:16:41,100
the generator so if control happens

374
00:16:41,100 --> 00:16:43,500
outside like something has to be pulling

375
00:16:43,500 --> 00:16:46,050
the strings like how do you know to keep

376
00:16:46,050 --> 00:16:47,880
calling dot next on something or how

377
00:16:47,880 --> 00:16:49,290
many yield statements there are in

378
00:16:49,290 --> 00:16:52,079
something and so this is where

379
00:16:52,079 --> 00:16:56,579
co-routines come into play so carbo

380
00:16:56,579 --> 00:16:58,410
teens are a general control structure

381
00:16:58,410 --> 00:17:00,720
where control flow is cooperatively

382
00:17:00,720 --> 00:17:03,740
passed between two different routines I

383
00:17:03,740 --> 00:17:05,850
like to think of kuru teens as

384
00:17:05,850 --> 00:17:08,610
cooperative partners because the

385
00:17:08,610 --> 00:17:11,010
generator can't resume itself you need a

386
00:17:11,010 --> 00:17:15,600
cooperative partner to help out so this

387
00:17:15,600 --> 00:17:18,150
function is a basic example of a Co

388
00:17:18,150 --> 00:17:20,039
routine it's going to take in a

389
00:17:20,039 --> 00:17:22,439
generator it's going to call it which

390
00:17:22,439 --> 00:17:26,130
returns the generator object the inner

391
00:17:26,130 --> 00:17:28,980
function next response calls the

392
00:17:28,980 --> 00:17:31,770
generators next method this starts the

393
00:17:31,770 --> 00:17:33,750
generator which will run until it

394
00:17:33,750 --> 00:17:36,270
encounters a yield statement at this

395
00:17:36,270 --> 00:17:38,490
time the generator returns an object

396
00:17:38,490 --> 00:17:41,370
with the value key and the done key next

397
00:17:41,370 --> 00:17:43,620
response evaluates whether the generator

398
00:17:43,620 --> 00:17:45,130
is done or not

399
00:17:45,130 --> 00:17:47,440
calls itself and if not it calls itself

400
00:17:47,440 --> 00:17:48,850
with the value from the generators

401
00:17:48,850 --> 00:17:51,580
response and this loop continues until

402
00:17:51,580 --> 00:17:55,780
the generator is done so the co routine

403
00:17:55,780 --> 00:17:57,429
is the cooperative partner to the

404
00:17:57,429 --> 00:18:00,400
generator the co routine function passes

405
00:18:00,400 --> 00:18:02,620
control to the generator and when the

406
00:18:02,620 --> 00:18:04,900
generator pauses control is yielded back

407
00:18:04,900 --> 00:18:07,150
to the co routine and these two

408
00:18:07,150 --> 00:18:09,250
functions cooperatively pass control

409
00:18:09,250 --> 00:18:14,260
until completion so now I can rewrite

410
00:18:14,260 --> 00:18:17,549
the bounce animation as a generator and

411
00:18:17,549 --> 00:18:21,250
use a Co routine to run it except you'll

412
00:18:21,250 --> 00:18:23,140
notice that this code suffers from the

413
00:18:23,140 --> 00:18:25,990
same issue I had in the beginning the

414
00:18:25,990 --> 00:18:28,059
animation still happens too quickly I

415
00:18:28,059 --> 00:18:30,400
still actually need set timeout and I

416
00:18:30,400 --> 00:18:34,030
actually still need promises but my

417
00:18:34,030 --> 00:18:36,100
generator doesn't care if I'm using

418
00:18:36,100 --> 00:18:38,740
promises it's not going to wait for each

419
00:18:38,740 --> 00:18:41,919
individual promise to resolve and then

420
00:18:41,919 --> 00:18:44,230
resume itself like it can't resume

421
00:18:44,230 --> 00:18:48,330
itself but a cooperative partner could

422
00:18:48,330 --> 00:18:51,909
so I can amend my Co routine to handle

423
00:18:51,909 --> 00:18:54,940
async requests instead of calling next

424
00:18:54,940 --> 00:18:57,250
response we'll call a handle async

425
00:18:57,250 --> 00:18:59,710
function we'll pass it the value of the

426
00:18:59,710 --> 00:19:01,900
generators response which is a promise

427
00:19:01,900 --> 00:19:05,799
and now we can prevent the generator

428
00:19:05,799 --> 00:19:08,409
from resuming until the promise is

429
00:19:08,409 --> 00:19:11,260
resolved when it's resolved we'll call

430
00:19:11,260 --> 00:19:13,450
next response which will resume the

431
00:19:13,450 --> 00:19:15,419
generator

432
00:19:15,419 --> 00:19:18,460
so with this amended Co routine these

433
00:19:18,460 --> 00:19:20,799
functions are now equivalent so

434
00:19:20,799 --> 00:19:22,780
previously we chained promises together

435
00:19:22,780 --> 00:19:25,270
for the animation and now we can yield

436
00:19:25,270 --> 00:19:28,000
promises and our cooperative partner the

437
00:19:28,000 --> 00:19:30,520
KO routine will handle resuming the

438
00:19:30,520 --> 00:19:33,510
generator when the promise is resolved

439
00:19:33,510 --> 00:19:36,250
so you can do more than yield promises

440
00:19:36,250 --> 00:19:38,230
you can yield all sorts of async things

441
00:19:38,230 --> 00:19:40,330
like callback functions and generators

442
00:19:40,330 --> 00:19:42,669
themselves and more and there's a really

443
00:19:42,669 --> 00:19:44,500
great library called Co if you want to

444
00:19:44,500 --> 00:19:46,299
play around with that I really highly

445
00:19:46,299 --> 00:19:49,000
recommend it kuru teens are very very

446
00:19:49,000 --> 00:19:52,240
powerful and the reason they're so

447
00:19:52,240 --> 00:19:54,520
powerful is that they allow you to think

448
00:19:54,520 --> 00:19:58,630
sequentially about async code because

449
00:19:58,630 --> 00:19:58,900
the

450
00:19:58,900 --> 00:20:00,700
her routine is your cooperative partner

451
00:20:00,700 --> 00:20:02,950
and handling the messy business of

452
00:20:02,950 --> 00:20:05,470
chaining and dealing with async code for

453
00:20:05,470 --> 00:20:07,810
you in the background you can write your

454
00:20:07,810 --> 00:20:12,910
code as if it ran sequentially so for

455
00:20:12,910 --> 00:20:14,710
the second version of this game I

456
00:20:14,710 --> 00:20:17,230
rewrote all the animations with promises

457
00:20:17,230 --> 00:20:19,390
and generators so what you're seeing

458
00:20:19,390 --> 00:20:21,430
here is actually the same idle animation

459
00:20:21,430 --> 00:20:23,830
but with generators and promises and run

460
00:20:23,830 --> 00:20:26,740
by a KO routine and I had two goals with

461
00:20:26,740 --> 00:20:28,990
this rewrite I wanted to be able to

462
00:20:28,990 --> 00:20:31,390
pause animations and I want to take

463
00:20:31,390 --> 00:20:33,460
advantage of thinking sequentially about

464
00:20:33,460 --> 00:20:37,960
async code so to do that I started with

465
00:20:37,960 --> 00:20:39,550
rewriting the function that delays the

466
00:20:39,550 --> 00:20:40,540
animation

467
00:20:40,540 --> 00:20:43,330
so this is our async function and it

468
00:20:43,330 --> 00:20:44,770
doesn't need to hold the animation

469
00:20:44,770 --> 00:20:47,170
itself it just needs to delay with a

470
00:20:47,170 --> 00:20:49,770
promise that's its sole responsibility

471
00:20:49,770 --> 00:20:51,940
so when this function is called it

472
00:20:51,940 --> 00:20:54,340
returns a new promise and resolved that

473
00:20:54,340 --> 00:20:57,520
when the timeout is complete it also

474
00:20:57,520 --> 00:20:59,230
broke out the context clearing it to its

475
00:20:59,230 --> 00:21:01,480
own function and the drawing of the

476
00:21:01,480 --> 00:21:04,960
image into its own function and now we

477
00:21:04,960 --> 00:21:07,060
can combine these new functions to

478
00:21:07,060 --> 00:21:09,580
replace the previous animation function

479
00:21:09,580 --> 00:21:13,060
and we can do so inside a generator so

480
00:21:13,060 --> 00:21:14,980
we'll clear whatever was previously on

481
00:21:14,980 --> 00:21:16,630
the canvas and then draw the new frame

482
00:21:16,630 --> 00:21:20,560
and those can occur synchronously will

483
00:21:20,560 --> 00:21:22,570
yield the delay that's the asynchronous

484
00:21:22,570 --> 00:21:25,210
part of this function but because we're

485
00:21:25,210 --> 00:21:26,920
handing it off to the co-routine our

486
00:21:26,920 --> 00:21:29,560
cooperative partner this looks and feels

487
00:21:29,560 --> 00:21:32,740
very synchronous the KO routine will

488
00:21:32,740 --> 00:21:34,720
handle the resolve promise when the

489
00:21:34,720 --> 00:21:37,990
timeout completes and so here is our

490
00:21:37,990 --> 00:21:41,440
draw frame generator in use this dislike

491
00:21:41,440 --> 00:21:43,810
animation draws two frames and because

492
00:21:43,810 --> 00:21:45,910
draw frame is a generator we're using

493
00:21:45,910 --> 00:21:48,780
yield star to delegate yield calls to it

494
00:21:48,780 --> 00:21:51,220
so for each call and draw frame we're

495
00:21:51,220 --> 00:21:53,140
clearing the context drawing the frame

496
00:21:53,140 --> 00:21:56,380
and then delaying and then this is what

497
00:21:56,380 --> 00:21:57,820
the dislike animation looks like you can

498
00:21:57,820 --> 00:22:00,490
see it's a very unhappy tamagotchi just

499
00:22:00,490 --> 00:22:03,940
really pissed okay and now we can

500
00:22:03,940 --> 00:22:06,370
rewrite also the main game loop and take

501
00:22:06,370 --> 00:22:09,370
advantage of canceling the generator so

502
00:22:09,370 --> 00:22:12,010
our loop generator function will be run

503
00:22:12,010 --> 00:22:13,059
by ko

504
00:22:13,059 --> 00:22:15,010
so we can rely on it to handle any

505
00:22:15,010 --> 00:22:17,440
values yielded to it we'll create a

506
00:22:17,440 --> 00:22:19,179
variable to save the status of the

507
00:22:19,179 --> 00:22:21,610
generator done or not and we'll preset

508
00:22:21,610 --> 00:22:24,150
the animation to idle

509
00:22:24,150 --> 00:22:26,710
we'll use a while loop to create a

510
00:22:26,710 --> 00:22:29,110
never-ending generator so this way the

511
00:22:29,110 --> 00:22:30,610
game loop is going to continue forever

512
00:22:30,610 --> 00:22:33,670
if we have a pending user event we'll

513
00:22:33,670 --> 00:22:35,470
cancel the current animation and

514
00:22:35,470 --> 00:22:37,720
delegate to the event using yield star

515
00:22:37,720 --> 00:22:40,179
and whatever the event yields will be

516
00:22:40,179 --> 00:22:44,410
passed to the co routine otherwise a

517
00:22:44,410 --> 00:22:46,450
second while loop will handle running

518
00:22:46,450 --> 00:22:48,640
the animation a while loop inside a

519
00:22:48,640 --> 00:22:49,780
while loop I want you to understand

520
00:22:49,780 --> 00:22:50,559
though this is nuts

521
00:22:50,559 --> 00:22:54,040
as long as the animation is not complete

522
00:22:54,040 --> 00:22:56,530
and there are no pending events this

523
00:22:56,530 --> 00:22:58,630
loop will yield the generators values to

524
00:22:58,630 --> 00:23:00,220
the KO routine to handle and these are

525
00:23:00,220 --> 00:23:02,140
promises so the KO routine is going to

526
00:23:02,140 --> 00:23:05,740
handle the chaining but if the animation

527
00:23:05,740 --> 00:23:08,110
is done or there is a pending user event

528
00:23:08,110 --> 00:23:10,419
the loop is going to terminate stopping

529
00:23:10,419 --> 00:23:11,830
the animation generator from running

530
00:23:11,830 --> 00:23:14,559
again and will reassign animation to the

531
00:23:14,559 --> 00:23:16,390
idle generator to start from fresh and

532
00:23:16,390 --> 00:23:19,179
it will reset done to false and on the

533
00:23:19,179 --> 00:23:20,890
next iteration of this while loop

534
00:23:20,890 --> 00:23:23,080
pending will be true and will handle the

535
00:23:23,080 --> 00:23:26,950
user event instead so this is the

536
00:23:26,950 --> 00:23:28,660
generator function for the feed action

537
00:23:28,660 --> 00:23:31,240
it evaluates if the Tamagotchi is hungry

538
00:23:31,240 --> 00:23:34,419
or not if it's not it delegates future

539
00:23:34,419 --> 00:23:36,429
calls to the dislike anim generator

540
00:23:36,429 --> 00:23:38,610
which will run the dislike animation

541
00:23:38,610 --> 00:23:40,809
otherwise we're gonna decrease the

542
00:23:40,809 --> 00:23:42,429
hunger count and use the yield star

543
00:23:42,429 --> 00:23:43,900
we're gonna delegate to the eat

544
00:23:43,900 --> 00:23:46,990
generator that runs that animation all

545
00:23:46,990 --> 00:23:49,690
right so will this work all right so

546
00:23:49,690 --> 00:23:51,400
we're idling I'm gonna say yeah I want

547
00:23:51,400 --> 00:23:52,570
to feed you I'm gonna feed you a burger

548
00:23:52,570 --> 00:23:54,760
he's eating all right so the idle engine

549
00:23:54,760 --> 00:23:58,210
canceled I'm gonna do it again but this

550
00:23:58,210 --> 00:24:01,650
time I'm a feedom candy in a second

551
00:24:01,650 --> 00:24:05,890
cuz you know a well-balanced meal there

552
00:24:05,890 --> 00:24:06,309
we go

553
00:24:06,309 --> 00:24:09,549
cool all right he seems fine so idle

554
00:24:09,549 --> 00:24:11,460
animation keeps running again

555
00:24:11,460 --> 00:24:13,360
all right let's feed him one more time

556
00:24:13,360 --> 00:24:15,910
cuz I think maybe he's still hungry now

557
00:24:15,910 --> 00:24:18,830
he's mad he doesn't like that alright

558
00:24:18,830 --> 00:24:22,279
so that's LL for me if you want to check

559
00:24:22,279 --> 00:24:24,110
out the code for this there's the link

560
00:24:24,110 --> 00:24:27,330
to the repository for it and huh

