1
00:00:00,030 --> 00:00:03,990

so hello everybody I'm really exciting

2
00:00:03,990 --> 00:00:08,370
to be here and to talk about how browser

3
00:00:08,370 --> 00:00:10,469
makers are making brother fast and I

4
00:00:10,469 --> 00:00:14,130
will use Firefox quantum as an example

5
00:00:14,130 --> 00:00:19,470
of how browser vendors are modifying the

6
00:00:19,470 --> 00:00:22,970
browser to cope with the 21st century

7
00:00:22,970 --> 00:00:26,939
most of the things that I'm about to say

8
00:00:26,939 --> 00:00:29,070
is also valid for a lot of other

9
00:00:29,070 --> 00:00:31,380
browsers but I'm taking the example of

10
00:00:31,380 --> 00:00:37,559
Firefox content so I'm George Bailey I'm

11
00:00:37,559 --> 00:00:40,200
part of developer outreach at Mozilla

12
00:00:40,200 --> 00:00:44,760
and I have a Twitter account so the

13
00:00:44,760 --> 00:00:47,489
story starts a little bit with how a

14
00:00:47,489 --> 00:00:49,440
computer works so at the core of the

15
00:00:49,440 --> 00:00:51,620
computer there is a processor and

16
00:00:51,620 --> 00:00:56,280
processors have evolved over the years

17
00:00:56,280 --> 00:00:59,699
very quickly initially in the 70s 80s

18
00:00:59,699 --> 00:01:03,090
90s of last century there was something

19
00:01:03,090 --> 00:01:06,330
called the more low that was basically

20
00:01:06,330 --> 00:01:09,150
saying that every two years or every

21
00:01:09,150 --> 00:01:13,619
three years your computer becomes twice

22
00:01:13,619 --> 00:01:17,040
as fast as previous which was very

23
00:01:17,040 --> 00:01:20,159
convenient for people making programs

24
00:01:20,159 --> 00:01:22,500
and browser in particular because you do

25
00:01:22,500 --> 00:01:24,869
nothing and two or three years later

26
00:01:24,869 --> 00:01:27,540
your browser is twice as fast it's kind

27
00:01:27,540 --> 00:01:32,840
of free lunch lately at the beginning

28
00:01:32,840 --> 00:01:36,710
was second decade of this 21st century

29
00:01:36,710 --> 00:01:40,500
people are seeing that processor or not

30
00:01:40,500 --> 00:01:42,210
I'm not really doubling the speed

31
00:01:42,210 --> 00:01:46,320
anymore each 2 or 3 years it's still a

32
00:01:46,320 --> 00:01:48,619
little bit true for the high end

33
00:01:48,619 --> 00:01:52,409
processors but in fact it doesn't really

34
00:01:52,409 --> 00:01:54,689
matter for somewhere because we are no

35
00:01:54,689 --> 00:01:56,969
more in a point where we want the web to

36
00:01:56,969 --> 00:02:00,000
run only on the high end processor most

37
00:02:00,000 --> 00:02:02,579
of the time you want it to run on such

38
00:02:02,579 --> 00:02:06,420
device and it's not the latest the most

39
00:02:06,420 --> 00:02:08,610
powerful processor in it because as the

40
00:02:08,610 --> 00:02:12,400
battery will just last 5 minutes so

41
00:02:12,400 --> 00:02:15,120
processor has found a different way to

42
00:02:15,120 --> 00:02:19,510
increase the calculation power and it's

43
00:02:19,510 --> 00:02:21,700
by having more calls

44
00:02:21,700 --> 00:02:24,840
so more processing power in parallel and

45
00:02:24,840 --> 00:02:27,310
the difference here is there is no free

46
00:02:27,310 --> 00:02:29,709
lunch program has to adapt themselves

47
00:02:29,709 --> 00:02:32,560
and to make use of this multiple course

48
00:02:32,560 --> 00:02:34,599
of this concurrency that is now

49
00:02:34,599 --> 00:02:43,000
available at the same time on two

50
00:02:43,000 --> 00:02:45,489
browsers what we want browsers to do has

51
00:02:45,489 --> 00:02:48,579
changed over the years so at the

52
00:02:48,579 --> 00:02:50,139
beginning it was just displaying a

53
00:02:50,139 --> 00:02:52,870
document and even in 2005 if you were

54
00:02:52,870 --> 00:02:54,670
able to put a few images and making

55
00:02:54,670 --> 00:02:57,430
rounded corner or on the box

56
00:02:57,430 --> 00:03:00,700
you were top-notch developer it's not

57
00:03:00,700 --> 00:03:04,420
the case anymore today and what we want

58
00:03:04,420 --> 00:03:09,060
today is to have HD videos running with

59
00:03:09,060 --> 00:03:13,079
transparency effect with rotations and

60
00:03:13,079 --> 00:03:16,359
you want all these to run at 60 frames

61
00:03:16,359 --> 00:03:19,540
per second you want all these to run on

62
00:03:19,540 --> 00:03:22,629
your virtual reality headset which means

63
00:03:22,629 --> 00:03:24,160
that in fact you need more than 60

64
00:03:24,160 --> 00:03:25,629
frames per second because if you want

65
00:03:25,629 --> 00:03:28,510
with a virtual reality headset not to be

66
00:03:28,510 --> 00:03:31,000
to have motion sickness you need at

67
00:03:31,000 --> 00:03:33,909
least 80 if not 100 100 frames per

68
00:03:33,909 --> 00:03:37,989
second in order to achieve this in order

69
00:03:37,989 --> 00:03:41,319
to cope with this browser had to adapt

70
00:03:41,319 --> 00:03:43,870
they were designed in the 80s and the

71
00:03:43,870 --> 00:03:45,790
80s and mostly at the beginning of the

72
00:03:45,790 --> 00:03:47,949
90s even if they have evolved of the

73
00:03:47,949 --> 00:03:51,010
years it's not the same architecture

74
00:03:51,010 --> 00:03:55,930
that is able to run so modern web so

75
00:03:55,930 --> 00:03:58,659
this story today is about telling you

76
00:03:58,659 --> 00:04:01,479
what browser vendors are doing in order

77
00:04:01,479 --> 00:04:03,159
to make your website view web

78
00:04:03,159 --> 00:04:05,799
application faster even without you

79
00:04:05,799 --> 00:04:11,109
having to do anything the browser is a

80
00:04:11,109 --> 00:04:15,040
user agent and in 2008 we used this

81
00:04:15,040 --> 00:04:18,039
robot for the launch and 543 it's a

82
00:04:18,039 --> 00:04:21,669
friendly robot but of course over the

83
00:04:21,669 --> 00:04:25,389
next decade it looks a little bit clunky

84
00:04:25,389 --> 00:04:26,380
is it still

85
00:04:26,380 --> 00:04:30,940
user agent that we want to have on the

86
00:04:30,940 --> 00:04:34,960
web so the question is what a modern

87
00:04:34,960 --> 00:04:43,900
browser is doing in 2018 sorry first

88
00:04:43,900 --> 00:04:47,740
part is how does a web browser work and

89
00:04:47,740 --> 00:04:50,950
especially the rendering engine so this

90
00:04:50,950 --> 00:04:52,630
is quite important to understand a

91
00:04:52,630 --> 00:04:54,100
little bit so that you understand what

92
00:04:54,100 --> 00:04:57,430
changes are happening so the first thing

93
00:04:57,430 --> 00:05:00,580
is your browser is downloading pages its

94
00:05:00,580 --> 00:05:02,590
request handle on the web and it gets

95
00:05:02,590 --> 00:05:06,340
HTML the JavaScript the CSS files and

96
00:05:06,340 --> 00:05:09,490
just pass all these into an HTML parser

97
00:05:09,490 --> 00:05:11,590
as a JavaScript engine the CSS parser

98
00:05:11,590 --> 00:05:14,710
and what it does is to generate the Dom

99
00:05:14,710 --> 00:05:18,640
of nodes so each time you modify the Dom

100
00:05:18,640 --> 00:05:21,100
of nodes the whole process starts again

101
00:05:21,100 --> 00:05:24,520
not downloading but what follow up so

102
00:05:24,520 --> 00:05:27,130
with the CSS the first things to go in a

103
00:05:27,130 --> 00:05:31,150
rendering engine is the stein engine the

104
00:05:31,150 --> 00:05:34,840
styl engine take the CSS and applied and

105
00:05:34,840 --> 00:05:38,410
define what rules are applied to each of

106
00:05:38,410 --> 00:05:40,150
the boxes it doesn't apply them the yet

107
00:05:40,150 --> 00:05:42,430
but you just defined what has a set of

108
00:05:42,430 --> 00:05:46,560
rules that match each element of the Dom

109
00:05:46,560 --> 00:05:49,390
when you have this you add all the media

110
00:05:49,390 --> 00:05:52,330
so the images videos and you can know

111
00:05:52,330 --> 00:05:54,880
the size of the images the size of the

112
00:05:54,880 --> 00:05:56,980
videos and when you have this you have a

113
00:05:56,980 --> 00:05:58,890
face that is a layout which is in fact

114
00:05:58,890 --> 00:06:01,660
defining where on the page will be

115
00:06:01,660 --> 00:06:05,140
displayed each of the boxes you have

116
00:06:05,140 --> 00:06:07,360
several layers because they can be on

117
00:06:07,360 --> 00:06:09,640
top of each others but you don't know

118
00:06:09,640 --> 00:06:12,460
yet what is inside the layers and which

119
00:06:12,460 --> 00:06:15,760
layer is winning the next step is a

120
00:06:15,760 --> 00:06:19,780
paint so this is to apply texture on

121
00:06:19,780 --> 00:06:22,180
each of the layers that will define okay

122
00:06:22,180 --> 00:06:24,610
this texture is the video this texture

123
00:06:24,610 --> 00:06:27,370
is the image this texture is just a

124
00:06:27,370 --> 00:06:30,820
background or some text from this then

125
00:06:30,820 --> 00:06:33,010
you have to define which pixels are

126
00:06:33,010 --> 00:06:34,930
visible this is the next step and the

127
00:06:34,930 --> 00:06:37,150
last step that is a compositor and then

128
00:06:37,150 --> 00:06:40,080
you go to your page on the screen

129
00:06:40,080 --> 00:06:42,780
and each time you modify the Dom you

130
00:06:42,780 --> 00:06:44,220
have to go through this process again

131
00:06:44,220 --> 00:06:47,669
for years and years browser have already

132
00:06:47,669 --> 00:06:50,520
optimized this part by only redesigning

133
00:06:50,520 --> 00:06:52,919
or redrawing the part of the page that

134
00:06:52,919 --> 00:06:55,110
are actually modified when you change

135
00:06:55,110 --> 00:06:57,870
the Dom and not the whole page but this

136
00:06:57,870 --> 00:07:00,330
is really the big the big an important

137
00:07:00,330 --> 00:07:06,240
element atmosphere in order to improve

138
00:07:06,240 --> 00:07:09,690
this we wanted to test new algorithm and

139
00:07:09,690 --> 00:07:11,669
we wanted especially to work on

140
00:07:11,669 --> 00:07:13,919
parallelization so what we have done

141
00:07:13,919 --> 00:07:15,599
first we have created a new language

142
00:07:15,599 --> 00:07:19,710
called rust rust is replacing little by

143
00:07:19,710 --> 00:07:22,250
little the different part of Firefox

144
00:07:22,250 --> 00:07:25,469
written in C++ by by this language and

145
00:07:25,469 --> 00:07:28,020
this language has been designed to make

146
00:07:28,020 --> 00:07:33,800
the writing of of codes that can be

147
00:07:33,800 --> 00:07:36,780
executed on multiple core on multiple

148
00:07:36,780 --> 00:07:39,780
thread much much easier with less errors

149
00:07:39,780 --> 00:07:43,259
than C++ and so that's really important

150
00:07:43,259 --> 00:07:45,150
because a lot of people are contributing

151
00:07:45,150 --> 00:07:48,150
to the code and if even if most people

152
00:07:48,150 --> 00:07:50,430
are really good programmers they do Aero

153
00:07:50,430 --> 00:07:53,270
but you can also get patches for

154
00:07:53,270 --> 00:07:55,740
programmers that less experienced and

155
00:07:55,740 --> 00:07:57,690
they will not do the basics common

156
00:07:57,690 --> 00:08:02,330
errors we created then an experimental

157
00:08:02,330 --> 00:08:05,639
engine and experimental browser called

158
00:08:05,639 --> 00:08:08,370
servo it's written in rust

159
00:08:08,370 --> 00:08:15,110
it has algorithm that take paradism and

160
00:08:15,110 --> 00:08:18,000
that allows us to check if this

161
00:08:18,000 --> 00:08:20,789
algorithm are very working very well and

162
00:08:20,789 --> 00:08:23,729
also it has no significant UI it's not a

163
00:08:23,729 --> 00:08:25,979
real browser it's something to test if

164
00:08:25,979 --> 00:08:28,469
the idea we have are good or not and

165
00:08:28,469 --> 00:08:30,389
finally and this is the most important

166
00:08:30,389 --> 00:08:33,870
part servo can break the web so where is

167
00:08:33,870 --> 00:08:36,899
a very complex piece and there is a lot

168
00:08:36,899 --> 00:08:39,180
of special cases with special CSS

169
00:08:39,180 --> 00:08:41,550
properties and so on and in fact to test

170
00:08:41,550 --> 00:08:43,440
the algorithm you don't want to have to

171
00:08:43,440 --> 00:08:46,350
write the engine in all the detail first

172
00:08:46,350 --> 00:08:48,180
you won't first validate that in the

173
00:08:48,180 --> 00:08:50,730
good case in the easy case you get the

174
00:08:50,730 --> 00:08:53,700
speed improvements that you were you

175
00:08:53,700 --> 00:08:58,290
to have so we did this several and we

176
00:08:58,290 --> 00:09:03,810
developed a lot of things on it at the

177
00:09:03,810 --> 00:09:06,360
same time we wanted to solve several

178
00:09:06,360 --> 00:09:09,030
other problems so a firefox had a

179
00:09:09,030 --> 00:09:11,010
stability problem we noticed over the

180
00:09:11,010 --> 00:09:12,900
last few years that he was has a lot of

181
00:09:12,900 --> 00:09:16,380
crashes and we were wondering why it has

182
00:09:16,380 --> 00:09:18,420
an old theme so like the robots that

183
00:09:18,420 --> 00:09:21,000
were loop is just looking old by just

184
00:09:21,000 --> 00:09:25,380
having an old theme when the UI in OSS

185
00:09:25,380 --> 00:09:27,090
has been improved

186
00:09:27,090 --> 00:09:29,820
it feels slow and also there was a lot

187
00:09:29,820 --> 00:09:31,950
of cases where in fact the user

188
00:09:31,950 --> 00:09:33,810
interface was freezing

189
00:09:33,810 --> 00:09:36,510
it's called UI young and finally we

190
00:09:36,510 --> 00:09:38,340
wanted to increase to have the new

191
00:09:38,340 --> 00:09:45,710
algorithm so we launched we launched a

192
00:09:45,710 --> 00:09:50,550
project called quantum la the beginning

193
00:09:50,550 --> 00:09:52,770
of last year and we decided we want to

194
00:09:52,770 --> 00:09:54,720
make a quantum leap in performance and

195
00:09:54,720 --> 00:10:00,020
in the way the website are rendered

196
00:10:00,020 --> 00:10:02,070
there are several things that has been

197
00:10:02,070 --> 00:10:04,590
done but the first thing and I want

198
00:10:04,590 --> 00:10:06,030
first to thank my colleague 9 o'clock

199
00:10:06,030 --> 00:10:13,020
who has drawn this amazing drawing I'm

200
00:10:13,020 --> 00:10:16,650
absolutely unable unable to to make any

201
00:10:16,650 --> 00:10:20,460
drawings that looks readable by anybody

202
00:10:20,460 --> 00:10:23,520
so she's doing a lot of these drawings

203
00:10:23,520 --> 00:10:25,680
she's writing blog post explaining how a

204
00:10:25,680 --> 00:10:26,880
browser is working

205
00:10:26,880 --> 00:10:29,970
there will be a link later that allow

206
00:10:29,970 --> 00:10:31,950
you to have more information so the

207
00:10:31,950 --> 00:10:33,660
first things that we have decided to do

208
00:10:33,660 --> 00:10:37,470
is to change our Stan engine so the

209
00:10:37,470 --> 00:10:40,200
style engine as I said take the

210
00:10:40,200 --> 00:10:43,670
different CSS properties look at the

211
00:10:43,670 --> 00:10:47,100
selectors at the specification and in

212
00:10:47,100 --> 00:10:50,190
fact for each of the boxes define ok

213
00:10:50,190 --> 00:10:52,710
these properties with this value apply

214
00:10:52,710 --> 00:10:54,780
to this one for example the background

215
00:10:54,780 --> 00:10:59,250
color of the text color as a font and so

216
00:10:59,250 --> 00:11:02,430
on this is something that has to be done

217
00:11:02,430 --> 00:11:05,760
to each and every boxes so this is at

218
00:11:05,760 --> 00:11:07,530
first sight something that can be

219
00:11:07,530 --> 00:11:11,760
use very easily to with a parallel with

220
00:11:11,760 --> 00:11:17,370
paralyzation and so we tried it in rust

221
00:11:17,370 --> 00:11:21,170
on style so basically we had several

222
00:11:21,170 --> 00:11:24,120
processes several threads that takes

223
00:11:24,120 --> 00:11:25,530
part of the tree and makes the

224
00:11:25,530 --> 00:11:28,140
calculation and of course it's not that

225
00:11:28,140 --> 00:11:31,320
easy because first you don't have one

226
00:11:31,320 --> 00:11:34,260
thread one process per element on the

227
00:11:34,260 --> 00:11:35,910
page because are sometimes several

228
00:11:35,910 --> 00:11:39,510
thousand of them so you have to give

229
00:11:39,510 --> 00:11:41,550
chunk of the page to each of the

230
00:11:41,550 --> 00:11:44,100
processes so that means that some of

231
00:11:44,100 --> 00:11:46,980
this process are just idle at some point

232
00:11:46,980 --> 00:11:49,320
because there is nothing happening is I

233
00:11:49,320 --> 00:11:50,880
finished their work while other may be

234
00:11:50,880 --> 00:11:53,400
extremely busy so there is a very big

235
00:11:53,400 --> 00:11:56,310
complex algorithm here that allows the

236
00:11:56,310 --> 00:11:58,200
different threads or different processes

237
00:11:58,200 --> 00:12:01,260
to still work from the other when they

238
00:12:01,260 --> 00:12:08,210
are idle so with this we created and we

239
00:12:08,210 --> 00:12:12,440
validated that's a new way of doing

240
00:12:12,440 --> 00:12:16,110
styling in the browser is in fact much

241
00:12:16,110 --> 00:12:19,200
much more efficient but that was only

242
00:12:19,200 --> 00:12:20,970
the first step because this is in

243
00:12:20,970 --> 00:12:23,339
several in the experimental browser we

244
00:12:23,339 --> 00:12:25,530
needed to sort out all the detail and to

245
00:12:25,530 --> 00:12:29,089
integrate this into the real browser and

246
00:12:29,089 --> 00:12:31,380
integrating a new styling gene in a

247
00:12:31,380 --> 00:12:33,830
browser it's a little bit like doing

248
00:12:33,830 --> 00:12:37,860
heart surgery but with a person that is

249
00:12:37,860 --> 00:12:39,089
still conscious

250
00:12:39,089 --> 00:12:43,050
you you want to browser to continue to

251
00:12:43,050 --> 00:12:45,390
work you don't want suddenly have no new

252
00:12:45,390 --> 00:12:49,110
release for one year two years while you

253
00:12:49,110 --> 00:12:52,230
put all the wire together so we took the

254
00:12:52,230 --> 00:12:55,140
stylus or quantum CSS with a parallelism

255
00:12:55,140 --> 00:12:57,570
we integrate it with a rule tree from

256
00:12:57,570 --> 00:13:00,270
Firefox and also we took the staggering

257
00:13:00,270 --> 00:13:03,210
cache from Chrome and Safari so the

258
00:13:03,210 --> 00:13:07,110
start sharing cache just memorize things

259
00:13:07,110 --> 00:13:08,520
you have already calculated because

260
00:13:08,520 --> 00:13:10,589
sometimes on the page a lot of nodes

261
00:13:10,589 --> 00:13:12,630
have the same ancestors and the same

262
00:13:12,630 --> 00:13:17,040
values so it works pretty well in fact

263
00:13:17,040 --> 00:13:18,600
it wasn't working that well anymore

264
00:13:18,600 --> 00:13:21,180
because lately with all

265
00:13:21,180 --> 00:13:23,670
you do classes and so on it became more

266
00:13:23,670 --> 00:13:24,990
complex and there are less of these

267
00:13:24,990 --> 00:13:29,220
elements that are there that were cashed

268
00:13:29,220 --> 00:13:32,310
so we modified so start sharing cash in

269
00:13:32,310 --> 00:13:36,090
orders for it to work again and then we

270
00:13:36,090 --> 00:13:39,720
just transplanted stylo into the browser

271
00:13:39,720 --> 00:13:42,390
and this happened last November in

272
00:13:42,390 --> 00:13:45,390
Firefox 57 and we got for this spot a

273
00:13:45,390 --> 00:13:49,200
very very large improvement in speed so

274
00:13:49,200 --> 00:13:51,150
style is the first technology transfer

275
00:13:51,150 --> 00:13:54,300
from several it's not the first part of

276
00:13:54,300 --> 00:13:57,450
rust inside the browser and it is

277
00:13:57,450 --> 00:13:59,370
solving a problem that is called

278
00:13:59,370 --> 00:14:01,590
embarrassingly parallel problem by

279
00:14:01,590 --> 00:14:04,230
definition style engine are doing

280
00:14:04,230 --> 00:14:06,920
something that can be massively

281
00:14:06,920 --> 00:14:11,550
paralyzed and of course when the page is

282
00:14:11,550 --> 00:14:14,130
simple you see little improvement when

283
00:14:14,130 --> 00:14:16,440
the page is very complex you see a lot

284
00:14:16,440 --> 00:14:24,390
of improvement browser has another

285
00:14:24,390 --> 00:14:28,290
challenge each time you click somewhere

286
00:14:28,290 --> 00:14:31,190
on the browser there is an even handler

287
00:14:31,190 --> 00:14:34,320
going on and firing and executing some

288
00:14:34,320 --> 00:14:38,310
code and you want to be sure if you want

289
00:14:38,310 --> 00:14:40,620
to have 60 frames per second or 120

290
00:14:40,620 --> 00:14:43,230
frames per second that all that's

291
00:14:43,230 --> 00:14:45,390
happening on the main thread and

292
00:14:45,390 --> 00:14:48,600
especially these handlers happening is

293
00:14:48,600 --> 00:14:51,660
no more than 16 millisecond or 8

294
00:14:51,660 --> 00:14:54,810
millisecond for 120 frame per second so

295
00:14:54,810 --> 00:14:56,220
that means that you have to go out of

296
00:14:56,220 --> 00:14:58,140
the main straight as soon as possible

297
00:14:58,140 --> 00:15:00,000
because while you're on the main thread

298
00:15:00,000 --> 00:15:03,150
you cannot handle the next even so

299
00:15:03,150 --> 00:15:05,430
Lex even when you are calling a page or

300
00:15:05,430 --> 00:15:08,890
when you are clicking and so on

301
00:15:08,900 --> 00:15:12,240
initially browser had everything on the

302
00:15:12,240 --> 00:15:13,890
main thread and little by little over

303
00:15:13,890 --> 00:15:16,170
the years I start to take things out so

304
00:15:16,170 --> 00:15:18,420
first of of them is a video decoding

305
00:15:18,420 --> 00:15:20,400
that is happening now most of the time

306
00:15:20,400 --> 00:15:23,670
on the graphic cloud itself there was a

307
00:15:23,670 --> 00:15:27,840
plugins also a display canvas worker and

308
00:15:27,840 --> 00:15:29,760
several others but what is quite

309
00:15:29,760 --> 00:15:32,760
interesting is

310
00:15:32,760 --> 00:15:36,750
we have another piece of computer power

311
00:15:36,750 --> 00:15:48,500
on a browser that is a GPU the GPU is

312
00:15:48,500 --> 00:15:52,380
designed for games is designed for the

313
00:15:52,380 --> 00:15:54,270
operating system where you have a lot of

314
00:15:54,270 --> 00:15:57,960
calculation to do on a lot of data the

315
00:15:57,960 --> 00:16:00,540
same operation on a very large amount of

316
00:16:00,540 --> 00:16:03,210
data and it's very very efficient for

317
00:16:03,210 --> 00:16:04,890
this kind of things it's very efficient

318
00:16:04,890 --> 00:16:08,880
for gaming on the browser we have this

319
00:16:08,880 --> 00:16:10,500
kind of operation one of them is a

320
00:16:10,500 --> 00:16:13,680
compositing so the last bit of the

321
00:16:13,680 --> 00:16:15,240
calculation where you have all the

322
00:16:15,240 --> 00:16:17,160
layers and you have to define which one

323
00:16:17,160 --> 00:16:18,450
are visible or not it's the same

324
00:16:18,450 --> 00:16:20,940
operation most of the time on a lot of

325
00:16:20,940 --> 00:16:25,610
data so we decided in 2016 to offload

326
00:16:25,610 --> 00:16:28,530
the composition to the GPU and we did it

327
00:16:28,530 --> 00:16:31,680
and improve a lot at the same time a

328
00:16:31,680 --> 00:16:34,020
little bit later in fact we notice that

329
00:16:34,020 --> 00:16:37,590
the crash is just increased we had a lot

330
00:16:37,590 --> 00:16:40,770
of crashes and in fact it wasn't the

331
00:16:40,770 --> 00:16:42,420
browser itself that was buggy it was the

332
00:16:42,420 --> 00:16:43,920
drivers that were Birdie

333
00:16:43,920 --> 00:16:46,140
so the crash the crashes were mostly

334
00:16:46,140 --> 00:16:48,510
happening on Windows and for example Mac

335
00:16:48,510 --> 00:16:51,780
has very few few grush crashes because

336
00:16:51,780 --> 00:16:54,930
of farlis type of divert for less types

337
00:16:54,930 --> 00:16:59,070
of graphic cards and less bugs so we

338
00:16:59,070 --> 00:17:00,930
decided last year to solve the crashes

339
00:17:00,930 --> 00:17:05,339
by having the GPU in the graphic drivers

340
00:17:05,339 --> 00:17:07,310
load in a different process so the

341
00:17:07,310 --> 00:17:10,829
process crash the browser detected crash

342
00:17:10,829 --> 00:17:13,440
it's restarted and then it works without

343
00:17:13,440 --> 00:17:16,050
using the GPU for this part so you don't

344
00:17:16,050 --> 00:17:18,480
have all the speed improvement of the

345
00:17:18,480 --> 00:17:20,220
GPU but you don't have the crashes

346
00:17:20,220 --> 00:17:22,350
either so that's a way we had to

347
00:17:22,350 --> 00:17:27,630
mitigate the bugs in graphic drivers so

348
00:17:27,630 --> 00:17:29,040
the compositor is the first part that

349
00:17:29,040 --> 00:17:33,180
went to the GPU at the beginning of last

350
00:17:33,180 --> 00:17:37,650
year another part is a painting so the

351
00:17:37,650 --> 00:17:39,630
painting is to take a texture and to

352
00:17:39,630 --> 00:17:41,640
apply it to the surface it's cool or

353
00:17:41,640 --> 00:17:43,980
rasterization and we want to do the same

354
00:17:43,980 --> 00:17:46,169
off-roading li2 GPU

355
00:17:46,169 --> 00:17:48,989
and this is a project called WebRunner

356
00:17:48,989 --> 00:17:51,379
it's not yet finished it's in progress

357
00:17:51,379 --> 00:17:54,629
this is ultimate goal I don't know when

358
00:17:54,629 --> 00:17:56,340
it will be finished because if you asks

359
00:17:56,340 --> 00:17:58,619
management they say very soon and if you

360
00:17:58,619 --> 00:18:01,019
ask the developers I say oh in several

361
00:18:01,019 --> 00:18:01,379
years

362
00:18:01,379 --> 00:18:05,499
so it's some somewhere in between

363
00:18:05,509 --> 00:18:10,080
meanwhile we decided that okay even if

364
00:18:10,080 --> 00:18:11,639
we don't send it to the GPU

365
00:18:11,639 --> 00:18:14,999
we can remove it from the main thread so

366
00:18:14,999 --> 00:18:17,100
we have what we call off main straight

367
00:18:17,100 --> 00:18:18,570
painting just what's right for the

368
00:18:18,570 --> 00:18:20,429
painting and this has been done in

369
00:18:20,429 --> 00:18:24,059
Firefox 58 which went out in January so

370
00:18:24,059 --> 00:18:28,259
basically we create a set of instruction

371
00:18:28,259 --> 00:18:30,840
the display list that is applied to

372
00:18:30,840 --> 00:18:34,109
assign to the layers and then we send it

373
00:18:34,109 --> 00:18:36,629
to another process that rasterize which

374
00:18:36,629 --> 00:18:41,009
is actual painting operation and then

375
00:18:41,009 --> 00:18:43,169
sent to the compositor that is in its

376
00:18:43,169 --> 00:18:48,210
own process or on the GPU and that way

377
00:18:48,210 --> 00:18:50,909
as soon as the rasterization is no more

378
00:18:50,909 --> 00:18:53,249
on the main thread so that means that

379
00:18:53,249 --> 00:18:55,409
you can trace the next displaylist and

380
00:18:55,409 --> 00:18:57,359
so on so we remove the bottleneck it's

381
00:18:57,359 --> 00:18:59,249
not as perfect as having everything on

382
00:18:59,249 --> 00:19:01,679
the GPU we still sometimes lose frames

383
00:19:01,679 --> 00:19:03,929
when it's gone a lot of changes but much

384
00:19:03,929 --> 00:19:05,669
less of it's no more the rasterization

385
00:19:05,669 --> 00:19:09,690
the problem so this landed in Firefox 58

386
00:19:09,690 --> 00:19:11,580
and there is an improvement coming the

387
00:19:11,580 --> 00:19:14,159
next version into it where in fact we

388
00:19:14,159 --> 00:19:16,019
discover that this Palast we don't need

389
00:19:16,019 --> 00:19:18,629
to recalculate it each time for simple

390
00:19:18,629 --> 00:19:21,119
but it's not the most efficient so now

391
00:19:21,119 --> 00:19:23,489
we have you ristic in place so that we

392
00:19:23,489 --> 00:19:25,499
don't recalculate so this play list was

393
00:19:25,499 --> 00:19:30,639
a who loved the display list each time

394
00:19:30,649 --> 00:19:33,690
so until now we have mostly seen

395
00:19:33,690 --> 00:19:37,789
replacement of pieces of the browser and

396
00:19:37,789 --> 00:19:40,649
in fact if you want to have a browser

397
00:19:40,649 --> 00:19:44,389
that is efficient that feel quick

398
00:19:44,389 --> 00:19:47,549
responsive you need to consider it as a

399
00:19:47,549 --> 00:19:50,220
system as a whole because yes you can

400
00:19:50,220 --> 00:19:52,619
have a very efficient style engine but

401
00:19:52,619 --> 00:19:56,099
maybe the bottleneck is somewhere ads so

402
00:19:56,099 --> 00:19:58,710
we changed a way to do development

403
00:19:58,710 --> 00:20:01,610
and to prioritize the development masya

404
00:20:01,610 --> 00:20:04,500
by having the moto measure all the

405
00:20:04,500 --> 00:20:07,140
things then we triage we prioritize and

406
00:20:07,140 --> 00:20:10,620
weary measure and we applied this and we

407
00:20:10,620 --> 00:20:13,020
still apply this to fight young so

408
00:20:13,020 --> 00:20:16,860
freeze in the UI and there is a

409
00:20:16,860 --> 00:20:19,799
collection of 30 blog post by Asian act

410
00:20:19,799 --> 00:20:22,860
Garin that explain all the changes that

411
00:20:22,860 --> 00:20:24,539
happen all over the place it's it's

412
00:20:24,539 --> 00:20:28,230
going on a lot of details and she calls

413
00:20:28,230 --> 00:20:30,809
her name death by a million cuts we

414
00:20:30,809 --> 00:20:33,840
found bugs where we had to fix ten bugs

415
00:20:33,840 --> 00:20:37,260
and suddenly we get back a lot of time

416
00:20:37,260 --> 00:20:39,450
each of the bug individually in the

417
00:20:39,450 --> 00:20:41,789
individual fix were just shaving one

418
00:20:41,789 --> 00:20:43,230
millisecond here there but no

419
00:20:43,230 --> 00:20:44,940
significant difference but the ten

420
00:20:44,940 --> 00:20:47,029
together we're leaving a lot of

421
00:20:47,029 --> 00:20:50,669
differences so one of the things that we

422
00:20:50,669 --> 00:20:52,200
change is a way we were doing is

423
00:20:52,200 --> 00:20:54,350
crawling it's it's not specific to

424
00:20:54,350 --> 00:20:56,789
Firefox at all and it has been pioneered

425
00:20:56,789 --> 00:20:59,460
by Apple and it's called checkerboarding

426
00:20:59,460 --> 00:21:03,149
you when you scroll on your screen with

427
00:21:03,149 --> 00:21:07,049
a mouse with the finger you never want

428
00:21:07,049 --> 00:21:10,080
to scroll to stop but sometimes it goes

429
00:21:10,080 --> 00:21:12,330
too quick and you don't have the time to

430
00:21:12,330 --> 00:21:14,279
calculate what to present to the screen

431
00:21:14,279 --> 00:21:16,230
so you present a default value and

432
00:21:16,230 --> 00:21:19,529
people instead of being confused scroll

433
00:21:19,529 --> 00:21:23,039
less quickly the data appear the images

434
00:21:23,039 --> 00:21:25,380
appear and initially it was a chick

435
00:21:25,380 --> 00:21:26,090
abort

436
00:21:26,090 --> 00:21:28,830
that's why it's called Chicka bowling so

437
00:21:28,830 --> 00:21:32,149
the the X overall speed is not better

438
00:21:32,149 --> 00:21:36,169
but the feeling is completely different

439
00:21:36,169 --> 00:21:39,059
and those are big things that we have

440
00:21:39,059 --> 00:21:41,960
changes what we call IPC inter-process

441
00:21:41,960 --> 00:21:44,279
communication so it's known for a long

442
00:21:44,279 --> 00:21:46,950
time that when you communicate for

443
00:21:46,950 --> 00:21:49,470
example with a disc it takes a lot of

444
00:21:49,470 --> 00:21:51,120
time and you don't want to do this on

445
00:21:51,120 --> 00:21:54,929
the hub on the main thread it's the same

446
00:21:54,929 --> 00:21:57,210
when you communicate with another

447
00:21:57,210 --> 00:21:59,669
process especially if it's synchronous

448
00:21:59,669 --> 00:22:02,460
communication you don't want to do this

449
00:22:02,460 --> 00:22:05,159
on the main thread so we fight

450
00:22:05,159 --> 00:22:07,049
synchronous communication and you want

451
00:22:07,049 --> 00:22:08,639
it to have as many as synchronous

452
00:22:08,639 --> 00:22:10,380
communication at all and this is where

453
00:22:10,380 --> 00:22:12,150
we did a lot of merger and so on

454
00:22:12,150 --> 00:22:14,190
there was for example two people working

455
00:22:14,190 --> 00:22:17,730
for six months on the cookies because

456
00:22:17,730 --> 00:22:21,690
cookies were needed a lot of synchronous

457
00:22:21,690 --> 00:22:23,370
communication they rewrote completely

458
00:22:23,370 --> 00:22:26,130
the cookie mechanism in Firefox and in

459
00:22:26,130 --> 00:22:30,890
fact it was 25% of our block blocking on

460
00:22:30,890 --> 00:22:33,900
inter process communication and on big

461
00:22:33,900 --> 00:22:36,870
website when it was fixed like Facebook

462
00:22:36,870 --> 00:22:40,140
is making several written write several

463
00:22:40,140 --> 00:22:43,170
times per second to the cookie store in

464
00:22:43,170 --> 00:22:47,220
this website like Twitter or Facebook we

465
00:22:47,220 --> 00:22:50,100
were able to win in the order of the

466
00:22:50,100 --> 00:22:53,820
second in the time we need to display

467
00:22:53,820 --> 00:22:56,460
the page so as other offenders like

468
00:22:56,460 --> 00:22:59,010
plugins but plugins are gone today

469
00:22:59,010 --> 00:23:02,280
other traditional extension on Firefox

470
00:23:02,280 --> 00:23:04,170
on Zul extension also we're on offender

471
00:23:04,170 --> 00:23:09,030
so we had to define to decide to stop

472
00:23:09,030 --> 00:23:15,120
having that there are plenty of other

473
00:23:15,120 --> 00:23:17,130
things that we have done for example we

474
00:23:17,130 --> 00:23:20,130
have changed some algorithm just till

475
00:23:20,130 --> 00:23:23,340
efficient but they were already

476
00:23:23,340 --> 00:23:25,680
efficient but in fact sometimes they

477
00:23:25,680 --> 00:23:28,260
were not making usage good use of the

478
00:23:28,260 --> 00:23:31,200
cache so we keep an algorithm with the

479
00:23:31,200 --> 00:23:33,990
same complexity but that works better

480
00:23:33,990 --> 00:23:36,300
with a cache for example and suddenly

481
00:23:36,300 --> 00:23:38,850
you have an improvement of your

482
00:23:38,850 --> 00:23:43,080
performance on complex pages that with

483
00:23:43,080 --> 00:23:44,960
the same complexity of the algorithm

484
00:23:44,960 --> 00:23:47,610
also the garbage collection so the part

485
00:23:47,610 --> 00:23:50,730
that take back the memory has been

486
00:23:50,730 --> 00:23:52,410
changed instead of having to do a

487
00:23:52,410 --> 00:23:56,280
complete sweep or we can now do an

488
00:23:56,280 --> 00:23:58,740
incremental sweep so we take a bit of

489
00:23:58,740 --> 00:24:00,960
the memory we stop because we have only

490
00:24:00,960 --> 00:24:03,150
a few milliseconds and then we continue

491
00:24:03,150 --> 00:24:05,280
later so that means that the memory grow

492
00:24:05,280 --> 00:24:07,680
a little bit but when the browser is

493
00:24:07,680 --> 00:24:10,950
idle it go back to normal at the same

494
00:24:10,950 --> 00:24:12,690
time we notice that memory that is used

495
00:24:12,690 --> 00:24:16,410
on towards the end very quickly and so

496
00:24:16,410 --> 00:24:19,410
on is the ones that usually is released

497
00:24:19,410 --> 00:24:21,510
very quickly and what you have are done

498
00:24:21,510 --> 00:24:24,390
I don't know two hours before usually

499
00:24:24,390 --> 00:24:25,950
you will keep it until you

500
00:24:25,950 --> 00:24:28,860
the browser so we also have as changes

501
00:24:28,860 --> 00:24:32,279
these kind of things in the last thing

502
00:24:32,279 --> 00:24:34,590
is we try to remove old timers in the

503
00:24:34,590 --> 00:24:39,139
interface timers are really really bad

504
00:24:39,139 --> 00:24:43,320
at first time first look it looks very

505
00:24:43,320 --> 00:24:45,360
nice because you delays execution later

506
00:24:45,360 --> 00:24:47,519
but in fact you don't control when the

507
00:24:47,519 --> 00:24:49,740
execution will happen and when the timer

508
00:24:49,740 --> 00:24:51,929
will fire not only it will find the main

509
00:24:51,929 --> 00:24:54,630
thread but maybe it's a moment that is

510
00:24:54,630 --> 00:24:56,610
important for something else you have no

511
00:24:56,610 --> 00:24:58,799
control so in fact the web platform in

512
00:24:58,799 --> 00:25:01,169
this can be used also on website we have

513
00:25:01,169 --> 00:25:02,909
now request either callbacks let's say

514
00:25:02,909 --> 00:25:06,510
fire this or do this when the main

515
00:25:06,510 --> 00:25:10,830
stride is free we also did things like

516
00:25:10,830 --> 00:25:14,309
throttling background tabs so if it is

517
00:25:14,309 --> 00:25:16,110
in the back it's less important but of

518
00:25:16,110 --> 00:25:17,610
course if there are music playing in the

519
00:25:17,610 --> 00:25:19,860
back you don't want your musics to stop

520
00:25:19,860 --> 00:25:21,899
so we are very very defensive here and

521
00:25:21,899 --> 00:25:26,940
we process with experimentation and

522
00:25:26,940 --> 00:25:30,470
finally we redesign our user interface

523
00:25:30,470 --> 00:25:33,149
so the feeling of the user interface is

524
00:25:33,149 --> 00:25:36,299
something really important so the look

525
00:25:36,299 --> 00:25:39,179
has to look modern and it doesn't change

526
00:25:39,179 --> 00:25:41,100
the speed it change the perception of

527
00:25:41,100 --> 00:25:45,240
the speed one thing we change is every

528
00:25:45,240 --> 00:25:47,610
animation now is happening on the GPU is

529
00:25:47,610 --> 00:25:50,370
happening through CSS we had in the

530
00:25:50,370 --> 00:25:52,440
previous interface still animation down

531
00:25:52,440 --> 00:25:55,019
in JavaScript and they were causing a

532
00:25:55,019 --> 00:25:57,809
good deal of the yup so that's that's

533
00:25:57,809 --> 00:26:01,919
really important that animation not in

534
00:26:01,919 --> 00:26:05,399
JavaScript on the main thread we change

535
00:26:05,399 --> 00:26:06,510
a bit the structure of the user

536
00:26:06,510 --> 00:26:09,240
interface so it's quicker for the user

537
00:26:09,240 --> 00:26:11,760
to find elements it's not quicker and

538
00:26:11,760 --> 00:26:14,490
speed proper but it's quicker for the

539
00:26:14,490 --> 00:26:17,639
user so with all these things together

540
00:26:17,639 --> 00:26:22,230
we have now a new engine and it looks

541
00:26:22,230 --> 00:26:25,980
still a user agent still a nice robot

542
00:26:25,980 --> 00:26:32,130
but it looks much more modern and it's

543
00:26:32,130 --> 00:26:35,279
not finished in fact quantum was

544
00:26:35,279 --> 00:26:37,500
released in November but already is a 2

545
00:26:37,500 --> 00:26:39,860
next version of the browser had more

546
00:26:39,860 --> 00:26:42,120
improvements or web render is coming

547
00:26:42,120 --> 00:26:45,510
soon at some point we have other ideas

548
00:26:45,510 --> 00:26:47,790
to improve things and in general

549
00:26:47,790 --> 00:26:50,460
browsers are still evolving it's it's

550
00:26:50,460 --> 00:26:53,040
not the end it's it's a new beginning

551
00:26:53,040 --> 00:26:54,930
because it's the first time we have now

552
00:26:54,930 --> 00:26:56,820
this power of having a massive

553
00:26:56,820 --> 00:27:00,360
parallelism on a browser so I want to

554
00:27:00,360 --> 00:27:01,530
thank you too

555
00:27:01,530 --> 00:27:05,160
here also you can help by installing

556
00:27:05,160 --> 00:27:07,320
firefox nightly by reporting problem

557
00:27:07,320 --> 00:27:09,390
especially when your application or your

558
00:27:09,390 --> 00:27:11,400
website is much slower and firefox and

559
00:27:11,400 --> 00:27:13,380
in lhasa browser this interests us

560
00:27:13,380 --> 00:27:15,210
because it's difficult to have real-life

561
00:27:15,210 --> 00:27:18,450
data each time we do a commit there are

562
00:27:18,450 --> 00:27:21,030
two thousand hours of tests going on on

563
00:27:21,030 --> 00:27:24,090
a term of computers but it's test it's

564
00:27:24,090 --> 00:27:26,460
not real life things so if you file

565
00:27:26,460 --> 00:27:30,480
about say you can give help by

566
00:27:30,480 --> 00:27:32,520
reproducing it engineer will be very

567
00:27:32,520 --> 00:27:37,020
happy spread the word we want as many

568
00:27:37,020 --> 00:27:38,940
people to use as many browser as

569
00:27:38,940 --> 00:27:41,490
possible firefox if possible to because

570
00:27:41,490 --> 00:27:43,560
competition is good that's a way we

571
00:27:43,560 --> 00:27:45,990
improve speed and firefox nightly

572
00:27:45,990 --> 00:27:48,420
twitter account is where to stay info

573
00:27:48,420 --> 00:27:49,510
thank you

