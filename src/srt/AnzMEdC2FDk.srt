1
00:00:35,000 --> 00:00:36,800

so it's called jelly stains thoughts on

2
00:00:36,800 --> 00:00:39,830
JavaScript Lisbon play so this is sort

3
00:00:39,830 --> 00:00:42,290
of a a personal you actually you're

4
00:00:42,290 --> 00:00:43,460
probably wondering with number one why

5
00:00:43,460 --> 00:00:45,080
is this presentation called jelly stains

6
00:00:45,080 --> 00:00:46,730
and why do I have pictures of zebras

7
00:00:46,730 --> 00:00:48,260
hopefully by the end of the talk he'll

8
00:00:48,260 --> 00:00:52,070
still be confused so this is sort of a

9
00:00:52,070 --> 00:00:54,320
personal story on my own journey through

10
00:00:54,320 --> 00:00:57,170
JavaScript Lisp and some some notions

11
00:00:57,170 --> 00:00:59,390
about play I'm not going to spend that

12
00:00:59,390 --> 00:01:00,739
much time in JavaScript this is Jay s

13
00:01:00,739 --> 00:01:02,570
Kampf after all I'm gonna spend a little

14
00:01:02,570 --> 00:01:04,250
bit of time on Lisp and then I'm going

15
00:01:04,250 --> 00:01:06,140
to spend a lot of time on this this idea

16
00:01:06,140 --> 00:01:11,180
of play so this talk is you might this

17
00:01:11,180 --> 00:01:12,530
talk was sort of advertised as being

18
00:01:12,530 --> 00:01:14,000
about closure script and I will show

19
00:01:14,000 --> 00:01:15,649
some closure script but I think the talk

20
00:01:15,649 --> 00:01:17,479
is about bigger ideas than enclosure

21
00:01:17,479 --> 00:01:19,100
script in particular so I came to

22
00:01:19,100 --> 00:01:21,950
JavaScript in 2005 I was living in New

23
00:01:21,950 --> 00:01:24,440
York City I ended up doing some a lot of

24
00:01:24,440 --> 00:01:26,060
front-end work in JavaScript I ended up

25
00:01:26,060 --> 00:01:27,830
falling in love with the language as we

26
00:01:27,830 --> 00:01:29,509
all know JavaScript was created by this

27
00:01:29,509 --> 00:01:32,600
guy he took some interesting ideas from

28
00:01:32,600 --> 00:01:33,920
a minimalist functional programming

29
00:01:33,920 --> 00:01:36,200
language called scheme he took some some

30
00:01:36,200 --> 00:01:38,240
ideas from a minimalist functional

31
00:01:38,240 --> 00:01:39,920
programming language called self and he

32
00:01:39,920 --> 00:01:41,240
took some syntax from this language

33
00:01:41,240 --> 00:01:43,310
called Java which supposedly was

34
00:01:43,310 --> 00:01:44,600
supposed to be the next big thing and

35
00:01:44,600 --> 00:01:46,640
maybe it's turning out that on different

36
00:01:46,640 --> 00:01:48,070
languages gonna be the next big thing

37
00:01:48,070 --> 00:01:51,860
so as JavaScript developers on the front

38
00:01:51,860 --> 00:01:53,150
end and increasingly on the back end

39
00:01:53,150 --> 00:01:55,130
we're asked to solve very hard problems

40
00:01:55,130 --> 00:01:56,900
I think I was very surprised when I was

41
00:01:56,900 --> 00:01:59,360
doing sort of rich interfaces just how

42
00:01:59,360 --> 00:02:01,700
hard front-end development really is so

43
00:02:01,700 --> 00:02:03,770
we often grow tools to address

44
00:02:03,770 --> 00:02:06,020
deficiencies in our tools I might be MIT

45
00:02:06,020 --> 00:02:07,340
building libraries building frameworks

46
00:02:07,340 --> 00:02:10,910
whatever but the big idea in this talk

47
00:02:10,910 --> 00:02:12,829
is that programming languages themselves

48
00:02:12,829 --> 00:02:17,120
are tools just like any other and we're

49
00:02:17,120 --> 00:02:18,079
going to sort of look at the

50
00:02:18,079 --> 00:02:24,260
implications of that so so the the big

51
00:02:24,260 --> 00:02:26,780
idea here is you know that you know we

52
00:02:26,780 --> 00:02:29,630
grow tools because we really can only

53
00:02:29,630 --> 00:02:31,790
manage seven plus or minus two things in

54
00:02:31,790 --> 00:02:34,130
our heads Alan Kay likes to talk about

55
00:02:34,130 --> 00:02:35,570
this a lot I'm going to quote him quite

56
00:02:35,570 --> 00:02:37,970
a few times so it's it's unfortunate

57
00:02:37,970 --> 00:02:39,560
when tools and software methodologies

58
00:02:39,560 --> 00:02:41,570
steal these precious seven plus or minus

59
00:02:41,570 --> 00:02:43,819
two things because we can't focus on

60
00:02:43,819 --> 00:02:47,629
making insanely great stuff so that

61
00:02:47,629 --> 00:02:48,740
brings us Lisp I think

62
00:02:48,740 --> 00:02:50,960
ashle Lisp is an insanely great idea I

63
00:02:50,960 --> 00:02:53,840
had messed around scheme in 2003 but it

64
00:02:53,840 --> 00:02:55,730
wasn't until summer of 2008 I was in

65
00:02:55,730 --> 00:02:57,170
between client projects and I was like

66
00:02:57,170 --> 00:02:58,990
I'm gonna really figure out what this

67
00:02:58,990 --> 00:03:01,430
listing is about and so I spent three

68
00:03:01,430 --> 00:03:02,900
months in my Brooklyn studio just

69
00:03:02,900 --> 00:03:05,390
messing around with this so the list was

70
00:03:05,390 --> 00:03:07,430
invented by John McCarthy in 1957 to

71
00:03:07,430 --> 00:03:09,230
tackle the problem of artificial

72
00:03:09,230 --> 00:03:11,720
intelligence I think he was a great

73
00:03:11,720 --> 00:03:13,820
computer scientist I think still to this

74
00:03:13,820 --> 00:03:16,010
day we haven't really fully understood

75
00:03:16,010 --> 00:03:18,170
the implications of of what he invented

76
00:03:18,170 --> 00:03:20,420
it's sad sad he passed away last year

77
00:03:20,420 --> 00:03:22,670
and this this talk is sort of a bit of a

78
00:03:22,670 --> 00:03:24,380
personal mission to make sure that

79
00:03:24,380 --> 00:03:26,870
people don't forget the ideas that he's

80
00:03:26,870 --> 00:03:30,200
contributed to our craft and art so this

81
00:03:30,200 --> 00:03:33,200
is a page from the list 1.5 programmers

82
00:03:33,200 --> 00:03:35,660
manual this is the bottom half of this

83
00:03:35,660 --> 00:03:38,000
page is often celebrated by Alan Kay as

84
00:03:38,000 --> 00:03:39,980
the Maxwell's equations of software

85
00:03:39,980 --> 00:03:41,480
because of the bottom half of this page

86
00:03:41,480 --> 00:03:43,640
is eval and apply and that's all that

87
00:03:43,640 --> 00:03:45,410
you need to bootstrap lists that's it

88
00:03:45,410 --> 00:03:47,780
we're done right so a lot of our tools

89
00:03:47,780 --> 00:03:49,400
and a lot of the things that we use do

90
00:03:49,400 --> 00:03:50,930
not have this level of clarity or

91
00:03:50,930 --> 00:03:53,930
sickness or without sacrificing some

92
00:03:53,930 --> 00:03:57,260
amount of power so John McCarthy was a

93
00:03:57,260 --> 00:03:59,090
mathematician so he had a very different

94
00:03:59,090 --> 00:04:00,620
take on programming languages and I

95
00:04:00,620 --> 00:04:02,990
think a lot of us do so he understood

96
00:04:02,990 --> 00:04:04,760
that we often want to run programs you

97
00:04:04,760 --> 00:04:06,350
give an expression to the computer we

98
00:04:06,350 --> 00:04:07,730
get a result you know add two numbers

99
00:04:07,730 --> 00:04:10,850
get two but being a mathematician he

100
00:04:10,850 --> 00:04:12,380
really realized that he wanted to

101
00:04:12,380 --> 00:04:14,630
occasionally or often symbolically

102
00:04:14,630 --> 00:04:16,489
manipulate the program right it wasn't

103
00:04:16,489 --> 00:04:17,690
just good enough to ask the computer

104
00:04:17,690 --> 00:04:19,460
what to do sometimes even sometimes we

105
00:04:19,460 --> 00:04:21,380
want to take to an expression and and

106
00:04:21,380 --> 00:04:23,840
modify the expression before we evaluate

107
00:04:23,840 --> 00:04:26,390
it so a very basic thing is that is that

108
00:04:26,390 --> 00:04:28,610
Lisp as is home iconic right the source

109
00:04:28,610 --> 00:04:30,380
is defined with his own data structures

110
00:04:30,380 --> 00:04:33,080
so we can modify the syntax using the

111
00:04:33,080 --> 00:04:35,120
same functionality we use at runtime so

112
00:04:35,120 --> 00:04:37,760
quote here says don't don't run this

113
00:04:37,760 --> 00:04:40,280
give us the list that has the symbol

114
00:04:40,280 --> 00:04:42,710
plus and some numbers in it and this is

115
00:04:42,710 --> 00:04:44,780
a this is I think a very profound end up

116
00:04:44,780 --> 00:04:48,320
insanely great idea so another Island

117
00:04:48,320 --> 00:04:50,450
key analogy is that I think if we if we

118
00:04:50,450 --> 00:04:52,610
lack these really good deep ideas I

119
00:04:52,610 --> 00:04:54,020
think software development ends up

120
00:04:54,020 --> 00:04:56,000
looking a lot like this I really love

121
00:04:56,000 --> 00:04:57,710
JavaScript I think JavaScript is great

122
00:04:57,710 --> 00:05:00,169
but I think still to this day a lot of

123
00:05:00,169 --> 00:05:02,150
projects architectural II resembled

124
00:05:02,150 --> 00:05:04,370
it's sort of a brute-force kind of thing

125
00:05:04,370 --> 00:05:06,380
we don't have the insanely great thing

126
00:05:06,380 --> 00:05:09,860
to sort of a design better software Alan

127
00:05:09,860 --> 00:05:10,250
Kate

128
00:05:10,250 --> 00:05:11,449
you know points out that an insanely

129
00:05:11,449 --> 00:05:12,770
great idea was the arch right this

130
00:05:12,770 --> 00:05:16,160
radically changed what we could do with

131
00:05:16,160 --> 00:05:18,500
art with our materials and the kind of

132
00:05:18,500 --> 00:05:20,600
ideas that we could have so thinking

133
00:05:20,600 --> 00:05:22,010
about this got me thinking about you

134
00:05:22,010 --> 00:05:23,960
know how is it that we come to insanely

135
00:05:23,960 --> 00:05:25,880
great ideas I think there are many paths

136
00:05:25,880 --> 00:05:28,699
I can't assume to know how they

137
00:05:28,699 --> 00:05:30,560
everybody arrives at them but for me I

138
00:05:30,560 --> 00:05:32,150
think a big way is is just by playing

139
00:05:32,150 --> 00:05:34,520
around just just by playing and so this

140
00:05:34,520 --> 00:05:36,710
takes us to the final and sort of

141
00:05:36,710 --> 00:05:38,960
longest part of this talk which is about

142
00:05:38,960 --> 00:05:40,880
play so this this part of the talk sort

143
00:05:40,880 --> 00:05:42,770
of starts for me about a year and a half

144
00:05:42,770 --> 00:05:45,320
ago I was in raleigh-durham at the first

145
00:05:45,320 --> 00:05:47,030
closure conference and I recall being

146
00:05:47,030 --> 00:05:48,530
tired and falling asleep and I just

147
00:05:48,530 --> 00:05:50,150
cracked open this book called the reason

148
00:05:50,150 --> 00:05:52,190
schemer and I wouldn't be here today if

149
00:05:52,190 --> 00:05:54,710
I hadn't opened this book it had it

150
00:05:54,710 --> 00:05:56,300
really influenced a lot of my thinking

151
00:05:56,300 --> 00:05:58,460
so before we dive into that and we are

152
00:05:58,460 --> 00:06:00,560
going to dive into that I want to talk

153
00:06:00,560 --> 00:06:02,030
about two ideas I think really framed

154
00:06:02,030 --> 00:06:04,250
this this section the first is this

155
00:06:04,250 --> 00:06:05,630
image which was making the rounds on the

156
00:06:05,630 --> 00:06:08,000
internet a couple months ago and I love

157
00:06:08,000 --> 00:06:09,710
this for me it's sort of encapsulate so

158
00:06:09,710 --> 00:06:11,660
much of my philosophy about software

159
00:06:11,660 --> 00:06:13,310
development so everybody knows that Lego

160
00:06:13,310 --> 00:06:15,229
was Lego was selling these these these

161
00:06:15,229 --> 00:06:17,000
pre-made frameworks that you could these

162
00:06:17,000 --> 00:06:18,560
sets that you would buy but of course

163
00:06:18,560 --> 00:06:20,090
that's not how anybody actually played

164
00:06:20,090 --> 00:06:21,530
with them you get a couple of sets they

165
00:06:21,530 --> 00:06:23,180
go in a big box and when you play with

166
00:06:23,180 --> 00:06:24,410
Legos you dump the whole thing on the

167
00:06:24,410 --> 00:06:26,000
floor and then you actually learn how do

168
00:06:26,000 --> 00:06:27,680
I put something together right that's

169
00:06:27,680 --> 00:06:29,060
when we actually learn how do we

170
00:06:29,060 --> 00:06:31,400
architect something and play is often

171
00:06:31,400 --> 00:06:32,750
really messy I love the fact that this

172
00:06:32,750 --> 00:06:34,370
image has all these little pieces on the

173
00:06:34,370 --> 00:06:36,169
floor right this is how we play with

174
00:06:36,169 --> 00:06:38,060
Legos Legos isn't the pre-built stuff

175
00:06:38,060 --> 00:06:40,520
the other big inspiration for this

176
00:06:40,520 --> 00:06:42,020
section of the talk is this quote by

177
00:06:42,020 --> 00:06:43,699
Richard Feinman so there are many ways

178
00:06:43,699 --> 00:06:45,740
to play and jazz comp is amazing it's

179
00:06:45,740 --> 00:06:46,669
just what people do with JavaScript

180
00:06:46,669 --> 00:06:49,250
blows my mind it's great but I think

181
00:06:49,250 --> 00:06:50,389
it's also important to really think

182
00:06:50,389 --> 00:06:52,250
about playing with this really the

183
00:06:52,250 --> 00:06:54,440
bottom level the substrate I think it's

184
00:06:54,440 --> 00:06:56,240
interesting and curious that human

185
00:06:56,240 --> 00:06:57,740
language is so flexible we're constantly

186
00:06:57,740 --> 00:07:00,530
growing it naturally yet we tend to use

187
00:07:00,530 --> 00:07:02,240
languages which eventually become

188
00:07:02,240 --> 00:07:04,760
obsolete because the syntax isn't really

189
00:07:04,760 --> 00:07:08,630
again growable so fineman's quote goes

190
00:07:08,630 --> 00:07:10,130
like this then I had another thought

191
00:07:10,130 --> 00:07:12,500
physics disgusts me a bit now I used to

192
00:07:12,500 --> 00:07:14,120
enjoy doing physics why did I enjoy it I

193
00:07:14,120 --> 00:07:15,290
used to play with it I used

194
00:07:15,290 --> 00:07:17,030
do whatever I felt like doing it didn't

195
00:07:17,030 --> 00:07:18,380
have to do with weather was important

196
00:07:18,380 --> 00:07:19,520
for the development of nuclear physics

197
00:07:19,520 --> 00:07:20,930
but whether it was interesting and

198
00:07:20,930 --> 00:07:22,580
amusing for me to play with when I was

199
00:07:22,580 --> 00:07:23,990
in high school I'd see water running of

200
00:07:23,990 --> 00:07:26,090
a faucet growing narrower and wonder if

201
00:07:26,090 --> 00:07:27,650
I could figure out what determines that

202
00:07:27,650 --> 00:07:30,230
curve I found it was rather easy to do I

203
00:07:30,230 --> 00:07:32,180
didn't have to do it it wasn't imputed

204
00:07:32,180 --> 00:07:33,290
important for the future of science

205
00:07:33,290 --> 00:07:36,200
somebody else had already done it that

206
00:07:36,200 --> 00:07:37,700
didn't make any any difference I'd

207
00:07:37,700 --> 00:07:39,500
invent things and play with things for

208
00:07:39,500 --> 00:07:41,210
my own entertainment and I think as

209
00:07:41,210 --> 00:07:42,890
working programmers I think we need to

210
00:07:42,890 --> 00:07:45,170
make more time to do this kind of thing

211
00:07:45,170 --> 00:07:47,120
that he's talking about so of course as

212
00:07:47,120 --> 00:07:48,920
it turns out clay is actually often very

213
00:07:48,920 --> 00:07:51,110
pragmatic there's often very serious

214
00:07:51,110 --> 00:07:53,500
things that that that come out of play

215
00:07:53,500 --> 00:07:56,450
so it's often play has really positive

216
00:07:56,450 --> 00:07:59,510
consequences so I'm going to switch

217
00:07:59,510 --> 00:08:00,710
gears I'm going to talk about there's

218
00:08:00,710 --> 00:08:02,450
sort of two sections on closure script

219
00:08:02,450 --> 00:08:04,010
I think clojurescript actually offers

220
00:08:04,010 --> 00:08:06,080
quite a bunch of nice things for

221
00:08:06,080 --> 00:08:08,300
JavaScript developers and I'll

222
00:08:08,300 --> 00:08:09,770
demonstrate a couple of those I can't

223
00:08:09,770 --> 00:08:11,630
talk as much about closure script as I'd

224
00:08:11,630 --> 00:08:14,860
like because I don't have a ton of time

225
00:08:14,860 --> 00:08:28,450
so switch over can we sorry okay

226
00:08:28,460 --> 00:08:32,180
all right so here we have sublime text -

227
00:08:32,180 --> 00:08:35,270
and you don't need Emacs to play around

228
00:08:35,270 --> 00:08:39,050
with a list so here I can type here I

229
00:08:39,050 --> 00:08:46,760
can type some expressions sure it's

230
00:08:46,760 --> 00:08:55,200
alright

231
00:08:55,210 --> 00:08:59,360
okay so so I can type some s expressions

232
00:08:59,360 --> 00:09:00,620
and we see that they evaluate that's

233
00:09:00,620 --> 00:09:03,650
cool so what's interesting is I can also

234
00:09:03,650 --> 00:09:05,570
place my cursor right here at the end of

235
00:09:05,570 --> 00:09:07,490
a form and notice again this is Lisp so

236
00:09:07,490 --> 00:09:10,130
if Lisp oriented list oriented so I here

237
00:09:10,130 --> 00:09:11,720
I can actually grab what looks to be

238
00:09:11,720 --> 00:09:13,910
like a body tag and it prints at the

239
00:09:13,910 --> 00:09:17,780
repple I can actually extract all all

240
00:09:17,780 --> 00:09:19,670
the nodes out of that out of the a body

241
00:09:19,670 --> 00:09:21,530
tag right here in my repple notice that

242
00:09:21,530 --> 00:09:23,210
it's printing we're not in we're not in

243
00:09:23,210 --> 00:09:25,160
a browser so something strange is

244
00:09:25,160 --> 00:09:26,570
happening here and what's happened is

245
00:09:26,570 --> 00:09:27,860
that closure script actually gives us

246
00:09:27,860 --> 00:09:29,870
back one of the most powerful thing that

247
00:09:29,870 --> 00:09:32,060
javascript has which is that you can

248
00:09:32,060 --> 00:09:33,950
modify types that you don't own so

249
00:09:33,950 --> 00:09:35,420
somebody created to type and you can

250
00:09:35,420 --> 00:09:37,280
modify that nobody does this anymore in

251
00:09:37,280 --> 00:09:38,540
JavaScript because it's dangerous for

252
00:09:38,540 --> 00:09:40,520
Interop so closure solves this problem

253
00:09:40,520 --> 00:09:42,830
in a fundamental way by namespacing

254
00:09:42,830 --> 00:09:44,240
everything your modest your

255
00:09:44,240 --> 00:09:46,460
modifications live in a namespace so now

256
00:09:46,460 --> 00:09:47,960
we have suddenly have the ability to

257
00:09:47,960 --> 00:09:50,060
bring the Dom and all this all all this

258
00:09:50,060 --> 00:09:52,130
complexity outside our software back

259
00:09:52,130 --> 00:09:54,890
under our control so I'm gonna pull back

260
00:09:54,890 --> 00:09:56,180
the curtain here for a second

261
00:09:56,180 --> 00:09:57,890
so I'm actually running live against

262
00:09:57,890 --> 00:10:02,120
Chrome I can whoops and get a reference

263
00:10:02,120 --> 00:10:04,760
to the box I can change its height I can

264
00:10:04,760 --> 00:10:07,250
make it blue you can make it red I can

265
00:10:07,250 --> 00:10:09,050
make it a hundred pixels so this this

266
00:10:09,050 --> 00:10:10,400
should remind you a bit of the Brett

267
00:10:10,400 --> 00:10:12,140
Victor inventing on principle talk which

268
00:10:12,140 --> 00:10:13,670
if you're a small talk program or a lisp

269
00:10:13,670 --> 00:10:14,180
programmer

270
00:10:14,180 --> 00:10:15,680
it's basically old hat it's something

271
00:10:15,680 --> 00:10:17,420
that we've been talking about for forty

272
00:10:17,420 --> 00:10:18,920
years now right there should be no

273
00:10:18,920 --> 00:10:20,780
distance between your ideas and the

274
00:10:20,780 --> 00:10:25,890
software that you want to develop at all

275
00:10:25,900 --> 00:10:29,120
so we we saw that a little bit of a demo

276
00:10:29,120 --> 00:10:30,740
again I can't I don't have time to get

277
00:10:30,740 --> 00:10:32,060
into all the cool things that closures

278
00:10:32,060 --> 00:10:34,250
trip pads I look in I love JavaScript

279
00:10:34,250 --> 00:10:35,420
use JavaScript all the time but

280
00:10:35,420 --> 00:10:36,710
clojurescript has lots of neat things

281
00:10:36,710 --> 00:10:39,410
and we avoid some annoyances some of

282
00:10:39,410 --> 00:10:40,940
these things are less what like for

283
00:10:40,940 --> 00:10:42,920
example zero and the null the empty

284
00:10:42,920 --> 00:10:44,990
string or not fall see we have let

285
00:10:44,990 --> 00:10:48,020
scoping today even in loops dynamic this

286
00:10:48,020 --> 00:10:50,300
is not really a problem in in in a

287
00:10:50,300 --> 00:10:51,590
language like closure script because

288
00:10:51,590 --> 00:10:53,660
it's based around functions and it is a

289
00:10:53,660 --> 00:10:55,790
sort of object-oriented but this always

290
00:10:55,790 --> 00:10:57,680
gets passed as a legitimate argument

291
00:10:57,680 --> 00:11:00,260
it's immutable by default and there's a

292
00:11:00,260 --> 00:11:01,820
lot of active work in the closure script

293
00:11:01,820 --> 00:11:03,800
community to make these immutable data

294
00:11:03,800 --> 00:11:05,690
structures very efficient so I don't

295
00:11:05,690 --> 00:11:07,440
have to worry about somebody changing

296
00:11:07,440 --> 00:11:10,260
my model or my data structure without me

297
00:11:10,260 --> 00:11:12,960
knowing it the others that the other big

298
00:11:12,960 --> 00:11:14,610
idea here is often people rely on

299
00:11:14,610 --> 00:11:16,110
libraries like underscore to provide

300
00:11:16,110 --> 00:11:17,550
some sensible no-scent notion of

301
00:11:17,550 --> 00:11:19,200
iteration which doesn't really exist in

302
00:11:19,200 --> 00:11:20,790
JavaScript so clojurescript

303
00:11:20,790 --> 00:11:22,470
solves this problem and it solves it for

304
00:11:22,470 --> 00:11:25,620
native types in a safe way the other

305
00:11:25,620 --> 00:11:27,180
thing we have are real namespaces so

306
00:11:27,180 --> 00:11:28,710
there's a sort of pattern which I which

307
00:11:28,710 --> 00:11:30,600
we have we have to do in JavaScript even

308
00:11:30,600 --> 00:11:32,100
though it's annoying which is we create

309
00:11:32,100 --> 00:11:33,360
these function closures and we put all

310
00:11:33,360 --> 00:11:35,310
our stuff inside to avoid polluting the

311
00:11:35,310 --> 00:11:36,990
global namespace there's no such thing

312
00:11:36,990 --> 00:11:38,460
as the global namespace in closure

313
00:11:38,460 --> 00:11:39,870
script so you don't need to do this in

314
00:11:39,870 --> 00:11:41,940
fact hiding things and functions would

315
00:11:41,940 --> 00:11:44,130
destroy the interactive programming that

316
00:11:44,130 --> 00:11:46,980
I demonstrated the other important thing

317
00:11:46,980 --> 00:11:48,360
which I'm going to show the implications

318
00:11:48,360 --> 00:11:51,240
of is that we have macros so a big idea

319
00:11:51,240 --> 00:11:52,770
here is that the language is global we

320
00:11:52,770 --> 00:11:54,060
don't have to wait for a committee or a

321
00:11:54,060 --> 00:11:56,880
beat at be DFL to decide that some

322
00:11:56,880 --> 00:11:58,050
features should or should not be in the

323
00:11:58,050 --> 00:12:01,620
language so this takes me to the I think

324
00:12:01,620 --> 00:12:03,420
the more playful part of the talk the

325
00:12:03,420 --> 00:12:04,380
part of the talk where I don't even

326
00:12:04,380 --> 00:12:06,060
understand what the implications are so

327
00:12:06,060 --> 00:12:07,800
this is the reason schemer I was written

328
00:12:07,800 --> 00:12:10,050
by Daniel Freedman William Byrd and all

329
00:12:10,050 --> 00:12:14,040
that key slid off it came out in 2005 so

330
00:12:14,040 --> 00:12:16,020
I found this book to be pretty shocking

331
00:12:16,020 --> 00:12:18,570
because it's only 187 pages long that's

332
00:12:18,570 --> 00:12:21,240
a bit of a tough read surprisingly if

333
00:12:21,240 --> 00:12:22,800
you think you're a clever programmer I

334
00:12:22,800 --> 00:12:24,480
double dare you to get this book and try

335
00:12:24,480 --> 00:12:26,310
to understand it at the end you will

336
00:12:26,310 --> 00:12:28,860
understand and it's pretty profound but

337
00:12:28,860 --> 00:12:30,030
they show you how to basically create

338
00:12:30,030 --> 00:12:32,910
most of prologue and about 200 lines of

339
00:12:32,910 --> 00:12:34,590
scheme and not only do they do that

340
00:12:34,590 --> 00:12:35,880
but the prologue that they show you how

341
00:12:35,880 --> 00:12:39,600
to build is actually very efficient so

342
00:12:39,600 --> 00:12:41,340
you know there's a lot of talk these

343
00:12:41,340 --> 00:12:42,780
days about functional programming and

344
00:12:42,780 --> 00:12:44,580
auditorium programming and as JavaScript

345
00:12:44,580 --> 00:12:45,960
developers we sort of get the benefits

346
00:12:45,960 --> 00:12:47,700
of both worlds right javascript is this

347
00:12:47,700 --> 00:12:49,530
nice language hybrid language where you

348
00:12:49,530 --> 00:12:51,570
can engage in both philosophies about

349
00:12:51,570 --> 00:12:53,460
software development I think what we've

350
00:12:53,460 --> 00:12:55,170
we've lost sight of is that logic

351
00:12:55,170 --> 00:12:56,430
programming is actually really powerful

352
00:12:56,430 --> 00:12:58,830
a lot of these things that seem esoteric

353
00:12:58,830 --> 00:13:00,210
to us or seem like in the realm of

354
00:13:00,210 --> 00:13:02,250
experts things like type inference are

355
00:13:02,250 --> 00:13:03,840
actually really almost trivial to

356
00:13:03,840 --> 00:13:06,000
explain once you understand logic

357
00:13:06,000 --> 00:13:08,250
programming and just to show you that

358
00:13:08,250 --> 00:13:09,630
that's true I'm going to sort of rewind

359
00:13:09,630 --> 00:13:12,180
the clock so things like type reference

360
00:13:12,180 --> 00:13:13,860
are really they're all problems of a

361
00:13:13,860 --> 00:13:15,480
similar domain so we can go back to

362
00:13:15,480 --> 00:13:18,090
December 17th 1962 to this time Life

363
00:13:18,090 --> 00:13:20,339
magazine and they had this

364
00:13:20,339 --> 00:13:23,220
said who owns the zebra and there are 15

365
00:13:23,220 --> 00:13:25,050
sentences in this in this magazine and

366
00:13:25,050 --> 00:13:26,399
you're supposed to solve this puzzle the

367
00:13:26,399 --> 00:13:28,350
sentences are like this there are five

368
00:13:28,350 --> 00:13:30,240
houses the Englishman lives in the red

369
00:13:30,240 --> 00:13:32,610
house the Spaniard owns the dog coffee

370
00:13:32,610 --> 00:13:34,439
is drunk in the green house the Ukranian

371
00:13:34,439 --> 00:13:36,029
drinks tea the green house is

372
00:13:36,029 --> 00:13:37,649
immediately to the right of the ivory

373
00:13:37,649 --> 00:13:39,990
house the old gold smoker owns snails

374
00:13:39,990 --> 00:13:41,970
and so on and it ends with the question

375
00:13:41,970 --> 00:13:44,610
now who drinks water and who owns the

376
00:13:44,610 --> 00:13:47,459
zebra so this problem is defined in such

377
00:13:47,459 --> 00:13:49,529
a way that there are five houses and the

378
00:13:49,529 --> 00:13:51,629
five houses of five properties the first

379
00:13:51,629 --> 00:13:53,610
one is what's the nationality the second

380
00:13:53,610 --> 00:13:56,040
is what are they smoke the third is what

381
00:13:56,040 --> 00:13:58,410
do they drink the fourth is the pet that

382
00:13:58,410 --> 00:14:00,059
they have and the last is the color of

383
00:14:00,059 --> 00:14:03,389
the house so as Peter Norbeck points out

384
00:14:03,389 --> 00:14:05,370
given that combination there are 24

385
00:14:05,370 --> 00:14:08,160
billion candidate solutions right so in

386
00:14:08,160 --> 00:14:10,050
his book the paradigms of artificial

387
00:14:10,050 --> 00:14:11,699
intelligence programming he showed in

388
00:14:11,699 --> 00:14:14,189
1992 how to build a prologue in common

389
00:14:14,189 --> 00:14:15,959
lisp how to make it efficient and he

390
00:14:15,959 --> 00:14:18,180
showed that oh on hardware at the time i

391
00:14:18,180 --> 00:14:19,949
can solve this problem in seventeen and

392
00:14:19,949 --> 00:14:21,420
a half seconds which at that time was

393
00:14:21,420 --> 00:14:23,370
probably really really shocking that you

394
00:14:23,370 --> 00:14:24,480
could solve such a hard constraint

395
00:14:24,480 --> 00:14:27,509
problem in in 17 seconds i'm gonna show

396
00:14:27,509 --> 00:14:28,980
you the we can solve it way faster and

397
00:14:28,980 --> 00:14:36,860
we can do this right in chrome oops so

398
00:14:36,860 --> 00:14:40,439
we're back here just scroll down so we

399
00:14:40,439 --> 00:14:42,089
sort of left the clojurescript world

400
00:14:42,089 --> 00:14:44,100
this library that i built is actually

401
00:14:44,100 --> 00:14:46,139
called core logic it's a faithful and

402
00:14:46,139 --> 00:14:47,579
movement implementation of the system

403
00:14:47,579 --> 00:14:48,959
found in the reason schemer which is

404
00:14:48,959 --> 00:14:52,139
mini cameron and so this is where macro

405
00:14:52,139 --> 00:14:54,059
is really like shine because i'm able to

406
00:14:54,059 --> 00:14:56,639
take a very customized syntax this is

407
00:14:56,639 --> 00:14:58,800
not even just a DSL this is an entire

408
00:14:58,800 --> 00:15:00,329
embedded programming language paradigm

409
00:15:00,329 --> 00:15:02,610
stuck right into closure script so here

410
00:15:02,610 --> 00:15:04,860
i can basically define the rules of

411
00:15:04,860 --> 00:15:08,009
verbatim from the from that page right i

412
00:15:08,009 --> 00:15:09,899
can say i can represent the five houses

413
00:15:09,899 --> 00:15:11,670
as a vector which is closure scripts

414
00:15:11,670 --> 00:15:13,769
versions of arrays i can use blanks for

415
00:15:13,769 --> 00:15:14,850
the things i don't know the answers to

416
00:15:14,850 --> 00:15:18,029
so this first line says we know that

417
00:15:18,029 --> 00:15:20,220
milk is consumed in the the middle house

418
00:15:20,220 --> 00:15:22,410
the first house is occupied denote by

419
00:15:22,410 --> 00:15:23,999
the norwegian next to their own

420
00:15:23,999 --> 00:15:26,610
norwegian is the blue house to the right

421
00:15:26,610 --> 00:15:28,110
of the ivory house is the green house

422
00:15:28,110 --> 00:15:30,089
the english man lives in the red house

423
00:15:30,089 --> 00:15:31,649
the cool smoker lives in the yellow

424
00:15:31,649 --> 00:15:35,059
house and so on

425
00:15:35,069 --> 00:15:37,480
you notice the answer returns very

426
00:15:37,480 --> 00:15:39,009
quickly and we see those in Norwegian

427
00:15:39,009 --> 00:15:41,199
drinks water and that the Japanese

428
00:15:41,199 --> 00:15:45,490
person owns a zebra how quickly it's

429
00:15:45,490 --> 00:15:46,839
about 48 milliseconds and I've

430
00:15:46,839 --> 00:15:48,279
benchmarked this in all the night leaves

431
00:15:48,279 --> 00:15:49,629
it's about the same regardless of where

432
00:15:49,629 --> 00:15:50,949
you're running into WebKit nightly or

433
00:15:50,949 --> 00:15:55,549
Firefox nightly which is pretty cool

434
00:15:55,559 --> 00:15:57,970
so you know the first question you

435
00:15:57,970 --> 00:15:59,290
should be asking yourself what is it a

436
00:15:59,290 --> 00:16:01,389
toy well the first thing I said was the

437
00:16:01,389 --> 00:16:03,040
constraint thing that we're solving is

438
00:16:03,040 --> 00:16:05,259
so so it's so similar to type inference

439
00:16:05,259 --> 00:16:06,939
so it's already the type of thing that

440
00:16:06,939 --> 00:16:09,670
we're already doing and this other thing

441
00:16:09,670 --> 00:16:10,689
that we should think about is what did

442
00:16:10,689 --> 00:16:12,369
McCarthy say isn't it really beautiful

443
00:16:12,369 --> 00:16:14,619
when we can have both the execution like

444
00:16:14,619 --> 00:16:16,300
look at our programs immediately execute

445
00:16:16,300 --> 00:16:18,220
and also has things that we manipulate

446
00:16:18,220 --> 00:16:19,929
so what if you start manipulating our

447
00:16:19,929 --> 00:16:21,639
programs with the system like this

448
00:16:21,639 --> 00:16:23,920
what's possible so maybe it's a toy or

449
00:16:23,920 --> 00:16:25,629
maybe it's a deeply concurrent tool for

450
00:16:25,629 --> 00:16:27,249
reasoning about the meaning of our

451
00:16:27,249 --> 00:16:29,410
programs I actually don't know the

452
00:16:29,410 --> 00:16:30,759
answer to that yet I've been working on

453
00:16:30,759 --> 00:16:32,649
playing really literally playing with

454
00:16:32,649 --> 00:16:34,689
the system for a year and a half now and

455
00:16:34,689 --> 00:16:37,089
it's been fun watching other people see

456
00:16:37,089 --> 00:16:38,499
what does this let us do that we

457
00:16:38,499 --> 00:16:41,769
couldn't do before so again this is this

458
00:16:41,769 --> 00:16:43,389
whole sort of experiment for me just

459
00:16:43,389 --> 00:16:45,429
made me realize that we really do need

460
00:16:45,429 --> 00:16:47,110
to play more and I put this talk to

461
00:16:47,110 --> 00:16:48,459
they're just sort of you know encourage

462
00:16:48,459 --> 00:16:50,799
other people to play more as well so

463
00:16:50,799 --> 00:16:52,869
again JavaScript is fantastic but I

464
00:16:52,869 --> 00:16:54,399
think as programmers we need to think

465
00:16:54,399 --> 00:16:56,350
about more about languages what's

466
00:16:56,350 --> 00:16:57,999
possible in different languages which

467
00:16:57,999 --> 00:16:59,290
one of those things do we want to bring

468
00:16:59,290 --> 00:17:01,720
to JavaScript or you know maybe we want

469
00:17:01,720 --> 00:17:03,160
to program in a language like closure

470
00:17:03,160 --> 00:17:04,839
script there's a really great service

471
00:17:04,839 --> 00:17:06,850
that I recommend it's on Heroku now call

472
00:17:06,850 --> 00:17:08,620
him Mara which provides a closure script

473
00:17:08,620 --> 00:17:10,449
repple so you can try a lot of the

474
00:17:10,449 --> 00:17:12,309
things that I've shown right in your web

475
00:17:12,309 --> 00:17:13,740
browser which is pretty cool

476
00:17:13,740 --> 00:17:16,419
so some closing notes so above all

477
00:17:16,419 --> 00:17:17,980
really really this is about community I

478
00:17:17,980 --> 00:17:19,569
mean none of the things that I that I

479
00:17:19,569 --> 00:17:21,010
showed I came up with it was all

480
00:17:21,010 --> 00:17:23,199
everybody else's years of research and I

481
00:17:23,199 --> 00:17:24,459
said wouldn't it be awesome if I could

482
00:17:24,459 --> 00:17:26,919
do this in a book in a web browser so I

483
00:17:26,919 --> 00:17:28,929
really loved this photograph this a year

484
00:17:28,929 --> 00:17:30,880
and a half ago I I didn't even know what

485
00:17:30,880 --> 00:17:32,440
logic programming was I never read the

486
00:17:32,440 --> 00:17:34,840
reason schemer a year later at the

487
00:17:34,840 --> 00:17:36,700
second closure conference William Byrd

488
00:17:36,700 --> 00:17:38,770
and and Dan Friedman the authors of the

489
00:17:38,770 --> 00:17:40,659
book came because I emailed him and said

490
00:17:40,659 --> 00:17:41,950
hey I implement your thing in closure

491
00:17:41,950 --> 00:17:43,389
and they were like what the heck is that

492
00:17:43,389 --> 00:17:45,309
that's cool and then and so they came

493
00:17:45,309 --> 00:17:46,080
and they want

494
00:17:46,080 --> 00:17:48,659
talk about it Dan Freeman meeting Dan

495
00:17:48,659 --> 00:17:50,399
Freeman was particularly cool because

496
00:17:50,399 --> 00:17:52,049
you know he's been programming list for

497
00:17:52,049 --> 00:17:53,880
about forty years now and you know

498
00:17:53,880 --> 00:17:56,669
that's longer than I've been alive to

499
00:17:56,669 --> 00:17:58,679
the to the left is Azure is this guy

500
00:17:58,679 --> 00:18:01,110
Ambrose who was this young guy and and

501
00:18:01,110 --> 00:18:02,399
this is another sort of aspect of

502
00:18:02,399 --> 00:18:03,929
communities so I was working on this for

503
00:18:03,929 --> 00:18:05,549
a long time and pretty much everybody in

504
00:18:05,549 --> 00:18:06,720
the closure committee world was like

505
00:18:06,720 --> 00:18:07,409
you're nuts

506
00:18:07,409 --> 00:18:08,610
we're functional programmers who cares

507
00:18:08,610 --> 00:18:10,740
about logic and so Ambrose was this guy

508
00:18:10,740 --> 00:18:13,200
who was in doing Java at university but

509
00:18:13,200 --> 00:18:14,850
he was curious about closure it was like

510
00:18:14,850 --> 00:18:16,230
logic programming that sounds neat and

511
00:18:16,230 --> 00:18:18,929
so that actually kept me sort of going

512
00:18:18,929 --> 00:18:20,519
through and finishing this project so I

513
00:18:20,519 --> 00:18:22,399
think community is really not about

514
00:18:22,399 --> 00:18:25,080
specific languages specific tools but

515
00:18:25,080 --> 00:18:26,669
it's really about a community of shared

516
00:18:26,669 --> 00:18:30,510
ideas and and playing with stuff so

517
00:18:30,510 --> 00:18:31,889
right when it gives you think some

518
00:18:31,889 --> 00:18:33,480
people first off I want to thank rich

519
00:18:33,480 --> 00:18:35,399
Hickey for making such a neat neat list

520
00:18:35,399 --> 00:18:37,679
I think it has a lot of affordances that

521
00:18:37,679 --> 00:18:39,179
were used to whether you're coming from

522
00:18:39,179 --> 00:18:41,639
JavaScript Python or Ruby or some other

523
00:18:41,639 --> 00:18:44,010
modern programming language definitely

524
00:18:44,010 --> 00:18:45,659
thank Dan Friedman and William bird they

525
00:18:45,659 --> 00:18:48,360
sort of got me playing with realizing

526
00:18:48,360 --> 00:18:49,980
there's a lot more left to play with in

527
00:18:49,980 --> 00:18:50,720
computer science

528
00:18:50,720 --> 00:18:52,470
definitely the closure community for

529
00:18:52,470 --> 00:18:54,360
putting up with my my logic programming

530
00:18:54,360 --> 00:18:56,250
rants and I've definitely want to thank

531
00:18:56,250 --> 00:18:58,260
the JavaScript community for inviting me

532
00:18:58,260 --> 00:19:00,649
to come here and talk about this stuff

