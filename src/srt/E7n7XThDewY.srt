1
00:00:00,000 --> 00:00:12,640

I

2
00:00:12,650 --> 00:00:16,230
cool all right so my talk today is

3
00:00:16,230 --> 00:00:19,050
Moneyball for performance metrics my

4
00:00:19,050 --> 00:00:22,939
name is Jeff I a web developer at mpm i

5
00:00:22,939 --> 00:00:26,189
right as you can imagine then a lot of

6
00:00:26,189 --> 00:00:29,970
JavaScript but also CSS and HTML but

7
00:00:29,970 --> 00:00:32,730
today is a free time topic or a hobby

8
00:00:32,730 --> 00:00:36,720
topic and that is sports I'm actually a

9
00:00:36,720 --> 00:00:41,730
really really big fan of baseball so I

10
00:00:41,730 --> 00:00:43,650
don't know how much of the crowd is

11
00:00:43,650 --> 00:00:45,510
really into baseball but I'll keep the

12
00:00:45,510 --> 00:00:47,820
sports metaphors down as low as possible

13
00:00:47,820 --> 00:00:50,280
but baseball is a super interesting

14
00:00:50,280 --> 00:00:52,649
sport to me because I grew up near

15
00:00:52,649 --> 00:00:54,690
Seattle I live in Seattle and which

16
00:00:54,690 --> 00:00:56,899
makes my team the Seattle Mariners ah

17
00:00:56,899 --> 00:01:01,050
and that isn't necessarily a great team

18
00:01:01,050 --> 00:01:03,830
to be a fan of if you follow baseball

19
00:01:03,830 --> 00:01:06,570
because they're historically one of the

20
00:01:06,570 --> 00:01:09,960
worst teams of all time it's like

21
00:01:09,960 --> 00:01:11,789
they've never it's not that they've

22
00:01:11,789 --> 00:01:14,759
never won a World Series which is the US

23
00:01:14,759 --> 00:01:17,100
baseball championship they've never

24
00:01:17,100 --> 00:01:19,670
actually even been to it it's

25
00:01:19,670 --> 00:01:24,030
heartbreaking year after year and while

26
00:01:24,030 --> 00:01:26,460
I could spend like all of my time up

27
00:01:26,460 --> 00:01:28,350
here discussing the lifetime of

28
00:01:28,350 --> 00:01:30,689
disappointment that I've had being a fan

29
00:01:30,689 --> 00:01:33,450
of this team I'm not going to do that

30
00:01:33,450 --> 00:01:35,460
instead I'll discuss some of the better

31
00:01:35,460 --> 00:01:37,140
baseball that I've ever seen in my life

32
00:01:37,140 --> 00:01:39,960
which of course was played by a totally

33
00:01:39,960 --> 00:01:42,570
different team so let's talk about a

34
00:01:42,570 --> 00:01:46,439
division rival the Oakland A's so in

35
00:01:46,439 --> 00:01:48,930
2002 there's a man named Billy Beane and

36
00:01:48,930 --> 00:01:50,640
he was the general manager for the

37
00:01:50,640 --> 00:01:52,590
Oakland Athletics and their professional

38
00:01:52,590 --> 00:01:53,970
baseball team located in oakland

39
00:01:53,970 --> 00:01:56,280
california now Oakland has a

40
00:01:56,280 --> 00:01:58,920
disadvantage as far as teams go of being

41
00:01:58,920 --> 00:02:00,920
what's called a small-market team and

42
00:02:00,920 --> 00:02:03,930
this means that the team normally due to

43
00:02:03,930 --> 00:02:06,240
location doesn't have as big of a fan

44
00:02:06,240 --> 00:02:08,670
base as you know some of the bigger

45
00:02:08,670 --> 00:02:11,549
teams would and that means that they

46
00:02:11,549 --> 00:02:13,680
can't really generate the money that's

47
00:02:13,680 --> 00:02:15,299
needed to bring in some of the bigger

48
00:02:15,299 --> 00:02:19,260
name players now in baseball the general

49
00:02:19,260 --> 00:02:20,790
manager of a team controls all the

50
00:02:20,790 --> 00:02:22,919
contracts the hiring and the firing of

51
00:02:22,919 --> 00:02:25,530
players and since he was the GM

52
00:02:25,530 --> 00:02:28,020
of a small market team Billy Beane had

53
00:02:28,020 --> 00:02:30,270
the difficult challenge of attracting

54
00:02:30,270 --> 00:02:32,819
big-name players and hugely talented

55
00:02:32,819 --> 00:02:35,670
players to his team and because he

56
00:02:35,670 --> 00:02:37,410
couldn't pay them as much as one of the

57
00:02:37,410 --> 00:02:39,600
big popular teams would be say the new

58
00:02:39,600 --> 00:02:43,920
york yankees side note and whatever you

59
00:02:43,920 --> 00:02:45,750
know about baseball as little or as much

60
00:02:45,750 --> 00:02:47,670
as possible if you can take one thing

61
00:02:47,670 --> 00:02:49,050
away from this talk let it be that the

62
00:02:49,050 --> 00:02:54,060
yankees suck okay so fortunately for the

63
00:02:54,060 --> 00:02:57,450
A's Billy came up with a plan he decided

64
00:02:57,450 --> 00:02:59,489
that the traditional ways of measuring

65
00:02:59,489 --> 00:03:02,160
the quality of a player did not paint

66
00:03:02,160 --> 00:03:04,080
the entire picture and they weren't

67
00:03:04,080 --> 00:03:05,430
helpful for building a winning baseball

68
00:03:05,430 --> 00:03:07,440
team especially in the case of a team

69
00:03:07,440 --> 00:03:08,700
that couldn't afford to pay the biggest

70
00:03:08,700 --> 00:03:11,250
players the most amount of money Billy

71
00:03:11,250 --> 00:03:13,920
instead used newer aggregated statistics

72
00:03:13,920 --> 00:03:16,019
and formulas to put together a list of

73
00:03:16,019 --> 00:03:20,040
players who then we're could be measured

74
00:03:20,040 --> 00:03:22,140
against these new metrics and these

75
00:03:22,140 --> 00:03:24,450
metrics became far more valuable for

76
00:03:24,450 --> 00:03:26,730
these players because it could make it

77
00:03:26,730 --> 00:03:30,150
so Billy could get cheaper players who

78
00:03:30,150 --> 00:03:34,049
would win better games this is actually

79
00:03:34,049 --> 00:03:35,700
one of those formulas you saw the like

80
00:03:35,700 --> 00:03:38,010
early statistics this this is one of

81
00:03:38,010 --> 00:03:40,110
those big formulas it's for one called

82
00:03:40,110 --> 00:03:42,209
on base plus slugging percentage which I

83
00:03:42,209 --> 00:03:44,549
will not explain here today so the

84
00:03:44,549 --> 00:03:46,290
strategy ended up being very successful

85
00:03:46,290 --> 00:03:47,610
and it brought the A's to the playoffs

86
00:03:47,610 --> 00:03:49,410
multiple times in a row and it can be

87
00:03:49,410 --> 00:03:51,360
made them compete on the same level as

88
00:03:51,360 --> 00:03:53,160
the teams who spent more than doubled

89
00:03:53,160 --> 00:03:55,470
the amount of money in this new strategy

90
00:03:55,470 --> 00:03:58,950
it spread throughout the league and it

91
00:03:58,950 --> 00:04:00,840
became really really famous and there

92
00:04:00,840 --> 00:04:03,000
was a book named after it and there was

93
00:04:03,000 --> 00:04:05,370
even a movie made after it and it

94
00:04:05,370 --> 00:04:08,370
starred Brad Pitt and if Brad Pitt plays

95
00:04:08,370 --> 00:04:10,260
you in a movie you've done a pretty good

96
00:04:10,260 --> 00:04:13,980
job probably so we're here at Def

97
00:04:13,980 --> 00:04:16,680
estasia which is really beautiful thank

98
00:04:16,680 --> 00:04:20,609
you and uh I'm up here and I'm babbling

99
00:04:20,609 --> 00:04:24,539
about baseball and why and it's probably

100
00:04:24,539 --> 00:04:26,370
because I could talk at all of you about

101
00:04:26,370 --> 00:04:29,820
baseball all day long but also I think

102
00:04:29,820 --> 00:04:32,220
that Billy's ideas can be applied to all

103
00:04:32,220 --> 00:04:35,789
sorts of other fields so traditional

104
00:04:35,789 --> 00:04:38,490
tactics for measurement they need to be

105
00:04:38,490 --> 00:04:39,240
reanalyzed

106
00:04:39,240 --> 00:04:41,610
from time to time they need to be tested

107
00:04:41,610 --> 00:04:44,310
against new metrics to get a better idea

108
00:04:44,310 --> 00:04:47,940
of how things actually work I think this

109
00:04:47,940 --> 00:04:50,220
is especially true for one of my other

110
00:04:50,220 --> 00:04:52,169
great interests in life which is web

111
00:04:52,169 --> 00:04:54,870
performance we've spent a very long time

112
00:04:54,870 --> 00:04:58,340
focused on a few key indicators that

113
00:04:58,340 --> 00:05:01,470
tell us how fast our sites are but it's

114
00:05:01,470 --> 00:05:03,660
become pretty clear lately that that

115
00:05:03,660 --> 00:05:06,840
only paints half the picture so picture

116
00:05:06,840 --> 00:05:08,310
me for a minute like I'm the web version

117
00:05:08,310 --> 00:05:10,919
of Billy Beane which should be super

118
00:05:10,919 --> 00:05:13,590
easy for you especially if you're in the

119
00:05:13,590 --> 00:05:16,919
really really far back okay so let's

120
00:05:16,919 --> 00:05:19,560
talk about web sites to find out where

121
00:05:19,560 --> 00:05:21,000
we can start we have to know what we're

122
00:05:21,000 --> 00:05:23,580
up against we have to know and

123
00:05:23,580 --> 00:05:25,199
understand the enemies that play here

124
00:05:25,199 --> 00:05:27,060
and enemies in this case are the things

125
00:05:27,060 --> 00:05:29,280
that make up a slow ass web site because

126
00:05:29,280 --> 00:05:32,550
slow ass web sites lose so what are we

127
00:05:32,550 --> 00:05:34,349
up against let's take a look at what

128
00:05:34,349 --> 00:05:38,940
he'll means for a web developer so the

129
00:05:38,940 --> 00:05:41,759
state of javascript in android is really

130
00:05:41,759 --> 00:05:43,650
really poor and seriously android

131
00:05:43,650 --> 00:05:45,330
devices get a lot of heat for lagging on

132
00:05:45,330 --> 00:05:49,349
performance and they should but it's not

133
00:05:49,349 --> 00:05:51,509
just android that is killing us out

134
00:05:51,509 --> 00:05:53,580
there on performance it's kind of all of

135
00:05:53,580 --> 00:05:55,740
those little pocket computers we have a

136
00:05:55,740 --> 00:05:59,130
ton of them and they've taken over this

137
00:05:59,130 --> 00:06:02,310
chart right here is the the orange is

138
00:06:02,310 --> 00:06:07,080
the growth in data usage over the last

139
00:06:07,080 --> 00:06:12,270
five years for mobile devices the

140
00:06:12,270 --> 00:06:14,069
overall growth of mobile device used for

141
00:06:14,069 --> 00:06:17,430
browsing isn't something new responsive

142
00:06:17,430 --> 00:06:19,680
design has been the way for about five

143
00:06:19,680 --> 00:06:23,610
years now and in 2013 actually a twenty

144
00:06:23,610 --> 00:06:26,130
one percent of all cell phone owners use

145
00:06:26,130 --> 00:06:28,469
their phone as the primary device for

146
00:06:28,469 --> 00:06:30,599
internet access and this numbers only

147
00:06:30,599 --> 00:06:32,960
been increasing as the years go on and

148
00:06:32,960 --> 00:06:35,669
we don't just assume they'll do things

149
00:06:35,669 --> 00:06:37,500
with their devices while they're like on

150
00:06:37,500 --> 00:06:39,449
the go this mobile context thing turns

151
00:06:39,449 --> 00:06:41,909
out to be mostly but we know

152
00:06:41,909 --> 00:06:44,449
they'll do basically anything on them

153
00:06:44,449 --> 00:06:48,060
dogsitting dating making terrible

154
00:06:48,060 --> 00:06:51,900
comments on YouTube buying food buying a

155
00:06:51,900 --> 00:06:52,440
car

156
00:06:52,440 --> 00:06:57,810
are buying a house um we so we have

157
00:06:57,810 --> 00:06:59,640
these devices that everybody uses and

158
00:06:59,640 --> 00:07:01,350
we're we're kind of stuck with the fact

159
00:07:01,350 --> 00:07:03,030
that they do that but we have the

160
00:07:03,030 --> 00:07:03,990
knowledge that they're going to be used

161
00:07:03,990 --> 00:07:06,750
everywhere consistently for some

162
00:07:06,750 --> 00:07:08,790
generally weird stuff from time to time

163
00:07:08,790 --> 00:07:11,040
but you know they're super convenient so

164
00:07:11,040 --> 00:07:14,190
who cares if they're fast well it turns

165
00:07:14,190 --> 00:07:16,380
out basically everybody people expect

166
00:07:16,380 --> 00:07:18,480
mobile to be fast and will punish you

167
00:07:18,480 --> 00:07:22,410
for not making it so example etsy

168
00:07:22,410 --> 00:07:24,660
increased the kilobytes of images on

169
00:07:24,660 --> 00:07:27,510
their page by 160 kilobytes that's not a

170
00:07:27,510 --> 00:07:31,350
lot and eating it ended in a twelve

171
00:07:31,350 --> 00:07:32,940
percent increase in bounce rate for

172
00:07:32,940 --> 00:07:35,130
their site Edmonds on the other hand

173
00:07:35,130 --> 00:07:37,440
lowered their load time by seventy-seven

174
00:07:37,440 --> 00:07:39,600
percent and got twenty percent more page

175
00:07:39,600 --> 00:07:42,120
views and four percent drop and bounce

176
00:07:42,120 --> 00:07:44,970
rate and three percent drop and add

177
00:07:44,970 --> 00:07:48,960
impression variance and as you might

178
00:07:48,960 --> 00:07:51,330
like so those good examples there and as

179
00:07:51,330 --> 00:07:53,010
you might have experienced getting your

180
00:07:53,010 --> 00:07:55,590
site to be fast on mobile is really kind

181
00:07:55,590 --> 00:07:57,810
of difficult mobile traffic it is by

182
00:07:57,810 --> 00:08:00,900
default not very fast and latency on a

183
00:08:00,900 --> 00:08:03,300
bad network can bite you really really

184
00:08:03,300 --> 00:08:05,400
hard and it's rarely the case that

185
00:08:05,400 --> 00:08:07,290
somebody has access to a network where

186
00:08:07,290 --> 00:08:10,320
latency isn't an issue example given

187
00:08:10,320 --> 00:08:13,290
more people access facebook over 2g than

188
00:08:13,290 --> 00:08:15,960
4g this probably isn't that surprising

189
00:08:15,960 --> 00:08:20,160
to a lot of the crowd and that's where

190
00:08:20,160 --> 00:08:23,430
winning and losing comes into play what

191
00:08:23,430 --> 00:08:24,630
do I mean by winning and losing let's

192
00:08:24,630 --> 00:08:28,919
talk more numbers edem drop their load

193
00:08:28,919 --> 00:08:30,930
time from 1.2 seconds to 500

194
00:08:30,930 --> 00:08:33,719
milliseconds strap or this increased the

195
00:08:33,719 --> 00:08:34,979
time people spent on the site by

196
00:08:34,979 --> 00:08:37,110
21-percent it increased their

197
00:08:37,110 --> 00:08:38,839
conversions by twenty percent and

198
00:08:38,839 --> 00:08:41,550
increase the amount of pageviews visited

199
00:08:41,550 --> 00:08:46,440
by person twenty-eight percent walmart

200
00:08:46,440 --> 00:08:49,440
dropped their load time by one second

201
00:08:49,440 --> 00:08:52,160
just one second and it increased two

202
00:08:52,160 --> 00:08:54,839
percent of conversions and they found

203
00:08:54,839 --> 00:08:57,089
that for every 100 millisecond load time

204
00:08:57,089 --> 00:08:59,070
they drop after that they increase their

205
00:08:59,070 --> 00:09:01,320
revenue by one percent and if you have

206
00:09:01,320 --> 00:09:03,390
any concept of how much walmart

207
00:09:03,390 --> 00:09:04,570
sells

208
00:09:04,570 --> 00:09:06,370
one percent increase in revenue is

209
00:09:06,370 --> 00:09:10,750
really really really high Obama for

210
00:09:10,750 --> 00:09:13,000
America during his last campaign drop

211
00:09:13,000 --> 00:09:15,220
load time by sixty percent and that

212
00:09:15,220 --> 00:09:16,960
increased conversions by fourteen

213
00:09:16,960 --> 00:09:18,490
percent conversions in this case being

214
00:09:18,490 --> 00:09:21,520
donations in the u.s. if you have the

215
00:09:21,520 --> 00:09:23,560
most amount of donations you tend to win

216
00:09:23,560 --> 00:09:27,610
the presidency so that's probably pretty

217
00:09:27,610 --> 00:09:30,610
important and I can do this all day no I

218
00:09:30,610 --> 00:09:32,320
mean seriously we could be here for a

219
00:09:32,320 --> 00:09:34,360
really long while if I keep this there

220
00:09:34,360 --> 00:09:36,340
are a plethora of performance related

221
00:09:36,340 --> 00:09:38,140
stories out there for you to convince

222
00:09:38,140 --> 00:09:39,550
the people who have all the money in

223
00:09:39,550 --> 00:09:41,170
your company that you need to work on

224
00:09:41,170 --> 00:09:44,560
this stuff example again removing one

225
00:09:44,560 --> 00:09:46,180
client side redirect from google's

226
00:09:46,180 --> 00:09:48,130
doubleclick resulted in a twelve percent

227
00:09:48,130 --> 00:09:51,790
improvement click-through rate amazon

228
00:09:51,790 --> 00:09:53,500
season one percent decrease in revenue

229
00:09:53,500 --> 00:09:55,000
for every time they get hit a hundred

230
00:09:55,000 --> 00:09:58,290
millisecond increase in load time a

231
00:09:58,290 --> 00:10:00,910
one-second delay for bing turns into a

232
00:10:00,910 --> 00:10:02,850
two point eight percent drop in revenue

233
00:10:02,850 --> 00:10:05,200
two-second delay four point three

234
00:10:05,200 --> 00:10:08,980
percent drop Mozilla cut their load time

235
00:10:08,980 --> 00:10:11,830
x 2.2 seconds and saw download

236
00:10:11,830 --> 00:10:13,690
conversions increased by fifteen point

237
00:10:13,690 --> 00:10:16,960
four percent and so we have all this

238
00:10:16,960 --> 00:10:19,780
knowledge we know that sites need to be

239
00:10:19,780 --> 00:10:22,900
faster and the benefits of that but at

240
00:10:22,900 --> 00:10:26,920
the same time features frameworks new

241
00:10:26,920 --> 00:10:29,080
designs etc their bloating up our sites

242
00:10:29,080 --> 00:10:31,270
the average size of a website now is

243
00:10:31,270 --> 00:10:32,620
around two point one four megabytes

244
00:10:32,620 --> 00:10:35,200
which is a twelve percent or twelve

245
00:10:35,200 --> 00:10:37,390
point seven percent growth over just

246
00:10:37,390 --> 00:10:42,370
last year so we have an increasing use

247
00:10:42,370 --> 00:10:44,410
of under powered devices on shaky

248
00:10:44,410 --> 00:10:46,240
networks and those users are being

249
00:10:46,240 --> 00:10:48,250
delivered bigger website web sites all

250
00:10:48,250 --> 00:10:51,010
the time these same users are growing

251
00:10:51,010 --> 00:10:54,400
less and less patient over time with how

252
00:10:54,400 --> 00:10:56,890
slow our websites are how are we

253
00:10:56,890 --> 00:10:58,060
supposed to make a good experience

254
00:10:58,060 --> 00:11:02,350
happen well my favorite way to handle

255
00:11:02,350 --> 00:11:04,870
problems is to find definitive ways to

256
00:11:04,870 --> 00:11:07,240
measure those problems and then focus on

257
00:11:07,240 --> 00:11:09,820
improving those measurements we need to

258
00:11:09,820 --> 00:11:11,830
find out what we want and find different

259
00:11:11,830 --> 00:11:13,540
ways of gathering quantitative values by

260
00:11:13,540 --> 00:11:16,960
which we can solve this problem so

261
00:11:16,960 --> 00:11:18,259
there's actually kind of a big war

262
00:11:18,259 --> 00:11:20,540
this though just because something is

263
00:11:20,540 --> 00:11:22,459
difficult to measure does not mean it

264
00:11:22,459 --> 00:11:25,309
should be disregarded if you find

265
00:11:25,309 --> 00:11:27,399
something nearly impossible to measure

266
00:11:27,399 --> 00:11:31,040
keep it in mind at all times trying to

267
00:11:31,040 --> 00:11:33,589
approach it from other angles it's good

268
00:11:33,589 --> 00:11:35,600
you can make it part of other

269
00:11:35,600 --> 00:11:38,059
measurements if you if it can't be

270
00:11:38,059 --> 00:11:42,139
broken out just by itself yet and daniel

271
00:11:42,139 --> 00:11:44,179
ganc élevage which is who's this guy

272
00:11:44,179 --> 00:11:46,309
right here he had a great quote about

273
00:11:46,309 --> 00:11:49,039
this the first step is to measure

274
00:11:49,039 --> 00:11:51,470
whatever can be easily measured this is

275
00:11:51,470 --> 00:11:54,529
okay as far as it goes the second step

276
00:11:54,529 --> 00:11:56,209
is to disregard that which can't be

277
00:11:56,209 --> 00:11:58,069
easily measured or to give it an

278
00:11:58,069 --> 00:12:01,069
arbitrary quantitative value this is

279
00:12:01,069 --> 00:12:03,889
artificial and misleading the third step

280
00:12:03,889 --> 00:12:05,809
is to presume that what can't be

281
00:12:05,809 --> 00:12:08,049
measured easily really isn't important

282
00:12:08,049 --> 00:12:12,139
this is blindness the fourth step is to

283
00:12:12,139 --> 00:12:13,759
say that what can't be easily measured

284
00:12:13,759 --> 00:12:16,489
really doesn't exist this is gross

285
00:12:16,489 --> 00:12:20,359
negligence so keeping that in mind we've

286
00:12:20,359 --> 00:12:22,039
been using easy measurements for a while

287
00:12:22,039 --> 00:12:23,480
and what are those traditional

288
00:12:23,480 --> 00:12:26,119
measurements we've been using dawn

289
00:12:26,119 --> 00:12:29,509
complete so dumb complete is when a

290
00:12:29,509 --> 00:12:31,279
document object model tree has been

291
00:12:31,279 --> 00:12:33,169
completely built this is frequently

292
00:12:33,169 --> 00:12:35,299
known in the point in time which you can

293
00:12:35,299 --> 00:12:37,369
query for elements that's good you

294
00:12:37,369 --> 00:12:38,899
should definitely know that part of your

295
00:12:38,899 --> 00:12:44,029
page um or the load event on load is the

296
00:12:44,029 --> 00:12:45,649
point in time in which every single

297
00:12:45,649 --> 00:12:49,730
asset on the site has been loaded and

298
00:12:49,730 --> 00:12:53,329
Paige wait page weight is the size of

299
00:12:53,329 --> 00:12:54,739
everything the client ends up

300
00:12:54,739 --> 00:12:56,389
downloading to make the site work and

301
00:12:56,389 --> 00:13:00,529
soul some together the request to

302
00:13:00,529 --> 00:13:03,049
response timing so the request response

303
00:13:03,049 --> 00:13:05,059
timing is the amount of time from when

304
00:13:05,059 --> 00:13:07,339
your server receives the HTTP request

305
00:13:07,339 --> 00:13:08,989
until the time where it responds and

306
00:13:08,989 --> 00:13:11,269
that's fully encapsulated in server no

307
00:13:11,269 --> 00:13:13,359
latency taken into account there and

308
00:13:13,359 --> 00:13:15,619
there are plenty of options available

309
00:13:15,619 --> 00:13:16,999
for back-end measurement that I've had

310
00:13:16,999 --> 00:13:18,919
good experience with these three in

311
00:13:18,919 --> 00:13:22,100
particular so those measurements

312
00:13:22,100 --> 00:13:25,970
combined they can paint a bit part of

313
00:13:25,970 --> 00:13:28,189
the picture for us but if you only pay

314
00:13:28,189 --> 00:13:29,419
attention then because they're easy to

315
00:13:29,419 --> 00:13:31,570
track you're missing out on crucial

316
00:13:31,570 --> 00:13:33,430
pieces of performance and this can

317
00:13:33,430 --> 00:13:35,920
absolutely sink you don't get me wrong

318
00:13:35,920 --> 00:13:37,780
these metrics are useful and I actually

319
00:13:37,780 --> 00:13:39,910
pay attention to them but they're just

320
00:13:39,910 --> 00:13:41,260
part of what we're looking for when

321
00:13:41,260 --> 00:13:44,920
we're trying to measure speed so what's

322
00:13:44,920 --> 00:13:47,320
the new way what's the new strategy how

323
00:13:47,320 --> 00:13:48,820
do we fill in the blank spaces that are

324
00:13:48,820 --> 00:13:50,290
traditional measurements leave behind

325
00:13:50,290 --> 00:13:52,570
how do we find the best way to give our

326
00:13:52,570 --> 00:13:54,310
users what they want in the way we want

327
00:13:54,310 --> 00:13:55,960
to give it to them and as quickly as

328
00:13:55,960 --> 00:13:58,360
possible well that answer is kind of

329
00:13:58,360 --> 00:14:03,220
complicated but it sums up as we need to

330
00:14:03,220 --> 00:14:06,090
focus on the first usable time if

331
00:14:06,090 --> 00:14:08,590
instead of monitoring how long it takes

332
00:14:08,590 --> 00:14:11,080
for the entire page to load we instead

333
00:14:11,080 --> 00:14:13,330
measure how long it takes for the user

334
00:14:13,330 --> 00:14:15,100
to use the page for what they want to

335
00:14:15,100 --> 00:14:16,930
use it for we can get a more accurate

336
00:14:16,930 --> 00:14:21,250
gauge on general usability because it's

337
00:14:21,250 --> 00:14:23,320
incredibly frustrating to get to a page

338
00:14:23,320 --> 00:14:25,060
that clearly has all the content

339
00:14:25,060 --> 00:14:27,130
downloaded but the text is blank until

340
00:14:27,130 --> 00:14:30,010
the font loads this is the New York

341
00:14:30,010 --> 00:14:32,320
Times yesterday on Chrome note how I

342
00:14:32,320 --> 00:14:35,740
can't read the headlines and it's

343
00:14:35,740 --> 00:14:37,390
incredibly frustrated to get to a page

344
00:14:37,390 --> 00:14:39,010
that looks visually complete but has so

345
00:14:39,010 --> 00:14:40,210
many different scripts on it that you

346
00:14:40,210 --> 00:14:43,060
can't even interact with it so what

347
00:14:43,060 --> 00:14:44,620
kinds of things are people using now to

348
00:14:44,620 --> 00:14:48,610
find out if their site is usable I'd say

349
00:14:48,610 --> 00:14:50,610
the most popular measurement right now

350
00:14:50,610 --> 00:14:54,970
newer one at least is speed index speed

351
00:14:54,970 --> 00:14:56,860
index was invented by the fine folks who

352
00:14:56,860 --> 00:14:58,780
bring you web page test which is a

353
00:14:58,780 --> 00:15:00,760
fantastic tool that allows you to see

354
00:15:00,760 --> 00:15:02,170
video strips of your site and how it

355
00:15:02,170 --> 00:15:04,600
loads you can break it down to the tenth

356
00:15:04,600 --> 00:15:06,430
of a second and for those of us who like

357
00:15:06,430 --> 00:15:08,380
to nerd out about this kind of stuff you

358
00:15:08,380 --> 00:15:10,300
can roll through and really see how the

359
00:15:10,300 --> 00:15:12,880
browser puts your page together it's a

360
00:15:12,880 --> 00:15:14,920
fantastic tool I strongly recommend

361
00:15:14,920 --> 00:15:17,050
using it and maybe even buying the book

362
00:15:17,050 --> 00:15:21,160
about using it anyway the speed index

363
00:15:21,160 --> 00:15:23,530
metric is based upon visual completeness

364
00:15:23,530 --> 00:15:26,040
and how quickly your site can get there

365
00:15:26,040 --> 00:15:30,790
so let's talk about the formula it the

366
00:15:30,790 --> 00:15:33,430
speed index is calculated as an integral

367
00:15:33,430 --> 00:15:35,890
of 0 to end which is recorded in

368
00:15:35,890 --> 00:15:38,170
milliseconds of 1 minus the visual

369
00:15:38,170 --> 00:15:42,120
completion percentage / 100 so if

370
00:15:42,120 --> 00:15:44,290
integrals and calculus were not your

371
00:15:44,290 --> 00:15:44,720
strong so

372
00:15:44,720 --> 00:15:46,220
let's talk about this in the form of a

373
00:15:46,220 --> 00:15:50,720
chart with visual progress being on the

374
00:15:50,720 --> 00:15:53,959
y-axis and time being on the X the

375
00:15:53,959 --> 00:15:56,449
shaded area here is the part of your

376
00:15:56,449 --> 00:15:59,180
page that is visually incomplete you can

377
00:15:59,180 --> 00:16:00,829
tell right here that it eventually

378
00:16:00,829 --> 00:16:05,449
approaches zero this gives you something

379
00:16:05,449 --> 00:16:07,250
measurable and you can use web the web

380
00:16:07,250 --> 00:16:10,279
page test API to run several tests

381
00:16:10,279 --> 00:16:12,470
against your page and return median

382
00:16:12,470 --> 00:16:14,240
results which is something you can use

383
00:16:14,240 --> 00:16:15,920
as a benchmark to make sure you're not

384
00:16:15,920 --> 00:16:17,800
having serious performance regressions

385
00:16:17,800 --> 00:16:21,459
this example here is the NPM website it

386
00:16:21,459 --> 00:16:24,980
loads its content right there so you can

387
00:16:24,980 --> 00:16:26,930
see how it looks visually by tenth of a

388
00:16:26,930 --> 00:16:30,410
second and speed index isn't brand new

389
00:16:30,410 --> 00:16:33,199
but it's become accepted as another

390
00:16:33,199 --> 00:16:35,540
reliable data point to track that gets

391
00:16:35,540 --> 00:16:37,579
not just accepted it's suggested by

392
00:16:37,579 --> 00:16:39,350
Google and it's a fan favorite amongst

393
00:16:39,350 --> 00:16:43,160
the performance crowd so this is a great

394
00:16:43,160 --> 00:16:44,750
data point to add to those ones I

395
00:16:44,750 --> 00:16:47,180
mentioned before somebody else has made

396
00:16:47,180 --> 00:16:49,009
it easy for you to measure which is good

397
00:16:49,009 --> 00:16:51,019
it gives you a legitimate target to

398
00:16:51,019 --> 00:16:53,509
optimize for but what about when it

399
00:16:53,509 --> 00:16:56,120
doesn't capture quite what you need what

400
00:16:56,120 --> 00:16:57,680
if it's a detect what if it's detector

401
00:16:57,680 --> 00:16:59,509
for visual completeness is actually way

402
00:16:59,509 --> 00:17:01,610
off that happens from time to time but

403
00:17:01,610 --> 00:17:06,199
what else can we measure about the time

404
00:17:06,199 --> 00:17:08,059
it take or how about the time you take

405
00:17:08,059 --> 00:17:11,839
while blocking rendering like lowering

406
00:17:11,839 --> 00:17:14,000
this is the first key to making sure

407
00:17:14,000 --> 00:17:16,309
your users browsers are able to start as

408
00:17:16,309 --> 00:17:18,250
soon as they can or rendering your page

409
00:17:18,250 --> 00:17:22,610
so how do we do that you start by

410
00:17:22,610 --> 00:17:24,559
finding the files which are blocking

411
00:17:24,559 --> 00:17:27,169
rendering these include any CSS on your

412
00:17:27,169 --> 00:17:29,480
page and also any JavaScript that

413
00:17:29,480 --> 00:17:32,659
executes before the content does once

414
00:17:32,659 --> 00:17:33,830
you've found these you can use your

415
00:17:33,830 --> 00:17:35,570
network tab and your dev tools to read

416
00:17:35,570 --> 00:17:36,919
the total time you spent downloading

417
00:17:36,919 --> 00:17:39,350
these files but that's not necessarily

418
00:17:39,350 --> 00:17:41,530
sustainable for automating this process

419
00:17:41,530 --> 00:17:44,600
so let's have phantom j/s do it you know

420
00:17:44,600 --> 00:17:46,130
you can use phantom js2 right higher

421
00:17:46,130 --> 00:17:49,370
files okay so in case you don't know

422
00:17:49,370 --> 00:17:51,350
what a har file is our file stands for

423
00:17:51,350 --> 00:17:53,929
HTTP archive file they can be used to

424
00:17:53,929 --> 00:17:55,490
demonstrate the network traffic and

425
00:17:55,490 --> 00:17:57,770
assets loaded when visiting a page just

426
00:17:57,770 --> 00:17:58,790
like what the network

427
00:17:58,790 --> 00:18:01,780
we'll give you okay so back to Phantom

428
00:18:01,780 --> 00:18:04,520
by timing each assets request response

429
00:18:04,520 --> 00:18:07,130
cycle including start time and time and

430
00:18:07,130 --> 00:18:09,470
the size of the files you can do exactly

431
00:18:09,470 --> 00:18:12,500
what the network tab does in this case I

432
00:18:12,500 --> 00:18:14,920
ran a script that created a har file

433
00:18:14,920 --> 00:18:18,740
which is in JSON format and then I

434
00:18:18,740 --> 00:18:24,770
opened it in Charles to inspect it so

435
00:18:24,770 --> 00:18:26,720
you could get a good breakdown of how

436
00:18:26,720 --> 00:18:28,850
all of that stuff works and how it all

437
00:18:28,850 --> 00:18:30,350
looks and you can have it automatically

438
00:18:30,350 --> 00:18:33,170
produced and that's fantastic and useful

439
00:18:33,170 --> 00:18:36,410
what else how many round trips does it

440
00:18:36,410 --> 00:18:39,250
take to view your content is it over one

441
00:18:39,250 --> 00:18:43,880
let's talk about how that works so when

442
00:18:43,880 --> 00:18:47,930
you have a new HTTP request here's a

443
00:18:47,930 --> 00:18:51,560
thing out there use TCP to connect now

444
00:18:51,560 --> 00:18:54,080
did you know that TCP connections cannot

445
00:18:54,080 --> 00:18:55,850
use the full bandwidth available to them

446
00:18:55,850 --> 00:18:59,270
in order to prevent dropped packets TCP

447
00:18:59,270 --> 00:19:01,790
starts slow as it doesn't know the

448
00:19:01,790 --> 00:19:03,530
quality of the network it's sending data

449
00:19:03,530 --> 00:19:05,180
over and wants to avoid congestion of

450
00:19:05,180 --> 00:19:07,940
that network therefore it's a standard

451
00:19:07,940 --> 00:19:10,910
ascent at a maximum 10 TCP packets on a

452
00:19:10,910 --> 00:19:12,560
new connection for its first round trip

453
00:19:12,560 --> 00:19:16,370
at 1500 bytes per packet that's only

454
00:19:16,370 --> 00:19:19,330
fourteen point six five kilobytes at

455
00:19:19,330 --> 00:19:21,470
this point the client sends an

456
00:19:21,470 --> 00:19:23,090
acknowledgement that it has received the

457
00:19:23,090 --> 00:19:25,910
data and it sends it to the server so it

458
00:19:25,910 --> 00:19:28,160
will send more the server will slowly

459
00:19:28,160 --> 00:19:30,560
ramp up the amount that it sends with

460
00:19:30,560 --> 00:19:32,480
each trip but this can take a bit if

461
00:19:32,480 --> 00:19:34,250
you've got a huge first file you're

462
00:19:34,250 --> 00:19:36,980
sending so in this example here you just

463
00:19:36,980 --> 00:19:39,230
like jump left to right that client says

464
00:19:39,230 --> 00:19:41,420
hey I'd like you know to visit this page

465
00:19:41,420 --> 00:19:44,420
the server gives back that first 14.6 5k

466
00:19:44,420 --> 00:19:46,820
the client says I've got it so the

467
00:19:46,820 --> 00:19:48,560
server starts ramping up how much it can

468
00:19:48,560 --> 00:19:50,270
send with the client acknowledging each

469
00:19:50,270 --> 00:19:54,380
time how much that it received it so

470
00:19:54,380 --> 00:19:55,820
what does this actually mean for you in

471
00:19:55,820 --> 00:19:59,720
practice if you can keep all of what is

472
00:19:59,720 --> 00:20:02,120
needed to use the Site out of the gates

473
00:20:02,120 --> 00:20:05,210
in one request lower than or equal to 14

474
00:20:05,210 --> 00:20:07,820
points 6 for 8 kilobytes you're cutting

475
00:20:07,820 --> 00:20:09,440
the amount of round trips that need to

476
00:20:09,440 --> 00:20:11,660
happen for your site to be usable and in

477
00:20:11,660 --> 00:20:15,290
ibly fast speed even over high latency

478
00:20:15,290 --> 00:20:17,960
and low bandwidth networks the this will

479
00:20:17,960 --> 00:20:22,120
feel snappy what else can we measure

480
00:20:22,120 --> 00:20:24,830
what about timing differences on every

481
00:20:24,830 --> 00:20:27,470
event under the Sun have you used the

482
00:20:27,470 --> 00:20:31,040
performance timing API before it's

483
00:20:31,040 --> 00:20:33,680
awesome so let's do this we'll bring

484
00:20:33,680 --> 00:20:36,890
phantom Jas back out I can automate

485
00:20:36,890 --> 00:20:39,920
running this performance timing load

486
00:20:39,920 --> 00:20:42,350
event and minus performance timing got

487
00:20:42,350 --> 00:20:44,240
navigation start what this does is it

488
00:20:44,240 --> 00:20:46,340
gives you the time in milliseconds from

489
00:20:46,340 --> 00:20:47,810
the moment the browser starts the

490
00:20:47,810 --> 00:20:50,240
process of navigation to your page to

491
00:20:50,240 --> 00:20:51,590
the moment it's finished loading the

492
00:20:51,590 --> 00:20:53,720
page this is far more exact than

493
00:20:53,720 --> 00:20:56,060
anything on load could ever give you so

494
00:20:56,060 --> 00:21:00,560
it's really useful this would this right

495
00:21:00,560 --> 00:21:02,330
here performance not timing Dom

496
00:21:02,330 --> 00:21:04,310
interactive minus performance not timing

497
00:21:04,310 --> 00:21:06,500
gut response start this will give you

498
00:21:06,500 --> 00:21:07,670
the time from the moment where your

499
00:21:07,670 --> 00:21:09,260
server response comes back to your

500
00:21:09,260 --> 00:21:11,600
browser until the timer the browser is

501
00:21:11,600 --> 00:21:13,910
finished parsing all of the HTML and Dom

502
00:21:13,910 --> 00:21:17,660
construction is now complete are those

503
00:21:17,660 --> 00:21:20,900
not exact enough here are all the

504
00:21:20,900 --> 00:21:24,500
options available for timing for almost

505
00:21:24,500 --> 00:21:26,840
every measured point here you can record

506
00:21:26,840 --> 00:21:29,000
and report back your data this should

507
00:21:29,000 --> 00:21:30,680
push you along nicely to having your own

508
00:21:30,680 --> 00:21:35,960
real time user monitoring but sometimes

509
00:21:35,960 --> 00:21:38,450
things aren't so cut and dry and this is

510
00:21:38,450 --> 00:21:40,010
where a big caveat comes in in all this

511
00:21:40,010 --> 00:21:41,450
you can come up with all of your own

512
00:21:41,450 --> 00:21:42,440
statistics and all of your own

513
00:21:42,440 --> 00:21:44,840
monitoring but different websites need

514
00:21:44,840 --> 00:21:47,210
different measurements and it's great to

515
00:21:47,210 --> 00:21:49,250
line up your sites and compete over

516
00:21:49,250 --> 00:21:51,470
medium speed indexes and page weights

517
00:21:51,470 --> 00:21:53,690
and load times and seriously competing

518
00:21:53,690 --> 00:21:55,640
or without stuff makes a better web for

519
00:21:55,640 --> 00:21:58,310
all of us but what if your page cannot

520
00:21:58,310 --> 00:22:00,320
possibly be considered complete until

521
00:22:00,320 --> 00:22:03,230
the hero image is loaded what if you

522
00:22:03,230 --> 00:22:04,730
couldn't even think of your page of

523
00:22:04,730 --> 00:22:06,530
using your page until your menu can not

524
00:22:06,530 --> 00:22:08,330
only be clicked on but it can be used as

525
00:22:08,330 --> 00:22:11,660
well and this is where we end up

526
00:22:11,660 --> 00:22:13,970
building something of our own we can

527
00:22:13,970 --> 00:22:15,650
have all these well vetted formulas and

528
00:22:15,650 --> 00:22:17,020
ways to approach performance out there

529
00:22:17,020 --> 00:22:20,480
but to really approach our problems at

530
00:22:20,480 --> 00:22:23,060
their source we need something that fits

531
00:22:23,060 --> 00:22:24,840
our own personal sites

532
00:22:24,840 --> 00:22:26,340
for that we're going to need real-time

533
00:22:26,340 --> 00:22:28,289
user monitoring and we're also going to

534
00:22:28,289 --> 00:22:30,419
need some custom metrics luckily we've

535
00:22:30,419 --> 00:22:35,940
got those turd the user timing API these

536
00:22:35,940 --> 00:22:37,950
are timing API is still in recommended

537
00:22:37,950 --> 00:22:40,500
status by the w3c and it's not used by

538
00:22:40,500 --> 00:22:43,409
Safari yet including iOS or opera mini

539
00:22:43,409 --> 00:22:46,110
but there's a perfectly good poly fill

540
00:22:46,110 --> 00:22:48,950
out there for this so let's get going

541
00:22:48,950 --> 00:22:51,990
the user timing API provides a couple of

542
00:22:51,990 --> 00:22:54,120
really good methods that can help us

543
00:22:54,120 --> 00:22:55,650
better track what's going on on our page

544
00:22:55,650 --> 00:22:57,809
they attach right to the performance

545
00:22:57,809 --> 00:23:01,919
interface these methods include mark

546
00:23:01,919 --> 00:23:03,870
which allows you to take a quick time

547
00:23:03,870 --> 00:23:07,110
snapshot that is saved and measure which

548
00:23:07,110 --> 00:23:09,000
will give you a measurement between two

549
00:23:09,000 --> 00:23:11,580
marks with these you can very accurately

550
00:23:11,580 --> 00:23:13,620
time what's happening it's just how long

551
00:23:13,620 --> 00:23:16,200
it takes for these things to happen so

552
00:23:16,200 --> 00:23:18,240
let's use an example have a page that

553
00:23:18,240 --> 00:23:20,640
isn't considered ready until this image

554
00:23:20,640 --> 00:23:24,179
itself is front and center now with the

555
00:23:24,179 --> 00:23:26,429
regular performance timing API I can

556
00:23:26,429 --> 00:23:28,770
have the ability to grab the file that

557
00:23:28,770 --> 00:23:31,049
was requested and it can tell you how

558
00:23:31,049 --> 00:23:33,630
long it takes to get the file with get

559
00:23:33,630 --> 00:23:35,640
entries binding and then I can just

560
00:23:35,640 --> 00:23:37,679
check the duration of that but that's

561
00:23:37,679 --> 00:23:39,179
not the whole story to the file we need

562
00:23:39,179 --> 00:23:43,830
to see when it actually shows up so for

563
00:23:43,830 --> 00:23:45,630
that we can borrow a little trick that

564
00:23:45,630 --> 00:23:47,700
Steve Souders came up with and combine a

565
00:23:47,700 --> 00:23:49,649
few different methods for marketing we

566
00:23:49,649 --> 00:23:52,590
can start with an inline load man I

567
00:23:52,590 --> 00:23:53,700
always wanted to use the laser pointer

568
00:23:53,700 --> 00:23:57,120
on this in line on load on the image

569
00:23:57,120 --> 00:23:59,760
itself and then we can also put an

570
00:23:59,760 --> 00:24:01,770
inline script right behind the image tag

571
00:24:01,770 --> 00:24:03,750
so it will execute while the page is

572
00:24:03,750 --> 00:24:06,750
being rendered then we can check the

573
00:24:06,750 --> 00:24:08,429
start time with the start time is for

574
00:24:08,429 --> 00:24:11,190
each of these marks the highest in this

575
00:24:11,190 --> 00:24:12,510
case will give us the actual time that

576
00:24:12,510 --> 00:24:13,860
the image has been rendered on the page

577
00:24:13,860 --> 00:24:16,380
this is immensely useful for a hero

578
00:24:16,380 --> 00:24:18,600
image or for app image that the page

579
00:24:18,600 --> 00:24:20,309
actually relies upon to be considered

580
00:24:20,309 --> 00:24:22,830
usable such as if you're you have a site

581
00:24:22,830 --> 00:24:24,240
where people are buying things and they

582
00:24:24,240 --> 00:24:25,950
need to see the picture to be able to

583
00:24:25,950 --> 00:24:29,940
use the page that's pretty neat huh so

584
00:24:29,940 --> 00:24:32,520
hopefully you have an idea of something

585
00:24:32,520 --> 00:24:34,380
in your head that you can measure that

586
00:24:34,380 --> 00:24:36,149
will dramatically increase the actual

587
00:24:36,149 --> 00:24:37,789
visibility you have in

588
00:24:37,789 --> 00:24:40,399
to your site's performance but never be

589
00:24:40,399 --> 00:24:41,830
satisfied with just those measurements

590
00:24:41,830 --> 00:24:44,029
new techniques will continue to be

591
00:24:44,029 --> 00:24:46,129
developed and with them will come better

592
00:24:46,129 --> 00:24:49,070
insight along the way so pay attention

593
00:24:49,070 --> 00:24:50,989
to your statistics and tests across the

594
00:24:50,989 --> 00:24:52,309
board and you should have a lot of

595
00:24:52,309 --> 00:24:56,200
success and then you can dance so now

596
00:24:56,200 --> 00:24:58,129
now that you have your own measurements

597
00:24:58,129 --> 00:24:59,840
in order maybe we can focus on what we

598
00:24:59,840 --> 00:25:03,350
need to do to speed things up a bit so

599
00:25:03,350 --> 00:25:04,879
Layton sees a big one latency is the

600
00:25:04,879 --> 00:25:06,259
amount of time it takes for your request

601
00:25:06,259 --> 00:25:07,369
to make it from the client to the server

602
00:25:07,369 --> 00:25:11,179
the transmission is limited by first the

603
00:25:11,179 --> 00:25:12,830
speed of light but then the resistance

604
00:25:12,830 --> 00:25:14,989
provided by the copper used in the wire

605
00:25:14,989 --> 00:25:17,389
and the path taken from routing station

606
00:25:17,389 --> 00:25:18,979
or routing station for these HTTP

607
00:25:18,979 --> 00:25:22,009
requests since the path is such a factor

608
00:25:22,009 --> 00:25:24,349
in this case using a CDN can greatly

609
00:25:24,349 --> 00:25:26,440
limit the amount of latency your users

610
00:25:26,440 --> 00:25:28,549
incur by shortening the distance of the

611
00:25:28,549 --> 00:25:31,909
request testicle another way to avoid

612
00:25:31,909 --> 00:25:33,649
latency issues is cater to your critical

613
00:25:33,649 --> 00:25:36,409
path as I mentioned earlier the first

614
00:25:36,409 --> 00:25:39,229
request makes to the client they are the

615
00:25:39,229 --> 00:25:40,460
first request that the client makes to

616
00:25:40,460 --> 00:25:42,919
the server will be limited by tcp slow

617
00:25:42,919 --> 00:25:45,799
start this limit is roughly 14.6

618
00:25:45,799 --> 00:25:48,889
kilobytes with this in mind if you can

619
00:25:48,889 --> 00:25:50,929
inline your CSS that is critical for the

620
00:25:50,929 --> 00:25:52,639
page to load and then asynchronously

621
00:25:52,639 --> 00:25:54,739
load your full CSS file along with any

622
00:25:54,739 --> 00:25:56,840
unnecessary knee you know necessary

623
00:25:56,840 --> 00:25:59,359
JavaScript you can make sure little to

624
00:25:59,359 --> 00:26:00,979
no render blocking that relies on a

625
00:26:00,979 --> 00:26:03,049
network request occurs and your first

626
00:26:03,049 --> 00:26:05,059
round trip will have everything a user

627
00:26:05,059 --> 00:26:07,909
needs to use a site one of my favorite

628
00:26:07,909 --> 00:26:09,470
examples of this is the filament group

629
00:26:09,470 --> 00:26:11,840
website in this case I throttle the

630
00:26:11,840 --> 00:26:14,749
connection down at to just a 2g and the

631
00:26:14,749 --> 00:26:16,309
site was still usable in less than a

632
00:26:16,309 --> 00:26:21,049
second while sending an empty body and

633
00:26:21,049 --> 00:26:22,970
waiting for a script to load all of your

634
00:26:22,970 --> 00:26:25,580
assets may feel cleaner and and

635
00:26:25,580 --> 00:26:28,159
certainly nice for a lot of things it it

636
00:26:28,159 --> 00:26:29,960
guarantees that there will be a minimum

637
00:26:29,960 --> 00:26:31,070
of two requests before you can even

638
00:26:31,070 --> 00:26:33,259
start building the content for your page

639
00:26:33,259 --> 00:26:35,090
and once that happens if your user has

640
00:26:35,090 --> 00:26:36,470
an underpowered device then it can take

641
00:26:36,470 --> 00:26:38,869
even longer and that's why server-side

642
00:26:38,869 --> 00:26:40,609
rendering is important rendering your

643
00:26:40,609 --> 00:26:42,499
site on the server first and sending the

644
00:26:42,499 --> 00:26:45,169
HTML on the first response will almost

645
00:26:45,169 --> 00:26:48,080
always provide a faster first page load

646
00:26:48,080 --> 00:26:50,299
in the past we've been able to achieve

647
00:26:50,299 --> 00:26:51,559
this with progressive and hand

648
00:26:51,559 --> 00:26:54,730
which I'm a huge advocate for but now

649
00:26:54,730 --> 00:26:56,870
javascript frameworks libraries whatever

650
00:26:56,870 --> 00:26:58,190
you want to call them in this case

651
00:26:58,190 --> 00:27:00,320
they're catering to this performance

652
00:27:00,320 --> 00:27:02,389
necessity by allowing your first request

653
00:27:02,389 --> 00:27:05,299
to be served HTML ember does it with

654
00:27:05,299 --> 00:27:08,029
fastboot angular 2 does it I know you

655
00:27:08,029 --> 00:27:11,629
can build it in with backbone etc you

656
00:27:11,629 --> 00:27:14,360
can also use best practices which I

657
00:27:14,360 --> 00:27:16,159
never really liked that term it tends to

658
00:27:16,159 --> 00:27:18,529
mean hacks that involve tribal knowledge

659
00:27:18,529 --> 00:27:20,299
so we can work around limitations of our

660
00:27:20,299 --> 00:27:23,720
technology and with HTTP 1.1 we have a

661
00:27:23,720 --> 00:27:25,669
lot of those so let's talk about why

662
00:27:25,669 --> 00:27:27,950
they're actually recommended instead of

663
00:27:27,950 --> 00:27:31,610
hand waving around them for example due

664
00:27:31,610 --> 00:27:33,440
to the amount of concurrent requests a

665
00:27:33,440 --> 00:27:36,860
browser can make 6 which is a completely

666
00:27:36,860 --> 00:27:39,259
arbitrary number that we all for some

667
00:27:39,259 --> 00:27:41,600
reason need to memorize we suggest you

668
00:27:41,600 --> 00:27:43,399
concatenate all of your CSS and

669
00:27:43,399 --> 00:27:45,049
JavaScript files so as to limit the

670
00:27:45,049 --> 00:27:46,669
number of requests that your browser can

671
00:27:46,669 --> 00:27:50,419
make without stalling and since we're

672
00:27:50,419 --> 00:27:52,490
sending this big file of CSS or

673
00:27:52,490 --> 00:27:54,379
JavaScript we want to make sure that we

674
00:27:54,379 --> 00:27:55,970
can make it is syntactically small as

675
00:27:55,970 --> 00:27:58,070
possible we want to strip comments we

676
00:27:58,070 --> 00:27:59,450
want to make variable names as small as

677
00:27:59,450 --> 00:28:01,909
possible etc minification makes this

678
00:28:01,909 --> 00:28:03,350
possible by parsing your file and then

679
00:28:03,350 --> 00:28:05,799
recreating your coat in the smallest way

680
00:28:05,799 --> 00:28:09,139
then there's gzip I'm a huge fan of G's

681
00:28:09,139 --> 00:28:10,789
if I think it's really really great gzip

682
00:28:10,789 --> 00:28:12,320
works like the video you see on the

683
00:28:12,320 --> 00:28:15,799
screen it looks for repetition in the

684
00:28:15,799 --> 00:28:17,659
text that's being sent and it writes to

685
00:28:17,659 --> 00:28:19,309
file something that references said

686
00:28:19,309 --> 00:28:22,220
repetition if you can see the red text

687
00:28:22,220 --> 00:28:24,080
that's starting to pop up there that's

688
00:28:24,080 --> 00:28:27,590
the part that's rep that's repeating so

689
00:28:27,590 --> 00:28:29,690
this compression process actually is

690
00:28:29,690 --> 00:28:31,549
really really fast and it makes for some

691
00:28:31,549 --> 00:28:34,669
immensely smaller files for transfer so

692
00:28:34,669 --> 00:28:36,259
you should always gzip where you can

693
00:28:36,259 --> 00:28:37,850
you'll save money on bandwidth and

694
00:28:37,850 --> 00:28:39,529
provide a better experience for your

695
00:28:39,529 --> 00:28:41,480
users once again everything in the red

696
00:28:41,480 --> 00:28:45,919
there that gets compressed out so

697
00:28:45,919 --> 00:28:48,230
combining gzip and minification can be a

698
00:28:48,230 --> 00:28:50,179
huge for dropping your file size for

699
00:28:50,179 --> 00:28:52,389
example here's jquery dropping from

700
00:28:52,389 --> 00:28:59,119
247,000 597 bytes 220 9607 bytes so as I

701
00:28:59,119 --> 00:29:00,710
mentioned best practices are normally

702
00:29:00,710 --> 00:29:02,690
artifacts that come with limitations of

703
00:29:02,690 --> 00:29:05,360
your current ecosystem http/2 helps

704
00:29:05,360 --> 00:29:06,500
rest these issues in a lot of ways and

705
00:29:06,500 --> 00:29:09,020
best of all you can use it right now

706
00:29:09,020 --> 00:29:10,790
delivering your site based on what your

707
00:29:10,790 --> 00:29:14,630
client asks for so hopefully you have

708
00:29:14,630 --> 00:29:15,799
some ways in your mind to measure

709
00:29:15,799 --> 00:29:17,330
performance on your site with these

710
00:29:17,330 --> 00:29:18,830
measurements you can concentrate on the

711
00:29:18,830 --> 00:29:20,900
pain points in your site by focusing on

712
00:29:20,900 --> 00:29:22,940
methods to speed everything up this is

713
00:29:22,940 --> 00:29:24,440
great it's wonderful but let's bring it

714
00:29:24,440 --> 00:29:28,010
down to the last part never settling set

715
00:29:28,010 --> 00:29:29,270
a performance budget and stick to it

716
00:29:29,270 --> 00:29:30,890
know what you want your users to

717
00:29:30,890 --> 00:29:33,320
experience measure increases and

718
00:29:33,320 --> 00:29:34,820
decreases in your time and see how that

719
00:29:34,820 --> 00:29:36,410
affects your traffic your conversions

720
00:29:36,410 --> 00:29:38,299
your sales and make sure the continuous

721
00:29:38,299 --> 00:29:40,160
integration system tests if your budget

722
00:29:40,160 --> 00:29:43,700
is being met here's how etsy handles

723
00:29:43,700 --> 00:29:46,669
this they keep a video showing on a big

724
00:29:46,669 --> 00:29:49,400
wall in there a building how their site

725
00:29:49,400 --> 00:29:51,620
currently loads displayed front and

726
00:29:51,620 --> 00:29:55,220
center developers of the site see where

727
00:29:55,220 --> 00:29:56,540
their members or where their numbers

728
00:29:56,540 --> 00:29:58,610
currently are so they're empowered to

729
00:29:58,610 --> 00:30:00,500
act upon problems and what they're

730
00:30:00,500 --> 00:30:01,940
building to see if their success their

731
00:30:01,940 --> 00:30:06,260
successes firsthand so I've talked a lot

732
00:30:06,260 --> 00:30:08,360
up here about how performance affects

733
00:30:08,360 --> 00:30:10,490
the bottom line and I even named this

734
00:30:10,490 --> 00:30:12,230
talk after a baseball method of

735
00:30:12,230 --> 00:30:13,790
extracting the most you can out of your

736
00:30:13,790 --> 00:30:15,230
team without spending more money than

737
00:30:15,230 --> 00:30:17,990
necessary but performance web

738
00:30:17,990 --> 00:30:19,850
performance at least it's about more

739
00:30:19,850 --> 00:30:22,309
than that building a faster website

740
00:30:22,309 --> 00:30:24,830
makes for more money sure but it also

741
00:30:24,830 --> 00:30:26,660
increases the amount of people who can

742
00:30:26,660 --> 00:30:29,450
visit your site faster sites tend to be

743
00:30:29,450 --> 00:30:33,140
faster period all the way down and so

744
00:30:33,140 --> 00:30:34,910
that makes it your site more accessible

745
00:30:34,910 --> 00:30:36,320
for everybody including everybody who

746
00:30:36,320 --> 00:30:38,809
has a lagging network behind him and and

747
00:30:38,809 --> 00:30:45,419
that with the web's all about thanks

748
00:30:45,429 --> 00:30:49,480
thank you Jeff were wonderful talk a

749
00:30:49,480 --> 00:30:53,120
follow from my own experience about the

750
00:30:53,120 --> 00:30:56,750
performers API by the WTC I find the

751
00:30:56,750 --> 00:30:59,750
issue is whether it's really accurate

752
00:30:59,750 --> 00:31:02,900
for the use of all time like you add the

753
00:31:02,900 --> 00:31:05,000
marking your transcript but in fact it

754
00:31:05,000 --> 00:31:08,720
may be other time the pages do some

755
00:31:08,720 --> 00:31:12,610
harder unusable so that's a one issue we

756
00:31:12,610 --> 00:31:17,059
encountered yeah yeah no I I totally see

757
00:31:17,059 --> 00:31:19,370
that and that's why at least in the

758
00:31:19,370 --> 00:31:21,410
image hero part right there I had two

759
00:31:21,410 --> 00:31:23,630
different marks and that piece you'll

760
00:31:23,630 --> 00:31:26,000
find that the performance timing API in

761
00:31:26,000 --> 00:31:28,010
the user timing API occasionally need

762
00:31:28,010 --> 00:31:31,580
you to figure out first what you're

763
00:31:31,580 --> 00:31:35,809
trying to measure and so usability time

764
00:31:35,809 --> 00:31:37,520
as kind of arbitrary based on what your

765
00:31:37,520 --> 00:31:40,400
site is and so if you can pinpoint what

766
00:31:40,400 --> 00:31:43,130
it is you're exactly looking for it it

767
00:31:43,130 --> 00:31:46,430
tends to be able to help with your

768
00:31:46,430 --> 00:31:50,870
accuracy because you mentioned a Pollock

769
00:31:50,870 --> 00:31:53,780
on getting I just wonder if it's still

770
00:31:53,780 --> 00:31:56,240
worth to make some things like the

771
00:31:56,240 --> 00:31:59,750
Facebook speak pipe it's a legacy maybe

772
00:31:59,750 --> 00:32:02,570
legacy issue that we just try to

773
00:32:02,570 --> 00:32:05,059
optimize the doting with several bundles

774
00:32:05,059 --> 00:32:08,030
in in all just clear implementation but

775
00:32:08,030 --> 00:32:10,309
I don't know whether if we have the HTTP

776
00:32:10,309 --> 00:32:14,660
two we still need to do that yeah okay

777
00:32:14,660 --> 00:32:17,780
so this is actually where HTTP two comes

778
00:32:17,780 --> 00:32:21,740
in tremendously and fantastically so HED

779
00:32:21,740 --> 00:32:23,600
be too in case people McLeod don't know

780
00:32:23,600 --> 00:32:27,230
has a thing called server push which

781
00:32:27,230 --> 00:32:29,260
will basically deliver your assets

782
00:32:29,260 --> 00:32:31,520
immediately upon visiting the site it's

783
00:32:31,520 --> 00:32:35,660
pretty awesome and I'm so you can right

784
00:32:35,660 --> 00:32:37,309
now and it requires a little bit of

785
00:32:37,309 --> 00:32:40,160
finagling you can based on the header of

786
00:32:40,160 --> 00:32:43,160
the request you can direct your code to

787
00:32:43,160 --> 00:32:47,300
say load this stuff with HTTP two and if

788
00:32:47,300 --> 00:32:49,250
they're approaching with HTTP one dot

789
00:32:49,250 --> 00:32:52,790
one shoot them this way instead so with

790
00:32:52,790 --> 00:32:55,250
tooling you're still concatenated is

791
00:32:55,250 --> 00:32:57,710
part of your build process and you can

792
00:32:57,710 --> 00:33:00,590
say I want this one file to be served in

793
00:33:00,590 --> 00:33:04,250
the case of HTTP 1.1 but screw it load

794
00:33:04,250 --> 00:33:06,440
them all if they're coming with two

795
00:33:06,440 --> 00:33:07,850
because you can have a ton of parallel

796
00:33:07,850 --> 00:33:09,410
requests and they'll actually come out a

797
00:33:09,410 --> 00:33:13,130
lot faster that way hi I'm my name is

798
00:33:13,130 --> 00:33:15,100
Mitch I was just wondering your idea on

799
00:33:15,100 --> 00:33:18,590
how Facebook do it with a block ace like

800
00:33:18,590 --> 00:33:20,780
block certain elements with kind of non

801
00:33:20,780 --> 00:33:22,400
distinct distinguished shapes and

802
00:33:22,400 --> 00:33:24,890
whether that to the user is something

803
00:33:24,890 --> 00:33:27,560
that's feasible or not or does it does

804
00:33:27,560 --> 00:33:29,510
it appear to be faster or from the users

805
00:33:29,510 --> 00:33:30,890
perspective you think it works

806
00:33:30,890 --> 00:33:32,810
or like your opinions on that basically

807
00:33:32,810 --> 00:33:37,010
um so I'm I'm actually kind of a really

808
00:33:37,010 --> 00:33:39,980
big fan of the idea of building things

809
00:33:39,980 --> 00:33:44,930
that appear to be faster because that

810
00:33:44,930 --> 00:33:50,500
can well trick people into having your

811
00:33:50,500 --> 00:33:53,630
it it makes it so your site is still

812
00:33:53,630 --> 00:33:57,680
usable in a faster fashion and in

813
00:33:57,680 --> 00:33:59,960
Facebook's situation there that's what

814
00:33:59,960 --> 00:34:01,520
you're talking about that face image

815
00:34:01,520 --> 00:34:03,770
loading thing where it like gives you it

816
00:34:03,770 --> 00:34:05,600
turns out that that picture that your

817
00:34:05,600 --> 00:34:06,740
first saying there isn't necessarily

818
00:34:06,740 --> 00:34:08,330
what everybody is interested in right

819
00:34:08,330 --> 00:34:11,270
away it feels like that would be the

820
00:34:11,270 --> 00:34:13,280
case but mostly when you're looking at

821
00:34:13,280 --> 00:34:14,390
pictures you're thumbing through

822
00:34:14,390 --> 00:34:17,630
people's sorry I've cursed up here

823
00:34:17,630 --> 00:34:21,169
a lot today but yeah so I'm an advocate

824
00:34:21,169 --> 00:34:27,950
for it I work for a news agency and

825
00:34:27,950 --> 00:34:30,890
everything works fine till you inject

826
00:34:30,890 --> 00:34:33,590
the ads because the Moodle based on Ezra

827
00:34:33,590 --> 00:34:35,330
pending so how do you make the

828
00:34:35,330 --> 00:34:40,220
performance for it Oh God so performance

829
00:34:40,220 --> 00:34:44,300
on ads is yeah that's that's always

830
00:34:44,300 --> 00:34:45,740
difficult third-party javascript is

831
00:34:45,740 --> 00:34:47,210
something that it's difficult to wrap

832
00:34:47,210 --> 00:34:50,060
around I the only way that I've ever

833
00:34:50,060 --> 00:34:51,860
been found or I've ever found to make a

834
00:34:51,860 --> 00:34:56,149
site vastly more usable despite the ads

835
00:34:56,149 --> 00:34:58,460
on the page is to make sure they're lazy

836
00:34:58,460 --> 00:35:02,480
loaded in the most way possible put a

837
00:35:02,480 --> 00:35:05,360
sink put defer on those and shove them

838
00:35:05,360 --> 00:35:08,750
at the bottom of the page and everything

839
00:35:08,750 --> 00:35:10,550
else will be requested first and when

840
00:35:10,550 --> 00:35:12,890
there's time those will be requested in

841
00:35:12,890 --> 00:35:15,640
hopefully they don't cause a reflow

842
00:35:15,640 --> 00:35:18,410
that's that's my advice for you on that

