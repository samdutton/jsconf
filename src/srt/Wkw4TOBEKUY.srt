1
00:00:17,859 --> 00:00:18,859
Hi everyone.

2
00:00:18,859 --> 00:00:19,859
I'm Will.

3
00:00:19,859 --> 00:00:26,320
I work for the mobile web team in London.

4
00:00:26,320 --> 00:00:27,669
- My name is Pavel.

5
00:00:27,669 --> 00:00:28,669
From Moscow.

6
00:00:28,669 --> 00:00:30,300
We both work for Badoo.

7
00:00:30,300 --> 00:00:34,800
We built web and native applications.

8
00:00:34,800 --> 00:00:38,760
More than 200 million users.

9
00:00:38,760 --> 00:00:41,339
To meet eachother.

10
00:00:41,339 --> 00:00:45,360
- I lead the mobile webteam.

11
00:00:45,360 --> 00:00:50,199
We have been rearchitecting a lot at the api
lab.

12
00:00:50,199 --> 00:00:53,080
I'll talk about that.

13
00:00:53,080 --> 00:00:54,759
The problems with Api.

14
00:00:54,759 --> 00:00:58,620
Pavel is going to discuss details.

15
00:00:58,620 --> 00:01:00,320
About how we have implemented that.

16
00:01:00,320 --> 00:01:07,920
And I'll finish with examples of how we used
the tools.

17
00:01:07,920 --> 00:01:08,920
What is an Api?

18
00:01:08,920 --> 00:01:13,930
It is an application programming interface.

19
00:01:13,930 --> 00:01:21,180
In simple terms connecting your client side
and backend together, transferring data between

20
00:01:21,180 --> 00:01:23,110
the two.

21
00:01:23,110 --> 00:01:31,540
General operations, inputs, outputs, and has
some type semantics around that.

22
00:01:31,540 --> 00:01:38,010
It is independent of the implementation we
are using to create it.

23
00:01:38,010 --> 00:01:39,560
Simple.

24
00:01:39,560 --> 00:01:43,909
So, what are the requirements for building
a good api.

25
00:01:43,909 --> 00:01:45,930
We want a perfect want.

26
00:01:45,930 --> 00:01:49,750
It wants to work and be magic.

27
00:01:49,750 --> 00:01:57,740
Wants to be flexible, extensible, testable,
maintainable and platform and language neutral.

28
00:01:57,740 --> 00:02:01,200
Most of all, we are on it together.

29
00:02:01,200 --> 00:02:07,500
We want to focus building great features and
not the bytes over the web.

30
00:02:07,500 --> 00:02:11,700
How can you split up in 3 areas?

31
00:02:11,700 --> 00:02:12,739
You have encoding.

32
00:02:12,739 --> 00:02:16,560
This is what you send over the world.

33
00:02:16,560 --> 00:02:19,590
Format of the data we are sending.

34
00:02:19,590 --> 00:02:25,720
Then we have rules about what messages we
want to send and how we deal with them.

35
00:02:25,720 --> 00:02:27,010
Client server side.

36
00:02:27,010 --> 00:02:30,590
We have the messages from A to B.

37
00:02:30,590 --> 00:02:36,430
We want general help.

38
00:02:36,430 --> 00:02:39,150
And general validation that we do on the messages.

39
00:02:39,150 --> 00:02:44,040
How does it look in a classic Api example?

40
00:02:44,040 --> 00:02:51,560
We build in web applications that rely on
the common technologies.

41
00:02:51,560 --> 00:02:59,720
So, typically in the application you are going
to make Ajax request, encode it.

42
00:02:59,720 --> 00:03:03,940
The server is going to match that.

43
00:03:03,940 --> 00:03:10,970
We have some Php or Node logic that will format
that data in the response we want.

44
00:03:10,970 --> 00:03:13,090
Send it back through the system.

45
00:03:13,090 --> 00:03:21,770
Parse it and code it and go through similar
validation and use it in the business logic.

46
00:03:21,770 --> 00:03:24,620
But what are some of the problems we see?

47
00:03:24,620 --> 00:03:28,250
And why we haven't chosen this?

48
00:03:28,250 --> 00:03:33,910
Well, we have 2 different encoding semantics.

49
00:03:33,910 --> 00:03:36,690
That looks symmetric.

50
00:03:36,690 --> 00:03:40,709
But server side we are sending Json.

51
00:03:40,709 --> 00:03:45,910
Client we are coding it in url.

52
00:03:45,910 --> 00:03:48,269
What happens if we want to send back data
the other way?

53
00:03:48,269 --> 00:03:54,900
We are limited when using this example.

54
00:03:54,900 --> 00:03:57,750
And the server.

55
00:03:57,750 --> 00:04:00,920
What we want to initiate.

56
00:04:00,920 --> 00:04:04,450
We can use web sockets.

57
00:04:04,450 --> 00:04:09,550
Then we have to have another layer of system
that deals with the logic.

58
00:04:09,550 --> 00:04:13,500
We can't build it all into the same thing
easily.

59
00:04:13,500 --> 00:04:16,280
And, data access.

60
00:04:16,280 --> 00:04:24,150
There is no, when we build an Api, we have
different parts of the company dealing with

61
00:04:24,150 --> 00:04:26,949
eachother.

62
00:04:26,949 --> 00:04:28,240
How this is going to work.

63
00:04:28,240 --> 00:04:37,439
We don't have some process defined in the
use of the Api that we can use in showing.

64
00:04:37,439 --> 00:04:39,430
We don't have the versioning.

65
00:04:39,430 --> 00:04:42,069
And have duplicate code.

66
00:04:42,069 --> 00:04:46,919
So, Badoo's Api's.

67
00:04:46,919 --> 00:04:50,539
How does it fit in the things we are doing?

68
00:04:50,539 --> 00:04:53,919
We have a lot of databases in memory caches.

69
00:04:53,919 --> 00:04:58,360
That allows us to scale to 200 million users.

70
00:04:58,360 --> 00:05:06,979
They are connected via some native, binary
interface to a core web Api.

71
00:05:06,979 --> 00:05:09,969
That is in Php.

72
00:05:09,969 --> 00:05:12,479
We have the desktop side.

73
00:05:12,479 --> 00:05:19,129
Which connects and builds the feature.

74
00:05:19,129 --> 00:05:22,169
It didn't suit mobile.

75
00:05:22,169 --> 00:05:28,900
We have a mobile Api core that sits and presents
a different view.

76
00:05:28,900 --> 00:05:37,479
We have applications for Ios, Android and
Windows.

77
00:05:37,479 --> 00:05:41,319
Then the first thing we did was, we have a
desktop and native side.

78
00:05:41,319 --> 00:05:45,779
We don't have a mobile website.

79
00:05:45,779 --> 00:05:47,830
We had designs for mobile.

80
00:05:47,830 --> 00:05:51,880
We decided to build a feature of the site.

81
00:05:51,880 --> 00:05:53,159
That connects.

82
00:05:53,159 --> 00:05:55,960
That uses Java as technology.

83
00:05:55,960 --> 00:05:58,389
And the same interface.

84
00:05:58,389 --> 00:06:07,240
Then, 18 months, 2 years ago, we wanted a
single page for web application.

85
00:06:07,240 --> 00:06:11,300
We connected it to the mobile api.

86
00:06:11,300 --> 00:06:13,229
We didn't.

87
00:06:13,229 --> 00:06:18,669
Sadly, we couldn't use the binary technology
out of the box.

88
00:06:18,669 --> 00:06:23,270
We had another Api layer on top of the Java.

89
00:06:23,270 --> 00:06:28,300
And a semi service there.

90
00:06:28,300 --> 00:06:33,259
Recently, we have been joining the back direction.

91
00:06:33,259 --> 00:06:38,619
Pavel will talk about some of the ways we
used the experiences.

92
00:06:38,619 --> 00:06:45,740
And allowed us to encode it in a more web
friendly way.

93
00:06:45,740 --> 00:06:48,300
- I will talk about the solution we used.

94
00:06:48,300 --> 00:06:53,460
And key points you should keep in mind.

95
00:06:53,460 --> 00:06:56,869
There are a lot of implementations on market.

96
00:06:56,869 --> 00:06:59,210
But some of them are overengineered.

97
00:06:59,210 --> 00:07:03,330
Some have too much Xml inside.

98
00:07:03,330 --> 00:07:09,939
Forces to write in readable language.

99
00:07:09,939 --> 00:07:17,119
Let's take all the best parts and build our
own.

100
00:07:17,119 --> 00:07:22,279
We want to tell you about building another
universal Api.

101
00:07:22,279 --> 00:07:26,839
You know what happens if you try to build
a universal solution which solves all the

102
00:07:26,839 --> 00:07:28,699
problems.

103
00:07:28,699 --> 00:07:35,479
I will tell you about the problems we found
during the protocol design and how we have

104
00:07:35,479 --> 00:07:37,939
solved them.

105
00:07:37,939 --> 00:07:39,539
What should be the protocol values?

106
00:07:39,539 --> 00:07:48,969
First of all we want to have a protocol description
which is independent from language and platform.

107
00:07:48,969 --> 00:07:57,249
We want Api to be available for all platforms,
including Java, objective C. All the stuff.

108
00:07:57,249 --> 00:08:01,129
We want to be it Cpu and network efficient.

109
00:08:01,129 --> 00:08:03,060
On the same platforms.

110
00:08:03,060 --> 00:08:08,909
We want to have a nice data access class.

111
00:08:08,909 --> 00:08:17,060
We want, we don't want to have a config with
all the roads, to send a message to get something

112
00:08:17,060 --> 00:08:19,830
back.

113
00:08:19,830 --> 00:08:23,500
We want to put it inside the protocol.

114
00:08:23,500 --> 00:08:30,139
And of course, because we are feature rich
product, and we want to deliver new features

115
00:08:30,139 --> 00:08:32,770
fast, we want to have versioning.

116
00:08:32,770 --> 00:08:39,830
All of you know how long it takes to get from
Google and Apple.

117
00:08:39,830 --> 00:08:45,089
And the users don't update instantly.

118
00:08:45,089 --> 00:08:49,080
So we decided to look at Google protocol buffers.

119
00:08:49,080 --> 00:08:52,839
Used in the backend communication.

120
00:08:52,839 --> 00:08:57,120
And try to bring it to client server communication.

121
00:08:57,120 --> 00:09:06,180
We can take a look at the same diagram we
have.

122
00:09:06,180 --> 00:09:07,180
Both sides.

123
00:09:07,180 --> 00:09:13,180
We want to have a kind of event based system
to handle all the messages and take decision

124
00:09:13,180 --> 00:09:18,060
what comes to the other end.

125
00:09:18,060 --> 00:09:22,000
We have a generated class with nice Api.

126
00:09:22,000 --> 00:09:26,300
Dependent on a protocol which can be different.

127
00:09:26,300 --> 00:09:31,170
We want protocol description.

128
00:09:31,170 --> 00:09:37,470
We want to automate as much as possible.

129
00:09:37,470 --> 00:09:41,680
So, let's take a closer look at Google Protocol
Buffers.

130
00:09:41,680 --> 00:09:46,800
They have a nice interface language.

131
00:09:46,800 --> 00:09:49,480
All the features that we need.

132
00:09:49,480 --> 00:09:51,440
Internal representation is very good.

133
00:09:51,440 --> 00:09:55,839
We can easily extend their protocol.

134
00:09:55,839 --> 00:09:57,459
Itself.

135
00:09:57,459 --> 00:10:02,590
In case we have to patch the compiler, things
like that.

136
00:10:02,590 --> 00:10:04,050
In terms of language support.

137
00:10:04,050 --> 00:10:08,870
It ships support for C++, Java and Python.

138
00:10:08,870 --> 00:10:21,459
At 2009, when we started looking at it, there
was no support for Php.

139
00:10:21,459 --> 00:10:26,980
Plugins allow you to write your own language
you need.

140
00:10:26,980 --> 00:10:30,170
Encoding is network and Cpu efficient.

141
00:10:30,170 --> 00:10:32,810
It is binary.

142
00:10:32,810 --> 00:10:41,050
There are a lot of comparisons that are efficient.

143
00:10:41,050 --> 00:10:46,860
Let's take a look at details of Google Buffers.

144
00:10:46,860 --> 00:10:51,759
Description language has a number of entities.

145
00:10:51,759 --> 00:10:58,089
Enumerations, messages, fields and simple
service layer.

146
00:10:58,089 --> 00:11:03,550
All of the entities have options.

147
00:11:03,550 --> 00:11:06,110
Which describe details of the message.

148
00:11:06,110 --> 00:11:08,070
But isn't passed.

149
00:11:08,070 --> 00:11:17,240
The main advantage of Google implementation
of the compiler and the language itself.

150
00:11:17,240 --> 00:11:21,189
Is that is self describing.

151
00:11:21,189 --> 00:11:24,980
It is a protocol buffers message.

152
00:11:24,980 --> 00:11:30,579
It is brilliant stuff.

153
00:11:30,579 --> 00:11:32,220
Let's look at details.

154
00:11:32,220 --> 00:11:38,480
Field can be repeated, optional or required.

155
00:11:38,480 --> 00:11:42,870
The message wants validated.

156
00:11:42,870 --> 00:11:47,370
It can be an array.

157
00:11:47,370 --> 00:11:50,029
0 of that field.

158
00:11:50,029 --> 00:11:56,579
Interface description language has a wide
type system.

159
00:11:56,579 --> 00:12:02,310
Including messages and enumerations, which
allow to describe structures.

160
00:12:02,310 --> 00:12:05,240
And, all the fields have numbers.

161
00:12:05,240 --> 00:12:07,730
Field numbers give us versioning.

162
00:12:07,730 --> 00:12:09,350
I will talk about that later.

163
00:12:09,350 --> 00:12:13,350
A couple of examples.

164
00:12:13,350 --> 00:12:21,339
We had required, user field.

165
00:12:21,339 --> 00:12:26,029
Here is a small example of how does a message
look in the profile.

166
00:12:26,029 --> 00:12:30,399
William will give examples later.

167
00:12:30,399 --> 00:12:38,310
So, we have a nice description language we
can describe the protocol.

168
00:12:38,310 --> 00:12:44,250
Let's find out what we should actually use
in application code.

169
00:12:44,250 --> 00:12:49,350
We have only binary importing.

170
00:12:49,350 --> 00:12:53,480
We have a simple Rpc.

171
00:12:53,480 --> 00:12:55,639
And we don't have native support.

172
00:12:55,639 --> 00:12:58,149
Only third party solutions.

173
00:12:58,149 --> 00:13:01,800
Which have a bit different infrastructure.

174
00:13:01,800 --> 00:13:09,570
So, why we have chosen the solution so much
parts of which we don't like?

175
00:13:09,570 --> 00:13:12,149
Actually, there is an answer.

176
00:13:12,149 --> 00:13:17,940
It is because protocol buffer compiler.

177
00:13:17,940 --> 00:13:25,360
They allow us to implement our own coding,
generate our own classes.

178
00:13:25,360 --> 00:13:28,340
And nicely decouple all these things from
eachother.

179
00:13:28,340 --> 00:13:34,160
The infrastructure is nice.

180
00:13:34,160 --> 00:13:38,699
You can write a plugin in 20 lines.

181
00:13:38,699 --> 00:13:44,089
There will be an example later.

182
00:13:44,089 --> 00:13:50,230
You can write compiler plugins at any language
you like and generate the code at language

183
00:13:50,230 --> 00:13:52,839
that you need.

184
00:13:52,839 --> 00:13:58,740
This architecture makes it completely independent
of all the parts.

185
00:13:58,740 --> 00:14:02,380
From the serialisation.

186
00:14:02,380 --> 00:14:07,129
So, return to the picture.

187
00:14:07,129 --> 00:14:08,949
We started with.

188
00:14:08,949 --> 00:14:11,379
We have Badoo Api's.

189
00:14:11,379 --> 00:14:15,189
On this diagram.

190
00:14:15,189 --> 00:14:24,829
We use native encoding for native clients,
for communication between Php and services.

191
00:14:24,829 --> 00:14:33,499
We want to use Json encoding between our side
and the mobile browsers.

192
00:14:33,499 --> 00:14:42,319
We want to build our own solution, which encodes
protocol buffers in Json.

193
00:14:42,319 --> 00:14:45,240
It appears to be quite performant.

194
00:14:45,240 --> 00:14:46,809
It is not a problem.

195
00:14:46,809 --> 00:14:49,399
We can easily plug in serialisation.

196
00:14:49,399 --> 00:14:51,149
Or xml.

197
00:14:51,149 --> 00:15:04,189
So, we have to 
generate the classes.

198
00:15:04,189 --> 00:15:06,950
Simplified development process.

199
00:15:06,950 --> 00:15:11,959
Auto generate all of that.

200
00:15:11,959 --> 00:15:13,730
We change something.

201
00:15:13,730 --> 00:15:19,309
We want to generate all the data access classes.

202
00:15:19,309 --> 00:15:21,529
And all the stuff.

203
00:15:21,529 --> 00:15:25,290
On mobile developer infrastructure.

204
00:15:25,290 --> 00:15:28,990
We have a task.

205
00:15:28,990 --> 00:15:31,600
On the website more control over backend.

206
00:15:31,600 --> 00:15:39,839
We can generate code only in case that it
is newer than generated code.

207
00:15:39,839 --> 00:15:44,529
On production we do the generation on deploy
process.

208
00:15:44,529 --> 00:15:52,519
So, we have a nice interface description language,
a tool which auto generates all the classes.

209
00:15:52,519 --> 00:15:55,930
And we have a nice encoding we are happy with.

210
00:15:55,930 --> 00:15:58,560
Let's talk about message exchange.

211
00:15:58,560 --> 00:16:04,269
So, out of the box we have services.

212
00:16:04,269 --> 00:16:05,430
Simple implementation.

213
00:16:05,430 --> 00:16:13,110
Rpc is an ability of one node to call procedure
on another node without knowing the implementation

214
00:16:13,110 --> 00:16:14,110
details.

215
00:16:14,110 --> 00:16:24,509
For me, the services from Google Buffers are
too simple for complex application.

216
00:16:24,509 --> 00:16:29,110
We need a protocol layer.

217
00:16:29,110 --> 00:16:34,600
Which contains message ID, global protocol
service.

218
00:16:34,600 --> 00:16:38,830
All will be in a message.

219
00:16:38,830 --> 00:16:45,260
Also we have dependencies that we want 2 way
Rpc.

220
00:16:45,260 --> 00:16:53,790
We need to be able to call procedure on a
client.

221
00:16:53,790 --> 00:16:56,269
To deal with the right client.

222
00:16:56,269 --> 00:16:57,269
Ask for operator.

223
00:16:57,269 --> 00:16:58,939
We control the server.

224
00:16:58,939 --> 00:17:02,689
And we can deploy a number of minutes.

225
00:17:02,689 --> 00:17:07,030
But we don't control...

226
00:17:07,030 --> 00:17:10,829
Sorry.

227
00:17:10,829 --> 00:17:13,110
Plan control is harder.

228
00:17:13,110 --> 00:17:22,029
So, and, we built our own Rpc implementation.

229
00:17:22,029 --> 00:17:26,020
We call it two way Rpc.

230
00:17:26,020 --> 00:17:31,640
Rpc class takes a parameter the common idea
and message.

231
00:17:31,640 --> 00:17:37,570
You can subscribe to any message that came
from the backend.

232
00:17:37,570 --> 00:17:45,169
If you want to listen to all Rpc messages,
you can subscribe on Rpc any layer.

233
00:17:45,169 --> 00:17:49,690
And listen to all responses that could come
from the server.

234
00:17:49,690 --> 00:17:54,540
You can think about this as a back way server.

235
00:17:54,540 --> 00:17:56,789
Procedure on a client.

236
00:17:56,789 --> 00:18:05,120
The call back we receive our nice generated
class with all the types validated.

237
00:18:05,120 --> 00:18:09,750
You don't need to worry about field existance.

238
00:18:09,750 --> 00:18:15,780
And actually we use entities we had at the
protocol.

239
00:18:15,780 --> 00:18:19,429
The enumeration for message ID.

240
00:18:19,429 --> 00:18:20,880
Requesting the response.

241
00:18:20,880 --> 00:18:23,340
Normal messages.

242
00:18:23,340 --> 00:18:28,270
Last but not least.

243
00:18:28,270 --> 00:18:29,320
Versioning is very important.

244
00:18:29,320 --> 00:18:34,850
We have out of the box per field versioning.

245
00:18:34,850 --> 00:18:40,570
When you pass a new field to a client which
doesn't know about it, it will ignore it.

246
00:18:40,570 --> 00:18:42,260
Because of field number.

247
00:18:42,260 --> 00:18:43,751
I have told earlier.

248
00:18:43,751 --> 00:18:52,279
Because of Rpc implementation, we can ignore
unsupported comments.

249
00:18:52,279 --> 00:18:53,530
On a client.

250
00:18:53,530 --> 00:18:57,370
Also, because we use only generated data access
classes.

251
00:18:57,370 --> 00:19:03,630
In case you have removed some field in protocol
and try to use it in a client.

252
00:19:03,630 --> 00:19:05,640
You will receive errors.

253
00:19:05,640 --> 00:19:09,760
That it doesn't exist.

254
00:19:09,760 --> 00:19:14,560
So, in the end, you should define protocol
in 1 way.

255
00:19:14,560 --> 00:19:15,790
In 1 place.

256
00:19:15,790 --> 00:19:24,890
You should use generated classes to abstract
protocol internals from the application code.

257
00:19:24,890 --> 00:19:30,169
You should have validation inside those generated
classes.

258
00:19:30,169 --> 00:19:38,789
To be able to switch like even complete protocol
implementation inside.

259
00:19:38,789 --> 00:19:46,460
You can, this way allows you to have different
encodings depending on a situation.

260
00:19:46,460 --> 00:19:53,400
You have a Rpc layer, a lot of protocol details.

261
00:19:53,400 --> 00:20:02,899
And gives you simple, you listen what you
want.

262
00:20:02,899 --> 00:20:06,710
And helps you to focus on features, not the
protocol details.

263
00:20:06,710 --> 00:20:10,000
Versioning is also very critical.

264
00:20:10,000 --> 00:20:15,899
So, if you go this way, you'll end up with
implementation which actually, everything

265
00:20:15,899 --> 00:20:16,899
decoupled.

266
00:20:16,899 --> 00:20:28,600
And now Will will give you a couple of realworld
examples of what we have built.

267
00:20:28,600 --> 00:20:32,799
- Thank you.

268
00:20:32,799 --> 00:20:36,029
So, now we have all the tools.

269
00:20:36,029 --> 00:20:40,110
We want to put them together and go through
it.

270
00:20:40,110 --> 00:20:43,029
So, this is a mobile app.

271
00:20:43,029 --> 00:20:46,450
We have a couple of apps.

272
00:20:46,450 --> 00:20:48,260
This is a screen.

273
00:20:48,260 --> 00:20:50,350
And we type in a city.

274
00:20:50,350 --> 00:20:52,950
Change location.

275
00:20:52,950 --> 00:20:57,200
We want to click on it and save the location.

276
00:20:57,200 --> 00:21:01,070
So, what details do we need to build that
service?

277
00:21:01,070 --> 00:21:02,070
Simple.

278
00:21:02,070 --> 00:21:04,010
Send a city name.

279
00:21:04,010 --> 00:21:05,240
The part of the city name.

280
00:21:05,240 --> 00:21:09,670
And we come back with an ID, list of cities.

281
00:21:09,670 --> 00:21:20,730
And I'm going to talk about, 2 way Rpc.

282
00:21:20,730 --> 00:21:22,330
Communication as well.

283
00:21:22,330 --> 00:21:24,580
We also want a client notification.

284
00:21:24,580 --> 00:21:33,669
The service saying, some reason of state that
we need a warning message be displayed.

285
00:21:33,669 --> 00:21:36,799
These are the protocol definition messages
you need to define.

286
00:21:36,799 --> 00:21:39,500
The first is the enum messagetype.

287
00:21:39,500 --> 00:21:46,080
Definds the command that we send one way or
the server sends back.

288
00:21:46,080 --> 00:21:49,470
We use the convention here.

289
00:21:49,470 --> 00:21:51,920
Messages from the client to the server.

290
00:21:51,920 --> 00:21:52,970
Start with Server.

291
00:21:52,970 --> 00:21:56,720
And back to the client, start with client.

292
00:21:56,720 --> 00:22:01,210
It is about readability.

293
00:22:01,210 --> 00:22:04,580
Then we define the messages for the data we
have to send.

294
00:22:04,580 --> 00:22:06,900
So for city query.

295
00:22:06,900 --> 00:22:09,929
We have a string.

296
00:22:09,929 --> 00:22:17,600
And we deliberately try to make the messages
semantic.

297
00:22:17,600 --> 00:22:27,730
We find that being specific about the types
of message we send, allows us to see the code.

298
00:22:27,730 --> 00:22:32,130
And then the response coming back can be a
city.

299
00:22:32,130 --> 00:22:34,380
We have repeated city object.

300
00:22:34,380 --> 00:22:37,570
Which allows you to nest these things nice.

301
00:22:37,570 --> 00:22:40,710
And you get a structure.

302
00:22:40,710 --> 00:22:44,920
Finally, you have client notification message.

303
00:22:44,920 --> 00:22:50,860
An ID and message.

304
00:22:50,860 --> 00:22:57,309
Before we move on, there are core things we
have to define once.

305
00:22:57,309 --> 00:22:59,130
Wrapper message.

306
00:22:59,130 --> 00:23:02,750
We have the initial message.

307
00:23:02,750 --> 00:23:07,400
Everything that is contained that is sent.

308
00:23:07,400 --> 00:23:11,620
A version and message ID and a message body.

309
00:23:11,620 --> 00:23:17,140
We fill the message body with this type of
message.

310
00:23:17,140 --> 00:23:26,090
And the way it works, you can fill that in
with optional fields and you have it available

311
00:23:26,090 --> 00:23:27,450
for you.

312
00:23:27,450 --> 00:23:29,730
This is a generated class example.

313
00:23:29,730 --> 00:23:31,520
The details don't matter.

314
00:23:31,520 --> 00:23:35,150
A couple of things to take away.

315
00:23:35,150 --> 00:23:40,590
There is a base class we have control over.

316
00:23:40,590 --> 00:23:45,490
You don't have to edit it on a day to day
basis.

317
00:23:45,490 --> 00:23:48,460
Some generic validation for you.

318
00:23:48,460 --> 00:23:51,450
Make sure everything is happening properly.

319
00:23:51,450 --> 00:23:58,760
Here we have the descriptive information that
we pulled out when we did the generation stage

320
00:23:58,760 --> 00:24:04,610
from the message into the actual generated
class.

321
00:24:04,610 --> 00:24:07,779
And then the same thing for peer to peer.

322
00:24:07,779 --> 00:24:10,810
You can generate it into java.

323
00:24:10,810 --> 00:24:15,960
We have extended a base class.

324
00:24:15,960 --> 00:24:21,000
And we have a descriptor information, specific
how we want to format it.

325
00:24:21,000 --> 00:24:25,110
Now we have a generated classes.

326
00:24:25,110 --> 00:24:30,799
And we are ready to start using it with the
library.

327
00:24:30,799 --> 00:24:34,230
So, we want to make a new Rpc call.

328
00:24:34,230 --> 00:24:38,860
And send server search cities.

329
00:24:38,860 --> 00:24:40,649
From client to server.

330
00:24:40,649 --> 00:24:47,990
And we want to give that a city query object
which contains the data that we want to query.

331
00:24:47,990 --> 00:24:49,659
We have to build a new city query.

332
00:24:49,659 --> 00:24:51,559
We pass it in.

333
00:24:51,559 --> 00:24:57,000
Once we have done that, we need to bind some
events in.

334
00:24:57,000 --> 00:25:01,000
We want to listen in this case to client cities.

335
00:25:01,000 --> 00:25:04,130
And we want to pass that to a call back.

336
00:25:04,130 --> 00:25:07,460
So, this is kind of node style.

337
00:25:07,460 --> 00:25:10,530
We pass in an error and city object.

338
00:25:10,530 --> 00:25:14,410
We can handle the error or ignore it.

339
00:25:14,410 --> 00:25:20,380
And loop through the list of cities.

340
00:25:20,380 --> 00:25:24,370
Likewise we can listen to the client notification
event here.

341
00:25:24,370 --> 00:25:28,220
And pass that into a call back.

342
00:25:28,220 --> 00:25:32,830
And then finally, we send, file a request
with function.

343
00:25:32,830 --> 00:25:38,190
That sends it off to the server and we see
for response.

344
00:25:38,190 --> 00:25:42,779
We said that we want to do a notification
on any situation.

345
00:25:42,779 --> 00:25:46,540
We don't want to have to go and do with every
Rpc.

346
00:25:46,540 --> 00:25:50,639
We want to bind that into the Rpc any call.

347
00:25:50,639 --> 00:25:56,179
We want to remove that on client notification
message there.

348
00:25:56,179 --> 00:26:02,370
And create an Rpc on any call, we can find
it generically.

349
00:26:02,370 --> 00:26:03,850
Any message that we send.

350
00:26:03,850 --> 00:26:07,620
Or if we use a different communication channel.

351
00:26:07,620 --> 00:26:18,010
Websockets or other kinds of service enabled,
that can be pulled out.

352
00:26:18,010 --> 00:26:20,720
So, that's the end of the examples.

353
00:26:20,720 --> 00:26:24,530
And this is a quick summary of what we have
gone through.

354
00:26:24,530 --> 00:26:28,090
We have discussed Rest and Json.

355
00:26:28,090 --> 00:26:30,760
Why it wasn't suitable.

356
00:26:30,760 --> 00:26:32,440
Gone through the protocol values.

357
00:26:32,440 --> 00:26:35,960
And a few examples.

358
00:26:35,960 --> 00:26:38,100
So, these are the contact details.

359
00:26:38,100 --> 00:26:43,580
The slides will be up at Techblog.Badoo.Com.

