1
00:00:11,920 --> 00:00:15,500
So I don't know about you, but I have been
to three different arenas today.

2
00:00:15,500 --> 00:00:17,970
I thought I would check them all out before
coming here!

3
00:00:17,970 --> 00:00:24,859
Thank you for your patience, and thank you,
Ellie, for entertaining you while I was setting

4
00:00:24,859 --> 00:00:25,859
up.

5
00:00:25,859 --> 00:00:28,620
So we are talking about ES2019 features today.

6
00:00:28,620 --> 00:00:32,860
How many are using ES2019 features now?

7
00:00:32,860 --> 00:00:33,860
Nice.

8
00:00:33,860 --> 00:00:36,840
I can show you something, right?

9
00:00:36,840 --> 00:00:43,460
The agenda that I want to go over today is
basically first I want a little itty-bitty

10
00:00:43,460 --> 00:00:49,820
intro to give you information and ECMAScript
and Ecma in general.

11
00:00:49,820 --> 00:00:55,710
Went we that you can about the minor features,
the major features, and then a teeny tiny

12
00:00:55,710 --> 00:00:57,040
out show.

13
00:00:57,040 --> 00:01:02,400
Just clarifying that we are going to focus
on the features with a little bit of information

14
00:01:02,400 --> 00:01:05,300
on back and front.

15
00:01:05,300 --> 00:01:07,570
Who is this person running on the stage?

16
00:01:07,570 --> 00:01:09,800
And immediately yelling at you?

17
00:01:09,800 --> 00:01:11,470
My name is Tara Manicsic.

18
00:01:11,470 --> 00:01:20,780
I'm a developer advocate at this great company
called Progress Google Developer Expert, and

19
00:01:20,780 --> 00:01:29,280
the mother of this awkward ball of fluff,
Toshi, but as of five months ago, I'm also

20
00:01:29,280 --> 00:01:34,600
the mother of this adorable chunk of flesh,
Niko.

21
00:01:34,600 --> 00:01:40,490
I did poorly Photoshop my baby on to me for
a picture!

22
00:01:40,490 --> 00:01:48,980
But, thank you!

23
00:01:48,980 --> 00:01:55,370
Do not worry worry, this isn't a photo shop
talk.

24
00:01:55,370 --> 00:01:57,430
Those thighs aren't Photoshopped!

25
00:01:57,430 --> 00:02:02,270
I want to do a little bit of an intro about
Ecma and ECMAScript.

26
00:02:02,270 --> 00:02:09,479
So, like any good super hero, I feel that
ECMAScript has an origin story.

27
00:02:09,479 --> 00:02:14,780
It starts out with Ecma International which
is actually, I learned doing this, I never

28
00:02:14,780 --> 00:02:16,380
cared what Ecma stood for.

29
00:02:16,380 --> 00:02:18,100
I probably should have.

30
00:02:18,100 --> 00:02:19,910
I wanted to look into it now.

31
00:02:19,910 --> 00:02:25,870
Some of you may know it is "European Computer
Manufacturers' Association".

32
00:02:25,870 --> 00:02:28,980
I'm very glad that we shortened it!

33
00:02:28,980 --> 00:02:34,080
This started in 1960 because they saw how
much we were using computers, and it needed

34
00:02:34,080 --> 00:02:36,480
to be standardised.

35
00:02:36,480 --> 00:02:44,400
From then, we knew we needed a standardisation
for JavaScript, and that's where ECMAScript

36
00:02:44,400 --> 00:02:45,550
came into play.

37
00:02:45,550 --> 00:02:52,050
Sun, which is nor Oracle, had the rights to
Java.

38
00:02:52,050 --> 00:02:54,870
Have you heard of Java?

39
00:02:54,870 --> 00:02:57,209
No!

40
00:02:57,209 --> 00:03:03,880
That's the only association you will see between
Java and JavaScript through Oracle.

41
00:03:03,880 --> 00:03:10,209
Since that was taken, they went with the corresponding
standard host, Ecma, and made ECMAScript.

42
00:03:10,209 --> 00:03:12,630
So now you know.

43
00:03:12,630 --> 00:03:20,200
So, like, again, any super hero stories, we
also have these pitfalls and weaknesses that

44
00:03:20,200 --> 00:03:23,500
"build character", right?

45
00:03:23,500 --> 00:03:28,580
For ECMAScript that was ES4 abandoned.

46
00:03:28,580 --> 00:03:34,980
This was the version 4 of ECMAScript that
there were so many political differences in

47
00:03:34,980 --> 00:03:37,379
the group that they just abandoned it.

48
00:03:37,379 --> 00:03:42,709
They couldn't release it or get past their
differences, unfortunately.

49
00:03:42,709 --> 00:03:45,980
Another one is what I like to call ES6 years.

50
00:03:45,980 --> 00:03:48,110
Yes, it's a pun.

51
00:03:48,110 --> 00:03:56,069
It took nearly six years for them to release
from ES5.

52
00:03:56,069 --> 00:04:01,830
To 2009 in December to found 15 in June is
how long it took because it was so bloated.

53
00:04:01,830 --> 00:04:07,500
There were so many things they were excited
to release to JavaScript standard that it

54
00:04:07,500 --> 00:04:09,599
took quite a long time.

55
00:04:09,599 --> 00:04:15,960
But, again, like the super hero arch, from
those arches, we get great things.

56
00:04:15,960 --> 00:04:22,650
For instance, TC39, which is the technical
committee, really started to try harder to

57
00:04:22,650 --> 00:04:31,789
work together and reform and do a lot of work
to make smaller packages come out after ES6

58
00:04:31,789 --> 00:04:35,979
was so big, they decided let's do something
more manageable, like developers.

59
00:04:35,979 --> 00:04:39,430
We break everything into smaller pieces, so
it's more manageable.

60
00:04:39,430 --> 00:04:43,879
That's what they did with these new after
ES6, all the releases after that were much

61
00:04:43,879 --> 00:04:46,229
more manageable.

62
00:04:46,229 --> 00:04:49,069
So, just a quick recap.

63
00:04:49,069 --> 00:04:51,710
I want to say what the proposal process is.

64
00:04:51,710 --> 00:04:58,080
We're talking about our stage 4 proposals,
and these, I always think I know what these

65
00:04:58,080 --> 00:05:03,719
mean, and then I'm dumbfounded when I remember
the actual process of what these proposals

66
00:05:03,719 --> 00:05:09,729
are, because they're stage 0 which is the
strawman, free form bringing in the idea.

67
00:05:09,729 --> 00:05:14,740
Stage 1, because, you know, you have to start
at one because we are programmers, or start

68
00:05:14,740 --> 00:05:16,319
at zero, sorry.

69
00:05:16,319 --> 00:05:20,970
And then stage one is the proposal where you
have the champion of that proposal come in

70
00:05:20,970 --> 00:05:22,849
and advocate for this idea.

71
00:05:22,849 --> 00:05:25,039
They bring in APIs.

72
00:05:25,039 --> 00:05:32,389
They talk about APIs, semantics and algorithms,
and then version two, it's a version of what

73
00:05:32,389 --> 00:05:34,279
will be in the specification.

74
00:05:34,279 --> 00:05:39,139
If it makes it to stage 2, you have a good
likelihood that it's going to make it all

75
00:05:39,139 --> 00:05:40,229
the way through.

76
00:05:40,229 --> 00:05:45,259
But, yet, there are still two more stages.

77
00:05:45,259 --> 00:05:49,490
Stage 3 is it's mostly finished, this is the
candidate.

78
00:05:49,490 --> 00:05:52,380
And it's mostly finished but needs feedback.

79
00:05:52,380 --> 00:05:54,110
And this is the one that is funny to me.

80
00:05:54,110 --> 00:06:00,740
Stage 4, which we will be talking about, is
finished, and I have quotations around that,

81
00:06:00,740 --> 00:06:08,319
because, at this part, it's ready to be included
in the standard, but they need to get test

82
00:06:08,319 --> 00:06:10,740
262 acceptance.

83
00:06:10,740 --> 00:06:17,419
They have to do a two-spec compliant shipping,
that implementations need to pass the test,

84
00:06:17,419 --> 00:06:22,389
significant practical experience with implementation
needs done, and the ECMAScript text editor

85
00:06:22,389 --> 00:06:24,500
must sign up on the spec edit.

86
00:06:24,500 --> 00:06:28,780
It sounds like a lot, but we have a bunch
of features coming out, and they did a good

87
00:06:28,780 --> 00:06:31,990
job of bringing them over into stage four.

88
00:06:31,990 --> 00:06:39,139
So, let's go ahead and jump into the minor
features.

89
00:06:39,139 --> 00:06:45,089
First, I just want to let you know what we
are going to do is basically give a little

90
00:06:45,089 --> 00:06:50,349
high-level what the feature is, the name of
it, who brought it to - who is the champion

91
00:06:50,349 --> 00:06:56,939
of it, or the champions, and then a little
code snippet and a little bit about the compatibility.

92
00:06:56,939 --> 00:06:59,969
First, we have trim start and trim end.

93
00:06:59,969 --> 00:07:06,090
Has anybody used trim left and right?

94
00:07:06,090 --> 00:07:20,779
This is explanatory in a way, taking space
away from the start or the finish.

95
00:07:20,779 --> 00:07:27,349
This is the new alias because not all languages
have a left and right, or they have a left

96
00:07:27,349 --> 00:07:30,590
and right, but some have different ways of
approaching it.

97
00:07:30,590 --> 00:07:36,610
Start in end just make more sense.

98
00:07:36,610 --> 00:07:42,059
This helps you classify what is white space
as well, what is a hard enter, space, tabs.

99
00:07:42,059 --> 00:07:43,900
There is a whole process to it.

100
00:07:43,900 --> 00:07:46,729
It is as simple as this.

101
00:07:46,729 --> 00:07:50,539
You're taking a string that has spaces around
it.

102
00:07:50,539 --> 00:07:56,139
A use case of this, say, you're filling out
a form, and basically, how it goes is maybe

103
00:07:56,139 --> 00:08:00,770
in a CSC you're getting too many extra spaces,
so you need to trim it down.

104
00:08:00,770 --> 00:08:03,080
You get trim start and trim end.

105
00:08:03,080 --> 00:08:08,360
You see, start, finish, and then trim takes
both off.

106
00:08:08,360 --> 00:08:16,719
There you can see the compatibility is good
across the board, i.e. it's a no.

107
00:08:16,719 --> 00:08:18,860
Who would have thunk!

108
00:08:18,860 --> 00:08:21,219
A simple prototyped description.

109
00:08:21,219 --> 00:08:33,140
This is a string parameter that you can pass
on to symbol.

110
00:08:33,140 --> 00:08:40,990
When they made this, their thought was to
help teams communicate across code and communicate

111
00:08:40,990 --> 00:08:43,010
their intention for the code.

112
00:08:43,010 --> 00:08:52,280
I read a comment by Grassbury said we now
not use documentation for this?

113
00:08:52,280 --> 00:09:02,590
I think the more place we put in code that
isn't comments, the better.

114
00:09:02,590 --> 00:09:04,750
You be the judge.

115
00:09:04,750 --> 00:09:06,560
This is what it looks like.

116
00:09:06,560 --> 00:09:08,150
We have created a symbol.

117
00:09:08,150 --> 00:09:10,710
We have passed into a string which is now
the description.

118
00:09:10,710 --> 00:09:18,460
When we log it out, we have symbol log that
contains that parameter or use the getter.description

119
00:09:18,460 --> 00:09:21,760
and get that string.

120
00:09:21,760 --> 00:09:24,430
This again is pretty available.

121
00:09:24,430 --> 00:09:32,350
I got these compatibility charts from MDM,
because they fit really well in slides!

122
00:09:32,350 --> 00:09:35,760
But, some of the information wasn't exactly
right.

123
00:09:35,760 --> 00:09:43,400
Like this is available in Node 11, and they
had it as marked as "no" but then I realised

124
00:09:43,400 --> 00:09:48,910
above their compatibility charts, they have
a link to GitHub, so you can correct any compatibility

125
00:09:48,910 --> 00:09:50,650
errors that you see.

126
00:09:50,650 --> 00:09:53,280
We just have to be proactive.

127
00:09:53,280 --> 00:09:54,970
Okay.

128
00:09:54,970 --> 00:09:57,700
Optional catch binding.

129
00:09:57,700 --> 00:10:02,190
Do people here use try catch much?

130
00:10:02,190 --> 00:10:15,950
It's in the catch clause having a parameter
to bind to the exception.

131
00:10:15,950 --> 00:10:20,750
A lot of people were using this and throwing
it away, because it would cause an error if

132
00:10:20,750 --> 00:10:23,050
you didn't have this parameter.

133
00:10:23,050 --> 00:10:31,200
A common use case for this is say if you're
using json.parse, and you know it's going

134
00:10:31,200 --> 00:10:35,110
to throw an error if it is not json, but you
don't care about the error, but want it to

135
00:10:35,110 --> 00:10:37,470
parse anything that is JSON.

136
00:10:37,470 --> 00:10:41,660
You throw it, log it, you don't think about
it.

137
00:10:41,660 --> 00:10:48,760
In their minds, this was superfluous.

138
00:10:48,760 --> 00:10:51,020
Who has time for extra key strokes?

139
00:10:51,020 --> 00:11:02,560
This ended up being one of the most controversial
minor features, but we will get to that later.

140
00:11:02,560 --> 00:11:05,780
This is what basically it looks like.

141
00:11:05,780 --> 00:11:11,520
You're passing a parameter to your catch clause,
and then usually, you want to log it out,

142
00:11:11,520 --> 00:11:13,270
and do something with it.

143
00:11:13,270 --> 00:11:19,160
Now you can pass up that parameter completely.

144
00:11:19,160 --> 00:11:23,090
It is again, you can see the chart.

145
00:11:23,090 --> 00:11:27,240
I could also just pause and let you look at
the chart for is a second instead of talking

146
00:11:27,240 --> 00:11:28,240
over it.

147
00:11:28,240 --> 00:11:36,500
This is where you know that it is an interesting
situation when the most active issue just

148
00:11:36,500 --> 00:11:39,590
says why?

149
00:11:39,590 --> 00:11:52,870
So, a lot of what I do is read through issues,
be it like with Node modules, or with ECMAScript.

150
00:11:52,870 --> 00:11:59,790
Even as a society, like you in a society,
these are some really, really interesting

151
00:11:59,790 --> 00:12:05,850
thoughts going into how we build our and standardise
our language.

152
00:12:05,850 --> 00:12:12,170
Like it's very inspiring to see how much people
care about it, because we use it every day,

153
00:12:12,170 --> 00:12:13,170
right?

154
00:12:13,170 --> 00:12:15,330
So, I highly recommend looking into this.

155
00:12:15,330 --> 00:12:20,850
Basically, how it started, as the person who
opened the issue, saying that they were pretty

156
00:12:20,850 --> 00:12:24,290
scared, let me just say, what he said, they
were pretty scared that allowing this may

157
00:12:24,290 --> 00:12:26,240
make devs forget about error-handling.

158
00:12:26,240 --> 00:12:31,240
Does everyone here do a good job handling
their errors?

159
00:12:31,240 --> 00:12:32,840
Silence.

160
00:12:32,840 --> 00:12:39,170
So, this is basically, he was saying it's
making production code untraceable, and that

161
00:12:39,170 --> 00:12:42,390
he thinks that errors should be logged, and
we should be considering these errors.

162
00:12:42,390 --> 00:12:44,040
We should not be swallowing them.

163
00:12:44,040 --> 00:12:49,880
It could lead to messy coding, irresponsible
coding.

164
00:12:49,880 --> 00:12:57,560
And a few things of the comeback is basically
that this is making it more intentional, so,

165
00:12:57,560 --> 00:13:00,330
if you're leaving off the parameter, you know
you're leaving off the parameter.

166
00:13:00,330 --> 00:13:05,071
Conduct and Competence Committee be even riskier
to leave it so that people automatically throw

167
00:13:05,071 --> 00:13:09,180
that log and don't think of it.

168
00:13:09,180 --> 00:13:15,730
And there are some cases where you, it's what
you are getting back, you can't log, or it's

169
00:13:15,730 --> 00:13:21,590
just holds up the programme, so, what you're
doing here is kind of taking the road of the

170
00:13:21,590 --> 00:13:28,550
least evil, one may say, and you're quietly
swallowing your errors, and your application

171
00:13:28,550 --> 00:13:33,160
can perform its main job, and you're not compromising
the ability to troubleshoot.

172
00:13:33,160 --> 00:13:35,050
Like, you can always add this.

173
00:13:35,050 --> 00:13:38,090
It's not an option that you can no longer
add the parameter.

174
00:13:38,090 --> 00:13:45,280
Okay, so, we will go at a quicker pace to
get you all moving.

175
00:13:45,280 --> 00:13:48,120
But, prototype.sort is now stable.

176
00:13:48,120 --> 00:13:52,620
This is ECMAScript spec and it made me immediately
wonder what is stable?

177
00:13:52,620 --> 00:14:00,280
This is basically a stable sorting algorithm
if you're take, looking at a list that have

178
00:14:00,280 --> 00:14:05,800
their two keys, they have the same value,
they should, after a sort in the same order

179
00:14:05,800 --> 00:14:08,010
which I will show you in the code.

180
00:14:08,010 --> 00:14:15,720
One quick note, no-one intended, but this,
cut to the quick, is intended, it's getting

181
00:14:15,720 --> 00:14:23,660
rid of quick sort and instead using Trim sort,
made by Tim Peters in 2002, and he's making

182
00:14:23,660 --> 00:14:32,960
it more proficient by using binary insertion
sort and improving the merge sort, which actually

183
00:14:32,960 --> 00:14:39,030
allows it to work way better with the arrays
that are already sorted.

184
00:14:39,030 --> 00:14:44,090
So it is a very interesting read, and another
one that I highly remedying into one day while

185
00:14:44,090 --> 00:14:46,850
you're waiting for the bus already or on the
train.

186
00:14:46,850 --> 00:14:48,960
This is what it looks like.

187
00:14:48,960 --> 00:14:57,250
We have multiple keys of A that have varying
values.

188
00:14:57,250 --> 00:15:01,440
This this order on top, it goes ACB.

189
00:15:01,440 --> 00:15:08,810
When we sort it by age, we should get ACB
in that same order, and it does that now.

190
00:15:08,810 --> 00:15:11,940
There you go.

191
00:15:11,940 --> 00:15:18,750
Moving on to major features, again, we're
going through this quickly, and please feel

192
00:15:18,750 --> 00:15:20,860
free to come and chat with me after.

193
00:15:20,860 --> 00:15:23,050
I love talking about this stuff.

194
00:15:23,050 --> 00:15:27,120
I will even do another little talk if you
want!

195
00:15:27,120 --> 00:15:29,770
So flat and mat map is very exciting.

196
00:15:29,770 --> 00:15:32,920
Is anybody uses those yet?

197
00:15:32,920 --> 00:15:33,920
Yes!

198
00:15:33,920 --> 00:15:34,920
Right.

199
00:15:34,920 --> 00:15:37,240
How great is flat map?

200
00:15:37,240 --> 00:15:43,330
It's funny how exciting when you get to, "What
features are coming out next?"

201
00:15:43,330 --> 00:15:50,480
Flat is basically - it's recursively concatenating
to the array dependent on how many in your

202
00:15:50,480 --> 00:15:56,370
parameter how many levels your telling it
to go down, and it's based, and then flat

203
00:15:56,370 --> 00:16:02,920
map, simply putting, it's kind of taking map
and then flat, so you're mapping through an

204
00:16:02,920 --> 00:16:07,460
array, and then flattening it to a single-level
array.

205
00:16:07,460 --> 00:16:10,230
There is more to it.

206
00:16:10,230 --> 00:16:13,660
With map where U getting one output element.

207
00:16:13,660 --> 00:16:15,200
It returns a single value.

208
00:16:15,200 --> 00:16:21,010
With Platt map, it's translated to zero or
more output elements.

209
00:16:21,010 --> 00:16:26,790
It can also return non-array values, but that
is less common.

210
00:16:26,790 --> 00:16:30,490
Then there is my favourite part of it which
is smooshgate?

211
00:16:30,490 --> 00:16:35,970
Did anybody hear about that?

212
00:16:35,970 --> 00:16:40,870
Again, we go to the T after the code.

213
00:16:40,870 --> 00:16:47,900
First of all, with flat in general, you see
we have an array with a nested array, with

214
00:16:47,900 --> 00:16:48,900
an array inside of it.

215
00:16:48,900 --> 00:16:50,300
There are three levels here.

216
00:16:50,300 --> 00:16:54,830
If we do flat, it defaults to one layer, and
you have the array that is still nested in

217
00:16:54,830 --> 00:16:55,830
there.

218
00:16:55,830 --> 00:17:02,100
If we pass to that original array, it nests
it all down, or flattens it down to one.

219
00:17:02,100 --> 00:17:08,439
With flat map, with map, you get an array
of arrays, but flat map, you get back an array

220
00:17:08,439 --> 00:17:11,490
of those.

221
00:17:11,490 --> 00:17:20,549
Smooshgate, the thing to me about Smooshgate,
this to me is like a visual representation

222
00:17:20,549 --> 00:17:23,730
of when I tell really corny knock-knock jokes.

223
00:17:23,730 --> 00:17:28,990
There are 74 thumbs-down on this guy's joke!

224
00:17:28,990 --> 00:17:40,380
Michael is one of the champions.

225
00:17:40,380 --> 00:17:48,549
Mood Tools had a polyfill of flatten, and
ECMAScript wanted there to be flatten as the

226
00:17:48,549 --> 00:17:50,119
name of this future.

227
00:17:50,119 --> 00:17:55,610
My husband is a programmer, and he asked me
what is Mood Tools?

228
00:17:55,610 --> 00:17:57,639
Which is a lot of people's reaction.

229
00:17:57,639 --> 00:18:08,610
Basically, you're taking legacy code and it
is stunting the progression of what people

230
00:18:08,610 --> 00:18:10,980
- or what people consider the progression
- of code.

231
00:18:10,980 --> 00:18:14,950
There were a lot of discussions around this.

232
00:18:14,950 --> 00:18:21,529
Basically, making sure that we are adapting
correctly that we are not leaving anybody

233
00:18:21,529 --> 00:18:25,840
behind, so they changed it from flatten to
flat.

234
00:18:25,840 --> 00:18:30,070
As we see now, we have flat, and mat map.

235
00:18:30,070 --> 00:18:31,210
There is no Smoosh.

236
00:18:31,210 --> 00:18:36,600
There was never a Smoosh, might still be a
Smoosh, but probably not.

237
00:18:36,600 --> 00:18:41,070
Compatibility wise, this is where it is available.

238
00:18:41,070 --> 00:18:44,779
Last but not at least, object from families.

239
00:18:44,779 --> 00:18:53,559
I'm a big fan of object.dat families, but
that is taking a list of key-value pairs and

240
00:18:53,559 --> 00:18:59,039
contracting it to an object which is the opposite
of object.entries.

241
00:18:59,039 --> 00:19:04,230
These somebody limitation works really well
together and a good representation of that

242
00:19:04,230 --> 00:19:18,899
is Axel Rauschmeier looks at objects and utilises
them and creates different functions from

243
00:19:18,899 --> 00:19:21,990
underscore.

244
00:19:21,990 --> 00:19:29,549
I was trying to explain to someone how one
of the biggest points of advancing the language

245
00:19:29,549 --> 00:19:36,710
of making the standard is we make all these
short cuts, or I would hardly say short cuts,

246
00:19:36,710 --> 00:19:42,820
actually, intricate libraries to make up for
what we may see as shortcomings in the JavaScript

247
00:19:42,820 --> 00:19:46,059
language to do the job that we need to do.

248
00:19:46,059 --> 00:19:51,860
And so, Underscore was one of those libraries,
again, not a short cut, lots of work, and

249
00:19:51,860 --> 00:19:55,659
really great work, in the Underscore library,
and now we see when we bring something to

250
00:19:55,659 --> 00:20:02,570
the language like Object from Entries how
we could have advanced the language so that

251
00:20:02,570 --> 00:20:05,340
we wouldn't need the other library.

252
00:20:05,340 --> 00:20:07,230
This is what it looks like.

253
00:20:07,230 --> 00:20:11,100
Basically, we start with an object that has
key-value pairs.

254
00:20:11,100 --> 00:20:13,700
When we do object be entries and pass that.

255
00:20:13,700 --> 00:20:15,480
We get array of arrays.

256
00:20:15,480 --> 00:20:33,220
When we want to take it out of there and treat
it as an object, we - it's available on Opera

257
00:20:33,220 --> 00:20:36,929
no matter what MDM says.

258
00:20:36,929 --> 00:20:41,200
Real quick, we won't go over these, but if
you want to have a lunch conversation with

259
00:20:41,200 --> 00:20:48,440
me, there are some really things I found out
digging into, looking into json stringify,

260
00:20:48,440 --> 00:20:55,019
the JSON super set, which somebody was saying,
when people speaking it in Spanish countries

261
00:20:55,019 --> 00:21:04,139
say ... 
then there is also the prototype two-string

262
00:21:04,139 --> 00:21:05,139
revision.

263
00:21:05,139 --> 00:21:11,279
Looking into these, I dug into unicode and
ASCII a lot, and there is a lot of really

264
00:21:11,279 --> 00:21:14,399
cool history to that.

265
00:21:14,399 --> 00:21:21,519
But, for now, I would just do a teeny tiny
intro to say, on this stage at 1400 hours,

266
00:21:21,519 --> 00:21:29,629
you will get to see the amazing, part of the
amazing TC39 group to answer all of your questions

267
00:21:29,629 --> 00:21:34,909
that you may have about what is coming, what
has been, how to use things, and their decision-making,

268
00:21:34,909 --> 00:21:43,059
and I also just want to - I know I personified
these two groups as super heroes, but I am

269
00:21:43,059 --> 00:21:50,240
indeed very grateful that they put the time
and energy into basically giving us a better

270
00:21:50,240 --> 00:21:54,269
coding experience, or at least putting their
efforts into trying to give us a better coding

271
00:21:54,269 --> 00:21:59,529
experience and make JavaScript better for
us, so I'm very grateful, and I'm very grateful

272
00:21:59,529 --> 00:22:00,639
that all all here today.

