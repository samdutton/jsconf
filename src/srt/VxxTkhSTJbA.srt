1
00:00:27,949 --> 00:00:30,769
Hi everybody, that is an awesome piece of
trivia.

2
00:00:30,769 --> 00:00:33,880
I also ran into my friend Justin here, who
I

3
00:00:33,880 --> 00:00:37,660
ran the first workshop with 6 years ago, and
I haven't

4
00:00:37,660 --> 00:00:41,440
seen him for almost that amount of time, so
awesome to

5
00:00:41,440 --> 00:00:43,190
see you.

6
00:00:43,190 --> 00:00:46,600
Thank you for attending my talk, it is called
refactoring the dinosaur.

7
00:00:46,600 --> 00:00:52,600
I'm truly honoured to speak
at JSconf, so thank you to the organisers.

8
00:00:52,600 --> 00:00:56,329
As Ben said,
I actually work at Kickstarter as a developer

9
00:00:56,329 --> 00:00:59,920
in New
York City, and we're a pretty eclectic bunch

10
00:00:59,920 --> 00:01:01,590
of people.

11
00:01:01,590 --> 00:01:05,810
We tend to always have side projects going
on, and I'm

12
00:01:05,810 --> 00:01:08,820
always continually inspired by my colleagues.

13
00:01:08,820 --> 00:01:10,560
This is
the library at Kickstarter.

14
00:01:10,560 --> 00:01:14,420
It is actually known as the
quiet space where you can work.

15
00:01:14,420 --> 00:01:16,840
However, after hours it
comes alive.

16
00:01:16,840 --> 00:01:23,290
We have 4D and D groups internally that
play here, and which is awesome, and there's

17
00:01:23,290 --> 00:01:26,420
actually
a hardware hacking club also that meets here

18
00:01:26,420 --> 00:01:28,850
every
second Thursday, and that has a grand total

19
00:01:28,850 --> 00:01:32,060
of three
people in it, including myself.

20
00:01:32,060 --> 00:01:37,320
But one other person of
this hardware hacking club is Zak Donham,

21
00:01:37,320 --> 00:01:40,189
and you
probably can't quite tell what he's doing

22
00:01:40,189 --> 00:01:43,500
here, but
there's actually shrimp in the water and he's

23
00:01:43,500 --> 00:01:46,740
recording
the sounds the shrimp are making, which is

24
00:01:46,740 --> 00:01:47,740
amazing.

25
00:01:47,740 --> 00:01:50,060
He
is a wonderful person, an artist.

26
00:01:50,060 --> 00:01:52,870
He does a lot of
technology outreach for Kickstarter, and he

27
00:01:52,870 --> 00:01:54,770
is
fantastic.

28
00:01:54,770 --> 00:02:00,610
Recently he created this this Kickstarter
project so people at Kickstarter actually

29
00:02:00,610 --> 00:02:03,049
run their own
Kickstarters, believe it or not, and it is

30
00:02:03,049 --> 00:02:06,750
called the
public radio, and it is this idea of radio

31
00:02:06,750 --> 00:02:11,360
monogamy and
so if you have one station you really love,

32
00:02:11,360 --> 00:02:15,640
this radio
is hard tuned to that radio station, so there's

33
00:02:15,640 --> 00:02:21,220
a volume
button and also a switch to turn it on.

34
00:02:21,220 --> 00:02:24,120
And I'm not
sure whether you can see that I need the video

35
00:02:24,120 --> 00:02:26,319
to come
up for me for this, but I actually have the

36
00:02:26,319 --> 00:02:30,099
radio here,
and that's going to form the basis for the

37
00:02:30,099 --> 00:02:32,570
case study
I'll be talking about today.

38
00:02:32,570 --> 00:02:39,640
And so Zak and his
co-partner Spencer write actually put together

39
00:02:39,640 --> 00:02:41,830
this
radio from scratch and designed the board

40
00:02:41,830 --> 00:02:44,250
and
everything, and one of the review tiers for

41
00:02:44,250 --> 00:02:48,390
their
Kickstarter project was to send it as a kit,

42
00:02:48,390 --> 00:02:51,580
so someone
can actually receive all the parts, including

43
00:02:51,580 --> 00:02:55,360
I think
the mason jar, and they can actually solder

44
00:02:55,360 --> 00:02:58,489
it together
themselves, and then they are also responsible

45
00:02:58,489 --> 00:03:01,620
for
flashing the software on to the chip on the

46
00:03:01,620 --> 00:03:04,680
board, and,
you know, a flashing that radio station property

47
00:03:04,680 --> 00:03:05,680
as
well.

48
00:03:05,680 --> 00:03:08,560
So that they can get the radio station they
want.

49
00:03:08,560 --> 00:03:11,340
So if you haven't run a Kickstarter project
before,

50
00:03:11,340 --> 00:03:15,189
it is actually really a huge undertaking,
and so you

51
00:03:15,189 --> 00:03:17,930
know they had a lot of ledger six to take
care of, and

52
00:03:17,930 --> 00:03:20,860
at the time they'd written a CLI app in order
to flash

53
00:03:20,860 --> 00:03:23,950
the chip, however they wanted something a
little bit

54
00:03:23,950 --> 00:03:26,720
more user-friendly just in case there were
people that

55
00:03:26,720 --> 00:03:28,840
weren't used to the terminal.

56
00:03:28,840 --> 00:03:32,180
So I volunteered to write
a hardware out for them, just because I've

57
00:03:32,180 --> 00:03:35,750
done that
kind of thing before, and at the time they

58
00:03:35,750 --> 00:03:38,720
had these
Python files they were using for the CLA,

59
00:03:38,720 --> 00:03:42,840
and so I ended
up just using those files and I used a Python

60
00:03:42,840 --> 00:03:47,939
GUI kit,
and this is the app I put together.

61
00:03:47,939 --> 00:03:52,840
And I wasn't super
proud of it, it worked really well.

62
00:03:52,840 --> 00:03:56,480
You know, you put
your radio station in, you'd pick the programmer

63
00:03:56,480 --> 00:03:59,749
you're
using, which I have one here, as you can see

64
00:03:59,749 --> 00:04:01,829
it is the
blue guy right here.

65
00:04:01,829 --> 00:04:05,400
And, you know, you have to
obviously change your band emphasis and channel

66
00:04:05,400 --> 00:04:09,240
spacing
for what country you live in for the radio.

67
00:04:09,240 --> 00:04:11,359
And it
worked really well, I worked on the support

68
00:04:11,359 --> 00:04:13,409
forums to
make sure no one was having an awful time

69
00:04:13,409 --> 00:04:14,409
with it.

70
00:04:14,409 --> 00:04:19,410
However, it had some problems, some accessibility
problems, because you couldn't keyboard tab

71
00:04:19,410 --> 00:04:24,020
between the
fields, and the screen readers couldn't actually

72
00:04:24,020 --> 00:04:26,750
read
what was going on, so it was kind of hard

73
00:04:26,750 --> 00:04:27,750
to use.

74
00:04:27,750 --> 00:04:30,580
It is
not super good looking.

75
00:04:30,580 --> 00:04:34,501
If I hadn't put that picture on
there with rounded corners, it probably would

76
00:04:34,501 --> 00:04:36,910
have
looked like some kind of virus about to install

77
00:04:36,910 --> 00:04:39,690
itself
on your computer (Laughter).

78
00:04:39,690 --> 00:04:43,310
And the aero management
was really different because the open source

79
00:04:43,310 --> 00:04:48,470
software
I was using to run the flashing process, it

80
00:04:48,470 --> 00:04:51,030
has status
codes but doesn't actually have anything in-depth.

81
00:04:51,030 --> 00:04:55,280
You
have to regx against the standard error output,

82
00:04:55,280 --> 00:04:56,780
just to
figure out what was going on.

83
00:04:56,780 --> 00:05:00,500
So a lot of the time, if
there was any error, I dumped the log in the

84
00:05:00,500 --> 00:05:03,370
app and it
looked even more scary at that point.

85
00:05:03,370 --> 00:05:07,000
So I'm a modern lady, you know.

86
00:05:07,000 --> 00:05:10,130
I have modern
tastes in software.

87
00:05:10,130 --> 00:05:13,940
And so I thought we can do better
for hardware apps.

88
00:05:13,940 --> 00:05:17,790
This is the way we've written
hardware apps for a long time now, we can

89
00:05:17,790 --> 00:05:20,070
do way better
than this.

90
00:05:20,070 --> 00:05:23,920
For both our end users, but also for
developers, like developers should have a

91
00:05:23,920 --> 00:05:27,130
much nicer
time writing these kind of applications, you

92
00:05:27,130 --> 00:05:29,920
know, they
can be really frustrating to write.

93
00:05:29,920 --> 00:05:36,670
And so I actually
rewrote the entire app in JavaScript, and

94
00:05:36,670 --> 00:05:38,110
this is
actually what it looks like.

95
00:05:38,110 --> 00:05:42,420
So I'm going to do a quick
demo, if the demo gods are nice.

96
00:05:42,420 --> 00:05:46,190
I'm just going to
bring up the app, and it is very small on

97
00:05:46,190 --> 00:05:49,250
this
resolution, so I'm going to zoom in.

98
00:05:49,250 --> 00:05:50,250
All right.

99
00:05:50,250 --> 00:05:51,590
This
magnificent line.

100
00:05:51,590 --> 00:05:56,210
All right, this is the new app.

101
00:05:56,210 --> 00:05:58,830
First off, I can actually keyboard tab into
it, which is

102
00:05:58,830 --> 00:05:59,830
great.

103
00:05:59,830 --> 00:06:04,430
I can hide away these event settings if you
don't need them, and it just looks less like

104
00:06:04,430 --> 00:06:07,400
a computer
virus, in my opinion.

105
00:06:07,400 --> 00:06:12,020
So I'm going to turn the radio on
and hopefully you can hear that.

106
00:06:12,020 --> 00:06:16,530
music plays]
I'm going to change the radio station.

107
00:06:16,530 --> 00:06:20,080
Losing my
Religion -- that's great.

108
00:06:20,080 --> 00:06:22,540
I don't need to change any of
these right now, because it will work well

109
00:06:22,540 --> 00:06:24,620
enough for
me to flash it.

110
00:06:24,620 --> 00:06:29,340
So while we had no sort of progress, I
also implemented a progress meter, and I'm

111
00:06:29,340 --> 00:06:31,210
actually
going to turn this light out so you can see

112
00:06:31,210 --> 00:06:35,160
the
programmer here actually programming it.

113
00:06:35,160 --> 00:06:39,500
And here we
go.

114
00:06:39,500 --> 00:06:42,260
Please work.

115
00:06:42,260 --> 00:06:49,180
music plays]
New radio station.

116
00:06:49,180 --> 00:06:50,570
[applause].

117
00:06:50,570 --> 00:06:52,350
So I am just going
to turn this off.

118
00:06:52,350 --> 00:06:55,300
I feel like this is a much better
experience, and I actually had a lot more

119
00:06:55,300 --> 00:06:58,190
fun writing
it, but there's a lot of complications because

120
00:06:58,190 --> 00:07:01,330
this is
not really your standard way of writing hardware

121
00:07:01,330 --> 00:07:04,500
apps in
JavaScript, so I wanted to take you through

122
00:07:04,500 --> 00:07:07,340
some of the
challenges and how I put this together.

123
00:07:07,340 --> 00:07:10,190
So let's go
back.

124
00:07:10,190 --> 00:07:11,970
All right.

125
00:07:11,970 --> 00:07:18,610
So I actually wrote the GUI in NWJS,
so some of you might be wondering why didn't

126
00:07:18,610 --> 00:07:19,610
you use
electron?

127
00:07:19,610 --> 00:07:25,400
This is the new one, but you have to build
native modules for use with hardware.

128
00:07:25,400 --> 00:07:29,840
A lot of the time
it is the USB interface, so it is easier to

129
00:07:29,840 --> 00:07:33,030
rebuild
those to work with NWJS so that was the main

130
00:07:33,030 --> 00:07:38,460
reason
I went with that, and I also created a brand

131
00:07:38,460 --> 00:07:42,430
new from
scratch library that will actually drive the

132
00:07:42,430 --> 00:07:44,710
flashing
process itself.

133
00:07:44,710 --> 00:07:51,030
And I'll explain why, as we go through,
but this is the API I wanted to be able to

134
00:07:51,030 --> 00:07:53,890
use in the
first place, and it is not the API I actually

135
00:07:53,890 --> 00:07:57,150
had access
to at the time.

136
00:07:57,150 --> 00:08:04,240
I have to go through very briefly what
is actually on this, what is in this radio,

137
00:08:04,240 --> 00:08:06,080
how does it
actually work?

138
00:08:06,080 --> 00:08:10,590
So the main brains of this circuit is
the ATtiny 45.

139
00:08:10,590 --> 00:08:13,270
This is a microchip put out by Atmel.

140
00:08:13,270 --> 00:08:14,970
It is super powerful.

141
00:08:14,970 --> 00:08:21,620
It has four kilobytes of
programme memory.

142
00:08:21,620 --> 00:08:22,620
That's amazing.

143
00:08:22,620 --> 00:08:24,180
Why would you need
more space?

144
00:08:24,180 --> 00:08:27,920
It also has 266 bytes of EPROM.

145
00:08:27,920 --> 00:08:33,550
It stands
for electronically erasable programmable read

146
00:08:33,550 --> 00:08:34,550
only
memory.

147
00:08:34,550 --> 00:08:39,240
Essentially what that means is you can flash
a constant to that memory, or a couple of

148
00:08:39,240 --> 00:08:43,010
constants, and
you can save on your four kilobytes if you

149
00:08:43,010 --> 00:08:46,940
need to store
like values that are never going to change,

150
00:08:46,940 --> 00:08:47,940
right?

151
00:08:47,940 --> 00:08:49,940
So
that's actually where the radio station of

152
00:08:49,940 --> 00:08:53,570
choice is
flashed to, so that, you know, you don't have

153
00:08:53,570 --> 00:08:56,300
to keep
flashing the software over each time.

154
00:08:56,300 --> 00:08:58,779
And it is
actually just a euro.

155
00:08:58,779 --> 00:09:02,370
You can buy this for a euro and
I don't even think that's the bulk price.

156
00:09:02,370 --> 00:09:04,190
You can
probably get it for less.

157
00:09:04,190 --> 00:09:06,580
That's the brains behind
this.

158
00:09:06,580 --> 00:09:12,530
The way they get this code, or the radio station
to actually go on to the device, is we need

159
00:09:12,530 --> 00:09:14,640
a translator
in between.

160
00:09:14,640 --> 00:09:19,490
So this here is a programmer which is like
the middle of the diagram, and I find it really

161
00:09:19,490 --> 00:09:23,680
ugly so
I put a rainbow on it to make it prettier.

162
00:09:23,680 --> 00:09:27,710
This is
a drawing I did to try to just make this stuff

163
00:09:27,710 --> 00:09:30,170
seem more
interesting than it is.

164
00:09:30,170 --> 00:09:34,030
And so this programmer actually
sort of takes the code that's compiled on

165
00:09:34,030 --> 00:09:38,480
your computer,
which is usually C, and it is able to speak

166
00:09:38,480 --> 00:09:41,940
to the chip,
and so the programmer is providing you with

167
00:09:41,940 --> 00:09:44,460
a USB
interface.

168
00:09:44,460 --> 00:09:45,940
And then the programmer can take that and
it

169
00:09:45,940 --> 00:09:49,440
uses the SPI protocol which is the serial
programming

170
00:09:49,440 --> 00:09:52,440
interface protocol in order to talk to the
chip.

171
00:09:52,440 --> 00:09:56,440
So it
is doing the actual signal, sort of bit flipping

172
00:09:56,440 --> 00:09:59,530
in
order to get that on to the chip.

173
00:09:59,530 --> 00:10:04,780
So this is sort of
how you normally have to create your application.

174
00:10:04,780 --> 00:10:07,550
You
have a GUI, it can be in any language you

175
00:10:07,550 --> 00:10:12,340
want, like
Python, or even just actual regular CR objective

176
00:10:12,340 --> 00:10:15,240
C,
JavaScript in this case.

177
00:10:15,240 --> 00:10:20,260
It takes user input and then
obviously compiles down and then it calls

178
00:10:20,260 --> 00:10:22,040
the upload
process.

179
00:10:22,040 --> 00:10:27,650
That is always a child process, and that is
also that has always bothered me, and I'll

180
00:10:27,650 --> 00:10:30,270
explain why
it is a child process.

181
00:10:30,270 --> 00:10:35,480
It actually writes to the chip
and that's really all there is to it.

182
00:10:35,480 --> 00:10:38,550
Now the application that you normally use
to upload

183
00:10:38,550 --> 00:10:45,190
this, it was written 16 years ago, it is called
AVRDUDE.

184
00:10:45,190 --> 00:10:46,210
And it is really cool.

185
00:10:46,210 --> 00:10:50,630
It is a C executable, available
for all platforms, less than 500 kilobytes,

186
00:10:50,630 --> 00:10:53,260
which is
cool, and this is what everybody has been

187
00:10:53,260 --> 00:10:54,920
using since it
came out.

188
00:10:54,920 --> 00:10:59,940
There's not really any alternatives at this
point other than Atmel's IDE.

189
00:10:59,940 --> 00:11:08,590
So AVRDUDE stands for AVR
downloader uploader, so it is very interesting,

190
00:11:08,590 --> 00:11:11,029
and an
AVR is an acronym used for the microchips

191
00:11:11,029 --> 00:11:12,880
that Atmel
puts out.

192
00:11:12,880 --> 00:11:15,520
They've confirmed that AVR has absolutely
no

193
00:11:15,520 --> 00:11:18,120
meaning whatsoever, so I can't tell you what
that stands

194
00:11:18,120 --> 00:11:19,120
for.

195
00:11:19,120 --> 00:11:20,120
Look on Wiki.

196
00:11:20,120 --> 00:11:23,930
It was written in C, it is open
source, which is amazing.

197
00:11:23,930 --> 00:11:28,460
And everybody uses it
because, you know, it works really well.

198
00:11:28,460 --> 00:11:30,640
It has been
around for a long time.

199
00:11:30,640 --> 00:11:37,220
It has a lot of traction
because of that, and people have added extra

200
00:11:37,220 --> 00:11:39,910
programme
and chips over time, and it has the greatest

201
00:11:39,910 --> 00:11:43,610
compatibility and it is the only thing out
there that

202
00:11:43,610 --> 00:11:46,850
has that strength that you don't -- you can
create

203
00:11:46,850 --> 00:11:49,290
dynamic apps like this with, right, without
having to

204
00:11:49,290 --> 00:11:53,980
open an I; and so even the Arduino ID and
the systems

205
00:11:53,980 --> 00:11:56,010
use that over the surface.

206
00:11:56,010 --> 00:11:59,460
So if you go on to your
preferences and see the logging, you can see

207
00:11:59,460 --> 00:12:02,310
the AVRDUDE
command running.

208
00:12:02,310 --> 00:12:06,670
It has have some limitations, however,
it is command line only, which is why I have

209
00:12:06,670 --> 00:12:10,310
to spin up
a child process every time if I'm doing runtime

210
00:12:10,310 --> 00:12:15,960
code,
and that can be a pain, and it also means

211
00:12:15,960 --> 00:12:19,600
sometimes you
have to handle like multi-processors or threading,

212
00:12:19,600 --> 00:12:21,570
because it will lock-up the EY while you're
running

213
00:12:21,570 --> 00:12:22,570
that.

214
00:12:22,570 --> 00:12:25,560
There are no tests in it at all, so it relies
on

215
00:12:25,560 --> 00:12:29,350
manual testing if anyone requests it, and
it has this

216
00:12:29,350 --> 00:12:33,560
fragmented community, if people are updating
it mostly

217
00:12:33,560 --> 00:12:38,690
because it doesn't change a lot in spite of
a decade,

218
00:12:38,690 --> 00:12:44,170
but it doesn't the same community feel as
JavaScript,

219
00:12:44,170 --> 00:12:47,110
and that's something that disappointed me.

220
00:12:47,110 --> 00:12:49,839
People can
be rude in the forums if you're a newbie,

221
00:12:49,839 --> 00:12:56,220
and it has
been pretty disappointing for me.

222
00:12:56,220 --> 00:12:59,970
Creating an
alternative for this piece of software itself

223
00:12:59,970 --> 00:13:03,130
was
obvious to me, and so this project here with

224
00:13:03,130 --> 00:13:06,110
the radio
led me down the track of just completely rewriting

225
00:13:06,110 --> 00:13:07,590
this
thing.

226
00:13:07,590 --> 00:13:08,590
And so why?

227
00:13:08,590 --> 00:13:12,870
You know, well, we have a small
family of packages kind of mentality which

228
00:13:12,870 --> 00:13:15,260
I really
like, like why do we have this monolith?

229
00:13:15,260 --> 00:13:18,340
People should
be able to install the chip support and the

230
00:13:18,340 --> 00:13:21,490
programming
support they want.

231
00:13:21,490 --> 00:13:26,260
It has, you know, it is easier to
test that way, because they're small chunks.

232
00:13:26,260 --> 00:13:28,100
It has
better flexibility for use.

233
00:13:28,100 --> 00:13:31,420
So instead of just having
it on the command line, you should be able

234
00:13:31,420 --> 00:13:35,760
to require it
with a common JS pattern and then use it that

235
00:13:35,760 --> 00:13:38,110
way, which
is the main pinpoint for me.

236
00:13:38,110 --> 00:13:41,580
It is also more
accessible.

237
00:13:41,580 --> 00:13:45,110
People that are coming in now to learn
programming are not necessarily learning C

238
00:13:45,110 --> 00:13:49,810
any more but
JavaScript, and this opens this world up to

239
00:13:49,810 --> 00:13:52,560
more people
and provides an alternative.

240
00:13:52,560 --> 00:13:56,760
I'm not looking to replace
the AVRDUDE; I just want to provide a different

241
00:13:56,760 --> 00:14:01,460
alternative and have a go at seeing what modern
principles bring to it.

242
00:14:01,460 --> 00:14:03,300
I also want to publish others.

243
00:14:03,300 --> 00:14:05,830
I don't want to just write a keys of code
for that

244
00:14:05,830 --> 00:14:09,190
programmer and that chip, want to be able
to have this

245
00:14:09,190 --> 00:14:12,520
as a tool that everyone can use.

246
00:14:12,520 --> 00:14:16,370
So I wrote a tool
called AVRGIRL.

247
00:14:16,370 --> 00:14:17,370
[applause].

248
00:14:17,370 --> 00:14:22,890
It stands for AVR general
iSP programming tool.

249
00:14:22,890 --> 00:14:23,890
[applause].

250
00:14:23,890 --> 00:14:35,580
I wanted to keep the
tradition going.

251
00:14:35,580 --> 00:14:38,220
I respect, like AVRDUDE is an amazing
tool.

252
00:14:38,220 --> 00:14:41,080
I'm not here to say it is bad in any way.

253
00:14:41,080 --> 00:14:44,960
I want
to pay homage to it.

254
00:14:44,960 --> 00:14:50,240
And so you go on your little
journey of programming these things and think:

255
00:14:50,240 --> 00:14:51,240
this is
awesome.

256
00:14:51,240 --> 00:14:53,330
Why has no one does this before?

257
00:14:53,330 --> 00:14:56,740
People have
maybe rewritten pots of AVRDUDE for their

258
00:14:56,740 --> 00:15:00,850
own use, but
not the whole library, like how bad could

259
00:15:00,850 --> 00:15:02,810
this be?

260
00:15:02,810 --> 00:15:06,430
And
while we're on the topic of dinosaurs, I found

261
00:15:06,430 --> 00:15:11,060
a lot of
mammoth shave while doing this, and one popped

262
00:15:11,060 --> 00:15:13,830
up
immediately, and I felt that's okay, I can

263
00:15:13,830 --> 00:15:14,830
do it.

264
00:15:14,830 --> 00:15:18,290
And
before I knew it they were everywhere.

265
00:15:18,290 --> 00:15:20,940
And I'm
thinking: this is why people haven't tried

266
00:15:20,940 --> 00:15:22,500
to do this
before.

267
00:15:22,500 --> 00:15:30,940
So whenever you try and look up how to solve
this, this is usually what you run into, okay,

268
00:15:30,940 --> 00:15:33,430
or you
just run into people who have used the software

269
00:15:33,430 --> 00:15:35,790
but
don't know how it works.

270
00:15:35,790 --> 00:15:39,500
So this posed quite
a challenge, so I want to really quickly go

271
00:15:39,500 --> 00:15:44,070
over
a couple of challenges I had with this, just

272
00:15:44,070 --> 00:15:46,490
so that
people can understand the hardware world a

273
00:15:46,490 --> 00:15:47,620
little more.

274
00:15:47,620 --> 00:15:51,480
I'm a little lonely in this world; I want
to share my

275
00:15:51,480 --> 00:15:52,480
pain.

276
00:15:52,480 --> 00:15:56,100
Challenge number 1: support USB programmers
this

277
00:15:56,100 --> 00:16:02,560
the AVRISP v2, and it runs via USB and there
are a lot

278
00:16:02,560 --> 00:16:05,980
that run via parallel ports and all sorts
of stuff, but

279
00:16:05,980 --> 00:16:08,690
I want to support more modern stuff to begin
with, and

280
00:16:08,690 --> 00:16:10,610
see if there's demand beyond there.

281
00:16:10,610 --> 00:16:14,459
Here is an example
of four different programmers.

282
00:16:14,459 --> 00:16:19,810
We have the AVRISF mark
two, the spark fund tiny programmer and the

283
00:16:19,810 --> 00:16:24,209
spark fun
pocket programmer, and then we have the USB

284
00:16:24,209 --> 00:16:26,600
tiny
programmer.

285
00:16:26,600 --> 00:16:31,980
And so these are great, and the reason why
there's a lot of them is they all have different

286
00:16:31,980 --> 00:16:33,899
advantages.

287
00:16:33,899 --> 00:16:38,220
The problem is they all speak different
languages.

288
00:16:38,220 --> 00:16:48,450
So in the web world we have HTTP and HTTS,
it's no different in hardware, we have a lot

289
00:16:48,450 --> 00:16:52,529
of
protocols, we need to support, and so far

290
00:16:52,529 --> 00:16:55,620
in writing
AVRGIRL we've come across these protocols

291
00:16:55,620 --> 00:16:56,620
in particular.

292
00:16:56,620 --> 00:16:58,850
I don't have time to go into them in detail
now, but

293
00:16:58,850 --> 00:17:01,500
I have blogged about a couple.

294
00:17:01,500 --> 00:17:05,000
So we have STK500
version one, which is by Atmel.

295
00:17:05,000 --> 00:17:08,159
Then they came out with
version two, which is quite different.

296
00:17:08,159 --> 00:17:13,970
We have
AVR109USP tiny AR.

297
00:17:13,970 --> 00:17:18,919
There was actually a node module for each
of these

298
00:17:18,919 --> 00:17:24,089
in npm, which is awesome, and that was Ryan
Day and

299
00:17:24,089 --> 00:17:29,090
Jacob Rosenthal, and a lot of these modules
were written

300
00:17:29,090 --> 00:17:32,429
specifically for use case and weren't really
super

301
00:17:32,429 --> 00:17:33,429
generic.

302
00:17:33,429 --> 00:17:35,570
So I had to pull request some of them and
some

303
00:17:35,570 --> 00:17:39,649
of them I've had to rewrite from scratch,
because it

304
00:17:39,649 --> 00:17:41,909
would basically be rewriting the whole thing.

305
00:17:41,909 --> 00:17:50,170
And so
I learned a lot about how hardware talks to

306
00:17:50,170 --> 00:17:53,279
devices, and
then how computers talk to programmers.

307
00:17:53,279 --> 00:17:55,670
It was actually
really cool.

308
00:17:55,670 --> 00:17:59,610
And so I got all of this information from
data sheets, and, you know, this is kind of

309
00:17:59,610 --> 00:18:02,039
how it feels
when you first read a data sheet.

310
00:18:02,039 --> 00:18:04,299
You're like: what is
this?

311
00:18:04,299 --> 00:18:10,440
So this is an example of a data sheet for
a previous library I wrote to drive OLED screens.

312
00:18:10,440 --> 00:18:14,100
And
after a while, the thing starts swimming into

313
00:18:14,100 --> 00:18:15,950
a place
where they make sense.

314
00:18:15,950 --> 00:18:19,480
But a lot of the time that's all
you have because Google is not going to give

315
00:18:19,480 --> 00:18:21,000
you a lot
of information.

316
00:18:21,000 --> 00:18:23,150
But we got there in the end.

317
00:18:23,150 --> 00:18:26,500
I have
some protocols that are now supported.

318
00:18:26,500 --> 00:18:28,989
All of the
Arduinos can be flashed with this software

319
00:18:28,989 --> 00:18:32,549
and this
programmer here also has support right now.

320
00:18:32,549 --> 00:18:35,710
So
challenge number 2, O/I have to somehow support

321
00:18:35,710 --> 00:18:38,330
all of
these Atmel chips, so how many can there really

322
00:18:38,330 --> 00:18:39,330
be?

323
00:18:39,330 --> 00:18:41,970
Well there's 400 of them.

324
00:18:41,970 --> 00:18:43,159
[Laughter].

325
00:18:43,159 --> 00:18:47,519
Luckily not all
of them are actually relevant, some are architecture

326
00:18:47,519 --> 00:18:48,620
and
that sort of thing.

327
00:18:48,620 --> 00:18:52,980
I'm supporting risk architecture
which is what the Atmel AVR chips are, so

328
00:18:52,980 --> 00:18:56,019
that whittled
it down to 135.

329
00:18:56,019 --> 00:18:58,559
That's fine, that's great.

330
00:18:58,559 --> 00:19:04,440
So this
configuration sits in not a format that I'm

331
00:19:04,440 --> 00:19:05,950
used to.

332
00:19:05,950 --> 00:19:08,889
I wanted it to look like this, and this is
not the

333
00:19:08,889 --> 00:19:12,679
entire object of configurations I created
in the end, I

334
00:19:12,679 --> 00:19:14,379
had to create my own spec for this.

335
00:19:14,379 --> 00:19:18,700
There's about 50
properties, so here's a snapshot of the properties

336
00:19:18,700 --> 00:19:21,350
you
need to know, such as the name of it, the

337
00:19:21,350 --> 00:19:25,710
timeout, if it
doesn't connect within 200 milliseconds, then

338
00:19:25,710 --> 00:19:26,710
it is
a timeout.

339
00:19:26,710 --> 00:19:29,149
Things like that.

340
00:19:29,149 --> 00:19:31,090
Really kind of in-depth
stuff.

341
00:19:31,090 --> 00:19:33,429
But what I had to work with was 200 megabytes
of

342
00:19:33,429 --> 00:19:38,950
XML files to pull out those configurations,
so that was

343
00:19:38,950 --> 00:19:42,399
particularly time consuming, but I thought
this has to

344
00:19:42,399 --> 00:19:46,570
be done, and I don't want this stuck in XML
forever.

345
00:19:46,570 --> 00:19:52,639
So
writing XML translations is really -- I wouldn't

346
00:19:52,639 --> 00:19:53,639
recommend it.

347
00:19:53,639 --> 00:19:57,940
There are a lot of late nights, a lot of
crying, shouting at my significant other when

348
00:19:57,940 --> 00:19:59,549
I was in
the middle of a bug, and he asked me what

349
00:19:59,549 --> 00:20:01,730
I wanted for
dinner.

350
00:20:01,730 --> 00:20:02,730
Sorry.

351
00:20:02,730 --> 00:20:03,730


352
00:20:03,730 --> 00:20:06,049
But luckily I have this awesome
module.

353
00:20:06,049 --> 00:20:08,860
Well, I don't have it, but I used it.

354
00:20:08,860 --> 00:20:10,769
It is
called XML to JS.

355
00:20:10,769 --> 00:20:12,450
I highly recommend using it.

356
00:20:12,450 --> 00:20:13,450
It is
awesome.

357
00:20:13,450 --> 00:20:16,919
It passes the whole thing, you set up how
flat

358
00:20:16,919 --> 00:20:18,480
you want it, and it was amazing.

359
00:20:18,480 --> 00:20:22,450
So I had to deal with
pulling out the random bits of the configuration

360
00:20:22,450 --> 00:20:26,200
I wanted, but actually worked out really well,
and so

361
00:20:26,200 --> 00:20:32,399
I now have 135 chips converted with my spec,
only five

362
00:20:32,399 --> 00:20:34,980
of them have been tested, so I need more people
to test

363
00:20:34,980 --> 00:20:35,980
it.

364
00:20:35,980 --> 00:20:38,090
I have no idea whether it is actually working,
and

365
00:20:38,090 --> 00:20:43,289
I don't think I'll actually ever open source
the

366
00:20:43,289 --> 00:20:46,750
translation file I wrote, because no one is
ever going

367
00:20:46,750 --> 00:20:50,120
to want to use it, and I'm scared that my
job prospects

368
00:20:50,120 --> 00:20:52,740
will go down the plughole after that.

369
00:20:52,740 --> 00:20:55,389
But, you know, it
got done.

370
00:20:55,389 --> 00:20:59,649
I'm actually really excited I can work with
JSXML.

371
00:20:59,649 --> 00:21:06,220
After a while it felt like things were actually
moving forward, which is great.

372
00:21:06,220 --> 00:21:09,450
This is sort of how
I want the architecture to look eventually,

373
00:21:09,450 --> 00:21:14,259
the driver
itself is just the npm module you install,

374
00:21:14,259 --> 00:21:19,230
and you get
the entire kitchen sink, similar to AVRDUDE.

375
00:21:19,230 --> 00:21:21,480
So we have
our chip config where I'm storing that in

376
00:21:21,480 --> 00:21:24,440
a module so
people don't have to use that.

377
00:21:24,440 --> 00:21:26,809
For AVRGIRL, you can use
it for anything.

378
00:21:26,809 --> 00:21:32,000
The protocols have been implemented as
specific modules, so if a programmer is not

379
00:21:32,000 --> 00:21:34,320
supported,
you can still support the programmer as long

380
00:21:34,320 --> 00:21:37,590
as it has
that protocol, and then in the programmer

381
00:21:37,590 --> 00:21:41,309
is just like
separate wrappers around the protocols with

382
00:21:41,309 --> 00:21:45,109
the vendor
ID and the product ID, and just an easy way

383
00:21:45,109 --> 00:21:46,570
to connect
with it.

384
00:21:46,570 --> 00:21:51,010
But I said before, that I want some more
modules, right, so I've designed every single

385
00:21:51,010 --> 00:21:55,759
package to
run by itself, standalone, so that you don't

386
00:21:55,759 --> 00:21:58,190
have to buy
into the whole AVRGIRL thing.

387
00:21:58,190 --> 00:22:03,149
You can use it by itself
and pick and choose what you need.

388
00:22:03,149 --> 00:22:04,809
So what have I done so far?

389
00:22:04,809 --> 00:22:09,740
I've released four
packages, I've AVRGIRL Arduino, which flashes

390
00:22:09,740 --> 00:22:14,559
all of the
common Arduinos, which pretty much made use

391
00:22:14,559 --> 00:22:17,739
of all of
those protocols.

392
00:22:17,739 --> 00:22:21,600
I rewrote STK500 version two, because
I wanted it to have things like writing fuses

393
00:22:21,600 --> 00:22:24,600
and EPROM,
and the original model was written for the

394
00:22:24,600 --> 00:22:30,059
Arduino so it
didn't support the USB library I needed either.

395
00:22:30,059 --> 00:22:35,049
AVRGIRL
chips JSON is the evidence of my tears, converting

396
00:22:35,049 --> 00:22:41,049
it to
JSON, and the AVRGIRL ISP mark two is this

397
00:22:41,049 --> 00:22:43,210
programmer
here, so you come out of the box interface

398
00:22:43,210 --> 00:22:44,970
with any chip
this programmer.

399
00:22:44,970 --> 00:22:50,029
So I'm using AVRGIRL ASP mark two in
that public radio app I showed you.

400
00:22:50,029 --> 00:22:51,029
Again, why?

401
00:22:51,029 --> 00:22:54,529
Why go
through all of these tiers to create this

402
00:22:54,529 --> 00:22:59,059
for when
AVRDUDE is perfectly acceptable?

403
00:22:59,059 --> 00:23:01,960
Well, I want to
provide a better developer experience, I have

404
00:23:01,960 --> 00:23:04,109
a lot of
empathy for developers, because I know what

405
00:23:04,109 --> 00:23:05,480
it is like
to be one.

406
00:23:05,480 --> 00:23:11,529
I want to have really great documentation
and have something that feels more native,

407
00:23:11,529 --> 00:23:13,850
so that they
don't feel stupid because they don't know

408
00:23:13,850 --> 00:23:16,429
stuff about
hardware.

409
00:23:16,429 --> 00:23:19,200
This is just a example from the forums
I talked about.

410
00:23:19,200 --> 00:23:24,929
This person, they're a little --
they're actually wrong.

411
00:23:24,929 --> 00:23:27,289
So it's not cool.

412
00:23:27,289 --> 00:23:29,749
It actually
ended up a typo in Atmel's data sheet and

413
00:23:29,749 --> 00:23:32,639
Atmel
apologised, but it was not what David suggested

414
00:23:32,639 --> 00:23:34,769
it was.

415
00:23:34,769 --> 00:23:37,029
I don't want people to feel like this.

416
00:23:37,029 --> 00:23:39,779
It is just not
okay, and I think as a JavaScript community

417
00:23:39,779 --> 00:23:42,970
we are
really good at this stuff.

418
00:23:42,970 --> 00:23:47,720
So without obscuring what
the code is, this the kind of API you have

419
00:23:47,720 --> 00:23:50,340
now, so you
have this awareness you're entering programming

420
00:23:50,340 --> 00:23:53,109
mode,
writing the EPROM and exiting programming

421
00:23:53,109 --> 00:23:56,179
mode, it feels
natural and you know there's a callback in

422
00:23:56,179 --> 00:23:59,859
there, and
we're all comfortable with that, and this

423
00:23:59,859 --> 00:24:02,320
is what it
looks like right now in order to be able to

424
00:24:02,320 --> 00:24:06,539
flash the
chip, ten line lines of code, which is great.

425
00:24:06,539 --> 00:24:09,729
So to be nice to other developers, you want
to have

426
00:24:09,729 --> 00:24:13,220
beautiful docs, which I'm trying to write
extensively

427
00:24:13,220 --> 00:24:17,489
and also blog posting about it, ease of use,
and it

428
00:24:17,489 --> 00:24:20,429
should be implemented in modern tools, modern
languages,

429
00:24:20,429 --> 00:24:21,429
right?

430
00:24:21,429 --> 00:24:25,479
And then let's provide a better user experience
for people that buy this crazy Kickstarter

431
00:24:25,479 --> 00:24:28,140
kit and have
no idea what they're doing.

432
00:24:28,140 --> 00:24:30,100
Let's have improved
accessibility.

433
00:24:30,100 --> 00:24:35,220
The screen reader issue still hasn't
been solved in NWJS, but I'm hoping for that,

434
00:24:35,220 --> 00:24:39,340
but let's
make it easier to be able to use these tools.

435
00:24:39,340 --> 00:24:42,899
Let's not
make it look like a computer virus as well,

436
00:24:42,899 --> 00:24:45,840
and, you
know, hopefully we'll have more uptake in

437
00:24:45,840 --> 00:24:50,249
this stuff and
a much larger hardware community as a result.

438
00:24:50,249 --> 00:24:53,610
And so,
this proof of concept, this app here just

439
00:24:53,610 --> 00:24:56,950
taught me so
much about what it's like to have to provide

440
00:24:56,950 --> 00:24:59,869
for both
users and developers and be stuck in the middle.

441
00:24:59,869 --> 00:25:02,809
I feel
like I learnt a lot about it and privileged

442
00:25:02,809 --> 00:25:06,110
to be able
to work with Zak on this stuff, and I'm excited

443
00:25:06,110 --> 00:25:08,220
to
hopefully release this as the new official

444
00:25:08,220 --> 00:25:10,940
software for
the radio for people who want to change their

445
00:25:10,940 --> 00:25:13,500
mind about
the radio station.

446
00:25:13,500 --> 00:25:17,580
Hopefully people will maybe take
AVRGIRL and use it for fun stuff like remotely

447
00:25:17,580 --> 00:25:22,240
bricking
each other's chips through games online.

448
00:25:22,240 --> 00:25:26,529
I played this
game with someone a couple of weeks ago.

449
00:25:26,529 --> 00:25:27,529
It was fun.

450
00:25:27,529 --> 00:25:32,759
If you'd like to follow progress, I have the
master

451
00:25:32,759 --> 00:25:36,479
module which links to all of the others, it
is new

452
00:25:36,479 --> 00:25:38,179
cat/AVRGIRL on github.

453
00:25:38,179 --> 00:25:42,999
If you want to read a blog post,
I'm doing lots about it, there are four right

454
00:25:42,999 --> 00:25:46,379
now
describing all the different challenges I've

455
00:25:46,379 --> 00:25:47,600
met.

456
00:25:47,600 --> 00:25:50,470
Thank
you for being here for my lessons of JavaScript,

