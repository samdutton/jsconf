1
00:00:09,380 --> 00:00:13,290

so I'm a tranny i founded a company

2
00:00:13,290 --> 00:00:15,059
called boxer we did this voice messaging

3
00:00:15,059 --> 00:00:16,410
thing we had all know it on the back end

4
00:00:16,410 --> 00:00:19,859
a lot of people may know me from doing

5
00:00:19,859 --> 00:00:22,560
no dradis a lot of people using node

6
00:00:22,560 --> 00:00:27,570
Vettes yay redis a ton of people have

7
00:00:27,570 --> 00:00:30,060
talked to me in the last few days at

8
00:00:30,060 --> 00:00:32,759
jazz camp here in no comp about node

9
00:00:32,759 --> 00:00:35,130
Redis and it really reminds me like how

10
00:00:35,130 --> 00:00:37,200
many contributions I got to help make

11
00:00:37,200 --> 00:00:39,600
that work and like ton of people are

12
00:00:39,600 --> 00:00:41,550
using an introduction and like we fixed

13
00:00:41,550 --> 00:00:44,610
like a ton of bugs it wasn't just me who

14
00:00:44,610 --> 00:00:47,520
made that thing like a whole lot of you

15
00:00:47,520 --> 00:00:50,010
helped contribute so I just want to say

16
00:00:50,010 --> 00:00:51,629
thanks for everybody who like try that

17
00:00:51,629 --> 00:00:53,670
out and like you know pointed out bugs

18
00:00:53,670 --> 00:00:55,590
and like gave it a shot because like I

19
00:00:55,590 --> 00:00:57,480
think now we have we have a pretty good

20
00:00:57,480 --> 00:01:00,270
Redis library it's like such a good fit

21
00:01:00,270 --> 00:01:02,760
with node anyway just wanted to put that

22
00:01:02,760 --> 00:01:04,799
out there thanks for the community and

23
00:01:04,799 --> 00:01:08,369
support on on the rightest thing anyway

24
00:01:08,369 --> 00:01:10,590
so I supposed to talk about a node

25
00:01:10,590 --> 00:01:12,390
performance I've done some work with the

26
00:01:12,390 --> 00:01:13,890
VA profile or and stuff like that and

27
00:01:13,890 --> 00:01:16,799
found some interesting things but in in

28
00:01:16,799 --> 00:01:20,250
the last few weeks I ran into some I

29
00:01:20,250 --> 00:01:22,619
think even more interesting things as

30
00:01:22,619 --> 00:01:24,540
voxer started to get more popular we

31
00:01:24,540 --> 00:01:26,880
started adding more more capacity to our

32
00:01:26,880 --> 00:01:28,740
system we're running all note on the

33
00:01:28,740 --> 00:01:31,350
back end and it's it's raised a bunch of

34
00:01:31,350 --> 00:01:33,180
kind of interesting issues that I wanted

35
00:01:33,180 --> 00:01:37,290
to talk about and so before it before I

36
00:01:37,290 --> 00:01:39,150
do that like just backing up a little

37
00:01:39,150 --> 00:01:41,670
bit like we've always said like they've

38
00:01:41,670 --> 00:01:42,600
been some things we've been saying about

39
00:01:42,600 --> 00:01:45,899
node since like forever ago and I think

40
00:01:45,899 --> 00:01:47,610
I think nodes been been kind of living

41
00:01:47,610 --> 00:01:50,189
up to its initial promise like it works

42
00:01:50,189 --> 00:01:51,570
it has very good performance on like a

43
00:01:51,570 --> 00:01:55,170
single CPU core it's it it works really

44
00:01:55,170 --> 00:01:57,090
well that way it's it's very inexpensive

45
00:01:57,090 --> 00:01:59,009
to hold open a lot of network

46
00:01:59,009 --> 00:02:01,530
connections and you get to write your

47
00:02:01,530 --> 00:02:03,210
programs in JavaScript so it's like

48
00:02:03,210 --> 00:02:05,460
those are like the key the key sort of

49
00:02:05,460 --> 00:02:07,560
like tenets of like why note is good in

50
00:02:07,560 --> 00:02:10,229
my opinion and and I think we've we've

51
00:02:10,229 --> 00:02:12,510
done a pretty good job at that like it

52
00:02:12,510 --> 00:02:13,770
really does deliver on all

53
00:02:13,770 --> 00:02:15,960
those three things but there's always

54
00:02:15,960 --> 00:02:17,850
the this sort of you know nagging

55
00:02:17,850 --> 00:02:19,590
questions the the the people who are new

56
00:02:19,590 --> 00:02:22,380
to note are like well geez what about

57
00:02:22,380 --> 00:02:24,870
all my other cpus I mean isn't all like

58
00:02:24,870 --> 00:02:26,790
modern software multi-threaded like I

59
00:02:26,790 --> 00:02:28,320
have Java and like that does lots of

60
00:02:28,320 --> 00:02:30,900
threads and surely in this era of

61
00:02:30,900 --> 00:02:33,360
multi-core computing like you have a

62
00:02:33,360 --> 00:02:36,150
good way of using more than one cpu core

63
00:02:36,150 --> 00:02:39,660
I mean obviously and you know we

64
00:02:39,660 --> 00:02:41,420
probably did ourselves a disservice a

65
00:02:41,420 --> 00:02:45,150
lot of times in when descriptions of

66
00:02:45,150 --> 00:02:47,040
node we would say oh it's more scalable

67
00:02:47,040 --> 00:02:49,020
like we would throw this scalable word

68
00:02:49,020 --> 00:02:52,850
out and add that was probably a mistake

69
00:02:52,850 --> 00:02:56,850
it's at best misleading and at worst

70
00:02:56,850 --> 00:03:00,150
totally wrong node doesn't do anything

71
00:03:00,150 --> 00:03:03,570
about scalability all it does is those

72
00:03:03,570 --> 00:03:05,190
three things it's very good performance

73
00:03:05,190 --> 00:03:07,530
on a single CPU core it's easier to hold

74
00:03:07,530 --> 00:03:09,420
open a lot of connections and you get to

75
00:03:09,420 --> 00:03:11,090
write all your programs in JavaScript so

76
00:03:11,090 --> 00:03:14,640
that's cool because you know event loops

77
00:03:14,640 --> 00:03:16,800
are good they maximize the efficiency of

78
00:03:16,800 --> 00:03:18,660
your resources and what we've always

79
00:03:18,660 --> 00:03:20,910
been saying is okay listen if you run

80
00:03:20,910 --> 00:03:23,730
out of one cpu like you really you got

81
00:03:23,730 --> 00:03:25,620
this amazing benefit of being very

82
00:03:25,620 --> 00:03:28,410
efficient on that cpu you're out just

83
00:03:28,410 --> 00:03:30,330
get more node processes and they can be

84
00:03:30,330 --> 00:03:32,670
on the same computer they can be on a

85
00:03:32,670 --> 00:03:34,770
different computer but because we have

86
00:03:34,770 --> 00:03:37,470
this amazing networking stack it's

87
00:03:37,470 --> 00:03:40,350
really cheap to talk to other node

88
00:03:40,350 --> 00:03:42,360
processes so like don't worry about it

89
00:03:42,360 --> 00:03:45,030
like just get more node processes and

90
00:03:45,030 --> 00:03:48,420
you know stop computing prime numbers in

91
00:03:48,420 --> 00:03:52,230
JavaScript and so oh and you know by the

92
00:03:52,230 --> 00:03:54,720
way like we've got unix sockets and

93
00:03:54,720 --> 00:03:56,520
we'll do this send ft thing so you can

94
00:03:56,520 --> 00:03:58,290
move file descriptors around and so fine

95
00:03:58,290 --> 00:04:00,300
fine fine like on one computer like

96
00:04:00,300 --> 00:04:01,770
we'll make it a little bit easier for

97
00:04:01,770 --> 00:04:04,110
you to to sort of get a whole bunch of

98
00:04:04,110 --> 00:04:07,410
no processes but still like event you

99
00:04:07,410 --> 00:04:09,989
know get more node processes that's

100
00:04:09,989 --> 00:04:13,700
that's the way to go unfortunately even

101
00:04:13,700 --> 00:04:16,859
debugging a single note process is very

102
00:04:16,859 --> 00:04:20,850
hard there are some tools for this there

103
00:04:20,850 --> 00:04:22,620
is no to inspector which is super

104
00:04:22,620 --> 00:04:24,360
awesome and if you're never using note

105
00:04:24,360 --> 00:04:24,850
inspector

106
00:04:24,850 --> 00:04:27,280
like write that down go check it out it

107
00:04:27,280 --> 00:04:31,330
is awesome it's the the webkit you know

108
00:04:31,330 --> 00:04:34,000
the dev tools you can plug it into note

109
00:04:34,000 --> 00:04:37,870
it's it's super cool but even with a

110
00:04:37,870 --> 00:04:39,660
great tool like note inspector like

111
00:04:39,660 --> 00:04:42,250
debugging an actual server especially

112
00:04:42,250 --> 00:04:44,260
like while it's running sort of

113
00:04:44,260 --> 00:04:46,960
Impractical like you can't really sort

114
00:04:46,960 --> 00:04:50,080
of step from asynccallback to other

115
00:04:50,080 --> 00:04:51,640
asynccallback like you'd like to and

116
00:04:51,640 --> 00:04:54,280
frankly if you have to stop it your

117
00:04:54,280 --> 00:04:55,840
server stops working and it might not

118
00:04:55,840 --> 00:04:59,560
actually be doing the same things if you

119
00:04:59,560 --> 00:05:01,780
stopped it you know other people are

120
00:05:01,780 --> 00:05:03,070
talking to it you're talking you making

121
00:05:03,070 --> 00:05:04,360
outgoing connections those may timeout

122
00:05:04,360 --> 00:05:06,880
or different states may be arrived at

123
00:05:06,880 --> 00:05:09,550
and pausing a process is not always a

124
00:05:09,550 --> 00:05:13,360
viable debugging node so man that's

125
00:05:13,360 --> 00:05:17,050
really hard there's also a sort of a

126
00:05:17,050 --> 00:05:18,790
command line e version of the same thing

127
00:05:18,790 --> 00:05:20,860
in node if you like to do it that way

128
00:05:20,860 --> 00:05:22,780
but still the same fundamental problem

129
00:05:22,780 --> 00:05:24,760
like if you stop it then your server

130
00:05:24,760 --> 00:05:26,560
stops working and that may actually not

131
00:05:26,560 --> 00:05:28,120
reproduce the state that you're trying

132
00:05:28,120 --> 00:05:30,760
to debug so you can do what most people

133
00:05:30,760 --> 00:05:32,470
do which what I do which is you just log

134
00:05:32,470 --> 00:05:35,260
a lot you're right all kinds of log

135
00:05:35,260 --> 00:05:38,290
statements on on all sorts of things but

136
00:05:38,290 --> 00:05:40,390
but remember remember you get all these

137
00:05:40,390 --> 00:05:42,070
amazing benefits it's very efficient and

138
00:05:42,070 --> 00:05:43,120
liqueur and you get to write it in

139
00:05:43,120 --> 00:05:44,890
JavaScript and lots of connections and

140
00:05:44,890 --> 00:05:47,190
all that so like don't give up hope like

141
00:05:47,190 --> 00:05:49,060
there's a reason that we're all here

142
00:05:49,060 --> 00:05:51,910
like it's cool but it's just this

143
00:05:51,910 --> 00:05:55,300
debugging is kind of hard it's it's it

144
00:05:55,300 --> 00:05:58,360
may be ugly but I mean you know you can

145
00:05:58,360 --> 00:06:00,100
sort of you can sort of do it do

146
00:06:00,100 --> 00:06:02,100
something with that so anyway like

147
00:06:02,100 --> 00:06:04,180
here's what you usually start out with

148
00:06:04,180 --> 00:06:06,280
like you start out and you're building

149
00:06:06,280 --> 00:06:07,480
your you're building your note app and

150
00:06:07,480 --> 00:06:09,280
you've got like you've got like one node

151
00:06:09,280 --> 00:06:10,480
process and you know it's probably

152
00:06:10,480 --> 00:06:12,070
talking to some kind of database and and

153
00:06:12,070 --> 00:06:14,080
you're in this world I just talked about

154
00:06:14,080 --> 00:06:15,610
a minute ago where you're like okay okay

155
00:06:15,610 --> 00:06:18,490
sometimes it's complicated but like we

156
00:06:18,490 --> 00:06:19,690
can figure it out we'll add a bunch of

157
00:06:19,690 --> 00:06:22,870
logging and you know will will will

158
00:06:22,870 --> 00:06:24,670
solve our bugs that way but then like

159
00:06:24,670 --> 00:06:27,070
you you get some more you know you get

160
00:06:27,070 --> 00:06:28,690
cluster or you get whatever you know

161
00:06:28,690 --> 00:06:30,280
some way of getting a bunch more on

162
00:06:30,280 --> 00:06:32,560
nodes on the same on the same machine

163
00:06:32,560 --> 00:06:34,810
and then like okay it's getting a little

164
00:06:34,810 --> 00:06:36,620
harder but maybe you get more clever law

165
00:06:36,620 --> 00:06:37,880
and you figure out some way to filter it

166
00:06:37,880 --> 00:06:39,830
down or whatever and and that's pretty

167
00:06:39,830 --> 00:06:43,220
cool but then like man somewhere right

168
00:06:43,220 --> 00:06:46,190
around here where you're like I guess we

169
00:06:46,190 --> 00:06:49,520
need more computers and I got two

170
00:06:49,520 --> 00:06:51,590
different kinds of places we're keeping

171
00:06:51,590 --> 00:06:53,720
your data you maybe have like a Redis or

172
00:06:53,720 --> 00:06:55,340
a memcache if you're someone other than

173
00:06:55,340 --> 00:06:58,070
me and then like you know probably want

174
00:06:58,070 --> 00:06:59,449
a real database in there too and like

175
00:06:59,449 --> 00:07:01,639
jeez like everything's talking to

176
00:07:01,639 --> 00:07:04,160
everything and like there are there are

177
00:07:04,160 --> 00:07:05,900
multiple different states that things

178
00:07:05,900 --> 00:07:07,400
can get into because you have all these

179
00:07:07,400 --> 00:07:10,850
moving parts and man it's it's starting

180
00:07:10,850 --> 00:07:12,889
to get really complicated now but then

181
00:07:12,889 --> 00:07:15,080
like you're successful so like you're

182
00:07:15,080 --> 00:07:16,070
getting a lot of traffic and you're

183
00:07:16,070 --> 00:07:17,150
starting to have to separate your

184
00:07:17,150 --> 00:07:19,789
components and what you know a pool of

185
00:07:19,789 --> 00:07:22,220
identical node processes running out

186
00:07:22,220 --> 00:07:23,389
three machines behind a single load

187
00:07:23,389 --> 00:07:25,669
balancer starts to not cut it in like

188
00:07:25,669 --> 00:07:28,910
holy crap now you've got like two steps

189
00:07:28,910 --> 00:07:30,199
through two differently you know step

190
00:07:30,199 --> 00:07:31,550
through two different load balancers and

191
00:07:31,550 --> 00:07:32,750
different parts of your application or

192
00:07:32,750 --> 00:07:33,830
running in different clusters all over

193
00:07:33,830 --> 00:07:36,560
the place all these things are like yet

194
00:07:36,560 --> 00:07:38,810
have this state that accumulates his new

195
00:07:38,810 --> 00:07:42,710
traffic comes into it and wow like if

196
00:07:42,710 --> 00:07:44,810
you thought debugging like a single node

197
00:07:44,810 --> 00:07:48,010
process was hard like try getting like

198
00:07:48,010 --> 00:07:51,139
something like this and it is a

199
00:07:51,139 --> 00:07:57,260
challenge so as you might imagine so the

200
00:07:57,260 --> 00:07:58,580
thing is like you may be thinking

201
00:07:58,580 --> 00:08:00,530
yourself well look I'm a responsible

202
00:08:00,530 --> 00:08:04,180
adult I have written a ton of tests and

203
00:08:04,180 --> 00:08:08,810
I I test all my code and I've got a dev

204
00:08:08,810 --> 00:08:10,639
environment you know and I got it I got

205
00:08:10,639 --> 00:08:12,800
that all set up and you know and I got a

206
00:08:12,800 --> 00:08:15,050
staging environment and I do i do I can

207
00:08:15,050 --> 00:08:16,789
do my homework you know like I I read

208
00:08:16,789 --> 00:08:18,590
all the best practices and I practice

209
00:08:18,590 --> 00:08:21,110
various kinds of something driven

210
00:08:21,110 --> 00:08:24,590
development behavior and and what have

211
00:08:24,590 --> 00:08:27,380
you and so you your development is I

212
00:08:27,380 --> 00:08:29,750
mean you're on it but the thing is like

213
00:08:29,750 --> 00:08:33,680
you you can never exactly account for

214
00:08:33,680 --> 00:08:35,690
all the differences like sure you may

215
00:08:35,690 --> 00:08:38,029
build a dev environment but like are you

216
00:08:38,029 --> 00:08:39,740
really going to have as many nodes in

217
00:08:39,740 --> 00:08:40,940
your dev environment as you have in

218
00:08:40,940 --> 00:08:42,860
production like are you really going to

219
00:08:42,860 --> 00:08:45,260
commit that kind of hardware budget to

220
00:08:45,260 --> 00:08:47,240
just so you can have the exact same

221
00:08:47,240 --> 00:08:49,120
setup in dev I mean

222
00:08:49,120 --> 00:08:50,890
not you're probably going to have like

223
00:08:50,890 --> 00:08:52,300
one or two computers and you're going to

224
00:08:52,300 --> 00:08:54,010
run a smaller version of your of your

225
00:08:54,010 --> 00:08:56,350
whole set up there and yeah you meet you

226
00:08:56,350 --> 00:08:58,630
may like simulate some load but like

227
00:08:58,630 --> 00:08:59,800
you're never going to be able to

228
00:08:59,800 --> 00:09:01,930
simulate like a real actual live

229
00:09:01,930 --> 00:09:04,300
customer traffic like you'll blast some

230
00:09:04,300 --> 00:09:07,150
kind of synthetic pattern of something

231
00:09:07,150 --> 00:09:09,040
that seems reasonable and it's probably

232
00:09:09,040 --> 00:09:11,830
the best you can do but like it's not

233
00:09:11,830 --> 00:09:13,260
what happens when you go into production

234
00:09:13,260 --> 00:09:17,380
there there's just no way to recreate

235
00:09:17,380 --> 00:09:20,110
all of the conditions that a complicated

236
00:09:20,110 --> 00:09:23,710
system like this can get into but we're

237
00:09:23,710 --> 00:09:26,890
in a laboratory environment I mean I

238
00:09:26,890 --> 00:09:28,300
don't know I guess I shouldn't say no

239
00:09:28,300 --> 00:09:31,660
way but it's impractical from a cost

240
00:09:31,660 --> 00:09:33,430
standpoint like you're just not going to

241
00:09:33,430 --> 00:09:34,870
do it you're going to try it out you're

242
00:09:34,870 --> 00:09:35,740
going to write your tests you can do a

243
00:09:35,740 --> 00:09:36,790
simple low test and you can be like I

244
00:09:36,790 --> 00:09:38,350
get good it seems like it works it works

245
00:09:38,350 --> 00:09:40,240
when I try it it works from other people

246
00:09:40,240 --> 00:09:42,400
try it throw it out there and see what

247
00:09:42,400 --> 00:09:44,950
happens I mean I'm not saying that this

248
00:09:44,950 --> 00:09:47,230
is bad i mean what else you gonna do

249
00:09:47,230 --> 00:09:49,360
like you don't have time to build this

250
00:09:49,360 --> 00:09:53,020
sort of perfect thing so anyway it's not

251
00:09:53,020 --> 00:09:56,170
like these issues are unique to note

252
00:09:56,170 --> 00:09:58,839
like this is a fundamental issue with

253
00:09:58,839 --> 00:10:00,760
horizontal scaling systems in general

254
00:10:00,760 --> 00:10:03,820
like you start running processes on

255
00:10:03,820 --> 00:10:05,050
different computers that are all trying

256
00:10:05,050 --> 00:10:06,490
to do the same thing and you add all

257
00:10:06,490 --> 00:10:08,020
these moving parts like it doesn't

258
00:10:08,020 --> 00:10:09,310
matter what environment it's written in

259
00:10:09,310 --> 00:10:11,080
I mean it's can be Python processes or

260
00:10:11,080 --> 00:10:13,420
or whatever like as soon as you start

261
00:10:13,420 --> 00:10:14,800
having components on all these different

262
00:10:14,800 --> 00:10:17,589
machines like it gets crazy the thing

263
00:10:17,589 --> 00:10:19,779
that's I think uniquely note about this

264
00:10:19,779 --> 00:10:22,470
is we have a few more moving parts

265
00:10:22,470 --> 00:10:24,400
because we can only ever use one

266
00:10:24,400 --> 00:10:27,339
processor so it forces you to confront

267
00:10:27,339 --> 00:10:31,029
these issues when like maybe sooner than

268
00:10:31,029 --> 00:10:33,550
you would need to otherwise I mean at

269
00:10:33,550 --> 00:10:34,420
the end of the day it's probably a good

270
00:10:34,420 --> 00:10:35,830
idea that we all confront them because

271
00:10:35,830 --> 00:10:37,660
you know we all want to go big and have

272
00:10:37,660 --> 00:10:41,560
gigantic traffic loads so like you just

273
00:10:41,560 --> 00:10:44,830
because of that single CPU like you're

274
00:10:44,830 --> 00:10:46,470
gonna have a lot of note instances so

275
00:10:46,470 --> 00:10:50,410
this is going to come up and so I also I

276
00:10:50,410 --> 00:10:51,730
don't want to give the idea like I'm

277
00:10:51,730 --> 00:10:53,110
somehow like the world's expert on

278
00:10:53,110 --> 00:10:54,640
building like scalable back-end systems

279
00:10:54,640 --> 00:10:57,459
like there are people who have been

280
00:10:57,459 --> 00:10:58,660
doing this for a lot longer than I have

281
00:10:58,660 --> 00:11:01,660
but I just happen to have fought a

282
00:11:01,660 --> 00:11:02,450
battle with this

283
00:11:02,450 --> 00:11:05,030
for the past couple of months and so you

284
00:11:05,030 --> 00:11:06,920
know much like Xena the warrior princess

285
00:11:06,920 --> 00:11:09,500
these ideas are are forged in the heat

286
00:11:09,500 --> 00:11:14,630
of battle so I mean uh like I have some

287
00:11:14,630 --> 00:11:17,240
suggestions for like a couple of like

288
00:11:17,240 --> 00:11:19,640
basic things that you want to do and you

289
00:11:19,640 --> 00:11:21,080
know md you talked about these a little

290
00:11:21,080 --> 00:11:22,520
bit like you know you want to you want

291
00:11:22,520 --> 00:11:23,780
to get some good stats you want to use

292
00:11:23,780 --> 00:11:25,700
that use that metrics thing like totally

293
00:11:25,700 --> 00:11:27,800
do that log everything that you can

294
00:11:27,800 --> 00:11:29,930
afford to log aggregate your logs like

295
00:11:29,930 --> 00:11:30,860
you're going to want to do all this

296
00:11:30,860 --> 00:11:34,340
stuff but um there's sort of there's

297
00:11:34,340 --> 00:11:36,920
there's one aspect of you know building

298
00:11:36,920 --> 00:11:39,650
these building a big cluster like this

299
00:11:39,650 --> 00:11:41,360
that i don't hear people talking about

300
00:11:41,360 --> 00:11:43,670
too much and it's a pretty neat tool and

301
00:11:43,670 --> 00:11:46,670
it's something that we get to do we get

302
00:11:46,670 --> 00:11:50,150
to do i say because we're doing this in

303
00:11:50,150 --> 00:11:52,730
javascript we have a dynamic language

304
00:11:52,730 --> 00:11:58,160
that can be fed new code on the fly so

305
00:11:58,160 --> 00:12:01,540
like a problem a problem you have is you

306
00:12:01,540 --> 00:12:03,890
run into some situation you like them it

307
00:12:03,890 --> 00:12:05,570
seems to be weird this weird thing

308
00:12:05,570 --> 00:12:07,310
happens like I'm not exactly sure how to

309
00:12:07,310 --> 00:12:09,050
reproduce it but let's put some logging

310
00:12:09,050 --> 00:12:10,850
around like you know before it happens

311
00:12:10,850 --> 00:12:13,130
and after and we'll when it happens

312
00:12:13,130 --> 00:12:14,750
again we'll look the logs and we'll see

313
00:12:14,750 --> 00:12:15,740
we can figure out like what might have

314
00:12:15,740 --> 00:12:17,540
caused that well like in order to do

315
00:12:17,540 --> 00:12:19,880
that you have to push new code like you

316
00:12:19,880 --> 00:12:22,730
have to add some new JavaScript you know

317
00:12:22,730 --> 00:12:24,530
restart your thing you know you'll

318
00:12:24,530 --> 00:12:25,970
hopefully have some clever way of doing

319
00:12:25,970 --> 00:12:27,950
it so your users don't even notice but

320
00:12:27,950 --> 00:12:29,420
still you have to like restart that

321
00:12:29,420 --> 00:12:31,430
process and as soon as you restart the

322
00:12:31,430 --> 00:12:34,150
process you initialize the state and

323
00:12:34,150 --> 00:12:37,370
much of these bugs in my experience that

324
00:12:37,370 --> 00:12:39,770
are really hard to track down are a

325
00:12:39,770 --> 00:12:42,650
problem of sort of accumulated state in

326
00:12:42,650 --> 00:12:44,480
this distributed environment that is

327
00:12:44,480 --> 00:12:46,250
really like if you knew how to reproduce

328
00:12:46,250 --> 00:12:47,630
it like you just do it on your laptop

329
00:12:47,630 --> 00:12:49,850
but like there are problems because you

330
00:12:49,850 --> 00:12:51,020
don't know how to reproduce them you

331
00:12:51,020 --> 00:12:52,430
don't even know what causes them and

332
00:12:52,430 --> 00:12:54,770
you're trying to track them down and so

333
00:12:54,770 --> 00:12:56,900
like restarting your process to add

334
00:12:56,900 --> 00:13:00,140
logging undoes the thing that caused it

335
00:13:00,140 --> 00:13:02,060
in the first place so it kind of sucks

336
00:13:02,060 --> 00:13:04,040
to have to just add you know restart to

337
00:13:04,040 --> 00:13:06,920
add logging every time so anyway what

338
00:13:06,920 --> 00:13:09,230
you can do that's pretty interesting is

339
00:13:09,230 --> 00:13:11,270
you can just change your program you can

340
00:13:11,270 --> 00:13:13,970
change your program on the fly as it's

341
00:13:13,970 --> 00:13:15,680
running without restarting it

342
00:13:15,680 --> 00:13:18,220
so I know that that sounds crazy but

343
00:13:18,220 --> 00:13:21,110
when it is but I mean it's pretty cool

344
00:13:21,110 --> 00:13:24,589
so what you can do is use this thing

345
00:13:24,589 --> 00:13:27,050
called the repple that the read eval

346
00:13:27,050 --> 00:13:30,850
print loop it's it's a way that you can

347
00:13:30,850 --> 00:13:34,130
run more JavaScript on the fly in your

348
00:13:34,130 --> 00:13:37,940
server so I've got a example of a server

349
00:13:37,940 --> 00:13:44,630
that is modifiable and let me just get

350
00:13:44,630 --> 00:13:54,060
that going here why is not that exiting

351
00:13:54,070 --> 00:14:02,790
come on macbook there we go

352
00:14:02,800 --> 00:14:05,680
now I'm gonna do and Hawkwind on over

353
00:14:05,680 --> 00:14:18,830
here I'll cheese time to mirror

354
00:14:18,840 --> 00:14:23,870
okay great

355
00:14:23,880 --> 00:14:32,020
so let's just say you have a program

356
00:14:32,030 --> 00:14:34,470
well that's pretty big I hope you can

357
00:14:34,470 --> 00:14:36,450
see that so I wrote this little web

358
00:14:36,450 --> 00:14:38,400
server it's this stupid simple example

359
00:14:38,400 --> 00:14:40,530
but um it shows you how you can use a

360
00:14:40,530 --> 00:14:44,520
rebel to to sort of turn on a feature in

361
00:14:44,520 --> 00:14:48,420
a server that is not on all the time but

362
00:14:48,420 --> 00:14:49,800
it's sort of sitting there waiting to be

363
00:14:49,800 --> 00:14:51,600
turned on and then later you can turn it

364
00:14:51,600 --> 00:14:53,490
off so an example of why you might want

365
00:14:53,490 --> 00:14:54,810
to do this is you may want to turn on

366
00:14:54,810 --> 00:14:57,150
like special tracing if something

367
00:14:57,150 --> 00:14:59,190
matches a filter you know like a regular

368
00:14:59,190 --> 00:15:01,530
expression of the user you know log all

369
00:15:01,530 --> 00:15:03,060
the things that this user does or log

370
00:15:03,060 --> 00:15:04,920
all things from this IP address or you

371
00:15:04,920 --> 00:15:08,880
know something like that just some thing

372
00:15:08,880 --> 00:15:09,990
that you want to do that you don't

373
00:15:09,990 --> 00:15:11,520
always want to do but you don't know

374
00:15:11,520 --> 00:15:13,890
that you want to do it until it's too

375
00:15:13,890 --> 00:15:14,940
late and you would have to reach out the

376
00:15:14,940 --> 00:15:16,920
process so so here's a really simple

377
00:15:16,920 --> 00:15:19,230
little web server and let me show that

378
00:15:19,230 --> 00:15:21,810
in a second but the kind of new new to

379
00:15:21,810 --> 00:15:24,630
some people part is this rebel server so

380
00:15:24,630 --> 00:15:27,950
this opens it listens on a unix socket

381
00:15:27,950 --> 00:15:30,500
which is you know shows up as like a

382
00:15:30,500 --> 00:15:33,240
special file in your file system you can

383
00:15:33,240 --> 00:15:34,920
connect into it you can use a thing

384
00:15:34,920 --> 00:15:37,950
called so cat you can make it a listen

385
00:15:37,950 --> 00:15:39,210
on the network socket too if you want

386
00:15:39,210 --> 00:15:40,980
but if you do it is a eunuch socket then

387
00:15:40,980 --> 00:15:42,510
you're sure that you can only get to it

388
00:15:42,510 --> 00:15:43,770
while with access from the local file

389
00:15:43,770 --> 00:15:46,320
you know from the local computer so when

390
00:15:46,320 --> 00:15:48,150
you you get this rebel started you

391
00:15:48,150 --> 00:15:50,160
connect up to it you can just run java

392
00:15:50,160 --> 00:15:53,100
script commands and the things that are

393
00:15:53,100 --> 00:15:55,140
in your in the scope of this repple you

394
00:15:55,140 --> 00:15:56,580
can't have to initialize it with this

395
00:15:56,580 --> 00:15:59,280
context thing so I make a little object

396
00:15:59,280 --> 00:16:00,750
and you can just sort of hang stuff off

397
00:16:00,750 --> 00:16:02,820
it and so we made this little mjr object

398
00:16:02,820 --> 00:16:04,650
and we stick it in the context and then

399
00:16:04,650 --> 00:16:07,230
from the repple you can see anything

400
00:16:07,230 --> 00:16:09,420
that's on smjr object so a little later

401
00:16:09,420 --> 00:16:11,180
you know we have this counter and then

402
00:16:11,180 --> 00:16:13,950
I've got a little a special handler here

403
00:16:13,950 --> 00:16:17,960
called on rack and in the HTTP server

404
00:16:17,960 --> 00:16:21,690
let's take a look at that every request

405
00:16:21,690 --> 00:16:24,210
that comes in it checks to see if this

406
00:16:24,210 --> 00:16:26,850
on rack is set to a function if it is

407
00:16:26,850 --> 00:16:29,340
wrap it in a try-catch so you don't blow

408
00:16:29,340 --> 00:16:30,870
up your web server if that thing screws

409
00:16:30,870 --> 00:16:33,640
up and run it with with

410
00:16:33,640 --> 00:16:36,730
a request and response object I just you

411
00:16:36,730 --> 00:16:39,370
know super super simple example and so

412
00:16:39,370 --> 00:16:42,310
if we run that let's just kill run that

413
00:16:42,310 --> 00:16:47,050
a second oh and you probably can't see

414
00:16:47,050 --> 00:16:52,030
that can you that's too bad about this

415
00:16:52,030 --> 00:17:04,319
one

416
00:17:04,329 --> 00:17:13,360
okay oh come on do I have to do this to

417
00:17:13,360 --> 00:17:18,010
get it to override the colors okay so

418
00:17:18,010 --> 00:17:19,209
we've got our server here and it's

419
00:17:19,209 --> 00:17:20,860
waiting for requests and you can sort of

420
00:17:20,860 --> 00:17:24,819
you can see we hit it like that we get

421
00:17:24,819 --> 00:17:26,049
this little we get the Scylla Jason

422
00:17:26,049 --> 00:17:28,840
thing and okay great well you know

423
00:17:28,840 --> 00:17:31,600
that's that's fine it's been

424
00:17:31,600 --> 00:17:34,600
incrementing the the counter every time

425
00:17:34,600 --> 00:17:36,250
we hit the request so we can talk to

426
00:17:36,250 --> 00:17:39,370
this there's the socket here and this

427
00:17:39,370 --> 00:17:41,139
little special file here and you can

428
00:17:41,139 --> 00:17:42,750
talk to it with this thing called so cat

429
00:17:42,750 --> 00:17:50,590
and so now we can dump that that that

430
00:17:50,590 --> 00:17:53,190
mjr object we just type it in let's like

431
00:17:53,190 --> 00:17:56,080
the current value of that has has these

432
00:17:56,080 --> 00:17:58,029
things on it so you can run you know any

433
00:17:58,029 --> 00:17:59,260
JavaScript your leg if you haven't

434
00:17:59,260 --> 00:18:00,940
played with the repple like you totally

435
00:18:00,940 --> 00:18:03,700
showed its it's amazing but so here we

436
00:18:03,700 --> 00:18:05,529
can we can actually change one of these

437
00:18:05,529 --> 00:18:07,210
node processes and like make it do

438
00:18:07,210 --> 00:18:09,549
something else without taking it down so

439
00:18:09,549 --> 00:18:13,299
we can set MJ r dot on rec equals MJ r

440
00:18:13,299 --> 00:18:18,659
dot log wreck and then we have to go

441
00:18:18,659 --> 00:18:21,370
curl that again so server is still up

442
00:18:21,370 --> 00:18:24,669
and oh I made it throw an exception just

443
00:18:24,669 --> 00:18:26,380
to show you that you needed to forgot to

444
00:18:26,380 --> 00:18:32,799
put that back go back here they put the

445
00:18:32,799 --> 00:18:34,960
hell yeah it's down here yeah I wanted

446
00:18:34,960 --> 00:18:36,250
to see I wanted to make sure that if

447
00:18:36,250 --> 00:18:38,320
that thing through that it wouldn't take

448
00:18:38,320 --> 00:18:40,029
down the server or get you know screwed

449
00:18:40,029 --> 00:18:42,880
up in any way so it does all right I

450
00:18:42,880 --> 00:18:46,120
guess I should have tested that anyway

451
00:18:46,120 --> 00:18:48,669
now I am actually going to restart the

452
00:18:48,669 --> 00:18:49,720
server because it has to reread that

453
00:18:49,720 --> 00:18:52,059
value that with no exception in it

454
00:18:52,059 --> 00:18:55,690
anymore anyway so you get the idea like

455
00:18:55,690 --> 00:18:57,639
you can you can modify your running

456
00:18:57,639 --> 00:18:59,950
server I mean obviously you'd want to do

457
00:18:59,950 --> 00:19:02,460
this in a more sophisticated way but

458
00:19:02,460 --> 00:19:06,429
this this repple tool is a it's it's an

459
00:19:06,429 --> 00:19:08,620
essential way of tracking down these

460
00:19:08,620 --> 00:19:10,450
these crazy things that have accumulated

461
00:19:10,450 --> 00:19:12,250
stage because of course you can also

462
00:19:12,250 --> 00:19:14,230
just start poking around in objects you

463
00:19:14,230 --> 00:19:15,760
just have to expose them to the repple

464
00:19:15,760 --> 00:19:17,120
in advance like make

465
00:19:17,120 --> 00:19:20,030
sure that you expose anything you know

466
00:19:20,030 --> 00:19:22,430
most of where your app stores things all

467
00:19:22,430 --> 00:19:23,450
the state you're going to want to look

468
00:19:23,450 --> 00:19:25,790
at make sure it's exposed to the repple

469
00:19:25,790 --> 00:19:27,230
because you never know like what you're

470
00:19:27,230 --> 00:19:29,630
going to need later and you can when

471
00:19:29,630 --> 00:19:31,100
weird things are happening you can bring

472
00:19:31,100 --> 00:19:32,840
it up and you can just poke around and

473
00:19:32,840 --> 00:19:35,090
just see what's going on in there anyway

474
00:19:35,090 --> 00:19:43,470
that's all I have thanks

475
00:19:43,480 --> 00:19:53,810
any questions so you got a cluster

476
00:19:53,820 --> 00:19:57,190
sure something Thanks and something uh

477
00:19:57,190 --> 00:20:00,160
something bizarre is happening how do

478
00:20:00,160 --> 00:20:02,800
you on some requests how do you narrow

479
00:20:02,800 --> 00:20:05,620
it down to one of the one process on one

480
00:20:05,620 --> 00:20:07,420
machine too many techniques for that

481
00:20:07,420 --> 00:20:10,450
yeah I mean it sort of depends on how

482
00:20:10,450 --> 00:20:14,140
you found the problem to begin with I

483
00:20:14,140 --> 00:20:18,490
mean what what we do is you know we have

484
00:20:18,490 --> 00:20:22,180
the logs are aggregated and they're all

485
00:20:22,180 --> 00:20:23,620
kind of stamped with all that

486
00:20:23,620 --> 00:20:25,510
information so that the way in which you

487
00:20:25,510 --> 00:20:27,160
would notice that there was a problem

488
00:20:27,160 --> 00:20:29,590
was someone you know some log line came

489
00:20:29,590 --> 00:20:30,940
through that's like this is weird and it

490
00:20:30,940 --> 00:20:34,180
has the ID of the node that generated

491
00:20:34,180 --> 00:20:37,300
that that bad thing and you can sort of

492
00:20:37,300 --> 00:20:38,950
i think it's i think it's important by

493
00:20:38,950 --> 00:20:40,000
the way when you get your logs

494
00:20:40,000 --> 00:20:41,950
aggregated that you can see a unified

495
00:20:41,950 --> 00:20:44,170
timeline so you have like you know 100

496
00:20:44,170 --> 00:20:45,910
processes that are all kind of doing

497
00:20:45,910 --> 00:20:48,820
stuff they'll if they all can feed into

498
00:20:48,820 --> 00:20:50,920
at least a view you can filter it down

499
00:20:50,920 --> 00:20:53,110
to a view where it's like node one did

500
00:20:53,110 --> 00:20:55,090
this then no two did this you know like

501
00:20:55,090 --> 00:20:57,520
that because almost always there's some

502
00:20:57,520 --> 00:21:00,370
kind of weird interaction that you that

503
00:21:00,370 --> 00:21:01,930
the order is actually important you know

504
00:21:01,930 --> 00:21:04,210
like the timestamp in the node in order

505
00:21:04,210 --> 00:21:06,520
is it's pretty important I mean I don't

506
00:21:06,520 --> 00:21:09,760
know did that answer your question over

507
00:21:09,760 --> 00:21:12,130
here on your right so besides debugging

508
00:21:12,130 --> 00:21:13,570
a large cluster can you comment a little

509
00:21:13,570 --> 00:21:17,560
bit about just performance stability and

510
00:21:17,560 --> 00:21:19,450
what it's like to operate a large node

511
00:21:19,450 --> 00:21:21,760
cluster I am sorry I can't really hear

512
00:21:21,760 --> 00:21:23,350
that there's I really wait echo in here

513
00:21:23,350 --> 00:21:24,880
that's making it hard for me to come can

514
00:21:24,880 --> 00:21:27,130
you comment a little bit about stability

515
00:21:27,130 --> 00:21:30,040
and what it's like to operate a large

516
00:21:30,040 --> 00:21:32,320
node cluster compared to other sask

517
00:21:32,320 --> 00:21:34,180
ability like what what aspect of

518
00:21:34,180 --> 00:21:37,240
stability um memory do you find that

519
00:21:37,240 --> 00:21:39,220
note instances crashed you have to

520
00:21:39,220 --> 00:21:40,750
restart them periodically that kind of

521
00:21:40,750 --> 00:21:44,170
thing um yeah that's um that's been

522
00:21:44,170 --> 00:21:47,830
somewhat of an exciting adventure node

523
00:21:47,830 --> 00:21:51,520
it generally is really really good but

524
00:21:51,520 --> 00:21:53,920
it's very new and sometimes you find

525
00:21:53,920 --> 00:21:57,040
rough edges and you know they're things

526
00:21:57,040 --> 00:21:59,770
that don't show up under testing that

527
00:21:59,770 --> 00:22:02,110
only show up with real live production

528
00:22:02,110 --> 00:22:03,000
traffic

529
00:22:03,000 --> 00:22:07,320
that are weird yeah but I mean generally

530
00:22:07,320 --> 00:22:09,840
speaking like I'm still very optimistic

531
00:22:09,840 --> 00:22:13,170
i mean note is very very fast and the

532
00:22:13,170 --> 00:22:15,770
the programming model i think is is

533
00:22:15,770 --> 00:22:18,570
worth putting up with sort of these

534
00:22:18,570 --> 00:22:21,480
rough edges just to get all of that

535
00:22:21,480 --> 00:22:24,750
other awesome stuff but I mean you know

536
00:22:24,750 --> 00:22:27,210
generally speaking like it's no more

537
00:22:27,210 --> 00:22:29,460
buggy than any way of any other way you

538
00:22:29,460 --> 00:22:31,140
would write some server process like

539
00:22:31,140 --> 00:22:33,750
writing server processes izzy is

540
00:22:33,750 --> 00:22:36,390
difficult stuff you don't get to reload

541
00:22:36,390 --> 00:22:38,220
your you know like a web page can leak

542
00:22:38,220 --> 00:22:39,930
some memory or whatever but chances are

543
00:22:39,930 --> 00:22:41,310
you're going to leave that page anyway

544
00:22:41,310 --> 00:22:43,110
and it all gets cleaned up but a server

545
00:22:43,110 --> 00:22:44,990
has to run for a long time and so

546
00:22:44,990 --> 00:22:46,830
managing the resources in a long-running

547
00:22:46,830 --> 00:22:49,590
process it's a challenge in any language

548
00:22:49,590 --> 00:22:51,450
I mean I I think note does a pretty good

549
00:22:51,450 --> 00:22:52,920
job I think javascript is a pretty good

550
00:22:52,920 --> 00:22:54,870
choice the garbage collection say what

551
00:22:54,870 --> 00:22:56,610
you will about it but it saves you from

552
00:22:56,610 --> 00:22:59,550
from a lot of messes in in a

553
00:22:59,550 --> 00:23:04,970
long-running process all right so um

554
00:23:04,970 --> 00:23:07,860
we've been using a repeal to debug very

555
00:23:07,860 --> 00:23:10,140
complex note systems as well and one of

556
00:23:10,140 --> 00:23:12,420
the very cool tricks that I I found was

557
00:23:12,420 --> 00:23:15,150
that you can actually make a little bit

558
00:23:15,150 --> 00:23:17,130
of code that wraps a function and just

559
00:23:17,130 --> 00:23:19,680
passes it through because all the

560
00:23:19,680 --> 00:23:21,870
modules are global you can very easily

561
00:23:21,870 --> 00:23:24,450
target a particular export of a module

562
00:23:24,450 --> 00:23:27,060
and wrap it in a sort of like event call

563
00:23:27,060 --> 00:23:28,890
back so then you can hook runtime all

564
00:23:28,890 --> 00:23:30,300
these functions that you have in your

565
00:23:30,300 --> 00:23:33,330
note code right which is really cool for

566
00:23:33,330 --> 00:23:34,770
debugging because then you don't have to

567
00:23:34,770 --> 00:23:37,080
be so much upfront with your assumptions

568
00:23:37,080 --> 00:23:38,400
about what you exposed to the repple

569
00:23:38,400 --> 00:23:40,260
because the module space is global you

570
00:23:40,260 --> 00:23:43,400
can inspect it yeah yeah yeah I mean

571
00:23:43,400 --> 00:23:45,600
managing your access to the to the

572
00:23:45,600 --> 00:23:48,300
repple scope is pretty crucial like like

573
00:23:48,300 --> 00:23:50,910
somehow you need to get everything in

574
00:23:50,910 --> 00:23:52,860
there that you're going to need that you

575
00:23:52,860 --> 00:23:55,680
think you might need later just you know

576
00:23:55,680 --> 00:23:58,080
simply exposing it in there is nearly no

577
00:23:58,080 --> 00:24:00,030
overhead but if you don't have a handle

578
00:24:00,030 --> 00:24:03,360
to it you'll you will be sorry and yeah

579
00:24:03,360 --> 00:24:04,710
except mean exposing the whole module

580
00:24:04,710 --> 00:24:08,640
scope like great you get even access to

581
00:24:08,640 --> 00:24:13,920
even more stuff that way Matt thank you

582
00:24:13,920 --> 00:24:14,940
very much you're welcome

