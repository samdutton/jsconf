1
00:00:18,350 --> 00:00:21,770

I was a chalice program until two years

2
00:00:21,770 --> 00:00:27,290
ago and I enjoyed it actually but at

3
00:00:27,290 --> 00:00:29,119
that time I tried I'd like to make

4
00:00:29,119 --> 00:00:32,660
something else I'd i have done java for

5
00:00:32,660 --> 00:00:34,760
many years I thought I started dumped

6
00:00:34,760 --> 00:00:37,930
down I need some fresh spirit rent and

7
00:00:37,930 --> 00:00:40,870
at that time I had this nice title of

8
00:00:40,870 --> 00:00:44,809
IBM distinguish engineer and once at old

9
00:00:44,809 --> 00:00:47,830
IBM that I'd like to work for Microsoft

10
00:00:47,830 --> 00:00:51,230
within one day I became an extinguished

11
00:00:51,230 --> 00:00:54,949
engineer that's really cool actually

12
00:00:54,949 --> 00:00:57,559
because that means you're out of the

13
00:00:57,559 --> 00:01:00,379
building within one day which means you

14
00:01:00,379 --> 00:01:02,360
have time till the end of the work

15
00:01:02,360 --> 00:01:05,750
contract to do other stuff set three

16
00:01:05,750 --> 00:01:09,470
months to learn so what did I do to me

17
00:01:09,470 --> 00:01:12,710
three months I watched recordings from

18
00:01:12,710 --> 00:01:16,760
the chairs conference actual and I

19
00:01:16,760 --> 00:01:18,350
really liked them about one day I want

20
00:01:18,350 --> 00:01:20,570
to be on eddies conference but this

21
00:01:20,570 --> 00:01:23,030
Congress has always sold out right so I

22
00:01:23,030 --> 00:01:25,399
learned you have to talk there that you

23
00:01:25,399 --> 00:01:28,340
can get his conference of course now the

24
00:01:28,340 --> 00:01:30,469
problem is I had nothing right so I was

25
00:01:30,469 --> 00:01:32,869
a baby well we are still baby so I need

26
00:01:32,869 --> 00:01:34,520
at least two years to get some material

27
00:01:34,520 --> 00:01:36,740
to talk about and I see I hope today I

28
00:01:36,740 --> 00:01:42,870
have enough material to talk about so

29
00:01:42,880 --> 00:01:45,710
what I did and in this last two years

30
00:01:45,710 --> 00:01:49,250
now I built a small team in Zurich in

31
00:01:49,250 --> 00:01:51,560
good Mike's of tradition we have feature

32
00:01:51,560 --> 00:01:53,179
teams now with testers and program

33
00:01:53,179 --> 00:01:56,469
managers we're now eight developers and

34
00:01:56,469 --> 00:01:59,359
our focus is and dead what I found to

35
00:01:59,359 --> 00:02:02,210
challenge that hope to start my

36
00:02:02,210 --> 00:02:06,380
something down we work on online develop

37
00:02:06,380 --> 00:02:09,800
experiences so the ideas whenever you

38
00:02:09,800 --> 00:02:12,410
interact through a browser recode we'd

39
00:02:12,410 --> 00:02:14,510
like to have components for you right so

40
00:02:14,510 --> 00:02:16,010
we have a toolkit of components that

41
00:02:16,010 --> 00:02:18,380
allow to build coding experience in the

42
00:02:18,380 --> 00:02:20,390
browser and I can show you some of them

43
00:02:20,390 --> 00:02:24,440
which are shipping today which you might

44
00:02:24,440 --> 00:02:26,630
use are not right so for instance when

45
00:02:26,630 --> 00:02:28,400
it comes two teams of the right we have

46
00:02:28,400 --> 00:02:31,380
diff engines that show a diff

47
00:02:31,380 --> 00:02:34,980
we have to tab strip playground at this

48
00:02:34,980 --> 00:02:36,450
point I'd like to ask how many of you

49
00:02:36,450 --> 00:02:39,810
have heard of tab script excellent how

50
00:02:39,810 --> 00:02:41,760
many of you have played in tabs to

51
00:02:41,760 --> 00:02:45,990
playground I hope we fixed it today how

52
00:02:45,990 --> 00:02:49,110
many of you use tab script in in a

53
00:02:49,110 --> 00:02:54,540
project we work on that so the good

54
00:02:54,540 --> 00:02:56,010
thing is no tab script has been open

55
00:02:56,010 --> 00:02:58,740
source lost October so it's really a tab

56
00:02:58,740 --> 00:03:00,180
script plus the language services and

57
00:03:00,180 --> 00:03:02,250
open source and I think I write highly

58
00:03:02,250 --> 00:03:05,490
recommend try to play the taps key

59
00:03:05,490 --> 00:03:07,170
playground to learn what this language

60
00:03:07,170 --> 00:03:10,650
has to offer for you I think it uses

61
00:03:10,650 --> 00:03:12,540
some dirty words like classes modules

62
00:03:12,540 --> 00:03:16,500
and even interfaces 3 30 words but the

63
00:03:16,500 --> 00:03:19,470
goal is really to reduce develop stress

64
00:03:19,470 --> 00:03:22,500
and that's was my passion since I

65
00:03:22,500 --> 00:03:24,390
started writing code right I like to

66
00:03:24,390 --> 00:03:28,410
reduce the developer stress that's my j

67
00:03:28,410 --> 00:03:30,630
unit happen that's why patterns that's

68
00:03:30,630 --> 00:03:32,880
why clips now we want to liberate

69
00:03:32,880 --> 00:03:35,760
developers to have fun coding so the x 2

70
00:03:35,760 --> 00:03:37,620
playground is yet another component that

71
00:03:37,620 --> 00:03:40,800
is built on our stuff ok i will show you

72
00:03:40,800 --> 00:03:42,450
later briefly it's probably one of the

73
00:03:42,450 --> 00:03:43,890
most powerful playgrounds with

74
00:03:43,890 --> 00:03:45,570
refactoring support and all kinds of

75
00:03:45,570 --> 00:03:49,560
good stuff on a sure when you come to

76
00:03:49,560 --> 00:03:51,720
script editing we are used and for that

77
00:03:51,720 --> 00:03:53,310
i like to give you a quick demo that's

78
00:03:53,310 --> 00:03:54,570
the one which uses most of our

79
00:03:54,570 --> 00:03:57,150
components which using a workbench that

80
00:03:57,150 --> 00:04:00,240
you can do coding off and a an app that

81
00:04:00,240 --> 00:04:03,480
can put in the that you can put into at

82
00:04:03,480 --> 00:04:06,480
the marketplace what you can do and

83
00:04:06,480 --> 00:04:11,790
that's pretty cool for office 365 and

84
00:04:11,790 --> 00:04:14,190
that's the only time i do some microsoft

85
00:04:14,190 --> 00:04:18,840
product stuff but what you can do is you

86
00:04:18,840 --> 00:04:23,010
can write extensions for excel overt in

87
00:04:23,010 --> 00:04:27,150
html5 okay and for instance here i have

88
00:04:27,150 --> 00:04:30,120
written one which allows me to bubble

89
00:04:30,120 --> 00:04:33,030
some stock quotes right and that's the

90
00:04:33,030 --> 00:04:36,630
HTML which it which is extension i say

91
00:04:36,630 --> 00:04:38,670
bubble it will go to the net and show me

92
00:04:38,670 --> 00:04:42,229
all the stock quotes that's an okay

93
00:04:42,229 --> 00:04:44,430
dangerous exercise because it might be

94
00:04:44,430 --> 00:04:44,880
naked

95
00:04:44,880 --> 00:04:48,600
but it's not too bad today huh it's good

96
00:04:48,600 --> 00:04:50,490
so anyway so that's what you show what

97
00:04:50,490 --> 00:04:52,170
you can do but the point is not that the

98
00:04:52,170 --> 00:04:54,600
point is you can use html5 technology to

99
00:04:54,600 --> 00:04:57,780
do that and the point is to try this out

100
00:04:57,780 --> 00:04:59,220
you can do doll in the browser right

101
00:04:59,220 --> 00:05:00,300
that's the point that's the scenario

102
00:05:00,300 --> 00:05:02,250
getting started you want to try

103
00:05:02,250 --> 00:05:04,370
something you do it in the browser

104
00:05:04,370 --> 00:05:06,570
deployed if you like it you can upgrade

105
00:05:06,570 --> 00:05:08,760
to the full ID and I can quickly show

106
00:05:08,760 --> 00:05:20,700
you what you can do in the browser okay

107
00:05:20,710 --> 00:05:26,400
I'm confused but that's fine it's not it

108
00:05:26,400 --> 00:05:32,080
this PowerPoint come on don't drive me

109
00:05:32,080 --> 00:05:36,190
nuts here we go well okay so let me a

110
00:05:36,190 --> 00:05:38,230
people view but at least it's big enough

111
00:05:38,230 --> 00:05:40,390
so you see now that's the workbench it

112
00:05:40,390 --> 00:05:42,790
uses many of our kind of the toolkit of

113
00:05:42,790 --> 00:05:45,100
developer components and it shows his

114
00:05:45,100 --> 00:05:48,640
app is really html5 it has an HTML page

115
00:05:48,640 --> 00:05:51,160
which load several scripts which has

116
00:05:51,160 --> 00:05:55,330
some script logic right in the script I

117
00:05:55,330 --> 00:06:02,720
have normal stuff live Kull validation

118
00:06:02,730 --> 00:06:05,710
come on yeah you see squiggles all this

119
00:06:05,710 --> 00:06:13,480
stuff you have a reference searching who

120
00:06:13,480 --> 00:06:15,760
uses this stuff right you get it in

121
00:06:15,760 --> 00:06:24,760
place you have refactoring it's really

122
00:06:24,760 --> 00:06:26,380
challenging to live in this tight

123
00:06:26,380 --> 00:06:29,470
resolution but you see if refactoring

124
00:06:29,470 --> 00:06:33,450
all this kind of neat stuff you have

125
00:06:33,450 --> 00:06:36,280
navigation help and so on right you can

126
00:06:36,280 --> 00:06:41,230
navigate to stuff so it's pretty rich

127
00:06:41,230 --> 00:06:48,250
right it has outlining step stuff right

128
00:06:48,250 --> 00:06:51,100
things like that so this just to show

129
00:06:51,100 --> 00:06:52,930
you right it's pretty rich experience so

130
00:06:52,930 --> 00:06:54,400
we say even for getting started

131
00:06:54,400 --> 00:06:55,780
experience you want to be rich and you

132
00:06:55,780 --> 00:06:58,090
want to have a good coding experience

133
00:06:58,090 --> 00:07:01,240
with all the comfort develop comfort use

134
00:07:01,240 --> 00:07:04,480
from a browser so enough that's kind of

135
00:07:04,480 --> 00:07:08,920
the background let's go over and talk

136
00:07:08,920 --> 00:07:12,520
about what's behind it and how we grew

137
00:07:12,520 --> 00:07:16,000
into it and our journey actually started

138
00:07:16,000 --> 00:07:18,310
two years ago and we have grown in three

139
00:07:18,310 --> 00:07:20,320
stages right and the challenge is really

140
00:07:20,320 --> 00:07:23,620
how to become bigger and bigger and the

141
00:07:23,620 --> 00:07:26,020
approach you try to use is what i would

142
00:07:26,020 --> 00:07:28,240
call extreme triple extreme programming

143
00:07:28,240 --> 00:07:30,850
right which means we don't use some

144
00:07:30,850 --> 00:07:32,560
technology only until you

145
00:07:32,560 --> 00:07:35,139
we needed until it really hurts right we

146
00:07:35,139 --> 00:07:36,340
knew from the beginning yesterday's

147
00:07:36,340 --> 00:07:38,919
require Chester's AMD which is cool but

148
00:07:38,919 --> 00:07:41,380
we want to lean back and say let's wait

149
00:07:41,380 --> 00:07:43,389
till you reuse it and then we dive in

150
00:07:43,389 --> 00:07:45,160
right you want to feel the pain and then

151
00:07:45,160 --> 00:07:47,680
feel good afterwards so and that's the

152
00:07:47,680 --> 00:07:49,540
three stages know we have kind of small

153
00:07:49,540 --> 00:07:51,669
when we grew quickly to fifty thousand

154
00:07:51,669 --> 00:07:54,790
lines of code 100,000 and to debut two

155
00:07:54,790 --> 00:07:55,870
hundred thousand lines of code which you

156
00:07:55,870 --> 00:07:58,060
wrote ourselves plus test code with all

157
00:07:58,060 --> 00:07:59,380
the libraries right this goes much

158
00:07:59,380 --> 00:08:02,919
higher what I found interesting for each

159
00:08:02,919 --> 00:08:05,979
of these stages we have some patterns

160
00:08:05,979 --> 00:08:08,710
that we are alone to us so yes I confess

161
00:08:08,710 --> 00:08:11,169
that cannot get fully get away v

162
00:08:11,169 --> 00:08:13,600
patterns right in the smaller stage we

163
00:08:13,600 --> 00:08:15,850
really concerned about modules classes

164
00:08:15,850 --> 00:08:18,010
interfaces promises right how you manage

165
00:08:18,010 --> 00:08:20,139
callbacks interface i will talk more

166
00:08:20,139 --> 00:08:21,930
about that sounds a bit strange that

167
00:08:21,930 --> 00:08:25,360
interfaces are powerful way to tell

168
00:08:25,360 --> 00:08:29,740
others what expect and in particular it

169
00:08:29,740 --> 00:08:31,990
helps you define the shape of things and

170
00:08:31,990 --> 00:08:34,000
that's what it will show later models

171
00:08:34,000 --> 00:08:36,159
and classes every project has to think

172
00:08:36,159 --> 00:08:38,860
of which patterns they use for that in

173
00:08:38,860 --> 00:08:41,080
the small stage what is interesting we

174
00:08:41,080 --> 00:08:42,789
only use about ten percent of typescript

175
00:08:42,789 --> 00:08:46,720
because we had some concerns right we

176
00:08:46,720 --> 00:08:50,410
were the first adopters of typescript my

177
00:08:50,410 --> 00:08:52,240
we saw the promise you were skeptical

178
00:08:52,240 --> 00:08:54,120
that will lose the goodness of

179
00:08:54,120 --> 00:08:56,680
JavaScript right as i said no I

180
00:08:56,680 --> 00:09:00,100
transition from Java in Java one

181
00:09:00,100 --> 00:09:02,530
technology developed was we call j dojo

182
00:09:02,530 --> 00:09:04,839
which was a Java front end to the dojo

183
00:09:04,839 --> 00:09:07,690
widgets and while I liked it a lot in

184
00:09:07,690 --> 00:09:09,640
this three month right that I learned

185
00:09:09,640 --> 00:09:11,920
all the stuff this JavaScript community

186
00:09:11,920 --> 00:09:14,560
produced I learned I really don't want

187
00:09:14,560 --> 00:09:16,089
have a layer in between right I want a

188
00:09:16,089 --> 00:09:18,339
program as close to JavaScript as

189
00:09:18,339 --> 00:09:19,660
possible right I want to throw up

190
00:09:19,660 --> 00:09:24,459
closures whatever so for this reason we

191
00:09:24,459 --> 00:09:26,020
are live a concern and in particular our

192
00:09:26,020 --> 00:09:27,880
hardcore JavaScript members evil 3 in

193
00:09:27,880 --> 00:09:30,279
the beginning they say they were highly

194
00:09:30,279 --> 00:09:32,440
skeptical right why why do you want to

195
00:09:32,440 --> 00:09:34,990
do that so we started very slowly then

196
00:09:34,990 --> 00:09:37,810
we rarely dreamt ramped up at this point

197
00:09:37,810 --> 00:09:40,060
even after one year we had skeptics so

198
00:09:40,060 --> 00:09:42,190
our XX as why don't you go two hundred

199
00:09:42,190 --> 00:09:45,280
percent typescript I say well lots of

200
00:09:45,280 --> 00:09:46,390
blah blah but 10

201
00:09:46,390 --> 00:09:48,930
no two of my developers just resisted

202
00:09:48,930 --> 00:09:51,430
they didn't want to do it because they

203
00:09:51,430 --> 00:09:54,340
still thought JavaScript f fiving and so

204
00:09:54,340 --> 00:09:56,710
on is fast over them interestingly right

205
00:09:56,710 --> 00:09:58,120
we see today you up to one hundred

206
00:09:58,120 --> 00:10:00,490
percent which means these two hardcore

207
00:10:00,490 --> 00:10:02,620
guys they transition then I can show a

208
00:10:02,620 --> 00:10:05,050
little bit what's the story that lead

209
00:10:05,050 --> 00:10:07,870
led to death so other patterns no in the

210
00:10:07,870 --> 00:10:10,090
medium sized AMD lazy load the

211
00:10:10,090 --> 00:10:13,030
contributions components dependency

212
00:10:13,030 --> 00:10:15,040
injection which is really chava singh I

213
00:10:15,040 --> 00:10:17,500
thought I will never use that I hope I

214
00:10:17,500 --> 00:10:20,320
can rationalize why we do something in

215
00:10:20,320 --> 00:10:24,240
Java whirl to get to better testability

216
00:10:24,240 --> 00:10:27,340
so I wonder how many of you know tab

217
00:10:27,340 --> 00:10:33,730
script okay so I want to do two minutes

218
00:10:33,730 --> 00:10:36,190
quickly show tab script in action and

219
00:10:36,190 --> 00:10:39,430
then go on okay quick walkthrough it's

220
00:10:39,430 --> 00:10:41,080
in a playground you can all try it out

221
00:10:41,080 --> 00:10:43,570
the point is left tab script write

222
00:10:43,570 --> 00:10:46,150
JavaScript and the point is no top scrip

223
00:10:46,150 --> 00:10:48,400
is very close to JavaScript drive that's

224
00:10:48,400 --> 00:10:50,620
what's really important to us because as

225
00:10:50,620 --> 00:10:52,810
I said we don't want to have lots of

226
00:10:52,810 --> 00:10:54,310
layers in between JavaScript you want to

227
00:10:54,310 --> 00:10:56,920
appreciate the full power of JavaScript

228
00:10:56,920 --> 00:11:01,000
so I'm quickly to show that cap script

229
00:11:01,000 --> 00:11:03,580
is just JavaScript all right if you see

230
00:11:03,580 --> 00:11:05,530
that it's almost the same code that's

231
00:11:05,530 --> 00:11:08,380
just run to the typescript compiler it

232
00:11:08,380 --> 00:11:10,930
adds optional types all right you can

233
00:11:10,930 --> 00:11:13,000
type thing here and the cool thing is it

234
00:11:13,000 --> 00:11:15,490
does type inferencing which means you

235
00:11:15,490 --> 00:11:16,960
don't have to type everything because

236
00:11:16,960 --> 00:11:19,240
it's really smart and from a return

237
00:11:19,240 --> 00:11:21,010
value of a functional inverted type and

238
00:11:21,010 --> 00:11:23,050
so on to make it easy for you and many

239
00:11:23,050 --> 00:11:27,580
other nice tricks it has classes again

240
00:11:27,580 --> 00:11:30,610
very similar translation right to use

241
00:11:30,610 --> 00:11:34,780
prototypes closure and as I said you

242
00:11:34,780 --> 00:11:38,200
have older or the coolness in the in

243
00:11:38,200 --> 00:11:41,410
this playground you can do refactorings

244
00:11:41,410 --> 00:11:43,750
intelligence all the stuff that i showed

245
00:11:43,750 --> 00:11:45,700
before because it's the same kind of a

246
00:11:45,700 --> 00:11:48,640
component that we use you can use a

247
00:11:48,640 --> 00:11:52,330
multi cursor and whatever whatever you

248
00:11:52,330 --> 00:11:53,310
want

249
00:11:53,310 --> 00:12:00,240
all right okay so classes and of course

250
00:12:00,240 --> 00:12:04,080
there is modules didn't like that too

251
00:12:04,080 --> 00:12:10,320
much okay the modules and actually it's

252
00:12:10,320 --> 00:12:12,510
our own editor right so you see it

253
00:12:12,510 --> 00:12:14,730
around corners that's the sign that is

254
00:12:14,730 --> 00:12:16,589
our code editor we had four layers

255
00:12:16,589 --> 00:12:19,080
reason we like we like coat me race and

256
00:12:19,080 --> 00:12:20,430
so on but for this reason we had to

257
00:12:20,430 --> 00:12:24,440
write our own so that you have modules

258
00:12:24,440 --> 00:12:27,180
write the modules follow the standard

259
00:12:27,180 --> 00:12:28,560
module pattern you have a closure and

260
00:12:28,560 --> 00:12:30,450
the module object it captures what you

261
00:12:30,450 --> 00:12:34,500
export and as I said typescript is

262
00:12:34,500 --> 00:12:38,040
really close to JavaScript and you can

263
00:12:38,040 --> 00:12:39,870
in your blog on at the JavaScript level

264
00:12:39,870 --> 00:12:41,850
if you use tab script but still in the

265
00:12:41,850 --> 00:12:43,890
beginning I had the skeptics in my team

266
00:12:43,890 --> 00:12:49,490
as I said so let's go back to that and

267
00:12:49,490 --> 00:12:51,960
one interesting word I mentioned these

268
00:12:51,960 --> 00:12:55,320
interfaces right so I think kind of

269
00:12:55,320 --> 00:12:58,250
emulating some interfaces as a

270
00:12:58,250 --> 00:13:00,990
javascript in normal ways just doesn't

271
00:13:00,990 --> 00:13:02,550
make sense right because interfaces are

272
00:13:02,550 --> 00:13:05,250
really something more at the time before

273
00:13:05,250 --> 00:13:07,770
your own thing to do expressing and one

274
00:13:07,770 --> 00:13:09,780
of the wisest sentence i made i guess in

275
00:13:09,780 --> 00:13:10,890
this gang of four because i always

276
00:13:10,890 --> 00:13:12,060
program to an interface not

277
00:13:12,060 --> 00:13:14,400
implementations or interfaces I always

278
00:13:14,400 --> 00:13:16,770
like what's interesting in in typescript

279
00:13:16,770 --> 00:13:19,230
interfaces a much richer than just what

280
00:13:19,230 --> 00:13:20,880
you see here as a way to define the

281
00:13:20,880 --> 00:13:24,440
shape of a class right that's a typical

282
00:13:24,440 --> 00:13:26,460
interface to the shaft you find the

283
00:13:26,460 --> 00:13:27,930
shape of a class which signatures it

284
00:13:27,930 --> 00:13:29,790
does have it's still very useful right

285
00:13:29,790 --> 00:13:31,470
it's very useful because it allows me to

286
00:13:31,470 --> 00:13:34,200
check whether an implementation conforms

287
00:13:34,200 --> 00:13:35,910
to a particle interface and we have

288
00:13:35,910 --> 00:13:38,100
called many stupid box thanks to

289
00:13:38,100 --> 00:13:42,240
interface with this capability the good

290
00:13:42,240 --> 00:13:43,440
thing is interface are very powerful

291
00:13:43,440 --> 00:13:45,540
define the shape of things right so if

292
00:13:45,540 --> 00:13:47,190
you have an option or an option bag and

293
00:13:47,190 --> 00:13:49,020
object duties can describe the structure

294
00:13:49,020 --> 00:13:50,970
easily through an interface and to make

295
00:13:50,970 --> 00:13:53,550
it easy you can say what's optional its

296
00:13:53,550 --> 00:13:56,550
mandatory and he also uses a lot for

297
00:13:56,550 --> 00:13:58,230
describing chasing structures right if

298
00:13:58,230 --> 00:14:00,120
you see your lies Jason structures from

299
00:14:00,120 --> 00:14:02,550
deserve the decline we have a and a

300
00:14:02,550 --> 00:14:04,470
typescript interface that describes the

301
00:14:04,470 --> 00:14:06,220
structure what's optional mandatory

302
00:14:06,220 --> 00:14:08,020
when you get the chase and object after

303
00:14:08,020 --> 00:14:10,300
the pars weak acid interface you have

304
00:14:10,300 --> 00:14:12,220
intelligence to navigate through a JSON

305
00:14:12,220 --> 00:14:16,280
structure it's pretty powerful nice

306
00:14:16,290 --> 00:14:19,110
interfaces can also express and can be

307
00:14:19,110 --> 00:14:22,810
can be invoked which means you can also

308
00:14:22,810 --> 00:14:24,640
define the signature for callbacks in a

309
00:14:24,640 --> 00:14:26,410
compact way right so that says you have

310
00:14:26,410 --> 00:14:28,570
a measurement call back as the signature

311
00:14:28,570 --> 00:14:31,300
or you can also index them you can

312
00:14:31,300 --> 00:14:33,400
define how he acts as an object and if

313
00:14:33,400 --> 00:14:37,180
you what type of the index taxes is a

314
00:14:37,180 --> 00:14:38,890
string or number then you can say well

315
00:14:38,890 --> 00:14:40,810
you return again to the benefit once you

316
00:14:40,810 --> 00:14:43,750
do that you get intelligence and rich

317
00:14:43,750 --> 00:14:46,390
coding coding support by the tool

318
00:14:46,390 --> 00:14:49,210
because the tool knows what at a certain

319
00:14:49,210 --> 00:14:52,420
point will of the type is and very

320
00:14:52,420 --> 00:14:54,460
important you can use interface describe

321
00:14:54,460 --> 00:14:57,910
the shape of existing JavaScript code

322
00:14:57,910 --> 00:14:59,620
and that's very important because you

323
00:14:59,620 --> 00:15:01,630
only have to live or jQuery knock out

324
00:15:01,630 --> 00:15:03,670
whatever all the cool libraries that the

325
00:15:03,670 --> 00:15:06,310
community produced like Jamaa say one

326
00:15:06,310 --> 00:15:08,680
thing at this point these three months

327
00:15:08,680 --> 00:15:10,180
that I had time to really get into

328
00:15:10,180 --> 00:15:13,450
JavaScript and the transition from child

329
00:15:13,450 --> 00:15:15,130
to child script was my hardest language

330
00:15:15,130 --> 00:15:18,130
transition right at transition from C++

331
00:15:18,130 --> 00:15:20,050
to small talk from small to cook jawa

332
00:15:20,050 --> 00:15:21,820
navin child the javascript that was the

333
00:15:21,820 --> 00:15:23,650
hardest one and the reason is because

334
00:15:23,650 --> 00:15:25,450
the child's cocoon is so productive

335
00:15:25,450 --> 00:15:27,460
right they produce note she has to boost

336
00:15:27,460 --> 00:15:30,640
libraries interesting patterns like the

337
00:15:30,640 --> 00:15:34,450
Model Model View controller Model Model

338
00:15:34,450 --> 00:15:36,550
View you pattern and so on right so this

339
00:15:36,550 --> 00:15:39,070
was really what made me kind of swallow

340
00:15:39,070 --> 00:15:41,650
a lot to get up to speed but without

341
00:15:41,650 --> 00:15:43,390
make makes it very clear you need to

342
00:15:43,390 --> 00:15:45,550
have a way to describe all this existing

343
00:15:45,550 --> 00:15:47,440
libraries otherwise you don't get the

344
00:15:47,440 --> 00:15:50,140
coding comfort that I want because one

345
00:15:50,140 --> 00:15:52,480
thing I want to keep from Java I want to

346
00:15:52,480 --> 00:15:54,070
keep the coding comfort I had their

347
00:15:54,070 --> 00:15:56,320
right i want the intellisense I want

348
00:15:56,320 --> 00:15:58,270
refactoring I want find references

349
00:15:58,270 --> 00:16:03,220
that's just I didn't want to lose so now

350
00:16:03,220 --> 00:16:05,260
what how to use that and the nice

351
00:16:05,260 --> 00:16:10,390
example is to use the air for jquery so

352
00:16:10,390 --> 00:16:11,740
that's kind of another playground right

353
00:16:11,740 --> 00:16:13,870
once you have this toolkit of a coding

354
00:16:13,870 --> 00:16:15,730
compounds you can produce playgrounds as

355
00:16:15,730 --> 00:16:17,230
you like and this playground chose in

356
00:16:17,230 --> 00:16:19,510
the left some type definition file that

357
00:16:19,510 --> 00:16:19,930
just

358
00:16:19,930 --> 00:16:21,940
describes jquery on the right the sample

359
00:16:21,940 --> 00:16:24,100
of jquery code which would kind of it's

360
00:16:24,100 --> 00:16:26,440
a nice play right on the left you can

361
00:16:26,440 --> 00:16:29,020
add type definitions and then on the

362
00:16:29,020 --> 00:16:31,120
right you can experience how much how

363
00:16:31,120 --> 00:16:33,100
Rachel your coding experience begets

364
00:16:33,100 --> 00:16:35,710
right like I can do the dollar stuff I

365
00:16:35,710 --> 00:16:38,529
get intelligence and you all know the

366
00:16:38,529 --> 00:16:40,540
nice method chaining you can do with

367
00:16:40,540 --> 00:16:43,660
jquery right and so on a debts thanks to

368
00:16:43,660 --> 00:16:45,339
all these typedef news on the right and

369
00:16:45,339 --> 00:16:47,440
Shakespeare is very rich when it comes

370
00:16:47,440 --> 00:16:50,110
to coding comfort right they use lots of

371
00:16:50,110 --> 00:16:52,300
optional stuff like for instance you

372
00:16:52,300 --> 00:16:55,540
know that sooner the interface describe

373
00:16:55,540 --> 00:16:58,899
the a check the HX settings you see lots

374
00:16:58,899 --> 00:17:00,550
of stuff is optional but you can still

375
00:17:00,550 --> 00:17:01,870
express the structure get intelligence

376
00:17:01,870 --> 00:17:05,589
for it promises right the promised

377
00:17:05,589 --> 00:17:09,010
consumer the deferred aspect which is

378
00:17:09,010 --> 00:17:11,949
the provider after the promise it's all

379
00:17:11,949 --> 00:17:13,750
captures interfaces and once you do that

380
00:17:13,750 --> 00:17:16,300
you get this powerful intelligence

381
00:17:16,300 --> 00:17:18,670
behavior in the tool which would be very

382
00:17:18,670 --> 00:17:20,650
hard to do otherwise and let me just see

383
00:17:20,650 --> 00:17:23,140
how it's done right jquery static

384
00:17:23,140 --> 00:17:24,760
captures the dollar what you can go on

385
00:17:24,760 --> 00:17:26,920
the dollar and one important thing you

386
00:17:26,920 --> 00:17:28,929
can do on dollar is all these accesses

387
00:17:28,929 --> 00:17:30,970
through a selector through an element

388
00:17:30,970 --> 00:17:32,590
through a function and playing out

389
00:17:32,590 --> 00:17:34,330
different things happen and this all can

390
00:17:34,330 --> 00:17:35,890
be expressed through interfaces right

391
00:17:35,890 --> 00:17:39,040
okay so if you have done that what the

392
00:17:39,040 --> 00:17:41,320
powerful thing is you can describe these

393
00:17:41,320 --> 00:17:43,840
libraries and you get rich tooling

394
00:17:43,840 --> 00:17:45,700
support not even better there is a

395
00:17:45,700 --> 00:17:48,309
community now that does that okay and

396
00:17:48,309 --> 00:17:50,020
the cool thing is there's a whole

397
00:17:50,020 --> 00:17:52,360
project on github that does these type

398
00:17:52,360 --> 00:17:55,090
definitions for all the libraries right

399
00:17:55,090 --> 00:17:56,860
is this definitely typed libran github

400
00:17:56,860 --> 00:18:01,000
and it's very active and almost for any

401
00:18:01,000 --> 00:18:02,980
javascript library you will find

402
00:18:02,980 --> 00:18:05,350
corresponding type definitions and it's

403
00:18:05,350 --> 00:18:06,429
a very interesting to look at them

404
00:18:06,429 --> 00:18:08,110
because it really helps to expose what

405
00:18:08,110 --> 00:18:10,720
are what x do these libraries really do

406
00:18:10,720 --> 00:18:12,760
because you get lots of insights when

407
00:18:12,760 --> 00:18:13,960
you see that and you get much more

408
00:18:13,960 --> 00:18:15,850
insert and reading textual descriptions

409
00:18:15,850 --> 00:18:19,440
right because it's really in the code a

410
00:18:19,440 --> 00:18:21,400
ten-letter the next step so we have

411
00:18:21,400 --> 00:18:24,550
grown up we have used types of models

412
00:18:24,550 --> 00:18:26,620
classes you're use promises i cannot go

413
00:18:26,620 --> 00:18:28,480
in details which version use the problem

414
00:18:28,480 --> 00:18:30,400
is the menus of promises so you have to

415
00:18:30,400 --> 00:18:32,860
pick one we picked one and of course all

416
00:18:32,860 --> 00:18:33,670
the teams pick other

417
00:18:33,670 --> 00:18:35,650
which if you have to fund then when you

418
00:18:35,650 --> 00:18:37,660
combine the code we go to the next level

419
00:18:37,660 --> 00:18:39,520
we grew up to 100,000 lines of code and

420
00:18:39,520 --> 00:18:42,190
we felt we not else anymore right I

421
00:18:42,190 --> 00:18:44,350
always liked this metaphor of code

422
00:18:44,350 --> 00:18:46,420
fitness right when when when my code is

423
00:18:46,420 --> 00:18:49,360
fit I can run fast my code isn't fit I

424
00:18:49,360 --> 00:18:52,090
get slow and we felt that one on sounds

425
00:18:52,090 --> 00:18:54,190
lines we notice fit anymore because we

426
00:18:54,190 --> 00:18:56,890
cannot run that fast as you want so what

427
00:18:56,890 --> 00:18:59,200
are the pains points you had well the

428
00:18:59,200 --> 00:19:01,780
long list of scripts Peter Hagen showed

429
00:19:01,780 --> 00:19:03,730
that we had the same problem right not

430
00:19:03,730 --> 00:19:05,260
only have to manually this long list you

431
00:19:05,260 --> 00:19:06,760
have to also i have the right order and

432
00:19:06,760 --> 00:19:09,780
so on something is wrong here

433
00:19:09,780 --> 00:19:12,640
dependencies big problem right so module

434
00:19:12,640 --> 00:19:14,290
pattern makes you feel like you have

435
00:19:14,290 --> 00:19:16,540
modules but it's a very weak way to

436
00:19:16,540 --> 00:19:18,250
express the dependency right because a

437
00:19:18,250 --> 00:19:20,500
module is just an object and I can

438
00:19:20,500 --> 00:19:22,240
easily the property they're always open

439
00:19:22,240 --> 00:19:24,190
I can contribute the module from

440
00:19:24,190 --> 00:19:28,060
anywhere without any constraints right

441
00:19:28,060 --> 00:19:30,280
so and one of the things you know that

442
00:19:30,280 --> 00:19:32,380
is that our child script was rotting

443
00:19:32,380 --> 00:19:34,300
over time and the dependency graph

444
00:19:34,300 --> 00:19:35,800
looked really messy actually this is a

445
00:19:35,800 --> 00:19:37,150
comment I saw an email from yesterday

446
00:19:37,150 --> 00:19:39,490
which is not from our project but it

447
00:19:39,490 --> 00:19:41,350
shows right that's a problem managing

448
00:19:41,350 --> 00:19:43,240
dependencies in a large-scale project

449
00:19:43,240 --> 00:19:46,000
JavaScript project around 100,000 line

450
00:19:46,000 --> 00:19:48,040
that hurts so need to do something

451
00:19:48,040 --> 00:19:50,860
against it last but not least we're also

452
00:19:50,860 --> 00:19:53,110
growing pains because even so we had

453
00:19:53,110 --> 00:19:54,820
100,000 lines of code we don't want to

454
00:19:54,820 --> 00:19:56,890
load them on startup right when you have

455
00:19:56,890 --> 00:19:58,450
tools you have lots of optional stuff

456
00:19:58,450 --> 00:20:01,870
right when I when I edit when I don't

457
00:20:01,870 --> 00:20:05,110
edit a c-sharp file I don't want to load

458
00:20:05,110 --> 00:20:07,900
the c-sharp relate the code right I want

459
00:20:07,900 --> 00:20:09,850
to load it only when you actually do

460
00:20:09,850 --> 00:20:12,250
something with C sharp for instance so

461
00:20:12,250 --> 00:20:13,810
we had this problem now we had the Eagle

462
00:20:13,810 --> 00:20:16,740
loading our network tab with really ugly

463
00:20:16,740 --> 00:20:18,730
when you see that that's also good

464
00:20:18,730 --> 00:20:20,680
health exercise look at your network tab

465
00:20:20,680 --> 00:20:22,330
when you start your application browser

466
00:20:22,330 --> 00:20:24,490
we looked really ugly lots of requests

467
00:20:24,490 --> 00:20:28,030
lots of data transfer very unhappy am

468
00:20:28,030 --> 00:20:32,020
beaten rescue result already donated one

469
00:20:32,020 --> 00:20:33,970
or one function rules at all it's a very

470
00:20:33,970 --> 00:20:36,160
nice back actually it's a short spec one

471
00:20:36,160 --> 00:20:38,830
function but very rich one so in order

472
00:20:38,830 --> 00:20:40,060
to understand if you have to implement

473
00:20:40,060 --> 00:20:43,360
our own name d loader and it was really

474
00:20:43,360 --> 00:20:44,950
good and we still use our own loader

475
00:20:44,950 --> 00:20:47,430
because I'm give some flexibility

476
00:20:47,430 --> 00:20:51,840
that it's conforming to the spec so what

477
00:20:51,840 --> 00:20:54,150
does typescript offer to that what's

478
00:20:54,150 --> 00:20:57,360
nice our tab script they can extract

479
00:20:57,360 --> 00:20:59,730
kind of the details of the module

480
00:20:59,730 --> 00:21:01,650
definition from you basically in

481
00:21:01,650 --> 00:21:04,650
typescript you can write an external

482
00:21:04,650 --> 00:21:07,110
module statement that gives a path to

483
00:21:07,110 --> 00:21:09,300
the location of the module and then when

484
00:21:09,300 --> 00:21:11,580
you actually transpire it to JavaScript

485
00:21:11,580 --> 00:21:14,220
then you can say which module system

486
00:21:14,220 --> 00:21:15,780
you're using and depending that it will

487
00:21:15,780 --> 00:21:19,770
generate different require statements or

488
00:21:19,770 --> 00:21:21,690
define statements for you so that's very

489
00:21:21,690 --> 00:21:23,970
nice and we found that very handy

490
00:21:23,970 --> 00:21:26,790
because this define statement can become

491
00:21:26,790 --> 00:21:30,270
hard to manage when you have 20 imports

492
00:21:30,270 --> 00:21:32,250
like you have to count all the time and

493
00:21:32,250 --> 00:21:36,960
taps kit makes it kind of nicer but

494
00:21:36,960 --> 00:21:38,790
still we use bows at time time right we

495
00:21:38,790 --> 00:21:40,740
convert our code in JavaScript and it

496
00:21:40,740 --> 00:21:42,300
types creepy word intensive with the

497
00:21:42,300 --> 00:21:44,730
typescript him at this time to get kind

498
00:21:44,730 --> 00:21:47,520
of the support for the module systems in

499
00:21:47,520 --> 00:21:50,490
so that we can really kind of use them

500
00:21:50,490 --> 00:21:53,610
with comfort for what we did the other

501
00:21:53,610 --> 00:21:55,560
challenge we have is you want to support

502
00:21:55,560 --> 00:21:57,570
a la carte consumption right so that's

503
00:21:57,570 --> 00:21:59,520
really nice with AMD because of AMD the

504
00:21:59,520 --> 00:22:01,710
code knows its dependencies and you know

505
00:22:01,710 --> 00:22:03,900
we get many external customers and they

506
00:22:03,900 --> 00:22:05,220
won't have different pieces from our

507
00:22:05,220 --> 00:22:07,710
toolbox so the nice thing with AMD you

508
00:22:07,710 --> 00:22:09,900
can pull out anything and things that

509
00:22:09,900 --> 00:22:11,940
each thing knows its dependency you know

510
00:22:11,940 --> 00:22:14,700
we get everything you need one missing

511
00:22:14,700 --> 00:22:17,250
piece we found was CSS right if you

512
00:22:17,250 --> 00:22:19,080
won't have self content modules you

513
00:22:19,080 --> 00:22:20,550
wanted the CSS when you pull one

514
00:22:20,550 --> 00:22:23,340
component out comes with it as well so

515
00:22:23,340 --> 00:22:25,410
for this reason OMG allows you to

516
00:22:25,410 --> 00:22:27,780
support the two so we had an e/m below

517
00:22:27,780 --> 00:22:30,510
the plugin for CSS which we also can

518
00:22:30,510 --> 00:22:34,290
hint to tab script transpiler using a

519
00:22:34,290 --> 00:22:36,540
pragma that tells actually in this this

520
00:22:36,540 --> 00:22:38,940
class uses the CSS class which includes

521
00:22:38,940 --> 00:22:41,010
the images and so on the cool thing

522
00:22:41,010 --> 00:22:41,910
about that is really hefty

523
00:22:41,910 --> 00:22:44,070
self-contained modules right you can

524
00:22:44,070 --> 00:22:45,540
just pull them out if you don't want a

525
00:22:45,540 --> 00:22:47,490
component you can drop but you will not

526
00:22:47,490 --> 00:22:51,570
get it at all okay that's all so much my

527
00:22:51,570 --> 00:22:54,090
favorite slide in Eclipse the problem is

528
00:22:54,090 --> 00:22:56,220
how we scale up BFF lots of code and the

529
00:22:56,220 --> 00:22:58,080
pattern here is lazy loading of

530
00:22:58,080 --> 00:23:00,880
contributions people contribute to you

531
00:23:00,880 --> 00:23:02,740
but of course just because they can't

532
00:23:02,740 --> 00:23:04,600
you to you doesn't mean you on a load at

533
00:23:04,600 --> 00:23:08,770
all and what did it was different this

534
00:23:08,770 --> 00:23:11,230
time than an eclipse we still use this

535
00:23:11,230 --> 00:23:13,150
contribution pattern by saying you use

536
00:23:13,150 --> 00:23:15,250
play the confusion two parts one is the

537
00:23:15,250 --> 00:23:17,140
top of the iceberg the visible part and

538
00:23:17,140 --> 00:23:19,120
the visual part is what you always load

539
00:23:19,120 --> 00:23:21,760
right the one which you need so that it

540
00:23:21,760 --> 00:23:24,940
can function and deal and play as if the

541
00:23:24,940 --> 00:23:28,330
component is loaded and what we do is we

542
00:23:28,330 --> 00:23:30,460
use JavaScript to describe the component

543
00:23:30,460 --> 00:23:32,620
javascript is very powerful so we didn't

544
00:23:32,620 --> 00:23:36,070
want to use XML and we like to also get

545
00:23:36,070 --> 00:23:37,750
much better because your intelligence or

546
00:23:37,750 --> 00:23:40,660
validation whatever so here we describe

547
00:23:40,660 --> 00:23:42,250
the component in this case it's the

548
00:23:42,250 --> 00:23:44,710
c-sharp a language mode language service

549
00:23:44,710 --> 00:23:47,320
it says loaded when you load a file of

550
00:23:47,320 --> 00:23:50,680
type C sharp you describe which module

551
00:23:50,680 --> 00:23:52,690
to load and which class instantiate

552
00:23:52,690 --> 00:23:54,910
that's how it works and that's kind of

553
00:23:54,910 --> 00:23:57,760
the tip of the iceberg and once the file

554
00:23:57,760 --> 00:24:00,160
of this type is loaded then the code

555
00:24:00,160 --> 00:24:04,120
below is loaded thanks to the AMD

556
00:24:04,120 --> 00:24:06,490
require call that allows the local

557
00:24:06,490 --> 00:24:09,010
dynamically and it can then load the

558
00:24:09,010 --> 00:24:11,320
lots lots of code only on demand and

559
00:24:11,320 --> 00:24:12,940
either way this is how we can scale up

560
00:24:12,940 --> 00:24:15,640
and and you live in many places right if

561
00:24:15,640 --> 00:24:18,610
some we have used different views we

562
00:24:18,610 --> 00:24:20,170
only note use when did the first and

563
00:24:20,170 --> 00:24:21,670
become visible we don't load them up

564
00:24:21,670 --> 00:24:24,100
front and sang to the self containers of

565
00:24:24,100 --> 00:24:26,500
CSS and everything together everything

566
00:24:26,500 --> 00:24:29,200
comes with a contribution in one one

567
00:24:29,200 --> 00:24:32,680
swoop well that's interesting after this

568
00:24:32,680 --> 00:24:34,390
migration it was hard to I must say this

569
00:24:34,390 --> 00:24:36,900
took us two months to migrate our code

570
00:24:36,900 --> 00:24:39,160
because well yeah it was leave it messy

571
00:24:39,160 --> 00:24:41,140
dependencies were messy we had to remove

572
00:24:41,140 --> 00:24:43,030
many cycles we had altered organize a

573
00:24:43,030 --> 00:24:45,250
directory structure which I found is a

574
00:24:45,250 --> 00:24:46,690
common problem in large JavaScript

575
00:24:46,690 --> 00:24:48,760
project right directory structure is

576
00:24:48,760 --> 00:24:51,220
kind of random but the good thing is

577
00:24:51,220 --> 00:24:52,990
afterwards and kind of all alex is a

578
00:24:52,990 --> 00:24:55,060
local developer he says he really feels

579
00:24:55,060 --> 00:24:58,120
like fresh shower that's a good sign and

580
00:24:58,120 --> 00:25:00,700
we also felt we can run fast again our

581
00:25:00,700 --> 00:25:03,250
fitness was good again and we can go on

582
00:25:03,250 --> 00:25:05,740
right we have normal cycles normal

583
00:25:05,740 --> 00:25:08,110
Global's and everything with explicit

584
00:25:08,110 --> 00:25:11,760
dependencies you feel good after that

585
00:25:11,760 --> 00:25:13,530
well they have still drone further right

586
00:25:13,530 --> 00:25:15,900
as usual when the Patek if you do soft

587
00:25:15,900 --> 00:25:18,600
the tools they will always grow and now

588
00:25:18,600 --> 00:25:19,920
comes the next step to one hundred

589
00:25:19,920 --> 00:25:22,530
percent typescript what did you do there

590
00:25:22,530 --> 00:25:25,170
so we are into other limitations the

591
00:25:25,170 --> 00:25:27,900
first one was our hardcore JavaScript

592
00:25:27,900 --> 00:25:30,090
programmer felt he starts to feel like

593
00:25:30,090 --> 00:25:31,920
writing JavaScript code from feels like

594
00:25:31,920 --> 00:25:34,320
carving code in stone but he wrote the

595
00:25:34,320 --> 00:25:36,750
editor and he really felt when he wants

596
00:25:36,750 --> 00:25:38,790
to refactor and JavaScript at a hard

597
00:25:38,790 --> 00:25:41,340
time and he had to refactor a property

598
00:25:41,340 --> 00:25:44,160
called ID and teach us that I die unless

599
00:25:44,160 --> 00:25:47,700
I really know where this is used

600
00:25:47,700 --> 00:25:50,330
precisely so he asked me can I have this

601
00:25:50,330 --> 00:25:53,430
kind of time to convert directed

602
00:25:53,430 --> 00:25:55,560
typescript and I this in this way we got

603
00:25:55,560 --> 00:25:57,300
from fifty percent to one hundred

604
00:25:57,300 --> 00:26:00,510
percent so this austere you're growing

605
00:26:00,510 --> 00:26:02,550
pain right that he could really lost our

606
00:26:02,550 --> 00:26:05,640
chili to change code the tooling slowed

607
00:26:05,640 --> 00:26:07,440
down because when we transpire lots of

608
00:26:07,440 --> 00:26:09,360
code two hundred thousand lines even a

609
00:26:09,360 --> 00:26:11,940
fast compiler takes a while and you also

610
00:26:11,940 --> 00:26:13,320
find this coupling thing I would

611
00:26:13,320 --> 00:26:15,090
testability went down because some of

612
00:26:15,090 --> 00:26:18,210
our high-level objects they have

613
00:26:18,210 --> 00:26:20,520
dependencies on depends on services when

614
00:26:20,520 --> 00:26:22,350
you write a test you have to instantiate

615
00:26:22,350 --> 00:26:25,440
lots of other objects right and this is

616
00:26:25,440 --> 00:26:27,390
really kind of this Java pattern of

617
00:26:27,390 --> 00:26:29,550
dependency injection that allows you

618
00:26:29,550 --> 00:26:31,320
from the outside to inject different

619
00:26:31,320 --> 00:26:32,730
implementation of services so that

620
00:26:32,730 --> 00:26:35,340
control what is instantiated and you can

621
00:26:35,340 --> 00:26:37,830
also get a lot of configuration

622
00:26:37,830 --> 00:26:44,280
configure configuration flexibility so

623
00:26:44,280 --> 00:26:46,380
okay I had slide so just to get a feel

624
00:26:46,380 --> 00:26:48,750
that cleanup from venom amendment two

625
00:26:48,750 --> 00:26:50,340
hundred percent typescript we got a kind

626
00:26:50,340 --> 00:26:51,960
of a speed of thread lines of coke per

627
00:26:51,960 --> 00:26:53,790
hour which is not a lot but it's

628
00:26:53,790 --> 00:26:55,320
explained because you really clean up

629
00:26:55,320 --> 00:26:57,690
stuff right it is dr objects you add

630
00:26:57,690 --> 00:26:59,910
interfaces to capture the structure use

631
00:26:59,910 --> 00:27:02,010
and even a highly disapprove developer

632
00:27:02,010 --> 00:27:05,160
he found no as you're just uses objects

633
00:27:05,160 --> 00:27:07,470
in JavaScript he uses different formats

634
00:27:07,470 --> 00:27:09,720
and he wasn't consistent but once he

635
00:27:09,720 --> 00:27:12,060
could express the structure the objects

636
00:27:12,060 --> 00:27:13,620
they had therefore he flows around his

637
00:27:13,620 --> 00:27:16,230
system he could make it consistent those

638
00:27:16,230 --> 00:27:18,740
are cool thing

639
00:27:18,740 --> 00:27:21,030
compensation is another thing right at

640
00:27:21,030 --> 00:27:22,560
some point you say well we don't want

641
00:27:22,560 --> 00:27:24,420
have all the code treated like it's our

642
00:27:24,420 --> 00:27:26,580
source code I just work with it I don't

643
00:27:26,580 --> 00:27:29,730
I use it but I don't need to change it

644
00:27:29,730 --> 00:27:31,650
right and you need to have some way of

645
00:27:31,650 --> 00:27:33,390
compensation which means you're treated

646
00:27:33,390 --> 00:27:35,550
as a binary component and fortunate a

647
00:27:35,550 --> 00:27:37,860
script supports that and this is how you

648
00:27:37,860 --> 00:27:39,900
use the typescript compiler for instance

649
00:27:39,900 --> 00:27:42,090
we treat it as a binary component that

650
00:27:42,090 --> 00:27:45,090
we just slurp in as JavaScript code

651
00:27:45,090 --> 00:27:48,030
without having to recompile it every

652
00:27:48,030 --> 00:27:50,160
time and there's a compiler option that

653
00:27:50,160 --> 00:27:51,300
allows you to generate these

654
00:27:51,300 --> 00:27:53,910
declarations the interfaces that capture

655
00:27:53,910 --> 00:27:57,140
the shape of the classes in this

656
00:27:57,140 --> 00:28:01,080
component dependency injection I don't

657
00:28:01,080 --> 00:28:03,420
want to talk too much about that it's

658
00:28:03,420 --> 00:28:06,750
some scat helped us because now we found

659
00:28:06,750 --> 00:28:08,490
we use kind of some common services and

660
00:28:08,490 --> 00:28:09,840
we don't want instantiate that so you

661
00:28:09,840 --> 00:28:12,150
identify the services create interfaces

662
00:28:12,150 --> 00:28:14,400
for them and then we inject them into

663
00:28:14,400 --> 00:28:18,860
the code for some high-level objects

664
00:28:18,860 --> 00:28:22,650
last point just as i speak the tab

665
00:28:22,650 --> 00:28:24,390
scriptum is actually working eagerly on

666
00:28:24,390 --> 00:28:26,550
getting the 0.9 Oliza which is a very

667
00:28:26,550 --> 00:28:28,790
important milestone for them towards 10

668
00:28:28,790 --> 00:28:32,130
and the big achievements in this release

669
00:28:32,130 --> 00:28:34,740
is to edit generics which makes you

670
00:28:34,740 --> 00:28:36,780
gives you more power to describe things

671
00:28:36,780 --> 00:28:38,730
like ferns you can describe the map

672
00:28:38,730 --> 00:28:40,200
function right the map function is

673
00:28:40,200 --> 00:28:42,570
interesting because you pass in a

674
00:28:42,570 --> 00:28:45,180
function which returns a value and the

675
00:28:45,180 --> 00:28:49,770
resulting type of your a depends on

676
00:28:49,770 --> 00:28:51,300
return value of the function and now we

677
00:28:51,300 --> 00:28:54,810
can describe that in typescript so which

678
00:28:54,810 --> 00:28:56,610
means you get richer intellisense even

679
00:28:56,610 --> 00:29:00,120
in this case and the compilers in your

680
00:29:00,120 --> 00:29:01,920
architecture which should make it scale

681
00:29:01,920 --> 00:29:04,830
better for very large projects so our

682
00:29:04,830 --> 00:29:08,240
retrospective we were skeptical

683
00:29:08,240 --> 00:29:10,800
initially evensen we also Microsoft very

684
00:29:10,800 --> 00:29:12,510
skeptical because we didn't want to lose

685
00:29:12,510 --> 00:29:14,280
the JavaScript field we didn't want to

686
00:29:14,280 --> 00:29:18,600
use the JavaScript closeness but in the

687
00:29:18,600 --> 00:29:20,460
end I think it paid out for us we feel

688
00:29:20,460 --> 00:29:23,610
we are BF it again we can run fast so we

689
00:29:23,610 --> 00:29:26,910
would do it again and in fact this time

690
00:29:26,910 --> 00:29:29,490
we would start with typescript and AMD

691
00:29:29,490 --> 00:29:30,910
from the beginning

692
00:29:30,910 --> 00:29:35,270
so that's our conclusion and my point

693
00:29:35,270 --> 00:29:37,460
here is really this is open source give

694
00:29:37,460 --> 00:29:40,550
it a try it helped us to increase our

695
00:29:40,550 --> 00:29:43,010
developer comfort I hope maybe it helps

696
00:29:43,010 --> 00:30:00,180
you too okay thank you

