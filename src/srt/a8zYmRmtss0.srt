1
00:00:06,529 --> 00:00:08,760

awesome thank you so much for having me

2
00:00:08,760 --> 00:00:11,040
it's fantastic it's actually my first

3
00:00:11,040 --> 00:00:13,259
talk that I do my first Tech Talk that I

4
00:00:13,259 --> 00:00:15,599
do in Asia so I'm really really keen to

5
00:00:15,599 --> 00:00:18,330
get your feedback as I already got

6
00:00:18,330 --> 00:00:20,640
introduced my name is Timothy Schmidt we

7
00:00:20,640 --> 00:00:22,470
probably long as the most German name

8
00:00:22,470 --> 00:00:25,320
you will ever see in your life and I

9
00:00:25,320 --> 00:00:27,269
think Thomas made a good kind of

10
00:00:27,269 --> 00:00:29,099
approach over here there can be only one

11
00:00:29,099 --> 00:00:31,199
German evangelist per conference day

12
00:00:31,199 --> 00:00:33,030
because otherwise that's kind of too

13
00:00:33,030 --> 00:00:37,230
much my topic today is no J's

14
00:00:37,230 --> 00:00:39,510
application and data security which

15
00:00:39,510 --> 00:00:42,300
means I'm going to go a bit into kind of

16
00:00:42,300 --> 00:00:44,399
the key problems that we as developers

17
00:00:44,399 --> 00:00:46,890
face when we implement authentication

18
00:00:46,890 --> 00:00:49,140
systems when we have to deal with data

19
00:00:49,140 --> 00:00:51,660
hardening this key stretching with

20
00:00:51,660 --> 00:00:53,280
public key private key encryption

21
00:00:53,280 --> 00:00:56,430
mechanisms hashing and I talked about a

22
00:00:56,430 --> 00:00:58,649
few of those kind of learnings that I've

23
00:00:58,649 --> 00:01:00,960
seen when we looked at different

24
00:01:00,960 --> 00:01:04,470
companies that's deal with this so I

25
00:01:04,470 --> 00:01:06,720
work for Braintree which is part of

26
00:01:06,720 --> 00:01:10,110
PayPal and Braintree is a payments

27
00:01:10,110 --> 00:01:11,820
company that deals with a lot of mobile

28
00:01:11,820 --> 00:01:14,640
payments but still obviously PayPal as a

29
00:01:14,640 --> 00:01:16,979
bigger corporate deals with a huge huge

30
00:01:16,979 --> 00:01:18,509
infrastructure which actually runs

31
00:01:18,509 --> 00:01:20,939
mostly on OJ's nowadays so that's where

32
00:01:20,939 --> 00:01:24,240
my interest comes from a few words about

33
00:01:24,240 --> 00:01:27,060
myself because before I get started you

34
00:01:27,060 --> 00:01:29,820
can find me on Twitter that's me

35
00:01:29,820 --> 00:01:31,979
I used to be a developer actually coming

36
00:01:31,979 --> 00:01:33,659
from a mobile background so I used to

37
00:01:33,659 --> 00:01:35,549
work on Windows Mobile and that stuff

38
00:01:35,549 --> 00:01:38,700
and it actually still existed I earned

39
00:01:38,700 --> 00:01:41,430
money working for Samsung as a kernel

40
00:01:41,430 --> 00:01:44,100
developer for android and i'm actually

41
00:01:44,100 --> 00:01:46,680
offering a book on node.js security at

42
00:01:46,680 --> 00:01:48,600
the moment with o'reilly and i've been

43
00:01:48,600 --> 00:01:50,579
evangelizing for companies for more than

44
00:01:50,579 --> 00:01:53,220
five years so you probably saw me at

45
00:01:53,220 --> 00:01:55,189
some mobile event or something like that

46
00:01:55,189 --> 00:01:59,030
I live in the beautiful town of Berlin

47
00:01:59,030 --> 00:02:02,070
which is always worth the trip so I can

48
00:02:02,070 --> 00:02:04,860
only but recommend going there but since

49
00:02:04,860 --> 00:02:07,200
I evangelize in a global team and I run

50
00:02:07,200 --> 00:02:08,050
the

51
00:02:08,050 --> 00:02:11,020
European and Asian team for us I kind of

52
00:02:11,020 --> 00:02:13,660
live a van at an airport so probably if

53
00:02:13,660 --> 00:02:15,310
you ever seen a Berlin airplane there's

54
00:02:15,310 --> 00:02:16,690
a good chance that I actually sit in

55
00:02:16,690 --> 00:02:18,490
there and there is like a secret

56
00:02:18,490 --> 00:02:20,170
handshake between all of us Everland

57
00:02:20,170 --> 00:02:23,980
frequent fliers all three of us so if

58
00:02:23,980 --> 00:02:26,430
you ever see one of us think of me

59
00:02:26,430 --> 00:02:30,310
alright so again brain is a paper

60
00:02:30,310 --> 00:02:33,640
company got acquired in 2013 and our

61
00:02:33,640 --> 00:02:35,230
developer facing side is pretty much

62
00:02:35,230 --> 00:02:38,200
Braintree so let's dive into the talk

63
00:02:38,200 --> 00:02:41,410
today I as I said before I dive into a

64
00:02:41,410 --> 00:02:43,360
few different things and I want to start

65
00:02:43,360 --> 00:02:45,820
with a very simple analogy then I go

66
00:02:45,820 --> 00:02:47,590
into a couple of different security

67
00:02:47,590 --> 00:02:49,870
threats that we see over and over again

68
00:02:49,870 --> 00:02:53,770
and then I want to go into data

69
00:02:53,770 --> 00:02:56,980
encryption obviously since Express is

70
00:02:56,980 --> 00:02:58,600
still kind of a weapon of choice for

71
00:02:58,600 --> 00:03:00,670
most know developers I go into how we

72
00:03:00,670 --> 00:03:03,300
deal with making express more secure and

73
00:03:03,300 --> 00:03:06,100
how we kind of work on a more defensive

74
00:03:06,100 --> 00:03:08,710
kind of coding approach I also go a bit

75
00:03:08,710 --> 00:03:11,620
into Khoa I talk about middleware and

76
00:03:11,620 --> 00:03:13,209
then I point out a couple of really

77
00:03:13,209 --> 00:03:14,800
awesome resources that help me

78
00:03:14,800 --> 00:03:16,450
researching this talk and that helped me

79
00:03:16,450 --> 00:03:20,140
researching for my book as well I want

80
00:03:20,140 --> 00:03:22,180
to start off with an analogy that I love

81
00:03:22,180 --> 00:03:24,280
I used to be I'm actually still a geek

82
00:03:24,280 --> 00:03:26,890
but I used to be a huge geek for kind of

83
00:03:26,890 --> 00:03:29,440
mythology and history and all that stuff

84
00:03:29,440 --> 00:03:31,540
when I was growing up anyone in this

85
00:03:31,540 --> 00:03:34,230
room recognizes this handsome young man

86
00:03:34,230 --> 00:03:36,570
just raise your hand if you do that all

87
00:03:36,570 --> 00:03:40,300
right awesome so the person that you see

88
00:03:40,300 --> 00:03:43,750
on this image which is an image from

89
00:03:43,750 --> 00:03:46,209
more than thousand years before Christ

90
00:03:46,209 --> 00:03:51,100
is Hercules or Heracles which used to be

91
00:03:51,100 --> 00:03:53,950
a demigod a half guard vision of Zeus

92
00:03:53,950 --> 00:04:01,510
and a simple woman and the issue was the

93
00:04:01,510 --> 00:04:05,500
stepmother of Hercules drove him mad

94
00:04:05,500 --> 00:04:09,160
so he did a lot of bad stuff he killed a

95
00:04:09,160 --> 00:04:10,330
couple of people that he shouldn't have

96
00:04:10,330 --> 00:04:12,459
killed and so on he wanted to do get

97
00:04:12,459 --> 00:04:14,470
Redemption he wanted to be redeemed and

98
00:04:14,470 --> 00:04:16,960
wanted to kind of save

99
00:04:16,960 --> 00:04:20,590
via limps make everything up what he did

100
00:04:20,590 --> 00:04:22,690
so they gave him a couple of different

101
00:04:22,690 --> 00:04:25,210
tasks to kind of make up for his work

102
00:04:25,210 --> 00:04:28,320
which is known as me twelve labors and

103
00:04:28,320 --> 00:04:32,440
one of those tasks was killing a Hydra

104
00:04:32,440 --> 00:04:34,540
if you don't know hydras they are huge

105
00:04:34,540 --> 00:04:36,490
badass snakes with a lot of different

106
00:04:36,490 --> 00:04:38,860
hats if you chop off her head a new head

107
00:04:38,860 --> 00:04:41,050
grows so that's kind of unhandy right

108
00:04:41,050 --> 00:04:44,470
because it's really hard to deal with so

109
00:04:44,470 --> 00:04:46,900
Hercules had this big mace over there

110
00:04:46,900 --> 00:04:48,940
that you see in his hand and he but I

111
00:04:48,940 --> 00:04:51,130
like punched the Hydra and tried to kill

112
00:04:51,130 --> 00:04:53,650
it but big heads keep on growing and

113
00:04:53,650 --> 00:04:55,930
growing and be Hydra keaton regenerating

114
00:04:55,930 --> 00:05:01,060
so he struggled so Hercules ran away got

115
00:05:01,060 --> 00:05:02,950
his friend he allows who was a security

116
00:05:02,950 --> 00:05:05,080
engineer and they figured out I should

117
00:05:05,080 --> 00:05:07,060
probably just patch that so they use

118
00:05:07,060 --> 00:05:09,970
poisons and they poison the Hydra and it

119
00:05:09,970 --> 00:05:13,120
actually worked so I feel securities of

120
00:05:13,120 --> 00:05:16,630
very similar to the Hydra we close some

121
00:05:16,630 --> 00:05:18,639
bugs we close some issues in a new thing

122
00:05:18,639 --> 00:05:21,760
appears and then we close that issue and

123
00:05:21,760 --> 00:05:23,260
we work on that issue and a new thing

124
00:05:23,260 --> 00:05:25,030
appears and there is a constant kind of

125
00:05:25,030 --> 00:05:27,550
treadmill where we as developers have to

126
00:05:27,550 --> 00:05:30,960
keep up with all those issues right a

127
00:05:30,960 --> 00:05:33,550
lot of developers tend to care for

128
00:05:33,550 --> 00:05:35,320
security when it's too late that's a bit

129
00:05:35,320 --> 00:05:37,150
like speeding on a highway normally

130
00:05:37,150 --> 00:05:38,620
people speed on a highway drive

131
00:05:38,620 --> 00:05:40,840
incredibly fast then they get a ticket

132
00:05:40,840 --> 00:05:42,820
and then they start driving slow

133
00:05:42,820 --> 00:05:44,590
it's the same with security a lot of

134
00:05:44,590 --> 00:05:46,570
developers sadly don't care for security

135
00:05:46,570 --> 00:05:48,760
until it's actually too late until

136
00:05:48,760 --> 00:05:50,530
something bad happens and then we up our

137
00:05:50,530 --> 00:05:53,380
game and I feel like there is actually a

138
00:05:53,380 --> 00:05:55,300
lot of amazing resources and a lot of

139
00:05:55,300 --> 00:05:57,430
great open source and amazing tutorials

140
00:05:57,430 --> 00:06:00,130
that actually help us not making the

141
00:06:00,130 --> 00:06:03,780
mistakes of other people again and again

142
00:06:03,780 --> 00:06:06,130
obviously there's always the tech side

143
00:06:06,130 --> 00:06:08,110
of things there's always what we as

144
00:06:08,110 --> 00:06:10,210
developers can do and then there is

145
00:06:10,210 --> 00:06:12,100
always the human element that's always

146
00:06:12,100 --> 00:06:13,720
these are the things that we don't

147
00:06:13,720 --> 00:06:15,580
necessarily control where we have to

148
00:06:15,580 --> 00:06:17,800
work at education and we have to work

149
00:06:17,800 --> 00:06:21,310
with culture and it turns out human

150
00:06:21,310 --> 00:06:25,360
beings are often attacked lazy so let me

151
00:06:25,360 --> 00:06:29,260
give you a very quick example in 2014

152
00:06:29,260 --> 00:06:31,750
the top 10 passwords were really

153
00:06:31,750 --> 00:06:33,340
hilarious

154
00:06:33,340 --> 00:06:36,500
people are lazy they like to like speed

155
00:06:36,500 --> 00:06:38,900
up things they like to skip logins and

156
00:06:38,900 --> 00:06:41,360
they like to kind of just get to a point

157
00:06:41,360 --> 00:06:44,210
in time very quickly so the issue is

158
00:06:44,210 --> 00:06:46,250
password like password because what can

159
00:06:46,250 --> 00:06:46,970
go wrong

160
00:06:46,970 --> 00:06:50,199
QWERTY and Germany that will be creates

161
00:06:50,199 --> 00:06:52,520
baseball that's only the Americans I

162
00:06:52,520 --> 00:06:55,300
guess dragon so that works over here

163
00:06:55,300 --> 00:06:57,410
there's a lot of those kind of things

164
00:06:57,410 --> 00:06:59,780
that we actually realize passwords are

165
00:06:59,780 --> 00:07:02,630
sometimes a bit ridiculous and passwords

166
00:07:02,630 --> 00:07:05,419
are actually very very kind of prone to

167
00:07:05,419 --> 00:07:08,360
pop culture passwords change over time

168
00:07:08,360 --> 00:07:10,639
and that's not just for singer

169
00:07:10,639 --> 00:07:12,080
individuals that's something that we see

170
00:07:12,080 --> 00:07:15,050
on a global scale so we see if we look

171
00:07:15,050 --> 00:07:16,789
at those lists and there are lists with

172
00:07:16,789 --> 00:07:18,650
like thousands and thousands of popular

173
00:07:18,650 --> 00:07:21,979
passwords that's a lot of interesting

174
00:07:21,979 --> 00:07:23,870
things appear let me give you a good

175
00:07:23,870 --> 00:07:24,470
example

176
00:07:24,470 --> 00:07:28,599
any Marvel fans over here Marvel Comics

177
00:07:28,599 --> 00:07:34,250
awesome Batman and Superman made it to

178
00:07:34,250 --> 00:07:38,979
place number 21 and 24 any clue why

179
00:07:38,979 --> 00:07:42,380
there's a movie coming out the next year

180
00:07:42,380 --> 00:07:45,889
Batman vs Superman so this actually

181
00:07:45,889 --> 00:07:48,340
makes choices like Batman and Superman

182
00:07:48,340 --> 00:07:51,440
incredibly popular you will see artists

183
00:07:51,440 --> 00:07:53,240
and they're like Lady Gaga on Justin

184
00:07:53,240 --> 00:07:55,220
Bieber and probably if you use Justin

185
00:07:55,220 --> 00:07:56,780
Bieber as a password you deserve to be

186
00:07:56,780 --> 00:08:03,080
hacked sorry if any a Justin Bieber fans

187
00:08:03,080 --> 00:08:04,520
are in the room I totally appreciate

188
00:08:04,520 --> 00:08:09,919
that so I think there's a lot of stuff

189
00:08:09,919 --> 00:08:11,630
that we as developers obviously have to

190
00:08:11,630 --> 00:08:13,760
do over here and that starts with simple

191
00:08:13,760 --> 00:08:16,460
things like educating people and good

192
00:08:16,460 --> 00:08:18,020
nightly mainstream media is slowly

193
00:08:18,020 --> 00:08:21,080
catching up so we see articles about

194
00:08:21,080 --> 00:08:23,180
weak passwords about how to create

195
00:08:23,180 --> 00:08:25,370
secure passwords and all that stuff in

196
00:08:25,370 --> 00:08:28,330
mainstream media we see like big

197
00:08:28,330 --> 00:08:31,159
journals like The Guardian like Wall

198
00:08:31,159 --> 00:08:33,349
Street Journal and so on actually

199
00:08:33,349 --> 00:08:35,900
educating people about this so this is a

200
00:08:35,900 --> 00:08:38,510
good start but changing culture

201
00:08:38,510 --> 00:08:40,820
especially to habits is something that

202
00:08:40,820 --> 00:08:43,700
takes a long long time and if we look at

203
00:08:43,700 --> 00:08:46,460
passwords it is a bit weird that

204
00:08:46,460 --> 00:08:48,620
how we work in the internet especially

205
00:08:48,620 --> 00:08:50,510
my JavaScript scene changes every

206
00:08:50,510 --> 00:08:52,340
Tuesday and there is always a new

207
00:08:52,340 --> 00:08:53,780
framework and we adopt two new

208
00:08:53,780 --> 00:08:57,080
technology and we learn everything but

209
00:08:57,080 --> 00:08:59,240
then we use those very old kind of

210
00:08:59,240 --> 00:09:02,330
fashioned approaches like username and

211
00:09:02,330 --> 00:09:04,640
password for login and that is something

212
00:09:04,640 --> 00:09:06,440
that we've used hundreds of years ago

213
00:09:06,440 --> 00:09:08,420
already right and the issues never

214
00:09:08,420 --> 00:09:09,260
changed

215
00:09:09,260 --> 00:09:11,330
passwords are being phished they are

216
00:09:11,330 --> 00:09:13,160
being key locked

217
00:09:13,160 --> 00:09:16,370
they are simply reused and you see that

218
00:09:16,370 --> 00:09:18,320
in those top thousand lists or even

219
00:09:18,320 --> 00:09:20,540
bigger lists so there is a lot of kind

220
00:09:20,540 --> 00:09:24,440
of issues that we have over here then if

221
00:09:24,440 --> 00:09:26,540
we talk about authentication we always

222
00:09:26,540 --> 00:09:28,250
have to talk about an authorization as

223
00:09:28,250 --> 00:09:31,250
well and there are popular standards

224
00:09:31,250 --> 00:09:34,550
like o of 1 or 2 up my D up my D

225
00:09:34,550 --> 00:09:36,350
connects and all that different kind of

226
00:09:36,350 --> 00:09:39,410
things which tend to do a lot of the

227
00:09:39,410 --> 00:09:42,020
same things but there is a key

228
00:09:42,020 --> 00:09:44,180
difference between authentication which

229
00:09:44,180 --> 00:09:46,340
means I want to prove that it's really

230
00:09:46,340 --> 00:09:48,320
me standing in front you it's about the

231
00:09:48,320 --> 00:09:51,650
identity of a person and authorization

232
00:09:51,650 --> 00:09:53,540
which means I want to give access to

233
00:09:53,540 --> 00:09:54,470
resources

234
00:09:54,470 --> 00:09:56,780
I want to grant access to certain things

235
00:09:56,780 --> 00:09:59,690
which can be a profile but also just to

236
00:09:59,690 --> 00:10:01,580
prove a picture or something else right

237
00:10:01,580 --> 00:10:03,980
and those are key issues and key

238
00:10:03,980 --> 00:10:05,840
differences that we sometimes just

239
00:10:05,840 --> 00:10:10,210
simply ignore there is this list of

240
00:10:10,210 --> 00:10:12,980
interesting vulnerabilities which is

241
00:10:12,980 --> 00:10:14,960
called the OAuth top 10 which is the

242
00:10:14,960 --> 00:10:17,090
open web application security council

243
00:10:17,090 --> 00:10:20,270
and security projects and we lay this

244
00:10:20,270 --> 00:10:22,670
list that they released was in 2013 and

245
00:10:22,670 --> 00:10:24,770
they go through the top 10 issues that

246
00:10:24,770 --> 00:10:26,810
they see across hundreds and thousands

247
00:10:26,810 --> 00:10:29,690
of applications we first run a simple

248
00:10:29,690 --> 00:10:31,910
injection which can be LDAP injection

249
00:10:31,910 --> 00:10:34,430
which can be SQL injection and so on and

250
00:10:34,430 --> 00:10:36,530
what we simply do over here is we trick

251
00:10:36,530 --> 00:10:39,590
the interpreter and into executing

252
00:10:39,590 --> 00:10:41,000
commands that shouldn't probably be

253
00:10:41,000 --> 00:10:43,670
executed right and everybody probably

254
00:10:43,670 --> 00:10:46,430
tried writing drop table in some kind of

255
00:10:46,430 --> 00:10:48,470
input form before it had fun doing that

256
00:10:48,470 --> 00:10:51,200
right and people do that and people try

257
00:10:51,200 --> 00:10:52,730
that it is very simple but it's actually

258
00:10:52,730 --> 00:10:55,610
quite critical broken authentication

259
00:10:55,610 --> 00:10:58,090
systems this can deal too

260
00:10:58,090 --> 00:11:00,460
this can cause big big issues so we see

261
00:11:00,460 --> 00:11:02,260
that session management is a good

262
00:11:02,260 --> 00:11:03,820
example people not actually signing

263
00:11:03,820 --> 00:11:07,750
session cookies we see no kind of

264
00:11:07,750 --> 00:11:10,600
hashing or we caching no encryption or

265
00:11:10,600 --> 00:11:13,150
weak encryption and so on that obviously

266
00:11:13,150 --> 00:11:16,090
causes issues again a lot of sites still

267
00:11:16,090 --> 00:11:18,190
provide the session ID in the URL and

268
00:11:18,190 --> 00:11:19,600
you can read that and it's usually

269
00:11:19,600 --> 00:11:21,970
sequential or something which is not

270
00:11:21,970 --> 00:11:23,020
that's not right

271
00:11:23,020 --> 00:11:25,210
because if I see my session and I see my

272
00:11:25,210 --> 00:11:27,130
next session ID I can probably guess

273
00:11:27,130 --> 00:11:30,250
what the coming session ID is cross-site

274
00:11:30,250 --> 00:11:33,370
scripting incredibly popular and still a

275
00:11:33,370 --> 00:11:35,710
very relatively severe threat so

276
00:11:35,710 --> 00:11:38,470
cross-site scripting or XSS is pretty

277
00:11:38,470 --> 00:11:41,470
much the fun of the kind of inserting

278
00:11:41,470 --> 00:11:44,950
scripts into a site and the browser and

279
00:11:44,950 --> 00:11:47,350
besides trust each other and that's a

280
00:11:47,350 --> 00:11:51,430
trust relation it so more than

281
00:11:51,430 --> 00:11:53,230
templating engines tend to kind of

282
00:11:53,230 --> 00:11:55,540
sanitize data and that it tend to encode

283
00:11:55,540 --> 00:11:58,240
different characters and so on and that

284
00:11:58,240 --> 00:12:01,540
all is great but we still end up

285
00:12:01,540 --> 00:12:04,120
evaluating different things right and we

286
00:12:04,120 --> 00:12:06,880
can still trick different routes and to

287
00:12:06,880 --> 00:12:08,980
actually edit executing things we don't

288
00:12:08,980 --> 00:12:12,430
want there is a difference in reflective

289
00:12:12,430 --> 00:12:14,590
cross-match cross-site scripting which

290
00:12:14,590 --> 00:12:17,100
means it is just executed once and

291
00:12:17,100 --> 00:12:19,570
persistent cross-site scripting where we

292
00:12:19,570 --> 00:12:21,310
can actually access the database right

293
00:12:21,310 --> 00:12:23,350
stuff and execute that over and over

294
00:12:23,350 --> 00:12:27,430
again so in this case we accept we

295
00:12:27,430 --> 00:12:30,730
exploit the trust of our browser and the

296
00:12:30,730 --> 00:12:34,140
user into a site and if you have used

297
00:12:34,140 --> 00:12:36,760
forums back in the 90s you probably know

298
00:12:36,760 --> 00:12:38,920
that we were able to use bbcode and that

299
00:12:38,920 --> 00:12:42,490
stuff to execute script tags and handle

300
00:12:42,490 --> 00:12:44,260
lots of fun popping up with alerts and

301
00:12:44,260 --> 00:12:48,040
even worse things so i'm object-- that

302
00:12:48,040 --> 00:12:50,710
references where no access level control

303
00:12:50,710 --> 00:12:52,840
is being made that is actually still an

304
00:12:52,840 --> 00:12:55,360
issue the amount of sites that only

305
00:12:55,360 --> 00:12:57,400
protect certain resources but actually

306
00:12:57,400 --> 00:12:59,500
ignore protecting all resources that's

307
00:12:59,500 --> 00:12:59,980
hilarious

308
00:12:59,980 --> 00:13:03,700
so objects can be manipulated I get

309
00:13:03,700 --> 00:13:05,500
access to certain fields of objects that

310
00:13:05,500 --> 00:13:07,360
should probably not be able to menu play

311
00:13:07,360 --> 00:13:09,850
it and those are sometimes really simple

312
00:13:09,850 --> 00:13:13,139
things that can lead to a big big issue

313
00:13:13,139 --> 00:13:15,250
misconfigured applications you would

314
00:13:15,250 --> 00:13:17,050
wonder I actually talked to the bunch of

315
00:13:17,050 --> 00:13:18,639
guys from Heroku and other companies

316
00:13:18,639 --> 00:13:21,550
that do cloud hosting and they said the

317
00:13:21,550 --> 00:13:24,670
amount of apps that go onto their

318
00:13:24,670 --> 00:13:26,350
services and that still run on a

319
00:13:26,350 --> 00:13:28,240
development environment today instead of

320
00:13:28,240 --> 00:13:29,649
actually switching over to production

321
00:13:29,649 --> 00:13:31,899
modes or that shape their credentials

322
00:13:31,899 --> 00:13:34,149
somehow and they messed that up there is

323
00:13:34,149 --> 00:13:35,560
a lot of those things where miss

324
00:13:35,560 --> 00:13:37,509
configuration can lead to a lot of big

325
00:13:37,509 --> 00:13:39,699
issues like actually showing error

326
00:13:39,699 --> 00:13:42,550
messages instead of using them and like

327
00:13:42,550 --> 00:13:45,389
consuming and gracefully on your site

328
00:13:45,389 --> 00:13:49,839
exposure of data where again encryption

329
00:13:49,839 --> 00:13:52,420
plays a huge role and public key private

330
00:13:52,420 --> 00:13:54,839
key sometimes sounds a bit complicated

331
00:13:54,839 --> 00:13:58,089
there is still way too few sites using

332
00:13:58,089 --> 00:14:01,630
HTTPS probably and part of that is

333
00:14:01,630 --> 00:14:04,990
because SSL and TLS are sometimes a bit

334
00:14:04,990 --> 00:14:07,569
clunky to use so we see a lot of those

335
00:14:07,569 --> 00:14:09,220
sites that don't really rely on

336
00:14:09,220 --> 00:14:13,630
transport layer security again access

337
00:14:13,630 --> 00:14:16,540
layer control verifying requests making

338
00:14:16,540 --> 00:14:18,130
sure that users are actually allowed to

339
00:14:18,130 --> 00:14:20,199
do certain things it sounds very simple

340
00:14:20,199 --> 00:14:22,000
but you would wonder how many people

341
00:14:22,000 --> 00:14:24,250
don't do that in Xpress we have a way to

342
00:14:24,250 --> 00:14:26,079
deal with that with middleware and I'm

343
00:14:26,079 --> 00:14:29,649
going to go into that later cross-site

344
00:14:29,649 --> 00:14:30,790
request forgery

345
00:14:30,790 --> 00:14:34,480
see Cerf is incredibly popular where we

346
00:14:34,480 --> 00:14:36,670
use the identity of the user to perform

347
00:14:36,670 --> 00:14:39,250
requests on the user's behalf and

348
00:14:39,250 --> 00:14:41,380
sometimes that's good because we would

349
00:14:41,380 --> 00:14:42,610
actually want to do that for the user

350
00:14:42,610 --> 00:14:44,709
and sometimes somebody does that without

351
00:14:44,709 --> 00:14:46,329
actually the user agreeing towards it

352
00:14:46,329 --> 00:14:49,149
right and we see a lot of different kind

353
00:14:49,149 --> 00:14:51,420
of measurements against that like we see

354
00:14:51,420 --> 00:14:54,490
nonce parameters state parameters we

355
00:14:54,490 --> 00:14:56,079
synchronize the tokens and stuff like

356
00:14:56,079 --> 00:14:58,240
that so we have weapons to deal with

357
00:14:58,240 --> 00:15:00,910
this making sure that we don't suffer

358
00:15:00,910 --> 00:15:02,649
under replay attacks and that kind of

359
00:15:02,649 --> 00:15:05,529
stuff so there is things we can do which

360
00:15:05,529 --> 00:15:09,399
is good so in this case we leverage with

361
00:15:09,399 --> 00:15:11,860
sites trust in the user because the user

362
00:15:11,860 --> 00:15:13,930
is locked in we have that kind of an

363
00:15:13,930 --> 00:15:16,959
authentication so that seems to be legit

364
00:15:16,959 --> 00:15:18,689
thing right

365
00:15:18,689 --> 00:15:20,860
number nine is interesting because this

366
00:15:20,860 --> 00:15:22,600
has whenever a code and everybody's like

367
00:15:22,600 --> 00:15:25,540
oh I write great code and that is not

368
00:15:25,540 --> 00:15:25,990
necessary

369
00:15:25,990 --> 00:15:28,720
that causes me issues a good good

370
00:15:28,720 --> 00:15:31,810
example was 2014 when hot plate was

371
00:15:31,810 --> 00:15:34,899
released hardly it was a vulnerability

372
00:15:34,899 --> 00:15:39,760
in open SSL about 17% of the trusted

373
00:15:39,760 --> 00:15:43,000
internet was affected that is a lot

374
00:15:43,000 --> 00:15:44,830
right so we have all those different

375
00:15:44,830 --> 00:15:48,100
sites which kind of led to people

376
00:15:48,100 --> 00:15:50,430
potentially reading the machines memory

377
00:15:50,430 --> 00:15:54,250
which led to kind of a violation of

378
00:15:54,250 --> 00:15:56,680
passwords all those passwords should be

379
00:15:56,680 --> 00:15:58,240
invalidated and they are obviously not

380
00:15:58,240 --> 00:16:00,970
so again we should move on and kind of

381
00:16:00,970 --> 00:16:03,100
ditch password and get rid of them and

382
00:16:03,100 --> 00:16:06,029
the last thing is kind of interesting

383
00:16:06,029 --> 00:16:08,290
validating for boards and redirects on

384
00:16:08,290 --> 00:16:11,740
our sites a lot of people block and they

385
00:16:11,740 --> 00:16:13,660
use resources and they don't actually

386
00:16:13,660 --> 00:16:15,490
check those resources over and over

387
00:16:15,490 --> 00:16:17,620
again so even though our site might be

388
00:16:17,620 --> 00:16:18,100
secure

389
00:16:18,100 --> 00:16:20,560
we might lead people to an unsecured

390
00:16:20,560 --> 00:16:23,470
site right and that might sound very

391
00:16:23,470 --> 00:16:25,990
like well why would I care but sometimes

392
00:16:25,990 --> 00:16:27,130
we actually have to care about these

393
00:16:27,130 --> 00:16:29,350
things to make sure that works so there

394
00:16:29,350 --> 00:16:31,180
is a table I'm not going to stick along

395
00:16:31,180 --> 00:16:33,790
with that's too much but you can see

396
00:16:33,790 --> 00:16:35,470
that some of those things are obviously

397
00:16:35,470 --> 00:16:37,450
very easy to explore it some of them are

398
00:16:37,450 --> 00:16:40,270
very widespread some of them are not

399
00:16:40,270 --> 00:16:41,980
that widespread anymore because it's

400
00:16:41,980 --> 00:16:43,810
getting easier it'd be easier to deal

401
00:16:43,810 --> 00:16:46,450
with that stuff but still we want to

402
00:16:46,450 --> 00:16:48,130
make sure that we look at at least those

403
00:16:48,130 --> 00:16:51,550
top 10 if not even further and handle

404
00:16:51,550 --> 00:16:53,470
that appropriately and there are

405
00:16:53,470 --> 00:16:55,390
fantastic security modules which I'm

406
00:16:55,390 --> 00:16:57,579
going to present that help you doing

407
00:16:57,579 --> 00:17:02,829
that let's talk about hashing a lot of

408
00:17:02,829 --> 00:17:04,720
people tend to think that it's enough to

409
00:17:04,720 --> 00:17:07,660
use md5 sha-1 shahtoosh a free and so on

410
00:17:07,660 --> 00:17:10,360
to do hashing of passwords or ciphertext

411
00:17:10,360 --> 00:17:12,550
or anything like that and the user is

412
00:17:12,550 --> 00:17:14,949
secure right because I've done my job

413
00:17:14,949 --> 00:17:17,439
I've hash the password and that's it it

414
00:17:17,439 --> 00:17:19,000
turns out that's not always the smartest

415
00:17:19,000 --> 00:17:22,569
idea just this year a really really big

416
00:17:22,569 --> 00:17:25,929
dating websites called Ashley Madison

417
00:17:25,929 --> 00:17:28,840
got hacked and I want to point you to

418
00:17:28,840 --> 00:17:31,750
the headline of the sides so it says

419
00:17:31,750 --> 00:17:35,730
about 11 million passwords got leaked

420
00:17:35,730 --> 00:17:38,500
there was just a developer that was

421
00:17:38,500 --> 00:17:39,670
really keen

422
00:17:39,670 --> 00:17:41,230
- just look at the password dump and

423
00:17:41,230 --> 00:17:42,820
actually some code got leaked as well

424
00:17:42,820 --> 00:17:46,240
and that developer found out that they

425
00:17:46,240 --> 00:17:49,510
used bcrypt which is fantastic but 11

426
00:17:49,510 --> 00:17:51,190
million passwords actually were just

427
00:17:51,190 --> 00:17:54,880
simply hash with md5 and that lets who

428
00:17:54,880 --> 00:17:57,130
those passwords being pretty much

429
00:17:57,130 --> 00:18:00,100
correct in seconds the simple reason why

430
00:18:00,100 --> 00:18:03,550
is md5 is actually way too fast it is an

431
00:18:03,550 --> 00:18:06,550
incredibly efficient algorithm so we

432
00:18:06,550 --> 00:18:08,830
want to look at slow algorithms that

433
00:18:08,830 --> 00:18:13,750
help us kind of protecting data I there

434
00:18:13,750 --> 00:18:14,860
is actually a bunch of really

435
00:18:14,860 --> 00:18:17,380
interesting passwords in there and I

436
00:18:17,380 --> 00:18:19,030
just want to point out four of them I

437
00:18:19,030 --> 00:18:21,250
like I should not be doing this right

438
00:18:21,250 --> 00:18:25,420
again it's a dating website then there

439
00:18:25,420 --> 00:18:28,300
is why are you doing this so people are

440
00:18:28,300 --> 00:18:31,000
very self-critical so passwords really

441
00:18:31,000 --> 00:18:33,940
help us understand human beings there is

442
00:18:33,940 --> 00:18:38,910
just trying this out sure sure you are I

443
00:18:38,910 --> 00:18:43,990
love the best password ever and at least

444
00:18:43,990 --> 00:18:46,090
for those top three that's how I felt

445
00:18:46,090 --> 00:18:47,350
the first time when I tried the Milo

446
00:18:47,350 --> 00:18:50,350
dinosaur I should not be doing this just

447
00:18:50,350 --> 00:18:53,620
trying this out it's totally cool yeah

448
00:18:53,620 --> 00:18:54,850
and now I drink that stuff every day

449
00:18:54,850 --> 00:18:58,780
over here alright so obviously that is

450
00:18:58,780 --> 00:19:01,320
an issue efficient hashing I said

451
00:19:01,320 --> 00:19:03,490
pattern like those algorithms should be

452
00:19:03,490 --> 00:19:05,620
slow and we see a big big reliance on

453
00:19:05,620 --> 00:19:09,070
crypt blowfish pbkdf2 which stands for a

454
00:19:09,070 --> 00:19:10,690
password-based key derivation function

455
00:19:10,690 --> 00:19:13,570
and you can imagine a German accent I

456
00:19:13,570 --> 00:19:15,160
had to learn that thing for like half an

457
00:19:15,160 --> 00:19:16,900
hour repeating it over and over again to

458
00:19:16,900 --> 00:19:20,620
say it flawlessly so those algorithms

459
00:19:20,620 --> 00:19:23,560
are really slow and that's good let me

460
00:19:23,560 --> 00:19:25,300
give you a good comparison so this is

461
00:19:25,300 --> 00:19:29,010
coming from the Ruby bcrypt module and

462
00:19:29,010 --> 00:19:32,350
they made a comparison between md5 and B

463
00:19:32,350 --> 00:19:34,390
clips we talked about ten thousand

464
00:19:34,390 --> 00:19:36,970
iterations and you can see that md5

465
00:19:36,970 --> 00:19:39,190
blast through ten thousand results in

466
00:19:39,190 --> 00:19:41,530
seconds right it not even a second it's

467
00:19:41,530 --> 00:19:44,620
so fast it's so efficient various bcrypt

468
00:19:44,620 --> 00:19:47,380
needs 22 seconds for exactly the same

469
00:19:47,380 --> 00:19:49,570
data set right so that's for us

470
00:19:49,570 --> 00:19:52,030
obviously a big indicator that big crap

471
00:19:52,030 --> 00:19:54,059
might actually be a good choice

472
00:19:54,059 --> 00:19:57,669
and I want to stress something that I

473
00:19:57,669 --> 00:20:01,840
find really interesting we can actually

474
00:20:01,840 --> 00:20:04,480
look at Ruby and especially at Rails

475
00:20:04,480 --> 00:20:06,789
when we work with notes because they've

476
00:20:06,789 --> 00:20:09,250
done a lot of mistakes that we do right

477
00:20:09,250 --> 00:20:11,770
now already so we can actually prevent

478
00:20:11,770 --> 00:20:13,570
making these mistakes we can look at

479
00:20:13,570 --> 00:20:15,820
what they do we can look at their access

480
00:20:15,820 --> 00:20:17,409
level control and so on and actually

481
00:20:17,409 --> 00:20:20,080
learn from that but instead sometimes we

482
00:20:20,080 --> 00:20:21,640
tend to reinvent the wheel instead of

483
00:20:21,640 --> 00:20:23,620
just looking at existing technology and

484
00:20:23,620 --> 00:20:27,640
using that as a role model started

485
00:20:27,640 --> 00:20:30,880
hashing so now we obviously have a

486
00:20:30,880 --> 00:20:33,220
cipher text a bit of data the password

487
00:20:33,220 --> 00:20:35,830
and we want to hash that and that is

488
00:20:35,830 --> 00:20:37,270
great but there is this thing called

489
00:20:37,270 --> 00:20:39,460
rainbow tables where we use precomputed

490
00:20:39,460 --> 00:20:42,909
hashes which means if I have that table

491
00:20:42,909 --> 00:20:44,860
I can reverse-engineer passwords right

492
00:20:44,860 --> 00:20:48,429
so what we do is we add a random bit to

493
00:20:48,429 --> 00:20:50,500
it we add something completely random to

494
00:20:50,500 --> 00:20:52,900
it we store that somewhere as well and

495
00:20:52,900 --> 00:20:55,900
we make it harder to guess the original

496
00:20:55,900 --> 00:20:58,150
password which leads to the interesting

497
00:20:58,150 --> 00:21:00,520
side effect that even if 10 users in my

498
00:21:00,520 --> 00:21:02,350
service have exactly the same passwords

499
00:21:02,350 --> 00:21:04,299
we hash is not going to be the same

500
00:21:04,299 --> 00:21:09,940
which is very very variable now there's

501
00:21:09,940 --> 00:21:11,890
obviously these things that we can do we

502
00:21:11,890 --> 00:21:14,200
can use hashing and that stuff but again

503
00:21:14,200 --> 00:21:16,539
there must be other ways to harden our

504
00:21:16,539 --> 00:21:17,950
apps because we don't just give a

505
00:21:17,950 --> 00:21:19,960
passwords right and it turns out

506
00:21:19,960 --> 00:21:21,549
javascript has actually really good

507
00:21:21,549 --> 00:21:23,520
feature codes strict notes

508
00:21:23,520 --> 00:21:26,830
so since ACMA script 5 we can actually

509
00:21:26,830 --> 00:21:28,900
rely on function level or global level

510
00:21:28,900 --> 00:21:31,809
scope strict modes which leads to

511
00:21:31,809 --> 00:21:33,820
actually breaking the function

512
00:21:33,820 --> 00:21:36,520
abstraction we can make sure that

513
00:21:36,520 --> 00:21:38,500
certain errors are being thrown instead

514
00:21:38,500 --> 00:21:39,820
of the abstract grace-filled

515
00:21:39,820 --> 00:21:41,559
of really executing stuff it shouldn't

516
00:21:41,559 --> 00:21:44,350
execute so we should always obviously a

517
00:21:44,350 --> 00:21:46,120
neighbor strict note and that sounds

518
00:21:46,120 --> 00:21:47,890
like a very simple bit of advice but you

519
00:21:47,890 --> 00:21:49,179
would wonder how many people stay on

520
00:21:49,179 --> 00:21:54,730
users reg X is a big enemy of execution

521
00:21:54,730 --> 00:21:58,720
time if we handle the rack X and if we

522
00:21:58,720 --> 00:22:01,809
validate input forms on our server side

523
00:22:01,809 --> 00:22:04,299
we are stuck with the event loop and

524
00:22:04,299 --> 00:22:07,250
that can lead to a fun few feature

525
00:22:07,250 --> 00:22:09,560
like actually people ddossing our

526
00:22:09,560 --> 00:22:14,000
services if I want to give you a very

527
00:22:14,000 --> 00:22:17,180
long reg X that it's just very simply

528
00:22:17,180 --> 00:22:20,450
hard to kind of compile and parse this

529
00:22:20,450 --> 00:22:22,600
can actually lead to your app crashing

530
00:22:22,600 --> 00:22:25,580
so there is a bunch of different things

531
00:22:25,580 --> 00:22:27,680
that I can do and there are modules for

532
00:22:27,680 --> 00:22:30,200
this and help you evaluate and reg X

533
00:22:30,200 --> 00:22:31,730
before you actually run it on your van

534
00:22:31,730 --> 00:22:33,890
loop so you are safe and you know

535
00:22:33,890 --> 00:22:36,910
exactly what's going on

536
00:22:36,910 --> 00:22:39,650
correct encoding that sounds like a very

537
00:22:39,650 --> 00:22:41,240
simple thing but again we want to make

538
00:22:41,240 --> 00:22:42,620
sure that nobody throws a couple of

539
00:22:42,620 --> 00:22:45,530
scripts in there right so use that

540
00:22:45,530 --> 00:22:47,480
ampersand use those hover kind of

541
00:22:47,480 --> 00:22:49,850
characters and just do it and again

542
00:22:49,850 --> 00:22:51,320
there are libraries which help you doing

543
00:22:51,320 --> 00:22:54,350
that automatically did you ever look at

544
00:22:54,350 --> 00:22:56,530
Express how a request body looks like

545
00:22:56,530 --> 00:22:59,930
they populate the body by the thing they

546
00:22:59,930 --> 00:23:02,870
call powered by and that's a bit of that

547
00:23:02,870 --> 00:23:04,790
developer pride that we have developers

548
00:23:04,790 --> 00:23:07,040
like to show of what we use right so

549
00:23:07,040 --> 00:23:09,800
your app is telling every browser every

550
00:23:09,800 --> 00:23:13,250
request exactly hey I run on Express and

551
00:23:13,250 --> 00:23:14,390
that might sound cool if you're a

552
00:23:14,390 --> 00:23:15,740
developer right because you want to be

553
00:23:15,740 --> 00:23:17,360
to show off what you use and you use

554
00:23:17,360 --> 00:23:19,880
your latest cool bit of technology but

555
00:23:19,880 --> 00:23:21,440
it is actually not useful because we

556
00:23:21,440 --> 00:23:23,630
want to not necessarily expose what our

557
00:23:23,630 --> 00:23:25,940
stack runs on all right so this is a

558
00:23:25,940 --> 00:23:28,280
very simple thing and I actually talked

559
00:23:28,280 --> 00:23:31,670
recently to in a pen tester who said you

560
00:23:31,670 --> 00:23:37,150
should just always change it to PHP so

561
00:23:37,150 --> 00:23:39,770
this one can be hidden it is very simple

562
00:23:39,770 --> 00:23:41,360
to just remove that or change it to

563
00:23:41,360 --> 00:23:42,740
something your app actually doesn't run

564
00:23:42,740 --> 00:23:46,930
on make it harder to get access to stuff

565
00:23:46,930 --> 00:23:50,390
generating new IDs access tokens and all

566
00:23:50,390 --> 00:23:52,310
that fun is really really important

567
00:23:52,310 --> 00:23:54,050
still a lot of people don't actually

568
00:23:54,050 --> 00:23:57,110
necessarily do it lots of people use

569
00:23:57,110 --> 00:23:59,690
object IDs lot of let's say Mongo idea

570
00:23:59,690 --> 00:24:02,390
MongoDB and they throw them away as

571
00:24:02,390 --> 00:24:04,640
session cookie IDs and stuff like that

572
00:24:04,640 --> 00:24:07,790
which might sound sensible it turns out

573
00:24:07,790 --> 00:24:10,610
MongoDB is IDs are actually sequential

574
00:24:10,610 --> 00:24:12,770
and they are guessable but we don't

575
00:24:12,770 --> 00:24:14,930
necessarily want that right because if I

576
00:24:14,930 --> 00:24:17,870
can guess your next session that is an

577
00:24:17,870 --> 00:24:20,900
issue so we want to deal with stuff like

578
00:24:20,900 --> 00:24:22,760
unique identifiers should be

579
00:24:22,760 --> 00:24:24,350
non-sequential and it should be non

580
00:24:24,350 --> 00:24:26,420
guessable note you your ID is a

581
00:24:26,420 --> 00:24:29,120
fantastic really good module I highly

582
00:24:29,120 --> 00:24:30,380
promise you it is one of the nicest

583
00:24:30,380 --> 00:24:35,090
bcrypt modules I've seen parameter

584
00:24:35,090 --> 00:24:38,120
pollution any kind of idea what's

585
00:24:38,120 --> 00:24:40,400
happening if I submit the same parameter

586
00:24:40,400 --> 00:24:46,100
twice this guy not see we know all right

587
00:24:46,100 --> 00:24:49,400
so there we go instead of just having

588
00:24:49,400 --> 00:24:52,610
the parameter renamed or just like fit

589
00:24:52,610 --> 00:24:55,460
twice or something it's an array now if

590
00:24:55,460 --> 00:24:57,740
I evaluate that and I rely on this not

591
00:24:57,740 --> 00:24:59,660
being an array this can cause issues

592
00:24:59,660 --> 00:25:02,120
again right so those are very simple

593
00:25:02,120 --> 00:25:04,100
things same thing happens by the way for

594
00:25:04,100 --> 00:25:06,650
post requests so expressed by default

595
00:25:06,650 --> 00:25:08,600
populates arrays if there is more than

596
00:25:08,600 --> 00:25:10,940
one parameter with the same name and you

597
00:25:10,940 --> 00:25:12,320
should obviously avoid that as much as

598
00:25:12,320 --> 00:25:16,760
you can be Crips I've been talking about

599
00:25:16,760 --> 00:25:20,059
bcrypt I said I don't like md5 I also do

600
00:25:20,059 --> 00:25:21,920
like s Crip but I feel like decrypt is

601
00:25:21,920 --> 00:25:26,120
easier to use big crypt turns a hash

602
00:25:26,120 --> 00:25:30,020
into a salted hash and normally he would

603
00:25:30,020 --> 00:25:32,510
store that sold separately now big crip

604
00:25:32,510 --> 00:25:34,490
does a very interesting thing where it

605
00:25:34,490 --> 00:25:36,410
uses dollar science as the limiter and

606
00:25:36,410 --> 00:25:40,190
it actually stores we salt in the salted

607
00:25:40,190 --> 00:25:44,150
hash so the first bit of this is the big

608
00:25:44,150 --> 00:25:46,520
version then we have the number of

609
00:25:46,520 --> 00:25:49,340
iterations that we execute on and then

610
00:25:49,340 --> 00:25:51,380
we pass we hash and be salt

611
00:25:51,380 --> 00:25:53,780
this is incredibly awesome the class we

612
00:25:53,780 --> 00:25:55,130
don't actually have to care about

613
00:25:55,130 --> 00:25:57,620
storing salt separately from the hatch

614
00:25:57,620 --> 00:25:59,750
it's very awesome in terms of usability

615
00:25:59,750 --> 00:26:05,000
and it's still secure generating a hash

616
00:26:05,000 --> 00:26:09,620
can be done synchronously or a single

617
00:26:09,620 --> 00:26:12,230
protein it is as simple as just using

618
00:26:12,230 --> 00:26:14,000
this function and afterwards you just

619
00:26:14,000 --> 00:26:16,790
compare the clear text ciphertext with

620
00:26:16,790 --> 00:26:19,300
what you deem be valuable hash

621
00:26:19,300 --> 00:26:22,340
incredibly easy to use it's there is no

622
00:26:22,340 --> 00:26:27,350
learning curve at all CC surf like it

623
00:26:27,350 --> 00:26:30,980
was preventing a sea surface X that used

624
00:26:30,980 --> 00:26:32,570
to be embedded in Express they moved it

625
00:26:32,570 --> 00:26:34,200
into a separate module to make it

626
00:26:34,200 --> 00:26:35,790
easier to update that and not be bound

627
00:26:35,790 --> 00:26:39,410
to my mayor version iterations see surf

628
00:26:39,410 --> 00:26:43,350
generates a token we can define if this

629
00:26:43,350 --> 00:26:44,850
token should be stored in this session

630
00:26:44,850 --> 00:26:48,060
or in a cookie and then we populate we

631
00:26:48,060 --> 00:26:51,600
recurse body by using a middleware so we

632
00:26:51,600 --> 00:26:53,670
render a form like an input form or

633
00:26:53,670 --> 00:26:54,900
something like that we pass on that

634
00:26:54,900 --> 00:26:58,170
token and afterwards we actually check

635
00:26:58,170 --> 00:27:01,800
if that form submits we talk again so

636
00:27:01,800 --> 00:27:03,510
let's look at J template we actually see

637
00:27:03,510 --> 00:27:05,340
I just provide this one parameter over

638
00:27:05,340 --> 00:27:08,490
here and that's all I need to do so

639
00:27:08,490 --> 00:27:10,440
instead of having users that are able to

640
00:27:10,440 --> 00:27:12,930
resubmit the same form over and over

641
00:27:12,930 --> 00:27:15,360
again it'll just work once after that

642
00:27:15,360 --> 00:27:17,370
the token is invalidated and it's not

643
00:27:17,370 --> 00:27:20,340
usable anymore I've done a major step in

644
00:27:20,340 --> 00:27:23,660
securing my app and helping my users

645
00:27:23,660 --> 00:27:26,310
there is this thing called helmet which

646
00:27:26,310 --> 00:27:29,490
is a host food of security stuff you can

647
00:27:29,490 --> 00:27:31,380
use most of those modules also a

648
00:27:31,380 --> 00:27:33,360
standalone but it also comes as a

649
00:27:33,360 --> 00:27:35,730
prepackaged thing so if you go to

650
00:27:35,730 --> 00:27:38,400
helmets yes you will find out that it

651
00:27:38,400 --> 00:27:41,010
allows you to kind of either trigger

652
00:27:41,010 --> 00:27:44,130
some sensible default which is V button

653
00:27:44,130 --> 00:27:46,320
initialization or you can use certain

654
00:27:46,320 --> 00:27:50,010
features like turning off caching using

655
00:27:50,010 --> 00:27:52,020
a cross-site scripting filter frame

656
00:27:52,020 --> 00:27:55,110
guards which helps protecting iframes it

657
00:27:55,110 --> 00:27:57,330
comes with content security policy it

658
00:27:57,330 --> 00:27:58,650
comes with a lot of those kind of things

659
00:27:58,650 --> 00:28:00,900
which might be a bit difficult to handle

660
00:28:00,900 --> 00:28:03,260
on your site and it just does it for you

661
00:28:03,260 --> 00:28:05,880
cool thing about helmet is it also works

662
00:28:05,880 --> 00:28:08,640
a co-op and so if you're into that there

663
00:28:08,640 --> 00:28:12,540
you go then Lascar that's actually a

664
00:28:12,540 --> 00:28:14,430
module that paper has released it's part

665
00:28:14,430 --> 00:28:17,730
of our croco suit and norske can be used

666
00:28:17,730 --> 00:28:19,740
as a standalone which is very similar to

667
00:28:19,740 --> 00:28:22,980
a helmet as well so you would mount it

668
00:28:22,980 --> 00:28:25,050
as a middleware on the application level

669
00:28:25,050 --> 00:28:28,560
of your app and it comes again with C

670
00:28:28,560 --> 00:28:30,270
surf protection with content security

671
00:28:30,270 --> 00:28:35,910
policy with frame guards PvP cross-site

672
00:28:35,910 --> 00:28:37,770
scripting all these kind of good things

673
00:28:37,770 --> 00:28:40,890
which we saw Leo as top 10 list right so

674
00:28:40,890 --> 00:28:42,660
we don't necessarily always have to deal

675
00:28:42,660 --> 00:28:45,000
with all the different issues it acts

676
00:28:45,000 --> 00:28:46,950
actually sometimes are sensible to use

677
00:28:46,950 --> 00:28:48,210
some of these kind of things

678
00:28:48,210 --> 00:28:51,480
I cannot tell you what's better if you

679
00:28:51,480 --> 00:28:52,350
should go for Hannah

680
00:28:52,350 --> 00:28:54,539
Eliska look at both they are both really

681
00:28:54,539 --> 00:28:56,639
popularity moments I think both are

682
00:28:56,639 --> 00:28:59,039
great and Luca is also available for

683
00:28:59,039 --> 00:29:03,389
Cora now both of them work is middleware

684
00:29:03,389 --> 00:29:05,429
so we should probably look at middleware

685
00:29:05,429 --> 00:29:07,289
there are three different types of

686
00:29:07,289 --> 00:29:09,330
Express middleware that we can tap into

687
00:29:09,330 --> 00:29:11,549
right application level and that is

688
00:29:11,549 --> 00:29:12,869
something that we've seen just with

689
00:29:12,869 --> 00:29:16,559
lower Lascar and with habit there is

690
00:29:16,559 --> 00:29:19,139
root level stuff so we could probably

691
00:29:19,139 --> 00:29:21,929
check if every user that goes to slash

692
00:29:21,929 --> 00:29:25,080
admin is actually an admin or not and

693
00:29:25,080 --> 00:29:27,269
then we can obviously do error handling

694
00:29:27,269 --> 00:29:29,999
middle where we can create fully check

695
00:29:29,999 --> 00:29:32,399
errors make sure those are our errors

696
00:29:32,399 --> 00:29:34,799
and not pretty much just consumed in

697
00:29:34,799 --> 00:29:37,470
somewhere and I'll really love our

698
00:29:37,470 --> 00:29:39,389
Express handle sets because we can just

699
00:29:39,389 --> 00:29:41,220
go from middleware to middleware to

700
00:29:41,220 --> 00:29:43,259
middleware and gracefully go through

701
00:29:43,259 --> 00:29:45,059
with chain of your friends kind of

702
00:29:45,059 --> 00:29:47,909
functions so if you want to write a

703
00:29:47,909 --> 00:29:49,590
custom middleware like an authentication

704
00:29:49,590 --> 00:29:51,629
middleware the tracks is the users of

705
00:29:51,629 --> 00:29:55,200
indicated it is as simple as writing a

706
00:29:55,200 --> 00:29:58,529
new function that has a request a

707
00:29:58,529 --> 00:30:01,830
response and an object called next which

708
00:30:01,830 --> 00:30:03,629
is going to be the next function that's

709
00:30:03,629 --> 00:30:06,749
going to be in a chain of commands you

710
00:30:06,749 --> 00:30:09,570
just throw that into the get request or

711
00:30:09,570 --> 00:30:11,249
to be post request and so on or you

712
00:30:11,249 --> 00:30:13,950
mount it as application level which is

713
00:30:13,950 --> 00:30:16,320
at the bottom this is really awesome I

714
00:30:16,320 --> 00:30:18,929
think it is super variable and something

715
00:30:18,929 --> 00:30:20,610
that can be used for a lot of different

716
00:30:20,610 --> 00:30:22,259
things obviously not just authentication

717
00:30:22,259 --> 00:30:26,999
and not just security an amazing example

718
00:30:26,999 --> 00:30:30,389
for using this stuff is Passport anyone

719
00:30:30,389 --> 00:30:31,879
use passport before

720
00:30:31,879 --> 00:30:34,409
awesome so you have probably the guys

721
00:30:34,409 --> 00:30:36,240
that's have been working with off and

722
00:30:36,240 --> 00:30:37,679
off too before and we're like I can't

723
00:30:37,679 --> 00:30:41,759
deal with this so passports comes what

724
00:30:41,759 --> 00:30:44,360
is what they call strategies and

725
00:30:44,360 --> 00:30:46,200
strategies can be a lot of different

726
00:30:46,200 --> 00:30:48,899
things between I have a strategy for

727
00:30:48,899 --> 00:30:51,090
connecting to a specific service like

728
00:30:51,090 --> 00:30:53,730
Twitter or something more open like

729
00:30:53,730 --> 00:30:56,609
let's say to a standard like or two so I

730
00:30:56,609 --> 00:30:59,429
can say hey passport please use this off

731
00:30:59,429 --> 00:31:02,100
to strategy talk to that server

732
00:31:02,100 --> 00:31:03,840
and handle user login and authentication

733
00:31:03,840 --> 00:31:08,250
authorization for me or I can define

734
00:31:08,250 --> 00:31:10,350
what they call a local strategy which

735
00:31:10,350 --> 00:31:11,850
comes down to more of the basic

736
00:31:11,850 --> 00:31:13,410
authentication that we've done four

737
00:31:13,410 --> 00:31:16,380
years already so if I want to do that I

738
00:31:16,380 --> 00:31:18,840
want to draw your attention to two two

739
00:31:18,840 --> 00:31:20,880
lines over here so this would be an

740
00:31:20,880 --> 00:31:24,150
example using passwords with a local

741
00:31:24,150 --> 00:31:26,850
strategy and MongoDB in order to handle

742
00:31:26,850 --> 00:31:29,640
user authentication we see in the first

743
00:31:29,640 --> 00:31:31,650
line that again we just use middleware

744
00:31:31,650 --> 00:31:34,440
we initialize that middleware and we use

745
00:31:34,440 --> 00:31:36,330
the local strategy which expects and

746
00:31:36,330 --> 00:31:39,120
username and the password and all that

747
00:31:39,120 --> 00:31:42,380
we really really care about is then

748
00:31:42,380 --> 00:31:45,570
using that a different kind of methods

749
00:31:45,570 --> 00:31:47,730
so if we look at the route like slash

750
00:31:47,730 --> 00:31:49,740
login it obviously makes sense that we

751
00:31:49,740 --> 00:31:52,920
go for passports authenticate which is

752
00:31:52,920 --> 00:31:56,580
going to use the local strategy and then

753
00:31:56,580 --> 00:31:59,190
in this local strategy if we perform

754
00:31:59,190 --> 00:32:02,160
that if we find the user or if the user

755
00:32:02,160 --> 00:32:05,040
name and the password match the request

756
00:32:05,040 --> 00:32:07,050
body is going to be populated with a

757
00:32:07,050 --> 00:32:09,360
couple of different details so it's

758
00:32:09,360 --> 00:32:11,700
always in request dot user and that is

759
00:32:11,700 --> 00:32:13,950
something that is very helpful at the

760
00:32:13,950 --> 00:32:15,810
bottom you see that passport actually

761
00:32:15,810 --> 00:32:17,640
comes with a bunch of different redirect

762
00:32:17,640 --> 00:32:20,340
flows so passport even handles stuff for

763
00:32:20,340 --> 00:32:24,150
you like invalid passport expired logins

764
00:32:24,150 --> 00:32:25,920
and all that stuff which is really

765
00:32:25,920 --> 00:32:27,660
really variable because you don't have

766
00:32:27,660 --> 00:32:32,130
to do it on your site there is this

767
00:32:32,130 --> 00:32:34,680
project that they call node secure node

768
00:32:34,680 --> 00:32:36,360
security policy and node security

769
00:32:36,360 --> 00:32:40,170
project and it is not just an amazing

770
00:32:40,170 --> 00:32:42,300
block and a newsletter that tells you

771
00:32:42,300 --> 00:32:43,950
about about different weaknesses and

772
00:32:43,950 --> 00:32:45,450
issues that are floating around at the

773
00:32:45,450 --> 00:32:48,140
moment but it is also a command-line

774
00:32:48,140 --> 00:32:51,060
executable that you can install and that

775
00:32:51,060 --> 00:32:53,010
is going to look at your package raisin

776
00:32:53,010 --> 00:32:55,860
or at your shrink-wrap and tells you

777
00:32:55,860 --> 00:32:59,010
about packages that you use that are

778
00:32:59,010 --> 00:33:01,680
vulnerable at the moment or used to be

779
00:33:01,680 --> 00:33:04,620
warned about so you can check if we code

780
00:33:04,620 --> 00:33:06,210
that you use at the moment and all the

781
00:33:06,210 --> 00:33:09,000
modules that you rely on our secure or

782
00:33:09,000 --> 00:33:12,150
not and that is a very kind of useful

783
00:33:12,150 --> 00:33:14,520
thing right and is super cheap to do it

784
00:33:14,520 --> 00:33:15,179
is so easy

785
00:33:15,179 --> 00:33:17,339
and a lot of people sadly don't know

786
00:33:17,339 --> 00:33:19,409
about it yet so definitely have a look

787
00:33:19,409 --> 00:33:23,869
at that I really enjoy using this then

788
00:33:23,869 --> 00:33:26,749
we obviously talk about stuff like

789
00:33:26,749 --> 00:33:29,369
passwords and we all kind of agree that

790
00:33:29,369 --> 00:33:30,809
passports are not really usable

791
00:33:30,809 --> 00:33:33,809
anymore passwords are no fun they have

792
00:33:33,809 --> 00:33:35,639
all those kind of key issues that lead

793
00:33:35,639 --> 00:33:39,059
to user data leaking so we look at our

794
00:33:39,059 --> 00:33:41,759
authentication methods like let's say o

795
00:33:41,759 --> 00:33:44,369
and we kind of agree that is good but

796
00:33:44,369 --> 00:33:46,049
sometimes a bit clunky to implement and

797
00:33:46,049 --> 00:33:47,429
sometimes it's just a bit too much

798
00:33:47,429 --> 00:33:49,589
because sometimes I simply want to login

799
00:33:49,589 --> 00:33:52,649
users so why don't we get rid of

800
00:33:52,649 --> 00:33:54,599
passwords and go for password less of

801
00:33:54,599 --> 00:33:57,419
Education there's actually two to three

802
00:33:57,419 --> 00:33:58,969
companies that push this right now

803
00:33:58,969 --> 00:34:03,570
amongst them is Twitter Yahoo and slowly

804
00:34:03,570 --> 00:34:05,190
Facebook tends to go into the same

805
00:34:05,190 --> 00:34:07,469
direction so they say why don't you just

806
00:34:07,469 --> 00:34:10,349
use one-time tokens that are valid for a

807
00:34:10,349 --> 00:34:12,869
couple of minutes that you receive yeah

808
00:34:12,869 --> 00:34:17,010
via text message or a via email I use

809
00:34:17,010 --> 00:34:19,470
those tokens I enter them I am logged in

810
00:34:19,470 --> 00:34:24,299
and by doing that I skip all the issues

811
00:34:24,299 --> 00:34:26,520
because replay attacks don't work

812
00:34:26,520 --> 00:34:29,220
anymore the password that you sent me is

813
00:34:29,220 --> 00:34:30,629
probably more secure than something that

814
00:34:30,629 --> 00:34:32,369
I might come up with if I don't use a

815
00:34:32,369 --> 00:34:35,069
password manager and the user experience

816
00:34:35,069 --> 00:34:37,649
is actually pretty good so I feel like

817
00:34:37,649 --> 00:34:39,659
password open as a hospitalist

818
00:34:39,659 --> 00:34:41,639
authentication needs to get a bit more

819
00:34:41,639 --> 00:34:43,740
attention because it is really a fun

820
00:34:43,740 --> 00:34:47,669
user experience then there is this

821
00:34:47,669 --> 00:34:50,250
project that is called the OAuth node

822
00:34:50,250 --> 00:34:53,579
goat which is a big big project that

823
00:34:53,579 --> 00:34:55,710
concentrates on highlighting different

824
00:34:55,710 --> 00:34:59,279
issues so the top ten list that I've

825
00:34:59,279 --> 00:35:01,200
been showing before with cross-site

826
00:35:01,200 --> 00:35:03,690
scripting see surfer Tex injection and

827
00:35:03,690 --> 00:35:06,960
so on they actually allow you to use a

828
00:35:06,960 --> 00:35:10,349
real life application and to mess with

829
00:35:10,349 --> 00:35:12,089
that application so you can try out

830
00:35:12,089 --> 00:35:14,760
those vulnerabilities and it tells you

831
00:35:14,760 --> 00:35:17,819
exactly how to fix them I highly

832
00:35:17,819 --> 00:35:19,920
recommend going there checking it out it

833
00:35:19,920 --> 00:35:21,660
is really valuable and it really helps

834
00:35:21,660 --> 00:35:23,579
understanding these concepts much much

835
00:35:23,579 --> 00:35:26,330
much better

836
00:35:26,340 --> 00:35:28,440
then again note security I've been

837
00:35:28,440 --> 00:35:31,440
talking on NSP which is the executable

838
00:35:31,440 --> 00:35:33,480
that they have they have a newsletter

839
00:35:33,480 --> 00:35:37,140
and they have a block so and they also

840
00:35:37,140 --> 00:35:39,030
have a good Twitter account so you might

841
00:35:39,030 --> 00:35:42,270
want to look at those two and subscribe

842
00:35:42,270 --> 00:35:44,100
to it because it's a very easy way to

843
00:35:44,100 --> 00:35:45,780
stay up to date I've been talking about

844
00:35:45,780 --> 00:35:48,300
V Hydra initially and I said we are in

845
00:35:48,300 --> 00:35:50,040
this treadmill with we are a bit like

846
00:35:50,040 --> 00:35:52,980
donkey shot fighting a windmill it is an

847
00:35:52,980 --> 00:35:55,230
endless struggle because we always have

848
00:35:55,230 --> 00:35:57,180
a new thing coming up there's always a

849
00:35:57,180 --> 00:35:59,190
new vulnerability a new version that

850
00:35:59,190 --> 00:36:00,690
simply has a bug or something like that

851
00:36:00,690 --> 00:36:04,410
and we have to keep up with that so we

852
00:36:04,410 --> 00:36:07,260
can up our game very simply by using

853
00:36:07,260 --> 00:36:09,930
this kind of advice learning from these

854
00:36:09,930 --> 00:36:12,570
guys and simply applying what they tell

855
00:36:12,570 --> 00:36:17,550
us we've been looking at a bunch of

856
00:36:17,550 --> 00:36:20,250
different standards like all of open ID

857
00:36:20,250 --> 00:36:22,500
oak mighty Kinect and they all try to

858
00:36:22,500 --> 00:36:24,390
kind of cater to different form factors

859
00:36:24,390 --> 00:36:27,480
if you look at all of one all of one

860
00:36:27,480 --> 00:36:30,000
that then didn't even think about mobile

861
00:36:30,000 --> 00:36:31,860
devices it didn't think about embedded

862
00:36:31,860 --> 00:36:34,320
and fingerprint detection and all that

863
00:36:34,320 --> 00:36:35,910
stuff that was simply not a thing back

864
00:36:35,910 --> 00:36:40,170
then because that was 2007 oh of to the

865
00:36:40,170 --> 00:36:42,600
mainframe work got released in 2012 and

866
00:36:42,600 --> 00:36:46,140
a lot of strange since then as well open

867
00:36:46,140 --> 00:36:47,940
ID is dead

868
00:36:47,940 --> 00:36:51,060
open ID had more than a billion users at

869
00:36:51,060 --> 00:36:53,850
its prime now if you go to my oak my

870
00:36:53,850 --> 00:36:56,040
deed calm you will see that beside is

871
00:36:56,040 --> 00:36:59,550
not even existent anymore but still

872
00:36:59,550 --> 00:37:01,770
sometimes we need this accessible

873
00:37:01,770 --> 00:37:04,680
service or a standard that works across

874
00:37:04,680 --> 00:37:07,320
all different form factors from mobile

875
00:37:07,320 --> 00:37:09,990
phone to desktop to the Internet

876
00:37:09,990 --> 00:37:12,030
connected fridge and that's where Fido

877
00:37:12,030 --> 00:37:13,830
seems to come in which is an alliance

878
00:37:13,830 --> 00:37:16,440
between blackberry Google Microsoft

879
00:37:16,440 --> 00:37:19,770
PayPal eBay a lot of different big big

880
00:37:19,770 --> 00:37:21,320
companies that try to solve

881
00:37:21,320 --> 00:37:23,730
authentication by either offering

882
00:37:23,730 --> 00:37:26,910
password authentication or two-factor of

883
00:37:26,910 --> 00:37:29,750
an occasion that is nicely standardized

884
00:37:29,750 --> 00:37:33,780
and if we look at security we can

885
00:37:33,780 --> 00:37:35,310
actually boil it down to a couple of

886
00:37:35,310 --> 00:37:39,060
very very simple concepts if we look at

887
00:37:39,060 --> 00:37:39,930
those mekin

888
00:37:39,930 --> 00:37:42,360
and if we want to ensure that the user

889
00:37:42,360 --> 00:37:44,040
stays safe and this is pretty much a

890
00:37:44,040 --> 00:37:46,530
summary for to factor of negation we end

891
00:37:46,530 --> 00:37:49,290
up with something the user has which can

892
00:37:49,290 --> 00:37:52,470
be a token which can be a fingerprint

893
00:37:52,470 --> 00:37:54,110
detector or something like that

894
00:37:54,110 --> 00:37:56,490
something you know which can be your

895
00:37:56,490 --> 00:37:59,640
password and something you are which

896
00:37:59,640 --> 00:38:01,650
comes down again to your identity and

897
00:38:01,650 --> 00:38:04,530
those three simple things they've been

898
00:38:04,530 --> 00:38:06,180
floating around in the internet for

899
00:38:06,180 --> 00:38:07,770
years already you will find articles

900
00:38:07,770 --> 00:38:10,350
from Stanford and so on from back in

901
00:38:10,350 --> 00:38:13,020
1995 we're very talk about these

902
00:38:13,020 --> 00:38:15,390
concepts and they are still not really

903
00:38:15,390 --> 00:38:17,880
popularly used with a bid I think that's

904
00:38:17,880 --> 00:38:21,540
a bit of an issue and obviously we can

905
00:38:21,540 --> 00:38:23,490
make it just harder to access our

906
00:38:23,490 --> 00:38:26,250
services and we can enforce very hard

907
00:38:26,250 --> 00:38:28,260
core passwords and we can make it really

908
00:38:28,260 --> 00:38:30,570
horrible to use our service but that's

909
00:38:30,570 --> 00:38:33,000
not what we want there's always a

910
00:38:33,000 --> 00:38:35,070
trade-off between security and user

911
00:38:35,070 --> 00:38:38,910
experience so we should try to not force

912
00:38:38,910 --> 00:38:41,250
our users to suffer because we want to

913
00:38:41,250 --> 00:38:43,350
protect the resources we can still

914
00:38:43,350 --> 00:38:46,230
create delightful user experiences while

915
00:38:46,230 --> 00:38:48,750
still protecting them and that's where

916
00:38:48,750 --> 00:38:51,720
proper hashing for encryption where all

917
00:38:51,720 --> 00:38:53,910
these things come in and I feel a lot of

918
00:38:53,910 --> 00:38:55,980
those changes that I presented today are

919
00:38:55,980 --> 00:38:58,530
really simple to implement they are

920
00:38:58,530 --> 00:39:00,810
really really easy to kind of use and

921
00:39:00,810 --> 00:39:04,200
they up our game they help us helping

922
00:39:04,200 --> 00:39:07,620
our users and with that I want to leave

923
00:39:07,620 --> 00:39:09,840
some time for questions thank you so

924
00:39:09,840 --> 00:39:11,070
much for your attention thanks for

925
00:39:11,070 --> 00:39:15,930
Thomas heavier for having me hi my name

926
00:39:15,930 --> 00:39:18,900
is and you short these top 10 security

927
00:39:18,900 --> 00:39:21,300
it starts right in my organization also

928
00:39:21,300 --> 00:39:23,310
security team is very finicky about all

929
00:39:23,310 --> 00:39:26,100
these so do we need to take care of all

930
00:39:26,100 --> 00:39:27,600
these or you want to prioritize like

931
00:39:27,600 --> 00:39:30,000
among all these ten they should be like

932
00:39:30,000 --> 00:39:32,580
top five we should be really you know

933
00:39:32,580 --> 00:39:35,190
fixing that so I feel like a lot of

934
00:39:35,190 --> 00:39:36,870
those top ten issues that we looked at

935
00:39:36,870 --> 00:39:39,060
before are actually very cheap wins for

936
00:39:39,060 --> 00:39:41,100
us because they are very very easy to

937
00:39:41,100 --> 00:39:43,260
deal with so if we look at our unknown

938
00:39:43,260 --> 00:39:45,060
applications and a lot of the features

939
00:39:45,060 --> 00:39:47,130
that express rings and where the

940
00:39:47,130 --> 00:39:49,110
middleware comes in like passport like

941
00:39:49,110 --> 00:39:52,170
helmet like Lowe's car and so on it is

942
00:39:52,170 --> 00:39:53,710
actually very easy to deal with

943
00:39:53,710 --> 00:39:56,589
right so I feel we should at least try

944
00:39:56,589 --> 00:39:58,960
to cover those top ten and then even

945
00:39:58,960 --> 00:40:00,849
look at the broader scope other issues

946
00:40:00,849 --> 00:40:03,430
and see if we can do something on top of

947
00:40:03,430 --> 00:40:05,589
what we do right now but the field those

948
00:40:05,589 --> 00:40:08,050
top 10 are very very easy to deal with

949
00:40:08,050 --> 00:40:10,240
right and a lot of them are actually

950
00:40:10,240 --> 00:40:12,460
best practices like using strictmode

951
00:40:12,460 --> 00:40:15,339
not just evaluating every regex that we

952
00:40:15,339 --> 00:40:17,230
get those are sometimes very simple

953
00:40:17,230 --> 00:40:19,810
things and very easy advice that just

954
00:40:19,810 --> 00:40:21,280
simply needs to actually be followed

955
00:40:21,280 --> 00:40:23,710
right so definitely have a look at those

