1
00:00:05,750 --> 00:00:09,510

check one two check one two you hear me

2
00:00:09,510 --> 00:00:13,250
out there yeah testing testing testing

3
00:00:13,250 --> 00:00:20,550
all right everybody smile you guys all

4
00:00:20,550 --> 00:00:22,560
signed the photo waiver right you get to

5
00:00:22,560 --> 00:00:25,650
use your photo in perpetuity all right

6
00:00:25,650 --> 00:00:28,439
so maybe m daugherty I'm an architect at

7
00:00:28,439 --> 00:00:29,970
a jealous asst working on our guest

8
00:00:29,970 --> 00:00:33,719
platform and product my twitter handle

9
00:00:33,719 --> 00:00:36,630
find me on linkedin my very seldomly

10
00:00:36,630 --> 00:00:39,270
updated blog a little bit of background

11
00:00:39,270 --> 00:00:41,760
about me I've been doing software

12
00:00:41,760 --> 00:00:43,590
engineering in one form another since

13
00:00:43,590 --> 00:00:46,980
1996 the back my early background was in

14
00:00:46,980 --> 00:00:49,559
desktop and server technologies went

15
00:00:49,559 --> 00:00:51,989
through the whole classic asp asp.net

16
00:00:51,989 --> 00:00:55,320
PHP server side interpolated templates

17
00:00:55,320 --> 00:01:00,300
things like that I saw he started using

18
00:01:00,300 --> 00:01:02,579
javascript in 1995 when it was dropped

19
00:01:02,579 --> 00:01:04,680
in netscape navigator to i was a college

20
00:01:04,680 --> 00:01:07,260
student at the time i used it casually

21
00:01:07,260 --> 00:01:11,070
for the next 15 years like that and i

22
00:01:11,070 --> 00:01:12,930
thought i knew a reasonable amount about

23
00:01:12,930 --> 00:01:14,549
the language and turns out i knew very

24
00:01:14,549 --> 00:01:16,729
little about it beyond Serpas syntax

25
00:01:16,729 --> 00:01:20,250
around 1997 i started using libraries

26
00:01:20,250 --> 00:01:23,100
like prototype script oculus jquery

27
00:01:23,100 --> 00:01:24,960
things like that that kind of jquery in

28
00:01:24,960 --> 00:01:26,549
particular being an abstraction on top

29
00:01:26,549 --> 00:01:28,680
of the various browser inconsistencies

30
00:01:28,680 --> 00:01:30,960
got me interested enough in javascript

31
00:01:30,960 --> 00:01:32,579
to actually take a deeper look and then

32
00:01:32,579 --> 00:01:34,110
ice moved into frameworks like backbone

33
00:01:34,110 --> 00:01:38,130
knockout number things like that i'm an

34
00:01:38,130 --> 00:01:39,930
organizer for my local javascript meetup

35
00:01:39,930 --> 00:01:41,340
I'm based in sin Santa Barbara

36
00:01:41,340 --> 00:01:44,130
California and I got promoted to

37
00:01:44,130 --> 00:01:45,899
architect in january of this year which

38
00:01:45,899 --> 00:01:47,640
means i do less coding then i would like

39
00:01:47,640 --> 00:01:49,799
I spend probably less than fifty percent

40
00:01:49,799 --> 00:01:51,570
of my time coding now and it's not all

41
00:01:51,570 --> 00:01:53,430
JavaScript you know I have an emphasis

42
00:01:53,430 --> 00:01:55,020
on the front end but I do lots of stuff

43
00:01:55,020 --> 00:01:57,360
with docker an ansible java and mongodb

44
00:01:57,360 --> 00:01:59,909
and things like that so like i said i

45
00:01:59,909 --> 00:02:02,399
took a deep dive in around 2010 in the

46
00:02:02,399 --> 00:02:04,079
JavaScript I found it really fun to use

47
00:02:04,079 --> 00:02:06,659
and expressive and share a little bit

48
00:02:06,659 --> 00:02:09,899
about framework fatigue so there's a

49
00:02:09,899 --> 00:02:12,360
handful of popular frameworks if you

50
00:02:12,360 --> 00:02:13,950
don't see your favorite framework

51
00:02:13,950 --> 00:02:15,720
up here let me know so that I can

52
00:02:15,720 --> 00:02:18,720
include it in future iterations of this

53
00:02:18,720 --> 00:02:21,150
talk but it's daunting I there's a lot

54
00:02:21,150 --> 00:02:22,980
of them it's hard to figure out what's

55
00:02:22,980 --> 00:02:24,810
what and it seems like a new one drops

56
00:02:24,810 --> 00:02:27,209
every day it seems almost like these

57
00:02:27,209 --> 00:02:29,190
frameworks are going under faster than

58
00:02:29,190 --> 00:02:32,340
the startups that use them so what do

59
00:02:32,340 --> 00:02:36,080
you do this one looks pretty cool right

60
00:02:36,080 --> 00:02:38,340
vanilla j/s everybody's using it

61
00:02:38,340 --> 00:02:41,370
Microsoft Google Yahoo the sad reality

62
00:02:41,370 --> 00:02:43,170
is that there's probably a lot of people

63
00:02:43,170 --> 00:02:44,760
coming to this for the first time that

64
00:02:44,760 --> 00:02:46,680
look at something like this and think

65
00:02:46,680 --> 00:02:49,110
it's legit right and it is vanilla

66
00:02:49,110 --> 00:02:50,790
JavaScript is a legit thing but it's not

67
00:02:50,790 --> 00:02:54,090
a framework well you may suffer from

68
00:02:54,090 --> 00:02:57,390
framework fatigue talk about some

69
00:02:57,390 --> 00:03:03,160
symptoms of framework fatigue confusion

70
00:03:03,170 --> 00:03:05,430
so here's a bunch of concepts that are

71
00:03:05,430 --> 00:03:07,560
in popular frameworks one way reactive

72
00:03:07,560 --> 00:03:09,480
data flow right this is probably the

73
00:03:09,480 --> 00:03:11,849
most important contribution that react

74
00:03:11,849 --> 00:03:13,440
is brought to the table everyone talks

75
00:03:13,440 --> 00:03:15,599
about the virtual Dom and the speed but

76
00:03:15,599 --> 00:03:17,040
the real contribution i think is

77
00:03:17,040 --> 00:03:20,010
popularizing this idea to a data binding

78
00:03:20,010 --> 00:03:21,389
which is popular and a lot of different

79
00:03:21,389 --> 00:03:24,450
frameworks not necessarily good it's

80
00:03:24,450 --> 00:03:25,889
hard to reason about when you're states

81
00:03:25,889 --> 00:03:27,150
being manipulated all over an

82
00:03:27,150 --> 00:03:29,519
application but it's got a great deal is

83
00:03:29,519 --> 00:03:31,549
factored upfront micro frameworks

84
00:03:31,549 --> 00:03:35,250
virtual Dom extensible HTML decoupled

85
00:03:35,250 --> 00:03:37,079
event-driven architecture and the

86
00:03:37,079 --> 00:03:39,569
various flavors of client-side NBC it

87
00:03:39,569 --> 00:03:41,040
turns out these all actually mean

88
00:03:41,040 --> 00:03:42,780
something these are all important

89
00:03:42,780 --> 00:03:44,370
paradigms if these frameworks and Braes

90
00:03:44,370 --> 00:03:46,590
but it gets confusing gets really hard

91
00:03:46,590 --> 00:03:47,910
to keep up with these things and to

92
00:03:47,910 --> 00:03:49,680
differentiate them and especially for

93
00:03:49,680 --> 00:03:59,540
newcomers ambivalence

94
00:03:59,550 --> 00:04:02,260
another framework really I mean do we

95
00:04:02,260 --> 00:04:04,240
really have to go through this again but

96
00:04:04,240 --> 00:04:06,070
mine's the right framework who cares

97
00:04:06,070 --> 00:04:09,010
about your framework my framework does

98
00:04:09,010 --> 00:04:11,470
the job well there's a bunch of

99
00:04:11,470 --> 00:04:14,260
frameworks from 1990s Java that still do

100
00:04:14,260 --> 00:04:15,730
the job but do we still need the people

101
00:04:15,730 --> 00:04:18,280
and do I even need a framework and this

102
00:04:18,280 --> 00:04:19,840
actually becomes a valid question

103
00:04:19,840 --> 00:04:21,760
especially now in the context of xmas

104
00:04:21,760 --> 00:04:24,220
crypt 2015 there's some language level

105
00:04:24,220 --> 00:04:26,530
enhancements that start to eat into some

106
00:04:26,530 --> 00:04:27,730
of the utilities and things like that

107
00:04:27,730 --> 00:04:30,070
that we have historically dependent on

108
00:04:30,070 --> 00:04:36,530
frameworks and libraries for skepticism

109
00:04:36,540 --> 00:04:38,920
so here's some claims that I just kind

110
00:04:38,920 --> 00:04:40,330
of scraped off the front page of some

111
00:04:40,330 --> 00:04:42,580
popular frameworks some of which may or

112
00:04:42,580 --> 00:04:44,800
may not be true but it's important to

113
00:04:44,800 --> 00:04:46,780
have some healthy skepticism going into

114
00:04:46,780 --> 00:04:48,130
it it's important to understand that

115
00:04:48,130 --> 00:04:50,830
just because your friend is developing

116
00:04:50,830 --> 00:04:52,750
with the right framework tells you that

117
00:04:52,750 --> 00:04:55,330
it's super spectacular magic you know

118
00:04:55,330 --> 00:04:56,980
auto magical thing doesn't mean it's the

119
00:04:56,980 --> 00:04:59,380
case right and it is important to

120
00:04:59,380 --> 00:05:01,330
approach these things with a healthy

121
00:05:01,330 --> 00:05:03,160
degree of skepticism right let yourself

122
00:05:03,160 --> 00:05:05,380
absorb some knowledge let yourself try

123
00:05:05,380 --> 00:05:07,210
these things out and see if these claims

124
00:05:07,210 --> 00:05:10,600
are actually true reduce capacity for

125
00:05:10,600 --> 00:05:13,600
hype and marketing lingo I'm cured make

126
00:05:13,600 --> 00:05:18,430
it stop so here again these are great

127
00:05:18,430 --> 00:05:19,960
right off the front page of a bunch of

128
00:05:19,960 --> 00:05:21,790
popular libraries and frameworks they

129
00:05:21,790 --> 00:05:25,000
sound amazing you know I want to use

130
00:05:25,000 --> 00:05:30,170
half of these I've used a couple of them

131
00:05:30,180 --> 00:05:35,710
but are they true is any of this true we

132
00:05:35,710 --> 00:05:37,750
see what the symptoms look like to talk

133
00:05:37,750 --> 00:05:40,870
about treatment first treatment I have

134
00:05:40,870 --> 00:05:45,430
is to go native what I mean by that is

135
00:05:45,430 --> 00:05:48,700
that all things being equal all other

136
00:05:48,700 --> 00:05:50,740
considerations taken into account you

137
00:05:50,740 --> 00:05:52,180
should favor the built-ins the standard

138
00:05:52,180 --> 00:05:53,890
library that JavaScript provides over

139
00:05:53,890 --> 00:05:55,570
their equivalents and frameworks and

140
00:05:55,570 --> 00:05:58,690
libraries some of these are array

141
00:05:58,690 --> 00:06:01,479
methods array for each there's you know

142
00:06:01,479 --> 00:06:03,340
there's a raging debate and I have it

143
00:06:03,340 --> 00:06:05,070
with some of my developers on my teams

144
00:06:05,070 --> 00:06:07,630
who just automatically reach for a low

145
00:06:07,630 --> 00:06:09,760
dash or underscore when they want to do

146
00:06:09,760 --> 00:06:12,880
revelation particularly for each and you

147
00:06:12,880 --> 00:06:14,170
know the arguments are one of two

148
00:06:14,170 --> 00:06:16,390
flavors usually the first flavor is well

149
00:06:16,390 --> 00:06:18,760
it's faster wood ash and underscore

150
00:06:18,760 --> 00:06:20,380
implementations are faster than native

151
00:06:20,380 --> 00:06:22,390
array dot for each and that's true

152
00:06:22,390 --> 00:06:25,120
generally the jazz performance is a

153
00:06:25,120 --> 00:06:28,180
little slower but my argument is that

154
00:06:28,180 --> 00:06:29,440
unless you're dealing with a really

155
00:06:29,440 --> 00:06:31,630
large data set or performance is a

156
00:06:31,630 --> 00:06:34,420
critical path in your application you're

157
00:06:34,420 --> 00:06:36,250
prematurely optimizing if you're just

158
00:06:36,250 --> 00:06:37,780
grabbing this instantly and saying it's

159
00:06:37,780 --> 00:06:39,700
faster I don't think it's a valid

160
00:06:39,700 --> 00:06:41,890
argument if you know ahead of time that

161
00:06:41,890 --> 00:06:43,900
performance is critical then yeah you

162
00:06:43,900 --> 00:06:45,730
can justify that but in my next slide

163
00:06:45,730 --> 00:06:46,960
I'll talk about why that might not be

164
00:06:46,960 --> 00:06:49,360
the case either and the other argument

165
00:06:49,360 --> 00:06:52,540
for things like the for each method on

166
00:06:52,540 --> 00:06:54,640
lodash or underscore is that it can

167
00:06:54,640 --> 00:06:57,460
handle both arrays and objects it's kind

168
00:06:57,460 --> 00:06:58,840
of neat you have to worry about it itals

169
00:06:58,840 --> 00:07:00,670
no checking to write it'll just ignore

170
00:07:00,670 --> 00:07:03,730
it if it's no but I argue that with

171
00:07:03,730 --> 00:07:06,300
JavaScript being a weakly typed and

172
00:07:06,300 --> 00:07:08,830
dynamically typed language there's a lot

173
00:07:08,830 --> 00:07:10,690
of them certainly inherent right you can

174
00:07:10,690 --> 00:07:12,430
object can be of any type that gets

175
00:07:12,430 --> 00:07:15,670
passed around and if you can remove that

176
00:07:15,670 --> 00:07:18,520
uncertainty and be explicit about the

177
00:07:18,520 --> 00:07:20,170
intent to recode you're expecting an

178
00:07:20,170 --> 00:07:21,700
array using a ray method if you're

179
00:07:21,700 --> 00:07:23,410
expecting an object iterate over its

180
00:07:23,410 --> 00:07:25,600
keys it makes the code easier to reason

181
00:07:25,600 --> 00:07:27,130
about and understand for the developers

182
00:07:27,130 --> 00:07:30,190
which i think is more important you know

183
00:07:30,190 --> 00:07:32,710
a lot of times strong developers come to

184
00:07:32,710 --> 00:07:34,210
the table with a golden framework hammer

185
00:07:34,210 --> 00:07:35,980
or golden library hammer everything

186
00:07:35,980 --> 00:07:38,430
starts looking like a nail right and

187
00:07:38,430 --> 00:07:40,300
before you know what they've run rampant

188
00:07:40,300 --> 00:07:41,710
and they've got code that's no longer

189
00:07:41,710 --> 00:07:44,170
portable you know the cost of it the

190
00:07:44,170 --> 00:07:45,730
cost of switching between frameworks

191
00:07:45,730 --> 00:07:47,290
especially opinionated frameworks that

192
00:07:47,290 --> 00:07:52,070
are very prescriptive becomes expensive

193
00:07:52,080 --> 00:07:55,620
so there's one guy that works on my team

194
00:07:55,620 --> 00:07:58,180
super strong senior developer he comes

195
00:07:58,180 --> 00:07:59,260
from a background of server-side

196
00:07:59,260 --> 00:08:00,730
technologies and he jumped out on the

197
00:08:00,730 --> 00:08:02,740
front end a couple years ago as an

198
00:08:02,740 --> 00:08:05,290
angular dev and he's a very strong

199
00:08:05,290 --> 00:08:07,450
angular developer but he didn't take the

200
00:08:07,450 --> 00:08:09,610
time ahead of time to sort of you know

201
00:08:09,610 --> 00:08:11,830
get a solid foundation in JavaScript and

202
00:08:11,830 --> 00:08:14,860
we had a really interesting you know

203
00:08:14,860 --> 00:08:16,270
kind of learning experience for both of

204
00:08:16,270 --> 00:08:19,210
us so one of the patterns that I use as

205
00:08:19,210 --> 00:08:22,290
you can sort of emulate proxies from es6

206
00:08:22,290 --> 00:08:23,870
using meth

207
00:08:23,870 --> 00:08:25,910
that dropped in es5 so you write a

208
00:08:25,910 --> 00:08:28,870
factory factory takes an object and some

209
00:08:28,870 --> 00:08:31,310
interceptors essentially like the traps

210
00:08:31,310 --> 00:08:33,140
that you get in proxies and you

211
00:08:33,140 --> 00:08:35,060
basically just do an object get owned

212
00:08:35,060 --> 00:08:37,280
property names iterate over them right

213
00:08:37,280 --> 00:08:39,620
use an object define property and use

214
00:08:39,620 --> 00:08:41,090
getters and setters and then you can

215
00:08:41,090 --> 00:08:42,830
intercept those calls and do whatever

216
00:08:42,830 --> 00:08:45,560
you want with him so I already had some

217
00:08:45,560 --> 00:08:46,850
of this in the code base this guy came

218
00:08:46,850 --> 00:08:48,920
on board I submitted a pull request and

219
00:08:48,920 --> 00:08:50,300
you know we had this great learning

220
00:08:50,300 --> 00:08:51,890
moment this at home moment for him I

221
00:08:51,890 --> 00:08:54,590
think where he looked at that said I

222
00:08:54,590 --> 00:08:56,060
didn't know you could do that JavaScript

223
00:08:56,060 --> 00:08:58,520
and and it was a great it was a great

224
00:08:58,520 --> 00:08:59,990
opportunity for me to teach and for him

225
00:08:59,990 --> 00:09:01,430
to learn and for us to learn from one

226
00:09:01,430 --> 00:09:04,070
another and you know ever since that

227
00:09:04,070 --> 00:09:06,550
time I've always tried to steer him to

228
00:09:06,550 --> 00:09:08,870
you know this is not a question of

229
00:09:08,870 --> 00:09:11,000
should you use frameworks or not it's

230
00:09:11,000 --> 00:09:12,440
not a question of you know belittling

231
00:09:12,440 --> 00:09:14,240
their importance you know and that's a

232
00:09:14,240 --> 00:09:15,800
raging debate some say that frameworks

233
00:09:15,800 --> 00:09:17,330
are not worth the cost that they impose

234
00:09:17,330 --> 00:09:19,250
I'm not sure I agree with that I think

235
00:09:19,250 --> 00:09:21,560
there's it use cases but this is more

236
00:09:21,560 --> 00:09:23,630
learning the fundamentals getting a

237
00:09:23,630 --> 00:09:25,940
solid foundation and understanding when

238
00:09:25,940 --> 00:09:27,650
is the appropriate time to use a

239
00:09:27,650 --> 00:09:29,350
framework method or a framework utility

240
00:09:29,350 --> 00:09:34,550
versus a native method or utility so an

241
00:09:34,550 --> 00:09:36,740
object defined property has been around

242
00:09:36,740 --> 00:09:40,130
since es5 there's run into a lot of

243
00:09:40,130 --> 00:09:42,380
developers j/s debs that still aren't

244
00:09:42,380 --> 00:09:43,910
aware of some of these features that

245
00:09:43,910 --> 00:09:46,430
dropped in es5 the s5 was an incremental

246
00:09:46,430 --> 00:09:47,990
update to the language I'm assuming

247
00:09:47,990 --> 00:09:49,370
you're all in a JavaScript conference

248
00:09:49,370 --> 00:09:51,320
everyone knows what he s 5 is right and

249
00:09:51,320 --> 00:09:55,190
he will not know what he is 5 it so you

250
00:09:55,190 --> 00:09:56,300
know it took a while for some of these

251
00:09:56,300 --> 00:09:57,620
features to get out in the wild people

252
00:09:57,620 --> 00:09:58,970
were using polyfills because the

253
00:09:58,970 --> 00:10:00,260
browser's didn't support them but six

254
00:10:00,260 --> 00:10:01,610
years later there's still a lot of

255
00:10:01,610 --> 00:10:03,230
people that aren't aware that some of

256
00:10:03,230 --> 00:10:05,000
these features exists and there's some

257
00:10:05,000 --> 00:10:06,380
really good reflective meta programming

258
00:10:06,380 --> 00:10:09,620
tools in there around the object you

259
00:10:09,620 --> 00:10:13,760
know function bind when it dropped you

260
00:10:13,760 --> 00:10:15,560
know a lot of people obviously didn't

261
00:10:15,560 --> 00:10:16,670
want to use polyfills and they were

262
00:10:16,670 --> 00:10:19,220
already using underscore lodash i think

263
00:10:19,220 --> 00:10:21,140
at this point in time it's almost always

264
00:10:21,140 --> 00:10:23,060
better to use the native function

265
00:10:23,060 --> 00:10:25,670
prototype bind there's some new string

266
00:10:25,670 --> 00:10:28,070
methods that dropped in es6 versus using

267
00:10:28,070 --> 00:10:30,020
underscored out string for these things

268
00:10:30,020 --> 00:10:31,880
you know we get starts with includes end

269
00:10:31,880 --> 00:10:33,590
with and then that last one I have

270
00:10:33,590 --> 00:10:37,520
asterisks tag template literals template

271
00:10:37,520 --> 00:10:40,160
is sex are not enough by themselves to

272
00:10:40,160 --> 00:10:42,320
create a templating engine but when you

273
00:10:42,320 --> 00:10:44,510
combine them with tag functions all of a

274
00:10:44,510 --> 00:10:45,530
sudden it opens up a lot of

275
00:10:45,530 --> 00:10:47,660
possibilities now I think probably some

276
00:10:47,660 --> 00:10:49,160
of the popular templating engines will

277
00:10:49,160 --> 00:10:51,290
start using tag template literals to

278
00:10:51,290 --> 00:10:52,760
implement their engines and so that

279
00:10:52,760 --> 00:10:54,650
might be a moot point still worth

280
00:10:54,650 --> 00:10:56,570
learning still worth using if you want

281
00:10:56,570 --> 00:10:58,250
to you do like your own micro templating

282
00:10:58,250 --> 00:11:01,400
framework something like that so I

283
00:11:01,400 --> 00:11:05,240
mentioned performance so those are one

284
00:11:05,240 --> 00:11:07,370
of the classic arguments for underscore

285
00:11:07,370 --> 00:11:09,650
lodash is going to rights faster right

286
00:11:09,650 --> 00:11:11,540
and my argument is that performance

287
00:11:11,540 --> 00:11:14,990
really matters go native anyway this is

288
00:11:14,990 --> 00:11:17,090
probably as close as you to get to the

289
00:11:17,090 --> 00:11:19,700
most performant array iteration now this

290
00:11:19,700 --> 00:11:21,500
assumes that order doesn't matter it's

291
00:11:21,500 --> 00:11:22,520
going to go backwards through the array

292
00:11:22,520 --> 00:11:24,530
but it's still ought to be about the

293
00:11:24,530 --> 00:11:26,570
fastest implementation and it's just

294
00:11:26,570 --> 00:11:31,820
plain JavaScript my next treatment is to

295
00:11:31,820 --> 00:11:33,860
go deep a function within a function

296
00:11:33,860 --> 00:11:35,600
within a function you're going to need a

297
00:11:35,600 --> 00:11:38,750
powerful sedative for that so I

298
00:11:38,750 --> 00:11:42,110
recommend that you learn in depth

299
00:11:42,110 --> 00:11:45,230
everything that's already in es5 the s5

300
00:11:45,230 --> 00:11:47,480
is all still valid JavaScript it doesn't

301
00:11:47,480 --> 00:11:48,950
go away because we have a new

302
00:11:48,950 --> 00:11:51,800
specification and in fact everything in

303
00:11:51,800 --> 00:11:55,850
es2015 or es6 is a superset of es5 which

304
00:11:55,850 --> 00:11:57,830
means all that code is still valid you

305
00:11:57,830 --> 00:11:59,990
still need to understand it it won't

306
00:11:59,990 --> 00:12:01,760
suffice particularly if you're new to

307
00:12:01,760 --> 00:12:04,550
java script just to learn es6 you know

308
00:12:04,550 --> 00:12:06,530
there's the one versioning philosophy

309
00:12:06,530 --> 00:12:09,470
which means the minute you add es6 to an

310
00:12:09,470 --> 00:12:12,680
es5 codebase it's all es6 so you do need

311
00:12:12,680 --> 00:12:15,560
to learn es5 you know like i said es5

312
00:12:15,560 --> 00:12:18,770
dropped in 2009 and still a lot of jas

313
00:12:18,770 --> 00:12:20,540
devs today don't understand what's there

314
00:12:20,540 --> 00:12:23,780
or don't utilize what's there and then a

315
00:12:23,780 --> 00:12:25,610
lot of a new syntax that's dropped in

316
00:12:25,610 --> 00:12:28,700
es6 things like the structuring and the

317
00:12:28,700 --> 00:12:30,350
rest and spread operators things like

318
00:12:30,350 --> 00:12:32,180
that a lot of them are actually just

319
00:12:32,180 --> 00:12:34,070
terse concise syntax for things you can

320
00:12:34,070 --> 00:12:36,200
already do any s5 so it really is

321
00:12:36,200 --> 00:12:38,150
important to understand what it is you

322
00:12:38,150 --> 00:12:39,560
can do with the language before you add

323
00:12:39,560 --> 00:12:44,420
these syntax sugars on top of it other

324
00:12:44,420 --> 00:12:45,560
things that are really important to

325
00:12:45,560 --> 00:12:47,930
learn and the existing s5 codebase

326
00:12:47,930 --> 00:12:49,970
prototypal inheritance this is the one

327
00:12:49,970 --> 00:12:50,870
that trips most

328
00:12:50,870 --> 00:12:52,279
people are coming into JavaScript

329
00:12:52,279 --> 00:12:53,870
because it's so different from

330
00:12:53,870 --> 00:12:56,470
mainstream classical object orientation

331
00:12:56,470 --> 00:12:59,630
but what about classes javascript has

332
00:12:59,630 --> 00:13:03,920
classes now right well your classes are

333
00:13:03,920 --> 00:13:05,810
probably the most controversial drop in

334
00:13:05,810 --> 00:13:09,260
es6 I'm still sort of on the fence

335
00:13:09,260 --> 00:13:11,060
leaning towards negativity you know on

336
00:13:11,060 --> 00:13:12,800
the positive side you have this kind of

337
00:13:12,800 --> 00:13:14,540
friendly or syntax for classical Oh

338
00:13:14,540 --> 00:13:15,860
depths and it makes people that

339
00:13:15,860 --> 00:13:17,260
otherwise wouldn't look at the language

340
00:13:17,260 --> 00:13:20,360
possibly give it a first look you know

341
00:13:20,360 --> 00:13:21,830
also a lot of frameworks and libraries

342
00:13:21,830 --> 00:13:25,100
have been sort of trying to glom on this

343
00:13:25,100 --> 00:13:27,890
Oh classical syntax into JavaScript for

344
00:13:27,890 --> 00:13:29,779
years now and if the community is doing

345
00:13:29,779 --> 00:13:31,270
in any way and it's fractured

346
00:13:31,270 --> 00:13:33,710
standardizing it is a win right it makes

347
00:13:33,710 --> 00:13:36,860
tooling automated tooling easier on the

348
00:13:36,860 --> 00:13:39,560
flip side of that the syntax the

349
00:13:39,560 --> 00:13:41,720
syntactic sugar on top of prototypal

350
00:13:41,720 --> 00:13:43,700
inheritance and prototype genes is so

351
00:13:43,700 --> 00:13:45,230
different from the underlying semantics

352
00:13:45,230 --> 00:13:46,760
that it's kind of dangerous to those

353
00:13:46,760 --> 00:13:48,589
same Oh devs that come in saying this

354
00:13:48,589 --> 00:13:50,720
looks like I know classes right and then

355
00:13:50,720 --> 00:13:52,820
they start using it and they go this is

356
00:13:52,820 --> 00:13:57,800
not classes object.create is another

357
00:13:57,800 --> 00:13:59,779
feature that dropped in es5 I think most

358
00:13:59,779 --> 00:14:01,520
people are familiar with it but not a

359
00:14:01,520 --> 00:14:03,320
lot of people not as many people as I

360
00:14:03,320 --> 00:14:05,240
would like to see actually use it I

361
00:14:05,240 --> 00:14:07,130
think it's you know in many ways it's

362
00:14:07,130 --> 00:14:08,839
more superior than constructor based

363
00:14:08,839 --> 00:14:11,170
prototype James because you don't tie

364
00:14:11,170 --> 00:14:13,610
initiation instantiation of your objects

365
00:14:13,610 --> 00:14:15,230
together you can still use constructor

366
00:14:15,230 --> 00:14:17,150
functions with object.create it's just a

367
00:14:17,150 --> 00:14:19,310
more flexible way of doing things you

368
00:14:19,310 --> 00:14:20,390
should understand the difference between

369
00:14:20,390 --> 00:14:21,950
differential and concatenate of

370
00:14:21,950 --> 00:14:24,290
inheritance differential being prototype

371
00:14:24,290 --> 00:14:26,959
chains where an object differs from it's

372
00:14:26,959 --> 00:14:29,540
the members up its prototype chain and

373
00:14:29,540 --> 00:14:31,130
concatenate of inheritance which is

374
00:14:31,130 --> 00:14:32,779
essentially mixing where you can have

375
00:14:32,779 --> 00:14:35,839
multiple inheritance now javaScript

376
00:14:35,839 --> 00:14:38,180
being a multi-paradigm language the dual

377
00:14:38,180 --> 00:14:39,800
paradigm language has classical

378
00:14:39,800 --> 00:14:41,839
prototype or sorry prototype 00 and

379
00:14:41,839 --> 00:14:44,660
functional programming there's a lot of

380
00:14:44,660 --> 00:14:46,279
tenants to functional programming that

381
00:14:46,279 --> 00:14:47,750
aren't necessarily specific to

382
00:14:47,750 --> 00:14:49,610
JavaScript but it supports quite a few

383
00:14:49,610 --> 00:14:51,260
of them the most important is going to

384
00:14:51,260 --> 00:14:52,790
be first class in higher order functions

385
00:14:52,790 --> 00:14:55,190
you should certainly understand even if

386
00:14:55,190 --> 00:14:57,260
you don't even if you're not aware that

387
00:14:57,260 --> 00:14:59,120
it's functional programming you use

388
00:14:59,120 --> 00:15:00,310
lambdas all

389
00:15:00,310 --> 00:15:02,380
anyone that's use callbacks anonymous

390
00:15:02,380 --> 00:15:04,870
functions uses lambdas right we connect

391
00:15:04,870 --> 00:15:07,060
we have functors like mapreduce things

392
00:15:07,060 --> 00:15:11,200
like that pure functions are simply

393
00:15:11,200 --> 00:15:12,490
functions that have no side effects

394
00:15:12,490 --> 00:15:15,550
there javascript supports this and these

395
00:15:15,550 --> 00:15:17,440
two paradigms are critically important

396
00:15:17,440 --> 00:15:18,760
to understanding what you can do with

397
00:15:18,760 --> 00:15:20,589
the language in JavaScript you can

398
00:15:20,589 --> 00:15:22,930
program entirely in a functional style

399
00:15:22,930 --> 00:15:25,510
you can also program entirely in a

400
00:15:25,510 --> 00:15:27,310
procedural style you can also function

401
00:15:27,310 --> 00:15:29,470
entire program entirely in a prototype

402
00:15:29,470 --> 00:15:31,360
below style but more than likely you're

403
00:15:31,360 --> 00:15:32,740
going to be programming in a hybrid of

404
00:15:32,740 --> 00:15:37,890
these you should understand closures and

405
00:15:37,890 --> 00:15:39,880
variants of them like immediate

406
00:15:39,880 --> 00:15:41,710
immediate Lee book function expressions

407
00:15:41,710 --> 00:15:45,670
the module pattern type coercion whether

408
00:15:45,670 --> 00:15:48,490
or not you leverage it Kyle Simpson has

409
00:15:48,490 --> 00:15:51,100
a great a great lecture on using type

410
00:15:51,100 --> 00:15:52,750
coercion to your advantage and he's a

411
00:15:52,750 --> 00:15:54,910
big proponent of it most people's fear

412
00:15:54,910 --> 00:15:56,200
clear of it but you should understand

413
00:15:56,200 --> 00:15:58,360
how it works type conversion if you

414
00:15:58,360 --> 00:16:00,250
understand it you won't get caught up in

415
00:16:00,250 --> 00:16:02,710
the pitfalls she'd understand like

416
00:16:02,710 --> 00:16:06,010
sickle scope and hoisting so in es6 we

417
00:16:06,010 --> 00:16:07,750
get block scoping finally in javascript

418
00:16:07,750 --> 00:16:10,540
but until then all we've had is global

419
00:16:10,540 --> 00:16:13,350
or function level scope lexical scope

420
00:16:13,350 --> 00:16:15,640
you should understand equality and

421
00:16:15,640 --> 00:16:19,720
strict equality and in es6 we get super

422
00:16:19,720 --> 00:16:20,980
strict equality with object that is

423
00:16:20,980 --> 00:16:22,510
object that is is one of those odd

424
00:16:22,510 --> 00:16:24,339
little things with base there's like two

425
00:16:24,339 --> 00:16:26,050
use cases for it it's kind of weird how

426
00:16:26,050 --> 00:16:27,870
it made it through this back like that

427
00:16:27,870 --> 00:16:30,250
you know if you're if you're programming

428
00:16:30,250 --> 00:16:32,610
in JavaScript aside from the

429
00:16:32,610 --> 00:16:34,810
multi-threaded JavaScript project and

430
00:16:34,810 --> 00:16:36,310
it's the name is escaping me right now

431
00:16:36,310 --> 00:16:37,870
you're going to be running in a single

432
00:16:37,870 --> 00:16:40,480
event lib right in a single thread so

433
00:16:40,480 --> 00:16:41,770
you need to understand at the

434
00:16:41,770 --> 00:16:42,970
synchronous environment and that you're

435
00:16:42,970 --> 00:16:44,200
working and you should understand

436
00:16:44,200 --> 00:16:47,200
callbacks promises are a nice pattern on

437
00:16:47,200 --> 00:16:49,360
top of callbacks that abstract that our

438
00:16:49,360 --> 00:16:51,490
way for us a little bit in es6 where

439
00:16:51,490 --> 00:16:53,920
they synchronous generators you can do

440
00:16:53,920 --> 00:16:56,140
even more abstraction and the seven with

441
00:16:56,140 --> 00:16:57,760
the weight and async keywords we get

442
00:16:57,760 --> 00:16:59,440
even one more level of abstraction that

443
00:16:59,440 --> 00:17:01,360
starts to make a synchronous code look

444
00:17:01,360 --> 00:17:02,860
like synchronous code makes it a lot

445
00:17:02,860 --> 00:17:04,900
easier to reason about but you should

446
00:17:04,900 --> 00:17:06,400
understand what's happening another hood

447
00:17:06,400 --> 00:17:08,589
just like if you're using classes you

448
00:17:08,589 --> 00:17:10,630
should understand that the syntax is

449
00:17:10,630 --> 00:17:12,760
different from the semantics you should

450
00:17:12,760 --> 00:17:13,990
understand how a sink rate

451
00:17:13,990 --> 00:17:15,670
works in a basic level how the event

452
00:17:15,670 --> 00:17:17,920
works how event handlers work then

453
00:17:17,920 --> 00:17:19,030
you're going to learn an abstraction on

454
00:17:19,030 --> 00:17:20,620
top of that that makes it easier perhaps

455
00:17:20,620 --> 00:17:22,329
to reason about and read about your code

456
00:17:22,329 --> 00:17:23,770
but you'll have that firm understanding

457
00:17:23,770 --> 00:17:26,350
underneath of how things are working you

458
00:17:26,350 --> 00:17:28,300
should absolutely understand function

459
00:17:28,300 --> 00:17:30,550
call and function dot apply bind as well

460
00:17:30,550 --> 00:17:33,040
call and apply are the really important

461
00:17:33,040 --> 00:17:35,350
ones right because of context

462
00:17:35,350 --> 00:17:38,140
idiosyncrasy we get to borrow behaviors

463
00:17:38,140 --> 00:17:40,059
from other objects using called bind and

464
00:17:40,059 --> 00:17:41,679
then you could understand what in the

465
00:17:41,679 --> 00:17:44,140
hell this is you know I saw I saw a guy

466
00:17:44,140 --> 00:17:49,840
on Twitter and I miss miss remember i'm

467
00:17:49,840 --> 00:17:51,910
going to miss attribute this quote i saw

468
00:17:51,910 --> 00:17:53,320
a guy saying you know every time I

469
00:17:53,320 --> 00:17:54,940
program in java script i just want to

470
00:17:54,940 --> 00:17:56,050
throw my hands up in the air and say

471
00:17:56,050 --> 00:17:57,580
what the fuck is this shit but i can

472
00:17:57,580 --> 00:18:01,150
never remember what this is so once

473
00:18:01,150 --> 00:18:03,880
you've got a good basis in es5 you

474
00:18:03,880 --> 00:18:07,000
should learn ESX and beyond yeah six is

475
00:18:07,000 --> 00:18:08,830
now the specification so it should be

476
00:18:08,830 --> 00:18:10,770
safe to go ahead and start using it

477
00:18:10,770 --> 00:18:13,390
assuming that browsers will catch up you

478
00:18:13,390 --> 00:18:14,920
know we we've entered a new world now

479
00:18:14,920 --> 00:18:16,120
where we don't really need to wait for

480
00:18:16,120 --> 00:18:18,010
browsers with these transpiler engines

481
00:18:18,010 --> 00:18:20,080
we've had polyfills for a long time and

482
00:18:20,080 --> 00:18:22,059
even with trans filers for some features

483
00:18:22,059 --> 00:18:24,580
you need to use polyfills but you should

484
00:18:24,580 --> 00:18:29,080
get a good grasp of es6 now yes 2016 has

485
00:18:29,080 --> 00:18:31,150
some great stuff coming as well and they

486
00:18:31,150 --> 00:18:32,500
kind of falls into three major

487
00:18:32,500 --> 00:18:35,050
categories we get new syntax introduced

488
00:18:35,050 --> 00:18:37,390
into the language things like let const

489
00:18:37,390 --> 00:18:38,980
the rest and spread operators d

490
00:18:38,980 --> 00:18:40,830
structuring and arrow functions and

491
00:18:40,830 --> 00:18:43,150
pretty much without exception these new

492
00:18:43,150 --> 00:18:45,820
syntax are as i mentioned earlier just

493
00:18:45,820 --> 00:18:47,590
new ways of expressing existing

494
00:18:47,590 --> 00:18:49,030
functionality they don't really add

495
00:18:49,030 --> 00:18:50,770
anything functionally to the language

496
00:18:50,770 --> 00:18:52,990
they just give you the ability to write

497
00:18:52,990 --> 00:18:54,760
less boilerplate to achieve the same

498
00:18:54,760 --> 00:18:57,880
ends we get an enhanced standard library

499
00:18:57,880 --> 00:18:59,230
we get some really important

500
00:18:59,230 --> 00:19:01,210
enhancements to object and especially

501
00:19:01,210 --> 00:19:04,620
array string and reg ex are also useful

502
00:19:04,620 --> 00:19:07,390
most of the additions to math and number

503
00:19:07,390 --> 00:19:09,520
are aimed at transpile de jan systems

504
00:19:09,520 --> 00:19:11,290
like ants Krypton there's a lot of stuff

505
00:19:11,290 --> 00:19:13,720
that's kind of geared specifically for C

506
00:19:13,720 --> 00:19:16,179
C++ type development and then we get

507
00:19:16,179 --> 00:19:18,460
some entirely new features in es6 and

508
00:19:18,460 --> 00:19:19,929
this is where it gets interesting right

509
00:19:19,929 --> 00:19:22,030
i mean i think that generators are

510
00:19:22,030 --> 00:19:23,500
probably one of the most important

511
00:19:23,500 --> 00:19:25,330
additions to the language that the

512
00:19:25,330 --> 00:19:27,260
possibilities with generators real

513
00:19:27,260 --> 00:19:28,610
kind of open up some pretty amazing

514
00:19:28,610 --> 00:19:30,350
things they start to bring the language

515
00:19:30,350 --> 00:19:33,290
on par with some of the other serious

516
00:19:33,290 --> 00:19:35,090
languages out there your JavaScript gets

517
00:19:35,090 --> 00:19:38,240
a bad rap some of it is justified some

518
00:19:38,240 --> 00:19:40,580
of it comes from the rapid nature in

519
00:19:40,580 --> 00:19:42,380
which it was developed some of it is odd

520
00:19:42,380 --> 00:19:44,690
design choices but it's also been

521
00:19:44,690 --> 00:19:46,910
incredibly anemic in terms of its

522
00:19:46,910 --> 00:19:48,380
standard library in the feature set that

523
00:19:48,380 --> 00:19:50,150
it provides now that's both a blessing

524
00:19:50,150 --> 00:19:51,830
and a curse on the one hand it's super

525
00:19:51,830 --> 00:19:53,690
lightweight right in some ways

526
00:19:53,690 --> 00:19:55,610
JavaScript has fulfilled that promise of

527
00:19:55,610 --> 00:19:57,680
write once run anywhere that Java failed

528
00:19:57,680 --> 00:20:00,590
to deliver on but at the same time we've

529
00:20:00,590 --> 00:20:02,210
had to rely on this ecosystem of

530
00:20:02,210 --> 00:20:03,680
libraries frameworks and things like

531
00:20:03,680 --> 00:20:05,000
that to provide us with some of the

532
00:20:05,000 --> 00:20:06,500
basic functionality that we would get

533
00:20:06,500 --> 00:20:09,770
out of the box other languages and so

534
00:20:09,770 --> 00:20:10,910
these things that are being dropped in

535
00:20:10,910 --> 00:20:13,160
ESX it's the first really major overhaul

536
00:20:13,160 --> 00:20:15,980
of the language since 1999 we got es5 in

537
00:20:15,980 --> 00:20:18,590
2009 that it was a compromise over a

538
00:20:18,590 --> 00:20:20,960
failed es for maybe it was originally

539
00:20:20,960 --> 00:20:23,030
codenamed es harmony was es6 right

540
00:20:23,030 --> 00:20:24,620
enemies because these factions that

541
00:20:24,620 --> 00:20:27,380
split over what es for should be you

542
00:20:27,380 --> 00:20:28,910
know they finally came to the table and

543
00:20:28,910 --> 00:20:30,440
said ok we'll compromise will do a

544
00:20:30,440 --> 00:20:32,840
utility release and that was es5 that it

545
00:20:32,840 --> 00:20:34,640
wasn't really a major update the last

546
00:20:34,640 --> 00:20:38,060
major drop was es 3 and so es6 is a

547
00:20:38,060 --> 00:20:39,680
major leap forward for the language and

548
00:20:39,680 --> 00:20:41,420
it represents kind of a sea change I

549
00:20:41,420 --> 00:20:44,450
think and what we can do with it there's

550
00:20:44,450 --> 00:20:46,970
my shameless plug it's a three-part

551
00:20:46,970 --> 00:20:48,170
series i did for the santa barbara

552
00:20:48,170 --> 00:20:50,060
javascript meetup please go check them

553
00:20:50,060 --> 00:20:52,130
out there github reveal jas

554
00:20:52,130 --> 00:20:56,030
presentations my last treatment here

555
00:20:56,030 --> 00:20:58,070
second last treatment is to use the

556
00:20:58,070 --> 00:21:01,550
source surprisingly a lot of popular

557
00:21:01,550 --> 00:21:03,200
JavaScript frameworks are written in

558
00:21:03,200 --> 00:21:06,590
JavaScript right there there are

559
00:21:06,590 --> 00:21:08,510
increasingly those that aren't right

560
00:21:08,510 --> 00:21:10,550
elements the popular new language out

561
00:21:10,550 --> 00:21:11,720
there I haven't had a chance to play

562
00:21:11,720 --> 00:21:13,250
with it myself but one of the guys at

563
00:21:13,250 --> 00:21:14,780
the meetup did a presentation on it I

564
00:21:14,780 --> 00:21:16,820
planted digging deep into it there's

565
00:21:16,820 --> 00:21:18,590
various other trans Paula J as languages

566
00:21:18,590 --> 00:21:20,690
but a lot of it most of the popular ones

567
00:21:20,690 --> 00:21:23,540
are actually written in jas so you know

568
00:21:23,540 --> 00:21:25,190
if you're struggling to understand how

569
00:21:25,190 --> 00:21:26,480
these things are implemented or

570
00:21:26,480 --> 00:21:28,070
particularly if you're new to something

571
00:21:28,070 --> 00:21:30,560
read the source right because you're

572
00:21:30,560 --> 00:21:31,730
going to see exactly especially and

573
00:21:31,730 --> 00:21:33,380
start with the things that you're

574
00:21:33,380 --> 00:21:35,540
actually using right don't just try and

575
00:21:35,540 --> 00:21:36,710
read the source from top to bottom

576
00:21:36,710 --> 00:21:38,660
that's like going to the spec for xmas

577
00:21:38,660 --> 00:21:39,559
crypt and reading it

578
00:21:39,559 --> 00:21:40,820
to bottom it doesn't make a very good

579
00:21:40,820 --> 00:21:43,249
novel to go to bed by right but there's

580
00:21:43,249 --> 00:21:44,659
useful information in there and if you

581
00:21:44,659 --> 00:21:45,649
going you look for the things that

582
00:21:45,649 --> 00:21:47,029
you're trying to find it's spelled out

583
00:21:47,029 --> 00:21:49,159
black and white and the same thing is

584
00:21:49,159 --> 00:21:50,600
true for the source code and a lot of

585
00:21:50,600 --> 00:21:51,950
these frameworks and libraries that you

586
00:21:51,950 --> 00:21:54,289
use start with methods that you use on a

587
00:21:54,289 --> 00:21:56,990
regular basis like for each right and

588
00:21:56,990 --> 00:21:58,399
see how they've implemented it and it

589
00:21:58,399 --> 00:21:59,960
turns out that it's usually not that

590
00:21:59,960 --> 00:22:05,990
hard to understand zoom very well this

591
00:22:05,990 --> 00:22:08,090
is from Ember this is there for each and

592
00:22:08,090 --> 00:22:09,889
basically what you can see about

593
00:22:09,889 --> 00:22:11,960
two-thirds of the way down it's just a

594
00:22:11,960 --> 00:22:15,320
for loop right it's it's pretty simple

595
00:22:15,320 --> 00:22:17,690
procedural easy to understand stuff

596
00:22:17,690 --> 00:22:19,850
there's some angular same thing they do

597
00:22:19,850 --> 00:22:21,409
some checking to see what it is that

598
00:22:21,409 --> 00:22:23,330
again this is one of the arguments for

599
00:22:23,330 --> 00:22:25,340
using a framework or library method is

600
00:22:25,340 --> 00:22:26,840
that you can pass it an object or an

601
00:22:26,840 --> 00:22:28,460
array and it will iterate through either

602
00:22:28,460 --> 00:22:30,889
you know ordinals in the array or

603
00:22:30,889 --> 00:22:33,200
properties on the object but when it

604
00:22:33,200 --> 00:22:34,549
comes down to it once it's done with the

605
00:22:34,549 --> 00:22:36,320
checking it's just a simple for loop

606
00:22:36,320 --> 00:22:39,289
right it's basic JavaScript and then

607
00:22:39,289 --> 00:22:41,809
here's low down here's load ashes

608
00:22:41,809 --> 00:22:43,940
implementation of a rage well that's

609
00:22:43,940 --> 00:22:45,080
just splits it into two separate

610
00:22:45,080 --> 00:22:47,269
functions it checks if it's an array and

611
00:22:47,269 --> 00:22:48,919
it's an array does a rage it's an object

612
00:22:48,919 --> 00:22:51,200
it does object each but this looks kind

613
00:22:51,200 --> 00:22:53,240
of similar to my little native wilder

614
00:22:53,240 --> 00:22:55,460
than I add earlier right so it can be

615
00:22:55,460 --> 00:22:57,679
extremely valuable as you're learning

616
00:22:57,679 --> 00:22:59,419
these things to look at the silica what

617
00:22:59,419 --> 00:23:01,700
other people have done and see how it's

618
00:23:01,700 --> 00:23:03,649
implemented some good resources there

619
00:23:03,649 --> 00:23:05,899
these are a little older but I still

620
00:23:05,899 --> 00:23:08,419
think they're really valuable John Resig

621
00:23:08,419 --> 00:23:10,100
recently just published the original

622
00:23:10,100 --> 00:23:13,279
jquery source annotated Jeremy ashkenaz

623
00:23:13,279 --> 00:23:15,139
posted underscore and backbone they're

624
00:23:15,139 --> 00:23:16,519
among the few developers that have taken

625
00:23:16,519 --> 00:23:18,409
the time to go out there and walk you

626
00:23:18,409 --> 00:23:20,450
through in a narrative style how the

627
00:23:20,450 --> 00:23:22,490
code was written so nothing can you see

628
00:23:22,490 --> 00:23:24,200
the actual source code you can see the

629
00:23:24,200 --> 00:23:25,730
developers thought process you can get

630
00:23:25,730 --> 00:23:27,559
an idea why they did things the way they

631
00:23:27,559 --> 00:23:29,149
did that can help inform your

632
00:23:29,149 --> 00:23:31,369
understanding of it and then that last

633
00:23:31,369 --> 00:23:34,309
one is a video by Paul Irish from 2010

634
00:23:34,309 --> 00:23:37,249
where he talks about it from our side as

635
00:23:37,249 --> 00:23:39,409
a dev going through and reading to the

636
00:23:39,409 --> 00:23:41,330
source code and the important lessons

637
00:23:41,330 --> 00:23:44,360
that you learned from it the last

638
00:23:44,360 --> 00:23:46,159
treatment i have is to learn what is and

639
00:23:46,159 --> 00:23:47,990
what isn't javascript this picture is

640
00:23:47,990 --> 00:23:50,090
often used to belittle javascript mean

641
00:23:50,090 --> 00:23:52,460
the good parts versus the definitive

642
00:23:52,460 --> 00:23:53,420
guide

643
00:23:53,420 --> 00:23:54,890
but what this picture doesn't tell you

644
00:23:54,890 --> 00:23:57,410
is that the definitive guide includes a

645
00:23:57,410 --> 00:23:58,430
whole bunch of stuff that isn't

646
00:23:58,430 --> 00:24:01,100
JavaScript right it's written for mostly

647
00:24:01,100 --> 00:24:02,360
from the perspective though it's been

648
00:24:02,360 --> 00:24:04,130
updated recently mostly from the

649
00:24:04,130 --> 00:24:06,050
perspective of a browser JavaScript

650
00:24:06,050 --> 00:24:07,610
developer and so it includes all the

651
00:24:07,610 --> 00:24:09,560
tools that you need to get up to speed

652
00:24:09,560 --> 00:24:11,510
writing javascript in the browser it

653
00:24:11,510 --> 00:24:14,090
covers the Dom it covers cascading style

654
00:24:14,090 --> 00:24:16,270
sheets covers the xmlhttprequest object

655
00:24:16,270 --> 00:24:18,620
and a variety of other in ciliary

656
00:24:18,620 --> 00:24:20,600
technologies that are provided by the

657
00:24:20,600 --> 00:24:22,760
host environment they're not JavaScript

658
00:24:22,760 --> 00:24:26,180
right so even though Doug Brock Berg's

659
00:24:26,180 --> 00:24:28,760
book might be even more narrowly focused

660
00:24:28,760 --> 00:24:31,490
it's still you know you could cut out at

661
00:24:31,490 --> 00:24:33,650
least two-thirds of that other book to

662
00:24:33,650 --> 00:24:36,320
cover just JavaScript so it's important

663
00:24:36,320 --> 00:24:37,910
to understand the difference between the

664
00:24:37,910 --> 00:24:39,410
language and the environment that it's

665
00:24:39,410 --> 00:24:41,360
running it right and that environment

666
00:24:41,360 --> 00:24:43,280
now isn't just browsers it's on the

667
00:24:43,280 --> 00:24:45,620
server it's in a variety of popular

668
00:24:45,620 --> 00:24:48,230
database engines it's now a first class

669
00:24:48,230 --> 00:24:50,030
citizen for operating system automation

670
00:24:50,030 --> 00:24:52,130
it was the first language to be allowed

671
00:24:52,130 --> 00:24:54,830
for iOS development after objective-c

672
00:24:54,830 --> 00:24:57,200
and so each of those environments

673
00:24:57,200 --> 00:25:00,410
provides some host-specific api's right

674
00:25:00,410 --> 00:25:02,120
some of those api's are not necessarily

675
00:25:02,120 --> 00:25:04,490
host-specific like in the browser you

676
00:25:04,490 --> 00:25:06,800
have the xml httprequest object it's not

677
00:25:06,800 --> 00:25:08,720
browser specific it's a specification

678
00:25:08,720 --> 00:25:10,940
but nevertheless that's an API that's

679
00:25:10,940 --> 00:25:12,800
provided to you in a JavaScript

680
00:25:12,800 --> 00:25:14,810
consumable format but it is not

681
00:25:14,810 --> 00:25:17,390
JavaScript there's also complementary

682
00:25:17,390 --> 00:25:19,160
technologies like cascading style sheets

683
00:25:19,160 --> 00:25:21,980
and my recommendation is get a solid

684
00:25:21,980 --> 00:25:23,930
foundation go deep into the language

685
00:25:23,930 --> 00:25:27,170
first understand what javascript is what

686
00:25:27,170 --> 00:25:29,300
it can do what its limitations are and

687
00:25:29,300 --> 00:25:31,370
then do the same with the supporting

688
00:25:31,370 --> 00:25:33,770
technologies go look at Dom take a deep

689
00:25:33,770 --> 00:25:35,540
dive into the Dom API see how the

690
00:25:35,540 --> 00:25:37,040
different browser is implemented what

691
00:25:37,040 --> 00:25:38,390
its shortcomings are and there are

692
00:25:38,390 --> 00:25:41,390
plenty limitations etc get familiar with

693
00:25:41,390 --> 00:25:43,580
all of that and then start to coalesce

694
00:25:43,580 --> 00:25:48,040
that knowledge into a hole right and

695
00:25:48,040 --> 00:25:50,630
lastly this is not JavaScript specific

696
00:25:50,630 --> 00:25:52,760
but this is kind of more an approach to

697
00:25:52,760 --> 00:25:55,190
how not to get swamped by this constant

698
00:25:55,190 --> 00:25:56,570
barrage of frameworks out there and

699
00:25:56,570 --> 00:26:00,200
that's to learn how to learn change is

700
00:26:00,200 --> 00:26:02,450
the only constant you know even the

701
00:26:02,450 --> 00:26:04,370
right framework the days are numbered

702
00:26:04,370 --> 00:26:07,370
and that means react to react is amazing

703
00:26:07,370 --> 00:26:09,170
but even its days are numbered right

704
00:26:09,170 --> 00:26:11,000
these frameworks will continue to drop

705
00:26:11,000 --> 00:26:13,250
and evolve end or you know one of the

706
00:26:13,250 --> 00:26:14,720
emerging trends is micro frameworks

707
00:26:14,720 --> 00:26:16,970
right and micro libraries are putting

708
00:26:16,970 --> 00:26:18,590
together your own framework which comes

709
00:26:18,590 --> 00:26:19,640
with its own advantages and

710
00:26:19,640 --> 00:26:21,590
disadvantages on the one hand you can

711
00:26:21,590 --> 00:26:23,540
curate your own set of a specific

712
00:26:23,540 --> 00:26:25,400
functionality that each of these micro

713
00:26:25,400 --> 00:26:27,260
frameworks or libraries provide on the

714
00:26:27,260 --> 00:26:29,630
flip side you're then in the wilds

715
00:26:29,630 --> 00:26:31,340
wondering how do you orchestrate all

716
00:26:31,340 --> 00:26:32,840
these things together right kind of

717
00:26:32,840 --> 00:26:35,180
framework depending on how prescriptive

718
00:26:35,180 --> 00:26:36,700
it is will opinion eight that for you

719
00:26:36,700 --> 00:26:39,230
you cannot know everything about

720
00:26:39,230 --> 00:26:41,210
everything no matter how smart you think

721
00:26:41,210 --> 00:26:43,520
you are I also argue you cannot know

722
00:26:43,520 --> 00:26:46,130
everything about anything right if you

723
00:26:46,130 --> 00:26:48,410
try to be an expert these days and one

724
00:26:48,410 --> 00:26:50,650
particular technology unless you are

725
00:26:50,650 --> 00:26:53,000
unless it's your own open source project

726
00:26:53,000 --> 00:26:55,280
or your employer's funding it you will

727
00:26:55,280 --> 00:26:57,530
not be able to be an expert before it

728
00:26:57,530 --> 00:26:59,710
changes things just change too quickly

729
00:26:59,710 --> 00:27:02,660
write my recommendation is to learn

730
00:27:02,660 --> 00:27:04,429
enough to be productive learn enough to

731
00:27:04,429 --> 00:27:06,950
get by and then improve by immersion if

732
00:27:06,950 --> 00:27:09,170
you end up using it you will absorb more

733
00:27:09,170 --> 00:27:11,179
knowledge right work with other users or

734
00:27:11,179 --> 00:27:12,950
the developers on your team and you will

735
00:27:12,950 --> 00:27:14,420
gain the knowledge and need to improve

736
00:27:14,420 --> 00:27:15,860
your understanding of that particular

737
00:27:15,860 --> 00:27:18,380
domain and then this is 1 i'm struggling

738
00:27:18,380 --> 00:27:20,540
would which is developing a strategy for

739
00:27:20,540 --> 00:27:23,090
focused knowledge gathering i tend to be

740
00:27:23,090 --> 00:27:26,210
a hoarder i save links i say podcasts i

741
00:27:26,210 --> 00:27:28,070
save videos and they all just go into

742
00:27:28,070 --> 00:27:29,900
this bin and i never actually get around

743
00:27:29,900 --> 00:27:31,760
to watching them or reading them or

744
00:27:31,760 --> 00:27:34,640
listening to them and and then I go back

745
00:27:34,640 --> 00:27:37,370
to try and find them a year later or six

746
00:27:37,370 --> 00:27:39,080
months later and I wade through all

747
00:27:39,080 --> 00:27:41,150
these bookmarks in my browser or this

748
00:27:41,150 --> 00:27:43,640
huge file folder full of videos and I'm

749
00:27:43,640 --> 00:27:45,380
trying to develop strategies for being

750
00:27:45,380 --> 00:27:46,910
smarter about it being more selective

751
00:27:46,910 --> 00:27:49,760
about what I save and using tools i

752
00:27:49,760 --> 00:27:51,410
started using pocket recently which

753
00:27:51,410 --> 00:27:52,940
helps me to search for things that i've

754
00:27:52,940 --> 00:27:54,890
saved and things like that but it's

755
00:27:54,890 --> 00:27:57,080
important that you don't a hoard

756
00:27:57,080 --> 00:27:58,850
knowledge and be that you actually use

757
00:27:58,850 --> 00:28:00,770
things right you see something great on

758
00:28:00,770 --> 00:28:02,360
a topic you're working on it's important

759
00:28:02,360 --> 00:28:03,890
to get that information in a way that's

760
00:28:03,890 --> 00:28:08,000
digestible so some side effects once

761
00:28:08,000 --> 00:28:09,020
you've gotten the treatments out of the

762
00:28:09,020 --> 00:28:10,970
way you may acquire language level

763
00:28:10,970 --> 00:28:13,309
skills you may have increased confidence

764
00:28:13,309 --> 00:28:15,440
about your ability to use javascript and

765
00:28:15,440 --> 00:28:17,240
better problem-solving ability in your

766
00:28:17,240 --> 00:28:19,190
next javascript project and most

767
00:28:19,190 --> 00:28:21,080
importantly you may end up knowing what

768
00:28:21,080 --> 00:28:24,230
this is now lastly occasionally

769
00:28:24,230 --> 00:28:25,700
javascript users have reported a desire

770
00:28:25,700 --> 00:28:26,870
to write their own frameworks or

771
00:28:26,870 --> 00:28:28,070
abandoned frameworks all together

772
00:28:28,070 --> 00:28:32,000
although this is rare and that's all I

