1
00:00:10,670 --> 00:00:16,920

hello everybody I'm here I'm touched

2
00:00:16,920 --> 00:00:20,070
JavaScript hacker I warframe zebu we

3
00:00:20,070 --> 00:00:23,180
make jobs of applications cutting edge

4
00:00:23,180 --> 00:00:26,369
so we work on mobile basically and we do

5
00:00:26,369 --> 00:00:27,810
going to pretty much anything we also

6
00:00:27,810 --> 00:00:30,480
sponsor a gyroscope by the way so much

7
00:00:30,480 --> 00:00:32,340
for that so I'm going to talk to you

8
00:00:32,340 --> 00:00:35,910
today about tooling and Tony we all use

9
00:00:35,910 --> 00:00:38,219
tools in our everyday life whenever we

10
00:00:38,219 --> 00:00:40,260
use a text editor whenever we use a 98

11
00:00:40,260 --> 00:00:42,510
you know testing frameworks or whatever

12
00:00:42,510 --> 00:00:43,800
their old schools and they're all I

13
00:00:43,800 --> 00:00:45,840
would say very important to our line of

14
00:00:45,840 --> 00:00:50,160
work and it occurred to me that last

15
00:00:50,160 --> 00:00:51,780
year that the number of tools are

16
00:00:51,780 --> 00:00:53,190
actually pretty well you know not

17
00:00:53,190 --> 00:00:55,829
limited but I would like to see more and

18
00:00:55,829 --> 00:00:57,420
so I'm going to try and persuade you and

19
00:00:57,420 --> 00:00:59,010
to show you how easy it would be to

20
00:00:59,010 --> 00:01:00,870
create new tools and to persuade you to

21
00:01:00,870 --> 00:01:03,840
you know make no tools so I'm going to

22
00:01:03,840 --> 00:01:06,390
talk to you today about Xion Xion is a

23
00:01:06,390 --> 00:01:10,020
static JavaScript analyzer I created

24
00:01:10,020 --> 00:01:14,520
using a handwritten parser and based on

25
00:01:14,520 --> 00:01:16,170
the Han River parser I can do while I

26
00:01:16,170 --> 00:01:18,780
can for a lot of stuff and most of it is

27
00:01:18,780 --> 00:01:22,200
pretty trivial let me try to quickly do

28
00:01:22,200 --> 00:01:24,659
the demo thing of course it doesn't work

29
00:01:24,659 --> 00:01:27,330
as intended ah alright so this is

30
00:01:27,330 --> 00:01:30,180
interesting this is basically what xeon

31
00:01:30,180 --> 00:01:36,420
is as you can see let's see there is a

32
00:01:36,420 --> 00:01:37,979
pop ups it will give you more type

33
00:01:37,979 --> 00:01:41,340
information it knows you guys like

34
00:01:41,340 --> 00:01:44,340
static references to lick variables or

35
00:01:44,340 --> 00:01:47,250
discs or whatever it does inference like

36
00:01:47,250 --> 00:01:50,070
it sees that well right now it doesn't

37
00:01:50,070 --> 00:01:53,700
throw but if I would like throw I don't

38
00:01:53,700 --> 00:01:56,549
know some string then we'll say throw

39
00:01:56,549 --> 00:01:59,820
string if I return if currently there's

40
00:01:59,820 --> 00:02:01,049
an object and something it doesn't

41
00:02:01,049 --> 00:02:03,960
doesn't know the type of it

42
00:02:03,960 --> 00:02:06,200
all kinds of tools right here

43
00:02:06,200 --> 00:02:10,140
minification beautiful are I don't know

44
00:02:10,140 --> 00:02:13,080
generating jazz docks whatever and you

45
00:02:13,080 --> 00:02:14,459
can no one you know you can all do that

46
00:02:14,459 --> 00:02:16,709
so that's basically what what Z on this

47
00:02:16,709 --> 00:02:22,730
and let's get back to the presentation

48
00:02:22,730 --> 00:02:28,709
all right next yeah so what's Yun does

49
00:02:28,709 --> 00:02:32,130
is not magic it's it's just a set of

50
00:02:32,130 --> 00:02:34,830
rules you get the information from your

51
00:02:34,830 --> 00:02:37,080
source you know the structure of the

52
00:02:37,080 --> 00:02:39,120
source and so you can apply these rules

53
00:02:39,120 --> 00:02:43,290
and for well data from it warnings

54
00:02:43,290 --> 00:02:46,290
errors or you know derive tools from

55
00:02:46,290 --> 00:02:49,620
them so these rules are applied to the

56
00:02:49,620 --> 00:02:52,769
input you get the input rules you apply

57
00:02:52,769 --> 00:02:54,209
rules and you get that but that's

58
00:02:54,209 --> 00:02:56,250
basically what it works how it works and

59
00:02:56,250 --> 00:02:58,110
xeon just you know displays it

60
00:02:58,110 --> 00:02:59,790
graphically so it will immediately give

61
00:02:59,790 --> 00:03:03,239
you the feedback that you need so the

62
00:03:03,239 --> 00:03:05,550
parser works with tokens I'm going to

63
00:03:05,550 --> 00:03:07,110
quickly do this actually did this for

64
00:03:07,110 --> 00:03:08,670
Paul but I don't think he's president I

65
00:03:08,670 --> 00:03:10,950
haven't seen him yet he one minute to do

66
00:03:10,950 --> 00:03:14,100
this you realize real way digress so I

67
00:03:14,100 --> 00:03:15,959
token in Java speed is the smallest

68
00:03:15,959 --> 00:03:18,239
piece of code it's still single unit it

69
00:03:18,239 --> 00:03:21,079
would be like an in fire or a number

70
00:03:21,079 --> 00:03:24,360
whatever the smallest unit these are the

71
00:03:24,360 --> 00:03:26,040
smallest units you only have like eight

72
00:03:26,040 --> 00:03:28,560
or nine of them and the smallest units

73
00:03:28,560 --> 00:03:31,650
are fast in a greedy fashion so whenever

74
00:03:31,650 --> 00:03:33,540
you have a plus it could be like the

75
00:03:33,540 --> 00:03:35,640
single token right it would be fine but

76
00:03:35,640 --> 00:03:38,850
if it's succeeded by an equal sign then

77
00:03:38,850 --> 00:03:40,350
that would also be single token it would

78
00:03:40,350 --> 00:03:41,880
be bigger so it will take that and not

79
00:03:41,880 --> 00:03:43,860
just a plus sign that's an important

80
00:03:43,860 --> 00:03:46,620
part for for the old Parson process this

81
00:03:46,620 --> 00:03:48,570
is my favorite expression I don't know

82
00:03:48,570 --> 00:03:51,410
why it's just visually appealing I guess

83
00:03:51,410 --> 00:03:54,570
this is actually a regular expression /

84
00:03:54,570 --> 00:03:57,870
right expression something that was a

85
00:03:57,870 --> 00:04:01,109
test case for my earlier parser so the

86
00:04:01,109 --> 00:04:04,859
parser tells the tokenizer to take the

87
00:04:04,859 --> 00:04:07,100
next tokens all right so it will tell

88
00:04:07,100 --> 00:04:08,910
tokenizer give me the next token and

89
00:04:08,910 --> 00:04:10,750
I'll handle the rest

90
00:04:10,750 --> 00:04:12,130
you know us to worry about how that

91
00:04:12,130 --> 00:04:14,500
works just give you the next token so

92
00:04:14,500 --> 00:04:16,359
that's betta parse right now we're going

93
00:04:16,359 --> 00:04:17,920
to start with an empty script so we know

94
00:04:17,920 --> 00:04:19,090
that we're at the start of the statement

95
00:04:19,090 --> 00:04:23,020
and the first token we get isn't if we

96
00:04:23,020 --> 00:04:24,280
know that it started a statement we're

97
00:04:24,280 --> 00:04:25,630
either in a started statement or to

98
00:04:25,630 --> 00:04:27,700
start of a function declaration function

99
00:04:27,700 --> 00:04:29,200
declarations are with function so this

100
00:04:29,200 --> 00:04:30,760
must be a statement in fact that must be

101
00:04:30,760 --> 00:04:32,530
the if statement yes i'm a can only be

102
00:04:32,530 --> 00:04:33,940
followed these keywords going to be

103
00:04:33,940 --> 00:04:36,310
followed by one you know valid thing and

104
00:04:36,310 --> 00:04:38,530
that's the opening parenthesis anything

105
00:04:38,530 --> 00:04:40,360
else will be an error opening for

106
00:04:40,360 --> 00:04:41,980
instance is followed by a shitload of

107
00:04:41,980 --> 00:04:44,800
stuff and that seems to be complicated

108
00:04:44,800 --> 00:04:46,360
but let's just for an ounce say that

109
00:04:46,360 --> 00:04:47,590
we're going to parse the expression and

110
00:04:47,590 --> 00:04:49,690
just leave it at that right so it must

111
00:04:49,690 --> 00:04:51,400
be followed by an expression any kind of

112
00:04:51,400 --> 00:04:54,070
expression is fine up until the closing

113
00:04:54,070 --> 00:04:55,660
parenthesis because that would not be

114
00:04:55,660 --> 00:04:58,330
part of that expression and then the

115
00:04:58,330 --> 00:05:01,180
final part is a statement a single

116
00:05:01,180 --> 00:05:03,100
statement don't worry about it is it you

117
00:05:03,100 --> 00:05:04,510
presently do the same thing as we just

118
00:05:04,510 --> 00:05:06,430
did with the earth and congratulations

119
00:05:06,430 --> 00:05:10,270
we just parse the if statement there are

120
00:05:10,270 --> 00:05:11,860
a lot of statements of course but they

121
00:05:11,860 --> 00:05:13,510
all start with keywords and you can very

122
00:05:13,510 --> 00:05:16,540
easily you know see that if you start

123
00:05:16,540 --> 00:05:18,220
with a keyword howdy structure is going

124
00:05:18,220 --> 00:05:21,370
to be so parsing is relatively easy once

125
00:05:21,370 --> 00:05:23,680
you get to it so let's go for the

126
00:05:23,680 --> 00:05:25,630
expression expression is slightly more

127
00:05:25,630 --> 00:05:28,419
complicated it can start with something

128
00:05:28,419 --> 00:05:30,130
I call a lead value which is basically

129
00:05:30,130 --> 00:05:32,620
just any kind of value like at this or

130
00:05:32,620 --> 00:05:35,950
null or through or a number and then the

131
00:05:35,950 --> 00:05:38,320
universe right is deployed to type a

132
00:05:38,320 --> 00:05:40,810
type of or it'll aid or whatever so

133
00:05:40,810 --> 00:05:42,130
that's what what ale expression may

134
00:05:42,130 --> 00:05:45,400
start with nothing else so let's have

135
00:05:45,400 --> 00:05:48,370
this expression it's a silly expression

136
00:05:48,370 --> 00:05:51,310
I know it's still valid departure will

137
00:05:51,310 --> 00:05:52,660
not tell you that the lead new is not

138
00:05:52,660 --> 00:05:55,690
going to be in working you can do it the

139
00:05:55,690 --> 00:05:57,220
interpreter will tell you that's pretty

140
00:05:57,220 --> 00:05:58,810
much well actually this will work i

141
00:05:58,810 --> 00:06:01,600
think so this is these are tokens all

142
00:06:01,600 --> 00:06:03,280
right so when the tokenizer is finished

143
00:06:03,280 --> 00:06:05,320
with it this is what it ends up with any

144
00:06:05,320 --> 00:06:08,020
boxes a single token so we start with

145
00:06:08,020 --> 00:06:10,870
the operators we start with delete and

146
00:06:10,870 --> 00:06:14,229
new just keep forcing a prefix operators

147
00:06:14,229 --> 00:06:16,870
that you know until the point where you

148
00:06:16,870 --> 00:06:19,240
can't and that would be shoe and so what

149
00:06:19,240 --> 00:06:22,870
we find shoe we we have the the delete

150
00:06:22,870 --> 00:06:23,860
value all right

151
00:06:23,860 --> 00:06:25,449
a case just in the land of fire there's

152
00:06:25,449 --> 00:06:26,620
a variable we don't need to know what

153
00:06:26,620 --> 00:06:29,189
the value is we know it's an identifier

154
00:06:29,189 --> 00:06:32,469
identifiers leave fellows ARF well maybe

155
00:06:32,469 --> 00:06:34,330
followed by property access or call

156
00:06:34,330 --> 00:06:37,330
expressions which are in all cases all

157
00:06:37,330 --> 00:06:39,969
here at dot and this grand opening

158
00:06:39,969 --> 00:06:41,080
square bracket or the opening

159
00:06:41,080 --> 00:06:42,550
parenthesis those are the only three

160
00:06:42,550 --> 00:06:44,740
that would be found for well it would be

161
00:06:44,740 --> 00:06:46,750
only with valid for this part of the

162
00:06:46,750 --> 00:06:49,389
parsing we find the opening parenthesis

163
00:06:49,389 --> 00:06:51,550
so we know we get we can have now parse

164
00:06:51,550 --> 00:06:53,169
an expression in any closing parenthesis

165
00:06:53,169 --> 00:06:56,529
we continue we loop do the dot and then

166
00:06:56,529 --> 00:06:58,389
we do the same thing we with dot is next

167
00:06:58,389 --> 00:07:00,699
an identifier and of course then the

168
00:07:00,699 --> 00:07:02,560
opening square bracket with another

169
00:07:02,560 --> 00:07:07,240
expression so xeon throws well tries to

170
00:07:07,240 --> 00:07:08,729
throw you a comprehensive errors

171
00:07:08,729 --> 00:07:11,650
something that annoyed me at least in

172
00:07:11,650 --> 00:07:13,060
the earlier today is that that errors

173
00:07:13,060 --> 00:07:15,219
were often you know just missing

174
00:07:15,219 --> 00:07:17,110
identifier or missing this you have no

175
00:07:17,110 --> 00:07:19,930
context you had no way well no not

176
00:07:19,930 --> 00:07:21,129
really a way of knowing what was

177
00:07:21,129 --> 00:07:23,379
actually wrong you know it's still you

178
00:07:23,379 --> 00:07:25,419
can't always know sometimes you're just

179
00:07:25,419 --> 00:07:27,610
missing stuff or whatever and you can

180
00:07:27,610 --> 00:07:30,069
really guess or know what should be

181
00:07:30,069 --> 00:07:32,199
following but often you can right now

182
00:07:32,199 --> 00:07:33,909
the missing thing it would be the name

183
00:07:33,909 --> 00:07:36,819
because a function cannot start with a

184
00:07:36,819 --> 00:07:40,360
function expression so after the forest

185
00:07:40,360 --> 00:07:42,789
was done this is what's left basically

186
00:07:42,789 --> 00:07:46,509
my parcel just just releases a stack of

187
00:07:46,509 --> 00:07:48,490
a race with objects every object is

188
00:07:48,490 --> 00:07:51,069
token and it's time for race is much

189
00:07:51,069 --> 00:07:53,139
like an AST it's not like the classic

190
00:07:53,139 --> 00:07:55,360
AST but it's something that's the young

191
00:07:55,360 --> 00:07:58,689
works on for almost everything this is

192
00:07:58,689 --> 00:08:01,089
the actual AST has a lot of properties

193
00:08:01,089 --> 00:08:04,089
lots of meta information which you can

194
00:08:04,089 --> 00:08:05,979
easily see with a click of a button in

195
00:08:05,979 --> 00:08:09,909
the GUI cecile also releases to token

196
00:08:09,909 --> 00:08:11,589
streams it's a so-called white and a

197
00:08:11,589 --> 00:08:13,419
circle black token stream the white oak

198
00:08:13,419 --> 00:08:15,520
stream contains the white space the line

199
00:08:15,520 --> 00:08:17,409
terminated and the comments whereas the

200
00:08:17,409 --> 00:08:19,060
black dog extreme doesn't the partial

201
00:08:19,060 --> 00:08:20,830
doesn't really care about those it only

202
00:08:20,830 --> 00:08:22,900
cares about line terminators and only to

203
00:08:22,900 --> 00:08:27,009
apply ASI so the first thing I started

204
00:08:27,009 --> 00:08:29,830
with was variable declarations and you

205
00:08:29,830 --> 00:08:31,930
know that's the easy part departure

206
00:08:31,930 --> 00:08:34,120
already releases or already gives me a a

207
00:08:34,120 --> 00:08:35,039
scope chain

208
00:08:35,039 --> 00:08:37,110
which declare which has only variables

209
00:08:37,110 --> 00:08:39,240
that are declared including parameters

210
00:08:39,240 --> 00:08:42,419
or like function expunction expression

211
00:08:42,419 --> 00:08:44,070
names or whatever so I can all find that

212
00:08:44,070 --> 00:08:45,779
back in the scope it's not in the scope

213
00:08:45,779 --> 00:08:47,820
and it is in a ballistic level and so it

214
00:08:47,820 --> 00:08:50,100
will warn you for that if you do a

215
00:08:50,100 --> 00:08:52,380
double decoration the parse it goes from

216
00:08:52,380 --> 00:08:54,240
left to right so the first time it finds

217
00:08:54,240 --> 00:08:56,100
the declaration the old market as being

218
00:08:56,100 --> 00:08:57,389
declared if it finds the second

219
00:08:57,389 --> 00:08:58,500
declaration for the same name in the

220
00:08:58,500 --> 00:09:00,360
same scope you have a double decoration

221
00:09:00,360 --> 00:09:02,610
and you might want to be award for that

222
00:09:02,610 --> 00:09:04,769
because this this example is trivial but

223
00:09:04,769 --> 00:09:06,240
now you know imagine you have like a

224
00:09:06,240 --> 00:09:07,649
long piece of code and you were inside a

225
00:09:07,649 --> 00:09:09,990
loop with a my and you want to do

226
00:09:09,990 --> 00:09:11,670
another Lupin and I just out of you know

227
00:09:11,670 --> 00:09:13,829
you're not even thinking about it you're

228
00:09:13,829 --> 00:09:15,269
suddenly double declaring I and you have

229
00:09:15,269 --> 00:09:17,339
a bug in your code if you would have a

230
00:09:17,339 --> 00:09:19,170
warning for that you're you know you

231
00:09:19,170 --> 00:09:22,800
know say for like two minutes basically

232
00:09:22,800 --> 00:09:25,740
the same goes for the premature usage if

233
00:09:25,740 --> 00:09:27,720
you're using a variable prematurely it

234
00:09:27,720 --> 00:09:30,240
might indicate a problem at least in

235
00:09:30,240 --> 00:09:33,750
Cody cell in my opinion but you know it

236
00:09:33,750 --> 00:09:35,730
might indicate a problem as well as

237
00:09:35,730 --> 00:09:37,980
undeclared variables you might just have

238
00:09:37,980 --> 00:09:40,910
forgotten or missed typed it or whatever

239
00:09:40,910 --> 00:09:43,410
so let's just take some look at some

240
00:09:43,410 --> 00:09:46,069
simple examples for what Z undoes

241
00:09:46,069 --> 00:09:48,360
whenever it finds the closing

242
00:09:48,360 --> 00:09:50,519
parenthesis of a statement header it

243
00:09:50,519 --> 00:09:52,380
checks the next token is the next up mr.

244
00:09:52,380 --> 00:09:55,170
curly brace no problem nothing nothing

245
00:09:55,170 --> 00:09:57,480
is reported if it's not yeah basically

246
00:09:57,480 --> 00:09:59,760
to share two options either it was

247
00:09:59,760 --> 00:10:02,060
followed by lanterman a door wasn't i

248
00:10:02,060 --> 00:10:05,550
personally prefer the second version so

249
00:10:05,550 --> 00:10:07,579
i don't think it's it's an extra error

250
00:10:07,579 --> 00:10:09,540
but you can still get a warning for it

251
00:10:09,540 --> 00:10:12,000
you can disable it if there was a line

252
00:10:12,000 --> 00:10:14,639
terminator then yeah you get a like a

253
00:10:14,639 --> 00:10:19,050
you know bad indentation warning but the

254
00:10:19,050 --> 00:10:21,029
next one is like an assignment in the

255
00:10:21,029 --> 00:10:23,310
header all we have to do is find a token

256
00:10:23,310 --> 00:10:25,139
for an equal sign and since we're

257
00:10:25,139 --> 00:10:27,540
parsing from left to right we know when

258
00:10:27,540 --> 00:10:30,139
we are in or when we're not in a side a

259
00:10:30,139 --> 00:10:32,399
statement Heather so it's really simple

260
00:10:32,399 --> 00:10:34,740
to just you know there's a fly check the

261
00:10:34,740 --> 00:10:36,480
flag if we have a token with an equal

262
00:10:36,480 --> 00:10:40,800
sign and that's it and for awarding the

263
00:10:40,800 --> 00:10:43,230
same force for a week comparison find

264
00:10:43,230 --> 00:10:45,540
double equal signs as a single token now

265
00:10:45,540 --> 00:10:46,800
you have a weak comparison there

266
00:10:46,800 --> 00:10:48,360
there's no other reason for a double

267
00:10:48,360 --> 00:10:50,640
equal sign if you have a trickle a

268
00:10:50,640 --> 00:10:51,870
typical equal sign you know you don't

269
00:10:51,870 --> 00:10:53,610
this is a typical Douglas Crockford

270
00:10:53,610 --> 00:10:56,519
pointing but it's in there you can

271
00:10:56,519 --> 00:10:58,350
disable it if you don't like it there's

272
00:10:58,350 --> 00:11:00,420
an exception for type of type of ours

273
00:11:00,420 --> 00:11:02,100
Orangemen you know always returns a

274
00:11:02,100 --> 00:11:05,339
string and so well I'm fine with double

275
00:11:05,339 --> 00:11:06,690
equals but that makes it slightly more

276
00:11:06,690 --> 00:11:08,640
difficult so where I use the toka string

277
00:11:08,640 --> 00:11:10,410
for all the previous things I just

278
00:11:10,410 --> 00:11:13,230
explained I have to use the AST because

279
00:11:13,230 --> 00:11:14,850
i need to jump back one expression and

280
00:11:14,850 --> 00:11:17,579
that's too difficult to just deal in a

281
00:11:17,579 --> 00:11:21,959
token stream so i went to this if you

282
00:11:21,959 --> 00:11:24,120
have an equal sign that's previously

283
00:11:24,120 --> 00:11:27,269
there was just following a dis token and

284
00:11:27,269 --> 00:11:29,220
the distal is a lead value you've got a

285
00:11:29,220 --> 00:11:31,680
problem in your code basically so you

286
00:11:31,680 --> 00:11:33,839
get a warning if you're a regular

287
00:11:33,839 --> 00:11:36,000
expression followed by a call X pression

288
00:11:36,000 --> 00:11:38,820
it's it's valid I think still in Firefox

289
00:11:38,820 --> 00:11:42,360
so maybe they were removing it but you

290
00:11:42,360 --> 00:11:43,920
have a you might have a problem your

291
00:11:43,920 --> 00:11:45,480
code so you get a warning for this so

292
00:11:45,480 --> 00:11:46,980
this is you know this is what was the

293
00:11:46,980 --> 00:11:48,510
end of it will just give you warnings

294
00:11:48,510 --> 00:11:50,519
for possible indications of your code

295
00:11:50,519 --> 00:11:52,410
you can disable them i'll just show you

296
00:11:52,410 --> 00:11:54,270
in a second you can disable every

297
00:11:54,270 --> 00:11:57,270
warning you want to flow breakers flow

298
00:11:57,270 --> 00:11:59,610
breakers can cause dead code and they

299
00:11:59,610 --> 00:12:01,260
say they can cause that code because in

300
00:12:01,260 --> 00:12:03,750
the first x is not that code of course

301
00:12:03,750 --> 00:12:05,610
because who might be false in that case

302
00:12:05,610 --> 00:12:07,260
it doesn't return in the second one it

303
00:12:07,260 --> 00:12:08,670
does because both the if and the else

304
00:12:08,670 --> 00:12:11,160
they dragged the code the second x is

305
00:12:11,160 --> 00:12:13,560
never executed it's impossible and you

306
00:12:13,560 --> 00:12:15,360
can just proved that statically so you

307
00:12:15,360 --> 00:12:16,440
don't have to run the code to know that

308
00:12:16,440 --> 00:12:18,990
x is dead code and ziam does this and it

309
00:12:18,990 --> 00:12:20,730
doesn't know more complex levels it

310
00:12:20,730 --> 00:12:22,860
checks for switches it checks for try

311
00:12:22,860 --> 00:12:27,870
catch properly all that magic so it does

312
00:12:27,870 --> 00:12:30,480
type inference a simple example is this

313
00:12:30,480 --> 00:12:33,180
anything at any time you assign a value

314
00:12:33,180 --> 00:12:36,000
to a variable you can probably infer the

315
00:12:36,000 --> 00:12:37,020
type if you know the right hand side

316
00:12:37,020 --> 00:12:40,350
type in this case we assign a number to

317
00:12:40,350 --> 00:12:42,930
X so we know that X is type number in

318
00:12:42,930 --> 00:12:44,670
this in the second assignment we know

319
00:12:44,670 --> 00:12:46,230
that X is going to be string at that

320
00:12:46,230 --> 00:12:49,800
point in the middle example we you know

321
00:12:49,800 --> 00:12:51,089
we might still know that it's a number

322
00:12:51,089 --> 00:12:53,970
but for all intensive purposes we show

323
00:12:53,970 --> 00:12:56,240
every type that X might be

324
00:12:56,240 --> 00:12:59,300
it is a terrific example but there are

325
00:12:59,300 --> 00:13:01,310
more examples where this makes I guess

326
00:13:01,310 --> 00:13:03,740
makes more sense because you're not

327
00:13:03,740 --> 00:13:05,870
every time you're able to tell whether a

328
00:13:05,870 --> 00:13:09,920
variable change the type type inference

329
00:13:09,920 --> 00:13:13,520
is can be complex and so anyway it type

330
00:13:13,520 --> 00:13:16,010
the first the type inference makes it

331
00:13:16,010 --> 00:13:18,709
easier for operators if you have a

332
00:13:18,709 --> 00:13:20,660
multiplication it always returns a

333
00:13:20,660 --> 00:13:22,399
number there is no no way it doesn't

334
00:13:22,399 --> 00:13:24,740
return a number it might be man but

335
00:13:24,740 --> 00:13:26,060
that's okay that's still a number type

336
00:13:26,060 --> 00:13:29,330
and so the same goes you know the

337
00:13:29,330 --> 00:13:30,860
student thought tools always return

338
00:13:30,860 --> 00:13:32,540
number so x and y are always a number

339
00:13:32,540 --> 00:13:34,370
the third one is more difficult because

340
00:13:34,370 --> 00:13:36,440
the plus might return a number or my

341
00:13:36,440 --> 00:13:39,470
pretoria string xeon will try to you

342
00:13:39,470 --> 00:13:40,640
know check whether the left and right

343
00:13:40,640 --> 00:13:43,399
are both of number in aggregates it will

344
00:13:43,399 --> 00:13:45,020
return a number but if it doesn't know

345
00:13:45,020 --> 00:13:46,880
or it knows it one of them is a string

346
00:13:46,880 --> 00:13:49,040
or an object or anything else then it

347
00:13:49,040 --> 00:13:52,510
will just you know do a double typing

348
00:13:52,510 --> 00:13:55,640
some operators are transparent and these

349
00:13:55,640 --> 00:13:58,190
are trivial examples but also very silly

350
00:13:58,190 --> 00:14:01,040
it will hardly have to see them busy on

351
00:14:01,040 --> 00:14:03,440
doesn't evaluate the types so it will

352
00:14:03,440 --> 00:14:05,149
know that knowledge title now it will

353
00:14:05,149 --> 00:14:06,470
know that through this type of boolean

354
00:14:06,470 --> 00:14:08,089
and it will just say that okay you know

355
00:14:08,089 --> 00:14:09,890
it for X is he your type of null or type

356
00:14:09,890 --> 00:14:11,690
of boolean and we'll do it is in the

357
00:14:11,690 --> 00:14:14,300
indie well any kind of expression the

358
00:14:14,300 --> 00:14:17,149
same goes pretty double and you know it

359
00:14:17,149 --> 00:14:18,709
just returns both types because that's

360
00:14:18,709 --> 00:14:21,380
that's basically what could happen as

361
00:14:21,380 --> 00:14:24,920
long as they're not literals there's a

362
00:14:24,920 --> 00:14:26,570
simple navigation in a bottom right-hand

363
00:14:26,570 --> 00:14:28,220
corner there was a navigation part as

364
00:14:28,220 --> 00:14:30,290
you click on a number or the arrows you

365
00:14:30,290 --> 00:14:32,360
can just click through all the warnings

366
00:14:32,360 --> 00:14:35,149
and errors and whatever is out there and

367
00:14:35,149 --> 00:14:37,550
you get a blue circle and you can jump

368
00:14:37,550 --> 00:14:40,279
to it really easy really fast and that

369
00:14:40,279 --> 00:14:42,620
in my pin that was really missing for

370
00:14:42,620 --> 00:14:46,279
already classic the classic linters you

371
00:14:46,279 --> 00:14:48,200
know DJ's let you get omega text you

372
00:14:48,200 --> 00:14:49,850
have to go back to your source code line

373
00:14:49,850 --> 00:14:53,029
5 character 55 what helped you know this

374
00:14:53,029 --> 00:14:56,209
made more sense to me if you click on

375
00:14:56,209 --> 00:14:58,550
the description for some descriptions

376
00:14:58,550 --> 00:15:00,740
you get a more detailed pop up with like

377
00:15:00,740 --> 00:15:03,230
a group thing and you have a separate

378
00:15:03,230 --> 00:15:05,180
nap for that so if you just want to know

379
00:15:05,180 --> 00:15:06,279
where the

380
00:15:06,279 --> 00:15:07,990
implicit global's are you can just go

381
00:15:07,990 --> 00:15:09,069
through that and you don't have to go

382
00:15:09,069 --> 00:15:10,769
through all your millions of mornings

383
00:15:10,769 --> 00:15:13,329
there are quite a few of these warnings

384
00:15:13,329 --> 00:15:14,949
and you can configure them all if you

385
00:15:14,949 --> 00:15:16,930
don't want to see it a mini GUI just as

386
00:15:16,930 --> 00:15:18,610
Island just tell them I don't want this

387
00:15:18,610 --> 00:15:20,290
I don't want to see this it will still

388
00:15:20,290 --> 00:15:22,060
check for them under the water but in a

389
00:15:22,060 --> 00:15:25,480
GUI it will not show up so there are

390
00:15:25,480 --> 00:15:27,370
there are a few tools how am i doing on

391
00:15:27,370 --> 00:15:30,610
time listen so bad there are a few tools

392
00:15:30,610 --> 00:15:32,529
one of them is pragmas I've been playing

393
00:15:32,529 --> 00:15:34,329
for this for a while and basically

394
00:15:34,329 --> 00:15:36,579
allows you to pre-process your your code

395
00:15:36,579 --> 00:15:38,139
when you want to push it to production

396
00:15:38,139 --> 00:15:40,899
so you have some unit tests in there you

397
00:15:40,899 --> 00:15:42,519
awfully don't want your unit tests in

398
00:15:42,519 --> 00:15:43,660
your code but you also don't want to

399
00:15:43,660 --> 00:15:46,240
either do a regular expression on your

400
00:15:46,240 --> 00:15:48,249
code because that's not a safe is it you

401
00:15:48,249 --> 00:15:50,559
know is it as it could be and I think

402
00:15:50,559 --> 00:15:53,290
this is really nice zhi-yong knows about

403
00:15:53,290 --> 00:15:55,360
these about these friends that I defined

404
00:15:55,360 --> 00:15:57,939
and it will dim them so we'll not really

405
00:15:57,939 --> 00:16:00,430
you know it will not clutter your your

406
00:16:00,430 --> 00:16:02,050
view you'll just tend to ignore it

407
00:16:02,050 --> 00:16:04,029
because you're more prone to look at the

408
00:16:04,029 --> 00:16:06,759
colors than the grayed out area and it

409
00:16:06,759 --> 00:16:07,990
will still be jeaious I mean when you

410
00:16:07,990 --> 00:16:09,999
run this code it'll just you know do the

411
00:16:09,999 --> 00:16:12,879
assertion but once you press the pragma

412
00:16:12,879 --> 00:16:14,620
button it will remove all the fragment

413
00:16:14,620 --> 00:16:16,329
statements and whatever wasn't defined

414
00:16:16,329 --> 00:16:19,000
is removed so you're in love with is the

415
00:16:19,000 --> 00:16:20,529
debug statement because you were

416
00:16:20,529 --> 00:16:23,620
defining debug up there macro is a

417
00:16:23,620 --> 00:16:26,379
similar kind of thing I guess it's more

418
00:16:26,379 --> 00:16:29,019
for Constance but sometimes I know from

419
00:16:29,019 --> 00:16:30,279
production you might wanna office Kate

420
00:16:30,279 --> 00:16:33,160
your code or you know in my case for the

421
00:16:33,160 --> 00:16:35,709
parser it's much faster for me to just

422
00:16:35,709 --> 00:16:38,110
have a literal rather than a global look

423
00:16:38,110 --> 00:16:40,870
up but for you know for development it

424
00:16:40,870 --> 00:16:43,269
makes my life easier if I just have more

425
00:16:43,269 --> 00:16:45,459
saying kind of things than rather the

426
00:16:45,459 --> 00:16:48,160
magic numbers so that's well that's what

427
00:16:48,160 --> 00:16:50,199
macros come in you can either do it like

428
00:16:50,199 --> 00:16:52,269
the top one just have a literal it will

429
00:16:52,269 --> 00:16:54,819
only star tokens so if you use the name

430
00:16:54,819 --> 00:16:56,699
in a comment it will not replace that

431
00:16:56,699 --> 00:16:59,740
but if you use it as a token it will

432
00:16:59,740 --> 00:17:02,379
replace token with whatever you give the

433
00:17:02,379 --> 00:17:04,030
second version is slightly more complex

434
00:17:04,030 --> 00:17:06,370
you can do like identifier that

435
00:17:06,370 --> 00:17:08,169
identifier and it will replace those two

436
00:17:08,169 --> 00:17:09,699
because I think that's a very common

437
00:17:09,699 --> 00:17:11,649
pattern just to create an object literal

438
00:17:11,649 --> 00:17:14,199
for the flags or Freddie constants on

439
00:17:14,199 --> 00:17:15,280
the right hand side you can see that the

440
00:17:15,280 --> 00:17:17,120
flags object itself not

441
00:17:17,120 --> 00:17:19,730
removed I guess you could do that but

442
00:17:19,730 --> 00:17:25,520
yeah minification of course is probably

443
00:17:25,520 --> 00:17:27,410
like the first thing people do once they

444
00:17:27,410 --> 00:17:30,140
get their hands on these things it does

445
00:17:30,140 --> 00:17:32,809
it there is a special case thanks to

446
00:17:32,809 --> 00:17:34,610
Fabian he's probably somewhere around

447
00:17:34,610 --> 00:17:38,120
here yes for this it replaces the semi

448
00:17:38,120 --> 00:17:40,460
column with a return which makes your

449
00:17:40,460 --> 00:17:42,440
code still minify the skills might be

450
00:17:42,440 --> 00:17:44,000
more legible in case you want to debug

451
00:17:44,000 --> 00:17:46,880
it you can actually string variable

452
00:17:46,880 --> 00:17:48,559
names nothing special there and

453
00:17:48,559 --> 00:17:49,790
something I actually don't seem in the

454
00:17:49,790 --> 00:17:51,980
fires is that it can also it will also

455
00:17:51,980 --> 00:17:54,020
catch property names of you if you

456
00:17:54,020 --> 00:17:56,750
enable it which reduce the size but of

457
00:17:56,750 --> 00:17:58,850
course adds the look of time for global

458
00:17:58,850 --> 00:18:01,550
variables still in most applications

459
00:18:01,550 --> 00:18:04,160
that won't matter and you can often you

460
00:18:04,160 --> 00:18:05,990
know for a hundred Cape script you can

461
00:18:05,990 --> 00:18:09,520
easily say like the ten or maybe 20 k

462
00:18:09,520 --> 00:18:12,110
beautification simply proof of concepts

463
00:18:12,110 --> 00:18:14,690
actually had to rewrite my HT for that

464
00:18:14,690 --> 00:18:16,580
or these not rewrite it create a new AST

465
00:18:16,580 --> 00:18:18,890
because rewriting means that you have to

466
00:18:18,890 --> 00:18:20,179
have a single function for everything

467
00:18:20,179 --> 00:18:21,679
you rewrite I couldn't do it with my

468
00:18:21,679 --> 00:18:25,820
original st it's not preferable simply

469
00:18:25,820 --> 00:18:27,679
because there are no other options but

470
00:18:27,679 --> 00:18:29,780
it's easy to extend them simply because

471
00:18:29,780 --> 00:18:33,770
there are other functions it will save

472
00:18:33,770 --> 00:18:36,010
the load your code the little storage

473
00:18:36,010 --> 00:18:38,390
unfortunately you're not currently able

474
00:18:38,390 --> 00:18:40,130
from the browser to directly save to

475
00:18:40,130 --> 00:18:42,620
your file system and I mean the actual

476
00:18:42,620 --> 00:18:44,570
file system not your local sandbox file

477
00:18:44,570 --> 00:18:47,300
system if local file API but you want to

478
00:18:47,300 --> 00:18:48,830
like load of file then save it back to

479
00:18:48,830 --> 00:18:50,330
the file that's currently not possible

480
00:18:50,330 --> 00:18:52,910
this is not why to my knowledge if that

481
00:18:52,910 --> 00:18:54,500
is possible please tell me because that

482
00:18:54,500 --> 00:18:57,370
would be like a killer feature I guess

483
00:18:57,370 --> 00:19:00,710
as I just showed you it can generate

484
00:19:00,710 --> 00:19:02,630
jazz doc said look General James Ducks

485
00:19:02,630 --> 00:19:04,429
from functions or variables variables

486
00:19:04,429 --> 00:19:06,230
optional by the way because it will

487
00:19:06,230 --> 00:19:08,480
clutter your code kind of it will use

488
00:19:08,480 --> 00:19:09,890
the type of ferns and just generate

489
00:19:09,890 --> 00:19:13,340
those jazz docs as is well you know as

490
00:19:13,340 --> 00:19:18,110
things is right and well that works able

491
00:19:18,110 --> 00:19:20,510
to regenerate existing jazz docks and

492
00:19:20,510 --> 00:19:23,480
will do proper indentation there are

493
00:19:23,480 --> 00:19:24,390
some trivial tools

494
00:19:24,390 --> 00:19:26,680
like converting your code to a Jaya

495
00:19:26,680 --> 00:19:28,720
string which is I don't know something

496
00:19:28,720 --> 00:19:30,309
that that I tend to do every now and

497
00:19:30,309 --> 00:19:33,040
then convert a string back to a code you

498
00:19:33,040 --> 00:19:35,500
can do a bookmarklet you can trim

499
00:19:35,500 --> 00:19:37,150
trading white space because that's

500
00:19:37,150 --> 00:19:41,740
opinion most people's IDs you can show

501
00:19:41,740 --> 00:19:43,420
you Royce T the one the picture that I

502
00:19:43,420 --> 00:19:44,800
showed you before that's just a button

503
00:19:44,800 --> 00:19:46,210
it will show you HD if you're really

504
00:19:46,210 --> 00:19:49,840
interested any hash part in the URL will

505
00:19:49,840 --> 00:19:52,840
be a you know put inside the code editor

506
00:19:52,840 --> 00:19:56,350
so you can easily link to it and there

507
00:19:56,350 --> 00:19:59,890
are some tests both for the parser both

508
00:19:59,890 --> 00:20:02,650
buzzer which just tries and tries and

509
00:20:02,650 --> 00:20:05,260
tries help me out in a few bad spots

510
00:20:05,260 --> 00:20:07,000
right now it seems to be very stable and

511
00:20:07,000 --> 00:20:09,610
there are a unit well not unit tests but

512
00:20:09,610 --> 00:20:11,290
you know test for checking whether the

513
00:20:11,290 --> 00:20:13,150
warning is there but that's literally

514
00:20:13,150 --> 00:20:14,920
like two weeks old so it's not very

515
00:20:14,920 --> 00:20:19,900
complete there's a fixed hoisting button

516
00:20:19,900 --> 00:20:21,340
which will collect all variable

517
00:20:21,340 --> 00:20:23,200
declarations removed if our divorce

518
00:20:23,200 --> 00:20:24,670
statements and just move all the

519
00:20:24,670 --> 00:20:26,940
decorations to the top of your function

520
00:20:26,940 --> 00:20:30,400
it's best practice I guess it can do the

521
00:20:30,400 --> 00:20:31,890
same for function declarations

522
00:20:31,890 --> 00:20:34,570
optionally it will refractor them

523
00:20:34,570 --> 00:20:38,290
properly initation everything and well

524
00:20:38,290 --> 00:20:39,790
you know if you want to do that you can

525
00:20:39,790 --> 00:20:41,970
easily just do it for your entire code

526
00:20:41,970 --> 00:20:45,640
code rewriting it can inject function

527
00:20:45,640 --> 00:20:48,010
expressions or not just expressions with

528
00:20:48,010 --> 00:20:50,380
a function call to every statement and

529
00:20:50,380 --> 00:20:52,210
that function will that make hold with a

530
00:20:52,210 --> 00:20:54,250
unique statement identifier and I

531
00:20:54,250 --> 00:20:56,650
actually use this to create a life a

532
00:20:56,650 --> 00:20:59,650
life profiler which I'll show you in a

533
00:20:59,650 --> 00:21:03,520
second there is this rules so for every

534
00:21:03,520 --> 00:21:04,870
kind of statement you have there are

535
00:21:04,870 --> 00:21:06,700
simple rules where you can just add is

536
00:21:06,700 --> 00:21:09,460
the expression the function call and and

537
00:21:09,460 --> 00:21:11,679
it will be equivalent in you know the

538
00:21:11,679 --> 00:21:14,170
execution of the code of course it will

539
00:21:14,170 --> 00:21:16,809
be slower this is a feature require

540
00:21:16,809 --> 00:21:19,179
requested by matias offering a

541
00:21:19,179 --> 00:21:20,920
precedence tool you have a stupid

542
00:21:20,920 --> 00:21:22,870
expression that you can make you can add

543
00:21:22,870 --> 00:21:24,610
for instance automatically to

544
00:21:24,610 --> 00:21:28,960
disambiguate the whole expression this

545
00:21:28,960 --> 00:21:30,610
is I guess more learning tool than an

546
00:21:30,610 --> 00:21:32,190
actual tool using your code the

547
00:21:32,190 --> 00:21:35,460
whatever branching tool that's a pretty

548
00:21:35,460 --> 00:21:39,120
cool to actually though much useless if

549
00:21:39,120 --> 00:21:41,009
you have a simple function like this

550
00:21:41,009 --> 00:21:43,440
it's super function oh if you have a

551
00:21:43,440 --> 00:21:44,850
simple function like this there are

552
00:21:44,850 --> 00:21:46,440
actually two code paths in this function

553
00:21:46,440 --> 00:21:49,950
there is both the dakotas where it

554
00:21:49,950 --> 00:21:52,799
evaluates x and returns 5 and this

555
00:21:52,799 --> 00:21:54,210
should still you gently with X and then

556
00:21:54,210 --> 00:21:57,330
return six well there are two code paths

557
00:21:57,330 --> 00:21:58,980
and they can do this for pretty much any

558
00:21:58,980 --> 00:22:01,320
kind of slow breaking construct in the

559
00:22:01,320 --> 00:22:04,289
function if you have larger functions

560
00:22:04,289 --> 00:22:06,509
with a lot of code paths beware because

561
00:22:06,509 --> 00:22:08,370
it will take some time to compute all of

562
00:22:08,370 --> 00:22:12,629
them this is it full this is my new

563
00:22:12,629 --> 00:22:15,090
school able to declare your product

564
00:22:15,090 --> 00:22:16,950
you're missing phototype instance

565
00:22:16,950 --> 00:22:19,679
variables say you have like you know the

566
00:22:19,679 --> 00:22:24,509
prototypal a way of doing things you

567
00:22:24,509 --> 00:22:27,269
declare variables just like either you

568
00:22:27,269 --> 00:22:29,039
know this X is 5 but you haven't

569
00:22:29,039 --> 00:22:30,480
declared it explicitly on your prototype

570
00:22:30,480 --> 00:22:32,460
object and that's something you want to

571
00:22:32,460 --> 00:22:34,350
do because you know either for yourself

572
00:22:34,350 --> 00:22:36,690
like six months or for other programs in

573
00:22:36,690 --> 00:22:38,340
your project they will want to know

574
00:22:38,340 --> 00:22:39,870
which instance variables exists on the

575
00:22:39,870 --> 00:22:42,570
prototype this tool let's try to do an

576
00:22:42,570 --> 00:22:44,850
educated guess on what the prototype

577
00:22:44,850 --> 00:22:47,000
object is and we'll add the missing

578
00:22:47,000 --> 00:22:51,090
properties to that object and well I

579
00:22:51,090 --> 00:22:53,789
think it's the best price to do so let's

580
00:22:53,789 --> 00:22:56,190
see real-time profiler so I've got a

581
00:22:56,190 --> 00:22:59,940
simple demo for this can't be doing can

582
00:22:59,940 --> 00:23:01,730
be done from the browser unfortunately

583
00:23:01,730 --> 00:23:12,059
but that's okay alright so demo all

584
00:23:12,059 --> 00:23:15,919
right Oh

585
00:23:15,929 --> 00:23:19,210
so this is the beautiful code it's a JS

586
00:23:19,210 --> 00:23:22,389
1k from the first edition pretty much a

587
00:23:22,389 --> 00:23:24,130
random one that would work like this so

588
00:23:24,130 --> 00:23:26,590
it nothing special happened here is just

589
00:23:26,590 --> 00:23:29,200
seein wit code in the editor I can press

590
00:23:29,200 --> 00:23:31,809
this button now dividual profiler and it

591
00:23:31,809 --> 00:23:33,820
will show you the JS from k and the

592
00:23:33,820 --> 00:23:35,500
right-hand side you can see that the

593
00:23:35,500 --> 00:23:38,559
code is highlighted which was Randy most

594
00:23:38,559 --> 00:23:40,960
it actually is life so whenever if this

595
00:23:40,960 --> 00:23:43,600
code would not switch to say execute it

596
00:23:43,600 --> 00:23:45,429
is more then this would be comrade and

597
00:23:45,429 --> 00:23:48,070
this would dim slightly and so this is

598
00:23:48,070 --> 00:23:51,220
real time a real sign heat map on the

599
00:23:51,220 --> 00:24:00,880
client side no note no nothing as you

600
00:24:00,880 --> 00:24:02,559
can see these are the tests and not all

601
00:24:02,559 --> 00:24:05,559
of them are finished I mean they're all

602
00:24:05,559 --> 00:24:06,700
working to just you know these are

603
00:24:06,700 --> 00:24:10,029
placeholders so don't don't worry let's

604
00:24:10,029 --> 00:24:12,730
get back to the presentation yeah all

605
00:24:12,730 --> 00:24:15,850
right so the client server is pretty

606
00:24:15,850 --> 00:24:18,070
much detached as a client-server I mean

607
00:24:18,070 --> 00:24:19,740
to parse the GUI and in post-processing

608
00:24:19,740 --> 00:24:23,080
so it's very easy to port this to a

609
00:24:23,080 --> 00:24:25,570
server environment or to embedded in

610
00:24:25,570 --> 00:24:28,779
another application you just take the

611
00:24:28,779 --> 00:24:30,909
departure or yeah five minutes of things

612
00:24:30,909 --> 00:24:34,080
just to pick the parser or whatever

613
00:24:34,080 --> 00:24:37,000
integration is easy and the API is very

614
00:24:37,000 --> 00:24:40,029
simple the parts available reasonably

615
00:24:40,029 --> 00:24:44,380
fast as f did a benchmark well you know

616
00:24:44,380 --> 00:24:46,929
it actually I can quickly show you a

617
00:24:46,929 --> 00:24:49,840
simple of course is it bad because I

618
00:24:49,840 --> 00:24:55,480
haven't seasoned it in to do well you

619
00:24:55,480 --> 00:24:57,789
know let's not do that but it there's a

620
00:24:57,789 --> 00:25:00,760
benchmark you can run it oh my you know

621
00:25:00,760 --> 00:25:02,529
on my laptop it does megabyte of

622
00:25:02,529 --> 00:25:05,019
JavaScript in 70 milliseconds completely

623
00:25:05,019 --> 00:25:07,630
parsed which blew my mind first time I

624
00:25:07,630 --> 00:25:09,669
saw it I didn't know Josh could be that

625
00:25:09,669 --> 00:25:14,950
fast yeah so tooling is important make

626
00:25:14,950 --> 00:25:16,779
more tools it's fun it really is fun

627
00:25:16,779 --> 00:25:18,789
once you get into it it's awesome to

628
00:25:18,789 --> 00:25:21,909
create these schools it's you know some

629
00:25:21,909 --> 00:25:24,639
some things are trivial to create some

630
00:25:24,639 --> 00:25:26,410
things are more difficult to create

631
00:25:26,410 --> 00:25:28,060
in the end you will help yourself or

632
00:25:28,060 --> 00:25:29,800
maybe something else you know you can

633
00:25:29,800 --> 00:25:31,780
make either tools for your actives day

634
00:25:31,780 --> 00:25:33,430
programming or you can make tools to

635
00:25:33,430 --> 00:25:34,960
help other people you know you can

636
00:25:34,960 --> 00:25:36,580
create an operator the operator

637
00:25:36,580 --> 00:25:39,910
precedence tool whatever make more tools

638
00:25:39,910 --> 00:25:42,160
i'd love to see more tools uh and i

639
00:25:42,160 --> 00:25:44,260
think that's something that that is you

640
00:25:44,260 --> 00:25:47,200
know picking up we we saw cloud nine I

641
00:25:47,200 --> 00:25:52,660
can see the but there was another ID

642
00:25:52,660 --> 00:25:58,080
there it's also very good so yeah

643
00:25:58,080 --> 00:26:02,230
anybody remember this guy alright so you

644
00:26:02,230 --> 00:26:06,360
know this catchphrase right alright so

645
00:26:06,360 --> 00:26:08,740
we've been wondering about Z and what to

646
00:26:08,740 --> 00:26:19,450
deal with it and that's it Zeon is an

647
00:26:19,450 --> 00:26:21,730
open source I will push the actual code

648
00:26:21,730 --> 00:26:25,150
in a second but you can hack on it you

649
00:26:25,150 --> 00:26:26,920
can look into what does it what it does

650
00:26:26,920 --> 00:26:30,400
and you can push new updates or whatever

