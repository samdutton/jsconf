1
00:00:00,870 --> 00:00:11,340

yeah cool okay great that that works I

2
00:00:11,340 --> 00:00:13,650
think like there's like tiny bit of the

3
00:00:13,650 --> 00:00:15,719
screen that's cut up cut off at both

4
00:00:15,719 --> 00:00:17,670
ends I don't think it's gonna be a

5
00:00:17,670 --> 00:00:20,699
problem just like yeah just tell me if

6
00:00:20,699 --> 00:00:22,740
something is completely not

7
00:00:22,740 --> 00:00:26,789
understandable yeah anyway I'm Anna I

8
00:00:26,789 --> 00:00:29,160
don't know like whether you're all

9
00:00:29,160 --> 00:00:34,620
morning people I'm not I I I'm not

10
00:00:34,620 --> 00:00:38,340
usually awake at that kind of time so

11
00:00:38,340 --> 00:00:41,219
yeah I hope this is going well it's not

12
00:00:41,219 --> 00:00:43,710
going to be a like it's going to be a

13
00:00:43,710 --> 00:00:48,719
technical talk about node just like yeah

14
00:00:48,719 --> 00:00:52,379
okay so first of all first of all like

15
00:00:52,379 --> 00:00:54,570
the forward he doesn't work here so I'm

16
00:00:54,570 --> 00:00:57,090
gonna have to go here

17
00:00:57,090 --> 00:01:02,969
okay so Who am I Anna I'm a DBA LAX on

18
00:01:02,969 --> 00:01:04,979
Twitter and github / answered whatever

19
00:01:04,979 --> 00:01:10,320
you want I use she/her pronouns and I've

20
00:01:10,320 --> 00:01:13,710
been an active contributor to know chess

21
00:01:13,710 --> 00:01:15,420
since December 2015

22
00:01:15,420 --> 00:01:18,930
it's like quite a while ago and I'm and

23
00:01:18,930 --> 00:01:21,030
I know just to see like technical

24
00:01:21,030 --> 00:01:22,560
steering committee and what that means

25
00:01:22,560 --> 00:01:26,490
is that I am one of the people who like

26
00:01:26,490 --> 00:01:28,740
if there is no consensus among the you

27
00:01:28,740 --> 00:01:31,619
know chess collaborator group where the

28
00:01:31,619 --> 00:01:33,420
people who decide what actually happens

29
00:01:33,420 --> 00:01:36,119
or we try to set the the general

30
00:01:36,119 --> 00:01:38,720
direction for where the project is going

31
00:01:38,720 --> 00:01:41,520
like that that also means that like if

32
00:01:41,520 --> 00:01:43,110
you want to complain about something or

33
00:01:43,110 --> 00:01:45,149
anything you can like I personally can

34
00:01:45,149 --> 00:01:50,820
come to and it's like I'm gonna start

35
00:01:50,820 --> 00:01:52,439
this start by like describing how I

36
00:01:52,439 --> 00:01:55,979
originally got into coding in Noches I'm

37
00:01:55,979 --> 00:01:58,799
contributing to know chess itself and so

38
00:01:58,799 --> 00:02:01,500
like there's this I hope you can you all

39
00:02:01,500 --> 00:02:09,390
read that I not that's what so like

40
00:02:09,390 --> 00:02:12,540
basically it's like setting using

41
00:02:12,540 --> 00:02:14,310
timeout with like invalid parameters

42
00:02:14,310 --> 00:02:17,430
using the like accidentally passing a

43
00:02:17,430 --> 00:02:19,769
number twice and like don't ask me why I

44
00:02:19,769 --> 00:02:22,469
did that I I had something like that in

45
00:02:22,469 --> 00:02:24,180
my code once and like I couldn't really

46
00:02:24,180 --> 00:02:25,920
figure out where wearing that coat that

47
00:02:25,920 --> 00:02:27,719
was means like that was the original

48
00:02:27,719 --> 00:02:30,060
stack race that you were getting and I'm

49
00:02:30,060 --> 00:02:31,920
still I just don't think you're getting

50
00:02:31,920 --> 00:02:35,340
it unknown far and so yeah just like

51
00:02:35,340 --> 00:02:36,989
it's it's blowing up when it tries to

52
00:02:36,989 --> 00:02:39,720
call that function which is 1000 which

53
00:02:39,720 --> 00:02:41,939
is not a function so it's not going to

54
00:02:41,939 --> 00:02:46,170
work and so like yeah that was

55
00:02:46,170 --> 00:02:47,760
frustrating to debug and actually the

56
00:02:47,760 --> 00:02:49,769
the easiest way that I could think of

57
00:02:49,769 --> 00:02:51,260
debugging this was like to actually

58
00:02:51,260 --> 00:02:53,909
patch note card so that it would like

59
00:02:53,909 --> 00:02:57,120
throw an error if if the function first

60
00:02:57,120 --> 00:03:00,299
the timeout is not actually function so

61
00:03:00,299 --> 00:03:02,879
like this is I mean there were tests and

62
00:03:02,879 --> 00:03:04,230
there were what's the documentation

63
00:03:04,230 --> 00:03:05,790
change and everything it like with this

64
00:03:05,790 --> 00:03:07,769
but basically this was all the patch to

65
00:03:07,769 --> 00:03:11,069
us like if the callbacks not a function

66
00:03:11,069 --> 00:03:14,069
then like complain immediately so you

67
00:03:14,069 --> 00:03:17,909
would get a proper stack trace and yeah

68
00:03:17,909 --> 00:03:20,400
and like i mentioning this because like

69
00:03:20,400 --> 00:03:23,940
it's it's just that a like no jess is

70
00:03:23,940 --> 00:03:25,560
part of your application if you build

71
00:03:25,560 --> 00:03:29,040
something in note so it means like every

72
00:03:29,040 --> 00:03:30,329
improvement that you make to note makes

73
00:03:30,329 --> 00:03:32,489
your code better and like if there is

74
00:03:32,489 --> 00:03:34,379
something that you think that note could

75
00:03:34,379 --> 00:03:35,220
do better

76
00:03:35,220 --> 00:03:37,409
you can like try to come up with a pull

77
00:03:37,409 --> 00:03:39,209
request or maybe even choose open issue

78
00:03:39,209 --> 00:03:41,579
or something it's a lot of these small

79
00:03:41,579 --> 00:03:44,639
things that that actually make note a

80
00:03:44,639 --> 00:03:49,489
great software like for example like

81
00:03:49,489 --> 00:03:51,930
after he like seven or eight last pull

82
00:03:51,930 --> 00:03:54,150
requests that I opened like two were

83
00:03:54,150 --> 00:03:57,449
actual bug fixes for like HTTP to stuff

84
00:03:57,449 --> 00:04:00,060
and the like five of them were just like

85
00:04:00,060 --> 00:04:02,220
stuff that I ran along the way while I

86
00:04:02,220 --> 00:04:04,919
was debugging them just like thinking

87
00:04:04,919 --> 00:04:07,049
okay yeah this is not helpful what note

88
00:04:07,049 --> 00:04:09,419
does their so let's do something more

89
00:04:09,419 --> 00:04:13,109
helpful okay yeah so why was I talking

90
00:04:13,109 --> 00:04:14,579
about that and like why I'm talking

91
00:04:14,579 --> 00:04:17,579
about no chase in general it's not just

92
00:04:17,579 --> 00:04:20,130
because like I'm a core contributor it's

93
00:04:20,130 --> 00:04:23,340
also because like before I made that

94
00:04:23,340 --> 00:04:25,229
patch and like before later I started

95
00:04:25,229 --> 00:04:26,220
watching the no J

96
00:04:26,220 --> 00:04:29,190
no repository and everything I didn't

97
00:04:29,190 --> 00:04:32,220
really have a lot of a lot of concept

98
00:04:32,220 --> 00:04:34,470
about what was going on inside the court

99
00:04:34,470 --> 00:04:37,920
no just community it's kind of like it

100
00:04:37,920 --> 00:04:40,530
was kind of like its own separate world

101
00:04:40,530 --> 00:04:43,980
and and I know that a lot of people in

102
00:04:43,980 --> 00:04:45,300
the community still feel kind of

103
00:04:45,300 --> 00:04:48,690
disconnected from from what's happening

104
00:04:48,690 --> 00:04:51,510
there like most of you probably just

105
00:04:51,510 --> 00:04:54,120
like take the releases of notice they

106
00:04:54,120 --> 00:04:55,650
come and like update every once in a

107
00:04:55,650 --> 00:04:59,070
while and sometimes hear about new cool

108
00:04:59,070 --> 00:05:02,370
features or something but but basically

109
00:05:02,370 --> 00:05:05,550
that's it and like I think it would be

110
00:05:05,550 --> 00:05:10,050
cool for both sides if they're like if

111
00:05:10,050 --> 00:05:11,250
people had more of an idea what was

112
00:05:11,250 --> 00:05:13,620
happening a note and if we note core

113
00:05:13,620 --> 00:05:15,200
people have more of an idea what was

114
00:05:15,200 --> 00:05:19,169
what what users actually do it need any

115
00:05:19,169 --> 00:05:21,360
like it's not like none of us are

116
00:05:21,360 --> 00:05:24,180
actually are aren't users either but you

117
00:05:24,180 --> 00:05:28,830
know okay so and where are we now with

118
00:05:28,830 --> 00:05:30,870
note as to like no tennis just around

119
00:05:30,870 --> 00:05:34,080
the corner it's probably going to come

120
00:05:34,080 --> 00:05:36,840
out in April until yesterday I thought

121
00:05:36,840 --> 00:05:38,280
it was definitely coming out in April

122
00:05:38,280 --> 00:05:41,419
[Laughter]

123
00:05:41,419 --> 00:05:44,640
okay yeah so I'm gonna like maybe

124
00:05:44,640 --> 00:05:50,669
mention that later but yeah probably so

125
00:05:50,669 --> 00:05:53,040
like what's gonna have its features like

126
00:05:53,040 --> 00:05:59,040
yes modules which yet excited like too

127
00:05:59,040 --> 00:06:06,390
early it's like I probably can't speak

128
00:06:06,390 --> 00:06:08,280
as much to it as I should because like I

129
00:06:08,280 --> 00:06:09,810
try to stay away from that topic because

130
00:06:09,810 --> 00:06:13,610
like it's

131
00:06:13,610 --> 00:06:16,439
it's not it's not like healthy to like

132
00:06:16,439 --> 00:06:18,449
talk about it a lot

133
00:06:18,449 --> 00:06:21,779
htv-2 which is like a lot more fun and

134
00:06:21,779 --> 00:06:25,559
which like I'm participating in a lot

135
00:06:25,559 --> 00:06:29,300
more icing hooks which you may have

136
00:06:29,300 --> 00:06:32,869
heard of might probably not have used

137
00:06:32,869 --> 00:06:35,129
but like it's pretty cool thing and

138
00:06:35,129 --> 00:06:36,779
people are building pretty cool things

139
00:06:36,779 --> 00:06:40,110
with it and yeah you're gonna want to

140
00:06:40,110 --> 00:06:43,709
know about that an API just like also

141
00:06:43,709 --> 00:06:46,019
very very specific it's just like for

142
00:06:46,019 --> 00:06:50,069
native add-on authors but it's is it's a

143
00:06:50,069 --> 00:06:53,969
cool new thing and note then there are

144
00:06:53,969 --> 00:06:56,249
like things that move along with with

145
00:06:56,249 --> 00:07:01,199
Jas like SJS evolves are things that we

146
00:07:01,199 --> 00:07:03,209
see in the web platform in browsers that

147
00:07:03,209 --> 00:07:05,550
we think yeah that might be close my for

148
00:07:05,550 --> 00:07:10,139
note like standard URL object like it's

149
00:07:10,139 --> 00:07:13,379
a good I think it's becoming a global in

150
00:07:13,379 --> 00:07:15,360
know tense like you can just like take

151
00:07:15,360 --> 00:07:19,559
URL new URL just like you write it in

152
00:07:19,559 --> 00:07:21,059
the browser and use that same thing in

153
00:07:21,059 --> 00:07:25,369
note text occur the text text encoder

154
00:07:25,369 --> 00:07:29,399
those things then there's things that

155
00:07:29,399 --> 00:07:31,529
are coming from the JavaScript engines

156
00:07:31,529 --> 00:07:33,569
so themselves like we are currently in

157
00:07:33,569 --> 00:07:36,449
master and so probably in no 10 as well

158
00:07:36,449 --> 00:07:40,879
on v8 6.4 which means like stuff like

159
00:07:40,879 --> 00:07:43,909
we're full assembly support in there

160
00:07:43,909 --> 00:07:49,619
that's pretty cool we have a like I

161
00:07:49,619 --> 00:07:50,759
don't know if you have ever heard of

162
00:07:50,759 --> 00:07:53,099
that but like the old debugger way API

163
00:07:53,099 --> 00:07:57,149
there that went completely away but we

164
00:07:57,149 --> 00:07:59,819
also like since then we introduced as a

165
00:07:59,819 --> 00:08:03,149
replacement a way to talk like the like

166
00:08:03,149 --> 00:08:06,149
you can talk to node like the v8 chrome

167
00:08:06,149 --> 00:08:08,849
debugger like you probably have used

168
00:08:08,849 --> 00:08:10,800
that with not or I've heard that you can

169
00:08:10,800 --> 00:08:13,050
do that it's like there's an API for

170
00:08:13,050 --> 00:08:14,759
talking to node with that so like you

171
00:08:14,759 --> 00:08:16,339
can actually do really cool things like

172
00:08:16,339 --> 00:08:19,050
inspect the actual stack of your program

173
00:08:19,050 --> 00:08:20,909
while it is running not just a stack

174
00:08:20,909 --> 00:08:22,649
Chris but like the actual variables and

175
00:08:22,649 --> 00:08:25,469
everything it's like pretty cool stuff

176
00:08:25,469 --> 00:08:27,900
that you can build with that

177
00:08:27,900 --> 00:08:32,380
we're changing the era system in note

178
00:08:32,390 --> 00:08:35,760
yeah I'm gonna like have more details on

179
00:08:35,760 --> 00:08:39,000
everything in here later so I like some

180
00:08:39,000 --> 00:08:45,570
more longer Ford's okay so yes modules

181
00:08:45,570 --> 00:08:47,850
um I'm just like gonna give an overview

182
00:08:47,850 --> 00:08:51,060
of where like my understanding of where

183
00:08:51,060 --> 00:08:52,950
we are at this and I think my understand

184
00:08:52,950 --> 00:08:56,690
is pretty accurate but I'm not like a

185
00:08:56,690 --> 00:08:59,730
like 2 F we recently we span up a new

186
00:08:59,730 --> 00:09:02,640
modules working group and like if you

187
00:09:02,640 --> 00:09:04,290
are really really interested in like

188
00:09:04,290 --> 00:09:06,360
knowing what exactly is being discussed

189
00:09:06,360 --> 00:09:09,420
and it's happening you can like they

190
00:09:09,420 --> 00:09:10,709
have meetings and they are being

191
00:09:10,709 --> 00:09:12,990
recorded and you might want to check

192
00:09:12,990 --> 00:09:18,630
those out there there is experimental

193
00:09:18,630 --> 00:09:20,760
support in notes so like you can run

194
00:09:20,760 --> 00:09:24,420
note - - experimental modules I think

195
00:09:24,420 --> 00:09:29,040
something like that and you actually can

196
00:09:29,040 --> 00:09:31,709
use ESM with that and it's not quite

197
00:09:31,709 --> 00:09:35,130
where you want it to be yet it's like

198
00:09:35,130 --> 00:09:38,820
one of the things that that we're

199
00:09:38,820 --> 00:09:41,250
currently having a notice that that mgs

200
00:09:41,250 --> 00:09:45,300
is happening as the file extension for

201
00:09:45,300 --> 00:09:50,880
ES modules that might not have to be the

202
00:09:50,880 --> 00:09:52,529
end of it there might be a way to like

203
00:09:52,529 --> 00:09:56,399
use ESM with GS files we're just like

204
00:09:56,399 --> 00:09:59,699
gonna have to gonna have to see what we

205
00:09:59,699 --> 00:10:01,199
can make happen what like is actually

206
00:10:01,199 --> 00:10:03,089
best for everyone it's like one of the

207
00:10:03,089 --> 00:10:05,699
things about us modules is that in every

208
00:10:05,699 --> 00:10:08,100
discussion there's always like multiple

209
00:10:08,100 --> 00:10:11,220
approaches and like none is perfect and

210
00:10:11,220 --> 00:10:14,579
like it always has real downsides for

211
00:10:14,579 --> 00:10:19,800
everyone and like like I can't go into

212
00:10:19,800 --> 00:10:22,680
detail mostly because like some of those

213
00:10:22,680 --> 00:10:27,390
thoughts like for example one of the

214
00:10:27,390 --> 00:10:28,949
things that I have here and the list of

215
00:10:28,949 --> 00:10:32,040
stat named imports was CGS for command

216
00:10:32,040 --> 00:10:34,769
GS so like you can yeah we right you're

217
00:10:34,769 --> 00:10:37,440
at a module that's called like left pad

218
00:10:37,440 --> 00:10:40,590
or something and so you want to like imp

219
00:10:40,590 --> 00:10:43,620
and then import the actual fraction I

220
00:10:43,620 --> 00:10:46,080
don't know what it's called import pad

221
00:10:46,080 --> 00:10:49,020
from coming from left pad or something

222
00:10:49,020 --> 00:10:50,760
like that it's not like going to be what

223
00:10:50,760 --> 00:10:54,570
you it might work it might not work and

224
00:10:54,570 --> 00:10:58,020
like it's not as easy as saying okay we

225
00:10:58,020 --> 00:11:02,190
can just make it work it's like it's

226
00:11:02,190 --> 00:11:03,960
also going to be very different from

227
00:11:03,960 --> 00:11:05,760
what you have right now with commands

228
00:11:05,760 --> 00:11:07,620
yes it's like it's being loaded

229
00:11:07,620 --> 00:11:10,480
asynchronously

230
00:11:10,490 --> 00:11:13,800
so like that's one of the issues that we

231
00:11:13,800 --> 00:11:16,170
have like with interoperability so like

232
00:11:16,170 --> 00:11:18,210
you can't just require and yes module

233
00:11:18,210 --> 00:11:20,160
that's like never going to actually work

234
00:11:20,160 --> 00:11:22,050
this require always gives you a

235
00:11:22,050 --> 00:11:24,750
synchronous result and that is just like

236
00:11:24,750 --> 00:11:27,080
not happening with yes modules by design

237
00:11:27,080 --> 00:11:29,880
it's also not not going to work like

238
00:11:29,880 --> 00:11:33,630
babel like currently compiles yes

239
00:11:33,630 --> 00:11:36,120
modules just like probably one of the

240
00:11:36,120 --> 00:11:37,670
more tricky things to work around it

241
00:11:37,670 --> 00:11:43,020
might be good enough but like babel

242
00:11:43,020 --> 00:11:45,720
isn't doing it like the like this back

243
00:11:45,720 --> 00:11:48,480
wants us to so like we're gonna have to

244
00:11:48,480 --> 00:11:50,820
do it like the the actual j aspect wants

245
00:11:50,820 --> 00:11:57,480
us to do it so yeah okay so like just

246
00:11:57,480 --> 00:11:59,670
like to give a quick overview it's like

247
00:11:59,670 --> 00:12:02,160
important FS from FS just like importing

248
00:12:02,160 --> 00:12:03,660
the entire module that is going to work

249
00:12:03,660 --> 00:12:07,140
that currently does work we like four

250
00:12:07,140 --> 00:12:08,760
core modules we're also going to have

251
00:12:08,760 --> 00:12:10,950
named imports in some way like most

252
00:12:10,950 --> 00:12:13,050
likely because like at least there are

253
00:12:13,050 --> 00:12:14,700
ways that we can make it happen

254
00:12:14,700 --> 00:12:20,750
so yeah and imparting like between

255
00:12:20,750 --> 00:12:23,930
exists between userland

256
00:12:23,930 --> 00:12:26,280
yes modules is always going to work

257
00:12:26,280 --> 00:12:28,350
right that's just like completely SPECT

258
00:12:28,350 --> 00:12:33,350
and yeah that's not going to be an issue

259
00:12:33,350 --> 00:12:36,420
what you like weird what we're not going

260
00:12:36,420 --> 00:12:40,050
to have in yes modules underscore

261
00:12:40,050 --> 00:12:41,700
underscore file name or underscore

262
00:12:41,700 --> 00:12:43,350
underscore their name something like

263
00:12:43,350 --> 00:12:45,420
that i instead you're going to get the

264
00:12:45,420 --> 00:12:49,260
URL of the current module and all of

265
00:12:49,260 --> 00:12:50,970
that lives under imported media so like

266
00:12:50,970 --> 00:12:54,030
there's no magic Global's like all right

267
00:12:54,030 --> 00:12:56,790
she was like require or module or

268
00:12:56,790 --> 00:13:00,810
experts or anything like that and you're

269
00:13:00,810 --> 00:13:02,310
probably going to get like imparted

270
00:13:02,310 --> 00:13:03,900
meter that require which like it's going

271
00:13:03,900 --> 00:13:06,870
to give you way to at least lot existing

272
00:13:06,870 --> 00:13:12,570
common J's modules in in USM okay

273
00:13:12,570 --> 00:13:15,630
another thing HTTP to which is like as I

274
00:13:15,630 --> 00:13:16,920
said is something that I've been working

275
00:13:16,920 --> 00:13:20,730
on a lot more than USM and it's really

276
00:13:20,730 --> 00:13:23,010
cool we have like pretty much everything

277
00:13:23,010 --> 00:13:25,890
in the API fleshed out right now so

278
00:13:25,890 --> 00:13:29,490
that's nice we are it's currently

279
00:13:29,490 --> 00:13:31,110
experimental it has been since it was

280
00:13:31,110 --> 00:13:33,720
introduced in think one-and-a-half years

281
00:13:33,720 --> 00:13:38,430
ago I don't remember exactly but it's

282
00:13:38,430 --> 00:13:40,350
like with your hope is that in no 10

283
00:13:40,350 --> 00:13:42,360
which is like one month away it's not

284
00:13:42,360 --> 00:13:44,490
going to be experimental anymore mostly

285
00:13:44,490 --> 00:13:47,010
because like the API is really fleshed

286
00:13:47,010 --> 00:13:51,290
out at this point it's a lot like the

287
00:13:51,290 --> 00:13:54,270
there is a compatibility API so you can

288
00:13:54,270 --> 00:13:57,180
use it a lot like HTTP one or the

289
00:13:57,180 --> 00:13:59,450
existing HTTP module if you want to

290
00:13:59,450 --> 00:14:01,770
that's going to be useful a lot of the

291
00:14:01,770 --> 00:14:04,140
time you can actually like at least if

292
00:14:04,140 --> 00:14:06,600
you're using TLS servers you can

293
00:14:06,600 --> 00:14:10,980
actually build build servers that

294
00:14:10,980 --> 00:14:13,410
support both natively which is really

295
00:14:13,410 --> 00:14:17,160
nice but likely the new API that you get

296
00:14:17,160 --> 00:14:19,740
from HTTP to if you if you don't care

297
00:14:19,740 --> 00:14:21,770
about like the old stuff about HTTP 1

298
00:14:21,770 --> 00:14:24,960
it's a lot cleaner than what we have an

299
00:14:24,960 --> 00:14:30,570
HTTP 1 yeah it's it's just like it's

300
00:14:30,570 --> 00:14:33,690
also just like better code like actually

301
00:14:33,690 --> 00:14:35,730
everyone was like written in a time when

302
00:14:35,730 --> 00:14:39,870
there was a lot smaller and and it was

303
00:14:39,870 --> 00:14:44,060
just like there was less command review

304
00:14:44,060 --> 00:14:47,640
and more like ok yeah we're gonna like

305
00:14:47,640 --> 00:14:49,290
make changes and like if something

306
00:14:49,290 --> 00:14:53,130
breaks and we're gonna fix it yeah so it

307
00:14:53,130 --> 00:14:55,530
was a different time and plus you get

308
00:14:55,530 --> 00:14:57,210
all the perks of HTTP 2 which is like

309
00:14:57,210 --> 00:14:59,640
you can have a single connection and

310
00:14:59,640 --> 00:15:02,100
multiplex different screams like

311
00:15:02,100 --> 00:15:04,140
basically different files over that you

312
00:15:04,140 --> 00:15:05,890
get pushed

313
00:15:05,890 --> 00:15:10,160
it's like I'm not exactly sure like how

314
00:15:10,160 --> 00:15:11,600
people are actually going to use it but

315
00:15:11,600 --> 00:15:12,890
I'm pretty sure that they're going to

316
00:15:12,890 --> 00:15:16,160
build amazing stuff with it and so like

317
00:15:16,160 --> 00:15:18,170
this is a basically sample of like how

318
00:15:18,170 --> 00:15:20,660
an HTTP server looks like you're gonna

319
00:15:20,660 --> 00:15:22,190
see that like this is not the

320
00:15:22,190 --> 00:15:23,960
compatibility API this is like the

321
00:15:23,960 --> 00:15:28,130
actual new one and you're gonna see okay

322
00:15:28,130 --> 00:15:31,360
some things are pretty familiar like

323
00:15:31,360 --> 00:15:34,160
creating a server and listening on a

324
00:15:34,160 --> 00:15:37,100
port that works like like you'd expect

325
00:15:37,100 --> 00:15:39,920
it to but instead of like requests you

326
00:15:39,920 --> 00:15:42,740
had screens it's like kind of

327
00:15:42,740 --> 00:15:47,090
conceptually the same thing it's like an

328
00:15:47,090 --> 00:15:50,080
HTTP to scream it's like an actual

329
00:15:50,080 --> 00:15:52,250
writable stream that you can just send

330
00:15:52,250 --> 00:15:54,680
data to and instead of like writing

331
00:15:54,680 --> 00:15:58,130
headers you conceptually those are kind

332
00:15:58,130 --> 00:16:06,980
of similar but like you can yeah it's

333
00:16:06,980 --> 00:16:09,290
just like pretty similar if you look at

334
00:16:09,290 --> 00:16:11,030
it at that but like it has a much richer

335
00:16:11,030 --> 00:16:12,800
API but you're gonna have to look at it

336
00:16:12,800 --> 00:16:14,120
up in the documentation if you actually

337
00:16:14,120 --> 00:16:17,240
want to know a lot about that okay so

338
00:16:17,240 --> 00:16:19,880
one of the things that I also like find

339
00:16:19,880 --> 00:16:23,500
pretty cool in notice async works

340
00:16:23,500 --> 00:16:26,990
that's way to like get more of an idea

341
00:16:26,990 --> 00:16:29,210
of what is currently happening in the in

342
00:16:29,210 --> 00:16:31,730
those event loop like what what things

343
00:16:31,730 --> 00:16:33,200
are keeping the event will be life and

344
00:16:33,200 --> 00:16:38,030
what things are currently running so

345
00:16:38,030 --> 00:16:39,290
like for example if you're reading a

346
00:16:39,290 --> 00:16:41,180
file you could actually use s in hooks

347
00:16:41,180 --> 00:16:43,760
to tell what file requests are currently

348
00:16:43,760 --> 00:16:48,620
going on and so also a API that allows

349
00:16:48,620 --> 00:16:51,800
you to like keep track of what a same

350
00:16:51,800 --> 00:16:53,960
thing is causing what async things like

351
00:16:53,960 --> 00:16:57,290
for example some people have previously

352
00:16:57,290 --> 00:16:59,690
built stuff like continuation local

353
00:16:59,690 --> 00:17:02,120
storage with the previous thing that we

354
00:17:02,120 --> 00:17:03,800
had for it which was domains which is

355
00:17:03,800 --> 00:17:06,170
like not a great idea it's like what

356
00:17:06,170 --> 00:17:08,390
we're getting rid of it and that

357
00:17:08,390 --> 00:17:11,410
basically means okay for example you can

358
00:17:11,410 --> 00:17:15,530
you can keep track of what where your

359
00:17:15,530 --> 00:17:18,449
current code is like to watch HTV tu h

360
00:17:18,449 --> 00:17:22,110
here HTTP requests it originally belong

361
00:17:22,110 --> 00:17:25,409
to and like just like keep track of that

362
00:17:25,409 --> 00:17:29,370
and see which where that origin it came

363
00:17:29,370 --> 00:17:32,519
from and you can can you can use it for

364
00:17:32,519 --> 00:17:34,710
like diagnostics for looking at the

365
00:17:34,710 --> 00:17:39,240
timing of operations it's still

366
00:17:39,240 --> 00:17:41,010
experimental and it has a lot of rough

367
00:17:41,010 --> 00:17:43,350
edges in its API I'm gonna give an

368
00:17:43,350 --> 00:17:45,360
example like pretty much right now and

369
00:17:45,360 --> 00:17:46,980
just so you know if you're writing

370
00:17:46,980 --> 00:17:49,350
add-ons ladyhood add-ons like note

371
00:17:49,350 --> 00:17:51,210
doesn't automatically know what you're

372
00:17:51,210 --> 00:17:53,159
doing like if you're just like calling

373
00:17:53,159 --> 00:17:56,730
back from from C++ are from C you're

374
00:17:56,730 --> 00:17:59,279
just like not know doesn't know where

375
00:17:59,279 --> 00:18:02,429
where that originally was caused in note

376
00:18:02,429 --> 00:18:05,519
in the J's code it's like as an add-on

377
00:18:05,519 --> 00:18:06,899
author you're going to have to support

378
00:18:06,899 --> 00:18:10,710
it like pretty much explicitly okay and

379
00:18:10,710 --> 00:18:13,620
so this is like one example script so

380
00:18:13,620 --> 00:18:14,909
like icing hooks that means you have

381
00:18:14,909 --> 00:18:16,980
four hooks it means like you get an

382
00:18:16,980 --> 00:18:19,980
inner took a before after and destroy

383
00:18:19,980 --> 00:18:25,080
hook just like keeping track of of like

384
00:18:25,080 --> 00:18:27,269
every single async operation that is

385
00:18:27,269 --> 00:18:30,269
happening for like for like sockets you

386
00:18:30,269 --> 00:18:32,220
so like if there's an inbound connection

387
00:18:32,220 --> 00:18:34,019
the inner talk is called every time

388
00:18:34,019 --> 00:18:36,990
there is an event on that socket before

389
00:18:36,990 --> 00:18:39,659
and after hooks are called and like once

390
00:18:39,659 --> 00:18:41,580
that socket close it is it gets up to

391
00:18:41,580 --> 00:18:44,850
destroy hook that has been called so I I

392
00:18:44,850 --> 00:18:48,990
have like reading the current file as an

393
00:18:48,990 --> 00:18:51,059
example here at the at the end of this

394
00:18:51,059 --> 00:18:54,389
quick and so like what that actually

395
00:18:54,389 --> 00:18:58,100
does is okay so the first thing it's

396
00:18:58,100 --> 00:19:02,279
initializing AFS request grep that gets

397
00:19:02,279 --> 00:19:08,789
the IV what is that oh it's the ID six

398
00:19:08,789 --> 00:19:11,220
it's like it's like numerical IDs that

399
00:19:11,220 --> 00:19:12,659
you're using to keep track of everything

400
00:19:12,659 --> 00:19:15,570
then later in that script the before

401
00:19:15,570 --> 00:19:17,159
hook is called which means that that

402
00:19:17,159 --> 00:19:20,130
request is finished then it's

403
00:19:20,130 --> 00:19:24,179
initializing in other another file

404
00:19:24,179 --> 00:19:26,850
system request gets to the next ID which

405
00:19:26,850 --> 00:19:29,429
is seven and then the original one is

406
00:19:29,429 --> 00:19:31,139
finished like it's after and destroy

407
00:19:31,139 --> 00:19:32,269
hooks are called

408
00:19:32,269 --> 00:19:34,729
then later the same thing for the next

409
00:19:34,729 --> 00:19:37,759
request like it it's finished it calls

410
00:19:37,759 --> 00:19:40,070
its call back just like indicated by

411
00:19:40,070 --> 00:19:41,299
having it before and after

412
00:19:41,299 --> 00:19:43,789
ok and because it's a request like

413
00:19:43,789 --> 00:19:46,489
request means it only like it's when

414
00:19:46,489 --> 00:19:47,839
it's finished it's done it's always

415
00:19:47,839 --> 00:19:49,879
getting called it's calling the destroy

416
00:19:49,879 --> 00:19:54,769
hook and finally you get another friend

417
00:19:54,769 --> 00:19:57,559
system request and it's like this is

418
00:19:57,559 --> 00:19:59,059
just like the beginning so like it's

419
00:19:59,059 --> 00:20:00,979
very very detailed but what you can

420
00:20:00,979 --> 00:20:02,839
actually see is that there are different

421
00:20:02,839 --> 00:20:04,279
things happening here it's like the

422
00:20:04,279 --> 00:20:05,959
first is actually opening the file the

423
00:20:05,959 --> 00:20:07,759
second one is actually reading from the

424
00:20:07,759 --> 00:20:10,249
file and the third one is closing the

425
00:20:10,249 --> 00:20:14,149
file request so like it's very very low

426
00:20:14,149 --> 00:20:16,820
level and very detailed but yeah you can

427
00:20:16,820 --> 00:20:19,999
build pretty cool stuff with it one of

428
00:20:19,999 --> 00:20:21,709
the things that are also like in the

429
00:20:21,709 --> 00:20:24,950
area of things that are pretty cool in

430
00:20:24,950 --> 00:20:26,659
the web platform and we're having

431
00:20:26,659 --> 00:20:29,719
compatibility is nice it's perfect

432
00:20:29,719 --> 00:20:35,059
performance 6 it's it's also like I

433
00:20:35,059 --> 00:20:36,950
don't think it's introduced in node 8

434
00:20:36,950 --> 00:20:39,889
and I think it's still experimental too

435
00:20:39,889 --> 00:20:42,139
but like also slowly getting out of that

436
00:20:42,139 --> 00:20:46,149
I might be right might be stable by now

437
00:20:46,149 --> 00:20:49,789
and yet this is just like Department

438
00:20:49,789 --> 00:20:51,440
performance API like you have it in the

439
00:20:51,440 --> 00:20:53,929
browser if you're ever I've come in

440
00:20:53,929 --> 00:20:55,219
touch with that it's like you have

441
00:20:55,219 --> 00:20:58,190
performance that now and and a lot more

442
00:20:58,190 --> 00:21:00,349
in there like support for no just

443
00:21:00,349 --> 00:21:01,579
specific events like you can actually

444
00:21:01,579 --> 00:21:04,309
actually tell like how long it took to

445
00:21:04,309 --> 00:21:07,549
lot load the main module of your

446
00:21:07,549 --> 00:21:11,629
application and everything and and it

447
00:21:11,629 --> 00:21:13,309
gives you like low overhead timers which

448
00:21:13,309 --> 00:21:16,339
is like we have something something

449
00:21:16,339 --> 00:21:18,950
similar with like console that time and

450
00:21:18,950 --> 00:21:22,099
console that time and but this is this

451
00:21:22,099 --> 00:21:28,459
is a cool new stuff ok an API who in

452
00:21:28,459 --> 00:21:30,139
this room has ever written a native

453
00:21:30,139 --> 00:21:34,129
add-on with note it's not a lot of

454
00:21:34,129 --> 00:21:38,359
people so if you ever like felt that

455
00:21:38,359 --> 00:21:41,299
that might be useful for you this is a

456
00:21:41,299 --> 00:21:44,629
cool new thing that also makes that a

457
00:21:44,629 --> 00:21:45,650
lot easier

458
00:21:45,650 --> 00:21:47,990
like if you previously wrote an add-on

459
00:21:47,990 --> 00:21:51,020
for note you have to understand the v8

460
00:21:51,020 --> 00:21:53,750
API which is dual but really really

461
00:21:53,750 --> 00:21:56,570
tricky because like if you're coming

462
00:21:56,570 --> 00:21:58,220
from a JS background there error

463
00:21:58,220 --> 00:21:59,900
handling is just like going to be really

464
00:21:59,900 --> 00:22:02,570
really confusing because like it's

465
00:22:02,570 --> 00:22:04,490
written in C++ and they don't use

466
00:22:04,490 --> 00:22:06,770
exceptions it's like that has

467
00:22:06,770 --> 00:22:11,270
performance impact so they're gonna have

468
00:22:11,270 --> 00:22:12,860
to do something really really tricky and

469
00:22:12,860 --> 00:22:14,930
with napi you have something pretty

470
00:22:14,930 --> 00:22:17,810
natural so like this is an example of

471
00:22:17,810 --> 00:22:20,860
how to write a C++ add-on with an API

472
00:22:20,860 --> 00:22:23,300
this is just a single function that you

473
00:22:23,300 --> 00:22:26,750
can expose to JavaScript and I mean it's

474
00:22:26,750 --> 00:22:29,660
it's not quite like JavaScript you still

475
00:22:29,660 --> 00:22:31,640
have like to do things like explicitly

476
00:22:31,640 --> 00:22:34,610
convert like say this value convert it

477
00:22:34,610 --> 00:22:36,050
to a number and then like give me the

478
00:22:36,050 --> 00:22:39,830
value as a 32-bit integer that's

479
00:22:39,830 --> 00:22:41,840
overhead you're not gonna get it around

480
00:22:41,840 --> 00:22:44,840
but I get like as a JavaScript developer

481
00:22:44,840 --> 00:22:46,640
you can definitely understand what this

482
00:22:46,640 --> 00:22:50,360
does and make changes to it and yeah

483
00:22:50,360 --> 00:22:59,930
it's okay another thing promise support

484
00:22:59,930 --> 00:23:01,850
is just like something that we're going

485
00:23:01,850 --> 00:23:04,820
to live with like there are people who

486
00:23:04,820 --> 00:23:06,710
don't really like to use promises in

487
00:23:06,710 --> 00:23:08,960
node and like they're going to keep

488
00:23:08,960 --> 00:23:12,560
being able to do that but like generally

489
00:23:12,560 --> 00:23:14,660
people are going to use async await

490
00:23:14,660 --> 00:23:17,120
people are going to use promises for a

491
00:23:17,120 --> 00:23:21,980
lot of stuff and yeah we as a platform

492
00:23:21,980 --> 00:23:23,690
know just like has to move along with

493
00:23:23,690 --> 00:23:28,490
that and so like we have like if you

494
00:23:28,490 --> 00:23:30,260
don't use async await at this point you

495
00:23:30,260 --> 00:23:32,000
should just like telling you this is

496
00:23:32,000 --> 00:23:38,570
just like really really really nice you

497
00:23:38,570 --> 00:23:40,460
have we have a weight support entity in

498
00:23:40,460 --> 00:23:43,250
the wrapper right now I think that's

499
00:23:43,250 --> 00:23:46,090
also just like coming out in no 10

500
00:23:46,090 --> 00:23:48,920
because like we actually have to like do

501
00:23:48,920 --> 00:23:52,730
some weird transpiration inside the

502
00:23:52,730 --> 00:23:55,910
repple like previously previously didn't

503
00:23:55,910 --> 00:23:57,500
do that

504
00:23:57,500 --> 00:23:59,390
but we think it's

505
00:23:59,390 --> 00:24:01,880
it's like we have to ship an actual like

506
00:24:01,880 --> 00:24:06,230
parsing library with note we have Google

507
00:24:06,230 --> 00:24:08,650
dot promise if I in Note 8 and above

508
00:24:08,650 --> 00:24:12,260
which is like the bare minimum like you

509
00:24:12,260 --> 00:24:15,140
can convert note functions to like

510
00:24:15,140 --> 00:24:17,690
promise api's but just like you still

511
00:24:17,690 --> 00:24:18,830
have to do that explicit conversion

512
00:24:18,830 --> 00:24:23,660
which is not that nice we have a new

513
00:24:23,660 --> 00:24:26,750
module FS / promises coming in no 10 and

514
00:24:26,750 --> 00:24:29,210
that is actually going to be like all

515
00:24:29,210 --> 00:24:30,980
the file system functions that you're

516
00:24:30,980 --> 00:24:32,690
used to

517
00:24:32,690 --> 00:24:35,810
except they work promise based and like

518
00:24:35,810 --> 00:24:37,790
instead of so instead of file

519
00:24:37,790 --> 00:24:39,620
descriptors like the actual you're

520
00:24:39,620 --> 00:24:42,050
working with like if you're using file

521
00:24:42,050 --> 00:24:43,910
descriptors in the current file system

522
00:24:43,910 --> 00:24:46,640
API you're working with the actual raw

523
00:24:46,640 --> 00:24:49,160
numbers which is not that nice piece

524
00:24:49,160 --> 00:24:51,230
like I mean you can open a file and

525
00:24:51,230 --> 00:24:53,180
basically forget to close it and just

526
00:24:53,180 --> 00:24:58,130
like it's going to leak resources if you

527
00:24:58,130 --> 00:24:59,720
are not really really careful

528
00:24:59,720 --> 00:25:02,000
like if something throws before you can

529
00:25:02,000 --> 00:25:03,830
close the file the file descriptor

530
00:25:03,830 --> 00:25:06,470
you're gonna have a resource leak it's

531
00:25:06,470 --> 00:25:08,570
like there's the one change that is

532
00:25:08,570 --> 00:25:11,420
different from the normal FS API that

533
00:25:11,420 --> 00:25:13,100
you don't actually work with your raw

534
00:25:13,100 --> 00:25:14,900
file descriptors to work with wrappers

535
00:25:14,900 --> 00:25:18,290
and like if you if they get garbage

536
00:25:18,290 --> 00:25:19,550
collected they're going to show you a

537
00:25:19,550 --> 00:25:21,350
warning it's like hey you forgot to

538
00:25:21,350 --> 00:25:25,910
close this that's also pretty nice and I

539
00:25:25,910 --> 00:25:30,500
think iterators which is like something

540
00:25:30,500 --> 00:25:34,250
that I think is like you don't need a

541
00:25:34,250 --> 00:25:36,770
flag for it in no.10 anymore like just

542
00:25:36,770 --> 00:25:39,490
to have the the engine exposed to us and

543
00:25:39,490 --> 00:25:41,630
like we're going to implement that in

544
00:25:41,630 --> 00:25:43,880
some way for for redline and for screams

545
00:25:43,880 --> 00:25:45,950
it's like you can actually do something

546
00:25:45,950 --> 00:25:49,580
like for racing cons shank off-screen

547
00:25:49,580 --> 00:25:51,830
instead of like listening to the data

548
00:25:51,830 --> 00:25:54,170
event of a stream also like really

549
00:25:54,170 --> 00:25:57,890
really cool and so like yeah I mentioned

550
00:25:57,890 --> 00:25:59,450
in the beginning that there were changes

551
00:25:59,450 --> 00:26:03,350
to our error system and it's like every

552
00:26:03,350 --> 00:26:05,360
error in node is going to eventually

553
00:26:05,360 --> 00:26:08,060
have a error code associated with it in

554
00:26:08,060 --> 00:26:10,870
some way

555
00:26:10,880 --> 00:26:12,920
this is usually going to look something

556
00:26:12,920 --> 00:26:14,750
like this like this is just like a very

557
00:26:14,750 --> 00:26:17,290
simple example of use like passing in a

558
00:26:17,290 --> 00:26:20,660
just like invalid thing to a function

559
00:26:20,660 --> 00:26:23,120
like you can't listen on an array with a

560
00:26:23,120 --> 00:26:25,520
network server just like going to tell

561
00:26:25,520 --> 00:26:29,060
you okay yeah that is not the right form

562
00:26:29,060 --> 00:26:33,830
we don't understand that and it's like

563
00:26:33,830 --> 00:26:36,680
so you can use you can look up the error

564
00:26:36,680 --> 00:26:42,090
code on that on that error

565
00:26:42,100 --> 00:26:44,510
yeah and that also means like if you're

566
00:26:44,510 --> 00:26:47,240
currently like the motivation for this

567
00:26:47,240 --> 00:26:48,800
is that like a lot of people were

568
00:26:48,800 --> 00:26:51,740
checking the the error text the error

569
00:26:51,740 --> 00:26:54,500
message when they like to figure out

570
00:26:54,500 --> 00:26:56,810
what actually happened and just like do

571
00:26:56,810 --> 00:27:01,250
like diagnostic speak in terms of that

572
00:27:01,250 --> 00:27:04,070
and that's not really cool because that

573
00:27:04,070 --> 00:27:05,630
means that changing an error message is

574
00:27:05,630 --> 00:27:07,520
actually a cember major change or has

575
00:27:07,520 --> 00:27:09,650
been up until now and we really don't

576
00:27:09,650 --> 00:27:11,180
want to do that group on I like just

577
00:27:11,180 --> 00:27:13,310
like give you the best error messages we

578
00:27:13,310 --> 00:27:16,460
can it's like yeah if you're if you want

579
00:27:16,460 --> 00:27:17,870
to know what was happening with a

580
00:27:17,870 --> 00:27:19,970
certain error just use error that code

581
00:27:19,970 --> 00:27:23,420
from now but like also like introducing

582
00:27:23,420 --> 00:27:24,560
this as always the same verb major

583
00:27:24,560 --> 00:27:26,210
change or at least we consider the one

584
00:27:26,210 --> 00:27:28,940
just like to be careful at this point so

585
00:27:28,940 --> 00:27:30,770
this is just like more of a long-term

586
00:27:30,770 --> 00:27:37,880
thing too and yeah okay workers we it's

587
00:27:37,880 --> 00:27:39,650
like there was a fork of node that you

588
00:27:39,650 --> 00:27:41,420
made a furtive like a while ago like

589
00:27:41,420 --> 00:27:44,600
half a year or so and in there I

590
00:27:44,600 --> 00:27:47,150
actually build work your support for

591
00:27:47,150 --> 00:27:51,170
node and I mean that far can installed

592
00:27:51,170 --> 00:27:55,040
at this point but but I have a lot of

593
00:27:55,040 --> 00:27:57,770
free time in the next couple weeks and I

594
00:27:57,770 --> 00:28:00,140
definitely want to have this a node I'm

595
00:28:00,140 --> 00:28:02,180
gonna try to like take the parts which

596
00:28:02,180 --> 00:28:04,640
like half a year olds like I mean

597
00:28:04,640 --> 00:28:07,460
there's those are pretty big patches but

598
00:28:07,460 --> 00:28:08,720
like I definitely want to have to add a

599
00:28:08,720 --> 00:28:10,370
note and like when I get them part it

600
00:28:10,370 --> 00:28:13,130
and want to make that happen really soon

601
00:28:13,130 --> 00:28:15,770
like that is what the API would

602
00:28:15,770 --> 00:28:17,540
currently look like if those patches

603
00:28:17,540 --> 00:28:20,150
were accepted as they currently are it's

604
00:28:20,150 --> 00:28:23,410
like completely up for debate but

605
00:28:23,410 --> 00:28:25,630
yeah you could just like have work as a

606
00:28:25,630 --> 00:28:27,700
note and those would have like access to

607
00:28:27,700 --> 00:28:29,980
the full noches API it's not like we're

608
00:28:29,980 --> 00:28:32,110
workers where you like have only

609
00:28:32,110 --> 00:28:34,870
restricted subset of things if if you

610
00:28:34,870 --> 00:28:36,820
want that you can probably build it with

611
00:28:36,820 --> 00:28:41,049
this like this is like speculative it's

612
00:28:41,049 --> 00:28:43,900
like there there isn't even open pull

613
00:28:43,900 --> 00:28:46,240
request so like take it with like grain

614
00:28:46,240 --> 00:28:51,490
of salt are you all tired at this point

615
00:28:51,490 --> 00:28:53,380
just like I know this is I know this is

616
00:28:53,380 --> 00:28:55,419
a very technical talk it's like doesn't

617
00:28:55,419 --> 00:28:58,390
really have any highlights or anything I

618
00:28:58,390 --> 00:29:05,650
hope you're fine with that I ain't like

619
00:29:05,650 --> 00:29:07,270
the general ideas just like to give you

620
00:29:07,270 --> 00:29:09,250
an overview over it's happening and I

621
00:29:09,250 --> 00:29:13,780
mean if you want to look something up

622
00:29:13,780 --> 00:29:15,760
again you can always like take a look at

623
00:29:15,760 --> 00:29:20,140
these slides later or or ask me or

624
00:29:20,140 --> 00:29:22,900
anything which is like don't feel like

625
00:29:22,900 --> 00:29:24,429
you have to like soak everything out

626
00:29:24,429 --> 00:29:28,809
just like no okay webassembly is there

627
00:29:28,809 --> 00:29:30,010
and we should have probably heard of

628
00:29:30,010 --> 00:29:31,990
because like over the last two months or

629
00:29:31,990 --> 00:29:34,150
so like everybody has been really really

630
00:29:34,150 --> 00:29:35,980
excited about being able to use rap

631
00:29:35,980 --> 00:29:39,970
assembly in JavaScript it's like yeah we

632
00:29:39,970 --> 00:29:41,679
have support for that it's not gonna

633
00:29:41,679 --> 00:29:43,690
like completely replace native add-ons

634
00:29:43,690 --> 00:29:46,150
but going to replace a lot of the use

635
00:29:46,150 --> 00:29:52,090
cases that we have for those yeah also

636
00:29:52,090 --> 00:29:55,960
like since no date you we like like I

637
00:29:55,960 --> 00:29:57,580
guess a lot of people here that are

638
00:29:57,580 --> 00:29:59,950
using the new protection are still on

639
00:29:59,950 --> 00:30:03,400
note 6 or something like that no date

640
00:30:03,400 --> 00:30:05,350
has a completely new compiler tool chain

641
00:30:05,350 --> 00:30:09,250
which is like I think like people were

642
00:30:09,250 --> 00:30:12,100
seeing up to 50% increases in

643
00:30:12,100 --> 00:30:13,539
performance just like from having this

644
00:30:13,539 --> 00:30:18,130
new JavaScript compiler tool chain like

645
00:30:18,130 --> 00:30:22,120
yeah I read work that they did or like I

646
00:30:22,120 --> 00:30:23,679
said the debugger API if you're ever

647
00:30:23,679 --> 00:30:26,409
used that it's like gone because like V

648
00:30:26,409 --> 00:30:28,570
I'd remove that so like we can't provide

649
00:30:28,570 --> 00:30:31,419
it anymore we're gonna have to live with

650
00:30:31,419 --> 00:30:35,500
what's coming up scream

651
00:30:35,510 --> 00:30:42,150
and oh yeah right it's we also like

652
00:30:42,150 --> 00:30:44,940
managed like it's not really a spur like

653
00:30:44,940 --> 00:30:47,280
we ain't decided to put note in its own

654
00:30:47,280 --> 00:30:49,920
CI so like that means that every change

655
00:30:49,920 --> 00:30:51,870
to v8 is actually being run against note

656
00:30:51,870 --> 00:30:53,670
and see whether it breaks any of our

657
00:30:53,670 --> 00:30:56,310
tests which is like really really nice

658
00:30:56,310 --> 00:31:00,060
first ability and just like not having

659
00:31:00,060 --> 00:31:01,710
to worry about as much like putting

660
00:31:01,710 --> 00:31:04,230
putting as much work into upgrading the

661
00:31:04,230 --> 00:31:06,390
18 note because like they're also like

662
00:31:06,390 --> 00:31:09,320
trying to take care of that on their own

663
00:31:09,320 --> 00:31:12,380
some are longer turn things okay so

664
00:31:12,380 --> 00:31:13,590
chakracore

665
00:31:13,590 --> 00:31:16,100
is it's a fork if note that's still like

666
00:31:16,100 --> 00:31:19,530
pretty actively being worked upon i'm

667
00:31:19,530 --> 00:31:22,200
not sure like when they're trying to

668
00:31:22,200 --> 00:31:24,510
like get that into the main noches

669
00:31:24,510 --> 00:31:26,160
repository but they they do have

670
00:31:26,160 --> 00:31:29,340
releases that you can check out like you

671
00:31:29,340 --> 00:31:31,650
can't install them i mean i think there

672
00:31:31,650 --> 00:31:34,800
are things like nvm with which you can

673
00:31:34,800 --> 00:31:36,210
install them but like i don't think you

674
00:31:36,210 --> 00:31:39,630
can do it with nvm itself in any case

675
00:31:39,630 --> 00:31:41,280
you can just like download and run them

676
00:31:41,280 --> 00:31:43,440
and see what whether that's for you

677
00:31:43,440 --> 00:31:45,930
whether it works i mean like if if you

678
00:31:45,930 --> 00:31:47,790
want try it out and if you have any

679
00:31:47,790 --> 00:31:49,200
feedback they'd be happy about that i

680
00:31:49,200 --> 00:31:54,390
guess also like good and this is I just

681
00:31:54,390 --> 00:31:55,890
like added that last night because like

682
00:31:55,890 --> 00:31:58,380
we had our TOC meetings you see meeting

683
00:31:58,380 --> 00:32:03,800
yesterday after the party and okay so

684
00:32:03,800 --> 00:32:06,690
our like we're gonna have to look at the

685
00:32:06,690 --> 00:32:10,140
OpenSSL story because so currently we're

686
00:32:10,140 --> 00:32:15,000
using open SSL 102 and that is going to

687
00:32:15,000 --> 00:32:19,170
stop being supported after 2019 it's

688
00:32:19,170 --> 00:32:21,510
like it's it's already limiting like how

689
00:32:21,510 --> 00:32:24,870
far we can support note 8 because we're

690
00:32:24,870 --> 00:32:27,840
using that they're like usually we would

691
00:32:27,840 --> 00:32:29,790
support no date for 4 more months I

692
00:32:29,790 --> 00:32:31,980
think I think it's like we have to end

693
00:32:31,980 --> 00:32:33,750
that early because like open mrs. Ellis

694
00:32:33,750 --> 00:32:39,210
going out of LTS and so like the most

695
00:32:39,210 --> 00:32:41,040
probable outcome is that we're going to

696
00:32:41,040 --> 00:32:43,340
support like three versions of OpenSSL

697
00:32:43,340 --> 00:32:45,990
EndNote it's like still going to take a

698
00:32:45,990 --> 00:32:47,490
lot of work

699
00:32:47,490 --> 00:32:52,590
in no.10 and it's like that's why I said

700
00:32:52,590 --> 00:32:54,840
like it's very very likely that no 10 is

701
00:32:54,840 --> 00:32:57,840
coming out in April but like there's

702
00:32:57,840 --> 00:32:59,429
also the option of just waiting for

703
00:32:59,429 --> 00:33:02,669
OpenSSL 1 1 1 to come out which is

704
00:33:02,669 --> 00:33:05,340
probably going to be in May and just

705
00:33:05,340 --> 00:33:07,110
like waiting for that with Aurelius we

706
00:33:07,110 --> 00:33:08,250
don't really want to do that because

707
00:33:08,250 --> 00:33:10,799
like we already delayed like the last

708
00:33:10,799 --> 00:33:13,919
like Note 8 not a release for a

709
00:33:13,919 --> 00:33:16,200
dependency we don't want to kind of get

710
00:33:16,200 --> 00:33:19,259
in the habit of that and we're probably

711
00:33:19,259 --> 00:33:21,899
going to make this work some way but

712
00:33:21,899 --> 00:33:24,389
yeah and openness will be one one one is

713
00:33:24,389 --> 00:33:26,669
actually coming with TLS 1.3 support

714
00:33:26,669 --> 00:33:29,970
which is like I don't know if you care

715
00:33:29,970 --> 00:33:33,779
about that but like people who do a lot

716
00:33:33,779 --> 00:33:35,940
with security stuff apparently care so I

717
00:33:35,940 --> 00:33:39,750
guess that's a really good thing yeah

718
00:33:39,750 --> 00:33:44,759
okay one more thing we like also one of

719
00:33:44,759 --> 00:33:46,409
the things that we just decided this

720
00:33:46,409 --> 00:33:51,899
week is that we are actually going to do

721
00:33:51,899 --> 00:33:54,240
a runtime deprecation for like the

722
00:33:54,240 --> 00:33:56,009
buffer constructor for new buffer or

723
00:33:56,009 --> 00:34:02,210
without the new in some way in no.10 I

724
00:34:02,210 --> 00:34:05,730
rewrote it on that and just like it's a

725
00:34:05,730 --> 00:34:06,809
decision that we're going to have to

726
00:34:06,809 --> 00:34:09,750
live with the backward controller has

727
00:34:09,750 --> 00:34:12,659
been deprecated since note 6 so like

728
00:34:12,659 --> 00:34:14,790
it's been quite a while but people are

729
00:34:14,790 --> 00:34:17,369
still very actively using it and there

730
00:34:17,369 --> 00:34:19,409
are some like I don't know if you've

731
00:34:19,409 --> 00:34:22,169
ever read up on that there are some

732
00:34:22,169 --> 00:34:24,899
usability concerns that like reach into

733
00:34:24,899 --> 00:34:30,240
security issues so like the thing is and

734
00:34:30,240 --> 00:34:35,609
if you like use pass the string to to

735
00:34:35,609 --> 00:34:37,290
the buffer yeah I actually have an

736
00:34:37,290 --> 00:34:41,250
example it's like if you have input

737
00:34:41,250 --> 00:34:42,569
that's coming from a user and you're

738
00:34:42,569 --> 00:34:44,639
going to like parse it in some way and

739
00:34:44,639 --> 00:34:46,770
you forget validating the type and then

740
00:34:46,770 --> 00:34:49,589
you're going to respond something with

741
00:34:49,589 --> 00:34:53,339
with new buffer where the parameter is

742
00:34:53,339 --> 00:34:54,300
something that you didn't really

743
00:34:54,300 --> 00:34:58,920
validate so like that that thing that

744
00:34:58,920 --> 00:34:59,820
you think

745
00:34:59,820 --> 00:35:03,060
some screen like which it might not be

746
00:35:03,060 --> 00:35:08,040
because the user passed it in like if

747
00:35:08,040 --> 00:35:09,870
that's a number like in other versions

748
00:35:09,870 --> 00:35:12,570
of nerd you would actually get a chunk

749
00:35:12,570 --> 00:35:15,120
of additional uninitialized memory it's

750
00:35:15,120 --> 00:35:17,220
like you would actually tell you

751
00:35:17,220 --> 00:35:19,590
potentially tell an attacker what is in

752
00:35:19,590 --> 00:35:21,150
your memory which is like something you

753
00:35:21,150 --> 00:35:25,320
really don't want to do and so like we

754
00:35:25,320 --> 00:35:28,350
switch to zero filling a while ago it's

755
00:35:28,350 --> 00:35:29,700
like you they would get a zero foot

756
00:35:29,700 --> 00:35:31,920
buffer but still like they could like if

757
00:35:31,920 --> 00:35:33,570
there's an attacker and they can control

758
00:35:33,570 --> 00:35:35,340
your program like that and they pass in

759
00:35:35,340 --> 00:35:37,980
a really big number like your program is

760
00:35:37,980 --> 00:35:40,740
trying to use a lot of memory and that's

761
00:35:40,740 --> 00:35:43,440
actually it's like if they do it that a

762
00:35:43,440 --> 00:35:44,880
couple times your code it's just like

763
00:35:44,880 --> 00:35:47,150
we're going to run out of memory yep

764
00:35:47,150 --> 00:35:49,680
your servers going to crash we don't

765
00:35:49,680 --> 00:35:51,390
want to have that happen so we

766
00:35:51,390 --> 00:35:53,190
deprecated the buffer constructor and

767
00:35:53,190 --> 00:35:55,020
replaced it with buffered Alec and

768
00:35:55,020 --> 00:35:58,650
buffer that from you should use those

769
00:35:58,650 --> 00:36:00,300
and like there's going to be a warning

770
00:36:00,300 --> 00:36:02,850
and emitted in no.10 like I said in some

771
00:36:02,850 --> 00:36:07,020
way and be careful and like try to

772
00:36:07,020 --> 00:36:08,880
upgrade your code if you have new buffer

773
00:36:08,880 --> 00:36:10,740
anywhere in there it's like you don't

774
00:36:10,740 --> 00:36:13,140
want your users or yourself to just like

775
00:36:13,140 --> 00:36:15,960
be you see a warning every time you run

776
00:36:15,960 --> 00:36:21,380
that code another thing that is like

777
00:36:21,380 --> 00:36:23,700
kind of thought somebody was saying

778
00:36:23,700 --> 00:36:28,410
something ok yeah screams so that's also

779
00:36:28,410 --> 00:36:29,970
one of the more long-term things but

780
00:36:29,970 --> 00:36:32,370
it's like what I basically spent my last

781
00:36:32,370 --> 00:36:35,840
four or five months working on the node

782
00:36:35,840 --> 00:36:38,240
so like scripts have a lot of overhead

783
00:36:38,240 --> 00:36:41,610
it's like there's buffering in on both

784
00:36:41,610 --> 00:36:43,470
sides for readable screens for writable

785
00:36:43,470 --> 00:36:45,660
screams there's support for a lot of

786
00:36:45,660 --> 00:36:47,540
stuff in there that most people like

787
00:36:47,540 --> 00:36:49,740
well they do use it but they don't use

788
00:36:49,740 --> 00:36:52,680
it all the time like automatically

789
00:36:52,680 --> 00:36:55,800
decoding incoming data from like buffers

790
00:36:55,800 --> 00:36:59,430
to utf-8 or something it's like it's a

791
00:36:59,430 --> 00:37:01,830
very complex machinery you have a lot of

792
00:37:01,830 --> 00:37:05,550
different modes to use screams in just

793
00:37:05,550 --> 00:37:07,530
like it's very complex and it does

794
00:37:07,530 --> 00:37:09,630
unfurnished you unfortunately have a lot

795
00:37:09,630 --> 00:37:11,980
of overhead it's

796
00:37:11,980 --> 00:37:14,650
not terrible but like it's not the way

797
00:37:14,650 --> 00:37:18,520
it should be so like a couple people are

798
00:37:18,520 --> 00:37:21,820
working on like flashing out a new

799
00:37:21,820 --> 00:37:24,580
low-level screams API that is not going

800
00:37:24,580 --> 00:37:26,710
to have those issues it's probably going

801
00:37:26,710 --> 00:37:29,860
to be pull screen based and it's like

802
00:37:29,860 --> 00:37:32,200
what I did it's like that that is still

803
00:37:32,200 --> 00:37:34,210
very speculative what I actually did and

804
00:37:34,210 --> 00:37:35,920
landed a note is like a lot of

805
00:37:35,920 --> 00:37:37,990
refactoring on the C++ side of things

806
00:37:37,990 --> 00:37:41,470
and so like the goal of that is being

807
00:37:41,470 --> 00:37:44,260
able to like have scream a the pipe

808
00:37:44,260 --> 00:37:47,350
scream be just like half that be a fast

809
00:37:47,350 --> 00:37:49,540
path just like not calling into

810
00:37:49,540 --> 00:37:52,150
JavaScript screams at all just like

811
00:37:52,150 --> 00:37:54,070
passing the data right through in C++

812
00:37:54,070 --> 00:37:57,100
which is like if I can make that work

813
00:37:57,100 --> 00:38:01,500
it's going to be really really fast and

814
00:38:01,500 --> 00:38:05,800
so just like so you know where bad note

815
00:38:05,800 --> 00:38:09,070
4 is just like about to expire like if

816
00:38:09,070 --> 00:38:11,710
you use node 4 anywhere just like get

817
00:38:11,710 --> 00:38:13,660
rid of that because like it's only

818
00:38:13,660 --> 00:38:18,940
supported for another month node 6 is

819
00:38:18,940 --> 00:38:21,670
being supported until like one more year

820
00:38:21,670 --> 00:38:24,010
which is also like you might want to

821
00:38:24,010 --> 00:38:25,840
think about starting to move away from

822
00:38:25,840 --> 00:38:29,380
that and like I said no it is supported

823
00:38:29,380 --> 00:38:31,660
on 30 December 2019 because like open

824
00:38:31,660 --> 00:38:37,830
SSL expires then one or two no.9 is like

825
00:38:37,830 --> 00:38:43,240
also like I mean like when I'm talking

826
00:38:43,240 --> 00:38:45,310
to people like some of them are not that

827
00:38:45,310 --> 00:38:49,600
aware that like our our odd number

828
00:38:49,600 --> 00:38:53,880
releases like node 7 node 5 node 9 like

829
00:38:53,880 --> 00:38:56,080
they're just like they basically stop

830
00:38:56,080 --> 00:38:58,270
being supported when the next major

831
00:38:58,270 --> 00:39:00,700
release comes out like no 10 we're still

832
00:39:00,700 --> 00:39:02,740
going to do security releases for like

833
00:39:02,740 --> 00:39:04,570
another two months or so but basically

834
00:39:04,570 --> 00:39:06,730
like if you use an odd-numbered release

835
00:39:06,730 --> 00:39:09,640
of node that's cool because like you

836
00:39:09,640 --> 00:39:12,940
should because like it's basically a a

837
00:39:12,940 --> 00:39:17,220
peek into the future

838
00:39:17,230 --> 00:39:19,180
but yeah it's just like if you're using

839
00:39:19,180 --> 00:39:21,310
that just like be prepared to jump to

840
00:39:21,310 --> 00:39:26,050
know ten like very very soon and that's

841
00:39:26,050 --> 00:39:27,730
it thank you for listening if you have

842
00:39:27,730 --> 00:39:30,369
any questions just like you can come to

843
00:39:30,369 --> 00:39:35,260
me if you have anything that note could

844
00:39:35,260 --> 00:39:37,630
do better or that we could do better or

845
00:39:37,630 --> 00:39:40,530
that you want to change a note yourself

846
00:39:40,530 --> 00:39:43,760
just like come talk to me

