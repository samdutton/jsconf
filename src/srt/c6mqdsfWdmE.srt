1
00:00:02,540 --> 00:00:05,279

all right welcome everyone oh there's

2
00:00:05,279 --> 00:00:06,839
this mic on can you hear me

3
00:00:06,839 --> 00:00:09,630
Samsung awesome so welcome everyone

4
00:00:09,630 --> 00:00:11,550
thanks for joining my talk I think it's

5
00:00:11,550 --> 00:00:14,130
the most click Beatty title I'm not

6
00:00:14,130 --> 00:00:15,240
gonna read all of these abbreviations

7
00:00:15,240 --> 00:00:17,460
because that already weighs half at the

8
00:00:17,460 --> 00:00:21,990
time but instead I would like to give

9
00:00:21,990 --> 00:00:23,340
you in the next 30 minutes a quick

10
00:00:23,340 --> 00:00:25,920
introduction to web security and this is

11
00:00:25,920 --> 00:00:28,410
not gonna be making you all web security

12
00:00:28,410 --> 00:00:30,449
experts but one thing that I want to

13
00:00:30,449 --> 00:00:32,520
make sure is that all of the topics that

14
00:00:32,520 --> 00:00:34,230
I highlight our topics that I think

15
00:00:34,230 --> 00:00:35,790
every web developer should be aware of

16
00:00:35,790 --> 00:00:37,800
whenever they build an application and

17
00:00:37,800 --> 00:00:40,050
hopefully by the end of the talk all of

18
00:00:40,050 --> 00:00:41,489
these abbreviations will make a bit more

19
00:00:41,489 --> 00:00:44,340
sense to you but before we start I would

20
00:00:44,340 --> 00:00:46,140
like to quickly introduce myself as

21
00:00:46,140 --> 00:00:47,309
mentioned before I'm a developer

22
00:00:47,309 --> 00:00:49,460
evangelist for a company called Twilio

23
00:00:49,460 --> 00:00:52,800
we do things like api's to send and

24
00:00:52,800 --> 00:00:54,480
receive text messages and other things

25
00:00:54,480 --> 00:00:56,640
around communications and I live in

26
00:00:56,640 --> 00:00:58,109
Berlin but there's one more thing that

27
00:00:58,109 --> 00:00:59,879
you should know about me and that's the

28
00:00:59,879 --> 00:01:01,260
beautiful part where I can drop this

29
00:01:01,260 --> 00:01:04,100
jacket because it's getting really warm

30
00:01:04,100 --> 00:01:08,090
and this is where the talk gets awkward

31
00:01:08,090 --> 00:01:10,590
all right so I'm a member of a group

32
00:01:10,590 --> 00:01:13,140
called one zjs we're a group of onesie

33
00:01:13,140 --> 00:01:15,570
loving JavaScript developers that love

34
00:01:15,570 --> 00:01:17,400
to go to conferences and care about the

35
00:01:17,400 --> 00:01:17,909
community

36
00:01:17,909 --> 00:01:19,799
I think fluckey is somewhere here which

37
00:01:19,799 --> 00:01:21,119
is the unicorn that is running around

38
00:01:21,119 --> 00:01:24,450
I'm not sure if I see him right now but

39
00:01:24,450 --> 00:01:26,610
you know like today we have so many

40
00:01:26,610 --> 00:01:28,020
social networks and communication

41
00:01:28,020 --> 00:01:30,409
channels but there isn't really one for

42
00:01:30,409 --> 00:01:32,670
onesie loving developers so being a

43
00:01:32,670 --> 00:01:34,110
developer myself I did what every

44
00:01:34,110 --> 00:01:35,460
developer does when they're frustrated

45
00:01:35,460 --> 00:01:37,650
about something not existing and I built

46
00:01:37,650 --> 00:01:40,740
the future great social network called

47
00:01:40,740 --> 00:01:43,049
onesie live which is for onesie loving

48
00:01:43,049 --> 00:01:45,720
developers so social network which I'm

49
00:01:45,720 --> 00:01:48,240
fairly certain will take off I'm not

50
00:01:48,240 --> 00:01:49,770
sure why I don't have high traffic yet

51
00:01:49,770 --> 00:01:53,009
but it will come and you know like being

52
00:01:53,009 --> 00:01:54,930
a developer I obviously made sure that

53
00:01:54,930 --> 00:01:58,290
this is as secure as possible and it

54
00:01:58,290 --> 00:01:59,579
doesn't have any vulnerabilities

55
00:01:59,579 --> 00:02:01,110
especially nothing that can be hacked

56
00:02:01,110 --> 00:02:04,860
with a banana so you know I thought of

57
00:02:04,860 --> 00:02:08,550
everything it uses HTTPS and things to

58
00:02:08,550 --> 00:02:09,869
let's encrypt I don't have to pay a dime

59
00:02:09,869 --> 00:02:13,800
for that it uses HSCs which is the HTTPS

60
00:02:13,800 --> 00:02:15,990
transport security which just makes sure

61
00:02:15,990 --> 00:02:18,090
that there's no downgrading of the

62
00:02:18,090 --> 00:02:19,800
traffic so this is typically what blocks

63
00:02:19,800 --> 00:02:21,960
you from going to google.com when

64
00:02:21,960 --> 00:02:24,090
there's a public Wi-Fi with a captive

65
00:02:24,090 --> 00:02:25,740
portal because they're trying to

66
00:02:25,740 --> 00:02:27,720
downgrade the connection typically from

67
00:02:27,720 --> 00:02:31,770
HTTP to HTTPS and you know I don't allow

68
00:02:31,770 --> 00:02:35,520
mixed content so no HTTP content on a

69
00:02:35,520 --> 00:02:38,880
website that is served by HTTPS no

70
00:02:38,880 --> 00:02:42,270
senator I sanitize the HTML so I allow

71
00:02:42,270 --> 00:02:44,610
people to put a mark down but I'll make

72
00:02:44,610 --> 00:02:46,050
sure to send out I said before I put it

73
00:02:46,050 --> 00:02:47,550
in the page and there's no room for

74
00:02:47,550 --> 00:02:49,410
sequel injections because I'm not really

75
00:02:49,410 --> 00:02:53,580
using a real database so there's no no

76
00:02:53,580 --> 00:02:56,520
way Trav's database injections and i'm

77
00:02:56,520 --> 00:02:58,830
not talking about no sequel databases

78
00:02:58,830 --> 00:03:01,260
because there are no sequel injections

79
00:03:01,260 --> 00:03:02,490
but I'm literally just using a plain

80
00:03:02,490 --> 00:03:03,930
storage because I don't believe this

81
00:03:03,930 --> 00:03:08,370
will scale but turns out that developing

82
00:03:08,370 --> 00:03:10,380
secure web applications isn't as easy as

83
00:03:10,380 --> 00:03:12,690
I thought so I contacted my buddy Bob

84
00:03:12,690 --> 00:03:15,330
Ellison and he took us and you took a

85
00:03:15,330 --> 00:03:17,550
stab at the at the application and kind

86
00:03:17,550 --> 00:03:19,200
of try and figure it out a bunch of

87
00:03:19,200 --> 00:03:20,670
security vulnerabilities that would like

88
00:03:20,670 --> 00:03:22,230
to share with you today and this is

89
00:03:22,230 --> 00:03:23,880
where this hood gets really warm so I'm

90
00:03:23,880 --> 00:03:27,930
gonna take this off all right so if we

91
00:03:27,930 --> 00:03:33,120
go to this page this is basically the

92
00:03:33,120 --> 00:03:35,580
login dialog and I'm gonna open the dev

93
00:03:35,580 --> 00:03:38,010
tools here so we can want to char the

94
00:03:38,010 --> 00:03:40,190
thing and basically what I'm doing

95
00:03:40,190 --> 00:03:42,950
typing in my super secure password here

96
00:03:42,950 --> 00:03:45,060
and it will just do a normal post

97
00:03:45,060 --> 00:03:47,580
request and afterwards I'll send and set

98
00:03:47,580 --> 00:03:50,310
an HTTP cookie to maintain the session

99
00:03:50,310 --> 00:03:51,780
so if you're not familiar with cookies

100
00:03:51,780 --> 00:03:54,300
it's just a way that allows you to

101
00:03:54,300 --> 00:03:56,580
maintain session state throughout

102
00:03:56,580 --> 00:03:58,110
multiple say throughout multiple

103
00:03:58,110 --> 00:04:01,230
sessions by setting a value either by

104
00:04:01,230 --> 00:04:04,800
HTTP headers or via JavaScript so if we

105
00:04:04,800 --> 00:04:06,420
go into the console here we can actually

106
00:04:06,420 --> 00:04:10,950
access that and so I have one that is

107
00:04:10,950 --> 00:04:16,140
called auth token and this is what is

108
00:04:16,140 --> 00:04:19,410
called a JWT or jots or JSON web token

109
00:04:19,410 --> 00:04:22,049
and they're formatted in a very

110
00:04:22,049 --> 00:04:24,450
particular way so if we inspect this we

111
00:04:24,450 --> 00:04:25,919
can see it has three different parts it

112
00:04:25,919 --> 00:04:26,710
has a header

113
00:04:26,710 --> 00:04:28,720
which is the RET part it has a purple

114
00:04:28,720 --> 00:04:30,759
part which is like the payload and then

115
00:04:30,759 --> 00:04:33,850
it has a signature so that's generated

116
00:04:33,850 --> 00:04:36,160
by an algorithm that is specified in the

117
00:04:36,160 --> 00:04:38,710
header using a secret and if we look

118
00:04:38,710 --> 00:04:40,389
here it actually says invalid signature

119
00:04:40,389 --> 00:04:41,919
because I was smart enough to not use

120
00:04:41,919 --> 00:04:46,030
secret as my secret but unfortunately

121
00:04:46,030 --> 00:04:47,560
there is a vulnerability in my app

122
00:04:47,560 --> 00:04:50,440
around this that we can exploit and that

123
00:04:50,440 --> 00:04:51,970
is because there are different

124
00:04:51,970 --> 00:04:53,710
algorithms that you can use to sign your

125
00:04:53,710 --> 00:04:55,810
jots and one of them that is mandatory

126
00:04:55,810 --> 00:04:58,389
in the spec is none

127
00:04:58,389 --> 00:04:59,919
and what nan basically says is that

128
00:04:59,919 --> 00:05:02,199
disregard the signature we don't care

129
00:05:02,199 --> 00:05:03,789
about it and this is more for like

130
00:05:03,789 --> 00:05:05,710
transmitting data than like maintaining

131
00:05:05,710 --> 00:05:09,190
session or something but the problem is

132
00:05:09,190 --> 00:05:10,960
if we do this and let's have some fun we

133
00:05:10,960 --> 00:05:14,320
switch the role here to admin and then I

134
00:05:14,320 --> 00:05:17,320
copy this part and this is just basic C

135
00:05:17,320 --> 00:05:19,509
important base64 encoded right so this

136
00:05:19,509 --> 00:05:22,090
is plain data don't think this is secure

137
00:05:22,090 --> 00:05:26,110
or something and I will set this as an

138
00:05:26,110 --> 00:05:31,900
auth token then we will we can refresh

139
00:05:31,900 --> 00:05:33,940
the page and we'll see that we're now in

140
00:05:33,940 --> 00:05:37,599
admin mode and that is because I'm

141
00:05:37,599 --> 00:05:39,849
taking the job as a single source of

142
00:05:39,849 --> 00:05:41,979
truth so if it says role admin I'm an

143
00:05:41,979 --> 00:05:43,510
admin you know I'm not looking to suffer

144
00:05:43,510 --> 00:05:47,080
anything and because of that in

145
00:05:47,080 --> 00:05:48,430
combination with the algorithm that is

146
00:05:48,430 --> 00:05:51,639
none we can have just switch anything

147
00:05:51,639 --> 00:05:53,260
and I wouldn't have had to login in the

148
00:05:53,260 --> 00:05:54,340
first place I could have just generated

149
00:05:54,340 --> 00:05:56,409
this token with any username and sign in

150
00:05:56,409 --> 00:05:59,409
as anyone so how can we how can we

151
00:05:59,409 --> 00:06:01,449
protect ourselves from that so the first

152
00:06:01,449 --> 00:06:02,860
thing is as I mentioned you can set

153
00:06:02,860 --> 00:06:04,870
cookies either by a JavaScript or via

154
00:06:04,870 --> 00:06:08,050
HTTP headers and you can declare cookies

155
00:06:08,050 --> 00:06:10,060
as HTTP only and that means that you

156
00:06:10,060 --> 00:06:12,070
can't access these by a JavaScript they

157
00:06:12,070 --> 00:06:13,659
will still be send around by the browser

158
00:06:13,659 --> 00:06:15,940
but you won't be able to access them in

159
00:06:15,940 --> 00:06:17,860
JavaScript manipulate them additionally

160
00:06:17,860 --> 00:06:19,240
I should have said this as a signed

161
00:06:19,240 --> 00:06:20,860
cookie meaning I won't be able to

162
00:06:20,860 --> 00:06:23,199
manipulate this anyways without knowing

163
00:06:23,199 --> 00:06:25,570
this the token that was used to sign the

164
00:06:25,570 --> 00:06:28,060
cookie and it's secure so this is only

165
00:06:28,060 --> 00:06:31,180
transferred by a secure connection but

166
00:06:31,180 --> 00:06:32,409
there's another thing I should have done

167
00:06:32,409 --> 00:06:36,400
and that evolves around jars of cells so

168
00:06:36,400 --> 00:06:39,159
I'm using the JSON web token library on

169
00:06:39,159 --> 00:06:39,639
node

170
00:06:39,639 --> 00:06:42,219
but I'm using an old version and that

171
00:06:42,219 --> 00:06:44,020
one has to floss that the newer one

172
00:06:44,020 --> 00:06:47,409
fixes and that is on the one hand the

173
00:06:47,409 --> 00:06:49,150
library should provide you with a way to

174
00:06:49,150 --> 00:06:51,879
whitelist algorithms so in this case I

175
00:06:51,879 --> 00:06:54,849
am in the secure version of this I'm

176
00:06:54,849 --> 00:06:58,360
saying that I only allow HS 256 tokens

177
00:06:58,360 --> 00:07:02,020
versus nothing else and then the other

178
00:07:02,020 --> 00:07:04,810
thing is in this library for example if

179
00:07:04,810 --> 00:07:06,879
the secret is set to something that is

180
00:07:06,879 --> 00:07:09,219
not null the library will actually not

181
00:07:09,219 --> 00:07:11,919
accept none as an algorithm but that's

182
00:07:11,919 --> 00:07:14,259
only in the newer libraries so the

183
00:07:14,259 --> 00:07:16,569
bottom line here stay up to date because

184
00:07:16,569 --> 00:07:18,069
you don't want to be the next Equifax

185
00:07:18,069 --> 00:07:19,419
because that's pretty much what happened

186
00:07:19,419 --> 00:07:21,610
to them not about jots but about having

187
00:07:21,610 --> 00:07:23,529
an older version of an implementation

188
00:07:23,529 --> 00:07:25,689
that was known to be vulnerable and I'm

189
00:07:25,689 --> 00:07:27,879
not getting around to update it so you

190
00:07:27,879 --> 00:07:29,279
don't want to be in the news for that

191
00:07:29,279 --> 00:07:33,490
and this is a social network so we can

192
00:07:33,490 --> 00:07:36,159
post stuff so let's jump back here and

193
00:07:36,159 --> 00:07:37,689
actually post something and I said this

194
00:07:37,689 --> 00:07:39,129
was marked so we can write something

195
00:07:39,129 --> 00:07:45,400
like hi just cough Iceland and if we

196
00:07:45,400 --> 00:07:50,289
post this and we look at the traffic we

197
00:07:50,289 --> 00:07:54,679
will see that if I make this bigger

198
00:07:54,689 --> 00:07:58,149
there's an HTTP POST request here that

199
00:07:58,149 --> 00:08:00,699
actually sets the sense the auth token

200
00:08:00,699 --> 00:08:04,120
along and just sense of form data here

201
00:08:04,120 --> 00:08:06,939
in the bottom so the this is nice

202
00:08:06,939 --> 00:08:08,229
because it's really easy to implement

203
00:08:08,229 --> 00:08:10,000
I'm literally just submitting a form

204
00:08:10,000 --> 00:08:14,849
asynchronously but the combination of

205
00:08:14,849 --> 00:08:18,039
form and cookies is also something that

206
00:08:18,039 --> 00:08:19,839
can cause a cross-site request forgery

207
00:08:19,839 --> 00:08:22,629
attack by attackers so to give you an

208
00:08:22,629 --> 00:08:23,979
idea how this works and what this

209
00:08:23,979 --> 00:08:24,639
actually is

210
00:08:24,639 --> 00:08:28,960
so this is pronounced access access so

211
00:08:28,960 --> 00:08:32,589
sometimes it's written as xsrf or a CSRF

212
00:08:32,589 --> 00:08:35,320
but typically it's pronounced c surf so

213
00:08:35,320 --> 00:08:37,930
if we perform a c Serfaty here it says

214
00:08:37,930 --> 00:08:40,419
you got pwned and if we get back to the

215
00:08:40,419 --> 00:08:42,430
page and we refresh here we see that

216
00:08:42,430 --> 00:08:44,320
actually the attacker was able to post

217
00:08:44,320 --> 00:08:47,500
on my behalf on the page and the reason

218
00:08:47,500 --> 00:08:49,390
why this works is that the browser is

219
00:08:49,390 --> 00:08:51,130
super eager to send all these cookies

220
00:08:51,130 --> 00:08:53,200
along on every

221
00:08:53,200 --> 00:08:54,730
and if we look at the code that actually

222
00:08:54,730 --> 00:08:58,000
hacked us here all it does is it on

223
00:08:58,000 --> 00:09:01,090
bodies body unload it will submit the

224
00:09:01,090 --> 00:09:02,590
form that we have there in this case

225
00:09:02,590 --> 00:09:03,940
it's visible but this could have been

226
00:09:03,940 --> 00:09:06,490
also just hidden and inside there

227
00:09:06,490 --> 00:09:07,990
there's an input tag with a message we

228
00:09:07,990 --> 00:09:09,640
want to send again this could be hidden

229
00:09:09,640 --> 00:09:13,060
it doesn't have to be visible and then

230
00:09:13,060 --> 00:09:15,670
this just submits so and this is really

231
00:09:15,670 --> 00:09:17,350
the danger about this because there

232
00:09:17,350 --> 00:09:19,660
because the browser is super eager to

233
00:09:19,660 --> 00:09:21,490
send this so let's talk about how we can

234
00:09:21,490 --> 00:09:24,400
fix this so let me find my slides again

235
00:09:24,400 --> 00:09:26,890
all right so apparently I was hacked

236
00:09:26,890 --> 00:09:29,560
twice by this application so it's

237
00:09:29,560 --> 00:09:32,020
navigate back first and talk about what

238
00:09:32,020 --> 00:09:35,830
happened here so when I clicked on the

239
00:09:35,830 --> 00:09:38,590
link here I'm using a target blank link

240
00:09:38,590 --> 00:09:41,410
here and what this causes is that the

241
00:09:41,410 --> 00:09:44,350
attackers page can actually access my

242
00:09:44,350 --> 00:09:46,990
page window by using windows open or

243
00:09:46,990 --> 00:09:49,540
that location and rewrite that location

244
00:09:49,540 --> 00:09:52,270
so in my case I was just the attacker

245
00:09:52,270 --> 00:09:54,820
page was just navigating me to another

246
00:09:54,820 --> 00:09:57,340
harmless page but this could just as

247
00:09:57,340 --> 00:10:00,040
well be a redirection for example to a

248
00:10:00,040 --> 00:10:02,410
phishing page it looks like your page so

249
00:10:02,410 --> 00:10:04,000
imagine you you have something like a

250
00:10:04,000 --> 00:10:06,160
social media page where someone can post

251
00:10:06,160 --> 00:10:07,510
a link and you always market it with

252
00:10:07,510 --> 00:10:09,880
target blank then someone someone could

253
00:10:09,880 --> 00:10:13,060
put in a page page link that redirects

254
00:10:13,060 --> 00:10:16,360
that original browser to to a phishing

255
00:10:16,360 --> 00:10:18,970
page luckily protecting yourself from

256
00:10:18,970 --> 00:10:20,440
that as I said pretty straightforward

257
00:10:20,440 --> 00:10:23,770
you want to use the rel attribute and

258
00:10:23,770 --> 00:10:26,620
set it to no opener no refer no opener

259
00:10:26,620 --> 00:10:29,650
basically declares that you don't want

260
00:10:29,650 --> 00:10:31,810
to provide access to windows opener and

261
00:10:31,810 --> 00:10:34,420
then there is no refer which because

262
00:10:34,420 --> 00:10:36,700
some browsers don't support no opener

263
00:10:36,700 --> 00:10:39,370
namely ie and I'm not sure if the newest

264
00:10:39,370 --> 00:10:41,290
version of edge supports no opener but

265
00:10:41,290 --> 00:10:43,870
older versions don't you want to use no

266
00:10:43,870 --> 00:10:45,730
refer as well which at least will hide

267
00:10:45,730 --> 00:10:47,860
the refer URL so we can protect

268
00:10:47,860 --> 00:10:49,360
ourselves from that plus there are some

269
00:10:49,360 --> 00:10:52,630
JavaScript scripts that can you that

270
00:10:52,630 --> 00:10:55,000
allow you to have circumvent this as

271
00:10:55,000 --> 00:10:58,300
well to get back to the sea surface acts

272
00:10:58,300 --> 00:11:01,030
the approach here is relatively

273
00:11:01,030 --> 00:11:03,400
straightforward as well you can use a

274
00:11:03,400 --> 00:11:05,740
library like C surf or just implement

275
00:11:05,740 --> 00:11:06,970
this yourself but the

276
00:11:06,970 --> 00:11:09,009
basic idea is that you will generate a

277
00:11:09,009 --> 00:11:12,189
new cookie called underscore Caesar for

278
00:11:12,189 --> 00:11:15,279
example where you specify a random token

279
00:11:15,279 --> 00:11:17,620
and then you passes token once as a

280
00:11:17,620 --> 00:11:19,420
cookie but you also embed it into the

281
00:11:19,420 --> 00:11:21,610
page that is supposed to have this for

282
00:11:21,610 --> 00:11:24,610
example form submission into for example

283
00:11:24,610 --> 00:11:27,459
in in hidden input field and then when

284
00:11:27,459 --> 00:11:30,399
you submit the post request in this case

285
00:11:30,399 --> 00:11:33,759
you will check if the value in the

286
00:11:33,759 --> 00:11:36,250
cookie equals the same value that is

287
00:11:36,250 --> 00:11:38,170
either passed in the request body in the

288
00:11:38,170 --> 00:11:40,629
request query parameters or in one of

289
00:11:40,629 --> 00:11:44,920
the headers like the ones in the example

290
00:11:44,920 --> 00:11:46,300
which are the ones that the see serve

291
00:11:46,300 --> 00:11:48,370
library checks for and if that's the

292
00:11:48,370 --> 00:11:51,790
case then that works and like your you

293
00:11:51,790 --> 00:11:53,649
successfully submitted something if this

294
00:11:53,649 --> 00:11:55,120
isn't the case it's likely someone who

295
00:11:55,120 --> 00:11:56,769
performs a sea-surface against you

296
00:11:56,769 --> 00:11:59,350
because they will be able to submit that

297
00:11:59,350 --> 00:12:01,540
cookie but they're not able to read that

298
00:12:01,540 --> 00:12:03,310
cookie since the browser auto submits

299
00:12:03,310 --> 00:12:05,920
this meaning that they will not be able

300
00:12:05,920 --> 00:12:08,399
to pass this as a header additionally

301
00:12:08,399 --> 00:12:11,050
all right let's talk about little bobby

302
00:12:11,050 --> 00:12:12,430
tables younger brother which I call

303
00:12:12,430 --> 00:12:16,089
Sammy and the reason is to first give

304
00:12:16,089 --> 00:12:18,160
you back a background about little Bobby

305
00:12:18,160 --> 00:12:19,809
tables if you're not familiar with that

306
00:12:19,809 --> 00:12:23,589
it comes from this xkcd comic which is a

307
00:12:23,589 --> 00:12:26,199
joke about sequel injections by a family

308
00:12:26,199 --> 00:12:27,910
of hackers who named their kid like a

309
00:12:27,910 --> 00:12:31,360
sequel injection and and the principal

310
00:12:31,360 --> 00:12:32,680
being mad because they lost all of their

311
00:12:32,680 --> 00:12:34,000
student records because they weren't

312
00:12:34,000 --> 00:12:38,860
sanitizing the input now to get to

313
00:12:38,860 --> 00:12:40,930
access isotype does anyone know what

314
00:12:40,930 --> 00:12:43,389
this source code is from I would be

315
00:12:43,389 --> 00:12:44,709
really impressed if you someone knows

316
00:12:44,709 --> 00:12:47,379
this behind so this is the myspace worm

317
00:12:47,379 --> 00:12:49,899
or Sammy worm some of you might be

318
00:12:49,899 --> 00:12:52,059
familiar with this for those who are not

319
00:12:52,059 --> 00:12:54,009
familiar with this this was an XSS

320
00:12:54,009 --> 00:12:57,430
attack from 2005 on myspace which would

321
00:12:57,430 --> 00:13:00,819
basically repost this code at Sammy as

322
00:13:00,819 --> 00:13:02,980
your friend and post that Sammy is

323
00:13:02,980 --> 00:13:06,279
awesome that's also how they caught him

324
00:13:06,279 --> 00:13:09,040
because if like if your access code

325
00:13:09,040 --> 00:13:10,899
points at your myspace profile that's

326
00:13:10,899 --> 00:13:12,100
not a smart idea

327
00:13:12,100 --> 00:13:14,050
maybe now because myspace isn't much of

328
00:13:14,050 --> 00:13:17,050
a thing anymore but especially at that

329
00:13:17,050 --> 00:13:19,059
time that wasn't a smart idea but the

330
00:13:19,059 --> 00:13:20,500
cool thing about the

331
00:13:20,500 --> 00:13:22,420
attack as it shows a couple of things

332
00:13:22,420 --> 00:13:25,360
that people use to circumvent XSS

333
00:13:25,360 --> 00:13:28,270
protection because myspace actually had

334
00:13:28,270 --> 00:13:31,360
XSS protection and yet that wasn't

335
00:13:31,360 --> 00:13:33,040
enough because one thing that they said

336
00:13:33,040 --> 00:13:34,990
is they don't have our script tags they

337
00:13:34,990 --> 00:13:37,810
didn't allow the script Collin in in

338
00:13:37,810 --> 00:13:39,460
your else and stuff but they did allow

339
00:13:39,460 --> 00:13:42,640
CS inline CSS so Sammy just created a

340
00:13:42,640 --> 00:13:44,860
div tag that has a style in it that used

341
00:13:44,860 --> 00:13:46,630
background URL and then put JavaScript

342
00:13:46,630 --> 00:13:48,340
in there and because he wasn't allowed

343
00:13:48,340 --> 00:13:50,710
to use quotes in there he basically took

344
00:13:50,710 --> 00:13:53,230
all his code wrapped it into an eval and

345
00:13:53,230 --> 00:13:55,570
put the code itself into another HTTP

346
00:13:55,570 --> 00:13:58,480
and to another HTML attribute and that

347
00:13:58,480 --> 00:14:00,760
would then just be evaluated now the

348
00:14:00,760 --> 00:14:02,530
other thing is they blacklisted words

349
00:14:02,530 --> 00:14:05,170
like inner HTML or onreadystatechange

350
00:14:05,170 --> 00:14:08,560
which is something that is used by xml

351
00:14:08,560 --> 00:14:10,960
httprequest so Ajax requests before

352
00:14:10,960 --> 00:14:14,530
there was fetch but what Sammy just did

353
00:14:14,530 --> 00:14:16,060
is he just turned this into strings

354
00:14:16,060 --> 00:14:19,180
split them by a plus and then also

355
00:14:19,180 --> 00:14:20,770
basically recon catenate at them and

356
00:14:20,770 --> 00:14:22,900
eval the whole thing which equals to the

357
00:14:22,900 --> 00:14:24,850
same code but it's harder to reg acts

358
00:14:24,850 --> 00:14:27,970
against that and then there's the other

359
00:14:27,970 --> 00:14:29,410
thing because if you say that like well

360
00:14:29,410 --> 00:14:31,330
I could block eval and then that's fine

361
00:14:31,330 --> 00:14:33,700
there were all ways to evaluate code the

362
00:14:33,700 --> 00:14:36,430
last one is from a project that I'm not

363
00:14:36,430 --> 00:14:37,960
sure if I can name the name because I'm

364
00:14:37,960 --> 00:14:40,420
not sure if it violates a code of

365
00:14:40,420 --> 00:14:42,610
conduct but talk to Martin clapper over

366
00:14:42,610 --> 00:14:45,070
there and he can probably tell you the

367
00:14:45,070 --> 00:14:46,540
name oh I can tell you the name

368
00:14:46,540 --> 00:14:49,180
afterwards but basically the bottom line

369
00:14:49,180 --> 00:14:50,860
here is there are a bunch of ways to

370
00:14:50,860 --> 00:14:52,840
write the same code in JavaScript so you

371
00:14:52,840 --> 00:14:56,020
can't just block like a single word or

372
00:14:56,020 --> 00:14:57,700
like blacklist certain words because

373
00:14:57,700 --> 00:15:01,120
that doesn't help you so blocking XSL is

374
00:15:01,120 --> 00:15:02,830
not exercise is not trivial and

375
00:15:02,830 --> 00:15:04,530
obviously have a demo for that as well

376
00:15:04,530 --> 00:15:08,050
and so I told you I'm using marks down

377
00:15:08,050 --> 00:15:10,030
here and I'm using a library called

378
00:15:10,030 --> 00:15:13,060
marked and if you're not on the latest

379
00:15:13,060 --> 00:15:15,100
version but like a few versions back so

380
00:15:15,100 --> 00:15:17,950
not really old even though it has a

381
00:15:17,950 --> 00:15:19,570
function that allows you to sanitize

382
00:15:19,570 --> 00:15:23,020
stuff so we can do stuff like alert 1

383
00:15:23,020 --> 00:15:27,280
and this will not work there is a

384
00:15:27,280 --> 00:15:30,790
security vulnerability in here so we can

385
00:15:30,790 --> 00:15:32,910
create links right

386
00:15:32,910 --> 00:15:35,000
and I can do something like click me and

387
00:15:35,000 --> 00:15:38,640
in here if we would write JavaScript :

388
00:15:38,640 --> 00:15:45,750
alert hello JS conf then copy this this

389
00:15:45,750 --> 00:15:47,340
doesn't work directly because the

390
00:15:47,340 --> 00:15:49,680
sanitizer is smart enough to do that but

391
00:15:49,680 --> 00:15:51,270
we can we can play around with this and

392
00:15:51,270 --> 00:15:55,410
shout out to guy from sneek who actually

393
00:15:55,410 --> 00:15:58,200
showed this to me let's do some fun

394
00:15:58,200 --> 00:16:01,860
stuff with encoding so ampersand hash 51

395
00:16:01,860 --> 00:16:03,600
semicolon is literally the same as a

396
00:16:03,600 --> 00:16:07,200
closing parenthesis and similarly a

397
00:16:07,200 --> 00:16:10,200
Colin is M percent hash 50 aint

398
00:16:10,200 --> 00:16:12,540
semicolon and I'm gonna copy this and if

399
00:16:12,540 --> 00:16:13,470
we look at this this is already

400
00:16:13,470 --> 00:16:14,970
difference because some we don't have

401
00:16:14,970 --> 00:16:16,830
the closing parenthesis anymore so we're

402
00:16:16,830 --> 00:16:18,120
getting there

403
00:16:18,120 --> 00:16:21,060
now we can use a sort of quirkiness in

404
00:16:21,060 --> 00:16:24,380
the browser and actually write this here

405
00:16:24,380 --> 00:16:27,600
and what this will do let's first try

406
00:16:27,600 --> 00:16:30,900
this it works and the reason why this

407
00:16:30,900 --> 00:16:33,690
works is that the browser so so first of

408
00:16:33,690 --> 00:16:36,270
all the HTML sanitizer will see this and

409
00:16:36,270 --> 00:16:39,150
doesn't it doesn't see JavaScript : so

410
00:16:39,150 --> 00:16:42,510
it's like I'm fine with that but the

411
00:16:42,510 --> 00:16:44,070
browser will see oh you have an

412
00:16:44,070 --> 00:16:47,250
ampersand a hash your number I think you

413
00:16:47,250 --> 00:16:49,080
just forgot the semicolon so I'll be a

414
00:16:49,080 --> 00:16:53,940
good guy and insert this and then

415
00:16:53,940 --> 00:16:55,290
everything afterwards turns into

416
00:16:55,290 --> 00:16:57,180
JavaScript so this semicolon is valid

417
00:16:57,180 --> 00:16:58,410
JavaScript so it doesn't complain about

418
00:16:58,410 --> 00:16:59,910
that and then we can do anything

419
00:16:59,910 --> 00:17:04,830
afterwards so we've seen this works and

420
00:17:04,830 --> 00:17:06,330
the bottom line here is encoding can be

421
00:17:06,330 --> 00:17:08,910
dangerous don't trust it don't trust any

422
00:17:08,910 --> 00:17:10,830
code that you user can put in because

423
00:17:10,830 --> 00:17:13,320
they can just modify it in like

424
00:17:13,320 --> 00:17:14,610
different ways to kind of get around

425
00:17:14,610 --> 00:17:17,730
that also CSS don't trust CSS I don't

426
00:17:17,730 --> 00:17:19,740
have time to dig into that now but don't

427
00:17:19,740 --> 00:17:21,120
trust it and Jake Archibald actually

428
00:17:21,120 --> 00:17:22,650
just tweeted about this two days ago

429
00:17:22,650 --> 00:17:25,710
again with a new blog post um really

430
00:17:25,710 --> 00:17:27,060
don't trust users there's a bunch of

431
00:17:27,060 --> 00:17:29,100
stuff you can do with about it and I

432
00:17:29,100 --> 00:17:30,390
highly recommend you to check out this

433
00:17:30,390 --> 00:17:32,550
tweet or like the blog post in this

434
00:17:32,550 --> 00:17:36,480
tweet let's talk about another thing

435
00:17:36,480 --> 00:17:39,420
and that's Jason P so jason with padding

436
00:17:39,420 --> 00:17:42,300
it's being used less these days but

437
00:17:42,300 --> 00:17:44,900
basically it's a way to circumvent

438
00:17:44,900 --> 00:17:46,680
same-origin policy

439
00:17:46,680 --> 00:17:48,870
so if you want to request some data from

440
00:17:48,870 --> 00:17:51,420
a different domain you could do this and

441
00:17:51,420 --> 00:17:53,850
the way it works is you define a global

442
00:17:53,850 --> 00:17:55,320
function if you would use something like

443
00:17:55,320 --> 00:17:57,960
Jason J queries JSONP method it would

444
00:17:57,960 --> 00:17:59,940
define this for you but it's basically a

445
00:17:59,940 --> 00:18:01,710
callback function that has to be global

446
00:18:01,710 --> 00:18:05,370
where you expect the code to let the

447
00:18:05,370 --> 00:18:07,290
data to be passed in to you and then you

448
00:18:07,290 --> 00:18:11,370
inject a script tag with that JSONP URL

449
00:18:11,370 --> 00:18:13,800
and pass in as a callback for example or

450
00:18:13,800 --> 00:18:15,390
any other parameter depending on the

451
00:18:15,390 --> 00:18:18,480
endpoint you define the name of the

452
00:18:18,480 --> 00:18:21,600
function in this page play in this case

453
00:18:21,600 --> 00:18:23,910
it's called got posts and what what this

454
00:18:23,910 --> 00:18:25,710
will do is the JSONP endpoint will take

455
00:18:25,710 --> 00:18:28,230
that name and then wrap the data into a

456
00:18:28,230 --> 00:18:31,320
function call with that name now if you

457
00:18:31,320 --> 00:18:34,320
use that but you write poor JSONP and

458
00:18:34,320 --> 00:18:36,450
combine that with the XSS attack now

459
00:18:36,450 --> 00:18:38,940
this is getting fun because my JSONP

460
00:18:38,940 --> 00:18:42,150
endpoint does not verify what I pass and

461
00:18:42,150 --> 00:18:45,450
as a callback and that means that we can

462
00:18:45,450 --> 00:18:48,540
I'm in the wrong tab we can generate

463
00:18:48,540 --> 00:18:51,480
arbitrary JavaScript here and this gets

464
00:18:51,480 --> 00:18:54,270
really fun I'm gonna first show it to

465
00:18:54,270 --> 00:18:56,030
you and then explain what's going on so

466
00:18:56,030 --> 00:18:58,830
this is a bit over the longer code

467
00:18:58,830 --> 00:19:02,040
snippet so I'm gonna copy this so I'm

468
00:19:02,040 --> 00:19:03,840
gonna press this and then click this

469
00:19:03,840 --> 00:19:06,270
button and nothing happens but if i

470
00:19:06,270 --> 00:19:10,620
refresh the page we get this and I can

471
00:19:10,620 --> 00:19:12,690
refresh as many times as a1 it will stay

472
00:19:12,690 --> 00:19:15,180
like this so the reason why this why

473
00:19:15,180 --> 00:19:18,060
this is happening is if we go to

474
00:19:18,060 --> 00:19:20,220
application

475
00:19:20,220 --> 00:19:24,360
I installed a serviceworker and if you

476
00:19:24,360 --> 00:19:26,100
know if you don't know what service

477
00:19:26,100 --> 00:19:28,800
workers are there an api from the

478
00:19:28,800 --> 00:19:31,380
browser that allows you to handle the

479
00:19:31,380 --> 00:19:34,110
network proxy so that you can it's made

480
00:19:34,110 --> 00:19:36,090
for things like offline available apps

481
00:19:36,090 --> 00:19:38,310
so you can cache your website and your

482
00:19:38,310 --> 00:19:41,010
resources and kind of handle which ones

483
00:19:41,010 --> 00:19:42,180
you want to cache and which ones you

484
00:19:42,180 --> 00:19:45,450
don't but it can pretty much do anything

485
00:19:45,450 --> 00:19:47,490
because it can intercept the network

486
00:19:47,490 --> 00:19:50,130
requests right now the browsers are

487
00:19:50,130 --> 00:19:51,930
smart enough to make sure that this can

488
00:19:51,930 --> 00:19:53,700
only be like a serviceworker can only be

489
00:19:53,700 --> 00:19:56,550
installed from your domain but if your

490
00:19:56,550 --> 00:19:58,260
domain has something like a vulnerable

491
00:19:58,260 --> 00:20:00,720
JSONP implementation that allows you to

492
00:20:00,720 --> 00:20:02,669
right arbitrary JavaScript code hosted

493
00:20:02,669 --> 00:20:05,159
on your domain then you have the problem

494
00:20:05,159 --> 00:20:06,809
like this so we can actually see the

495
00:20:06,809 --> 00:20:08,460
callback parameter here is really long

496
00:20:08,460 --> 00:20:10,110
because it's literally the entire

497
00:20:10,110 --> 00:20:12,809
JavaScript that I wanted to generate and

498
00:20:12,809 --> 00:20:15,240
if we pretty fly this here we can see

499
00:20:15,240 --> 00:20:16,440
what's actually happening so I'm

500
00:20:16,440 --> 00:20:19,919
creating a serviceworker script and then

501
00:20:19,919 --> 00:20:21,630
every the entire data because I don't

502
00:20:21,630 --> 00:20:24,090
really care about it just commented and

503
00:20:24,090 --> 00:20:25,830
in here what we do is we just cover

504
00:20:25,830 --> 00:20:27,120
apply always with a hacked and the

505
00:20:27,120 --> 00:20:29,580
script tag injected but this is an

506
00:20:29,580 --> 00:20:31,470
obvious attack but you could do it in a

507
00:20:31,470 --> 00:20:33,480
like less obvious way as well right you

508
00:20:33,480 --> 00:20:36,150
could actually fetch the page inject a

509
00:20:36,150 --> 00:20:37,890
script tag and then send that to the

510
00:20:37,890 --> 00:20:39,390
user and the user will not recognize

511
00:20:39,390 --> 00:20:41,669
this especially not a common user who

512
00:20:41,669 --> 00:20:43,049
doesn't have the dev tool to open and

513
00:20:43,049 --> 00:20:45,150
checks with serviceworkers are installed

514
00:20:45,150 --> 00:20:48,030
I mean how many often did you do let's

515
00:20:48,030 --> 00:20:49,140
see I think they still have that

516
00:20:49,140 --> 00:20:51,720
checkbox or something oh it's down here

517
00:20:51,720 --> 00:20:53,220
so there's a drop-down here called

518
00:20:53,220 --> 00:20:55,260
search workers from other domains that's

519
00:20:55,260 --> 00:20:56,640
a lot of fun open that and you will see

520
00:20:56,640 --> 00:20:58,320
how many people actually install service

521
00:20:58,320 --> 00:20:59,909
workers but you're not reading that code

522
00:20:59,909 --> 00:21:01,409
so you have no idea what these service

523
00:21:01,409 --> 00:21:04,590
workers do so it's sort of a dangerous

524
00:21:04,590 --> 00:21:07,980
attack that's actually remove this

525
00:21:07,980 --> 00:21:10,710
because I also forget about it on

526
00:21:10,710 --> 00:21:15,090
register so if we reload this now this

527
00:21:15,090 --> 00:21:16,409
works but you obviously don't want to

528
00:21:16,409 --> 00:21:19,350
explain your customers please go to your

529
00:21:19,350 --> 00:21:22,289
browser and then click on application in

530
00:21:22,289 --> 00:21:24,150
the command the dev tools and then click

531
00:21:24,150 --> 00:21:26,159
on register on this thing called

532
00:21:26,159 --> 00:21:29,760
serviceworker so far we've seen like

533
00:21:29,760 --> 00:21:32,039
different XSS attacks and we should fix

534
00:21:32,039 --> 00:21:34,200
all of these and also all the other

535
00:21:34,200 --> 00:21:36,030
attacks that we have in there but there

536
00:21:36,030 --> 00:21:38,400
is a new superhero in town that allows

537
00:21:38,400 --> 00:21:40,799
you to protect yourself at least against

538
00:21:40,799 --> 00:21:42,960
some of these and that's called content

539
00:21:42,960 --> 00:21:46,470
security policy or CSP and I haven't

540
00:21:46,470 --> 00:21:48,120
demo for that and this is the exact same

541
00:21:48,120 --> 00:21:50,789
page all that I'm doing is I'm injecting

542
00:21:50,789 --> 00:21:53,669
an HTTP header and we can see that if I

543
00:21:53,669 --> 00:21:56,970
click on any of these and refresh

544
00:21:56,970 --> 00:21:59,309
nothing happens no difference the only

545
00:21:59,309 --> 00:22:00,570
difference is I'm not showing some

546
00:22:00,570 --> 00:22:04,380
pictures here and if we open this and go

547
00:22:04,380 --> 00:22:05,789
to the console we'll see we have a bunch

548
00:22:05,789 --> 00:22:08,070
of errors and that's because it says

549
00:22:08,070 --> 00:22:10,080
that it violates the following content

550
00:22:10,080 --> 00:22:12,929
security policy so what does that

551
00:22:12,929 --> 00:22:14,940
actually mean

552
00:22:14,940 --> 00:22:17,190
so I said content security policy it's

553
00:22:17,190 --> 00:22:19,680
just an HTTP header that you can define

554
00:22:19,680 --> 00:22:21,420
rules that the browser should play by

555
00:22:21,420 --> 00:22:24,120
for your resources so this can be things

556
00:22:24,120 --> 00:22:26,430
like by default anything hosted on my

557
00:22:26,430 --> 00:22:28,590
domain is fine but for scripts and

558
00:22:28,590 --> 00:22:30,210
styles I only want to have things that

559
00:22:30,210 --> 00:22:31,980
have the following neurons and there's

560
00:22:31,980 --> 00:22:33,870
nonce changes on every request so this

561
00:22:33,870 --> 00:22:36,660
can't be hard-coded by the attacker and

562
00:22:36,660 --> 00:22:38,520
that means that no more inline scripts

563
00:22:38,520 --> 00:22:40,620
unless they have an HTML attribute

564
00:22:40,620 --> 00:22:44,040
called nones similarly no inline styles

565
00:22:44,040 --> 00:22:46,140
or anything and that's why the alert 1

566
00:22:46,140 --> 00:22:48,360
or these XSS attacks don't work

567
00:22:48,360 --> 00:22:51,630
I'm blocking objects here image source

568
00:22:51,630 --> 00:22:54,000
I'm only specifying self and API to the

569
00:22:54,000 --> 00:22:55,770
Dorobo dial which is what I use for the

570
00:22:55,770 --> 00:22:59,130
user icons fund source I only allow

571
00:22:59,130 --> 00:23:01,470
Google Fonts itself I block all mixed

572
00:23:01,470 --> 00:23:03,420
content meaning no HTTP content in my

573
00:23:03,420 --> 00:23:05,640
page and then I specify report your I

574
00:23:05,640 --> 00:23:08,070
and this report your I will be paint on

575
00:23:08,070 --> 00:23:10,770
every violation within with an HTTP POST

576
00:23:10,770 --> 00:23:13,110
request there are tools that you can

577
00:23:13,110 --> 00:23:14,250
point this against but you can also

578
00:23:14,250 --> 00:23:16,290
point this against any endpoint on your

579
00:23:16,290 --> 00:23:18,450
server and this will report it there's

580
00:23:18,450 --> 00:23:20,730
also a report only flag and that one

581
00:23:20,730 --> 00:23:24,060
allows you to say that you want to only

582
00:23:24,060 --> 00:23:25,650
get the information that something has

583
00:23:25,650 --> 00:23:27,180
been violated but you don't block the

584
00:23:27,180 --> 00:23:29,100
actual content and this is great for to

585
00:23:29,100 --> 00:23:31,620
have transitioning into it especially if

586
00:23:31,620 --> 00:23:33,150
you want to test this first in like a

587
00:23:33,150 --> 00:23:36,960
local environment or something but the

588
00:23:36,960 --> 00:23:38,760
important thing here is to keep in mind

589
00:23:38,760 --> 00:23:40,830
is that CSP should not be your security

590
00:23:40,830 --> 00:23:43,410
policy it should be or security strategy

591
00:23:43,410 --> 00:23:45,870
it should be your safety net because

592
00:23:45,870 --> 00:23:50,070
writing a really strong CSP is hard and

593
00:23:50,070 --> 00:23:51,990
there's a great paper by Google about

594
00:23:51,990 --> 00:23:54,450
this well sort of like about the dangers

595
00:23:54,450 --> 00:23:57,570
of this and meaning you should only have

596
00:23:57,570 --> 00:23:58,830
this as a safety net but you should

597
00:23:58,830 --> 00:24:01,830
still care about XSS attacks and similar

598
00:24:01,830 --> 00:24:06,330
similar things a couple of other things

599
00:24:06,330 --> 00:24:08,010
that you should look out for you should

600
00:24:08,010 --> 00:24:09,750
avoid clickjacking by disallowing

601
00:24:09,750 --> 00:24:13,020
framing I think most websites don't have

602
00:24:13,020 --> 00:24:14,550
a legitimate reason why they should be

603
00:24:14,550 --> 00:24:18,060
allowing to be iframed and if you do

604
00:24:18,060 --> 00:24:19,890
allow a framing what an attacker can do

605
00:24:19,890 --> 00:24:22,350
is they can place your page with an

606
00:24:22,350 --> 00:24:24,990
opacity of zero above their page and

607
00:24:24,990 --> 00:24:27,640
have lineup buttons so that the

608
00:24:27,640 --> 00:24:29,770
that user things they're interacting

609
00:24:29,770 --> 00:24:31,630
with their page but they're really

610
00:24:31,630 --> 00:24:35,290
interacting with your page and so this

611
00:24:35,290 --> 00:24:38,110
is what people could use for example to

612
00:24:38,110 --> 00:24:40,030
like if you want to like a page or

613
00:24:40,030 --> 00:24:41,680
something like that which like Facebook

614
00:24:41,680 --> 00:24:44,410
blocks I Framing but you could do

615
00:24:44,410 --> 00:24:45,850
something similar

616
00:24:45,850 --> 00:24:48,040
also don't chill versions of front-end

617
00:24:48,040 --> 00:24:50,200
libraries and servers so there are

618
00:24:50,200 --> 00:24:51,670
things like unpackage and stuff very

619
00:24:51,670 --> 00:24:55,030
really useful to to develop things but

620
00:24:55,030 --> 00:24:57,400
if you show a version number in your in

621
00:24:57,400 --> 00:24:59,560
your HTML page or in your HTTP headers

622
00:24:59,560 --> 00:25:00,970
like hey I'm using Express version

623
00:25:00,970 --> 00:25:04,690
whatever this can gives an attacker the

624
00:25:04,690 --> 00:25:06,970
right idea of what security vulnerable

625
00:25:06,970 --> 00:25:09,490
honorable vulnerabilities to test out

626
00:25:09,490 --> 00:25:11,470
and you don't want to make their job

627
00:25:11,470 --> 00:25:14,980
easier and then check for types of input

628
00:25:14,980 --> 00:25:16,480
because there can be things like no

629
00:25:16,480 --> 00:25:19,270
sequel injections if you expect a value

630
00:25:19,270 --> 00:25:21,580
to be a string in an HTTP and like an

631
00:25:21,580 --> 00:25:23,950
HTML HTTP body or in a query parameter

632
00:25:23,950 --> 00:25:26,860
check that is really a string don't just

633
00:25:26,860 --> 00:25:28,240
assume it because there are things said

634
00:25:28,240 --> 00:25:30,670
some partial libraries that will parse

635
00:25:30,670 --> 00:25:33,130
things like objects as well and if you

636
00:25:33,130 --> 00:25:36,490
do that the result is that you could for

637
00:25:36,490 --> 00:25:39,220
example have a no sequel injection other

638
00:25:39,220 --> 00:25:41,410
things consider security audits

639
00:25:41,410 --> 00:25:43,060
especially if your code base has never

640
00:25:43,060 --> 00:25:45,430
had a security audit if you don't have

641
00:25:45,430 --> 00:25:48,610
an internal security expert contract one

642
00:25:48,610 --> 00:25:51,700
because there's so many things that it's

643
00:25:51,700 --> 00:25:54,910
really hard to keep up with that this is

644
00:25:54,910 --> 00:25:56,680
really helpful and you learn yourself a

645
00:25:56,680 --> 00:25:57,730
lot as well if you look over their

646
00:25:57,730 --> 00:25:59,470
shoulder that's how I learned most of

647
00:25:59,470 --> 00:26:01,000
this stuff was when I had to go through

648
00:26:01,000 --> 00:26:04,030
security audit with a feature and then

649
00:26:04,030 --> 00:26:05,980
stay up to date with versions because as

650
00:26:05,980 --> 00:26:07,090
I said you don't want to be the next

651
00:26:07,090 --> 00:26:09,460
Equifax greenkeepers a useful tool but

652
00:26:09,460 --> 00:26:11,410
there are other tools as well similarly

653
00:26:11,410 --> 00:26:13,590
use a tool to detect security

654
00:26:13,590 --> 00:26:15,520
vulnerabilities in your dependencies

655
00:26:15,520 --> 00:26:17,800
because you can write the most secure

656
00:26:17,800 --> 00:26:19,960
code but if your dependencies are

657
00:26:19,960 --> 00:26:22,000
vulnerable that sort of defeats the

658
00:26:22,000 --> 00:26:23,140
purpose

659
00:26:23,140 --> 00:26:25,870
so sneek is one of them I like I like

660
00:26:25,870 --> 00:26:27,370
them because they also provide patches

661
00:26:27,370 --> 00:26:29,170
for things if they're too late so for

662
00:26:29,170 --> 00:26:32,170
example marked still has a one or like

663
00:26:32,170 --> 00:26:33,760
fix that vulnerability that I showed you

664
00:26:33,760 --> 00:26:35,410
but they still have a vulnerability

665
00:26:35,410 --> 00:26:37,840
about data your eyes and that still

666
00:26:37,840 --> 00:26:41,320
didn't make it into the into the

667
00:26:41,320 --> 00:26:43,059
package at least last I checked but

668
00:26:43,059 --> 00:26:44,380
sneak for example has a patch for that

669
00:26:44,380 --> 00:26:45,669
but there are other tools like no

670
00:26:45,669 --> 00:26:48,610
security project and etc that check for

671
00:26:48,610 --> 00:26:50,679
this as well github I think against your

672
00:26:50,679 --> 00:26:52,659
package Jason as well and tells you

673
00:26:52,659 --> 00:26:56,529
about vulnerabilities so to wrap this up

674
00:26:56,529 --> 00:27:00,009
you signed HTTP only cookies be

675
00:27:00,009 --> 00:27:01,779
skeptical of jobs don't treat them as a

676
00:27:01,779 --> 00:27:05,679
single source of truth use something

677
00:27:05,679 --> 00:27:08,409
like use rel no opener nor refer on your

678
00:27:08,409 --> 00:27:11,200
target blank links use C surf tokens

679
00:27:11,200 --> 00:27:13,299
it's really easy to use so there's no

680
00:27:13,299 --> 00:27:15,120
real excuse to not do it

681
00:27:15,120 --> 00:27:17,559
blocking XSS isn't trivial so always

682
00:27:17,559 --> 00:27:19,120
think about like whenever you let the

683
00:27:19,120 --> 00:27:21,070
user input anything or if you have query

684
00:27:21,070 --> 00:27:23,860
parameters or something always think of

685
00:27:23,860 --> 00:27:25,870
these and make sure that they can't

686
00:27:25,870 --> 00:27:28,240
cause harm be aware of encoding because

687
00:27:28,240 --> 00:27:29,440
there are a million ways to write the

688
00:27:29,440 --> 00:27:33,220
same thing be careful with JSONP a JSONP

689
00:27:33,220 --> 00:27:34,899
endpoint should really only accept word

690
00:27:34,899 --> 00:27:37,149
characters in a callback and nothing

691
00:27:37,149 --> 00:27:38,230
else

692
00:27:38,230 --> 00:27:43,419
use CSP as a safety net and most

693
00:27:43,419 --> 00:27:46,149
importantly stay up to date so I put up

694
00:27:46,149 --> 00:27:47,470
the slides here I'm gonna tweet the link

695
00:27:47,470 --> 00:27:50,320
in a second so you can check them out

696
00:27:50,320 --> 00:27:51,190
again

697
00:27:51,190 --> 00:27:53,409
similarly the whole source code of the

698
00:27:53,409 --> 00:27:56,100
website is on this URL including

699
00:27:56,100 --> 00:27:58,779
different readme files for every of

700
00:27:58,779 --> 00:28:00,100
these vulnerable to said I showed you

701
00:28:00,100 --> 00:28:01,360
plus a couple of others that are in

702
00:28:01,360 --> 00:28:03,730
there including resources that are

703
00:28:03,730 --> 00:28:05,259
interesting about the respective topic

704
00:28:05,259 --> 00:28:07,269
and with that I would like to thank you

705
00:28:07,269 --> 00:28:08,379
all for your attention I'll be around

706
00:28:08,379 --> 00:28:10,330
for the rest of the day wearing likely

707
00:28:10,330 --> 00:28:11,860
this jacket instead of the onesie

708
00:28:11,860 --> 00:28:13,269
because this is really warm even in

709
00:28:13,269 --> 00:28:17,110
Iceland and yeah come come by ask me any

710
00:28:17,110 --> 00:28:18,460
questions and thank you for your

711
00:28:18,460 --> 00:28:19,250
attention

