1
00:00:14,870 --> 00:00:15,870
Thanks, everyone.

2
00:00:15,870 --> 00:00:16,870
So...

3
00:00:16,870 --> 00:00:17,870
My name is Parsha.

4
00:00:17,870 --> 00:00:20,120
I'm going to talk to you guys
about mixing JavaScript and CSS.

5
00:00:20,120 --> 00:00:21,120
So...

6
00:00:21,120 --> 00:00:27,570
Before I start, I want to warn you.

7
00:00:27,570 --> 00:00:31,689
This talk is about ideas, not code.

8
00:00:31,689 --> 00:00:35,140
Even though I'm going to be showing you
a lot of code, I'm not necessarily saying

9
00:00:35,140 --> 00:00:40,480
it's a good idea or that it'll
even work.

10
00:00:40,480 --> 00:00:44,650
My goal here is to share some ideas and get
you guys thinking.

11
00:00:44,650 --> 00:00:46,860
So
if you hear anything that you think is awesome

12
00:00:46,860 --> 00:00:51,010
and might solve your problems,
or if you think I'm totally crazy, then you

13
00:00:51,010 --> 00:00:53,910
should come find me and tell me
about it.

14
00:00:53,910 --> 00:00:55,329
So...

15
00:00:55,329 --> 00:01:01,230
Before we talk about JavaScript, let's talk
about CSS.

16
00:01:01,230 --> 00:01:07,610
CSS enables us
to take websites that look like this, and

17
00:01:07,610 --> 00:01:10,760
turn them into this.

18
00:01:10,760 --> 00:01:13,790
CSS even
makes Craigslist look better.

19
00:01:13,790 --> 00:01:16,270
Going from this to this.

20
00:01:16,270 --> 00:01:23,710
I didn't even think
Craigslist used CSS.

21
00:01:23,710 --> 00:01:27,440
Aside from enabling rich user interfaces,
CSS also lets

22
00:01:27,440 --> 00:01:35,500
us create cool animations and visual effects.

23
00:01:35,500 --> 00:01:36,500
Like whatever this is.

24
00:01:36,500 --> 00:01:38,820
It's not
showing up on the projector.

25
00:01:38,820 --> 00:01:43,060
So I'll show you on my screen.

26
00:01:43,060 --> 00:01:47,410
It's kind of
neat.

27
00:01:47,410 --> 00:01:51,400
This is an animation utilizing the GPU, to
compose several layers

28
00:01:51,400 --> 00:01:54,790
together and transform them on top of each
other.

29
00:01:54,790 --> 00:01:59,990
Oh, there it is!

30
00:01:59,990 --> 00:02:00,990
So yeah.

31
00:02:00,990 --> 00:02:03,050
CSS is pretty awesome.

32
00:02:03,050 --> 00:02:04,050
But...

33
00:02:04,050 --> 00:02:11,110
CSS has its fair share of issues and
limitations too.

34
00:02:11,110 --> 00:02:14,470
There's no way to define constants.

35
00:02:14,470 --> 00:02:17,980
There's no way to extend the language with
your own logic.

36
00:02:17,980 --> 00:02:19,750
There's basically no dependency management.

37
00:02:19,750 --> 00:02:23,739
We have to
implement the rule, but there's limiting performance

38
00:02:23,739 --> 00:02:25,810
characteristics
there.

39
00:02:25,810 --> 00:02:33,640
There's no way to reuse code or do any sort
of metaprogramming.

40
00:02:33,640 --> 00:02:35,110
And
there's no interoperability with the rest

41
00:02:35,110 --> 00:02:39,049
of our front-end code, JavaScript.

42
00:02:39,049 --> 00:02:40,659
Sometimes these limitations are good.

43
00:02:40,659 --> 00:02:46,489
They force us to write easy to
understand code, but sometimes, especially

44
00:02:46,489 --> 00:02:50,629
in large scale apps, these
limitations often lead to copy and pasted

45
00:02:50,629 --> 00:02:57,800
code and stuff that's hard to
maintain.

46
00:02:57,800 --> 00:03:00,159
But we've been able to work around these issues
by creating new

47
00:03:00,159 --> 00:03:03,890
languages we call CSS pre-processors.

48
00:03:03,890 --> 00:03:10,349
Letting us work around some of these
issues, at least.

49
00:03:10,349 --> 00:03:14,049
But pre-processors are weird.

50
00:03:14,049 --> 00:03:20,540
They often have ambiguous syntax and
non-standard semantics, and they give us features

51
00:03:20,540 --> 00:03:24,880
that look and smell like
things we're used to, like functions, but

52
00:03:24,880 --> 00:03:27,989
then their behavior is different
in unexpected ways.

53
00:03:27,989 --> 00:03:34,499
Let me show you a couple of examples of what
I mean.

54
00:03:34,499 --> 00:03:37,120
Let's take a look at Silas.

55
00:03:37,120 --> 00:03:41,910
It has very terse syntax.

56
00:03:41,910 --> 00:03:44,980
Basically gets rid
of things like semicolons, curly braces, colons

57
00:03:44,980 --> 00:03:49,700
-- basically almost
everything.

58
00:03:49,700 --> 00:03:52,579
Let's take a look at this example.

59
00:03:52,579 --> 00:03:53,829
Here's the compiled output.

60
00:03:53,829 --> 00:03:57,489
We get what we would kind of expect.

61
00:03:57,489 --> 00:04:02,430
There's a form that gets the color
applied to it, and then an awesome font applied

62
00:04:02,430 --> 00:04:08,140
to input and text areas inside
that form.

63
00:04:08,140 --> 00:04:12,019
But what would happen if we accidentally swapped
two

64
00:04:12,019 --> 00:04:16,680
lines in our stylus source?

65
00:04:16,680 --> 00:04:19,040
So in case you didn't see that -- let me do
it

66
00:04:19,040 --> 00:04:20,040
again.

67
00:04:20,040 --> 00:04:22,970
The top two lines get swapped with each other.

68
00:04:22,970 --> 00:04:25,500
Well, this no longer
really makes sense.

69
00:04:25,500 --> 00:04:26,970
The source doesn't make sense.

70
00:04:26,970 --> 00:04:29,530
What do you guys think will happen?

71
00:04:29,530 --> 00:04:33,699
Hopefully we get some sort of compile
time error.

72
00:04:33,699 --> 00:04:36,030
Nope.

73
00:04:36,030 --> 00:04:39,000
Stylus gets a bit confused and instead thinks
our color

74
00:04:39,000 --> 00:04:44,230
declaration is actually a selector.

75
00:04:44,230 --> 00:04:49,090
This is still valid CSS, so there's no
error.

76
00:04:49,090 --> 00:04:51,030
Hopefully the developer catches this.

77
00:04:51,030 --> 00:04:54,509
But it's going to take some
effort to debug.

78
00:04:54,509 --> 00:05:00,449
Let's take a look at Less.

79
00:05:00,449 --> 00:05:03,650
Less gives us a way to import
dependencies.

80
00:05:03,650 --> 00:05:08,229
Actually, Less gives us eight ways to import
dependencies.

81
00:05:08,229 --> 00:05:11,480
And
they all have their different semantics.

82
00:05:11,480 --> 00:05:14,889
Actually, sometimes they have the
same semantics as others, depending on the

83
00:05:14,889 --> 00:05:17,680
condition of what we're
importing.

84
00:05:17,680 --> 00:05:19,411
Basically you end up having to look at the
docs, every time you

85
00:05:19,411 --> 00:05:22,530
want to import something.

86
00:05:22,530 --> 00:05:32,650
Let's look at variables.

87
00:05:32,650 --> 00:05:34,960
Sass gives us variables.

88
00:05:34,960 --> 00:05:38,919
Here we have a variable
defined called heading color, and then we

89
00:05:38,919 --> 00:05:43,229
use that to set the color of H2
elements.

90
00:05:43,229 --> 00:05:45,169
But we're defining the variable twice.

91
00:05:45,169 --> 00:05:48,099
Once before we use it and
once after we use it.

92
00:05:48,099 --> 00:05:53,251
In the output, Sass uses the first assignment
of the

93
00:05:53,251 --> 00:05:56,509
variable and we get red.

94
00:05:56,509 --> 00:06:01,210
But let's see what Less decides to do.

95
00:06:01,210 --> 00:06:07,550
You have the
same thing, but here Less does the opposite

96
00:06:07,550 --> 00:06:08,550
thing.

97
00:06:08,550 --> 00:06:13,270
Less uses the value that we
last assigned to the variable, and we get

98
00:06:13,270 --> 00:06:16,720
the value white.

99
00:06:16,720 --> 00:06:19,380
Weird.

100
00:06:19,380 --> 00:06:21,330
Maybe
not either of them are wrong...

101
00:06:21,330 --> 00:06:25,240
But you've just got to get used to it, and
make sure you switch into the right context

102
00:06:25,240 --> 00:06:30,110
when you go between languages.

103
00:06:30,110 --> 00:06:33,330
Less also lets us do arithmetic.

104
00:06:33,330 --> 00:06:39,819
Here we see 10 pixels, minus 2 pixels is 8
pixels.

105
00:06:39,819 --> 00:06:41,199
Great.

106
00:06:41,199 --> 00:06:44,270
But you'd better be careful with spaces, because
adding or

107
00:06:44,270 --> 00:06:48,139
removing spaces might change the result.

108
00:06:48,139 --> 00:06:49,139
That's right.

109
00:06:49,139 --> 00:06:53,669
Whitespace-sensitive
math.

110
00:06:53,669 --> 00:06:56,259
And you'd better be careful with parentheses
too, because parentheses

111
00:06:56,259 --> 00:07:02,830
will change the results in an even worse way.

112
00:07:02,830 --> 00:07:05,349
So what else can Less do?

113
00:07:05,349 --> 00:07:08,110
Less
has this awesome feature -- it can automatically

114
00:07:08,110 --> 00:07:10,910
convert units for us.

115
00:07:10,910 --> 00:07:15,169
So
here we have the same values, but using different

116
00:07:15,169 --> 00:07:16,169
units.

117
00:07:16,169 --> 00:07:20,560
10 centimeters minus
1 centimeter, and 10 centimeters minus 10

118
00:07:20,560 --> 00:07:21,560
millimeters.

119
00:07:21,560 --> 00:07:24,710
Both come out
to 1 centimeter.

120
00:07:24,710 --> 00:07:26,039
Cool!

121
00:07:26,039 --> 00:07:30,280
Let's see this in action with division.

122
00:07:30,280 --> 00:07:34,229
Here we have
the same units on both sides of the operator.

123
00:07:34,229 --> 00:07:36,370
10 centimeters divided by 1
centimeter.

124
00:07:36,370 --> 00:07:41,099
10 centimeters, as you would expect, but what
happens if we mix

125
00:07:41,099 --> 00:07:44,970
units like we did with subtraction.

126
00:07:44,970 --> 00:07:46,460
Doesn't work!

127
00:07:46,460 --> 00:07:52,790
Less silently ignores units on the second
operand when you're doing division.

128
00:07:52,790 --> 00:07:53,790
So...

129
00:07:53,790 --> 00:08:00,169
With Less, we can do arithmetic, but you've
got to be really careful.

130
00:08:00,169 --> 00:08:03,180
So my point is: language design is hard.

131
00:08:03,180 --> 00:08:09,520
Syntax, scoping, types, compilers,
error handling -- all these are really complicated

132
00:08:09,520 --> 00:08:10,599
things.

133
00:08:10,599 --> 00:08:13,419
It's understandable
that these pre-processors have gotten some

134
00:08:13,419 --> 00:08:16,439
of them wrong.

135
00:08:16,439 --> 00:08:17,840
So...

136
00:08:17,840 --> 00:08:22,050
CSS is cool.

137
00:08:22,050 --> 00:08:23,419
But it's got issues.

138
00:08:23,419 --> 00:08:27,509
We've got pre-processors to solve some of
these issues,

139
00:08:27,509 --> 00:08:32,530
but pre-processors have their own issues.

140
00:08:32,530 --> 00:08:36,060
Is there a better way?

141
00:08:36,060 --> 00:08:40,599
Can we use
JavaScript to do CSS better?

142
00:08:40,599 --> 00:08:47,740
Well, let's take a look at what using
JavaScript to write CSS might look like.

143
00:08:47,740 --> 00:08:51,490
Let's express a simple rule in
JavaScript.

144
00:08:51,490 --> 00:08:53,210
Here it is in CSS.

145
00:08:53,210 --> 00:08:56,660
You've got a red button.

146
00:08:56,660 --> 00:09:00,310
Let's convert it to JavaScript.

147
00:09:00,310 --> 00:09:04,400
It's actually not too different.

148
00:09:04,400 --> 00:09:09,940
You basically add some quotation marks,
change out the semicolon to a comma, and you've

149
00:09:09,940 --> 00:09:12,800
got valid JavaScript
syntax.

150
00:09:12,800 --> 00:09:16,040
All right.

151
00:09:16,040 --> 00:09:18,700
That's a pretty basic example.

152
00:09:18,700 --> 00:09:20,440
What if we had
pseudoselectors?

153
00:09:20,440 --> 00:09:23,600
You wanted to have a hover state for our button.

154
00:09:23,600 --> 00:09:26,970
Well, it's
not too much different from CSS or one of

155
00:09:26,970 --> 00:09:31,230
our pre-processors.

156
00:09:31,230 --> 00:09:34,350
And we can do
even more complicated selectors.

157
00:09:34,350 --> 00:09:37,210
Child selectors and descendant selectors.

158
00:09:37,210 --> 00:09:43,660
Still nothing too surprising, I hope.

159
00:09:43,660 --> 00:09:49,480
And here's the media query.

160
00:09:49,480 --> 00:09:52,860
And in
CSS, sometimes you want to do something called

161
00:09:52,860 --> 00:09:58,200
property fallbacks, where
we define a property more than once, so that

162
00:09:58,200 --> 00:10:01,700
browsers that don't support
a certain value can fall back to previous

163
00:10:01,700 --> 00:10:02,720
ones.

164
00:10:02,720 --> 00:10:06,240
In JavaScript, we can't define the same property
more than once in an

165
00:10:06,240 --> 00:10:11,820
object, but we can use arrays to accomplish
this.

166
00:10:11,820 --> 00:10:18,150
CSS also has a bunch of
other @rules.

167
00:10:18,150 --> 00:10:23,330
@charset, @fontface.

168
00:10:23,330 --> 00:10:30,740
Rest assured we can express all these
things using JavaScript.

169
00:10:30,740 --> 00:10:34,310
So you've got rules with selectors, you've
got

170
00:10:34,310 --> 00:10:37,560
pseudoselectors, child selectors, any kind
of selector, really.

171
00:10:37,560 --> 00:10:42,750
Property
fallbacks, media queries, @ rules.

172
00:10:42,750 --> 00:10:44,800
That's pretty much all of CSS.

173
00:10:44,800 --> 00:10:48,170
So I think
it's safe to say we can express CSS using

174
00:10:48,170 --> 00:10:49,550
JavaScript.

175
00:10:49,550 --> 00:10:52,210
And it's pretty
simple too.

176
00:10:52,210 --> 00:10:55,200
All we're using are literals.

177
00:10:55,200 --> 00:10:56,410
Literal expressions.

178
00:10:56,410 --> 00:11:01,050
This is
essentially JSON.

179
00:11:01,050 --> 00:11:07,140
So we can express CSS in JavaScript, but how
do we actually use this

180
00:11:07,140 --> 00:11:12,690
JavaScript -- this JavaScript in a browser
to style elements?

181
00:11:12,690 --> 00:11:16,320
So far,
we've got these plain old JavaScript objects,

182
00:11:16,320 --> 00:11:20,019
but we need to turn this in a
way that -- into something that the browser

183
00:11:20,019 --> 00:11:23,040
understands.

184
00:11:23,040 --> 00:11:29,440
Well, all we
really need is a function that can transform

185
00:11:29,440 --> 00:11:34,540
one of these objects into a CSS
source string.

186
00:11:34,540 --> 00:11:37,360
Now we can take the CSS source string and
let the browser

187
00:11:37,360 --> 00:11:39,710
use it.

188
00:11:39,710 --> 00:11:47,240
So, yes, we can express CSS using JavaScript,
and we can use

189
00:11:47,240 --> 00:11:50,290
that to actually style elements in the browser.

190
00:11:50,290 --> 00:11:51,290
Awesome!

191
00:11:51,290 --> 00:11:53,750
JavaScript for
everything!

192
00:11:53,750 --> 00:11:56,960
But why would we want to do this?

193
00:11:56,960 --> 00:12:05,089
Are there any actual
advantages?

194
00:12:05,089 --> 00:12:09,120
To start with, remember the issues and limitations
of CSS that I raised in the

195
00:12:09,120 --> 00:12:11,529
beginning of this talk?

196
00:12:11,529 --> 00:12:16,259
The reasons we've invented all these new languages,
the CSS pre-processors?

197
00:12:16,259 --> 00:12:20,910
Well, JavaScript solves -- or at least addresses
--

198
00:12:20,910 --> 00:12:23,660
all of these issues for us automatically.

199
00:12:23,660 --> 00:12:29,300
Let me show you what I mean.

200
00:12:29,300 --> 00:12:33,870
CSS
has no way to define variables.

201
00:12:33,870 --> 00:12:44,570
Less and Sass both give us this ability, but
they both have their own weird semantics.

202
00:12:44,570 --> 00:12:49,600
JavaScript has variables
built in, and with semantics we know and understand.

203
00:12:49,600 --> 00:12:56,399
We can use
variables to define our constants in one place.

204
00:12:56,399 --> 00:12:58,260
JavaScript also has
arithmetic built in.

205
00:12:58,260 --> 00:13:05,639
10 minus 2 pixels is 8 pixels.

206
00:13:05,639 --> 00:13:09,459
And best of all,
unlike some CSS pre-processors, it doesn't

207
00:13:09,459 --> 00:13:14,240
matter how many spaces or
parentheses you use.

208
00:13:14,240 --> 00:13:20,250
You still get 8 pixels.

209
00:13:20,250 --> 00:13:23,950
In CSS, we have no way to
extend the language with our own logic.

210
00:13:23,950 --> 00:13:27,360
Say we wanted to mix two colors
together.

211
00:13:27,360 --> 00:13:32,400
In CSS, you would have to pre-compute this
value, and hard code it into our

212
00:13:32,400 --> 00:13:35,529
source code.

213
00:13:35,529 --> 00:13:39,610
Less and other pre-processors give us a set
of built-in functions

214
00:13:39,610 --> 00:13:42,610
that we can use to do some basic things.

215
00:13:42,610 --> 00:13:45,890
But we still can't define our own
logic.

216
00:13:45,890 --> 00:13:53,380
With JavaScript, we can define arbitrary functions.

217
00:13:53,380 --> 00:13:56,650
Here we create a
function that mixes the two colors for us.

218
00:13:56,650 --> 00:14:01,949
We can even share this function
with the rest of our front-end code.

219
00:14:01,949 --> 00:14:08,300
Of course, we don't actually have to
write our own functions.

220
00:14:08,300 --> 00:14:14,019
We can take advantage of the JavaScript ecosystem
and use modules to do the work for us.

221
00:14:14,019 --> 00:14:28,000
Here we're using the color module from
NPM to do the mixing of the two colors.

222
00:14:28,000 --> 00:14:31,759
And we're not limited to just
functions that operate on colors or single

223
00:14:31,759 --> 00:14:33,649
values.

224
00:14:33,649 --> 00:14:39,639
In JavaScript, functions
are the most basic unit of code reuse.

225
00:14:39,639 --> 00:14:46,699
We can use functions to generate entire sets
of style declarations.

226
00:14:46,699 --> 00:14:49,959
Here we
have a function that takes in a base color

227
00:14:49,959 --> 00:14:53,710
and generates styles for a
button based on that color.

228
00:14:53,710 --> 00:14:57,339
We're getting the same sort of code reuse
we get

229
00:14:57,339 --> 00:15:01,120
as what some pre-processors call mix-ins.

230
00:15:01,120 --> 00:15:05,890
But with semantics that we
understand.

231
00:15:05,890 --> 00:15:12,060
With CSS, we have no way of sharing values
between CSS and the

232
00:15:12,060 --> 00:15:14,589
rest of our front-end code.

233
00:15:14,589 --> 00:15:21,459
For example, here we have some CSS that defines
a color.

234
00:15:21,459 --> 00:15:25,290
Then say we have some JavaScript code that
draws on a canvas, and

235
00:15:25,290 --> 00:15:31,440
we want this canvas drawing to have the same
color as we defined in CSS.

236
00:15:31,440 --> 00:15:34,850
I'm
sure you guys have probably run into something

237
00:15:34,850 --> 00:15:36,139
like this before.

238
00:15:36,139 --> 00:15:38,060
You end
up having to leave comments to tell other

239
00:15:38,060 --> 00:15:41,850
developers that when they
change one of these variables or one of these

240
00:15:41,850 --> 00:15:44,440
values, they have to make
sure they go into the other place and change

241
00:15:44,440 --> 00:15:47,600
that value to match too.

242
00:15:47,600 --> 00:15:49,410
This is brittle.

243
00:15:49,410 --> 00:15:55,569
But if our styles are in JavaScript, and our
canvas

244
00:15:55,569 --> 00:16:05,870
code is in JavaScript, it becomes trivial
to share values between the two.

245
00:16:05,870 --> 00:16:11,600
Of
course...

246
00:16:11,600 --> 00:16:15,230
We don't need everything to be a single file.

247
00:16:15,230 --> 00:16:21,129
We can use modules to
organize our styles and import dependencies.

248
00:16:21,129 --> 00:16:25,660
And it's just JavaScript, so we
can import whatever we want.

249
00:16:25,660 --> 00:16:34,950
Constants, functions, or entire sets of style
declarations.

250
00:16:34,950 --> 00:16:40,399
Speaking of modules, we can take advantage
of NPM.

251
00:16:40,399 --> 00:16:45,320
Not only
do we have access to the 150,000 modules -- we

252
00:16:45,320 --> 00:16:50,520
can use NPM to publish and
reuse style modules.

253
00:16:50,520 --> 00:16:55,310
Imagine having an ecosystem of reusable styles
for

254
00:16:55,310 --> 00:17:01,120
things like buttons and tables and other common
interface elements.

255
00:17:01,120 --> 00:17:04,660
Or
utility modules that help you build styles.

256
00:17:04,660 --> 00:17:08,270
For example, a module that
takes in a background color and automatically

257
00:17:08,270 --> 00:17:14,990
generates a foreground
color for you that has good contrast.

258
00:17:14,990 --> 00:17:21,640
Spoiler -- that module already exists
in NPM.

259
00:17:21,640 --> 00:17:28,700
So I've shown that there are advantages of
using JavaScript to write CSS.

260
00:17:28,700 --> 00:17:31,409
By
using a Turing-complete programming language

261
00:17:31,409 --> 00:17:37,220
to build our styles, we're not
limits to what our CSS pre-processor has implemented.

262
00:17:37,220 --> 00:17:40,809
We can instead
use the full power of JavaScript to implement

263
00:17:40,809 --> 00:17:45,080
whatever logic we need.

264
00:17:45,080 --> 00:17:48,110
We
don't need to reinvent variables, functions,

265
00:17:48,110 --> 00:17:51,110
scoping, or anything else.

266
00:17:51,110 --> 00:17:55,809
JavaScript has all of these things, just waiting
to be used.

267
00:17:55,809 --> 00:18:03,919
Of course, with
great power comes great responsibility.

268
00:18:03,919 --> 00:18:08,190
Maybe it's not a good idea to do a
network request to build your styles.

269
00:18:08,190 --> 00:18:16,470
But that should be up to you to
decide.

270
00:18:16,470 --> 00:18:18,320
So...

271
00:18:18,320 --> 00:18:25,980
We've successfully used JavaScript to write
CSS.

272
00:18:25,980 --> 00:18:29,830
How else can
we mix JavaScript and CSS?

273
00:18:29,830 --> 00:18:37,309
Let me pause for a second and tell you that
you should consider the

274
00:18:37,309 --> 00:18:41,080
following experimental thinking.

275
00:18:41,080 --> 00:18:42,210
The details are vague.

276
00:18:42,210 --> 00:18:44,120
I don't know if it's
a good idea.

277
00:18:44,120 --> 00:18:47,880
And I definitely don't know if it'll even
work.

278
00:18:47,880 --> 00:18:52,270
So think about
it and give me your feedback.

279
00:18:52,270 --> 00:19:01,190
But let's see how else we can mix JS and CSS.

280
00:19:01,190 --> 00:19:07,929
We can use JavaScript to apply styles in the
browser.

281
00:19:07,929 --> 00:19:11,570
What I mean by
this is taking over the browser's role of

282
00:19:11,570 --> 00:19:15,659
parsing CSS and applying styles to
elements.

283
00:19:15,659 --> 00:19:20,919
I know this sounds crazy, but bear with me
for a second and let's

284
00:19:20,919 --> 00:19:26,299
see what we can do if we do this.

285
00:19:26,299 --> 00:19:35,929
First, writing CSS and JavaScript, like
I've been talking about, is not a prerequisite

286
00:19:35,929 --> 00:19:37,820
to this.

287
00:19:37,820 --> 00:19:42,480
You could just use
regular old CSS, actually.

288
00:19:42,480 --> 00:19:49,100
What is a prerequisite is having some sort
of CSS abstract syntax tree or CSS

289
00:19:49,100 --> 00:19:53,260
AST available to us in the browser.

290
00:19:53,260 --> 00:20:00,250
What I mean by this is: we need to be able
to take a CSS source string and be able to

291
00:20:00,250 --> 00:20:05,679
understand and inspect it
and see exactly what's being defined in that

292
00:20:05,679 --> 00:20:07,809
source.

293
00:20:07,809 --> 00:20:14,840
Of course, there's
an NPM module for that.

294
00:20:14,840 --> 00:20:19,950
Here we're parsing a simple CSS rule.

295
00:20:19,950 --> 00:20:25,030
We have
access to the selector, the declarations,

296
00:20:25,030 --> 00:20:29,450
what property is being defined,
and what the value is.

297
00:20:29,450 --> 00:20:36,690
And of course, we can do the inverse.

298
00:20:36,690 --> 00:20:42,380
We can take a
CSS abstract syntax tree, and generate a CSS

299
00:20:42,380 --> 00:20:45,060
source string.

300
00:20:45,060 --> 00:20:47,600
Cool.

301
00:20:47,600 --> 00:20:51,350
But
what does this enable us to do?

302
00:20:51,350 --> 00:21:00,540
Well, CSS has a new feature called CSS
feature queries.

303
00:21:00,540 --> 00:21:03,980
It's kind of like media queries, but instead
of testing the

304
00:21:03,980 --> 00:21:09,460
device's width or orientation or something
like that, we're able to test

305
00:21:09,460 --> 00:21:18,510
whether a device supports a certain CSS feature.

306
00:21:18,510 --> 00:21:24,440
This example lets us use Flexbox, if the browser
supports Flexbox.

307
00:21:24,440 --> 00:21:27,730
Otherwise
we use float.

308
00:21:27,730 --> 00:21:32,610
Unfortunately, not many browsers support feature
queries

309
00:21:32,610 --> 00:21:39,030
yet.

310
00:21:39,030 --> 00:21:43,730
But if we're executing JavaScript in the browser,
then we have

311
00:21:43,730 --> 00:21:47,110
access to information about that browser environment.

312
00:21:47,110 --> 00:21:50,220
Like, for
example, whether or not the browser supports

313
00:21:50,220 --> 00:21:53,350
a certain CSS feature or not.

314
00:21:53,350 --> 00:22:02,780
And if we can access our CSS abstract syntax
tree, like I showed earlier, then

315
00:22:02,780 --> 00:22:09,270
we can use that information about the browser
and transform our CSS into new

316
00:22:09,270 --> 00:22:13,140
CSS.

317
00:22:13,140 --> 00:22:18,020
Then we can take that new CSS and inject it
back into the browser by

318
00:22:18,020 --> 00:22:22,390
injecting a new style tag into the documents.

319
00:22:22,390 --> 00:22:31,830
This means we can take CSS and
create new CSS based on what browser we're

320
00:22:31,830 --> 00:22:34,559
in.

321
00:22:34,559 --> 00:22:44,929
We can use this technique to
polyfill CSS feature queries.

322
00:22:44,929 --> 00:22:51,620
We would walk the CSS abstract syntax tree,
and then when we come across an @supports

323
00:22:51,620 --> 00:22:58,470
rule, we would do the feature
detection in JavaScript.

324
00:22:58,470 --> 00:23:04,860
And then based on the result of that feature
detection, we could generate a new CSS AST.

325
00:23:04,860 --> 00:23:08,940
Either including the rule or
excluding the rule that's nested under the

326
00:23:08,940 --> 00:23:15,130
app supports rule.

327
00:23:15,130 --> 00:23:22,070
Now we have
feature queries in every browser.

328
00:23:22,070 --> 00:23:30,360
So what else can we do?

329
00:23:30,360 --> 00:23:34,309
One of the browser's
jobs in CSS is to take selectors and figure

330
00:23:34,309 --> 00:23:37,910
out which elements match.

331
00:23:37,910 --> 00:23:41,900
Then the matched elements get styles applied
to them.

332
00:23:41,900 --> 00:23:46,990
In this example, the
browser knows to apply the color red to our

333
00:23:46,990 --> 00:23:54,020
span because the span is a child
of a div element.

334
00:23:54,020 --> 00:23:58,240
That's what our CSS rules selector specifies.

335
00:23:58,240 --> 00:24:02,440
The
other way we can take over the browser is

336
00:24:02,440 --> 00:24:11,140
by doing this matching and applying
of styles ourselves.

337
00:24:11,140 --> 00:24:16,730
This means for each CSS rule we have defined,
we would

338
00:24:16,730 --> 00:24:20,390
find all of the elements that match, using
something like query

339
00:24:20,390 --> 00:24:29,110
selector all, and then for each matched element,
we would apply the rule's

340
00:24:29,110 --> 00:24:34,289
styles to the element.

341
00:24:34,289 --> 00:24:35,289
Why would we do this?

342
00:24:35,289 --> 00:24:37,360
The browser already does this
for us.

343
00:24:37,360 --> 00:24:44,700
Well, again, it's about having new information.

344
00:24:44,700 --> 00:24:47,570
This time we
would have information about the hierarchy

345
00:24:47,570 --> 00:24:53,520
of elements in the document
when we're applying styles to an element.

346
00:24:53,520 --> 00:24:57,529
Meaning that for each element we're
applying styles to, we could see what its

347
00:24:57,529 --> 00:25:04,559
parent is, what its children are,
how many siblings it has, we would know exactly

348
00:25:04,559 --> 00:25:12,110
where in the document's
hierarchy that element is.

349
00:25:12,110 --> 00:25:20,860
This information lets us polyfill even more
CSS features.

350
00:25:20,860 --> 00:25:26,350
Take first child
and last child, for example.

351
00:25:26,350 --> 00:25:29,220
If you know about the siblings of an element,
you

352
00:25:29,220 --> 00:25:35,330
know the position of an element within its
parents, then we know if

353
00:25:35,330 --> 00:25:40,750
it's the first child or not, and if it's the
last child or not.

354
00:25:40,750 --> 00:25:43,029
This means we
would be able to implement first child and

355
00:25:43,029 --> 00:25:47,210
last child ourselves.

356
00:25:47,210 --> 00:25:49,919
So when
we're iterating through elements, we can use

357
00:25:49,919 --> 00:25:55,380
this information about the
element's position to determine if the element

358
00:25:55,380 --> 00:26:02,610
should get our first
child's or last child's styles.

359
00:26:02,610 --> 00:26:07,880
Though that's not really too useful, since
basically every browser supports first child

360
00:26:07,880 --> 00:26:12,330
and last child natively.

361
00:26:12,330 --> 00:26:16,310
But
with the same kind of information, and the

362
00:26:16,310 --> 00:26:21,110
same technique, looking at the
document's hierarchy, maybe we can polyfill

363
00:26:21,110 --> 00:26:26,750
something more useful.

364
00:26:26,750 --> 00:26:31,610
Flexbox is a new CSS layout feature that makes
it easy to express all the

365
00:26:31,610 --> 00:26:32,610
crazy things.

366
00:26:32,610 --> 00:26:42,960
We use floats and tables and various other
layout hacks.

367
00:26:42,960 --> 00:26:49,270
If you know the Flexbox styles we want to
apply to an element, and we know

368
00:26:49,270 --> 00:26:54,570
that element's parents and its children and
all the styles of those

369
00:26:54,570 --> 00:27:01,590
elements, then we can calculate the position
and dimensions of every

370
00:27:01,590 --> 00:27:07,440
element.

371
00:27:07,440 --> 00:27:12,690
This example has a flex container with two
children.

372
00:27:12,690 --> 00:27:17,570
Each with an
equal grow factor of 1.

373
00:27:17,570 --> 00:27:21,830
This means we would have a container that
has two side

374
00:27:21,830 --> 00:27:26,570
by side columns inside of it, each with equal
width.

375
00:27:26,570 --> 00:27:32,870
I was able to
determine that by just looking at the CSS

376
00:27:32,870 --> 00:27:38,330
and our document's hierarchy.

377
00:27:38,330 --> 00:27:42,250
Of
course, computers can do this for us too.

378
00:27:42,250 --> 00:27:51,770
And you guessed it -- there's an
NPM module for that.

379
00:27:51,770 --> 00:27:55,539
So if we can describe our document, creating
a

380
00:27:55,539 --> 00:27:59,640
representation of our document hierarchy and
the styles we want each element

381
00:27:59,640 --> 00:28:08,899
to have, then we can use the CSS layout module
to calculate the layout of our

382
00:28:08,899 --> 00:28:12,419
elements.

383
00:28:12,419 --> 00:28:17,520
So here we're describing the document I showed
in the previous example.

384
00:28:17,520 --> 00:28:23,690
A
container with two flex children.

385
00:28:23,690 --> 00:28:31,130
So if we pass the right information to
CSS layout, it can calculate the exact dimensions

386
00:28:31,130 --> 00:28:35,720
and positions of each
element for us.

387
00:28:35,720 --> 00:28:41,390
Here we can see we end up with our parent
and two children,

388
00:28:41,390 --> 00:28:43,580
side by side, each with equal width.

389
00:28:43,580 --> 00:28:54,460
We get the width, height, top, and
left of each element.

390
00:28:54,460 --> 00:28:55,460
That's awesome!

391
00:28:55,460 --> 00:29:01,970
I think we can use that to implement a
runtime Flexbox polyfill.

392
00:29:01,970 --> 00:29:06,020
I think we're in a really exciting place right
now.

393
00:29:06,020 --> 00:29:09,950
The JavaScript module ecosystem is implementing
some great

394
00:29:09,950 --> 00:29:10,950
things.

395
00:29:10,950 --> 00:29:13,880
I think it's going to be really interesting
to see what we

396
00:29:13,880 --> 00:29:19,340
can do with them.

397
00:29:19,340 --> 00:29:21,799
So I hope I've shown you some interesting
ways you can

398
00:29:21,799 --> 00:29:23,940
mix JavaScript and CSS.

399
00:29:23,940 --> 00:29:29,539
And essentially reimplement the browser in
the browser.

400
00:29:29,539 --> 00:29:31,300
Come find me and talk to me about any of this.

401
00:29:31,300 --> 00:29:33,750
I would love to
discuss it.

402
00:29:33,750 --> 00:29:35,159
You can also tweet me @ParshaP.

