1
00:00:00,160 --> 00:00:01,160
Make Web Not War
- Dominik Kundel

2
00:00:01,160 --> 00:00:10,320
Welcome back, this is obviously the last talk
before we get to go and have a snack, so try

3
00:00:10,320 --> 00:00:12,840
to keep that energy level high.

4
00:00:12,840 --> 00:00:14,290
Give your attention to the next speaker.

5
00:00:14,290 --> 00:00:15,290
Dominik Kundel, he's a developer evangelist
at Twilio, but there must be something pretty

6
00:00:15,290 --> 00:00:16,290
magical in the water where he grew up, because
when he started high school he was the shortest

7
00:00:16,290 --> 00:00:17,290
person in his class and he's now 6-5 so they've
doing something really well.

8
00:00:17,290 --> 00:00:18,290
So everybody please give it up for Dominik
Kundel.

9
00:00:18,290 --> 00:00:19,290
>> All right, hi everyone.

10
00:00:19,290 --> 00:00:20,290
Thanks to coming to my talk.

11
00:00:20,290 --> 00:00:21,290
Like I know everyone is saying that, but maybe
it's because I'm like an inch taller but this

12
00:00:21,290 --> 00:00:22,290
is super-bright.

13
00:00:22,290 --> 00:00:23,539
The slides are uploaded on that URL if you
want to follow along.

14
00:00:23,539 --> 00:00:29,180
I want to kick things off with a kind of important
message, and that's that you're all wasting

15
00:00:29,180 --> 00:00:34,620
your time learning frameworks, because we
got web APIs and we have web components and

16
00:00:34,620 --> 00:00:40,329
other things and there is really no need for
any kind of frameworks.

17
00:00:40,329 --> 00:00:47,510
But before I'm getting kicked off stage, I
know this statement is not 100% true and the

18
00:00:47,510 --> 00:00:51,699
story is much more complex, but I think I
got everyone's attention now, and I got an

19
00:00:51,699 --> 00:00:57,430
excuse to use the confetti animation in Keynote,
so that's great.

20
00:00:57,430 --> 00:01:05,460
So I'm Dominik, I work as a developer evangelist
at Twilio.

21
00:01:05,460 --> 00:01:09,080
We have a bunch of different APIs that allow
you to send and receive SMS, doing phone calls,

22
00:01:09,080 --> 00:01:12,240
video and a bunch of other things.

23
00:01:12,240 --> 00:01:13,960
And I'm also a React developer.

24
00:01:13,960 --> 00:01:15,810
I love building with React.

25
00:01:15,810 --> 00:01:20,710
It's a great framework for a lot of the things
I build.

26
00:01:20,710 --> 00:01:25,780
I'm also an Angular developer.

27
00:01:25,780 --> 00:01:30,140
I love using web components because I think
there's a like a good use case for them.

28
00:01:30,140 --> 00:01:35,790
I build things for the front end and the back
end, and I love playing around with hardware,

29
00:01:35,790 --> 00:01:40,080
as well, so I'm a hardware developer, as well,
but if people ask, I describe myself as a

30
00:01:40,080 --> 00:01:45,390
JavaScript developer, because all of the things
that I talked about, I see much more frameworks

31
00:01:45,390 --> 00:01:51,710
and libraries as tools, rather than anything
else, and tools are here to solve problems,

32
00:01:51,710 --> 00:01:56,150
and these problems might change over time,
you know, based on my team, based on the project,

33
00:01:56,150 --> 00:02:01,120
based on the time that like overall that I
have for the project and that gets me back

34
00:02:01,120 --> 00:02:05,830
to the statement that you're wasting time
learning frameworks, because while I don't

35
00:02:05,830 --> 00:02:11,000
believe t I think it was a got generalizer
to get your attention and we've probably all

36
00:02:11,000 --> 00:02:22,170
heard that you're wasting your time learning
X because Y is faster or Y is better just

37
00:02:22,170 --> 00:02:27,640
generally because I saw some benchmark saying
that or it's just because Y is more popular

38
00:02:27,640 --> 00:02:31,530
and I see it more often on my Twitter feed.

39
00:02:31,530 --> 00:02:36,000
So I wanted to go back and talk about why
we have frameworks in the first place, and

40
00:02:36,000 --> 00:02:39,230
this is to solve problems.

41
00:02:39,230 --> 00:02:45,210
As I said, any framework or tool is ultimately
there to solve a specific problem, and if

42
00:02:45,210 --> 00:02:48,810
you don't believe me, I wanted to go back
in history and kind of talk about a couple

43
00:02:48,810 --> 00:02:56,010
of things from the the web development history
and the tools how they've developed over time,

44
00:02:56,010 --> 00:02:59,819
and note that I'll be talking about a couple
of things, but those are definitely not all

45
00:02:59,819 --> 00:03:04,740
of them, and like there's more things that
evolved over time, but those are some things

46
00:03:04,740 --> 00:03:08,810
I personally interacted with, so I felt most
connected to those.

47
00:03:08,810 --> 00:03:11,260
And so I want to start off with JQuery.

48
00:03:11,260 --> 00:03:15,780
I think we've all interacted at one time with
JQuery regardless of how long you've been

49
00:03:15,780 --> 00:03:21,910
doing web development and I want to figure
out like why does JQuery exist in the first

50
00:03:21,910 --> 00:03:22,910
place.

51
00:03:22,910 --> 00:03:27,000
It's actually pretty easy to figure out because
if we go to the website there is literally

52
00:03:27,000 --> 00:03:33,350
a section called what is JQuery and it's an
easy to use API that works across a multitude

53
00:03:33,350 --> 00:03:39,819
of browsers and that might seem normal these
days where we require everything to just work

54
00:03:39,819 --> 00:03:45,380
in every browser, but in 2006, when JQuery
was released, we were in the middle of the

55
00:03:45,380 --> 00:03:49,550
browser wars, Firefox 2 was just released.

56
00:03:49,550 --> 00:03:56,270
Internet explorer 7 was just released and
according to Wired it was not as standards

57
00:03:56,270 --> 00:03:59,349
compliant as people hoped for.

58
00:03:59,349 --> 00:04:03,620
Chrome was not yet on the market and there
were a couple of others, like Camino, Flock

59
00:04:03,620 --> 00:04:18,530
and browser were some of the ones: If you
were not sure why that seemed to be a problem,

60
00:04:18,530 --> 00:04:22,180
this is how you had to attach an event in
2006.

61
00:04:22,180 --> 00:04:27,870
You had to check if add event listener actually
exists, because that didn't exist in Internet

62
00:04:27,870 --> 00:04:32,700
Explorer, but hey, thet attach event.

63
00:04:32,700 --> 00:04:42,440
And so JQuery gave you a way to actually set
an event handler.

64
00:04:42,440 --> 00:04:46,780
And similarly if you wanted to do a web request
you had to check if you were in IE6 and get

65
00:04:46,780 --> 00:04:55,550
an add object and you had to write all this
boilerplate and AJAX streamlined that process

66
00:04:55,550 --> 00:05:03,370
for you and so with better access to the DOM,
we ended up building more applications that

67
00:05:03,370 --> 00:05:13,750
are UI-heavy from a JavaScript perspective.

68
00:05:13,750 --> 00:05:24,800
So to share and build reusable components,
like date pickers accordions and other things

69
00:05:24,800 --> 00:05:29,230
so you can build them into your application
and so we all jumped on that and kind of started

70
00:05:29,230 --> 00:05:37,110
building more complex user interfaces for
the browser and so our need for tools to structure

71
00:05:37,110 --> 00:05:40,630
more complex applications grew.

72
00:05:40,630 --> 00:05:45,590
And so we got tools like backbone that literally
focused on giving your application structure

73
00:05:45,590 --> 00:05:50,260
to introduce models and views and things like
that.

74
00:05:50,260 --> 00:05:56,110
But at the same time, people didn't feel really
comfortable that basically all of our document

75
00:05:56,110 --> 00:06:00,910
structure moved into JavaScript and so some
people wanted to go back to a more declarative

76
00:06:00,910 --> 00:06:06,320
way of describing UIs rather than declarative
through JavaScript.

77
00:06:06,320 --> 00:06:17,430
Which created frameworks like Angular JS which
focused on extending the HTML vocabulary rather

78
00:06:17,430 --> 00:06:23,570
than having to write a bunch of JavaScript
statements and as our codebases grew we needed

79
00:06:23,570 --> 00:06:25,330
to have ways to handle that.

80
00:06:25,330 --> 00:06:32,770
Concatenating JavaScript files was not the
best use case anymore and so we came up with

81
00:06:32,770 --> 00:06:41,620
module syntax like requireJS or bundlers.

82
00:06:41,620 --> 00:06:46,380
And as people kept on developing those solutions
and platforms developed, our problems kept

83
00:06:46,380 --> 00:06:52,820
on changing and new frameworks and tools showed
up, so by now, we got flooded with different

84
00:06:52,820 --> 00:06:59,000
frameworks that could handle different use
cases and so I think the important thing to

85
00:06:59,000 --> 00:07:04,110
keep in mind here is all of these tools were
created because people had problems and wanted

86
00:07:04,110 --> 00:07:06,340
to find a way to solve these problems.

87
00:07:06,340 --> 00:07:11,290
They got together with others and built these
solutions.

88
00:07:11,290 --> 00:07:16,760
But building a framework is very much more
of a life cycle, so while some, you know,

89
00:07:16,760 --> 00:07:22,050
gain mainstream popularity, others often kind
of stay as like niche solutions and additionally

90
00:07:22,050 --> 00:07:28,610
to that, we often have some that just disappear
over time for various reasons.

91
00:07:28,610 --> 00:07:34,960
For example, JQuery kind of went out of the
spotlight, because we moved into standards

92
00:07:34,960 --> 00:07:40,320
that solved exactly these problems, so we
have query selector and add event listener

93
00:07:40,320 --> 00:07:45,470
now to solve a lot of the common DOM accessing
problems and we have tools like fetch that

94
00:07:45,470 --> 00:07:51,210
don't require us to use Ajax anymore to have
a kind of cross-platform thing.

95
00:07:51,210 --> 00:07:57,850
But while standards might solve a problem,
I also have to disappoint you, because if

96
00:07:57,850 --> 00:08:02,600
your favorite solution gets standardized,
it doesn't necessarily mean it gets standardized

97
00:08:02,600 --> 00:08:09,490
the same way, because it standardization is
hard and it has to take into consideration

98
00:08:09,490 --> 00:08:13,490
a lot of different aspects, because it has
to solve the problem for everyone and not

99
00:08:13,490 --> 00:08:15,650
just a share of folks.

100
00:08:15,650 --> 00:08:23,810
And the best way is with the extensible web
manifesto.

101
00:08:23,810 --> 00:08:28,410
It's a manifesto that was written by a bunch
of folks that were involved with standardizing

102
00:08:28,410 --> 00:08:36,579
web browser features 
and it focuses on four key concepts.

103
00:08:36,579 --> 00:08:45,390
The first one is it focuses on adding new
low-level capabilities to build the web platform

104
00:08:45,390 --> 00:08:47,319
that are secure and efficient.

105
00:08:47,319 --> 00:08:53,829
So what that means is if we look at things
like webGL, for example, or features like

106
00:08:53,829 --> 00:08:58,939
-- now, I have a hanger, oh, WebAssembly.

107
00:08:58,939 --> 00:09:02,610
If you look at WebAssembly or webGL, those
are very low-level things that we can build

108
00:09:02,610 --> 00:09:10,279
tools on top of, like A frame or 3GS to use
them, but they should also explain existing

109
00:09:10,279 --> 00:09:19,009
features, so that's a good example for things
like the Houdini API, or the web component

110
00:09:19,009 --> 00:09:24,350
spec, because they explain how the browser
already handles CSS or introduces new components,

111
00:09:24,350 --> 00:09:30,499
and so it just exposes those to the outside,
and then the other two are key, in my opinion,

112
00:09:30,499 --> 00:09:33,370
for us to help browsers standardize things.

113
00:09:33,370 --> 00:09:39,999
The first one is to create a constant virtuous
cycle of feedback, so this is very important

114
00:09:39,999 --> 00:09:44,550
because it shows sort of in some standards
like the web component spec why it took so

115
00:09:44,550 --> 00:09:53,580
long because developers were not eager to
try new things and so the browser vendors

116
00:09:53,580 --> 00:09:58,129
doesn't get any feedback on standardizing
this this and the other thing is they were

117
00:09:58,129 --> 00:10:06,230
focusing on prioritizing efforts and deprioritizing
others, which again falls into the same thing.

118
00:10:06,230 --> 00:10:13,069
If we want something to come and we want to
have an impact, we need to try these things

119
00:10:13,069 --> 00:10:16,360
as soon as there's polyfills and things like
that.

120
00:10:16,360 --> 00:10:21,149
But if you want to learn about how the standardization
process, you want to check out the talk from

121
00:10:21,149 --> 00:10:26,220
Monica Dinculescu of how the sausage gets
made from 2017.

122
00:10:26,220 --> 00:10:35,290
It's also a great talk to learn more about
the extensible manifesto.

123
00:10:35,290 --> 00:10:41,269
The other thing is if something is standardized,
it might not actually look the same way.

124
00:10:41,269 --> 00:10:48,239
So we already saw the example of AJAX turning
into the fetch command so that it better integrates

125
00:10:48,239 --> 00:10:51,629
with the ecosystem and is more future-proof.

126
00:10:51,629 --> 00:10:59,749
The other thing is things like RequireJS and
CommonJS

127
00:10:59,749 --> 00:11:06,029
took kind of the asynchronous aspect of RequireJS
and a couple of other concepts to merge them

128
00:11:06,029 --> 00:11:11,670
into something that made sense for the browser
and ultimately for the ecosystem.

129
00:11:11,670 --> 00:11:16,249
One common one that I hear about at least
on Twitter a lot these days is about the conversation

130
00:11:16,249 --> 00:11:23,129
about standardizing JSX, and at least in my
personal opinion, JSX for example makes it

131
00:11:23,129 --> 00:11:26,999
fairly hard, because by nature, JSX is rendering
independent.

132
00:11:26,999 --> 00:11:32,899
We set the renderer to the compile time to
JavaScript and it just translates that to

133
00:11:32,899 --> 00:11:39,190
a bunch of function calls that we can use,
and so we actually already have something

134
00:11:39,190 --> 00:11:45,019
that allows you to do that, where you define
a function of and then that returns some output

135
00:11:45,019 --> 00:11:49,670
and we can use it in an easy way with an arbitrary
syntax and that's tagged templates.

136
00:11:49,670 --> 00:11:56,980
So we can perform any sort of function that
takes care of the input that we put in, allows

137
00:11:56,980 --> 00:12:02,110
us to interpolate values and then create any
output we want, be it a new string or anything

138
00:12:02,110 --> 00:12:09,399
else, and so Jason Miller, the creator of
preact actually took that as an act which

139
00:12:09,399 --> 00:12:16,720
allows you to use React, Preact or anything
else without having to compile by using tagged

140
00:12:16,720 --> 00:12:22,670
templates and yes, the tooling is not as great
right now around this as JSX might be with

141
00:12:22,670 --> 00:12:26,470
TypeScript and stuff like that, because that's
because we are not as heavily invested in

142
00:12:26,470 --> 00:12:35,600
this yet.

143
00:12:35,600 --> 00:12:40,799
But even if things don't get standardized,
sometimes projects drastically change or come

144
00:12:40,799 --> 00:12:44,920
to an end, so Angular JS is a great example.

145
00:12:44,920 --> 00:12:52,589
With React and other things around 2010, the
Angular team took some time and took a step

146
00:12:52,589 --> 00:12:59,420
back and looked at what the current ecosystem
is and wanted to create a new thing that solved

147
00:12:59,420 --> 00:13:06,879
their problems in a way that they thought
made sense and Angular 2 was a drastic rewrite.

148
00:13:06,879 --> 00:13:16,009
And frankly that meant people moved on to
React or Vue or other things because they

149
00:13:16,009 --> 00:13:22,569
felt that their problems lined up better with
React or Vue.

150
00:13:22,569 --> 00:13:36,299
And so sometimes I hear that Angular is dead,
but Angular is very much not dead.

151
00:13:36,299 --> 00:13:44,059
There's for example, 21 Angular-specific conferences
in 2019, versus I think I found 22 React conferences

152
00:13:44,059 --> 00:13:49,790
and also, additionally to that, like we tend
to be and serve our JavaScript bubble of people

153
00:13:49,790 --> 00:13:54,619
who are full-time JavaScript developers, but
there's lots of other people who write JavaScript

154
00:13:54,619 --> 00:13:59,699
on a regular basis without identifying themselves
as JavaScript developers, be it people who

155
00:13:59,699 --> 00:14:03,980
write.net or Java or any other language.

156
00:14:03,980 --> 00:14:08,329
The other part of the framework life cycle
I that want to talk about is how frameworks

157
00:14:08,329 --> 00:14:12,799
inspire each other and learn from each other,
I think one good example is the origins of

158
00:14:12,799 --> 00:14:13,980
Vue.

159
00:14:13,980 --> 00:14:25,959
So Vue was created by Evan Hugh at the time
he worked at Google or had just left Google

160
00:14:25,959 --> 00:14:31,049
but he wanted to solve some of his own problems
and to quote him, I wanted something that

161
00:14:31,049 --> 00:14:39,430
captured the declarative nature of Angular's
data binding but ... So here we can see one

162
00:14:39,430 --> 00:14:47,100
of those classic examples actually written
down as how they inspired each other.

163
00:14:47,100 --> 00:14:48,249
Another example is toolkits.

164
00:14:48,249 --> 00:14:53,899
I think we've all used something like you
Vue CLI, Angular CLI, there's lots of different

165
00:14:53,899 --> 00:15:01,899
CLIs around these days, but I want to talk
about the Angular CLI.

166
00:15:01,899 --> 00:15:04,970
And more specifically about the Ember CLI.

167
00:15:04,970 --> 00:15:10,889
Because up until last year there were plenty
of references in the Angular CLI about Ember

168
00:15:10,889 --> 00:15:17,290
CLI.

169
00:15:17,290 --> 00:15:24,240
So took inspiration one step further by relying
on that and then building on top of that but

170
00:15:24,240 --> 00:15:27,339
sometimes the inspiration comes from the community.

171
00:15:27,339 --> 00:15:32,959
So if you didn't hear of the term ahead of
time compiling that's basically the way that

172
00:15:32,959 --> 00:15:42,169
things like Angular during a compiling step
remove unnecessary code and improve the startup

173
00:15:42,169 --> 00:15:47,100
time and bundle size by removing parts of
the library that are not necessary.

174
00:15:47,100 --> 00:16:01,870
And in inspired by that, the group from swell
did the same thing and called it rawact, it

175
00:16:01,870 --> 00:16:08,470
replaces with direct rendering instructions
for the DOM.

176
00:16:08,470 --> 00:16:12,359
But this also gets me to the fact that not
everything works for every use case because

177
00:16:12,359 --> 00:16:18,720
he points out in his repository that this
is largely useful for things that your application

178
00:16:18,720 --> 00:16:24,660
has less components than the size of the React
source code, or if you're trying to do things

179
00:16:24,660 --> 00:16:29,629
like building web components where you don't
want to ship the entire React with every web

180
00:16:29,629 --> 00:16:37,079
component so if you want to pick a date picker,
you can do that without having to distribute

181
00:16:37,079 --> 00:16:38,259
everything.

182
00:16:38,259 --> 00:16:44,790
And fair warning, the rawact is very much
a proof of concept but I hope that React is

183
00:16:44,790 --> 00:16:46,910
picking that up over time.

184
00:16:46,910 --> 00:16:51,679
But I can speak to the topic that people have
different challenges and ultimately different

185
00:16:51,679 --> 00:16:55,550
backgrounds and different challenges that
they're trying to solve we tend to forget

186
00:16:55,550 --> 00:16:58,999
about that.

187
00:16:58,999 --> 00:17:10,680
A .net developer might feel more comfortable
with an opinionated framework because that's

188
00:17:10,680 --> 00:17:12,030
what they're used to.

189
00:17:12,030 --> 00:17:23,980
And an enterprise developer might choose to
use a framework that has batteries included.

190
00:17:23,980 --> 00:17:28,420
But as much as frameworks are about solving
problems, they're also about hype.

191
00:17:28,420 --> 00:17:31,580
In fact they're very much about hype.

192
00:17:31,580 --> 00:17:38,621
To quote Mark S, making a popular open source
project is 10% idea, 15% code and 75% community

193
00:17:38,621 --> 00:17:43,770
building and marketing and I think that's
very true and by the way, you if you don't

194
00:17:43,770 --> 00:17:50,670
know max Stoiber, he created.

195
00:17:50,670 --> 00:18:03,820
I think two good examples are Aurelia

196
00:18:03,820 --> 00:18:05,450
and Svelte.

197
00:18:05,450 --> 00:18:08,990
It's actually a really good framework that
is being used.

198
00:18:08,990 --> 00:18:15,320
It's just not as widely known as Angular,
for example, or React, and the other one is

199
00:18:15,320 --> 00:18:19,690
Svelte, it's a framework that has a lot of
great concepts, like the ahead of time compiling

200
00:18:19,690 --> 00:18:22,500
and others.

201
00:18:22,500 --> 00:18:26,770
It might actually be useful for your own project
but chances are when you evaluated another

202
00:18:26,770 --> 00:18:32,140
framework you might have just not heard of
it and therefore didn't take it into consideration.

203
00:18:32,140 --> 00:18:38,020
So hype really is what makes a framework,
but less hype doesn't mean that it's killing

204
00:18:38,020 --> 00:18:42,980
the framework, and that gets me to one of
I think like the one thing I want you to take

205
00:18:42,980 --> 00:18:48,880
away from this talk, and that's let's not
call frameworks dead, because in JavaScript

206
00:18:48,880 --> 00:18:50,930
nothing ever dies.

207
00:18:50,930 --> 00:18:57,940
70% of the top million sites use JQuery and
things like Angular and Ember and others have

208
00:18:57,940 --> 00:19:05,640
vibrant communities and I think it's very
disrespectful for the people who still maintain

209
00:19:05,640 --> 00:19:12,600
these things but also the people who have
to work with them on a regular basis.

210
00:19:12,600 --> 00:19:16,650
But also, sometimes yes, some frameworks go
unmaintained, but that still doesn't mean

211
00:19:16,650 --> 00:19:21,870
that they are dead, because people don't have
the luxury of being able to change overnight

212
00:19:21,870 --> 00:19:28,600
to a new framework, because -- and so as long
as those tools still solve problems for people,

213
00:19:28,600 --> 00:19:31,410
the community likely is going to stick around.

214
00:19:31,410 --> 00:19:37,010
It might shrink in size, but that still doesn't
mean that it's dead.

215
00:19:37,010 --> 00:19:41,520
And so I like the comparison of how frameworks
and libraries are like hammers, there's like

216
00:19:41,520 --> 00:19:45,170
an unlimited amount of them and they have
different sizes, different manufacturers,

217
00:19:45,170 --> 00:19:51,180
and different specialization, but please don't
tell someone to buy a new hammer, because

218
00:19:51,180 --> 00:19:55,310
if they already have one, and it solves their
problem, because they only have to put a nail

219
00:19:55,310 --> 00:20:01,020
into a wall like once a month or once a year,
don't tell them they need to drop their hammer,

220
00:20:01,020 --> 00:20:03,700
because it's not efficient and they need to
buy a new carpenter hammer.

221
00:20:03,700 --> 00:20:07,940
It's not their use case, because they don't
need it that often.

222
00:20:07,940 --> 00:20:11,310
So let's stop kind of making people feel bad
about that.

223
00:20:11,310 --> 00:20:16,110
Let's stop telling people they are wasting
their time, because ultimately if they're

224
00:20:16,110 --> 00:20:21,930
happy with their solution, they will -- they're
totally fine to keep using it, so let's not

225
00:20:21,930 --> 00:20:23,310
make them feel bad.

226
00:20:23,310 --> 00:20:34,180
All right, to wrap things up, I want to update
an ask from Dan Abramov from 2016 and I want

227
00:20:34,180 --> 00:20:39,820
to update it to take some time and build a
side project or something with a framework

228
00:20:39,820 --> 00:20:42,200
or a tool that you're not familiar with.

229
00:20:42,200 --> 00:20:46,930
And approach it with an open mind so that
you can use the tools and the frameworks that

230
00:20:46,930 --> 00:20:53,350
they build around it, the philosophies of
how they structure that you are applications,

231
00:20:53,350 --> 00:20:54,670
and learn from that.

232
00:20:54,670 --> 00:20:59,750
And then don't look down on others and try
to convince them to change to your favorite

233
00:20:59,750 --> 00:21:00,750
tools.

234
00:21:00,750 --> 00:21:05,950
Instead, talk to each other, talk about why
they chose it and why you chose your solution,

235
00:21:05,950 --> 00:21:11,310
what they like and dislike about it, share
your own experiences, and help each other

236
00:21:11,310 --> 00:21:13,730
and learn from each other.

237
00:21:13,730 --> 00:21:17,890
Because if frameworks can learn from each
other and evolve, then you can, too.

238
00:21:17,890 --> 00:21:23,270
All right, if you want to check out the slides,
they're on this URL.

239
00:21:23,270 --> 00:21:27,331
And I'll tweet about them afterwards, as well,
and with that, I would like to say thank you

240
00:21:27,331 --> 00:21:32,320
and if you have any questions, I'll be around,
so feel free to talk to me afterwards or hit

241
00:21:32,320 --> 00:21:34,520
me up on Twitter or via email.

242
00:21:34,520 --> 00:21:41,830
Thank you so much.

