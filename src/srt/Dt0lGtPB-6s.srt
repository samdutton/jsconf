1
00:00:07,370 --> 00:00:12,960

well welcome to my attraction spell so

2
00:00:12,960 --> 00:00:14,940
I'm just going to talk kind of briefly

3
00:00:14,940 --> 00:00:17,160
about the divide we have between the

4
00:00:17,160 --> 00:00:19,230
back end and the front ends and how we

5
00:00:19,230 --> 00:00:20,610
can try to bridge that with some of our

6
00:00:20,610 --> 00:00:23,880
current tooling so Jonathan Martin I

7
00:00:23,880 --> 00:00:25,860
work at the big nerd ranch in our front

8
00:00:25,860 --> 00:00:27,690
end and rails development team at each

9
00:00:27,690 --> 00:00:29,580
our front-end course so if you happen to

10
00:00:29,580 --> 00:00:31,440
be in that lanta area she couldn't check

11
00:00:31,440 --> 00:00:33,600
us out you can also follow me on twitter

12
00:00:33,600 --> 00:00:37,890
at nibbler so i'm going to talk about

13
00:00:37,890 --> 00:00:40,110
something we deal with every day that is

14
00:00:40,110 --> 00:00:42,780
people and specifically as front-end

15
00:00:42,780 --> 00:00:45,870
developers we deal with back-end people

16
00:00:45,870 --> 00:00:49,170
so that's great but very often they're a

17
00:00:49,170 --> 00:00:50,670
little bit too irrational for our taste

18
00:00:50,670 --> 00:00:52,829
because we have a very specific workflow

19
00:00:52,829 --> 00:00:56,340
of how we like to work so when we have

20
00:00:56,340 --> 00:00:58,200
to work on a full step team kind of

21
00:00:58,200 --> 00:00:59,910
environment we have to pick some

22
00:00:59,910 --> 00:01:01,350
different strategies for how we're going

23
00:01:01,350 --> 00:01:04,170
to cope with our backend friends the

24
00:01:04,170 --> 00:01:05,489
first strategy we could pick as we could

25
00:01:05,489 --> 00:01:07,409
just try to survive through it and

26
00:01:07,409 --> 00:01:10,260
typically that means anytime we need to

27
00:01:10,260 --> 00:01:12,990
do some PRS or something one developer

28
00:01:12,990 --> 00:01:15,120
on it keep them separated don't let them

29
00:01:15,120 --> 00:01:17,040
get anywhere near each other kind of

30
00:01:17,040 --> 00:01:19,049
like matter and antimatter reacting so

31
00:01:19,049 --> 00:01:20,850
that collaboration strategy of steer

32
00:01:20,850 --> 00:01:22,890
clear it's pretty much what most people

33
00:01:22,890 --> 00:01:25,590
go with when it comes to tooling

34
00:01:25,590 --> 00:01:27,390
deciding what tools to pick if you're

35
00:01:27,390 --> 00:01:29,010
going to collaborate with rails in front

36
00:01:29,010 --> 00:01:30,960
end it's typically whoever got to the

37
00:01:30,960 --> 00:01:34,080
code base first and this is something

38
00:01:34,080 --> 00:01:35,850
that's very common and typically makes

39
00:01:35,850 --> 00:01:39,260
up the bulk of front-end back-end teams

40
00:01:39,260 --> 00:01:42,390
so the solution we want is we want to be

41
00:01:42,390 --> 00:01:44,400
able to thrive we want to be able to

42
00:01:44,400 --> 00:01:45,600
take our front-end and back-end and make

43
00:01:45,600 --> 00:01:47,220
them thrive together like an Oreo I

44
00:01:47,220 --> 00:01:49,110
talked about an Oreo just because we all

45
00:01:49,110 --> 00:01:50,640
know that the cookie part of an Oreo is

46
00:01:50,640 --> 00:01:53,130
just the presentation and the sustaining

47
00:01:53,130 --> 00:01:54,330
white stuff that's hidden or

48
00:01:54,330 --> 00:01:57,390
encapsulated inside for the consumer is

49
00:01:57,390 --> 00:01:59,580
the important part at least until the

50
00:01:59,580 --> 00:02:00,930
cookie contents are requested by the

51
00:02:00,930 --> 00:02:04,140
digestive tract so without a little

52
00:02:04,140 --> 00:02:05,580
analogy we want to treat our back-end

53
00:02:05,580 --> 00:02:08,569
fellow members like that Oreo cream so

54
00:02:08,569 --> 00:02:11,249
too often we try too hard to mix

55
00:02:11,249 --> 00:02:13,079
together the front end and back end and

56
00:02:13,079 --> 00:02:14,400
try to get everyone on the

57
00:02:14,400 --> 00:02:15,959
same level try to get them all educated

58
00:02:15,959 --> 00:02:18,030
the same like an Oreo truffle we don't

59
00:02:18,030 --> 00:02:20,099
want to do that we want to keep our

60
00:02:20,099 --> 00:02:21,780
separation of concerns we want to keep

61
00:02:21,780 --> 00:02:23,909
the people who are experts in the front

62
00:02:23,909 --> 00:02:26,099
end and keep the experts your experts in

63
00:02:26,099 --> 00:02:27,569
back end but we need to find a good way

64
00:02:27,569 --> 00:02:30,510
to get us interoperating so the first

65
00:02:30,510 --> 00:02:32,730
way we can try to do that is by trying

66
00:02:32,730 --> 00:02:35,040
to keep the two completely separate have

67
00:02:35,040 --> 00:02:37,200
an entirely separate repo for your front

68
00:02:37,200 --> 00:02:39,480
end part of the appt kind of like an

69
00:02:39,480 --> 00:02:41,549
iPhone clients the iphone client isn't

70
00:02:41,549 --> 00:02:42,900
developed along with the server code

71
00:02:42,900 --> 00:02:45,209
it's developed in isolation so you can

72
00:02:45,209 --> 00:02:47,010
do the same thing just pretend that your

73
00:02:47,010 --> 00:02:49,829
front end client is a client and have it

74
00:02:49,829 --> 00:02:53,010
consumed the back end so that's one way

75
00:02:53,010 --> 00:02:54,599
we can do it and this is a really great

76
00:02:54,599 --> 00:02:56,609
strategy to take if we have the time and

77
00:02:56,609 --> 00:02:58,889
resources to do it but unfortunately a

78
00:02:58,889 --> 00:03:00,989
lot of times we don't have either if

79
00:03:00,989 --> 00:03:02,939
you're in a hackathon of some sort this

80
00:03:02,939 --> 00:03:04,500
especially comes up where you'd like to

81
00:03:04,500 --> 00:03:06,959
split off the two but you have so little

82
00:03:06,959 --> 00:03:08,310
time to begin with it you don't have

83
00:03:08,310 --> 00:03:10,109
time to split off the to make the

84
00:03:10,109 --> 00:03:12,720
separate repose configure all the CSRF

85
00:03:12,720 --> 00:03:14,250
tokens and whatnot that come with a

86
00:03:14,250 --> 00:03:16,920
rails based api so unfortunately that's

87
00:03:16,920 --> 00:03:20,370
not always our leisure so there are some

88
00:03:20,370 --> 00:03:22,230
strategies we can follow in some tooling

89
00:03:22,230 --> 00:03:24,299
we can pick from the go to make sure

90
00:03:24,299 --> 00:03:26,459
that the front-end developers don't go

91
00:03:26,459 --> 00:03:28,139
insane working with back-end developers

92
00:03:28,139 --> 00:03:31,560
and vice versa so thankfully we have

93
00:03:31,560 --> 00:03:32,639
some people have already put the other

94
00:03:32,639 --> 00:03:35,040
some really cool tools and we can rely

95
00:03:35,040 --> 00:03:39,389
on their smarts to get started so one

96
00:03:39,389 --> 00:03:41,220
strategy would be to just push through

97
00:03:41,220 --> 00:03:43,500
this with a front-end developer just

98
00:03:43,500 --> 00:03:45,419
make it work would be kind of our

99
00:03:45,419 --> 00:03:48,269
ideology for doing that so here's one

100
00:03:48,269 --> 00:03:49,680
approach to doing it tastes driven

101
00:03:49,680 --> 00:03:51,720
development which means we're going to

102
00:03:51,720 --> 00:03:53,940
test the two parts the front end in the

103
00:03:53,940 --> 00:03:56,280
back end we're going to develop those

104
00:03:56,280 --> 00:03:59,430
and test them in isolation and then come

105
00:03:59,430 --> 00:04:01,139
back frequently with pairing and

106
00:04:01,139 --> 00:04:07,260
deployment to do those together so when

107
00:04:07,260 --> 00:04:08,609
we're working in the same git repo

108
00:04:08,609 --> 00:04:09,989
because we've made the assumption that

109
00:04:09,989 --> 00:04:11,790
we're going to develop our rails in

110
00:04:11,790 --> 00:04:13,739
front end in the same repo we can take

111
00:04:13,739 --> 00:04:17,370
one strategy where we educate the back

112
00:04:17,370 --> 00:04:18,900
end developers in all the ways of the

113
00:04:18,900 --> 00:04:20,430
front end and how to do those sorts of

114
00:04:20,430 --> 00:04:22,349
things and how to name their CSS classes

115
00:04:22,349 --> 00:04:25,289
and where to put their CSS so that's one

116
00:04:25,289 --> 00:04:26,300
way

117
00:04:26,300 --> 00:04:28,909
and that might work until we go to do

118
00:04:28,909 --> 00:04:31,009
the reverse and try to tell the

119
00:04:31,009 --> 00:04:32,990
front-end developers how they need to

120
00:04:32,990 --> 00:04:34,639
code how they need to work with the

121
00:04:34,639 --> 00:04:36,889
api's how they should organize your CSS

122
00:04:36,889 --> 00:04:38,120
the best work with the rails asset

123
00:04:38,120 --> 00:04:41,300
pipeline so after going through some of

124
00:04:41,300 --> 00:04:43,580
that trauma we might be tempted to

125
00:04:43,580 --> 00:04:46,970
instead d the don't share ideology where

126
00:04:46,970 --> 00:04:49,159
we try to split our concerns completely

127
00:04:49,159 --> 00:04:50,930
and give front-end developers their

128
00:04:50,930 --> 00:04:53,690
domain of just the front end and tell

129
00:04:53,690 --> 00:04:56,449
them follow rails conventions except we

130
00:04:56,449 --> 00:04:58,069
can't follow rails conventions rails

131
00:04:58,069 --> 00:04:59,599
unfortunately gives us poor front end

132
00:04:59,599 --> 00:05:02,120
conventions on occasion so to prevent

133
00:05:02,120 --> 00:05:04,310
insanity I'm going to go through just a

134
00:05:04,310 --> 00:05:06,080
bucket list of some ways that we have

135
00:05:06,080 --> 00:05:08,840
big nerd ranch have found make this a

136
00:05:08,840 --> 00:05:10,580
little bit easier to work with between

137
00:05:10,580 --> 00:05:14,150
the front end and back end so now I move

138
00:05:14,150 --> 00:05:16,729
to just a live coding demo and let's see

139
00:05:16,729 --> 00:05:23,159
if I can get the screens working here

140
00:05:23,169 --> 00:05:25,789
alright so here i have an end result

141
00:05:25,789 --> 00:05:28,479
this is just a project we did recently

142
00:05:28,479 --> 00:05:31,849
for in internal hackathon but many of

143
00:05:31,849 --> 00:05:33,919
you may recognize this as dashing which

144
00:05:33,919 --> 00:05:37,009
is put out by shopify so as part of the

145
00:05:37,009 --> 00:05:38,180
classroom project we wanted to use

146
00:05:38,180 --> 00:05:40,310
Shopify but of course we took it upon

147
00:05:40,310 --> 00:05:42,680
ourselves to rewrite it in ember because

148
00:05:42,680 --> 00:05:44,779
none of us wanted to write Batman code

149
00:05:44,779 --> 00:05:46,729
so in the process it made for a really

150
00:05:46,729 --> 00:05:49,250
interesting experiment because we had to

151
00:05:49,250 --> 00:05:52,490
back-end developers another back-end

152
00:05:52,490 --> 00:05:55,099
developer who apparently wrote go and

153
00:05:55,099 --> 00:05:57,800
one front-end developer and that

154
00:05:57,800 --> 00:05:59,990
consistently changed through the period

155
00:05:59,990 --> 00:06:01,940
of the hackathon because we had one jump

156
00:06:01,940 --> 00:06:04,639
on and off from front end to back end so

157
00:06:04,639 --> 00:06:06,080
it was an interesting consistency to

158
00:06:06,080 --> 00:06:07,250
work with and we had to make sure

159
00:06:07,250 --> 00:06:09,500
working at that fast pace that we didn't

160
00:06:09,500 --> 00:06:13,520
get in each other's way so one of the

161
00:06:13,520 --> 00:06:16,219
ways we did that was when we started out

162
00:06:16,219 --> 00:06:18,590
with the rails app we wanted to make

163
00:06:18,590 --> 00:06:21,259
sure that we had a conventional rails

164
00:06:21,259 --> 00:06:23,870
app to be to begin with but when it came

165
00:06:23,870 --> 00:06:26,330
to assets of any sort we wanted to let

166
00:06:26,330 --> 00:06:29,330
the front-end team have their domain so

167
00:06:29,330 --> 00:06:31,400
the first thing we did is we used Bauer

168
00:06:31,400 --> 00:06:34,219
now Bauer obviously is for the front end

169
00:06:34,219 --> 00:06:35,870
and must tool to make sure you aren't

170
00:06:35,870 --> 00:06:37,820
just copy pasting scripts from off the

171
00:06:37,820 --> 00:06:39,260
internet and putting it in your repo

172
00:06:39,260 --> 00:06:42,140
so with rails we would typically pull in

173
00:06:42,140 --> 00:06:44,420
some gems in the gem file if we wanted

174
00:06:44,420 --> 00:06:46,160
to use backbone we might pull in that

175
00:06:46,160 --> 00:06:48,130
helper Jim if we want to use underscore

176
00:06:48,130 --> 00:06:50,660
bootstrap jQuery the list goes on and on

177
00:06:50,660 --> 00:06:52,460
typically if you're developing rails

178
00:06:52,460 --> 00:06:54,110
you're going to pull in a separate gem

179
00:06:54,110 --> 00:06:56,360
but the problem is these gems are often

180
00:06:56,360 --> 00:06:59,390
behind the bower version or whatever

181
00:06:59,390 --> 00:07:01,610
version is on github it also doesn't

182
00:07:01,610 --> 00:07:03,710
really handle assets very well gems are

183
00:07:03,710 --> 00:07:05,780
meant for packaging Ruby code not so

184
00:07:05,780 --> 00:07:07,660
much for packaging and managing assets

185
00:07:07,660 --> 00:07:10,370
so what we'd like to do is pull Bauer

186
00:07:10,370 --> 00:07:12,440
which gives us a really nice way of

187
00:07:12,440 --> 00:07:15,050
specifying dependencies for front-end

188
00:07:15,050 --> 00:07:16,760
developers and we'd like to be able to

189
00:07:16,760 --> 00:07:20,000
use that in the asset pipeline so it's

190
00:07:20,000 --> 00:07:21,710
actually not all that difficult to set

191
00:07:21,710 --> 00:07:23,390
up but there are some kinks to work out

192
00:07:23,390 --> 00:07:26,240
so first in our gem file we want to make

193
00:07:26,240 --> 00:07:29,660
sure that we're using the bower rails

194
00:07:29,660 --> 00:07:32,780
gym so Bauer rails is just a little gem

195
00:07:32,780 --> 00:07:36,350
that can handle some of the asset

196
00:07:36,350 --> 00:07:38,780
loading for us it also provides some

197
00:07:38,780 --> 00:07:40,760
rake tasks but we actually don't want to

198
00:07:40,760 --> 00:07:42,200
use the rake task because front-end

199
00:07:42,200 --> 00:07:43,640
developers are going to want to use the

200
00:07:43,640 --> 00:07:45,950
bower install command they don't want to

201
00:07:45,950 --> 00:07:49,730
use rake Bauer chol and install so

202
00:07:49,730 --> 00:07:52,940
that's the first part second we want to

203
00:07:52,940 --> 00:07:54,170
define those dependencies in our bio

204
00:07:54,170 --> 00:07:57,110
Jason now Bauer doc Jason if you're

205
00:07:57,110 --> 00:07:59,120
using the rake task is actually going to

206
00:07:59,120 --> 00:08:01,750
be defined for you under vendor assets

207
00:08:01,750 --> 00:08:04,130
possibly under components depending on

208
00:08:04,130 --> 00:08:05,660
where you change the path and we don't

209
00:08:05,660 --> 00:08:07,970
want this we want just our plane Bauer

210
00:08:07,970 --> 00:08:10,100
Jason and to put it up here in the home

211
00:08:10,100 --> 00:08:12,410
directory so we'll move it up here to

212
00:08:12,410 --> 00:08:13,940
find your dependencies as we're used to

213
00:08:13,940 --> 00:08:15,410
here's where we get into some

214
00:08:15,410 --> 00:08:17,600
interesting rails niches notice I'm

215
00:08:17,600 --> 00:08:19,760
using jQuery here and actually we could

216
00:08:19,760 --> 00:08:21,890
use jQuery UJS which is also available

217
00:08:21,890 --> 00:08:26,780
on on on Bauer but there's going to be

218
00:08:26,780 --> 00:08:29,690
some conflicts if you've already got the

219
00:08:29,690 --> 00:08:31,940
jQuery gem in your J in your gem file

220
00:08:31,940 --> 00:08:34,580
which is almost always the case then

221
00:08:34,580 --> 00:08:36,470
you're going to have script conflicts

222
00:08:36,470 --> 00:08:38,080
because I have the same name and

223
00:08:38,080 --> 00:08:40,669
depending on how the rules work one is

224
00:08:40,669 --> 00:08:42,740
going to win out over the other so the

225
00:08:42,740 --> 00:08:43,880
first thing we need to do is make sure

226
00:08:43,880 --> 00:08:45,650
we don't have the jQuery gem in here at

227
00:08:45,650 --> 00:08:48,440
all now thankfully in rails for this was

228
00:08:48,440 --> 00:08:50,660
not a required dependency so it's easy

229
00:08:50,660 --> 00:08:53,060
to pull this out now as we can see here

230
00:08:53,060 --> 00:08:53,450
I

231
00:08:53,450 --> 00:08:56,120
already taken jquery out the way you can

232
00:08:56,120 --> 00:08:58,310
just test some of this stuff is start up

233
00:08:58,310 --> 00:09:00,200
your server check in chrome and see what

234
00:09:00,200 --> 00:09:02,000
sources you already have try and get it

235
00:09:02,000 --> 00:09:04,220
to the point before you convert over to

236
00:09:04,220 --> 00:09:05,930
our try to get it to the point where you

237
00:09:05,930 --> 00:09:09,260
have no assets at all know CSS no

238
00:09:09,260 --> 00:09:11,240
javascript etc you want to get to the

239
00:09:11,240 --> 00:09:12,770
point where you don't have any of that

240
00:09:12,770 --> 00:09:14,180
there so you can start pulling it into

241
00:09:14,180 --> 00:09:16,250
Bauer and make sure you don't have any

242
00:09:16,250 --> 00:09:20,390
conflicts so once we pulled out jquery

243
00:09:20,390 --> 00:09:23,480
and possibly we pulled in jquery UJS you

244
00:09:23,480 --> 00:09:24,920
can pull in your other stuff you can

245
00:09:24,920 --> 00:09:26,630
pull in handlebars in this case i was

246
00:09:26,630 --> 00:09:29,540
also using emblem emblem is a template

247
00:09:29,540 --> 00:09:31,760
language forever that just compiles down

248
00:09:31,760 --> 00:09:34,100
the handlebars so emblem is kind of

249
00:09:34,100 --> 00:09:36,290
tricky because there is a gem for it

250
00:09:36,290 --> 00:09:38,360
because if you want to have the

251
00:09:38,360 --> 00:09:40,580
efficient emblem templates you actually

252
00:09:40,580 --> 00:09:42,440
do want to pre compile them kind of like

253
00:09:42,440 --> 00:09:43,880
you might pre compile a handlebars

254
00:09:43,880 --> 00:09:46,100
template for production that's a

255
00:09:46,100 --> 00:09:48,200
production step that's not something you

256
00:09:48,200 --> 00:09:49,910
just want to handle in the browser so

257
00:09:49,910 --> 00:09:52,190
this is one of those situations where we

258
00:09:52,190 --> 00:09:54,740
did have to use a gem so if you look at

259
00:09:54,740 --> 00:09:57,410
our gem file we actually have an emblem

260
00:09:57,410 --> 00:10:02,840
rails gem in here now in this case I

261
00:10:02,840 --> 00:10:04,490
actually had to go off on a fork because

262
00:10:04,490 --> 00:10:06,560
I wanted to make it so it would just use

263
00:10:06,560 --> 00:10:08,330
whatever bauer version November we had

264
00:10:08,330 --> 00:10:10,460
because if you try to use emblem rails

265
00:10:10,460 --> 00:10:12,950
of the canonical version at least it'll

266
00:10:12,950 --> 00:10:14,600
automatically pull an ember it'll

267
00:10:14,600 --> 00:10:16,460
automatically poor pulling member data

268
00:10:16,460 --> 00:10:19,070
handle bars etc all these gems that we

269
00:10:19,070 --> 00:10:22,010
don't want we just want the emblem

270
00:10:22,010 --> 00:10:23,840
precompiler and we want it to use our

271
00:10:23,840 --> 00:10:27,770
bauer javascript files so but the rest

272
00:10:27,770 --> 00:10:29,150
of them in barrage a cenar

273
00:10:29,150 --> 00:10:32,120
straightforward we just got d3 and a few

274
00:10:32,120 --> 00:10:37,060
other libraries that are used by dashing

275
00:10:37,060 --> 00:10:39,110
so the last thing we need to do is we

276
00:10:39,110 --> 00:10:42,260
need to go into config go to application

277
00:10:42,260 --> 00:10:45,200
and here rails gives us a nice way to

278
00:10:45,200 --> 00:10:47,570
tell it where to find some more assets

279
00:10:47,570 --> 00:10:49,820
so this is just one line we're telling

280
00:10:49,820 --> 00:10:52,100
it to include this vendor assets

281
00:10:52,100 --> 00:10:56,360
components now that's where our stuff is

282
00:10:56,360 --> 00:10:58,460
going to be installed now recall with

283
00:10:58,460 --> 00:11:00,020
Bauer we need to tell it where that

284
00:11:00,020 --> 00:11:02,360
components directory is so if I show the

285
00:11:02,360 --> 00:11:03,830
hidden files you can see we have a bower

286
00:11:03,830 --> 00:11:06,830
RC file here if we look in that

287
00:11:06,830 --> 00:11:08,840
just hold it whenever installs instead

288
00:11:08,840 --> 00:11:10,790
of putting it under power components put

289
00:11:10,790 --> 00:11:13,640
it under vendor / assets / components

290
00:11:13,640 --> 00:11:15,980
and this is important it doesn't have to

291
00:11:15,980 --> 00:11:18,620
be that exact directory but vendor is

292
00:11:18,620 --> 00:11:20,540
the convention vendor assets is a

293
00:11:20,540 --> 00:11:22,370
conventional place to put third-party

294
00:11:22,370 --> 00:11:24,260
libraries inter rails out so you're

295
00:11:24,260 --> 00:11:26,180
meaning that one convention but on the

296
00:11:26,180 --> 00:11:28,670
other hand with Bauer the convention is

297
00:11:28,670 --> 00:11:30,680
to put it under some directory called

298
00:11:30,680 --> 00:11:32,450
components so this is kind of a

299
00:11:32,450 --> 00:11:35,300
trade-off between the two so just make

300
00:11:35,300 --> 00:11:37,460
sure you'd find that Bauer RC file put

301
00:11:37,460 --> 00:11:39,170
in that new directory you can pick

302
00:11:39,170 --> 00:11:41,060
whatever directory you want so long as

303
00:11:41,060 --> 00:11:48,440
it's consistent finally we go up to our

304
00:11:48,440 --> 00:11:51,920
app assets the cool thing is that our

305
00:11:51,920 --> 00:11:55,880
rails will will automatically expose all

306
00:11:55,880 --> 00:11:58,460
of our Bauer dependencies with the

307
00:11:58,460 --> 00:12:00,440
simple require paths so if I go up here

308
00:12:00,440 --> 00:12:01,640
for example I'm going to go to

309
00:12:01,640 --> 00:12:04,640
application jas here at the very top

310
00:12:04,640 --> 00:12:06,530
I've got my required jQuery require

311
00:12:06,530 --> 00:12:08,630
handlebars of acquire ember I didn't

312
00:12:08,630 --> 00:12:10,010
have to put in the full path to that

313
00:12:10,010 --> 00:12:12,080
Bauer component typically for something

314
00:12:12,080 --> 00:12:14,560
like number you'd have to put in require

315
00:12:14,560 --> 00:12:19,790
for example ember / dist /em burn njs

316
00:12:19,790 --> 00:12:21,680
well we don't want to do that we just

317
00:12:21,680 --> 00:12:23,660
want our paths to look exactly the same

318
00:12:23,660 --> 00:12:25,190
as they were when they were a ruby gem

319
00:12:25,190 --> 00:12:26,960
and this is really easy to do thanks to

320
00:12:26,960 --> 00:12:29,690
Bauer rails so we can require in our

321
00:12:29,690 --> 00:12:31,970
dependencies here so the asset pipeline

322
00:12:31,970 --> 00:12:33,500
you'll notice is something we want to

323
00:12:33,500 --> 00:12:36,230
continue to embrace since we're going

324
00:12:36,230 --> 00:12:38,860
with the rails front-end kind of mix and

325
00:12:38,860 --> 00:12:41,420
thankfully now that we've split out

326
00:12:41,420 --> 00:12:43,880
these rubygems instead we're using Bauer

327
00:12:43,880 --> 00:12:51,140
it's actually pretty easy to do so the

328
00:12:51,140 --> 00:12:53,810
last part we'll get into when dealing

329
00:12:53,810 --> 00:12:56,840
with Bauer is some of these deployment

330
00:12:56,840 --> 00:12:58,550
issues and that's probably where the

331
00:12:58,550 --> 00:13:06,700
bulk of the rest of the talk is

332
00:13:06,710 --> 00:13:10,310
now you'll also notice back in the

333
00:13:10,310 --> 00:13:12,170
gemfile I had another file in there

334
00:13:12,170 --> 00:13:13,340
because we're laying front end

335
00:13:13,340 --> 00:13:14,690
developers take control of all the

336
00:13:14,690 --> 00:13:16,940
assets one gem I like to use is called

337
00:13:16,940 --> 00:13:19,010
quiet underscore assets and that

338
00:13:19,010 --> 00:13:21,680
basically gets rid of all asset requests

339
00:13:21,680 --> 00:13:23,540
that are made to the rail server takes

340
00:13:23,540 --> 00:13:24,950
them out of your log because at this

341
00:13:24,950 --> 00:13:27,110
point you don't care where the assets

342
00:13:27,110 --> 00:13:29,060
are coming from in rails you just know

343
00:13:29,060 --> 00:13:30,350
they're coming from Bauer you want to

344
00:13:30,350 --> 00:13:31,880
let the front-end team handle that that

345
00:13:31,880 --> 00:13:33,470
can make it a little be easier to split

346
00:13:33,470 --> 00:13:36,050
your domains the other thing to keep in

347
00:13:36,050 --> 00:13:38,720
mind is that you want to script all

348
00:13:38,720 --> 00:13:40,790
these sorts of things so as we see when

349
00:13:40,790 --> 00:13:43,040
you're dealing with ember or when you're

350
00:13:43,040 --> 00:13:45,950
dealing with deployment to hero q and

351
00:13:45,950 --> 00:13:47,570
you're using Bauer you can run into all

352
00:13:47,570 --> 00:13:49,310
kinds of issues so you want to write

353
00:13:49,310 --> 00:13:51,740
those as bin scripts to make sure that

354
00:13:51,740 --> 00:13:53,570
your front end and rails developers are

355
00:13:53,570 --> 00:14:01,760
doing the same thing so when you try to

356
00:14:01,760 --> 00:14:04,250
use node with your rails projects for

357
00:14:04,250 --> 00:14:05,480
example if you're trying to use it for

358
00:14:05,480 --> 00:14:07,070
doing any kind of builds maybe you

359
00:14:07,070 --> 00:14:08,780
decide that the asset pipeline isn't

360
00:14:08,780 --> 00:14:10,760
going to meet your needs or it's maybe a

361
00:14:10,760 --> 00:14:12,380
little bit too cumbersome you can't

362
00:14:12,380 --> 00:14:14,450
actually use node modules in it but as

363
00:14:14,450 --> 00:14:15,800
we'll see it can be a little bit tricky

364
00:14:15,800 --> 00:14:20,090
to deploy it so if you're going to just

365
00:14:20,090 --> 00:14:21,770
stick with the asset pipeline which is

366
00:14:21,770 --> 00:14:22,640
what we're doing in this particular

367
00:14:22,640 --> 00:14:25,390
project because we had time constraints

368
00:14:25,390 --> 00:14:29,480
make sure that you go wholeheartedly

369
00:14:29,480 --> 00:14:31,490
with Bauer if you try to drop a few

370
00:14:31,490 --> 00:14:33,260
things under vendor assets you're going

371
00:14:33,260 --> 00:14:34,820
to get a beating from the front end team

372
00:14:34,820 --> 00:14:38,030
because it's a hard to find we liked

373
00:14:38,030 --> 00:14:40,720
front-end developers we like to know

374
00:14:40,720 --> 00:14:43,190
explicitly where our dependencies are

375
00:14:43,190 --> 00:14:47,870
coming from so for deploying to Rho Q

376
00:14:47,870 --> 00:14:50,240
you can run into some issues first of

377
00:14:50,240 --> 00:14:52,310
all this is primarily a rails app but it

378
00:14:52,310 --> 00:14:55,400
has a node basis which means when we

379
00:14:55,400 --> 00:14:57,650
deploy up to Heroku we can't just deploy

380
00:14:57,650 --> 00:14:59,270
it as a rails app we actually have to

381
00:14:59,270 --> 00:15:03,230
deploy it as a multi build pack app so

382
00:15:03,230 --> 00:15:09,000
let's go back to that code

383
00:15:09,010 --> 00:15:12,970
so notice when I was had the hidden

384
00:15:12,970 --> 00:15:15,460
files exposed here and this bill packs

385
00:15:15,460 --> 00:15:17,620
file this is something that Haruki

386
00:15:17,620 --> 00:15:19,390
provides to us that lets us define

387
00:15:19,390 --> 00:15:21,940
explicitly what kind of application were

388
00:15:21,940 --> 00:15:25,120
using and what packages that we want to

389
00:15:25,120 --> 00:15:28,780
use to build it so here for example I've

390
00:15:28,780 --> 00:15:30,760
listed two packages first I've listed

391
00:15:30,760 --> 00:15:35,080
that I want to use nodejs as my first

392
00:15:35,080 --> 00:15:38,290
build pack and then I want to use the

393
00:15:38,290 --> 00:15:40,570
standard Ruby one the second line is

394
00:15:40,570 --> 00:15:42,640
what Heroku automatically picks for us

395
00:15:42,640 --> 00:15:44,740
when we're deploying the first one we

396
00:15:44,740 --> 00:15:48,970
have to give explicitly so once we

397
00:15:48,970 --> 00:15:51,160
define those build packs then we just

398
00:15:51,160 --> 00:15:52,300
need to do some basic Heroku

399
00:15:52,300 --> 00:15:55,210
configuration we need to remove the

400
00:15:55,210 --> 00:15:57,430
current build pack if you do a hero qn

401
00:15:57,430 --> 00:15:59,020
you'll see that the current build pack

402
00:15:59,020 --> 00:16:01,150
is probably set to ruby and you don't

403
00:16:01,150 --> 00:16:03,580
want that you want to get rid of that

404
00:16:03,580 --> 00:16:06,730
and instead push it with this and it'll

405
00:16:06,730 --> 00:16:08,050
realize that it's a multipack and

406
00:16:08,050 --> 00:16:10,840
automatically do it supposed to but when

407
00:16:10,840 --> 00:16:12,550
we push it up it needs to know what to

408
00:16:12,550 --> 00:16:14,860
do with that package so one way we can

409
00:16:14,860 --> 00:16:17,830
do that is by creating a node package

410
00:16:17,830 --> 00:16:21,820
file so here I've got package Jason I'm

411
00:16:21,820 --> 00:16:23,850
just the fun a few basic parameters

412
00:16:23,850 --> 00:16:27,220
notably I've set dev dependencies dev

413
00:16:27,220 --> 00:16:29,050
dependencies I've said that to build

414
00:16:29,050 --> 00:16:31,570
this project anywhere you've got to have

415
00:16:31,570 --> 00:16:33,880
Bauer now most users are going to have

416
00:16:33,880 --> 00:16:35,560
Bauer installed globally through node

417
00:16:35,560 --> 00:16:38,290
modules but when we're deploying to the

418
00:16:38,290 --> 00:16:40,060
server the server is not going to have

419
00:16:40,060 --> 00:16:42,340
Bauer installed so we need to define the

420
00:16:42,340 --> 00:16:44,890
dev pendency the other thing we need to

421
00:16:44,890 --> 00:16:46,900
do is to find one of these post install

422
00:16:46,900 --> 00:16:50,800
scripts so this tells Heroku or even

423
00:16:50,800 --> 00:16:52,930
locally if you're using MPM install it

424
00:16:52,930 --> 00:16:54,460
says that after you've installed these

425
00:16:54,460 --> 00:16:57,940
packages run the script so in this case

426
00:16:57,940 --> 00:17:00,670
we've told it to run the bower bin

427
00:17:00,670 --> 00:17:04,990
command and call install on it so once

428
00:17:04,990 --> 00:17:07,180
it calls installed it'll finally pull in

429
00:17:07,180 --> 00:17:10,720
our bow jason dependencies for us so

430
00:17:10,720 --> 00:17:12,579
that the server can actually run from

431
00:17:12,579 --> 00:17:14,470
there the asset pipeline kicks in and

432
00:17:14,470 --> 00:17:16,000
we'll get some minification in the

433
00:17:16,000 --> 00:17:18,310
second part of the build step the second

434
00:17:18,310 --> 00:17:19,540
part of the build step which is after

435
00:17:19,540 --> 00:17:22,449
NPM is run Ruby finally kicks in

436
00:17:22,449 --> 00:17:25,059
now Ruby is a pre compilation step it'll

437
00:17:25,059 --> 00:17:28,029
actually minify and concatenate all of

438
00:17:28,029 --> 00:17:30,429
our assets put ashes on them so the neat

439
00:17:30,429 --> 00:17:32,590
thing about using Vera rails is that you

440
00:17:32,590 --> 00:17:34,149
don't have to worry about Bauer rails

441
00:17:34,149 --> 00:17:36,429
interfering with any event all Bauer

442
00:17:36,429 --> 00:17:38,320
rails does for us is help us

443
00:17:38,320 --> 00:17:39,970
automatically get these dependencies

444
00:17:39,970 --> 00:17:42,580
these JavaScript packages once we have

445
00:17:42,580 --> 00:17:44,649
them rails takes over and we get all the

446
00:17:44,649 --> 00:17:46,690
same minus occation benefits we get the

447
00:17:46,690 --> 00:17:49,240
hash codes etc so you don't have to make

448
00:17:49,240 --> 00:17:50,889
a total departure from the good things

449
00:17:50,889 --> 00:17:52,570
that the asset pipeline provides for us

450
00:17:52,570 --> 00:17:55,269
but you can get the benefits at the same

451
00:17:55,269 --> 00:18:05,860
time of using it just one quick note

452
00:18:05,860 --> 00:18:08,799
watch the name of that build pack if

453
00:18:08,799 --> 00:18:11,169
it's not pluralized you may find that

454
00:18:11,169 --> 00:18:12,970
you keep pushing and it doesn't do

455
00:18:12,970 --> 00:18:18,309
anything so that's all I have I have

456
00:18:18,309 --> 00:18:20,260
some example repos up if you're

457
00:18:20,260 --> 00:18:22,029
interested that show basically how you

458
00:18:22,029 --> 00:18:24,070
can do this from start just a basic

459
00:18:24,070 --> 00:18:26,649
boilerplate getting started so I found

460
00:18:26,649 --> 00:18:28,269
this to be useful we've used on a couple

461
00:18:28,269 --> 00:18:29,769
projects and it seems to be working well

462
00:18:29,769 --> 00:18:39,120
so

