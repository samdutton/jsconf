1
00:00:01,640 --> 00:00:38,059
I have been the CTO and founder of Cloud9
I have in the last two years thrown myself

2
00:00:38,059 --> 00:00:46,770
at the GPU and using that thing for UIs and
doing interesting things.

3
00:00:46,770 --> 00:00:53,570
And, the solution that I've arrived at is
called OneJS and I want to talk to you about

4
00:00:53,570 --> 00:00:56,199
that today.

5
00:00:56,199 --> 00:01:00,129
How many people here are graphics nerds and
how many here are language nerds.

6
00:01:00,129 --> 00:01:06,170
Graphic nerds? Language nerds, good language
nerds are good.

7
00:01:06,170 --> 00:01:10,640
Programming language nerds are good.

8
00:01:10,640 --> 00:01:11,939
So OneJS ...

9
00:01:11,939 --> 00:01:22,299
why?! Very simple reason, the GPU has vast
creative powers.

10
00:01:22,299 --> 00:01:29,540
The programming languages\h‑‑ the programming
languages that can run on the GPU can determine

11
00:01:29,540 --> 00:01:36,369
the color of a picks elwith a program not
with CSS background color or image, with an

12
00:01:36,369 --> 00:01:37,979
actual program.

13
00:01:37,979 --> 00:01:44,090
And what that means is that there is an enormous
amount of yee creative possibility that is

14
00:01:44,090 --> 00:01:49,729
enabled by the use of programs on the GPU,
the only problem is, it is really hard to

15
00:01:49,729 --> 00:01:55,719
do right now
's like a huge air grab between your UI programming

16
00:01:55,719 --> 00:02:01,260
environment like JavaScript and the programming
environment on the GPU, which is GSL, it's

17
00:02:01,260 --> 00:02:08,340
a C‑like programming language that came
out of Pixar, kind of sort of, but it's actually

18
00:02:08,340 --> 00:02:11,230
kind of a pretty language.

19
00:02:11,230 --> 00:02:16,510
It's pretty much just like JavaScript, if
you take out the objects, and you add instead

20
00:02:16,510 --> 00:02:21,590
of numbers you can do vectors, so you can
do A plus B, and A is a vector and B is a

21
00:02:21,590 --> 00:02:29,990
vector, and the result is a vector and every
component is added in parallel like Sim D,

22
00:02:29,990 --> 00:02:35,380
and G P Us are everywhere nowadays, everybody
here is walking around with a GPU in their

23
00:02:35,380 --> 00:02:40,840
phone that's more powerful than anything we
had on PC a decade ago here's my presentation

24
00:02:40,840 --> 00:02:47,040
running on the iPad, it's sixty frames a second
on the web.

25
00:02:47,040 --> 00:02:50,730
It's rally really nice that we have this kind
of GP U power vail northbound lane our mobile

26
00:02:50,730 --> 00:02:58,220
devices, web GL is still kind of Shiy on Android,
actually really Shitty on Android, it's hopefully

27
00:02:58,220 --> 00:03:05,159
going to get there some day when they fix
the GPU reset bug.

28
00:03:05,159 --> 00:03:12,280
But, the main problem is that GL and GPUs
are really really hard, they're very difficult

29
00:03:12,280 --> 00:03:19,780
and very, very elaborate to make them do things,
time just scrolling a bit of GL of web GL

30
00:03:19,780 --> 00:03:27,510
AP I want here, it's incredibly chatty, you
have to do a lot of set up to get the GPU

31
00:03:27,510 --> 00:03:29,900
to do something.

32
00:03:29,900 --> 00:03:36,530
So, what is the essence of the GPU, how does
this thing work? You have to look at it in

33
00:03:36,530 --> 00:03:42,900
a way that you can give it a program, a bit
of code that is computing fix elcolors, for

34
00:03:42,900 --> 00:03:46,940
instance, and, you feed it data and variables.

35
00:03:46,940 --> 00:03:50,659
And the variables are reference in the the
program and the data streams through program

36
00:03:50,659 --> 00:03:57,010
in parallel and is then outputted to fix els,
I'm not going to go deep into the web GL explanation,

37
00:03:57,010 --> 00:04:02,989
Steve Whiten has brilliant demos if you want
to understand how this stuff works, go look

38
00:04:02,989 --> 00:04:03,989
at that.

39
00:04:03,989 --> 00:04:12,000
I want to focus on how to remove all this
Kruft between programmer and the GPU.

40
00:04:12,000 --> 00:04:23,110
So, one of the things that GPU can do is massive
par hash legaltion\h‑‑ this presentation

41
00:04:23,110 --> 00:04:29,510
is running in OneJS because doing a talk about
graphics without using your own graphics engine

42
00:04:29,510 --> 00:04:32,000
is kind of lame.

43
00:04:32,000 --> 00:04:40,030
So, the cool thing about the GPU is that you
can feed it data and have these little programs

44
00:04:40,030 --> 00:04:45,080
do your styling for you, so essentially you
par ram tar rise the data and then have the

45
00:04:45,080 --> 00:04:50,110
little programs on the GPU do style switches,
do style changes, in this case I made a very

46
00:04:50,110 --> 00:04:57,380
simple blob of vertex data, the little triangles
that go into the GPU, on every one of the

47
00:04:57,380 --> 00:05:06,580
triangles is a letter, is a character of a
font, and in that big blob of data I encode

48
00:05:06,580 --> 00:05:13,510
the XY coordinates, in this case the word
color is compute.

49
00:05:13,510 --> 00:05:20,710
And that means that this whole thing is taking
like 0.2 milliseconds of draw time in JavaScript

50
00:05:20,710 --> 00:05:25,930
and run entirely on yourBU, there's pretty
much nothing going on in JavaScript.

51
00:05:25,930 --> 00:05:31,840
This parametertion of styling on to GPU, I
think is going to be very, very important

52
00:05:31,840 --> 00:05:39,590
and it's going to find it, hopefully a new
way to style things on the web that CSS has

53
00:05:39,590 --> 00:05:41,670
sorely lacked.

54
00:05:41,670 --> 00:05:46,710
So the parialism idea or this picture is trying
to illustrate (Parallelism) you have to imagine

55
00:05:46,710 --> 00:05:52,180
every fix elhaving a function call that computes
the function of the fix el.

56
00:05:52,180 --> 00:05:58,021
In that case, the functioncal takes some arguments
an X and Y coordinate, exclamation parameter

57
00:05:58,021 --> 00:06:06,430
T, and it decides the color of the text or
the color of the "I" el, it's same concept.

58
00:06:06,430 --> 00:06:14,240
So, we all love of brad vector talks Whoo\h‑‑
that guy's awesome.

59
00:06:14,240 --> 00:06:20,690
He had an interesting point about first principles,
it was a bit puzzling to me, first principles,

60
00:06:20,690 --> 00:06:28,060
what are those things, this time around I
try to find my first principles of what I'm

61
00:06:28,060 --> 00:06:30,130
trying to build.

62
00:06:30,130 --> 00:06:39,250
And, one of the core concepts that I tried
to put in to OneJS is programmable beyond

63
00:06:39,250 --> 00:06:40,850
configurable.

64
00:06:40,850 --> 00:06:43,970
Programmable is better than configurable.

65
00:06:43,970 --> 00:06:48,720
We all know the declarative space where everything
you want needs some implementation from an

66
00:06:48,720 --> 00:06:50,790
engine designer.

67
00:06:50,790 --> 00:06:55,410
We want another parameter to do something
in the engine, if you do it declaratively,

68
00:06:55,410 --> 00:07:00,300
then those declarations have to be excueded
by an engine that somebody has to build.

69
00:07:00,300 --> 00:07:07,220
We all know CSS spec stuff where is configurable.

70
00:07:07,220 --> 00:07:12,770
But configurability is an enormously limiting
factor on the creative potential on what we

71
00:07:12,770 --> 00:07:15,950
can do with computers.

72
00:07:15,950 --> 00:07:21,620
But this concept, if\h‑‑ so, I usual live
apply like this, if you find yourself making

73
00:07:21,620 --> 00:07:29,210
something configurable, consider making it
programmable, so instead of making an API,

74
00:07:29,210 --> 00:07:30,880
make a Compiler.

75
00:07:30,880 --> 00:07:31,970
Right.

76
00:07:31,970 --> 00:07:35,110
Instead of having a flag using an expression.

77
00:07:35,110 --> 00:07:39,750
At the very least an expression and better
general function execution.

78
00:07:39,750 --> 00:07:46,310
And I try to put this in the details of OneJS,
another one is that style and behavior orer

79
00:07:46,310 --> 00:07:47,360
reducible.

80
00:07:47,360 --> 00:07:49,680
By this I mean\h‑‑er reducible\h‑‑\h‑‑
Irr deucible.

81
00:07:49,680 --> 00:07:57,300
I'm encoding a red rectangle, I have to say
it's red and I have to say it's a rectangle,

82
00:07:57,300 --> 00:08:01,680
I cannot make a red rectangle out of anyless
data.

83
00:08:01,680 --> 00:08:06,440
Red button is the same thing.

84
00:08:06,440 --> 00:08:16,960
Everybody here has probably made a button,e
in HTML\h‑‑ that logic is Irr educ Ibl

85
00:08:16,960 --> 00:08:25,020
oh, if you're trying to introduce a button,
the language is completely Irreduc Ible T

86
00:08:25,020 --> 00:08:34,620
only way to make UI more compact in the power
of expression is by composition.

87
00:08:34,620 --> 00:08:41,430
Make composition the core aspect, programmability,
composition, because style and behavior are

88
00:08:41,430 --> 00:08:45,150
Irredu doctorible
's no pipe dreams about let's make the grand

89
00:08:45,150 --> 00:08:49,950
unified UI kit, because someone is going to
want the slide tore do something that you

90
00:08:49,950 --> 00:08:51,190
didn't program into it.

91
00:08:51,190 --> 00:08:55,680
So declarative is always going to break down.

92
00:08:55,680 --> 00:09:03,460
And, this is something new that has arrived
with theGPU, inefficiency is okay when it's

93
00:09:03,460 --> 00:09:05,200
parallel.

94
00:09:05,200 --> 00:09:10,440
Many of you might think the GPU is so fast,
well, it's not fast,it's parallel.

95
00:09:10,440 --> 00:09:16,960
Which means that it can run thousands of little
programs that run relatively slowly but you

96
00:09:16,960 --> 00:09:22,190
can still get a vast result out of that that
you wouldn't be able to do if it's a serial

97
00:09:22,190 --> 00:09:26,710
language, because JavaScript has pretty much
been a serial language, we're all accustomed

98
00:09:26,710 --> 00:09:31,440
to four loops are expensive, well, if you
do it in par are legal you can do quite a

99
00:09:31,440 --> 00:09:32,770
lot of things.

100
00:09:32,770 --> 00:09:43,900
So, (Parallel) so how are we going to attack
this problem? So if you want to make theGU

101
00:09:43,900 --> 00:09:47,750
programmable in a way this is more accessible
from within another programming environment,

102
00:09:47,750 --> 00:09:52,530
because we oar not doing declarative structures,
we're doing programming environments and Compilers,

103
00:09:52,530 --> 00:09:56,580
we have to fuse GSL\h‑‑ GLSL into JS as
much as we can.

104
00:09:56,580 --> 00:10:03,420
It's a language with strict typing you have
a four vector you have a float, and you have

105
00:10:03,420 --> 00:10:07,360
an array of this and Ie an array of that.

106
00:10:07,360 --> 00:10:13,360
And JavaScript, actually sin tackcally is
fair live close to what GLSL looks like in

107
00:10:13,360 --> 00:10:22,760
terms of C, what I try to do was fuse these
languages at the hip, probably.

108
00:10:22,760 --> 00:10:30,590
But, fuse them in a way that you can leverage
the same syntax whether you're writing a shader

109
00:10:30,590 --> 00:10:34,940
or whether you're writing something that run
in JavaScript.

110
00:10:34,940 --> 00:10:43,620
So, by the way, these are syntax shaders,
syntax highlighting is kind of lame (Laughs)

111
00:10:43,620 --> 00:10:49,050
which means that I actually throw the AST
on to theG and you can write little fragments

112
00:10:49,050 --> 00:10:50,590
that style your code.

113
00:10:50,590 --> 00:10:56,940
I wrote a code editor with my previous company,
this was just like you want this, I don't

114
00:10:56,940 --> 00:11:01,940
know why you want this, but it's awesome.

115
00:11:01,940 --> 00:11:07,050
It's not about why, it's about the potential
of exploration that you can do.

116
00:11:07,050 --> 00:11:14,280
If I can make an error jitter in my line of
code, I can add something that is useful.

117
00:11:14,280 --> 00:11:18,250
This is not useful, but this looks pretty.

118
00:11:18,250 --> 00:11:25,171
So OneJS is JavaScript, I try not to explain
JavaScript, that's annoying because I have

119
00:11:25,171 --> 00:11:29,320
to explain a million times why I did something.

120
00:11:29,320 --> 00:11:37,120
At the same time, trance Compiler I tried
to fix some of the problems that are in JavaScript.

121
00:11:37,120 --> 00:11:41,850
And one of the things is I finally got rid
of semi colons, it's very important.

122
00:11:41,850 --> 00:11:45,540
Visual noise, and I don't like visual noise.

123
00:11:45,540 --> 00:11:50,650
But what you is to do to get rid of semi colons
is make it new line sensitive when it reads

124
00:11:50,650 --> 00:11:55,910
parens or square brackets on the next line,
if you make it new line sensitive, at that

125
00:11:55,910 --> 00:12:01,710
point, then you can get rid of semi colons,
no, semi colons are there for a reason because

126
00:12:01,710 --> 00:12:05,090
it blows your foot off if you do it incorrectly.

127
00:12:05,090 --> 00:12:12,220
Oh, now it's a cull of a sud b, shit, everyone
that's learned that\h‑‑ well, if you can

128
00:12:12,220 --> 00:12:14,670
fix that, it's no problem.

129
00:12:14,670 --> 00:12:22,300
And I tried to take the Ecma script 6 and
7 all the things I could find in coffee script,

130
00:12:22,300 --> 00:12:28,560
Julia Lisp, I tried to fuse it down to something
that wouldn't break JavaScript but would still

131
00:12:28,560 --> 00:12:30,620
add the stuff I needed.

132
00:12:30,620 --> 00:12:39,350
If you're fusing two execution domains, there's
something that is very useful about symbolic

133
00:12:39,350 --> 00:12:42,760
expressions, we'll get to that next, I'll
first show you the class, because classes

134
00:12:42,760 --> 00:12:47,960
are another very important aspect of the language.

135
00:12:47,960 --> 00:12:55,880
Because, offed\h‑‑ because of the composability
if you have a button, and you want to specialize

136
00:12:55,880 --> 00:12:59,770
it to do something different, you need to
be able to inherit the class and change one

137
00:12:59,770 --> 00:13:03,820
parameters, that's the most come pressed rep
evennation of that idea.

138
00:13:03,820 --> 00:13:08,310
Button that's a different color, we'll take
this button and change the color, that's sort

139
00:13:08,310 --> 00:13:13,170
of like a compression algorithm in your expression
of code.

140
00:13:13,170 --> 00:13:17,830
Class is super important, I took\h‑‑ script
I changed one thing, they're not functions

141
00:13:17,830 --> 00:13:27,320
anymore, I hate dot prototype\h‑‑ nobody
gets it, it's horrible.

142
00:13:27,320 --> 00:13:31,020
So I just removed that prototype, my classes
are just objects, I don't have a new operator,

143
00:13:31,020 --> 00:13:33,740
I have dot new.

144
00:13:33,740 --> 00:13:39,480
I tried to explain it so many times and it's
just not going to work for me.

145
00:13:39,480 --> 00:13:43,839
Doesn't mean it's not compatible with JavaScript,
because it's a super set, largely, except

146
00:13:43,839 --> 00:13:48,980
if you like to do function call with parens,
on the next line, then that's your problem.

147
00:13:48,980 --> 00:13:59,029
So, the interesting part is we have struts
and vector in this implementation, and we

148
00:13:59,029 --> 00:14:03,550
have symbolic expressions, symbolic expressions
is an idea from lists where you quote and

149
00:14:03,550 --> 00:14:09,100
you write something in code that looks like
code, but it's actually an ASD node in the

150
00:14:09,100 --> 00:14:16,230
language, so here on the right you see X is
Y plus one, but with a colon if front of it.

151
00:14:16,230 --> 00:14:20,529
The colon is the quote operator, the colon
eats the whole expression to the right and

152
00:14:20,529 --> 00:14:29,360
turns this into an Astnode, you can now start
to treat expression as usable objects in your

153
00:14:29,360 --> 00:14:33,870
language.

154
00:14:33,870 --> 00:14:36,580
And heres an example of how you draw a triangle.

155
00:14:36,580 --> 00:14:44,790
This is not library that abstracts away what
you do, these are the actual it's the actual

156
00:14:44,790 --> 00:14:50,589
data, the differentiator and fixable differentiator,
there's no matrix stacks, there's no nothing,

157
00:14:50,589 --> 00:14:55,730
this is just thest seasons of what the GPU
needs to draw a fry angle.

158
00:14:55,730 --> 00:15:03,240
You can make a vector two array, so you can
use that in JavaScript, this compiles to a

159
00:15:03,240 --> 00:15:09,180
flow 32 array expansion, so you really in
JavaScript here, I could a console log in

160
00:15:09,180 --> 00:15:14,730
the middle, this is just JavaScript, except
it has a few little syntax tweaks, another

161
00:15:14,730 --> 00:15:22,240
one of the syntax tweaks is the identifier
curly syntax, because I always get very annoyed

162
00:15:22,240 --> 00:15:29,020
when I have to express tree structure in a
sort of computable way that I have to go toJON

163
00:15:29,020 --> 00:15:35,690
or I have go to XML, which\h‑‑ (JSON)
which is horrible) it shouldv a construct

164
00:15:35,690 --> 00:15:41,181
to express these tree structure in a way that
you can mix et with your language, like a

165
00:15:41,181 --> 00:15:42,181
templating structure.

166
00:15:42,181 --> 00:15:46,830
I could put a four loop in front of draw and
it would do it ten times.

167
00:15:46,830 --> 00:15:54,440
So, this identifier curly syntax is actually
a call, it's object.call, and the curlies

168
00:15:54,440 --> 00:16:00,589
are a function, so this just says device.call
wrap with function.

169
00:16:00,589 --> 00:16:05,590
That's what it expands to, and it passes in
to this, because that is another important

170
00:16:05,590 --> 00:16:10,070
thing, OneJS does not have global, it just
slaps this dot in front of anything that would

171
00:16:10,070 --> 00:16:15,411
be a global, which means you access properties
on your object without using this dot, which

172
00:16:15,411 --> 00:16:17,940
also makes your code much less wide.

173
00:16:17,940 --> 00:16:25,880
So here we have a triangle, and you can see
the mesh with thementty brackets, that pull

174
00:16:25,880 --> 00:16:32,040
in the data from the JavaScript space,I adopt
have to write attributes and uniforms, it's

175
00:16:32,040 --> 00:16:37,520
generated for you (I don't have to write)
by looking at what you're using in the shader,

176
00:16:37,520 --> 00:16:42,360
it's very simple, Compilers do it all the
time, something that needed to be done.

177
00:16:42,360 --> 00:16:47,930
So, we have\h‑‑ we have device and we
have draw, and draw is just a draw call, but

178
00:16:47,930 --> 00:16:52,960
if we can inflater a device and make a scene
and we can inherit from draw and make a layer

179
00:16:52,960 --> 00:16:57,720
we can use composability to use actual scene
drafts, this is terribly ugly because a week

180
00:16:57,720 --> 00:17:02,230
ago it did nothing.

181
00:17:02,230 --> 00:17:09,850
This is a very simple example of how you do
nested rectangles with matrixes, right.

182
00:17:09,850 --> 00:17:14,829
Scene graphs work in a way that you have a
reck tang that will has a matrix and then

183
00:17:14,829 --> 00:17:19,410
something inside it that has a matrix, and
matrixing are multiplied together to get the

184
00:17:19,410 --> 00:17:24,600
relative offset, that's how the CSS transforms
work, that's how the browser does it.

185
00:17:24,600 --> 00:17:34,650
That's how you do 2 D nested transforms by
Concaptina theing the matrixes\h‑‑ simple\h‑‑

186
00:17:34,650 --> 00:17:39,520
just implements the multiplication of the
matrix, you parameterize that matrix with

187
00:17:39,520 --> 00:17:47,480
WH and SX, I could call it top, bottom, left,
right, all those kind of things, I like 'em

188
00:17:47,480 --> 00:17:51,890
short, anybody can change that and make a
long name for it.

189
00:17:51,890 --> 00:18:01,550
And, here you can see instead of background
image, you actually just make a texture fetch

190
00:18:01,550 --> 00:18:04,760
and you do background.sample at a certain
coordinate.

191
00:18:04,760 --> 00:18:09,010
So this rectangle can be parameterized any
way, I can twirl it, flip it, I can do anything

192
00:18:09,010 --> 00:18:14,880
with the code, it's programmable, the styling
is programmable, the styling comes from your

193
00:18:14,880 --> 00:18:22,490
class model, I can do inheritance, I can do
CSS‑like style class that are just applied,

194
00:18:22,490 --> 00:18:25,990
just apply these properties.

195
00:18:25,990 --> 00:18:30,080
Because shaders are now composeble, I can
reference an object, I can reference another

196
00:18:30,080 --> 00:18:35,600
function on my class, essentially shaders
have been fused with the class model.

197
00:18:35,600 --> 00:18:38,220
I have to hurry up.

198
00:18:38,220 --> 00:18:47,090
So interactivity, this is really lame, but
it shows you a very important aspect of changing

199
00:18:47,090 --> 00:18:53,400
stuff dynamically, so, on mouse left down
I change the symbolic expression of X to mouse

200
00:18:53,400 --> 00:18:56,880
X and Y, so I lock it to the mouse.

201
00:18:56,880 --> 00:19:01,380
Essentially the Compiler goes you've changed
an expression, let's recompile your draw function

202
00:19:01,380 --> 00:19:06,710
and send it to the renderer, then the renderer
does the stuff with the mouse coordinates,

203
00:19:06,710 --> 00:19:12,790
so I've essentially told the render today
that bind, this is expression day the binding

204
00:19:12,790 --> 00:19:15,390
in the renderer by using a Compiler.

205
00:19:15,390 --> 00:19:21,420
And, it's rally cool, you can change any part
of your shader function and variables interactively.

206
00:19:21,420 --> 00:19:26,929
I'm still working on the animation system,
and all that, but we'll get to that later.

207
00:19:26,929 --> 00:19:33,250
So these slides are written using a class
DSL because you have the nesting curly identifier

208
00:19:33,250 --> 00:19:40,490
syntax, you can impresent a DSL by putting\h‑‑
by making a bunch of nested classes, you can

209
00:19:40,490 --> 00:19:46,140
do class deck and a slide is in a deck, this
just means that can only exTennesseeuate a

210
00:19:46,140 --> 00:19:50,640
slide because it's only known on the class
deck.

211
00:19:50,640 --> 00:19:55,500
So if I don't put the slide thing p deck,
it's just going to say undefined.

212
00:19:55,500 --> 00:20:02,330
So now I have a domain specific language that
is encoded in a class hierarchy, so, you know,

213
00:20:02,330 --> 00:20:07,950
I don't need all these really fancy HTML things,
I can make a domain specific renderer for

214
00:20:07,950 --> 00:20:13,410
these slides, the slide are aDM tree,but a
different kind of DOM, it doesn't reverend

215
00:20:13,410 --> 00:20:19,170
all their children and I'm hiding layer, a
DOM tree is having a custom draw command I'm

216
00:20:19,170 --> 00:20:23,780
going to render the current slide and nothing
else, I know slide ID, you specialize the

217
00:20:23,780 --> 00:20:31,220
draw I differential,instead of being C + +
parameterized, it's a programmable engine

218
00:20:31,220 --> 00:20:36,760
that has a per node draw calls that you can
just change.

219
00:20:36,760 --> 00:20:42,240
So, the stuff not ready for use at all, three
months atwo let's do JSConf 2014, it's a nice

220
00:20:42,240 --> 00:20:46,750
dead line if you're building Compilers to
get somewhere.

221
00:20:46,750 --> 00:20:52,370
It's rally far to hello world when you start
with a language.

222
00:20:52,370 --> 00:20:59,210
But, I still need to refactor\h‑‑ this
is a type inferencing Compiler, it's kind

223
00:20:59,210 --> 00:21:04,660
of my first type inferencing Compiler, I need
some refactorring time on this thing.

224
00:21:04,660 --> 00:21:11,530
It's multithreaded, so the code that you saw
runs in a worker, and the Compiler sends the

225
00:21:11,530 --> 00:21:16,990
draw calls, the draw code to the main thread
which is really nice, because I don't get\h‑‑

226
00:21:16,990 --> 00:21:21,179
or I get minimal garbage collection hick ups
in my rend E.

227
00:21:21,179 --> 00:21:26,470
all the user stuff that's doing data generation
for data visualization or whatever it's doing

228
00:21:26,470 --> 00:21:32,040
is not in the render thread, it's perfectly
fine had a work e.

229
00:21:32,040 --> 00:21:37,510
It's fairly large, it's 130 K over the wire,
I'm compiling everything in the browser always,

230
00:21:37,510 --> 00:21:41,970
I'm using browser based local storage to cachee
cache the output.

231
00:21:41,970 --> 00:21:48,640
I don't like server based compilation solutions,
it limits the composability of your programming

232
00:21:48,640 --> 00:21:52,470
construct if you is to precompile everything,
so it always compile in the browser, it's

233
00:21:52,470 --> 00:21:53,570
actually really fast.

234
00:21:53,570 --> 00:21:59,741
The whole slide takes about 450 milliseconds
to parse and compile the whole thing, which

235
00:21:59,741 --> 00:22:05,080
is okay for about ten or fifteen thousand
lines of code in JavaScript.

236
00:22:05,080 --> 00:22:09,540
And if it's cached it starts up much quicker.

237
00:22:09,540 --> 00:22:18,270
So IOS is great, I was like, yeah, year, web
GL, bam, it's work: Android is web GL, web

238
00:22:18,270 --> 00:22:21,390
GL, it doesn't work.

239
00:22:21,390 --> 00:22:25,830
The state of web GL is not that great for
mobile yet, this is great that it works but

240
00:22:25,830 --> 00:22:30,010
on Android it's not\h‑‑ you to manually
enable it in chrome or you can freeze the

241
00:22:30,010 --> 00:22:36,621
whole operating system, that's why it's disabled,it
makee makes sense it's disabled, this is a

242
00:22:36,621 --> 00:22:41,410
future facing technology, this is not something
you want the use for a corporate client any

243
00:22:41,410 --> 00:22:43,570
time soon.

244
00:22:43,570 --> 00:22:52,940
So, the future is constrained layouts, and
I have it running and because I have the Compiler

245
00:22:52,940 --> 00:22:58,870
I can actually, you can just write a constraint
straight in your code block like this.

246
00:22:58,870 --> 00:23:01,710
And it can run the solver on the scene graph.

247
00:23:01,710 --> 00:23:03,320
So that's coming.

248
00:23:03,320 --> 00:23:08,000
This is all not responsive and has no layout
engine because I haven't gotten to that point

249
00:23:08,000 --> 00:23:09,590
yet.

250
00:23:09,590 --> 00:23:15,990
But, I mean, I got a way with it because I
have essentially expression layouts so you

251
00:23:15,990 --> 00:23:19,980
can do parent width minus a hundred, so position
something from the right.

252
00:23:19,980 --> 00:23:24,670
It doesn't actually have layout engine, but
it will.

253
00:23:24,670 --> 00:23:28,740
And I'm going to build a live code editor
in this thing itself, this is a great way

254
00:23:28,740 --> 00:23:32,920
to build a code editor if you can do this
kind of text stuff.

255
00:23:32,920 --> 00:23:37,320
But also the reason is that I need to bolt
editor on to the ASD directly otherwise the

256
00:23:37,320 --> 00:23:41,410
editor is going to be this dumb thing that
looks at regular expressions which is not

257
00:23:41,410 --> 00:23:47,929
you want to be with the code editor, you want
the full ASD, and operate on the SAD so it

258
00:23:47,929 --> 00:23:52,990
needs to sterilize into proper code, which
is what I'm going to work on next and it needs

259
00:23:52,990 --> 00:24:01,210
to work on this thing, the Oculus at 75 hearts,
I'm hoping the browser guys can get that done,

260
00:24:01,210 --> 00:24:05,700
I'm fearing it might not happen.

261
00:24:05,700 --> 00:24:12,830
It has almost no AI expotion, so I can writtene
run it in node just as well as in the browser.

262
00:24:12,830 --> 00:24:19,150
And I'm going to, you know, make a prototype
of a new Cloud9 UI, I think it should be easily

263
00:24:19,150 --> 00:24:20,180
doable.

264
00:24:20,180 --> 00:24:24,940
It's on GitHub, you look at it and not complain
about it.

265
00:24:24,940 --> 00:24:29,919
I mean, you can look at it and do stuff with
it if you want, not something I'm throwing

266
00:24:29,919 --> 00:24:35,940
out in a supported way, because I'm in the
middle of, you know, bolting the time inferencing

267
00:24:35,940 --> 00:24:41,310
Compiler into a code editor, I need my brain
time for that, instead of support everything,

268
00:24:41,310 --> 00:24:42,360
yet.

269
00:24:42,360 --> 00:24:46,990
I believe if I have that editor support is
going to be a lot easier.

270
00:24:46,990 --> 00:24:54,260
This actually runs on hello.onejs.IO you can
open it up and blow your battery power.

271
00:24:54,260 --> 00:24:55,740
It's expensive.

272
00:24:55,740 --> 00:24:59,950
You need to stop animating this stuff, it's
great if you want to burn through your battery,

273
00:24:59,950 --> 00:25:03,530
you need dirty regions and not animate.

274
00:25:03,530 --> 00:25:10,410
This is by the way, you can just throw your
ender scene to win amp kind of visualization

275
00:25:10,410 --> 00:25:13,980
in five minutes, because the composability
is super easy.

276
00:25:13,980 --> 00:25:20,540
A good friend of mine, just before I went
to JSConf was like let's put pack tills ton

277
00:25:20,540 --> 00:25:21,940
outlines of your font.

278
00:25:21,940 --> 00:25:23,500
I was like Dude ...

279
00:25:23,500 --> 00:25:31,110
really, it's not useful, but it's so fucking
pretty.

280
00:25:31,110 --> 00:25:34,200
Right.

281
00:25:34,200 --> 00:25:45,059
(applause) so, that was timed better than
I hoped, I'm done, thank you (Applause (If

282
00:25:45,059 --> 00:25:46,270
you have ideas and questions, anything about
this, seek me out, I really do want to engage,

