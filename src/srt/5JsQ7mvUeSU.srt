1
00:00:05,420 --> 00:00:08,970

okay hello everyone so I'm going to

2
00:00:08,970 --> 00:00:12,210
speak about our greens all these small

3
00:00:12,210 --> 00:00:15,059
creatures that living in our codebases

4
00:00:15,059 --> 00:00:18,500
even we if we don't really know about it

5
00:00:18,500 --> 00:00:22,410
before we start few facts about me so

6
00:00:22,410 --> 00:00:24,930
i'm vitaly i'm working for company

7
00:00:24,930 --> 00:00:26,760
called upon as the leads of train

8
00:00:26,760 --> 00:00:29,400
engineer in poland in broad swath i'm

9
00:00:29,400 --> 00:00:32,880
Corgan eyes in meetups and i really love

10
00:00:32,880 --> 00:00:34,440
to experiment with some interesting

11
00:00:34,440 --> 00:00:36,510
stuff combined and expect these things

12
00:00:36,510 --> 00:00:39,350
and stuff like that so and you can

13
00:00:39,350 --> 00:00:42,629
follow me on twitter read my blog and

14
00:00:42,629 --> 00:00:46,350
things like that so our main topic Algar

15
00:00:46,350 --> 00:00:49,700
is what is actually our grids

16
00:00:49,700 --> 00:00:53,730
so it's a specification how to solve

17
00:00:53,730 --> 00:00:57,449
some problem step by step so it's just

18
00:00:57,449 --> 00:01:01,800
instructions yes and what why we should

19
00:01:01,800 --> 00:01:06,260
care about it we just using some react

20
00:01:06,260 --> 00:01:09,840
components to build your eyes so we are

21
00:01:09,840 --> 00:01:12,060
not doing some rocket science or things

22
00:01:12,060 --> 00:01:16,409
like that but actually algorithm a way

23
00:01:16,409 --> 00:01:19,409
even in all of your frameworks right so

24
00:01:19,409 --> 00:01:22,740
many algorithmic optimizations to reduce

25
00:01:22,740 --> 00:01:25,670
memory footprint to make them faster and

26
00:01:25,670 --> 00:01:29,280
all these things might came with some

27
00:01:29,280 --> 00:01:31,950
trade-offs and we will speak about them

28
00:01:31,950 --> 00:01:36,090
as well so before we start I need to

29
00:01:36,090 --> 00:01:39,570
introduce what is complexity how we can

30
00:01:39,570 --> 00:01:42,360
measure our algorithm is it good enough

31
00:01:42,360 --> 00:01:46,350
or we should look for better solution

32
00:01:46,350 --> 00:01:50,970
for it so complexity is the way to

33
00:01:50,970 --> 00:01:55,409
explain us how our code will scale will

34
00:01:55,409 --> 00:01:58,110
work at scale for example on your test

35
00:01:58,110 --> 00:02:00,329
environment you have just few tests

36
00:02:00,329 --> 00:02:02,579
user's ten of them but in real

37
00:02:02,579 --> 00:02:05,159
application you have millions of them or

38
00:02:05,159 --> 00:02:08,340
something so you should know how it will

39
00:02:08,340 --> 00:02:12,190
behave should you optimize this for more

40
00:02:12,190 --> 00:02:15,430
or entities and in computer science

41
00:02:15,430 --> 00:02:19,330
reset standard notation for that called

42
00:02:19,330 --> 00:02:24,960
Big O so what is that it's actually a

43
00:02:24,960 --> 00:02:29,920
graphical representation how our time of

44
00:02:29,920 --> 00:02:34,810
algorithm will be behaved on more and

45
00:02:34,810 --> 00:02:39,010
more input date so we have like near one

46
00:02:39,010 --> 00:02:42,700
so it grows as we increase the entities

47
00:02:42,700 --> 00:02:44,470
we pass to the functions

48
00:02:44,470 --> 00:02:47,680
it could be logarithmic and it could be

49
00:02:47,680 --> 00:02:49,840
quadratic and so on so forth

50
00:02:49,840 --> 00:02:52,870
and there is pretty easier explanation

51
00:02:52,870 --> 00:02:55,480
about it with some emojis yeah

52
00:02:55,480 --> 00:02:58,650
constant time you're happy you probably

53
00:02:58,650 --> 00:03:02,260
couldn't do it even faster logarithmic

54
00:03:02,260 --> 00:03:09,460
good one linear okay and then you became

55
00:03:09,460 --> 00:03:13,150
more and more sad and those kind of

56
00:03:13,150 --> 00:03:15,910
content complexity or memory complexity

57
00:03:15,910 --> 00:03:18,970
means that you actually need to improve

58
00:03:18,970 --> 00:03:20,739
something or even write your code

59
00:03:20,739 --> 00:03:24,430
completely and we have to management's

60
00:03:24,430 --> 00:03:27,190
management's time and space complexity

61
00:03:27,190 --> 00:03:30,940
time stands for how many times it takes

62
00:03:30,940 --> 00:03:34,600
on some generic computer machine to

63
00:03:34,600 --> 00:03:37,870
execute your code we just thinking that

64
00:03:37,870 --> 00:03:40,650
we have some machine that executes one

65
00:03:40,650 --> 00:03:44,620
action fair-cheeked yeah and space

66
00:03:44,620 --> 00:03:47,170
complexity our memory usage we can

67
00:03:47,170 --> 00:03:49,750
predict how many memory we will utilize

68
00:03:49,750 --> 00:03:54,040
with our app so as I said before all

69
00:03:54,040 --> 00:03:57,130
these metrics will show us where is the

70
00:03:57,130 --> 00:03:59,140
bottleneck in our code what we should

71
00:03:59,140 --> 00:04:01,840
improve and the sink is with algorithm

72
00:04:01,840 --> 00:04:04,120
even if you have good enough or green

73
00:04:04,120 --> 00:04:07,390
there is a possibility to find a better

74
00:04:07,390 --> 00:04:11,440
one so there is no any limits even if

75
00:04:11,440 --> 00:04:15,760
you have some knowledge in computer

76
00:04:15,760 --> 00:04:18,609
science that there is the best algorithm

77
00:04:18,609 --> 00:04:21,190
you could use probably you can invent a

78
00:04:21,190 --> 00:04:25,230
new one better or more suited for your

79
00:04:25,230 --> 00:04:29,380
situation your application and the first

80
00:04:29,380 --> 00:04:31,600
thing I want to speak about is data

81
00:04:31,600 --> 00:04:35,140
normalization now it's common to use

82
00:04:35,140 --> 00:04:37,600
some state management tools like redox

83
00:04:37,600 --> 00:04:41,110
or NGO rigs whatever and it basically a

84
00:04:41,110 --> 00:04:44,340
big object containing all data sets and

85
00:04:44,340 --> 00:04:46,990
usually when you want to access some

86
00:04:46,990 --> 00:04:48,870
entities in list

87
00:04:48,870 --> 00:04:52,720
you won't do that as fast as possible

88
00:04:52,720 --> 00:04:55,750
and there is a technique called data

89
00:04:55,750 --> 00:05:00,790
normalization that allows you to have a

90
00:05:00,790 --> 00:05:04,140
constant time access to your entities

91
00:05:04,140 --> 00:05:07,260
basically what you do you remove your

92
00:05:07,260 --> 00:05:11,410
data from array to object with key of

93
00:05:11,410 --> 00:05:15,480
some ID and object as a value itself

94
00:05:15,480 --> 00:05:18,640
where we can use it when we have some

95
00:05:18,640 --> 00:05:23,040
related data entities in our store or

96
00:05:23,040 --> 00:05:26,350
any other kind of data when we have

97
00:05:26,350 --> 00:05:30,550
recursive entities and we want to have

98
00:05:30,550 --> 00:05:34,000
fast lookup through list of entities

99
00:05:34,000 --> 00:05:36,850
let's take a look of some examples for

100
00:05:36,850 --> 00:05:38,979
example data with relations imagine you

101
00:05:38,979 --> 00:05:42,070
have ecommerce website with some phone

102
00:05:42,070 --> 00:05:45,840
selling and each phone has a category it

103
00:05:45,840 --> 00:05:50,220
relates to so it's a relation between

104
00:05:50,220 --> 00:05:55,450
item in a cart and a category in your

105
00:05:55,450 --> 00:05:58,360
e-commerce shop recursive data

106
00:05:58,360 --> 00:06:01,180
structures your categories could have

107
00:06:01,180 --> 00:06:03,729
some subcategories and basically they

108
00:06:03,729 --> 00:06:06,490
should represent some kind of tree and

109
00:06:06,490 --> 00:06:10,090
this and this tree could have cycles as

110
00:06:10,090 --> 00:06:13,600
well sometimes so it's a recursive data

111
00:06:13,600 --> 00:06:19,240
set when we can and why we can use data

112
00:06:19,240 --> 00:06:21,790
normalization in such cases so for

113
00:06:21,790 --> 00:06:24,220
example we want to get some product body

114
00:06:24,220 --> 00:06:28,570
so instead of accessing and traversing

115
00:06:28,570 --> 00:06:31,090
through the list we just accessing it

116
00:06:31,090 --> 00:06:34,060
through ID the same when we want to get

117
00:06:34,060 --> 00:06:37,780
some categories by ID or products by

118
00:06:37,780 --> 00:06:38,830
category

119
00:06:38,830 --> 00:06:42,190
and actually we can reduce some memory

120
00:06:42,190 --> 00:06:45,520
footprint with that as well let's take a

121
00:06:45,520 --> 00:06:49,750
look in any service just need to update

122
00:06:49,750 --> 00:06:53,139
or select our data so for example we

123
00:06:53,139 --> 00:06:55,509
want to get a product body we have a

124
00:06:55,509 --> 00:06:58,780
list of products and we find in ID

125
00:06:58,780 --> 00:07:02,490
inside this list yes it should have a

126
00:07:02,490 --> 00:07:06,430
linear time complexity another thing we

127
00:07:06,430 --> 00:07:09,099
want to get all products related to some

128
00:07:09,099 --> 00:07:11,590
category so we going through all

129
00:07:11,590 --> 00:07:14,409
products and finding if the product

130
00:07:14,409 --> 00:07:17,139
related to some category and returning

131
00:07:17,139 --> 00:07:22,469
them interest it will take us n by n

132
00:07:22,469 --> 00:07:26,919
time complexity where the end could be a

133
00:07:26,919 --> 00:07:30,550
number of our products and M is number

134
00:07:30,550 --> 00:07:33,340
of our categories could be improve it

135
00:07:33,340 --> 00:07:37,090
and probably yeah and we also have a

136
00:07:37,090 --> 00:07:40,780
recursive access to categories for

137
00:07:40,780 --> 00:07:43,150
example if we are looking for category

138
00:07:43,150 --> 00:07:43,900
by ID

139
00:07:43,900 --> 00:07:47,349
we iterating through them until we find

140
00:07:47,349 --> 00:07:51,460
as a category we want and it could be

141
00:07:51,460 --> 00:07:55,900
linear time and also we could to use

142
00:07:55,900 --> 00:07:59,650
some memory because we have a recursive

143
00:07:59,650 --> 00:08:02,919
call stack that actually uses memory for

144
00:08:02,919 --> 00:08:07,990
each call else recursive code could look

145
00:08:07,990 --> 00:08:10,389
like this you go and deeper and deeper

146
00:08:10,389 --> 00:08:13,449
it's very more harder to maintain it

147
00:08:13,449 --> 00:08:17,620
an't right so this the things we want to

148
00:08:17,620 --> 00:08:22,569
improve so we can normalize our data

149
00:08:22,569 --> 00:08:25,210
instead of list of products we can keep

150
00:08:25,210 --> 00:08:28,930
products by its ID in an object and it

151
00:08:28,930 --> 00:08:31,599
will be immediate access the same we can

152
00:08:31,599 --> 00:08:35,349
do for categories also too if we need to

153
00:08:35,349 --> 00:08:38,860
keep the order of products we can keep

154
00:08:38,860 --> 00:08:42,940
the list of ID's to keep that order

155
00:08:42,940 --> 00:08:45,420
instead to have additional list with all

156
00:08:45,420 --> 00:08:47,740
objects the same we can do with

157
00:08:47,740 --> 00:08:51,190
scattegories let's take a look how our

158
00:08:51,190 --> 00:08:52,450
selectors they

159
00:08:52,450 --> 00:08:55,180
the selectors could look like four get

160
00:08:55,180 --> 00:08:58,320
product by D we just accessing our

161
00:08:58,320 --> 00:09:00,370
Kisuke of an object

162
00:09:00,370 --> 00:09:04,000
it's laning our time the same for

163
00:09:04,000 --> 00:09:07,720
categories and if we want to get

164
00:09:07,720 --> 00:09:11,800
categories by D be still have not the

165
00:09:11,800 --> 00:09:13,030
best solution yeah

166
00:09:13,030 --> 00:09:15,760
we're reducing the products by

167
00:09:15,760 --> 00:09:18,970
categories and so on that's a point we

168
00:09:18,970 --> 00:09:22,180
could improve even more and if you know

169
00:09:22,180 --> 00:09:25,570
about databases for fast searches we

170
00:09:25,570 --> 00:09:30,250
prepare indexes for search we can do

171
00:09:30,250 --> 00:09:32,740
pretty similar things with our data on

172
00:09:32,740 --> 00:09:36,670
client side so if we prepare the

173
00:09:36,670 --> 00:09:40,930
products IDs by category in some object

174
00:09:40,930 --> 00:09:45,300
we can have immediate access for it and

175
00:09:45,300 --> 00:09:49,330
after that we can easily get products by

176
00:09:49,330 --> 00:09:52,120
category just getting kills from the

177
00:09:52,120 --> 00:09:55,600
object and map it to and map product IDs

178
00:09:55,600 --> 00:10:00,400
to actual products and it will improve

179
00:10:00,400 --> 00:10:03,240
our time complexity to be linear one and

180
00:10:03,240 --> 00:10:06,130
I believe there are more and more

181
00:10:06,130 --> 00:10:08,080
different techniques to improve these

182
00:10:08,080 --> 00:10:12,520
things so how to use it in your code of

183
00:10:12,520 --> 00:10:16,360
course you can always do it yourself the

184
00:10:16,360 --> 00:10:19,690
code you could rely only it's only your

185
00:10:19,690 --> 00:10:22,900
code isn't it but they're a bunch of

186
00:10:22,900 --> 00:10:25,270
libraries for example for react you can

187
00:10:25,270 --> 00:10:27,370
use something like normally is roof for

188
00:10:27,370 --> 00:10:31,860
ng weeks you can use built in entity

189
00:10:31,860 --> 00:10:37,150
entity module and that's easy that's a

190
00:10:37,150 --> 00:10:39,340
very very important technique I want to

191
00:10:39,340 --> 00:10:42,130
speak about memorization memorization is

192
00:10:42,130 --> 00:10:45,520
the ability of some function to remember

193
00:10:45,520 --> 00:10:49,120
the results of previous calls sounds

194
00:10:49,120 --> 00:10:51,820
really easy well we can use it again

195
00:10:51,820 --> 00:10:55,240
when we work in this sons like redux and

196
00:10:55,240 --> 00:10:58,780
we return in completely new state on

197
00:10:58,780 --> 00:11:04,600
each state changes we can trigger the

198
00:11:04,600 --> 00:11:05,769
renders which

199
00:11:05,769 --> 00:11:08,529
Changez more often wear than they

200
00:11:08,529 --> 00:11:11,559
actually needed for examples we have

201
00:11:11,559 --> 00:11:14,649
some data selection that's really really

202
00:11:14,649 --> 00:11:18,220
deep in our store and if we change

203
00:11:18,220 --> 00:11:21,040
something different and that property we

204
00:11:21,040 --> 00:11:25,360
trigger changes on this subscription so

205
00:11:25,360 --> 00:11:27,489
for data selections we can use

206
00:11:27,489 --> 00:11:30,279
memorization for repeated commutations

207
00:11:30,279 --> 00:11:34,029
like you repeat some product

208
00:11:34,029 --> 00:11:36,309
I don't know hash or something like this

209
00:11:36,309 --> 00:11:40,239
you can catch this result if it computer

210
00:11:40,239 --> 00:11:43,989
CPU heavy computations and for derived

211
00:11:43,989 --> 00:11:47,259
data states as well the simplest example

212
00:11:47,259 --> 00:11:50,799
to explain normalization is Fibonacci

213
00:11:50,799 --> 00:11:55,480
numbers yeah we call them our function

214
00:11:55,480 --> 00:11:58,269
with recursive calls we optimize it with

215
00:11:58,269 --> 00:12:02,790
tail recursion and if we look on call 3

216
00:12:02,790 --> 00:12:05,499
these which arguments we call in our

217
00:12:05,499 --> 00:12:08,889
function we can see that we're repeating

218
00:12:08,889 --> 00:12:12,249
some computations all went over again

219
00:12:12,249 --> 00:12:16,059
and this is the work that we actually

220
00:12:16,059 --> 00:12:23,619
want to do again so to reduce recursive

221
00:12:23,619 --> 00:12:26,889
expensive calls we can use memorization

222
00:12:26,889 --> 00:12:30,459
and for frequently used data as well how

223
00:12:30,459 --> 00:12:32,259
it will look like for example with

224
00:12:32,259 --> 00:12:35,350
Fibonacci so we create another function

225
00:12:35,350 --> 00:12:38,230
that will return Fibonacci 1 and this

226
00:12:38,230 --> 00:12:41,679
function will contain some object for

227
00:12:41,679 --> 00:12:44,019
cashing results or it could be list

228
00:12:44,019 --> 00:12:48,329
actually in Fibonacci and if we already

229
00:12:48,329 --> 00:12:51,730
calculated the value for the past

230
00:12:51,730 --> 00:12:55,089
argument we just returning immediately

231
00:12:55,089 --> 00:12:57,429
value from the cache not computing

232
00:12:57,429 --> 00:13:01,749
anything again how we can use it of

233
00:13:01,749 --> 00:13:05,110
course we can do it ourselves every time

234
00:13:05,110 --> 00:13:08,079
but better solution to use some library

235
00:13:08,079 --> 00:13:10,899
like we select on them and the thing is

236
00:13:10,899 --> 00:13:14,649
that I show the some basic example of

237
00:13:14,649 --> 00:13:18,910
memorization but we have multi slotted

238
00:13:18,910 --> 00:13:19,520
memories

239
00:13:19,520 --> 00:13:21,920
Multi slaughtered and some libraries

240
00:13:21,920 --> 00:13:26,830
provide you a factory methods to create

241
00:13:26,830 --> 00:13:29,300
memorization customized for your needs

242
00:13:29,300 --> 00:13:32,480
so it's better to at least check those

243
00:13:32,480 --> 00:13:38,030
libraries and the next more interesting

244
00:13:38,030 --> 00:13:40,340
things that I want to show levenshtein

245
00:13:40,340 --> 00:13:43,240
distance algorithm and how to improve

246
00:13:43,240 --> 00:13:49,700
some user experience with it so what is

247
00:13:49,700 --> 00:13:53,590
levenshtein distance if the algorithm

248
00:13:53,590 --> 00:13:57,440
place how many edits you need to perform

249
00:13:57,440 --> 00:14:01,040
to create one string from another it

250
00:14:01,040 --> 00:14:03,830
calculates the number of edits number of

251
00:14:03,830 --> 00:14:08,440
changes and it could be easily

252
00:14:08,440 --> 00:14:12,400
introduced by Albert Livingston yes

253
00:14:12,400 --> 00:14:15,260
everyone trusted information in over

254
00:14:15,260 --> 00:14:19,670
Internet yes now it was a Vadim a

255
00:14:19,670 --> 00:14:23,960
Livingston mathematician that created

256
00:14:23,960 --> 00:14:28,220
this algorithm in 1965 we can represent

257
00:14:28,220 --> 00:14:32,390
the work of this a grid with the matrix

258
00:14:32,390 --> 00:14:35,300
and actually be aphelion matrices when

259
00:14:35,300 --> 00:14:37,910
we have executed it so we have two

260
00:14:37,910 --> 00:14:41,180
boards Honda and Hyundai and for each

261
00:14:41,180 --> 00:14:43,790
letter in this world starting from the

262
00:14:43,790 --> 00:14:47,120
first one we calculating do we need to

263
00:14:47,120 --> 00:14:49,670
change something in target three strings

264
00:14:49,670 --> 00:14:53,060
to get the first one and at the end we

265
00:14:53,060 --> 00:14:55,760
get the number total number of these

266
00:14:55,760 --> 00:14:58,910
changes so in this case it will be three

267
00:14:58,910 --> 00:15:01,660
and that means the distance between

268
00:15:01,660 --> 00:15:06,610
those two strings will be three and

269
00:15:06,610 --> 00:15:09,110
actually this algorithm out that

270
00:15:09,110 --> 00:15:11,540
complicated sounds like such a lines of

271
00:15:11,540 --> 00:15:17,240
code and the interesting story how I

272
00:15:17,240 --> 00:15:19,850
found this algorithm I was looking to

273
00:15:19,850 --> 00:15:24,020
some source code of angular UI and I've

274
00:15:24,020 --> 00:15:27,620
seen how they provide outer correction

275
00:15:27,620 --> 00:15:30,860
for comments so they have a list of

276
00:15:30,860 --> 00:15:32,930
comments and if you get a typo

277
00:15:32,930 --> 00:15:33,350
they

278
00:15:33,350 --> 00:15:35,870
suggest you and as a comment that

279
00:15:35,870 --> 00:15:38,900
probably you want to execute and for

280
00:15:38,900 --> 00:15:41,050
that they using levenshtein distance

281
00:15:41,050 --> 00:15:46,610
algorithm so when it oftenly used so two

282
00:15:46,610 --> 00:15:49,630
for after correction after completion or

283
00:15:49,630 --> 00:15:52,880
smart suggestions for example keyboards

284
00:15:52,880 --> 00:15:59,210
or Szalai tools or after correction in

285
00:15:59,210 --> 00:16:03,920
text editor and who's how to look like

286
00:16:03,920 --> 00:16:07,160
for example indeed if you try to call

287
00:16:07,160 --> 00:16:11,090
get claim instead clone it will suggest

288
00:16:11,090 --> 00:16:15,170
you that hey you might want to execute

289
00:16:15,170 --> 00:16:19,850
clone command and the example in angular

290
00:16:19,850 --> 00:16:22,400
sly where I found actually and treat

291
00:16:22,400 --> 00:16:25,370
about levenshtein distance algorithm so

292
00:16:25,370 --> 00:16:29,300
if I call to generate some component it

293
00:16:29,300 --> 00:16:32,720
suggest me generate comment and it's

294
00:16:32,720 --> 00:16:35,960
fast but let's try to use levenshtein

295
00:16:35,960 --> 00:16:39,530
distance algorithm to create smart for

296
00:16:39,530 --> 00:16:44,360
zero for pages and to prove our uux what

297
00:16:44,360 --> 00:16:47,330
is the problem this usual standard for

298
00:16:47,330 --> 00:16:51,410
zero for page we get a type of for

299
00:16:51,410 --> 00:16:54,830
example or link is already broken or was

300
00:16:54,830 --> 00:16:57,710
changed on back end and we hit an enter

301
00:16:57,710 --> 00:17:00,980
and we get some helpful you Ivy's

302
00:17:00,980 --> 00:17:02,990
kitties yes

303
00:17:02,990 --> 00:17:05,360
it's very useful we can watch for a

304
00:17:05,360 --> 00:17:08,390
while and completely forget what we want

305
00:17:08,390 --> 00:17:12,160
to do but that's it solve any problem

306
00:17:12,160 --> 00:17:16,520
probably not what we can do instead we

307
00:17:16,520 --> 00:17:22,310
can suggest you sir proper link here's a

308
00:17:22,310 --> 00:17:23,210
simple example

309
00:17:23,210 --> 00:17:30,830
I have an application oh it won't play

310
00:17:30,830 --> 00:17:33,410
the video ok I have an application just

311
00:17:33,410 --> 00:17:37,340
few links home about contacts yeah so

312
00:17:37,340 --> 00:17:41,150
let's make a typo for example hain and

313
00:17:41,150 --> 00:17:43,610
at the bottom of the page I have a

314
00:17:43,610 --> 00:17:46,809
suggestion for user sorry

315
00:17:46,809 --> 00:17:49,870
you probably made a typo did you mean

316
00:17:49,870 --> 00:17:54,399
about page or we can type contract in

317
00:17:54,399 --> 00:18:00,610
instead contact and we will be

318
00:18:00,610 --> 00:18:04,870
redirected to correct page so it's

319
00:18:04,870 --> 00:18:08,049
actually will solve problem for user it

320
00:18:08,049 --> 00:18:11,289
will have some value for them so why not

321
00:18:11,289 --> 00:18:14,649
to improve our 4:04 pages with this

322
00:18:14,649 --> 00:18:17,320
algorithm how we actually how it's

323
00:18:17,320 --> 00:18:21,999
working so usually we have some listing

324
00:18:21,999 --> 00:18:24,789
of all roads we have in our application

325
00:18:24,789 --> 00:18:28,990
we can gather them in some list then we

326
00:18:28,990 --> 00:18:32,799
can sort them by levenshtein distance

327
00:18:32,799 --> 00:18:37,240
will calculate it to user input so user

328
00:18:37,240 --> 00:18:41,110
meta title yeah came instead home then

329
00:18:41,110 --> 00:18:44,409
we have abolition of all possible roads

330
00:18:44,409 --> 00:18:47,230
and we sort them by Livingstone distance

331
00:18:47,230 --> 00:18:50,619
to Haines and probably the first one

332
00:18:50,619 --> 00:18:53,669
will be the correct one in our case home

333
00:18:53,669 --> 00:18:56,619
so we can return this value to the user

334
00:18:56,619 --> 00:18:59,730
and create a link to the correct page

335
00:18:59,730 --> 00:19:03,610
how it looks like in code for example

336
00:19:03,610 --> 00:19:08,139
for this demo I have home about contact

337
00:19:08,139 --> 00:19:14,710
is just some hash map with strings of

338
00:19:14,710 --> 00:19:18,940
passable roads then I have a surgeon so

339
00:19:18,940 --> 00:19:20,889
I have a type of path and I have

340
00:19:20,889 --> 00:19:23,649
dictionaries that I prepared that's all

341
00:19:23,649 --> 00:19:27,999
the possible paths in my Rochin and then

342
00:19:27,999 --> 00:19:30,549
I sort in it using levenshtein distance

343
00:19:30,549 --> 00:19:36,159
al green but to prevent calls of that I

344
00:19:36,159 --> 00:19:38,470
already did computations that I did for

345
00:19:38,470 --> 00:19:42,820
already did I question them so if there

346
00:19:42,820 --> 00:19:45,869
is no computed value in cash i

347
00:19:45,869 --> 00:19:49,119
recalculate it otherwise i just return

348
00:19:49,119 --> 00:19:53,049
the difference and the last step we take

349
00:19:53,049 --> 00:19:58,179
in our pass with half our rows and I

350
00:19:58,179 --> 00:20:00,310
also introduce some threshold for

351
00:20:00,310 --> 00:20:03,990
if the levenshtein distance is too big

352
00:20:03,990 --> 00:20:08,070
it's probably completely different word

353
00:20:08,070 --> 00:20:13,770
so I have a threshold and if it is our

354
00:20:13,770 --> 00:20:16,210
suggested value is below this threshold

355
00:20:16,210 --> 00:20:19,630
I just return nothing just standard

356
00:20:19,630 --> 00:20:21,160
kittens or something

357
00:20:21,160 --> 00:20:23,500
otherwise I will return the first item

358
00:20:23,500 --> 00:20:27,580
that's the most closed world and this

359
00:20:27,580 --> 00:20:30,700
thing shows us that we can use something

360
00:20:30,700 --> 00:20:34,150
like our grids and apply it to some

361
00:20:34,150 --> 00:20:38,920
unexpected user cases to create some

362
00:20:38,920 --> 00:20:42,280
value for the end users that's also the

363
00:20:42,280 --> 00:20:44,440
case why you should actually care about

364
00:20:44,440 --> 00:20:47,770
our greens why they're great why they're

365
00:20:47,770 --> 00:20:53,530
cool so I want you to come home and just

366
00:20:53,530 --> 00:20:56,350
try to find some interesting problem and

367
00:20:56,350 --> 00:20:58,840
find some algorithms to solve this or

368
00:20:58,840 --> 00:21:02,520
maybe create your own solution for that

369
00:21:02,520 --> 00:21:06,040
reinvent it and maybe in a few years who

370
00:21:06,040 --> 00:21:08,800
knows we will use your alga algorithm to

371
00:21:08,800 --> 00:21:12,850
solve our UI problems that's all that I

372
00:21:12,850 --> 00:21:13,930
have for today

373
00:21:13,930 --> 00:21:16,870
thank you very much and do your auguries

